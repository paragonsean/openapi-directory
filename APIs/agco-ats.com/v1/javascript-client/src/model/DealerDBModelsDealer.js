/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DealerDBModelsDealer model module.
 * @module model/DealerDBModelsDealer
 * @version v1
 */
class DealerDBModelsDealer {
    /**
     * Constructs a new <code>DealerDBModelsDealer</code>.
     * @alias module:model/DealerDBModelsDealer
     */
    constructor() { 
        
        DealerDBModelsDealer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DealerDBModelsDealer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DealerDBModelsDealer} obj Optional instance to populate.
     * @return {module:model/DealerDBModelsDealer} The populated <code>DealerDBModelsDealer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DealerDBModelsDealer();

            if (data.hasOwnProperty('BillingAddress')) {
                obj['BillingAddress'] = ApiClient.convertToType(data['BillingAddress'], 'String');
            }
            if (data.hasOwnProperty('BillingAddress2')) {
                obj['BillingAddress2'] = ApiClient.convertToType(data['BillingAddress2'], 'String');
            }
            if (data.hasOwnProperty('BillingAddress3')) {
                obj['BillingAddress3'] = ApiClient.convertToType(data['BillingAddress3'], 'String');
            }
            if (data.hasOwnProperty('BillingAddress4')) {
                obj['BillingAddress4'] = ApiClient.convertToType(data['BillingAddress4'], 'String');
            }
            if (data.hasOwnProperty('BillingCity')) {
                obj['BillingCity'] = ApiClient.convertToType(data['BillingCity'], 'String');
            }
            if (data.hasOwnProperty('BillingCountry')) {
                obj['BillingCountry'] = ApiClient.convertToType(data['BillingCountry'], 'String');
            }
            if (data.hasOwnProperty('BillingCountryCode')) {
                obj['BillingCountryCode'] = ApiClient.convertToType(data['BillingCountryCode'], 'String');
            }
            if (data.hasOwnProperty('BillingState')) {
                obj['BillingState'] = ApiClient.convertToType(data['BillingState'], 'String');
            }
            if (data.hasOwnProperty('BillingZip')) {
                obj['BillingZip'] = ApiClient.convertToType(data['BillingZip'], 'String');
            }
            if (data.hasOwnProperty('Brands')) {
                obj['Brands'] = ApiClient.convertToType(data['Brands'], ['String']);
            }
            if (data.hasOwnProperty('DealerCode')) {
                obj['DealerCode'] = ApiClient.convertToType(data['DealerCode'], 'String');
            }
            if (data.hasOwnProperty('DealerName')) {
                obj['DealerName'] = ApiClient.convertToType(data['DealerName'], 'String');
            }
            if (data.hasOwnProperty('DealerStatus')) {
                obj['DealerStatus'] = ApiClient.convertToType(data['DealerStatus'], 'String');
            }
            if (data.hasOwnProperty('DealerStatusUpdateDate')) {
                obj['DealerStatusUpdateDate'] = ApiClient.convertToType(data['DealerStatusUpdateDate'], 'String');
            }
            if (data.hasOwnProperty('Filler')) {
                obj['Filler'] = ApiClient.convertToType(data['Filler'], 'String');
            }
            if (data.hasOwnProperty('IsValid')) {
                obj['IsValid'] = ApiClient.convertToType(data['IsValid'], 'Boolean');
            }
            if (data.hasOwnProperty('LanguagePreference')) {
                obj['LanguagePreference'] = ApiClient.convertToType(data['LanguagePreference'], 'String');
            }
            if (data.hasOwnProperty('Region1')) {
                obj['Region1'] = ApiClient.convertToType(data['Region1'], 'String');
            }
            if (data.hasOwnProperty('Region2')) {
                obj['Region2'] = ApiClient.convertToType(data['Region2'], 'String');
            }
            if (data.hasOwnProperty('RegionMapping')) {
                obj['RegionMapping'] = ApiClient.convertToType(data['RegionMapping'], 'String');
            }
            if (data.hasOwnProperty('RoleBrand')) {
                obj['RoleBrand'] = ApiClient.convertToType(data['RoleBrand'], 'String');
            }
            if (data.hasOwnProperty('ShippingAddress2')) {
                obj['ShippingAddress2'] = ApiClient.convertToType(data['ShippingAddress2'], 'String');
            }
            if (data.hasOwnProperty('ShippingAddress3')) {
                obj['ShippingAddress3'] = ApiClient.convertToType(data['ShippingAddress3'], 'String');
            }
            if (data.hasOwnProperty('ShippingAddress4')) {
                obj['ShippingAddress4'] = ApiClient.convertToType(data['ShippingAddress4'], 'String');
            }
            if (data.hasOwnProperty('ShippingCity')) {
                obj['ShippingCity'] = ApiClient.convertToType(data['ShippingCity'], 'String');
            }
            if (data.hasOwnProperty('ShippingCountry')) {
                obj['ShippingCountry'] = ApiClient.convertToType(data['ShippingCountry'], 'String');
            }
            if (data.hasOwnProperty('ShippingState')) {
                obj['ShippingState'] = ApiClient.convertToType(data['ShippingState'], 'String');
            }
            if (data.hasOwnProperty('ShippingStreet')) {
                obj['ShippingStreet'] = ApiClient.convertToType(data['ShippingStreet'], 'String');
            }
            if (data.hasOwnProperty('ShippingZip')) {
                obj['ShippingZip'] = ApiClient.convertToType(data['ShippingZip'], 'String');
            }
            if (data.hasOwnProperty('Telephone')) {
                obj['Telephone'] = ApiClient.convertToType(data['Telephone'], 'String');
            }
            if (data.hasOwnProperty('VATCode')) {
                obj['VATCode'] = ApiClient.convertToType(data['VATCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DealerDBModelsDealer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DealerDBModelsDealer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['BillingAddress'] && !(typeof data['BillingAddress'] === 'string' || data['BillingAddress'] instanceof String)) {
            throw new Error("Expected the field `BillingAddress` to be a primitive type in the JSON string but got " + data['BillingAddress']);
        }
        // ensure the json data is a string
        if (data['BillingAddress2'] && !(typeof data['BillingAddress2'] === 'string' || data['BillingAddress2'] instanceof String)) {
            throw new Error("Expected the field `BillingAddress2` to be a primitive type in the JSON string but got " + data['BillingAddress2']);
        }
        // ensure the json data is a string
        if (data['BillingAddress3'] && !(typeof data['BillingAddress3'] === 'string' || data['BillingAddress3'] instanceof String)) {
            throw new Error("Expected the field `BillingAddress3` to be a primitive type in the JSON string but got " + data['BillingAddress3']);
        }
        // ensure the json data is a string
        if (data['BillingAddress4'] && !(typeof data['BillingAddress4'] === 'string' || data['BillingAddress4'] instanceof String)) {
            throw new Error("Expected the field `BillingAddress4` to be a primitive type in the JSON string but got " + data['BillingAddress4']);
        }
        // ensure the json data is a string
        if (data['BillingCity'] && !(typeof data['BillingCity'] === 'string' || data['BillingCity'] instanceof String)) {
            throw new Error("Expected the field `BillingCity` to be a primitive type in the JSON string but got " + data['BillingCity']);
        }
        // ensure the json data is a string
        if (data['BillingCountry'] && !(typeof data['BillingCountry'] === 'string' || data['BillingCountry'] instanceof String)) {
            throw new Error("Expected the field `BillingCountry` to be a primitive type in the JSON string but got " + data['BillingCountry']);
        }
        // ensure the json data is a string
        if (data['BillingCountryCode'] && !(typeof data['BillingCountryCode'] === 'string' || data['BillingCountryCode'] instanceof String)) {
            throw new Error("Expected the field `BillingCountryCode` to be a primitive type in the JSON string but got " + data['BillingCountryCode']);
        }
        // ensure the json data is a string
        if (data['BillingState'] && !(typeof data['BillingState'] === 'string' || data['BillingState'] instanceof String)) {
            throw new Error("Expected the field `BillingState` to be a primitive type in the JSON string but got " + data['BillingState']);
        }
        // ensure the json data is a string
        if (data['BillingZip'] && !(typeof data['BillingZip'] === 'string' || data['BillingZip'] instanceof String)) {
            throw new Error("Expected the field `BillingZip` to be a primitive type in the JSON string but got " + data['BillingZip']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Brands'])) {
            throw new Error("Expected the field `Brands` to be an array in the JSON data but got " + data['Brands']);
        }
        // ensure the json data is a string
        if (data['DealerCode'] && !(typeof data['DealerCode'] === 'string' || data['DealerCode'] instanceof String)) {
            throw new Error("Expected the field `DealerCode` to be a primitive type in the JSON string but got " + data['DealerCode']);
        }
        // ensure the json data is a string
        if (data['DealerName'] && !(typeof data['DealerName'] === 'string' || data['DealerName'] instanceof String)) {
            throw new Error("Expected the field `DealerName` to be a primitive type in the JSON string but got " + data['DealerName']);
        }
        // ensure the json data is a string
        if (data['DealerStatus'] && !(typeof data['DealerStatus'] === 'string' || data['DealerStatus'] instanceof String)) {
            throw new Error("Expected the field `DealerStatus` to be a primitive type in the JSON string but got " + data['DealerStatus']);
        }
        // ensure the json data is a string
        if (data['DealerStatusUpdateDate'] && !(typeof data['DealerStatusUpdateDate'] === 'string' || data['DealerStatusUpdateDate'] instanceof String)) {
            throw new Error("Expected the field `DealerStatusUpdateDate` to be a primitive type in the JSON string but got " + data['DealerStatusUpdateDate']);
        }
        // ensure the json data is a string
        if (data['Filler'] && !(typeof data['Filler'] === 'string' || data['Filler'] instanceof String)) {
            throw new Error("Expected the field `Filler` to be a primitive type in the JSON string but got " + data['Filler']);
        }
        // ensure the json data is a string
        if (data['LanguagePreference'] && !(typeof data['LanguagePreference'] === 'string' || data['LanguagePreference'] instanceof String)) {
            throw new Error("Expected the field `LanguagePreference` to be a primitive type in the JSON string but got " + data['LanguagePreference']);
        }
        // ensure the json data is a string
        if (data['Region1'] && !(typeof data['Region1'] === 'string' || data['Region1'] instanceof String)) {
            throw new Error("Expected the field `Region1` to be a primitive type in the JSON string but got " + data['Region1']);
        }
        // ensure the json data is a string
        if (data['Region2'] && !(typeof data['Region2'] === 'string' || data['Region2'] instanceof String)) {
            throw new Error("Expected the field `Region2` to be a primitive type in the JSON string but got " + data['Region2']);
        }
        // ensure the json data is a string
        if (data['RegionMapping'] && !(typeof data['RegionMapping'] === 'string' || data['RegionMapping'] instanceof String)) {
            throw new Error("Expected the field `RegionMapping` to be a primitive type in the JSON string but got " + data['RegionMapping']);
        }
        // ensure the json data is a string
        if (data['RoleBrand'] && !(typeof data['RoleBrand'] === 'string' || data['RoleBrand'] instanceof String)) {
            throw new Error("Expected the field `RoleBrand` to be a primitive type in the JSON string but got " + data['RoleBrand']);
        }
        // ensure the json data is a string
        if (data['ShippingAddress2'] && !(typeof data['ShippingAddress2'] === 'string' || data['ShippingAddress2'] instanceof String)) {
            throw new Error("Expected the field `ShippingAddress2` to be a primitive type in the JSON string but got " + data['ShippingAddress2']);
        }
        // ensure the json data is a string
        if (data['ShippingAddress3'] && !(typeof data['ShippingAddress3'] === 'string' || data['ShippingAddress3'] instanceof String)) {
            throw new Error("Expected the field `ShippingAddress3` to be a primitive type in the JSON string but got " + data['ShippingAddress3']);
        }
        // ensure the json data is a string
        if (data['ShippingAddress4'] && !(typeof data['ShippingAddress4'] === 'string' || data['ShippingAddress4'] instanceof String)) {
            throw new Error("Expected the field `ShippingAddress4` to be a primitive type in the JSON string but got " + data['ShippingAddress4']);
        }
        // ensure the json data is a string
        if (data['ShippingCity'] && !(typeof data['ShippingCity'] === 'string' || data['ShippingCity'] instanceof String)) {
            throw new Error("Expected the field `ShippingCity` to be a primitive type in the JSON string but got " + data['ShippingCity']);
        }
        // ensure the json data is a string
        if (data['ShippingCountry'] && !(typeof data['ShippingCountry'] === 'string' || data['ShippingCountry'] instanceof String)) {
            throw new Error("Expected the field `ShippingCountry` to be a primitive type in the JSON string but got " + data['ShippingCountry']);
        }
        // ensure the json data is a string
        if (data['ShippingState'] && !(typeof data['ShippingState'] === 'string' || data['ShippingState'] instanceof String)) {
            throw new Error("Expected the field `ShippingState` to be a primitive type in the JSON string but got " + data['ShippingState']);
        }
        // ensure the json data is a string
        if (data['ShippingStreet'] && !(typeof data['ShippingStreet'] === 'string' || data['ShippingStreet'] instanceof String)) {
            throw new Error("Expected the field `ShippingStreet` to be a primitive type in the JSON string but got " + data['ShippingStreet']);
        }
        // ensure the json data is a string
        if (data['ShippingZip'] && !(typeof data['ShippingZip'] === 'string' || data['ShippingZip'] instanceof String)) {
            throw new Error("Expected the field `ShippingZip` to be a primitive type in the JSON string but got " + data['ShippingZip']);
        }
        // ensure the json data is a string
        if (data['Telephone'] && !(typeof data['Telephone'] === 'string' || data['Telephone'] instanceof String)) {
            throw new Error("Expected the field `Telephone` to be a primitive type in the JSON string but got " + data['Telephone']);
        }
        // ensure the json data is a string
        if (data['VATCode'] && !(typeof data['VATCode'] === 'string' || data['VATCode'] instanceof String)) {
            throw new Error("Expected the field `VATCode` to be a primitive type in the JSON string but got " + data['VATCode']);
        }

        return true;
    }


}



/**
 * @member {String} BillingAddress
 */
DealerDBModelsDealer.prototype['BillingAddress'] = undefined;

/**
 * @member {String} BillingAddress2
 */
DealerDBModelsDealer.prototype['BillingAddress2'] = undefined;

/**
 * @member {String} BillingAddress3
 */
DealerDBModelsDealer.prototype['BillingAddress3'] = undefined;

/**
 * @member {String} BillingAddress4
 */
DealerDBModelsDealer.prototype['BillingAddress4'] = undefined;

/**
 * @member {String} BillingCity
 */
DealerDBModelsDealer.prototype['BillingCity'] = undefined;

/**
 * @member {String} BillingCountry
 */
DealerDBModelsDealer.prototype['BillingCountry'] = undefined;

/**
 * @member {String} BillingCountryCode
 */
DealerDBModelsDealer.prototype['BillingCountryCode'] = undefined;

/**
 * @member {String} BillingState
 */
DealerDBModelsDealer.prototype['BillingState'] = undefined;

/**
 * @member {String} BillingZip
 */
DealerDBModelsDealer.prototype['BillingZip'] = undefined;

/**
 * @member {Array.<String>} Brands
 */
DealerDBModelsDealer.prototype['Brands'] = undefined;

/**
 * @member {String} DealerCode
 */
DealerDBModelsDealer.prototype['DealerCode'] = undefined;

/**
 * @member {String} DealerName
 */
DealerDBModelsDealer.prototype['DealerName'] = undefined;

/**
 * @member {String} DealerStatus
 */
DealerDBModelsDealer.prototype['DealerStatus'] = undefined;

/**
 * @member {String} DealerStatusUpdateDate
 */
DealerDBModelsDealer.prototype['DealerStatusUpdateDate'] = undefined;

/**
 * @member {String} Filler
 */
DealerDBModelsDealer.prototype['Filler'] = undefined;

/**
 * @member {Boolean} IsValid
 */
DealerDBModelsDealer.prototype['IsValid'] = undefined;

/**
 * @member {String} LanguagePreference
 */
DealerDBModelsDealer.prototype['LanguagePreference'] = undefined;

/**
 * @member {String} Region1
 */
DealerDBModelsDealer.prototype['Region1'] = undefined;

/**
 * @member {String} Region2
 */
DealerDBModelsDealer.prototype['Region2'] = undefined;

/**
 * @member {String} RegionMapping
 */
DealerDBModelsDealer.prototype['RegionMapping'] = undefined;

/**
 * @member {String} RoleBrand
 */
DealerDBModelsDealer.prototype['RoleBrand'] = undefined;

/**
 * @member {String} ShippingAddress2
 */
DealerDBModelsDealer.prototype['ShippingAddress2'] = undefined;

/**
 * @member {String} ShippingAddress3
 */
DealerDBModelsDealer.prototype['ShippingAddress3'] = undefined;

/**
 * @member {String} ShippingAddress4
 */
DealerDBModelsDealer.prototype['ShippingAddress4'] = undefined;

/**
 * @member {String} ShippingCity
 */
DealerDBModelsDealer.prototype['ShippingCity'] = undefined;

/**
 * @member {String} ShippingCountry
 */
DealerDBModelsDealer.prototype['ShippingCountry'] = undefined;

/**
 * @member {String} ShippingState
 */
DealerDBModelsDealer.prototype['ShippingState'] = undefined;

/**
 * @member {String} ShippingStreet
 */
DealerDBModelsDealer.prototype['ShippingStreet'] = undefined;

/**
 * @member {String} ShippingZip
 */
DealerDBModelsDealer.prototype['ShippingZip'] = undefined;

/**
 * @member {String} Telephone
 */
DealerDBModelsDealer.prototype['Telephone'] = undefined;

/**
 * @member {String} VATCode
 */
DealerDBModelsDealer.prototype['VATCode'] = undefined;






export default DealerDBModelsDealer;

