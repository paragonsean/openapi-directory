/**
 * AGCO API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AgcoApi);
  }
}(this, function(expect, AgcoApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AgcoApi.AuthorizationCategoriesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AuthorizationCategoriesApi', function() {
    describe('authorizationCategoriesAddUser', function() {
      it('should call authorizationCategoriesAddUser successfully', function(done) {
        //uncomment below and update the code to test authorizationCategoriesAddUser
        //instance.authorizationCategoriesAddUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authorizationCategoriesDelete', function() {
      it('should call authorizationCategoriesDelete successfully', function(done) {
        //uncomment below and update the code to test authorizationCategoriesDelete
        //instance.authorizationCategoriesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authorizationCategoriesGet', function() {
      it('should call authorizationCategoriesGet successfully', function(done) {
        //uncomment below and update the code to test authorizationCategoriesGet
        //instance.authorizationCategoriesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authorizationCategoriesGetUsers', function() {
      it('should call authorizationCategoriesGetUsers successfully', function(done) {
        //uncomment below and update the code to test authorizationCategoriesGetUsers
        //instance.authorizationCategoriesGetUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authorizationCategoriesPost', function() {
      it('should call authorizationCategoriesPost successfully', function(done) {
        //uncomment below and update the code to test authorizationCategoriesPost
        //instance.authorizationCategoriesPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authorizationCategoriesPut', function() {
      it('should call authorizationCategoriesPut successfully', function(done) {
        //uncomment below and update the code to test authorizationCategoriesPut
        //instance.authorizationCategoriesPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authorizationCategoriesRemoveUser', function() {
      it('should call authorizationCategoriesRemoveUser successfully', function(done) {
        //uncomment below and update the code to test authorizationCategoriesRemoveUser
        //instance.authorizationCategoriesRemoveUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
