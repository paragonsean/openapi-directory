/**
 * Scrape Website Email API
 * ScrapeWebsiteEmail is a service that exposes an api to fetch e-mails from a website.
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* ScrapeEmails service.
* @module api/ScrapeEmailsApi
* @version 0.1
*/
export default class ScrapeEmailsApi {

    /**
    * Constructs a new ScrapeEmailsApi. 
    * @alias module:api/ScrapeEmailsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gETV1ScrapeEmailsFormat operation.
     * @callback module:api/ScrapeEmailsApi~gETV1ScrapeEmailsFormatCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of emails scraped by priority (ie. e-mails appear on top level pages are first). Please note that subsequent calls to the same url will be fetched from the <b>cache</b> (14 day flush). <br/><br/>Will also parse patterns such as hello[at]site.com, hello[at]site[dot]com, hello(at)site.com, hello(at)site(dot)com, hello @ site.com, hello @ site . com. <br/><br/>Please do note we cannot parse sites that require a login (for now), so for some Facebook pages it is not possible at the moment to fetch the e-mail.<br/><br/>Finally, please note that the api will fetch links for up to 2 minutes. After that time it will start analysing the pages which have been scraped. <b>Therefore</b> please ensure that your client has a timeout of at least <b>150 seconds</b> (2 mins to fetch and the rest to parse). <br/><br/><b>Please note</b> that due to the fact that the api goes out to fetch the pages, the server allows only 1 concurrent request/ip. Requests which are made while the 1 request is still processing will result in a 429 code.<br/><br/><b>Please note</b> that as of May 25, 2014, the main mechanism of tracking usage will be done via Mashape. You can get the free calls by signing up with the FREE plan.<br/><br/>Please visit <a href='https://www.mashape.com/tommytcchan/scrape-website-email'>https://www.mashape.com/tommytcchan/scrape-website-email</a>.<br/><br/><b>There is now a limit of 5 requests per day using this sample interface.</b><br/><br/>
     * @param {String} website <p>The website (ie. www.soundflair.com)</p> 
     * @param {Object} opts Optional parameters
     * @param {String} [mustInclude] <table>   <tbody>     <tr>       <td>Optional. The word(s) that the webpage must include (otherwise it will skip scraping that page). Good if you want to scrape only contact pages. Takes regex (ie. about</td>       <td>contact).</td>     </tr>   </tbody> </table> 
     * @param {module:api/ScrapeEmailsApi~gETV1ScrapeEmailsFormatCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETV1ScrapeEmailsFormat(website, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'website' is set
      if (website === undefined || website === null) {
        throw new Error("Missing the required parameter 'website' when calling gETV1ScrapeEmailsFormat");
      }

      let pathParams = {
      };
      let queryParams = {
        'website': website,
        'must_include': opts['mustInclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/scrape_emails.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
