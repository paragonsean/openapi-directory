/**
 * PDF Blocks API
 * PDF Blocks is a secure, reliable, and fast API to work with PDF documents. Actions include: Merge PDF documents, add or remove passwords, add watermarks, remove, extract, reverse, and rotate pages, and more.
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: support@pdfblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddPasswordV1_4XX_response.h"
#include "OAIHttpFileElement.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  image OAIHttpFileElement [required]
    * @param[in]  margin float [optional]
    * @param[in]  transparency qint32 [optional]
    */
    virtual void addImageWatermarkV1(const OAIHttpFileElement &file, const OAIHttpFileElement &image, const ::OpenAPI::OptionalParam<float> &margin = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &transparency = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  password QString [required]
    * @param[in]  encryption_algorithm QString [optional]
    */
    virtual void addPasswordV1(const OAIHttpFileElement &file, const QString &password, const ::OpenAPI::OptionalParam<QString> &encryption_algorithm = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  owner_password QString [required]
    * @param[in]  allow_accessibility bool [optional]
    * @param[in]  allow_assemble_document bool [optional]
    * @param[in]  allow_change_content bool [optional]
    * @param[in]  allow_comment_and_fill_form bool [optional]
    * @param[in]  allow_copy_content bool [optional]
    * @param[in]  allow_fill_form bool [optional]
    * @param[in]  allow_print bool [optional]
    * @param[in]  allow_print_high_resolution bool [optional]
    * @param[in]  encryption_algorithm QString [optional]
    * @param[in]  user_password QString [optional]
    */
    virtual void addRestrictionsV1(const OAIHttpFileElement &file, const QString &owner_password, const ::OpenAPI::OptionalParam<bool> &allow_accessibility = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_assemble_document = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_change_content = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_comment_and_fill_form = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_copy_content = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_fill_form = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_print_high_resolution = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &encryption_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_password = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  line_1 QString [required]
    * @param[in]  color QString [optional]
    * @param[in]  line_2 QString [optional]
    * @param[in]  line_3 QString [optional]
    * @param[in]  margin float [optional]
    * @param[in]  r_template qint32 [optional]
    * @param[in]  transparency qint32 [optional]
    */
    virtual void addTextWatermarkV1(const OAIHttpFileElement &file, const QString &line_1, const ::OpenAPI::OptionalParam<QString> &color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &line_2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &line_3 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &margin = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &r_template = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &transparency = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  first_page qint32 [optional]
    * @param[in]  last_page qint32 [optional]
    */
    virtual void extractPagesV1(const OAIHttpFileElement &file, const ::OpenAPI::OptionalParam<qint32> &first_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &last_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  file QList<OAIHttpFileElement> [optional]
    */
    virtual void mergeDocumentsV1(const ::OpenAPI::OptionalParam<QList<OAIHttpFileElement>> &file = ::OpenAPI::OptionalParam<QList<OAIHttpFileElement>>());

    /**
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  first_page qint32 [optional]
    * @param[in]  last_page qint32 [optional]
    */
    virtual void removePagesV1(const OAIHttpFileElement &file, const ::OpenAPI::OptionalParam<qint32> &first_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &last_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  password QString [required]
    */
    virtual void removePasswordV1(const OAIHttpFileElement &file, const QString &password);

    /**
    * @param[in]  file OAIHttpFileElement [required]
    */
    virtual void removeRestrictionsV1(const OAIHttpFileElement &file);

    /**
    * @param[in]  file OAIHttpFileElement [required]
    */
    virtual void removeSignaturesV1(const OAIHttpFileElement &file);

    /**
    * @param[in]  file OAIHttpFileElement [required]
    */
    virtual void reversePagesV1(const OAIHttpFileElement &file);

    /**
    * @param[in]  angle qint32 [required]
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  first_page qint32 [optional]
    * @param[in]  last_page qint32 [optional]
    */
    virtual void rotatePagesV1(const qint32 &angle, const OAIHttpFileElement &file, const ::OpenAPI::OptionalParam<qint32> &first_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &last_page = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addImageWatermarkV1Callback(OAIHttpRequestWorker *worker);
    void addPasswordV1Callback(OAIHttpRequestWorker *worker);
    void addRestrictionsV1Callback(OAIHttpRequestWorker *worker);
    void addTextWatermarkV1Callback(OAIHttpRequestWorker *worker);
    void extractPagesV1Callback(OAIHttpRequestWorker *worker);
    void mergeDocumentsV1Callback(OAIHttpRequestWorker *worker);
    void removePagesV1Callback(OAIHttpRequestWorker *worker);
    void removePasswordV1Callback(OAIHttpRequestWorker *worker);
    void removeRestrictionsV1Callback(OAIHttpRequestWorker *worker);
    void removeSignaturesV1Callback(OAIHttpRequestWorker *worker);
    void reversePagesV1Callback(OAIHttpRequestWorker *worker);
    void rotatePagesV1Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addImageWatermarkV1Signal(OAIHttpFileElement summary);
    void addPasswordV1Signal(OAIHttpFileElement summary);
    void addRestrictionsV1Signal(OAIHttpFileElement summary);
    void addTextWatermarkV1Signal(OAIHttpFileElement summary);
    void extractPagesV1Signal(OAIHttpFileElement summary);
    void mergeDocumentsV1Signal(OAIHttpFileElement summary);
    void removePagesV1Signal(OAIHttpFileElement summary);
    void removePasswordV1Signal(OAIHttpFileElement summary);
    void removeRestrictionsV1Signal(OAIHttpFileElement summary);
    void removeSignaturesV1Signal(OAIHttpFileElement summary);
    void reversePagesV1Signal(OAIHttpFileElement summary);
    void rotatePagesV1Signal(OAIHttpFileElement summary);


    void addImageWatermarkV1SignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void addPasswordV1SignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void addRestrictionsV1SignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void addTextWatermarkV1SignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void extractPagesV1SignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void mergeDocumentsV1SignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void removePagesV1SignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void removePasswordV1SignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void removeRestrictionsV1SignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void removeSignaturesV1SignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void reversePagesV1SignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void rotatePagesV1SignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);

    Q_DECL_DEPRECATED_X("Use addImageWatermarkV1SignalError() instead")
    void addImageWatermarkV1SignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addImageWatermarkV1SignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addPasswordV1SignalError() instead")
    void addPasswordV1SignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addPasswordV1SignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addRestrictionsV1SignalError() instead")
    void addRestrictionsV1SignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addRestrictionsV1SignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addTextWatermarkV1SignalError() instead")
    void addTextWatermarkV1SignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addTextWatermarkV1SignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extractPagesV1SignalError() instead")
    void extractPagesV1SignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extractPagesV1SignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mergeDocumentsV1SignalError() instead")
    void mergeDocumentsV1SignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mergeDocumentsV1SignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removePagesV1SignalError() instead")
    void removePagesV1SignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removePagesV1SignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removePasswordV1SignalError() instead")
    void removePasswordV1SignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removePasswordV1SignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeRestrictionsV1SignalError() instead")
    void removeRestrictionsV1SignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeRestrictionsV1SignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeSignaturesV1SignalError() instead")
    void removeSignaturesV1SignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeSignaturesV1SignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reversePagesV1SignalError() instead")
    void reversePagesV1SignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reversePagesV1SignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rotatePagesV1SignalError() instead")
    void rotatePagesV1SignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rotatePagesV1SignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addImageWatermarkV1SignalErrorFull() instead")
    void addImageWatermarkV1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addImageWatermarkV1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addPasswordV1SignalErrorFull() instead")
    void addPasswordV1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addPasswordV1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addRestrictionsV1SignalErrorFull() instead")
    void addRestrictionsV1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addRestrictionsV1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addTextWatermarkV1SignalErrorFull() instead")
    void addTextWatermarkV1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addTextWatermarkV1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extractPagesV1SignalErrorFull() instead")
    void extractPagesV1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extractPagesV1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mergeDocumentsV1SignalErrorFull() instead")
    void mergeDocumentsV1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mergeDocumentsV1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removePagesV1SignalErrorFull() instead")
    void removePagesV1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removePagesV1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removePasswordV1SignalErrorFull() instead")
    void removePasswordV1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removePasswordV1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeRestrictionsV1SignalErrorFull() instead")
    void removeRestrictionsV1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeRestrictionsV1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeSignaturesV1SignalErrorFull() instead")
    void removeSignaturesV1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeSignaturesV1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reversePagesV1SignalErrorFull() instead")
    void reversePagesV1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reversePagesV1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rotatePagesV1SignalErrorFull() instead")
    void rotatePagesV1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rotatePagesV1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
