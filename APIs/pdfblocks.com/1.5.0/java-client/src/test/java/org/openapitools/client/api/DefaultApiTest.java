/*
 * PDF Blocks API
 * PDF Blocks is a secure, reliable, and fast API to work with PDF documents. Actions include: Merge PDF documents, add or remove passwords, add watermarks, remove, extract, reverse, and rotate pages, and more.
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: support@pdfblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddPasswordV14XXResponse;
import java.io.File;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Add an image watermark to a PDF
     *
     * Add an image watermark to each page of a PDF document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addImageWatermarkV1Test() throws ApiException {
        File _file = null;
        File image = null;
        Float margin = null;
        Integer transparency = null;
        File response = api.addImageWatermarkV1(_file, image, margin, transparency);
        // TODO: test validations
    }

    /**
     * Add a password to a PDF
     *
     * Protect a PDF document with a password. Encrypt the PDF document to prevent unauthorized access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addPasswordV1Test() throws ApiException {
        File _file = null;
        String password = null;
        String encryptionAlgorithm = null;
        File response = api.addPasswordV1(_file, password, encryptionAlgorithm);
        // TODO: test validations
    }

    /**
     * Add restrictions to a PDF
     *
     * Add restrictions to prevent copying, printing, and modifying a PDF document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addRestrictionsV1Test() throws ApiException {
        File _file = null;
        String ownerPassword = null;
        Boolean allowAccessibility = null;
        Boolean allowAssembleDocument = null;
        Boolean allowChangeContent = null;
        Boolean allowCommentAndFillForm = null;
        Boolean allowCopyContent = null;
        Boolean allowFillForm = null;
        Boolean allowPrint = null;
        Boolean allowPrintHighResolution = null;
        String encryptionAlgorithm = null;
        String userPassword = null;
        File response = api.addRestrictionsV1(_file, ownerPassword, allowAccessibility, allowAssembleDocument, allowChangeContent, allowCommentAndFillForm, allowCopyContent, allowFillForm, allowPrint, allowPrintHighResolution, encryptionAlgorithm, userPassword);
        // TODO: test validations
    }

    /**
     * Add a text watermark to a PDF
     *
     * Add a text watermark to each page of a PDF document. Choose from several watermark templates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTextWatermarkV1Test() throws ApiException {
        File _file = null;
        String line1 = null;
        String color = null;
        String line2 = null;
        String line3 = null;
        Float margin = null;
        Integer template = null;
        Integer transparency = null;
        File response = api.addTextWatermarkV1(_file, line1, color, line2, line3, margin, template, transparency);
        // TODO: test validations
    }

    /**
     * Extract pages from a PDF
     *
     * Extract one or more pages from a PDF document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extractPagesV1Test() throws ApiException {
        File _file = null;
        Integer firstPage = null;
        Integer lastPage = null;
        File response = api.extractPagesV1(_file, firstPage, lastPage);
        // TODO: test validations
    }

    /**
     * Merge PDF documents
     *
     * Combine multiple PDF documents into a single PDF document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mergeDocumentsV1Test() throws ApiException {
        List<File> _file = null;
        File response = api.mergeDocumentsV1(_file);
        // TODO: test validations
    }

    /**
     * Remove pages from a PDF
     *
     * Remove one or more pages from a PDF document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removePagesV1Test() throws ApiException {
        File _file = null;
        Integer firstPage = null;
        Integer lastPage = null;
        File response = api.removePagesV1(_file, firstPage, lastPage);
        // TODO: test validations
    }

    /**
     * Remove the password from a PDF
     *
     * Remove the password from an encrypted PDF document. The PDF document will no longer require a password to open.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removePasswordV1Test() throws ApiException {
        File _file = null;
        String password = null;
        File response = api.removePasswordV1(_file, password);
        // TODO: test validations
    }

    /**
     * Remove the restrictions from a PDF
     *
     * Remove all the restrictions from a PDF document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeRestrictionsV1Test() throws ApiException {
        File _file = null;
        File response = api.removeRestrictionsV1(_file);
        // TODO: test validations
    }

    /**
     * Remove the signatures from a PDF
     *
     * Remove the cryptographic signatures and timestamps from a PDF document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeSignaturesV1Test() throws ApiException {
        File _file = null;
        File response = api.removeSignaturesV1(_file);
        // TODO: test validations
    }

    /**
     * Reverse the pages of a PDF
     *
     * Reverse the order of the pages of a PDF document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reversePagesV1Test() throws ApiException {
        File _file = null;
        File response = api.reversePagesV1(_file);
        // TODO: test validations
    }

    /**
     * Rotate pages in a PDF
     *
     * Rotate one or more pages in a PDF document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rotatePagesV1Test() throws ApiException {
        Integer angle = null;
        File _file = null;
        Integer firstPage = null;
        Integer lastPage = null;
        File response = api.rotatePagesV1(angle, _file, firstPage, lastPage);
        // TODO: test validations
    }

}
