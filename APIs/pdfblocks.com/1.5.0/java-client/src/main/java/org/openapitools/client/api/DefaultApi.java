/*
 * PDF Blocks API
 * PDF Blocks is a secure, reliable, and fast API to work with PDF documents. Actions include: Merge PDF documents, add or remove passwords, add watermarks, remove, extract, reverse, and rotate pages, and more.
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: support@pdfblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddPasswordV14XXResponse;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addImageWatermarkV1
     * @param _file The input PDF document (required)
     * @param image The image to add as a watermark. The format of the image can be either PNG or JPEG. (required)
     * @param margin The distance in inches from the border of the page to the image watermark. (optional, default to 1)
     * @param transparency The transparency level for the image watermark from 0 (opaque) to 100 (transparent). (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/add-watermark-image">Add an image watermark to a PDF Documentation</a>
     */
    public okhttp3.Call addImageWatermarkV1Call(File _file, File image, Float margin, Integer transparency, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/add_watermark/image";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (image != null) {
            localVarFormParams.put("image", image);
        }

        if (margin != null) {
            localVarFormParams.put("margin", margin);
        }

        if (transparency != null) {
            localVarFormParams.put("transparency", transparency);
        }

        final String[] localVarAccepts = {
            "application/pdf",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addImageWatermarkV1ValidateBeforeCall(File _file, File image, Float margin, Integer transparency, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling addImageWatermarkV1(Async)");
        }

        // verify the required parameter 'image' is set
        if (image == null) {
            throw new ApiException("Missing the required parameter 'image' when calling addImageWatermarkV1(Async)");
        }

        return addImageWatermarkV1Call(_file, image, margin, transparency, _callback);

    }

    /**
     * Add an image watermark to a PDF
     * Add an image watermark to each page of a PDF document.
     * @param _file The input PDF document (required)
     * @param image The image to add as a watermark. The format of the image can be either PNG or JPEG. (required)
     * @param margin The distance in inches from the border of the page to the image watermark. (optional, default to 1)
     * @param transparency The transparency level for the image watermark from 0 (opaque) to 100 (transparent). (optional, default to 50)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/add-watermark-image">Add an image watermark to a PDF Documentation</a>
     */
    public File addImageWatermarkV1(File _file, File image, Float margin, Integer transparency) throws ApiException {
        ApiResponse<File> localVarResp = addImageWatermarkV1WithHttpInfo(_file, image, margin, transparency);
        return localVarResp.getData();
    }

    /**
     * Add an image watermark to a PDF
     * Add an image watermark to each page of a PDF document.
     * @param _file The input PDF document (required)
     * @param image The image to add as a watermark. The format of the image can be either PNG or JPEG. (required)
     * @param margin The distance in inches from the border of the page to the image watermark. (optional, default to 1)
     * @param transparency The transparency level for the image watermark from 0 (opaque) to 100 (transparent). (optional, default to 50)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/add-watermark-image">Add an image watermark to a PDF Documentation</a>
     */
    public ApiResponse<File> addImageWatermarkV1WithHttpInfo(File _file, File image, Float margin, Integer transparency) throws ApiException {
        okhttp3.Call localVarCall = addImageWatermarkV1ValidateBeforeCall(_file, image, margin, transparency, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an image watermark to a PDF (asynchronously)
     * Add an image watermark to each page of a PDF document.
     * @param _file The input PDF document (required)
     * @param image The image to add as a watermark. The format of the image can be either PNG or JPEG. (required)
     * @param margin The distance in inches from the border of the page to the image watermark. (optional, default to 1)
     * @param transparency The transparency level for the image watermark from 0 (opaque) to 100 (transparent). (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/add-watermark-image">Add an image watermark to a PDF Documentation</a>
     */
    public okhttp3.Call addImageWatermarkV1Async(File _file, File image, Float margin, Integer transparency, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = addImageWatermarkV1ValidateBeforeCall(_file, image, margin, transparency, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addPasswordV1
     * @param _file The input PDF document (required)
     * @param password The password required to open the file. (required)
     * @param encryptionAlgorithm The algorithm used to encrypt the PDF document. (optional, default to AES-128)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/add-password">Add a password to a PDF Documentation</a>
     */
    public okhttp3.Call addPasswordV1Call(File _file, String password, String encryptionAlgorithm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/add_password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (encryptionAlgorithm != null) {
            localVarFormParams.put("encryption_algorithm", encryptionAlgorithm);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (password != null) {
            localVarFormParams.put("password", password);
        }

        final String[] localVarAccepts = {
            "application/pdf",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPasswordV1ValidateBeforeCall(File _file, String password, String encryptionAlgorithm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling addPasswordV1(Async)");
        }

        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling addPasswordV1(Async)");
        }

        return addPasswordV1Call(_file, password, encryptionAlgorithm, _callback);

    }

    /**
     * Add a password to a PDF
     * Protect a PDF document with a password. Encrypt the PDF document to prevent unauthorized access.
     * @param _file The input PDF document (required)
     * @param password The password required to open the file. (required)
     * @param encryptionAlgorithm The algorithm used to encrypt the PDF document. (optional, default to AES-128)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/add-password">Add a password to a PDF Documentation</a>
     */
    public File addPasswordV1(File _file, String password, String encryptionAlgorithm) throws ApiException {
        ApiResponse<File> localVarResp = addPasswordV1WithHttpInfo(_file, password, encryptionAlgorithm);
        return localVarResp.getData();
    }

    /**
     * Add a password to a PDF
     * Protect a PDF document with a password. Encrypt the PDF document to prevent unauthorized access.
     * @param _file The input PDF document (required)
     * @param password The password required to open the file. (required)
     * @param encryptionAlgorithm The algorithm used to encrypt the PDF document. (optional, default to AES-128)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/add-password">Add a password to a PDF Documentation</a>
     */
    public ApiResponse<File> addPasswordV1WithHttpInfo(File _file, String password, String encryptionAlgorithm) throws ApiException {
        okhttp3.Call localVarCall = addPasswordV1ValidateBeforeCall(_file, password, encryptionAlgorithm, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a password to a PDF (asynchronously)
     * Protect a PDF document with a password. Encrypt the PDF document to prevent unauthorized access.
     * @param _file The input PDF document (required)
     * @param password The password required to open the file. (required)
     * @param encryptionAlgorithm The algorithm used to encrypt the PDF document. (optional, default to AES-128)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/add-password">Add a password to a PDF Documentation</a>
     */
    public okhttp3.Call addPasswordV1Async(File _file, String password, String encryptionAlgorithm, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPasswordV1ValidateBeforeCall(_file, password, encryptionAlgorithm, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addRestrictionsV1
     * @param _file The input PDF document (required)
     * @param ownerPassword The password required to open and change permissions of the PDF document. (required)
     * @param allowAccessibility If false, accessibility programs can&#39;t read the text or images of the document. (optional, default to true)
     * @param allowAssembleDocument If false, the user can&#39;t assemble or manipulate the document. (optional, default to true)
     * @param allowChangeContent If false, the user can&#39;t change the content of the document. (optional, default to true)
     * @param allowCommentAndFillForm If false, the user can&#39;t add, edit or modify annotations or fill form fields. (optional, default to true)
     * @param allowCopyContent If false, the user can&#39;t copy text and images to the clipboard. (optional, default to true)
     * @param allowFillForm If false, the user can&#39;t fill forms fields. (optional, default to true)
     * @param allowPrint If false, the user can&#39;t print the document. (optional, default to true)
     * @param allowPrintHighResolution If false, the user can&#39;t print the document in high resolution. (optional, default to true)
     * @param encryptionAlgorithm The algorithm used to encrypt the PDF document. (optional, default to AES-128)
     * @param userPassword The password required to open the PDF document. If the &#x60;user_password&#x60; is not set, the user will be able to open the document without a password. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/add-restrictions">Add restrictions to a PDF Documentation</a>
     */
    public okhttp3.Call addRestrictionsV1Call(File _file, String ownerPassword, Boolean allowAccessibility, Boolean allowAssembleDocument, Boolean allowChangeContent, Boolean allowCommentAndFillForm, Boolean allowCopyContent, Boolean allowFillForm, Boolean allowPrint, Boolean allowPrintHighResolution, String encryptionAlgorithm, String userPassword, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/add_restrictions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (allowAccessibility != null) {
            localVarFormParams.put("allow_accessibility", allowAccessibility);
        }

        if (allowAssembleDocument != null) {
            localVarFormParams.put("allow_assemble_document", allowAssembleDocument);
        }

        if (allowChangeContent != null) {
            localVarFormParams.put("allow_change_content", allowChangeContent);
        }

        if (allowCommentAndFillForm != null) {
            localVarFormParams.put("allow_comment_and_fill_form", allowCommentAndFillForm);
        }

        if (allowCopyContent != null) {
            localVarFormParams.put("allow_copy_content", allowCopyContent);
        }

        if (allowFillForm != null) {
            localVarFormParams.put("allow_fill_form", allowFillForm);
        }

        if (allowPrint != null) {
            localVarFormParams.put("allow_print", allowPrint);
        }

        if (allowPrintHighResolution != null) {
            localVarFormParams.put("allow_print_high_resolution", allowPrintHighResolution);
        }

        if (encryptionAlgorithm != null) {
            localVarFormParams.put("encryption_algorithm", encryptionAlgorithm);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (ownerPassword != null) {
            localVarFormParams.put("owner_password", ownerPassword);
        }

        if (userPassword != null) {
            localVarFormParams.put("user_password", userPassword);
        }

        final String[] localVarAccepts = {
            "application/pdf",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addRestrictionsV1ValidateBeforeCall(File _file, String ownerPassword, Boolean allowAccessibility, Boolean allowAssembleDocument, Boolean allowChangeContent, Boolean allowCommentAndFillForm, Boolean allowCopyContent, Boolean allowFillForm, Boolean allowPrint, Boolean allowPrintHighResolution, String encryptionAlgorithm, String userPassword, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling addRestrictionsV1(Async)");
        }

        // verify the required parameter 'ownerPassword' is set
        if (ownerPassword == null) {
            throw new ApiException("Missing the required parameter 'ownerPassword' when calling addRestrictionsV1(Async)");
        }

        return addRestrictionsV1Call(_file, ownerPassword, allowAccessibility, allowAssembleDocument, allowChangeContent, allowCommentAndFillForm, allowCopyContent, allowFillForm, allowPrint, allowPrintHighResolution, encryptionAlgorithm, userPassword, _callback);

    }

    /**
     * Add restrictions to a PDF
     * Add restrictions to prevent copying, printing, and modifying a PDF document.
     * @param _file The input PDF document (required)
     * @param ownerPassword The password required to open and change permissions of the PDF document. (required)
     * @param allowAccessibility If false, accessibility programs can&#39;t read the text or images of the document. (optional, default to true)
     * @param allowAssembleDocument If false, the user can&#39;t assemble or manipulate the document. (optional, default to true)
     * @param allowChangeContent If false, the user can&#39;t change the content of the document. (optional, default to true)
     * @param allowCommentAndFillForm If false, the user can&#39;t add, edit or modify annotations or fill form fields. (optional, default to true)
     * @param allowCopyContent If false, the user can&#39;t copy text and images to the clipboard. (optional, default to true)
     * @param allowFillForm If false, the user can&#39;t fill forms fields. (optional, default to true)
     * @param allowPrint If false, the user can&#39;t print the document. (optional, default to true)
     * @param allowPrintHighResolution If false, the user can&#39;t print the document in high resolution. (optional, default to true)
     * @param encryptionAlgorithm The algorithm used to encrypt the PDF document. (optional, default to AES-128)
     * @param userPassword The password required to open the PDF document. If the &#x60;user_password&#x60; is not set, the user will be able to open the document without a password. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/add-restrictions">Add restrictions to a PDF Documentation</a>
     */
    public File addRestrictionsV1(File _file, String ownerPassword, Boolean allowAccessibility, Boolean allowAssembleDocument, Boolean allowChangeContent, Boolean allowCommentAndFillForm, Boolean allowCopyContent, Boolean allowFillForm, Boolean allowPrint, Boolean allowPrintHighResolution, String encryptionAlgorithm, String userPassword) throws ApiException {
        ApiResponse<File> localVarResp = addRestrictionsV1WithHttpInfo(_file, ownerPassword, allowAccessibility, allowAssembleDocument, allowChangeContent, allowCommentAndFillForm, allowCopyContent, allowFillForm, allowPrint, allowPrintHighResolution, encryptionAlgorithm, userPassword);
        return localVarResp.getData();
    }

    /**
     * Add restrictions to a PDF
     * Add restrictions to prevent copying, printing, and modifying a PDF document.
     * @param _file The input PDF document (required)
     * @param ownerPassword The password required to open and change permissions of the PDF document. (required)
     * @param allowAccessibility If false, accessibility programs can&#39;t read the text or images of the document. (optional, default to true)
     * @param allowAssembleDocument If false, the user can&#39;t assemble or manipulate the document. (optional, default to true)
     * @param allowChangeContent If false, the user can&#39;t change the content of the document. (optional, default to true)
     * @param allowCommentAndFillForm If false, the user can&#39;t add, edit or modify annotations or fill form fields. (optional, default to true)
     * @param allowCopyContent If false, the user can&#39;t copy text and images to the clipboard. (optional, default to true)
     * @param allowFillForm If false, the user can&#39;t fill forms fields. (optional, default to true)
     * @param allowPrint If false, the user can&#39;t print the document. (optional, default to true)
     * @param allowPrintHighResolution If false, the user can&#39;t print the document in high resolution. (optional, default to true)
     * @param encryptionAlgorithm The algorithm used to encrypt the PDF document. (optional, default to AES-128)
     * @param userPassword The password required to open the PDF document. If the &#x60;user_password&#x60; is not set, the user will be able to open the document without a password. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/add-restrictions">Add restrictions to a PDF Documentation</a>
     */
    public ApiResponse<File> addRestrictionsV1WithHttpInfo(File _file, String ownerPassword, Boolean allowAccessibility, Boolean allowAssembleDocument, Boolean allowChangeContent, Boolean allowCommentAndFillForm, Boolean allowCopyContent, Boolean allowFillForm, Boolean allowPrint, Boolean allowPrintHighResolution, String encryptionAlgorithm, String userPassword) throws ApiException {
        okhttp3.Call localVarCall = addRestrictionsV1ValidateBeforeCall(_file, ownerPassword, allowAccessibility, allowAssembleDocument, allowChangeContent, allowCommentAndFillForm, allowCopyContent, allowFillForm, allowPrint, allowPrintHighResolution, encryptionAlgorithm, userPassword, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add restrictions to a PDF (asynchronously)
     * Add restrictions to prevent copying, printing, and modifying a PDF document.
     * @param _file The input PDF document (required)
     * @param ownerPassword The password required to open and change permissions of the PDF document. (required)
     * @param allowAccessibility If false, accessibility programs can&#39;t read the text or images of the document. (optional, default to true)
     * @param allowAssembleDocument If false, the user can&#39;t assemble or manipulate the document. (optional, default to true)
     * @param allowChangeContent If false, the user can&#39;t change the content of the document. (optional, default to true)
     * @param allowCommentAndFillForm If false, the user can&#39;t add, edit or modify annotations or fill form fields. (optional, default to true)
     * @param allowCopyContent If false, the user can&#39;t copy text and images to the clipboard. (optional, default to true)
     * @param allowFillForm If false, the user can&#39;t fill forms fields. (optional, default to true)
     * @param allowPrint If false, the user can&#39;t print the document. (optional, default to true)
     * @param allowPrintHighResolution If false, the user can&#39;t print the document in high resolution. (optional, default to true)
     * @param encryptionAlgorithm The algorithm used to encrypt the PDF document. (optional, default to AES-128)
     * @param userPassword The password required to open the PDF document. If the &#x60;user_password&#x60; is not set, the user will be able to open the document without a password. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/add-restrictions">Add restrictions to a PDF Documentation</a>
     */
    public okhttp3.Call addRestrictionsV1Async(File _file, String ownerPassword, Boolean allowAccessibility, Boolean allowAssembleDocument, Boolean allowChangeContent, Boolean allowCommentAndFillForm, Boolean allowCopyContent, Boolean allowFillForm, Boolean allowPrint, Boolean allowPrintHighResolution, String encryptionAlgorithm, String userPassword, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = addRestrictionsV1ValidateBeforeCall(_file, ownerPassword, allowAccessibility, allowAssembleDocument, allowChangeContent, allowCommentAndFillForm, allowCopyContent, allowFillForm, allowPrint, allowPrintHighResolution, encryptionAlgorithm, userPassword, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addTextWatermarkV1
     * @param _file The input PDF document (required)
     * @param line1 The first line of text of the watermark. (required)
     * @param color The color of the text watermark. (optional, default to Gray)
     * @param line2 The second line of text of the watermark. (optional)
     * @param line3 The third line of text of the watermark. (optional)
     * @param margin The distance in inches from the border of the page to the text watermark. (optional, default to 1)
     * @param template The [id of the text watermark template](https://www.pdfblocks.com/docs/api/v1/text-watermark-templates.pdf). (optional, default to 1001)
     * @param transparency The transparency level for the text watermark from 0 (opaque) to 100 (transparent). (optional, default to 75)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/add-watermark-text">Add a text watermark to a PDF Documentation</a>
     */
    public okhttp3.Call addTextWatermarkV1Call(File _file, String line1, String color, String line2, String line3, Float margin, Integer template, Integer transparency, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/add_watermark/text";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (color != null) {
            localVarFormParams.put("color", color);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (line1 != null) {
            localVarFormParams.put("line_1", line1);
        }

        if (line2 != null) {
            localVarFormParams.put("line_2", line2);
        }

        if (line3 != null) {
            localVarFormParams.put("line_3", line3);
        }

        if (margin != null) {
            localVarFormParams.put("margin", margin);
        }

        if (template != null) {
            localVarFormParams.put("template", template);
        }

        if (transparency != null) {
            localVarFormParams.put("transparency", transparency);
        }

        final String[] localVarAccepts = {
            "application/pdf",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTextWatermarkV1ValidateBeforeCall(File _file, String line1, String color, String line2, String line3, Float margin, Integer template, Integer transparency, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling addTextWatermarkV1(Async)");
        }

        // verify the required parameter 'line1' is set
        if (line1 == null) {
            throw new ApiException("Missing the required parameter 'line1' when calling addTextWatermarkV1(Async)");
        }

        return addTextWatermarkV1Call(_file, line1, color, line2, line3, margin, template, transparency, _callback);

    }

    /**
     * Add a text watermark to a PDF
     * Add a text watermark to each page of a PDF document. Choose from several watermark templates.
     * @param _file The input PDF document (required)
     * @param line1 The first line of text of the watermark. (required)
     * @param color The color of the text watermark. (optional, default to Gray)
     * @param line2 The second line of text of the watermark. (optional)
     * @param line3 The third line of text of the watermark. (optional)
     * @param margin The distance in inches from the border of the page to the text watermark. (optional, default to 1)
     * @param template The [id of the text watermark template](https://www.pdfblocks.com/docs/api/v1/text-watermark-templates.pdf). (optional, default to 1001)
     * @param transparency The transparency level for the text watermark from 0 (opaque) to 100 (transparent). (optional, default to 75)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/add-watermark-text">Add a text watermark to a PDF Documentation</a>
     */
    public File addTextWatermarkV1(File _file, String line1, String color, String line2, String line3, Float margin, Integer template, Integer transparency) throws ApiException {
        ApiResponse<File> localVarResp = addTextWatermarkV1WithHttpInfo(_file, line1, color, line2, line3, margin, template, transparency);
        return localVarResp.getData();
    }

    /**
     * Add a text watermark to a PDF
     * Add a text watermark to each page of a PDF document. Choose from several watermark templates.
     * @param _file The input PDF document (required)
     * @param line1 The first line of text of the watermark. (required)
     * @param color The color of the text watermark. (optional, default to Gray)
     * @param line2 The second line of text of the watermark. (optional)
     * @param line3 The third line of text of the watermark. (optional)
     * @param margin The distance in inches from the border of the page to the text watermark. (optional, default to 1)
     * @param template The [id of the text watermark template](https://www.pdfblocks.com/docs/api/v1/text-watermark-templates.pdf). (optional, default to 1001)
     * @param transparency The transparency level for the text watermark from 0 (opaque) to 100 (transparent). (optional, default to 75)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/add-watermark-text">Add a text watermark to a PDF Documentation</a>
     */
    public ApiResponse<File> addTextWatermarkV1WithHttpInfo(File _file, String line1, String color, String line2, String line3, Float margin, Integer template, Integer transparency) throws ApiException {
        okhttp3.Call localVarCall = addTextWatermarkV1ValidateBeforeCall(_file, line1, color, line2, line3, margin, template, transparency, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a text watermark to a PDF (asynchronously)
     * Add a text watermark to each page of a PDF document. Choose from several watermark templates.
     * @param _file The input PDF document (required)
     * @param line1 The first line of text of the watermark. (required)
     * @param color The color of the text watermark. (optional, default to Gray)
     * @param line2 The second line of text of the watermark. (optional)
     * @param line3 The third line of text of the watermark. (optional)
     * @param margin The distance in inches from the border of the page to the text watermark. (optional, default to 1)
     * @param template The [id of the text watermark template](https://www.pdfblocks.com/docs/api/v1/text-watermark-templates.pdf). (optional, default to 1001)
     * @param transparency The transparency level for the text watermark from 0 (opaque) to 100 (transparent). (optional, default to 75)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/add-watermark-text">Add a text watermark to a PDF Documentation</a>
     */
    public okhttp3.Call addTextWatermarkV1Async(File _file, String line1, String color, String line2, String line3, Float margin, Integer template, Integer transparency, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTextWatermarkV1ValidateBeforeCall(_file, line1, color, line2, line3, margin, template, transparency, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extractPagesV1
     * @param _file The input PDF document (required)
     * @param firstPage The first page of the range to extract. If empty, it defaults to the first page of the PDF document. (optional)
     * @param lastPage The last page of the range to extract. If empty, it defaults to the last page of the PDF document. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/extract-pages">Extract pages from a PDF Documentation</a>
     */
    public okhttp3.Call extractPagesV1Call(File _file, Integer firstPage, Integer lastPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/extract_pages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (firstPage != null) {
            localVarFormParams.put("first_page", firstPage);
        }

        if (lastPage != null) {
            localVarFormParams.put("last_page", lastPage);
        }

        final String[] localVarAccepts = {
            "application/pdf",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extractPagesV1ValidateBeforeCall(File _file, Integer firstPage, Integer lastPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling extractPagesV1(Async)");
        }

        return extractPagesV1Call(_file, firstPage, lastPage, _callback);

    }

    /**
     * Extract pages from a PDF
     * Extract one or more pages from a PDF document.
     * @param _file The input PDF document (required)
     * @param firstPage The first page of the range to extract. If empty, it defaults to the first page of the PDF document. (optional)
     * @param lastPage The last page of the range to extract. If empty, it defaults to the last page of the PDF document. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/extract-pages">Extract pages from a PDF Documentation</a>
     */
    public File extractPagesV1(File _file, Integer firstPage, Integer lastPage) throws ApiException {
        ApiResponse<File> localVarResp = extractPagesV1WithHttpInfo(_file, firstPage, lastPage);
        return localVarResp.getData();
    }

    /**
     * Extract pages from a PDF
     * Extract one or more pages from a PDF document.
     * @param _file The input PDF document (required)
     * @param firstPage The first page of the range to extract. If empty, it defaults to the first page of the PDF document. (optional)
     * @param lastPage The last page of the range to extract. If empty, it defaults to the last page of the PDF document. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/extract-pages">Extract pages from a PDF Documentation</a>
     */
    public ApiResponse<File> extractPagesV1WithHttpInfo(File _file, Integer firstPage, Integer lastPage) throws ApiException {
        okhttp3.Call localVarCall = extractPagesV1ValidateBeforeCall(_file, firstPage, lastPage, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Extract pages from a PDF (asynchronously)
     * Extract one or more pages from a PDF document.
     * @param _file The input PDF document (required)
     * @param firstPage The first page of the range to extract. If empty, it defaults to the first page of the PDF document. (optional)
     * @param lastPage The last page of the range to extract. If empty, it defaults to the last page of the PDF document. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/extract-pages">Extract pages from a PDF Documentation</a>
     */
    public okhttp3.Call extractPagesV1Async(File _file, Integer firstPage, Integer lastPage, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = extractPagesV1ValidateBeforeCall(_file, firstPage, lastPage, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mergeDocumentsV1
     * @param _file The array of PDF documents. PDF documents will be merged in the same order they are inserted into this array. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/merge-documents">Merge PDF documents Documentation</a>
     */
    public okhttp3.Call mergeDocumentsV1Call(List<File> _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/merge_documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/pdf",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mergeDocumentsV1ValidateBeforeCall(List<File> _file, final ApiCallback _callback) throws ApiException {
        return mergeDocumentsV1Call(_file, _callback);

    }

    /**
     * Merge PDF documents
     * Combine multiple PDF documents into a single PDF document.
     * @param _file The array of PDF documents. PDF documents will be merged in the same order they are inserted into this array. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/merge-documents">Merge PDF documents Documentation</a>
     */
    public File mergeDocumentsV1(List<File> _file) throws ApiException {
        ApiResponse<File> localVarResp = mergeDocumentsV1WithHttpInfo(_file);
        return localVarResp.getData();
    }

    /**
     * Merge PDF documents
     * Combine multiple PDF documents into a single PDF document.
     * @param _file The array of PDF documents. PDF documents will be merged in the same order they are inserted into this array. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/merge-documents">Merge PDF documents Documentation</a>
     */
    public ApiResponse<File> mergeDocumentsV1WithHttpInfo(List<File> _file) throws ApiException {
        okhttp3.Call localVarCall = mergeDocumentsV1ValidateBeforeCall(_file, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Merge PDF documents (asynchronously)
     * Combine multiple PDF documents into a single PDF document.
     * @param _file The array of PDF documents. PDF documents will be merged in the same order they are inserted into this array. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/merge-documents">Merge PDF documents Documentation</a>
     */
    public okhttp3.Call mergeDocumentsV1Async(List<File> _file, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = mergeDocumentsV1ValidateBeforeCall(_file, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removePagesV1
     * @param _file The input PDF document (required)
     * @param firstPage The first page of the range to remove from the PDF document. If empty, it defaults to the first page of the document. (optional)
     * @param lastPage The last page of the range to remove from the PDF document. If empty, it defaults to the last page of the document. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/remove-pages">Remove pages from a PDF Documentation</a>
     */
    public okhttp3.Call removePagesV1Call(File _file, Integer firstPage, Integer lastPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/remove_pages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (firstPage != null) {
            localVarFormParams.put("first_page", firstPage);
        }

        if (lastPage != null) {
            localVarFormParams.put("last_page", lastPage);
        }

        final String[] localVarAccepts = {
            "application/pdf",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removePagesV1ValidateBeforeCall(File _file, Integer firstPage, Integer lastPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling removePagesV1(Async)");
        }

        return removePagesV1Call(_file, firstPage, lastPage, _callback);

    }

    /**
     * Remove pages from a PDF
     * Remove one or more pages from a PDF document.
     * @param _file The input PDF document (required)
     * @param firstPage The first page of the range to remove from the PDF document. If empty, it defaults to the first page of the document. (optional)
     * @param lastPage The last page of the range to remove from the PDF document. If empty, it defaults to the last page of the document. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/remove-pages">Remove pages from a PDF Documentation</a>
     */
    public File removePagesV1(File _file, Integer firstPage, Integer lastPage) throws ApiException {
        ApiResponse<File> localVarResp = removePagesV1WithHttpInfo(_file, firstPage, lastPage);
        return localVarResp.getData();
    }

    /**
     * Remove pages from a PDF
     * Remove one or more pages from a PDF document.
     * @param _file The input PDF document (required)
     * @param firstPage The first page of the range to remove from the PDF document. If empty, it defaults to the first page of the document. (optional)
     * @param lastPage The last page of the range to remove from the PDF document. If empty, it defaults to the last page of the document. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/remove-pages">Remove pages from a PDF Documentation</a>
     */
    public ApiResponse<File> removePagesV1WithHttpInfo(File _file, Integer firstPage, Integer lastPage) throws ApiException {
        okhttp3.Call localVarCall = removePagesV1ValidateBeforeCall(_file, firstPage, lastPage, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove pages from a PDF (asynchronously)
     * Remove one or more pages from a PDF document.
     * @param _file The input PDF document (required)
     * @param firstPage The first page of the range to remove from the PDF document. If empty, it defaults to the first page of the document. (optional)
     * @param lastPage The last page of the range to remove from the PDF document. If empty, it defaults to the last page of the document. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/remove-pages">Remove pages from a PDF Documentation</a>
     */
    public okhttp3.Call removePagesV1Async(File _file, Integer firstPage, Integer lastPage, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = removePagesV1ValidateBeforeCall(_file, firstPage, lastPage, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removePasswordV1
     * @param _file The input PDF document (required)
     * @param password The password required to open the file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/remove-password">Remove the password from a PDF Documentation</a>
     */
    public okhttp3.Call removePasswordV1Call(File _file, String password, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/remove_password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (password != null) {
            localVarFormParams.put("password", password);
        }

        final String[] localVarAccepts = {
            "application/pdf",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removePasswordV1ValidateBeforeCall(File _file, String password, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling removePasswordV1(Async)");
        }

        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling removePasswordV1(Async)");
        }

        return removePasswordV1Call(_file, password, _callback);

    }

    /**
     * Remove the password from a PDF
     * Remove the password from an encrypted PDF document. The PDF document will no longer require a password to open.
     * @param _file The input PDF document (required)
     * @param password The password required to open the file. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/remove-password">Remove the password from a PDF Documentation</a>
     */
    public File removePasswordV1(File _file, String password) throws ApiException {
        ApiResponse<File> localVarResp = removePasswordV1WithHttpInfo(_file, password);
        return localVarResp.getData();
    }

    /**
     * Remove the password from a PDF
     * Remove the password from an encrypted PDF document. The PDF document will no longer require a password to open.
     * @param _file The input PDF document (required)
     * @param password The password required to open the file. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/remove-password">Remove the password from a PDF Documentation</a>
     */
    public ApiResponse<File> removePasswordV1WithHttpInfo(File _file, String password) throws ApiException {
        okhttp3.Call localVarCall = removePasswordV1ValidateBeforeCall(_file, password, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove the password from a PDF (asynchronously)
     * Remove the password from an encrypted PDF document. The PDF document will no longer require a password to open.
     * @param _file The input PDF document (required)
     * @param password The password required to open the file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/remove-password">Remove the password from a PDF Documentation</a>
     */
    public okhttp3.Call removePasswordV1Async(File _file, String password, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = removePasswordV1ValidateBeforeCall(_file, password, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeRestrictionsV1
     * @param _file The input PDF document (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/remove-restrictions">Remove the restrictions from a PDF Documentation</a>
     */
    public okhttp3.Call removeRestrictionsV1Call(File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/remove_restrictions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/pdf",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeRestrictionsV1ValidateBeforeCall(File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling removeRestrictionsV1(Async)");
        }

        return removeRestrictionsV1Call(_file, _callback);

    }

    /**
     * Remove the restrictions from a PDF
     * Remove all the restrictions from a PDF document.
     * @param _file The input PDF document (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/remove-restrictions">Remove the restrictions from a PDF Documentation</a>
     */
    public File removeRestrictionsV1(File _file) throws ApiException {
        ApiResponse<File> localVarResp = removeRestrictionsV1WithHttpInfo(_file);
        return localVarResp.getData();
    }

    /**
     * Remove the restrictions from a PDF
     * Remove all the restrictions from a PDF document.
     * @param _file The input PDF document (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/remove-restrictions">Remove the restrictions from a PDF Documentation</a>
     */
    public ApiResponse<File> removeRestrictionsV1WithHttpInfo(File _file) throws ApiException {
        okhttp3.Call localVarCall = removeRestrictionsV1ValidateBeforeCall(_file, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove the restrictions from a PDF (asynchronously)
     * Remove all the restrictions from a PDF document.
     * @param _file The input PDF document (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/remove-restrictions">Remove the restrictions from a PDF Documentation</a>
     */
    public okhttp3.Call removeRestrictionsV1Async(File _file, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeRestrictionsV1ValidateBeforeCall(_file, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeSignaturesV1
     * @param _file The input PDF document (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/remove-signatures">Remove the signatures from a PDF Documentation</a>
     */
    public okhttp3.Call removeSignaturesV1Call(File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/remove_signatures";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/pdf",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSignaturesV1ValidateBeforeCall(File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling removeSignaturesV1(Async)");
        }

        return removeSignaturesV1Call(_file, _callback);

    }

    /**
     * Remove the signatures from a PDF
     * Remove the cryptographic signatures and timestamps from a PDF document.
     * @param _file The input PDF document (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/remove-signatures">Remove the signatures from a PDF Documentation</a>
     */
    public File removeSignaturesV1(File _file) throws ApiException {
        ApiResponse<File> localVarResp = removeSignaturesV1WithHttpInfo(_file);
        return localVarResp.getData();
    }

    /**
     * Remove the signatures from a PDF
     * Remove the cryptographic signatures and timestamps from a PDF document.
     * @param _file The input PDF document (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/remove-signatures">Remove the signatures from a PDF Documentation</a>
     */
    public ApiResponse<File> removeSignaturesV1WithHttpInfo(File _file) throws ApiException {
        okhttp3.Call localVarCall = removeSignaturesV1ValidateBeforeCall(_file, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove the signatures from a PDF (asynchronously)
     * Remove the cryptographic signatures and timestamps from a PDF document.
     * @param _file The input PDF document (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/remove-signatures">Remove the signatures from a PDF Documentation</a>
     */
    public okhttp3.Call removeSignaturesV1Async(File _file, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSignaturesV1ValidateBeforeCall(_file, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reversePagesV1
     * @param _file The input PDF document (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/reverse-pages">Reverse the pages of a PDF Documentation</a>
     */
    public okhttp3.Call reversePagesV1Call(File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/reverse_pages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/pdf",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reversePagesV1ValidateBeforeCall(File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling reversePagesV1(Async)");
        }

        return reversePagesV1Call(_file, _callback);

    }

    /**
     * Reverse the pages of a PDF
     * Reverse the order of the pages of a PDF document.
     * @param _file The input PDF document (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/reverse-pages">Reverse the pages of a PDF Documentation</a>
     */
    public File reversePagesV1(File _file) throws ApiException {
        ApiResponse<File> localVarResp = reversePagesV1WithHttpInfo(_file);
        return localVarResp.getData();
    }

    /**
     * Reverse the pages of a PDF
     * Reverse the order of the pages of a PDF document.
     * @param _file The input PDF document (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/reverse-pages">Reverse the pages of a PDF Documentation</a>
     */
    public ApiResponse<File> reversePagesV1WithHttpInfo(File _file) throws ApiException {
        okhttp3.Call localVarCall = reversePagesV1ValidateBeforeCall(_file, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reverse the pages of a PDF (asynchronously)
     * Reverse the order of the pages of a PDF document.
     * @param _file The input PDF document (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/reverse-pages">Reverse the pages of a PDF Documentation</a>
     */
    public okhttp3.Call reversePagesV1Async(File _file, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = reversePagesV1ValidateBeforeCall(_file, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatePagesV1
     * @param angle The angle of rotation of the pages. Positive angles rotate the pages clockwise. Negative angles rotate the pages counter-clockwise. (required)
     * @param _file The input PDF document (required)
     * @param firstPage The first page of the range to rotate in the PDF document. If empty, it defaults to the first page of the document. (optional)
     * @param lastPage The last page of the range to rotate in the PDF document. If empty, it defaults to the last page of the document. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/rotate-pages">Rotate pages in a PDF Documentation</a>
     */
    public okhttp3.Call rotatePagesV1Call(Integer angle, File _file, Integer firstPage, Integer lastPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/rotate_pages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (angle != null) {
            localVarFormParams.put("angle", angle);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (firstPage != null) {
            localVarFormParams.put("first_page", firstPage);
        }

        if (lastPage != null) {
            localVarFormParams.put("last_page", lastPage);
        }

        final String[] localVarAccepts = {
            "application/pdf",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatePagesV1ValidateBeforeCall(Integer angle, File _file, Integer firstPage, Integer lastPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'angle' is set
        if (angle == null) {
            throw new ApiException("Missing the required parameter 'angle' when calling rotatePagesV1(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling rotatePagesV1(Async)");
        }

        return rotatePagesV1Call(angle, _file, firstPage, lastPage, _callback);

    }

    /**
     * Rotate pages in a PDF
     * Rotate one or more pages in a PDF document.
     * @param angle The angle of rotation of the pages. Positive angles rotate the pages clockwise. Negative angles rotate the pages counter-clockwise. (required)
     * @param _file The input PDF document (required)
     * @param firstPage The first page of the range to rotate in the PDF document. If empty, it defaults to the first page of the document. (optional)
     * @param lastPage The last page of the range to rotate in the PDF document. If empty, it defaults to the last page of the document. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/rotate-pages">Rotate pages in a PDF Documentation</a>
     */
    public File rotatePagesV1(Integer angle, File _file, Integer firstPage, Integer lastPage) throws ApiException {
        ApiResponse<File> localVarResp = rotatePagesV1WithHttpInfo(angle, _file, firstPage, lastPage);
        return localVarResp.getData();
    }

    /**
     * Rotate pages in a PDF
     * Rotate one or more pages in a PDF document.
     * @param angle The angle of rotation of the pages. Positive angles rotate the pages clockwise. Negative angles rotate the pages counter-clockwise. (required)
     * @param _file The input PDF document (required)
     * @param firstPage The first page of the range to rotate in the PDF document. If empty, it defaults to the first page of the document. (optional)
     * @param lastPage The last page of the range to rotate in the PDF document. If empty, it defaults to the last page of the document. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/rotate-pages">Rotate pages in a PDF Documentation</a>
     */
    public ApiResponse<File> rotatePagesV1WithHttpInfo(Integer angle, File _file, Integer firstPage, Integer lastPage) throws ApiException {
        okhttp3.Call localVarCall = rotatePagesV1ValidateBeforeCall(angle, _file, firstPage, lastPage, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rotate pages in a PDF (asynchronously)
     * Rotate one or more pages in a PDF document.
     * @param angle The angle of rotation of the pages. Positive angles rotate the pages clockwise. Negative angles rotate the pages counter-clockwise. (required)
     * @param _file The input PDF document (required)
     * @param firstPage The first page of the range to rotate in the PDF document. If empty, it defaults to the first page of the document. (optional)
     * @param lastPage The last page of the range to rotate in the PDF document. If empty, it defaults to the last page of the document. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The document was processed succesfully. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Error </td><td>  -  </td></tr>
     </table>
     * Documentation and examples
     * @see <a href="https://www.pdfblocks.com/docs/api/v1/rotate-pages">Rotate pages in a PDF Documentation</a>
     */
    public okhttp3.Call rotatePagesV1Async(Integer angle, File _file, Integer firstPage, Integer lastPage, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatePagesV1ValidateBeforeCall(angle, _file, firstPage, lastPage, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
