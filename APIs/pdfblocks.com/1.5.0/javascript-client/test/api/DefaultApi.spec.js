/**
 * PDF Blocks API
 * PDF Blocks is a secure, reliable, and fast API to work with PDF documents. Actions include: Merge PDF documents, add or remove passwords, add watermarks, remove, extract, reverse, and rotate pages, and more.
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: support@pdfblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PdfBlocksApi);
  }
}(this, function(expect, PdfBlocksApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PdfBlocksApi.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('addImageWatermarkV1', function() {
      it('should call addImageWatermarkV1 successfully', function(done) {
        //uncomment below and update the code to test addImageWatermarkV1
        //instance.addImageWatermarkV1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addPasswordV1', function() {
      it('should call addPasswordV1 successfully', function(done) {
        //uncomment below and update the code to test addPasswordV1
        //instance.addPasswordV1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addRestrictionsV1', function() {
      it('should call addRestrictionsV1 successfully', function(done) {
        //uncomment below and update the code to test addRestrictionsV1
        //instance.addRestrictionsV1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addTextWatermarkV1', function() {
      it('should call addTextWatermarkV1 successfully', function(done) {
        //uncomment below and update the code to test addTextWatermarkV1
        //instance.addTextWatermarkV1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('extractPagesV1', function() {
      it('should call extractPagesV1 successfully', function(done) {
        //uncomment below and update the code to test extractPagesV1
        //instance.extractPagesV1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('mergeDocumentsV1', function() {
      it('should call mergeDocumentsV1 successfully', function(done) {
        //uncomment below and update the code to test mergeDocumentsV1
        //instance.mergeDocumentsV1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removePagesV1', function() {
      it('should call removePagesV1 successfully', function(done) {
        //uncomment below and update the code to test removePagesV1
        //instance.removePagesV1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removePasswordV1', function() {
      it('should call removePasswordV1 successfully', function(done) {
        //uncomment below and update the code to test removePasswordV1
        //instance.removePasswordV1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeRestrictionsV1', function() {
      it('should call removeRestrictionsV1 successfully', function(done) {
        //uncomment below and update the code to test removeRestrictionsV1
        //instance.removeRestrictionsV1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeSignaturesV1', function() {
      it('should call removeSignaturesV1 successfully', function(done) {
        //uncomment below and update the code to test removeSignaturesV1
        //instance.removeSignaturesV1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reversePagesV1', function() {
      it('should call reversePagesV1 successfully', function(done) {
        //uncomment below and update the code to test reversePagesV1
        //instance.reversePagesV1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rotatePagesV1', function() {
      it('should call rotatePagesV1 successfully', function(done) {
        //uncomment below and update the code to test rotatePagesV1
        //instance.rotatePagesV1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
