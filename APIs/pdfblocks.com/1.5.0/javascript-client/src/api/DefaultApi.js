/**
 * PDF Blocks API
 * PDF Blocks is a secure, reliable, and fast API to work with PDF documents. Actions include: Merge PDF documents, add or remove passwords, add watermarks, remove, extract, reverse, and rotate pages, and more.
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: support@pdfblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddPasswordV14XXResponse from '../model/AddPasswordV14XXResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 1.5.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addImageWatermarkV1 operation.
     * @callback module:api/DefaultApi~addImageWatermarkV1Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an image watermark to a PDF
     * Add an image watermark to each page of a PDF document.
     * @param {File} file The input PDF document
     * @param {File} image The image to add as a watermark. The format of the image can be either PNG or JPEG.
     * @param {Object} opts Optional parameters
     * @param {Number} [margin = 1)] The distance in inches from the border of the page to the image watermark.
     * @param {Number} [transparency = 50)] The transparency level for the image watermark from 0 (opaque) to 100 (transparent).
     * @param {module:api/DefaultApi~addImageWatermarkV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    addImageWatermarkV1(file, image, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling addImageWatermarkV1");
      }
      // verify the required parameter 'image' is set
      if (image === undefined || image === null) {
        throw new Error("Missing the required parameter 'image' when calling addImageWatermarkV1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'image': image,
        'margin': opts['margin'],
        'transparency': opts['transparency']
      };

      let authNames = ['apiKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/pdf', 'application/problem+json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/v1/add_watermark/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addPasswordV1 operation.
     * @callback module:api/DefaultApi~addPasswordV1Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a password to a PDF
     * Protect a PDF document with a password. Encrypt the PDF document to prevent unauthorized access.
     * @param {File} file The input PDF document
     * @param {String} password The password required to open the file.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [encryptionAlgorithm = 'AES-128')] The algorithm used to encrypt the PDF document.
     * @param {module:api/DefaultApi~addPasswordV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    addPasswordV1(file, password, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling addPasswordV1");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling addPasswordV1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'encryption_algorithm': opts['encryptionAlgorithm'],
        'file': file,
        'password': password
      };

      let authNames = ['apiKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/pdf', 'application/problem+json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/v1/add_password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addRestrictionsV1 operation.
     * @callback module:api/DefaultApi~addRestrictionsV1Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add restrictions to a PDF
     * Add restrictions to prevent copying, printing, and modifying a PDF document.
     * @param {File} file The input PDF document
     * @param {String} ownerPassword The password required to open and change permissions of the PDF document.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [allowAccessibility = true)] If false, accessibility programs can't read the text or images of the document.
     * @param {Boolean} [allowAssembleDocument = true)] If false, the user can't assemble or manipulate the document.
     * @param {Boolean} [allowChangeContent = true)] If false, the user can't change the content of the document.
     * @param {Boolean} [allowCommentAndFillForm = true)] If false, the user can't add, edit or modify annotations or fill form fields.
     * @param {Boolean} [allowCopyContent = true)] If false, the user can't copy text and images to the clipboard.
     * @param {Boolean} [allowFillForm = true)] If false, the user can't fill forms fields.
     * @param {Boolean} [allowPrint = true)] If false, the user can't print the document.
     * @param {Boolean} [allowPrintHighResolution = true)] If false, the user can't print the document in high resolution.
     * @param {module:model/String} [encryptionAlgorithm = 'AES-128')] The algorithm used to encrypt the PDF document.
     * @param {String} [userPassword] The password required to open the PDF document. If the `user_password` is not set, the user will be able to open the document without a password.
     * @param {module:api/DefaultApi~addRestrictionsV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    addRestrictionsV1(file, ownerPassword, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling addRestrictionsV1");
      }
      // verify the required parameter 'ownerPassword' is set
      if (ownerPassword === undefined || ownerPassword === null) {
        throw new Error("Missing the required parameter 'ownerPassword' when calling addRestrictionsV1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'allow_accessibility': opts['allowAccessibility'],
        'allow_assemble_document': opts['allowAssembleDocument'],
        'allow_change_content': opts['allowChangeContent'],
        'allow_comment_and_fill_form': opts['allowCommentAndFillForm'],
        'allow_copy_content': opts['allowCopyContent'],
        'allow_fill_form': opts['allowFillForm'],
        'allow_print': opts['allowPrint'],
        'allow_print_high_resolution': opts['allowPrintHighResolution'],
        'encryption_algorithm': opts['encryptionAlgorithm'],
        'file': file,
        'owner_password': ownerPassword,
        'user_password': opts['userPassword']
      };

      let authNames = ['apiKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/pdf', 'application/problem+json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/v1/add_restrictions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addTextWatermarkV1 operation.
     * @callback module:api/DefaultApi~addTextWatermarkV1Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a text watermark to a PDF
     * Add a text watermark to each page of a PDF document. Choose from several watermark templates.
     * @param {File} file The input PDF document
     * @param {String} line1 The first line of text of the watermark.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [color = 'Gray')] The color of the text watermark.
     * @param {String} [line2] The second line of text of the watermark.
     * @param {String} [line3] The third line of text of the watermark.
     * @param {Number} [margin = 1)] The distance in inches from the border of the page to the text watermark.
     * @param {Number} [template = 1001)] The [id of the text watermark template](https://www.pdfblocks.com/docs/api/v1/text-watermark-templates.pdf).
     * @param {Number} [transparency = 75)] The transparency level for the text watermark from 0 (opaque) to 100 (transparent).
     * @param {module:api/DefaultApi~addTextWatermarkV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    addTextWatermarkV1(file, line1, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling addTextWatermarkV1");
      }
      // verify the required parameter 'line1' is set
      if (line1 === undefined || line1 === null) {
        throw new Error("Missing the required parameter 'line1' when calling addTextWatermarkV1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'color': opts['color'],
        'file': file,
        'line_1': line1,
        'line_2': opts['line2'],
        'line_3': opts['line3'],
        'margin': opts['margin'],
        'template': opts['template'],
        'transparency': opts['transparency']
      };

      let authNames = ['apiKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/pdf', 'application/problem+json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/v1/add_watermark/text', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extractPagesV1 operation.
     * @callback module:api/DefaultApi~extractPagesV1Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extract pages from a PDF
     * Extract one or more pages from a PDF document.
     * @param {File} file The input PDF document
     * @param {Object} opts Optional parameters
     * @param {Number} [firstPage] The first page of the range to extract. If empty, it defaults to the first page of the PDF document.
     * @param {Number} [lastPage] The last page of the range to extract. If empty, it defaults to the last page of the PDF document.
     * @param {module:api/DefaultApi~extractPagesV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    extractPagesV1(file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling extractPagesV1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'first_page': opts['firstPage'],
        'last_page': opts['lastPage']
      };

      let authNames = ['apiKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/pdf', 'application/problem+json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/v1/extract_pages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mergeDocumentsV1 operation.
     * @callback module:api/DefaultApi~mergeDocumentsV1Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Merge PDF documents
     * Combine multiple PDF documents into a single PDF document.
     * @param {Object} opts Optional parameters
     * @param {Array.<File>} [file] The array of PDF documents. PDF documents will be merged in the same order they are inserted into this array.
     * @param {module:api/DefaultApi~mergeDocumentsV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    mergeDocumentsV1(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': this.apiClient.buildCollectionParam(opts['file'], 'passthrough')
      };

      let authNames = ['apiKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/pdf', 'application/problem+json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/v1/merge_documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removePagesV1 operation.
     * @callback module:api/DefaultApi~removePagesV1Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove pages from a PDF
     * Remove one or more pages from a PDF document.
     * @param {File} file The input PDF document
     * @param {Object} opts Optional parameters
     * @param {Number} [firstPage] The first page of the range to remove from the PDF document. If empty, it defaults to the first page of the document.
     * @param {Number} [lastPage] The last page of the range to remove from the PDF document. If empty, it defaults to the last page of the document.
     * @param {module:api/DefaultApi~removePagesV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    removePagesV1(file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling removePagesV1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'first_page': opts['firstPage'],
        'last_page': opts['lastPage']
      };

      let authNames = ['apiKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/pdf', 'application/problem+json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/v1/remove_pages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removePasswordV1 operation.
     * @callback module:api/DefaultApi~removePasswordV1Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove the password from a PDF
     * Remove the password from an encrypted PDF document. The PDF document will no longer require a password to open.
     * @param {File} file The input PDF document
     * @param {String} password The password required to open the file.
     * @param {module:api/DefaultApi~removePasswordV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    removePasswordV1(file, password, callback) {
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling removePasswordV1");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling removePasswordV1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'password': password
      };

      let authNames = ['apiKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/pdf', 'application/problem+json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/v1/remove_password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeRestrictionsV1 operation.
     * @callback module:api/DefaultApi~removeRestrictionsV1Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove the restrictions from a PDF
     * Remove all the restrictions from a PDF document.
     * @param {File} file The input PDF document
     * @param {module:api/DefaultApi~removeRestrictionsV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    removeRestrictionsV1(file, callback) {
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling removeRestrictionsV1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['apiKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/pdf', 'application/problem+json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/v1/remove_restrictions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeSignaturesV1 operation.
     * @callback module:api/DefaultApi~removeSignaturesV1Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove the signatures from a PDF
     * Remove the cryptographic signatures and timestamps from a PDF document.
     * @param {File} file The input PDF document
     * @param {module:api/DefaultApi~removeSignaturesV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    removeSignaturesV1(file, callback) {
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling removeSignaturesV1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['apiKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/pdf', 'application/problem+json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/v1/remove_signatures', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reversePagesV1 operation.
     * @callback module:api/DefaultApi~reversePagesV1Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reverse the pages of a PDF
     * Reverse the order of the pages of a PDF document.
     * @param {File} file The input PDF document
     * @param {module:api/DefaultApi~reversePagesV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    reversePagesV1(file, callback) {
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling reversePagesV1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['apiKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/pdf', 'application/problem+json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/v1/reverse_pages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rotatePagesV1 operation.
     * @callback module:api/DefaultApi~rotatePagesV1Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rotate pages in a PDF
     * Rotate one or more pages in a PDF document.
     * @param {module:model/Number} angle The angle of rotation of the pages. Positive angles rotate the pages clockwise. Negative angles rotate the pages counter-clockwise.
     * @param {File} file The input PDF document
     * @param {Object} opts Optional parameters
     * @param {Number} [firstPage] The first page of the range to rotate in the PDF document. If empty, it defaults to the first page of the document.
     * @param {Number} [lastPage] The last page of the range to rotate in the PDF document. If empty, it defaults to the last page of the document.
     * @param {module:api/DefaultApi~rotatePagesV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    rotatePagesV1(angle, file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'angle' is set
      if (angle === undefined || angle === null) {
        throw new Error("Missing the required parameter 'angle' when calling rotatePagesV1");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling rotatePagesV1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'angle': angle,
        'file': file,
        'first_page': opts['firstPage'],
        'last_page': opts['lastPage']
      };

      let authNames = ['apiKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/pdf', 'application/problem+json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/v1/rotate_pages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
