/**
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILocationsApi_H
#define OAI_OAILocationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetDrivers_200_response.h"
#include "OAIPatchChargeStation_200_response.h"
#include "OAIPatchLocation_request.h"
#include "OAIPostLocations_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILocationsApi : public QObject {
    Q_OBJECT

public:
    OAILocationsApi(const int timeOut = 0);
    ~OAILocationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteLocation(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  include_chargestations bool [optional]
    * @param[in]  include_organization bool [optional]
    */
    virtual void getLocation(const QString &id, const ::OpenAPI::OptionalParam<bool> &include_chargestations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_organization = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  paginate_limit qint32 [optional]
    * @param[in]  paginate_page QString [optional]
    * @param[in]  paginate_enabled bool [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  created_at_gte QDateTime [optional]
    * @param[in]  created_at_lte QDateTime [optional]
    * @param[in]  updated_at_gte QDateTime [optional]
    * @param[in]  updated_at_lte QDateTime [optional]
    * @param[in]  include_organization bool [optional]
    */
    virtual void getLocations(const ::OpenAPI::OptionalParam<qint32> &paginate_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &paginate_page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &paginate_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_gte = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_lte = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &updated_at_gte = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &updated_at_lte = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &include_organization = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_patch_location_request OAIPatchLocation_request [required]
    */
    virtual void patchLocation(const QString &id, const OAIPatchLocation_request &oai_patch_location_request);

    /**
    * @param[in]  oai_post_locations_request OAIPostLocations_request [required]
    */
    virtual void postLocations(const OAIPostLocations_request &oai_post_locations_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteLocationCallback(OAIHttpRequestWorker *worker);
    void getLocationCallback(OAIHttpRequestWorker *worker);
    void getLocationsCallback(OAIHttpRequestWorker *worker);
    void patchLocationCallback(OAIHttpRequestWorker *worker);
    void postLocationsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteLocationSignal();
    void getLocationSignal();
    void getLocationsSignal();
    void patchLocationSignal(OAIGetDrivers_200_response summary);
    void postLocationsSignal(OAIPatchChargeStation_200_response summary);


    void deleteLocationSignalFull(OAIHttpRequestWorker *worker);
    void getLocationSignalFull(OAIHttpRequestWorker *worker);
    void getLocationsSignalFull(OAIHttpRequestWorker *worker);
    void patchLocationSignalFull(OAIHttpRequestWorker *worker, OAIGetDrivers_200_response summary);
    void postLocationsSignalFull(OAIHttpRequestWorker *worker, OAIPatchChargeStation_200_response summary);

    Q_DECL_DEPRECATED_X("Use deleteLocationSignalError() instead")
    void deleteLocationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLocationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLocationSignalError() instead")
    void getLocationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getLocationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLocationsSignalError() instead")
    void getLocationsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getLocationsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchLocationSignalError() instead")
    void patchLocationSignalE(OAIGetDrivers_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchLocationSignalError(OAIGetDrivers_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postLocationsSignalError() instead")
    void postLocationsSignalE(OAIPatchChargeStation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postLocationsSignalError(OAIPatchChargeStation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteLocationSignalErrorFull() instead")
    void deleteLocationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLocationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLocationSignalErrorFull() instead")
    void getLocationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLocationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLocationsSignalErrorFull() instead")
    void getLocationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLocationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchLocationSignalErrorFull() instead")
    void patchLocationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchLocationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postLocationsSignalErrorFull() instead")
    void postLocationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postLocationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
