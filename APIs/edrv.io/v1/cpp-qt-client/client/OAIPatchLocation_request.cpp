/**
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatchLocation_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatchLocation_request::OAIPatchLocation_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatchLocation_request::OAIPatchLocation_request() {
    this->initializeModel();
}

OAIPatchLocation_request::~OAIPatchLocation_request() {}

void OAIPatchLocation_request::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_chargestations_isSet = false;
    m_chargestations_isValid = false;

    m_coordinates_isSet = false;
    m_coordinates_isValid = false;

    m_opening_hours_isSet = false;
    m_opening_hours_isValid = false;

    m_operator_name_isSet = false;
    m_operator_name_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;
}

void OAIPatchLocation_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatchLocation_request::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_chargestations_isValid = ::OpenAPI::fromJsonValue(m_chargestations, json[QString("chargestations")]);
    m_chargestations_isSet = !json[QString("chargestations")].isNull() && m_chargestations_isValid;

    m_coordinates_isValid = ::OpenAPI::fromJsonValue(m_coordinates, json[QString("coordinates")]);
    m_coordinates_isSet = !json[QString("coordinates")].isNull() && m_coordinates_isValid;

    m_opening_hours_isValid = ::OpenAPI::fromJsonValue(m_opening_hours, json[QString("openingHours")]);
    m_opening_hours_isSet = !json[QString("openingHours")].isNull() && m_opening_hours_isValid;

    m_operator_name_isValid = ::OpenAPI::fromJsonValue(m_operator_name, json[QString("operatorName")]);
    m_operator_name_isSet = !json[QString("operatorName")].isNull() && m_operator_name_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;
}

QString OAIPatchLocation_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatchLocation_request::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_chargestations.size() > 0) {
        obj.insert(QString("chargestations"), ::OpenAPI::toJsonValue(m_chargestations));
    }
    if (m_coordinates.isSet()) {
        obj.insert(QString("coordinates"), ::OpenAPI::toJsonValue(m_coordinates));
    }
    if (m_opening_hours.isSet()) {
        obj.insert(QString("openingHours"), ::OpenAPI::toJsonValue(m_opening_hours));
    }
    if (m_operator_name_isSet) {
        obj.insert(QString("operatorName"), ::OpenAPI::toJsonValue(m_operator_name));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    return obj;
}

bool OAIPatchLocation_request::isActive() const {
    return m_active;
}
void OAIPatchLocation_request::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIPatchLocation_request::is_active_Set() const{
    return m_active_isSet;
}

bool OAIPatchLocation_request::is_active_Valid() const{
    return m_active_isValid;
}

OAIPatchLocation_request_address OAIPatchLocation_request::getAddress() const {
    return m_address;
}
void OAIPatchLocation_request::setAddress(const OAIPatchLocation_request_address &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIPatchLocation_request::is_address_Set() const{
    return m_address_isSet;
}

bool OAIPatchLocation_request::is_address_Valid() const{
    return m_address_isValid;
}

QList<QJsonValue> OAIPatchLocation_request::getChargestations() const {
    return m_chargestations;
}
void OAIPatchLocation_request::setChargestations(const QList<QJsonValue> &chargestations) {
    m_chargestations = chargestations;
    m_chargestations_isSet = true;
}

bool OAIPatchLocation_request::is_chargestations_Set() const{
    return m_chargestations_isSet;
}

bool OAIPatchLocation_request::is_chargestations_Valid() const{
    return m_chargestations_isValid;
}

OAIPatchLocation_request_coordinates OAIPatchLocation_request::getCoordinates() const {
    return m_coordinates;
}
void OAIPatchLocation_request::setCoordinates(const OAIPatchLocation_request_coordinates &coordinates) {
    m_coordinates = coordinates;
    m_coordinates_isSet = true;
}

bool OAIPatchLocation_request::is_coordinates_Set() const{
    return m_coordinates_isSet;
}

bool OAIPatchLocation_request::is_coordinates_Valid() const{
    return m_coordinates_isValid;
}

OAIPatchLocation_request_openingHours OAIPatchLocation_request::getOpeningHours() const {
    return m_opening_hours;
}
void OAIPatchLocation_request::setOpeningHours(const OAIPatchLocation_request_openingHours &opening_hours) {
    m_opening_hours = opening_hours;
    m_opening_hours_isSet = true;
}

bool OAIPatchLocation_request::is_opening_hours_Set() const{
    return m_opening_hours_isSet;
}

bool OAIPatchLocation_request::is_opening_hours_Valid() const{
    return m_opening_hours_isValid;
}

QString OAIPatchLocation_request::getOperatorName() const {
    return m_operator_name;
}
void OAIPatchLocation_request::setOperatorName(const QString &operator_name) {
    m_operator_name = operator_name;
    m_operator_name_isSet = true;
}

bool OAIPatchLocation_request::is_operator_name_Set() const{
    return m_operator_name_isSet;
}

bool OAIPatchLocation_request::is_operator_name_Valid() const{
    return m_operator_name_isValid;
}

QString OAIPatchLocation_request::getTimezone() const {
    return m_timezone;
}
void OAIPatchLocation_request::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIPatchLocation_request::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIPatchLocation_request::is_timezone_Valid() const{
    return m_timezone_isValid;
}

bool OAIPatchLocation_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_chargestations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_coordinates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_opening_hours.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operator_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatchLocation_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
