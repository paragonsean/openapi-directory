/**
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostDrivers_request_phone.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostDrivers_request_phone::OAIPostDrivers_request_phone(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostDrivers_request_phone::OAIPostDrivers_request_phone() {
    this->initializeModel();
}

OAIPostDrivers_request_phone::~OAIPostDrivers_request_phone() {}

void OAIPostDrivers_request_phone::initializeModel() {

    m_home_isSet = false;
    m_home_isValid = false;

    m_mobile_isSet = false;
    m_mobile_isValid = false;

    m_work_isSet = false;
    m_work_isValid = false;
}

void OAIPostDrivers_request_phone::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostDrivers_request_phone::fromJsonObject(QJsonObject json) {

    m_home_isValid = ::OpenAPI::fromJsonValue(m_home, json[QString("home")]);
    m_home_isSet = !json[QString("home")].isNull() && m_home_isValid;

    m_mobile_isValid = ::OpenAPI::fromJsonValue(m_mobile, json[QString("mobile")]);
    m_mobile_isSet = !json[QString("mobile")].isNull() && m_mobile_isValid;

    m_work_isValid = ::OpenAPI::fromJsonValue(m_work, json[QString("work")]);
    m_work_isSet = !json[QString("work")].isNull() && m_work_isValid;
}

QString OAIPostDrivers_request_phone::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostDrivers_request_phone::asJsonObject() const {
    QJsonObject obj;
    if (m_home_isSet) {
        obj.insert(QString("home"), ::OpenAPI::toJsonValue(m_home));
    }
    if (m_mobile_isSet) {
        obj.insert(QString("mobile"), ::OpenAPI::toJsonValue(m_mobile));
    }
    if (m_work_isSet) {
        obj.insert(QString("work"), ::OpenAPI::toJsonValue(m_work));
    }
    return obj;
}

QString OAIPostDrivers_request_phone::getHome() const {
    return m_home;
}
void OAIPostDrivers_request_phone::setHome(const QString &home) {
    m_home = home;
    m_home_isSet = true;
}

bool OAIPostDrivers_request_phone::is_home_Set() const{
    return m_home_isSet;
}

bool OAIPostDrivers_request_phone::is_home_Valid() const{
    return m_home_isValid;
}

QString OAIPostDrivers_request_phone::getMobile() const {
    return m_mobile;
}
void OAIPostDrivers_request_phone::setMobile(const QString &mobile) {
    m_mobile = mobile;
    m_mobile_isSet = true;
}

bool OAIPostDrivers_request_phone::is_mobile_Set() const{
    return m_mobile_isSet;
}

bool OAIPostDrivers_request_phone::is_mobile_Valid() const{
    return m_mobile_isValid;
}

QString OAIPostDrivers_request_phone::getWork() const {
    return m_work;
}
void OAIPostDrivers_request_phone::setWork(const QString &work) {
    m_work = work;
    m_work_isSet = true;
}

bool OAIPostDrivers_request_phone::is_work_Set() const{
    return m_work_isSet;
}

bool OAIPostDrivers_request_phone::is_work_Valid() const{
    return m_work_isValid;
}

bool OAIPostDrivers_request_phone::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_home_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostDrivers_request_phone::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
