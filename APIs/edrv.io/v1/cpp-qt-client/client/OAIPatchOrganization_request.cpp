/**
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatchOrganization_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatchOrganization_request::OAIPatchOrganization_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatchOrganization_request::OAIPatchOrganization_request() {
    this->initializeModel();
}

OAIPatchOrganization_request::~OAIPatchOrganization_request() {}

void OAIPatchOrganization_request::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_channels_isSet = false;
    m_channels_isValid = false;

    m_configurations_isSet = false;
    m_configurations_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_otp_isSet = false;
    m_otp_isValid = false;

    m_stripe_connected_account_id_isSet = false;
    m_stripe_connected_account_id_isValid = false;

    m_stripe_country_isSet = false;
    m_stripe_country_isValid = false;

    m_stripe_currency_isSet = false;
    m_stripe_currency_isValid = false;

    m_stripe_reserve_amount_isSet = false;
    m_stripe_reserve_amount_isValid = false;

    m_support_isSet = false;
    m_support_isValid = false;

    m_support_chat_isSet = false;
    m_support_chat_isValid = false;

    m_theme_isSet = false;
    m_theme_isValid = false;
}

void OAIPatchOrganization_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatchOrganization_request::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_channels_isValid = ::OpenAPI::fromJsonValue(m_channels, json[QString("channels")]);
    m_channels_isSet = !json[QString("channels")].isNull() && m_channels_isValid;

    m_configurations_isValid = ::OpenAPI::fromJsonValue(m_configurations, json[QString("configurations")]);
    m_configurations_isSet = !json[QString("configurations")].isNull() && m_configurations_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("logo")]);
    m_logo_isSet = !json[QString("logo")].isNull() && m_logo_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_otp_isValid = ::OpenAPI::fromJsonValue(m_otp, json[QString("otp")]);
    m_otp_isSet = !json[QString("otp")].isNull() && m_otp_isValid;

    m_stripe_connected_account_id_isValid = ::OpenAPI::fromJsonValue(m_stripe_connected_account_id, json[QString("stripe_connected_account_id")]);
    m_stripe_connected_account_id_isSet = !json[QString("stripe_connected_account_id")].isNull() && m_stripe_connected_account_id_isValid;

    m_stripe_country_isValid = ::OpenAPI::fromJsonValue(m_stripe_country, json[QString("stripe_country")]);
    m_stripe_country_isSet = !json[QString("stripe_country")].isNull() && m_stripe_country_isValid;

    m_stripe_currency_isValid = ::OpenAPI::fromJsonValue(m_stripe_currency, json[QString("stripe_currency")]);
    m_stripe_currency_isSet = !json[QString("stripe_currency")].isNull() && m_stripe_currency_isValid;

    m_stripe_reserve_amount_isValid = ::OpenAPI::fromJsonValue(m_stripe_reserve_amount, json[QString("stripe_reserve_amount")]);
    m_stripe_reserve_amount_isSet = !json[QString("stripe_reserve_amount")].isNull() && m_stripe_reserve_amount_isValid;

    m_support_isValid = ::OpenAPI::fromJsonValue(m_support, json[QString("support")]);
    m_support_isSet = !json[QString("support")].isNull() && m_support_isValid;

    m_support_chat_isValid = ::OpenAPI::fromJsonValue(m_support_chat, json[QString("supportChat")]);
    m_support_chat_isSet = !json[QString("supportChat")].isNull() && m_support_chat_isValid;

    m_theme_isValid = ::OpenAPI::fromJsonValue(m_theme, json[QString("theme")]);
    m_theme_isSet = !json[QString("theme")].isNull() && m_theme_isValid;
}

QString OAIPatchOrganization_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatchOrganization_request::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_channels.isSet()) {
        obj.insert(QString("channels"), ::OpenAPI::toJsonValue(m_channels));
    }
    if (m_configurations.isSet()) {
        obj.insert(QString("configurations"), ::OpenAPI::toJsonValue(m_configurations));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_logo_isSet) {
        obj.insert(QString("logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_otp_isSet) {
        obj.insert(QString("otp"), ::OpenAPI::toJsonValue(m_otp));
    }
    if (m_stripe_connected_account_id_isSet) {
        obj.insert(QString("stripe_connected_account_id"), ::OpenAPI::toJsonValue(m_stripe_connected_account_id));
    }
    if (m_stripe_country_isSet) {
        obj.insert(QString("stripe_country"), ::OpenAPI::toJsonValue(m_stripe_country));
    }
    if (m_stripe_currency_isSet) {
        obj.insert(QString("stripe_currency"), ::OpenAPI::toJsonValue(m_stripe_currency));
    }
    if (m_stripe_reserve_amount_isSet) {
        obj.insert(QString("stripe_reserve_amount"), ::OpenAPI::toJsonValue(m_stripe_reserve_amount));
    }
    if (m_support.isSet()) {
        obj.insert(QString("support"), ::OpenAPI::toJsonValue(m_support));
    }
    if (m_support_chat.isSet()) {
        obj.insert(QString("supportChat"), ::OpenAPI::toJsonValue(m_support_chat));
    }
    if (m_theme.isSet()) {
        obj.insert(QString("theme"), ::OpenAPI::toJsonValue(m_theme));
    }
    return obj;
}

bool OAIPatchOrganization_request::isActive() const {
    return m_active;
}
void OAIPatchOrganization_request::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIPatchOrganization_request::is_active_Set() const{
    return m_active_isSet;
}

bool OAIPatchOrganization_request::is_active_Valid() const{
    return m_active_isValid;
}

OAIPostDrivers_request_address OAIPatchOrganization_request::getAddress() const {
    return m_address;
}
void OAIPatchOrganization_request::setAddress(const OAIPostDrivers_request_address &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIPatchOrganization_request::is_address_Set() const{
    return m_address_isSet;
}

bool OAIPatchOrganization_request::is_address_Valid() const{
    return m_address_isValid;
}

OAIPatchOrganization_request_channels OAIPatchOrganization_request::getChannels() const {
    return m_channels;
}
void OAIPatchOrganization_request::setChannels(const OAIPatchOrganization_request_channels &channels) {
    m_channels = channels;
    m_channels_isSet = true;
}

bool OAIPatchOrganization_request::is_channels_Set() const{
    return m_channels_isSet;
}

bool OAIPatchOrganization_request::is_channels_Valid() const{
    return m_channels_isValid;
}

OAIPatchOrganization_request_configurations OAIPatchOrganization_request::getConfigurations() const {
    return m_configurations;
}
void OAIPatchOrganization_request::setConfigurations(const OAIPatchOrganization_request_configurations &configurations) {
    m_configurations = configurations;
    m_configurations_isSet = true;
}

bool OAIPatchOrganization_request::is_configurations_Set() const{
    return m_configurations_isSet;
}

bool OAIPatchOrganization_request::is_configurations_Valid() const{
    return m_configurations_isValid;
}

OAIPatchOrganization_request_links OAIPatchOrganization_request::getLinks() const {
    return m_links;
}
void OAIPatchOrganization_request::setLinks(const OAIPatchOrganization_request_links &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIPatchOrganization_request::is_links_Set() const{
    return m_links_isSet;
}

bool OAIPatchOrganization_request::is_links_Valid() const{
    return m_links_isValid;
}

QList<QJsonValue> OAIPatchOrganization_request::getLocations() const {
    return m_locations;
}
void OAIPatchOrganization_request::setLocations(const QList<QJsonValue> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIPatchOrganization_request::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIPatchOrganization_request::is_locations_Valid() const{
    return m_locations_isValid;
}

QString OAIPatchOrganization_request::getLogo() const {
    return m_logo;
}
void OAIPatchOrganization_request::setLogo(const QString &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAIPatchOrganization_request::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAIPatchOrganization_request::is_logo_Valid() const{
    return m_logo_isValid;
}

QString OAIPatchOrganization_request::getName() const {
    return m_name;
}
void OAIPatchOrganization_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPatchOrganization_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPatchOrganization_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPatchOrganization_request::getOtp() const {
    return m_otp;
}
void OAIPatchOrganization_request::setOtp(const QString &otp) {
    m_otp = otp;
    m_otp_isSet = true;
}

bool OAIPatchOrganization_request::is_otp_Set() const{
    return m_otp_isSet;
}

bool OAIPatchOrganization_request::is_otp_Valid() const{
    return m_otp_isValid;
}

QString OAIPatchOrganization_request::getStripeConnectedAccountId() const {
    return m_stripe_connected_account_id;
}
void OAIPatchOrganization_request::setStripeConnectedAccountId(const QString &stripe_connected_account_id) {
    m_stripe_connected_account_id = stripe_connected_account_id;
    m_stripe_connected_account_id_isSet = true;
}

bool OAIPatchOrganization_request::is_stripe_connected_account_id_Set() const{
    return m_stripe_connected_account_id_isSet;
}

bool OAIPatchOrganization_request::is_stripe_connected_account_id_Valid() const{
    return m_stripe_connected_account_id_isValid;
}

QString OAIPatchOrganization_request::getStripeCountry() const {
    return m_stripe_country;
}
void OAIPatchOrganization_request::setStripeCountry(const QString &stripe_country) {
    m_stripe_country = stripe_country;
    m_stripe_country_isSet = true;
}

bool OAIPatchOrganization_request::is_stripe_country_Set() const{
    return m_stripe_country_isSet;
}

bool OAIPatchOrganization_request::is_stripe_country_Valid() const{
    return m_stripe_country_isValid;
}

QString OAIPatchOrganization_request::getStripeCurrency() const {
    return m_stripe_currency;
}
void OAIPatchOrganization_request::setStripeCurrency(const QString &stripe_currency) {
    m_stripe_currency = stripe_currency;
    m_stripe_currency_isSet = true;
}

bool OAIPatchOrganization_request::is_stripe_currency_Set() const{
    return m_stripe_currency_isSet;
}

bool OAIPatchOrganization_request::is_stripe_currency_Valid() const{
    return m_stripe_currency_isValid;
}

qint32 OAIPatchOrganization_request::getStripeReserveAmount() const {
    return m_stripe_reserve_amount;
}
void OAIPatchOrganization_request::setStripeReserveAmount(const qint32 &stripe_reserve_amount) {
    m_stripe_reserve_amount = stripe_reserve_amount;
    m_stripe_reserve_amount_isSet = true;
}

bool OAIPatchOrganization_request::is_stripe_reserve_amount_Set() const{
    return m_stripe_reserve_amount_isSet;
}

bool OAIPatchOrganization_request::is_stripe_reserve_amount_Valid() const{
    return m_stripe_reserve_amount_isValid;
}

OAIPatchOrganization_request_support OAIPatchOrganization_request::getSupport() const {
    return m_support;
}
void OAIPatchOrganization_request::setSupport(const OAIPatchOrganization_request_support &support) {
    m_support = support;
    m_support_isSet = true;
}

bool OAIPatchOrganization_request::is_support_Set() const{
    return m_support_isSet;
}

bool OAIPatchOrganization_request::is_support_Valid() const{
    return m_support_isValid;
}

OAIPatchOrganization_request_supportChat OAIPatchOrganization_request::getSupportChat() const {
    return m_support_chat;
}
void OAIPatchOrganization_request::setSupportChat(const OAIPatchOrganization_request_supportChat &support_chat) {
    m_support_chat = support_chat;
    m_support_chat_isSet = true;
}

bool OAIPatchOrganization_request::is_support_chat_Set() const{
    return m_support_chat_isSet;
}

bool OAIPatchOrganization_request::is_support_chat_Valid() const{
    return m_support_chat_isValid;
}

OAIPatchOrganization_request_theme OAIPatchOrganization_request::getTheme() const {
    return m_theme;
}
void OAIPatchOrganization_request::setTheme(const OAIPatchOrganization_request_theme &theme) {
    m_theme = theme;
    m_theme_isSet = true;
}

bool OAIPatchOrganization_request::is_theme_Set() const{
    return m_theme_isSet;
}

bool OAIPatchOrganization_request::is_theme_Valid() const{
    return m_theme_isValid;
}

bool OAIPatchOrganization_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_otp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stripe_connected_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stripe_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stripe_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stripe_reserve_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_chat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatchOrganization_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
