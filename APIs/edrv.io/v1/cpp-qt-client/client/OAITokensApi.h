/**
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITokensApi_H
#define OAI_OAITokensApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetDrivers_200_response.h"
#include "OAIPatchToken_request.h"
#include "OAIPostTokens_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITokensApi : public QObject {
    Q_OBJECT

public:
    OAITokensApi(const int timeOut = 0);
    ~OAITokensApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteToken(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  include_driver bool [optional]
    * @param[in]  include_organization bool [optional]
    */
    virtual void getToken(const QString &id, const ::OpenAPI::OptionalParam<bool> &include_driver = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_organization = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  paginate_limit qint32 [optional]
    * @param[in]  paginate_page QString [optional]
    * @param[in]  paginate_enabled bool [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  created_at_gte QDateTime [optional]
    * @param[in]  created_at_lte QDateTime [optional]
    * @param[in]  updated_at_gte QDateTime [optional]
    * @param[in]  updated_at_lte QDateTime [optional]
    * @param[in]  include_driver bool [optional]
    * @param[in]  include_organization bool [optional]
    */
    virtual void getTokens(const ::OpenAPI::OptionalParam<qint32> &paginate_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &paginate_page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &paginate_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_gte = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_lte = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &updated_at_gte = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &updated_at_lte = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &include_driver = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_organization = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_patch_token_request OAIPatchToken_request [required]
    */
    virtual void patchToken(const QString &id, const OAIPatchToken_request &oai_patch_token_request);

    /**
    * @param[in]  oai_post_tokens_request OAIPostTokens_request [required]
    */
    virtual void postTokens(const OAIPostTokens_request &oai_post_tokens_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteTokenCallback(OAIHttpRequestWorker *worker);
    void getTokenCallback(OAIHttpRequestWorker *worker);
    void getTokensCallback(OAIHttpRequestWorker *worker);
    void patchTokenCallback(OAIHttpRequestWorker *worker);
    void postTokensCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteTokenSignal();
    void getTokenSignal();
    void getTokensSignal(OAIGetDrivers_200_response summary);
    void patchTokenSignal(OAIGetDrivers_200_response summary);
    void postTokensSignal(OAIGetDrivers_200_response summary);


    void deleteTokenSignalFull(OAIHttpRequestWorker *worker);
    void getTokenSignalFull(OAIHttpRequestWorker *worker);
    void getTokensSignalFull(OAIHttpRequestWorker *worker, OAIGetDrivers_200_response summary);
    void patchTokenSignalFull(OAIHttpRequestWorker *worker, OAIGetDrivers_200_response summary);
    void postTokensSignalFull(OAIHttpRequestWorker *worker, OAIGetDrivers_200_response summary);

    Q_DECL_DEPRECATED_X("Use deleteTokenSignalError() instead")
    void deleteTokenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTokenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTokenSignalError() instead")
    void getTokenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getTokenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTokensSignalError() instead")
    void getTokensSignalE(OAIGetDrivers_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTokensSignalError(OAIGetDrivers_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchTokenSignalError() instead")
    void patchTokenSignalE(OAIGetDrivers_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchTokenSignalError(OAIGetDrivers_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTokensSignalError() instead")
    void postTokensSignalE(OAIGetDrivers_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postTokensSignalError(OAIGetDrivers_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteTokenSignalErrorFull() instead")
    void deleteTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTokenSignalErrorFull() instead")
    void getTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTokensSignalErrorFull() instead")
    void getTokensSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTokensSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchTokenSignalErrorFull() instead")
    void patchTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTokensSignalErrorFull() instead")
    void postTokensSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postTokensSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
