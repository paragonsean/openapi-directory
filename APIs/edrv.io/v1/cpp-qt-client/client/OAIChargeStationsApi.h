/**
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIChargeStationsApi_H
#define OAI_OAIChargeStationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPatchChargeStation_200_response.h"
#include "OAIPostChargeStations_201_response.h"
#include "OAISchema1.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIChargeStationsApi : public QObject {
    Q_OBJECT

public:
    OAIChargeStationsApi(const int timeOut = 0);
    ~OAIChargeStationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteChargeStation(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  include_location bool [optional]
    * @param[in]  include_evses bool [optional]
    * @param[in]  include_organization bool [optional]
    */
    virtual void getChargeStation(const QString &id, const ::OpenAPI::OptionalParam<bool> &include_location = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_evses = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_organization = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  include_evse bool [optional]
    * @param[in]  include_organization bool [optional]
    */
    virtual void getChargeStationConnectors(const QString &id, const ::OpenAPI::OptionalParam<bool> &include_evse = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_organization = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  organization QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  online bool [optional]
    * @param[in]  active bool [optional]
    * @param[in]  r_public bool [optional]
    * @param[in]  paginate_limit qint32 [optional]
    * @param[in]  paginate_page QString [optional]
    * @param[in]  paginate_enabled bool [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  created_at_gte QDateTime [optional]
    * @param[in]  created_at_lte QDateTime [optional]
    * @param[in]  updated_at_gte QDateTime [optional]
    * @param[in]  updated_at_lte QDateTime [optional]
    * @param[in]  include_location bool [optional]
    * @param[in]  include_evses bool [optional]
    * @param[in]  include_organization bool [optional]
    */
    virtual void getChargeStations(const ::OpenAPI::OptionalParam<QString> &organization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &online = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &r_public = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &paginate_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &paginate_page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &paginate_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_gte = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_lte = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &updated_at_gte = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &updated_at_lte = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &include_location = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_evses = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_organization = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_schema1 OAISchema1 [required]
    */
    virtual void patchChargeStation(const QString &id, const OAISchema1 &oai_schema1);

    /**
    * @param[in]  oai_schema1 OAISchema1 [required]
    */
    virtual void postChargeStations(const OAISchema1 &oai_schema1);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteChargeStationCallback(OAIHttpRequestWorker *worker);
    void getChargeStationCallback(OAIHttpRequestWorker *worker);
    void getChargeStationConnectorsCallback(OAIHttpRequestWorker *worker);
    void getChargeStationsCallback(OAIHttpRequestWorker *worker);
    void patchChargeStationCallback(OAIHttpRequestWorker *worker);
    void postChargeStationsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteChargeStationSignal();
    void getChargeStationSignal();
    void getChargeStationConnectorsSignal();
    void getChargeStationsSignal();
    void patchChargeStationSignal(OAIPatchChargeStation_200_response summary);
    void postChargeStationsSignal(OAIPostChargeStations_201_response summary);


    void deleteChargeStationSignalFull(OAIHttpRequestWorker *worker);
    void getChargeStationSignalFull(OAIHttpRequestWorker *worker);
    void getChargeStationConnectorsSignalFull(OAIHttpRequestWorker *worker);
    void getChargeStationsSignalFull(OAIHttpRequestWorker *worker);
    void patchChargeStationSignalFull(OAIHttpRequestWorker *worker, OAIPatchChargeStation_200_response summary);
    void postChargeStationsSignalFull(OAIHttpRequestWorker *worker, OAIPostChargeStations_201_response summary);

    Q_DECL_DEPRECATED_X("Use deleteChargeStationSignalError() instead")
    void deleteChargeStationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChargeStationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChargeStationSignalError() instead")
    void getChargeStationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getChargeStationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChargeStationConnectorsSignalError() instead")
    void getChargeStationConnectorsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getChargeStationConnectorsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChargeStationsSignalError() instead")
    void getChargeStationsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getChargeStationsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchChargeStationSignalError() instead")
    void patchChargeStationSignalE(OAIPatchChargeStation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchChargeStationSignalError(OAIPatchChargeStation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postChargeStationsSignalError() instead")
    void postChargeStationsSignalE(OAIPostChargeStations_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postChargeStationsSignalError(OAIPostChargeStations_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteChargeStationSignalErrorFull() instead")
    void deleteChargeStationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChargeStationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChargeStationSignalErrorFull() instead")
    void getChargeStationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChargeStationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChargeStationConnectorsSignalErrorFull() instead")
    void getChargeStationConnectorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChargeStationConnectorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChargeStationsSignalErrorFull() instead")
    void getChargeStationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChargeStationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchChargeStationSignalErrorFull() instead")
    void patchChargeStationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchChargeStationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postChargeStationsSignalErrorFull() instead")
    void postChargeStationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postChargeStationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
