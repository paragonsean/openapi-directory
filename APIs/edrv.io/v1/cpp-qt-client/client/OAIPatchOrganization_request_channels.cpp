/**
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatchOrganization_request_channels.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatchOrganization_request_channels::OAIPatchOrganization_request_channels(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatchOrganization_request_channels::OAIPatchOrganization_request_channels() {
    this->initializeModel();
}

OAIPatchOrganization_request_channels::~OAIPatchOrganization_request_channels() {}

void OAIPatchOrganization_request_channels::initializeModel() {

    m_slack_isSet = false;
    m_slack_isValid = false;

    m_telegram_isSet = false;
    m_telegram_isValid = false;
}

void OAIPatchOrganization_request_channels::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatchOrganization_request_channels::fromJsonObject(QJsonObject json) {

    m_slack_isValid = ::OpenAPI::fromJsonValue(m_slack, json[QString("slack")]);
    m_slack_isSet = !json[QString("slack")].isNull() && m_slack_isValid;

    m_telegram_isValid = ::OpenAPI::fromJsonValue(m_telegram, json[QString("telegram")]);
    m_telegram_isSet = !json[QString("telegram")].isNull() && m_telegram_isValid;
}

QString OAIPatchOrganization_request_channels::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatchOrganization_request_channels::asJsonObject() const {
    QJsonObject obj;
    if (m_slack_isSet) {
        obj.insert(QString("slack"), ::OpenAPI::toJsonValue(m_slack));
    }
    if (m_telegram_isSet) {
        obj.insert(QString("telegram"), ::OpenAPI::toJsonValue(m_telegram));
    }
    return obj;
}

OAIObject OAIPatchOrganization_request_channels::getSlack() const {
    return m_slack;
}
void OAIPatchOrganization_request_channels::setSlack(const OAIObject &slack) {
    m_slack = slack;
    m_slack_isSet = true;
}

bool OAIPatchOrganization_request_channels::is_slack_Set() const{
    return m_slack_isSet;
}

bool OAIPatchOrganization_request_channels::is_slack_Valid() const{
    return m_slack_isValid;
}

OAIObject OAIPatchOrganization_request_channels::getTelegram() const {
    return m_telegram;
}
void OAIPatchOrganization_request_channels::setTelegram(const OAIObject &telegram) {
    m_telegram = telegram;
    m_telegram_isSet = true;
}

bool OAIPatchOrganization_request_channels::is_telegram_Set() const{
    return m_telegram_isSet;
}

bool OAIPatchOrganization_request_channels::is_telegram_Valid() const{
    return m_telegram_isValid;
}

bool OAIPatchOrganization_request_channels::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_slack_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_telegram_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatchOrganization_request_channels::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
