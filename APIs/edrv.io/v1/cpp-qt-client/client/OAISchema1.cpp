/**
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchema1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchema1::OAISchema1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchema1::OAISchema1() {
    this->initializeModel();
}

OAISchema1::~OAISchema1() {}

void OAISchema1::initializeModel() {

    m_location_isSet = false;
    m_location_isValid = false;

    m_manufacturer_isSet = false;
    m_manufacturer_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_r_public_isSet = false;
    m_r_public_isValid = false;
}

void OAISchema1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchema1::fromJsonObject(QJsonObject json) {

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_manufacturer_isValid = ::OpenAPI::fromJsonValue(m_manufacturer, json[QString("manufacturer")]);
    m_manufacturer_isSet = !json[QString("manufacturer")].isNull() && m_manufacturer_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_r_public_isValid = ::OpenAPI::fromJsonValue(m_r_public, json[QString("public")]);
    m_r_public_isSet = !json[QString("public")].isNull() && m_r_public_isValid;
}

QString OAISchema1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchema1::asJsonObject() const {
    QJsonObject obj;
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_manufacturer_isSet) {
        obj.insert(QString("manufacturer"), ::OpenAPI::toJsonValue(m_manufacturer));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_r_public_isSet) {
        obj.insert(QString("public"), ::OpenAPI::toJsonValue(m_r_public));
    }
    return obj;
}

QString OAISchema1::getLocation() const {
    return m_location;
}
void OAISchema1::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAISchema1::is_location_Set() const{
    return m_location_isSet;
}

bool OAISchema1::is_location_Valid() const{
    return m_location_isValid;
}

QString OAISchema1::getManufacturer() const {
    return m_manufacturer;
}
void OAISchema1::setManufacturer(const QString &manufacturer) {
    m_manufacturer = manufacturer;
    m_manufacturer_isSet = true;
}

bool OAISchema1::is_manufacturer_Set() const{
    return m_manufacturer_isSet;
}

bool OAISchema1::is_manufacturer_Valid() const{
    return m_manufacturer_isValid;
}

QString OAISchema1::getModel() const {
    return m_model;
}
void OAISchema1::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAISchema1::is_model_Set() const{
    return m_model_isSet;
}

bool OAISchema1::is_model_Valid() const{
    return m_model_isValid;
}

QString OAISchema1::getProtocol() const {
    return m_protocol;
}
void OAISchema1::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAISchema1::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAISchema1::is_protocol_Valid() const{
    return m_protocol_isValid;
}

bool OAISchema1::isRPublic() const {
    return m_r_public;
}
void OAISchema1::setRPublic(const bool &r_public) {
    m_r_public = r_public;
    m_r_public_isSet = true;
}

bool OAISchema1::is_r_public_Set() const{
    return m_r_public_isSet;
}

bool OAISchema1::is_r_public_Valid() const{
    return m_r_public_isValid;
}

bool OAISchema1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_public_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchema1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
