/**
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostDrivers_request_address.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostDrivers_request_address::OAIPostDrivers_request_address(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostDrivers_request_address::OAIPostDrivers_request_address() {
    this->initializeModel();
}

OAIPostDrivers_request_address::~OAIPostDrivers_request_address() {}

void OAIPostDrivers_request_address::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_street_and_number_isSet = false;
    m_street_and_number_isValid = false;
}

void OAIPostDrivers_request_address::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostDrivers_request_address::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_street_and_number_isValid = ::OpenAPI::fromJsonValue(m_street_and_number, json[QString("streetAndNumber")]);
    m_street_and_number_isSet = !json[QString("streetAndNumber")].isNull() && m_street_and_number_isValid;
}

QString OAIPostDrivers_request_address::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostDrivers_request_address::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_street_and_number_isSet) {
        obj.insert(QString("streetAndNumber"), ::OpenAPI::toJsonValue(m_street_and_number));
    }
    return obj;
}

QString OAIPostDrivers_request_address::getCity() const {
    return m_city;
}
void OAIPostDrivers_request_address::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIPostDrivers_request_address::is_city_Set() const{
    return m_city_isSet;
}

bool OAIPostDrivers_request_address::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIPostDrivers_request_address::getCountry() const {
    return m_country;
}
void OAIPostDrivers_request_address::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIPostDrivers_request_address::is_country_Set() const{
    return m_country_isSet;
}

bool OAIPostDrivers_request_address::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIPostDrivers_request_address::getPostalCode() const {
    return m_postal_code;
}
void OAIPostDrivers_request_address::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIPostDrivers_request_address::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIPostDrivers_request_address::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIPostDrivers_request_address::getStreetAndNumber() const {
    return m_street_and_number;
}
void OAIPostDrivers_request_address::setStreetAndNumber(const QString &street_and_number) {
    m_street_and_number = street_and_number;
    m_street_and_number_isSet = true;
}

bool OAIPostDrivers_request_address::is_street_and_number_Set() const{
    return m_street_and_number_isSet;
}

bool OAIPostDrivers_request_address::is_street_and_number_Valid() const{
    return m_street_and_number_isValid;
}

bool OAIPostDrivers_request_address::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_and_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostDrivers_request_address::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
