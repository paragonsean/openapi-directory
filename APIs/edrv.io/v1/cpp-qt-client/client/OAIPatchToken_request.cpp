/**
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatchToken_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatchToken_request::OAIPatchToken_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatchToken_request::OAIPatchToken_request() {
    this->initializeModel();
}

OAIPatchToken_request::~OAIPatchToken_request() {}

void OAIPatchToken_request::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_driver_isSet = false;
    m_driver_isValid = false;

    m_physical_id_isSet = false;
    m_physical_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPatchToken_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatchToken_request::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_driver_isValid = ::OpenAPI::fromJsonValue(m_driver, json[QString("driver")]);
    m_driver_isSet = !json[QString("driver")].isNull() && m_driver_isValid;

    m_physical_id_isValid = ::OpenAPI::fromJsonValue(m_physical_id, json[QString("physicalId")]);
    m_physical_id_isSet = !json[QString("physicalId")].isNull() && m_physical_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPatchToken_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatchToken_request::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_driver_isSet) {
        obj.insert(QString("driver"), ::OpenAPI::toJsonValue(m_driver));
    }
    if (m_physical_id_isSet) {
        obj.insert(QString("physicalId"), ::OpenAPI::toJsonValue(m_physical_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIPatchToken_request::isActive() const {
    return m_active;
}
void OAIPatchToken_request::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIPatchToken_request::is_active_Set() const{
    return m_active_isSet;
}

bool OAIPatchToken_request::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIPatchToken_request::getChannel() const {
    return m_channel;
}
void OAIPatchToken_request::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIPatchToken_request::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIPatchToken_request::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAIPatchToken_request::getDriver() const {
    return m_driver;
}
void OAIPatchToken_request::setDriver(const QString &driver) {
    m_driver = driver;
    m_driver_isSet = true;
}

bool OAIPatchToken_request::is_driver_Set() const{
    return m_driver_isSet;
}

bool OAIPatchToken_request::is_driver_Valid() const{
    return m_driver_isValid;
}

QString OAIPatchToken_request::getPhysicalId() const {
    return m_physical_id;
}
void OAIPatchToken_request::setPhysicalId(const QString &physical_id) {
    m_physical_id = physical_id;
    m_physical_id_isSet = true;
}

bool OAIPatchToken_request::is_physical_id_Set() const{
    return m_physical_id_isSet;
}

bool OAIPatchToken_request::is_physical_id_Valid() const{
    return m_physical_id_isValid;
}

QString OAIPatchToken_request::getType() const {
    return m_type;
}
void OAIPatchToken_request::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPatchToken_request::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPatchToken_request::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPatchToken_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_driver_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatchToken_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
