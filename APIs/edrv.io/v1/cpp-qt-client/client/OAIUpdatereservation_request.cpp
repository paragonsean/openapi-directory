/**
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdatereservation_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdatereservation_request::OAIUpdatereservation_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdatereservation_request::OAIUpdatereservation_request() {
    this->initializeModel();
}

OAIUpdatereservation_request::~OAIUpdatereservation_request() {}

void OAIUpdatereservation_request::initializeModel() {

    m_connector_isSet = false;
    m_connector_isValid = false;

    m_driver_isSet = false;
    m_driver_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_evse_isSet = false;
    m_evse_isValid = false;
}

void OAIUpdatereservation_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdatereservation_request::fromJsonObject(QJsonObject json) {

    m_connector_isValid = ::OpenAPI::fromJsonValue(m_connector, json[QString("connector")]);
    m_connector_isSet = !json[QString("connector")].isNull() && m_connector_isValid;

    m_driver_isValid = ::OpenAPI::fromJsonValue(m_driver, json[QString("driver")]);
    m_driver_isSet = !json[QString("driver")].isNull() && m_driver_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_evse_isValid = ::OpenAPI::fromJsonValue(m_evse, json[QString("evse")]);
    m_evse_isSet = !json[QString("evse")].isNull() && m_evse_isValid;
}

QString OAIUpdatereservation_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdatereservation_request::asJsonObject() const {
    QJsonObject obj;
    if (m_connector_isSet) {
        obj.insert(QString("connector"), ::OpenAPI::toJsonValue(m_connector));
    }
    if (m_driver_isSet) {
        obj.insert(QString("driver"), ::OpenAPI::toJsonValue(m_driver));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_evse_isSet) {
        obj.insert(QString("evse"), ::OpenAPI::toJsonValue(m_evse));
    }
    return obj;
}

qint32 OAIUpdatereservation_request::getConnector() const {
    return m_connector;
}
void OAIUpdatereservation_request::setConnector(const qint32 &connector) {
    m_connector = connector;
    m_connector_isSet = true;
}

bool OAIUpdatereservation_request::is_connector_Set() const{
    return m_connector_isSet;
}

bool OAIUpdatereservation_request::is_connector_Valid() const{
    return m_connector_isValid;
}

QString OAIUpdatereservation_request::getDriver() const {
    return m_driver;
}
void OAIUpdatereservation_request::setDriver(const QString &driver) {
    m_driver = driver;
    m_driver_isSet = true;
}

bool OAIUpdatereservation_request::is_driver_Set() const{
    return m_driver_isSet;
}

bool OAIUpdatereservation_request::is_driver_Valid() const{
    return m_driver_isValid;
}

QString OAIUpdatereservation_request::getEndDate() const {
    return m_end_date;
}
void OAIUpdatereservation_request::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIUpdatereservation_request::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIUpdatereservation_request::is_end_date_Valid() const{
    return m_end_date_isValid;
}

qint32 OAIUpdatereservation_request::getEvse() const {
    return m_evse;
}
void OAIUpdatereservation_request::setEvse(const qint32 &evse) {
    m_evse = evse;
    m_evse_isSet = true;
}

bool OAIUpdatereservation_request::is_evse_Set() const{
    return m_evse_isSet;
}

bool OAIUpdatereservation_request::is_evse_Valid() const{
    return m_evse_isValid;
}

bool OAIUpdatereservation_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_driver_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evse_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdatereservation_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
