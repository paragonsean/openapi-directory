/**
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICommandsApi_H
#define OAI_OAICommandsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICancelreservation_request.h"
#include "OAIPatchChargeStationVariable_request.h"
#include "OAIPatchChargeStation_200_response.h"
#include "OAIRemotestart_request.h"
#include "OAIRemotestop_request.h"
#include "OAIReserve_request.h"
#include "OAIReset_request.h"
#include "OAISetchargingschedule_201_response.h"
#include "OAIUnlockconnector_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICommandsApi : public QObject {
    Q_OBJECT

public:
    OAICommandsApi(const int timeOut = 0);
    ~OAICommandsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_cancelreservation_request OAICancelreservation_request [required]
    */
    virtual void cancelreservation(const OAICancelreservation_request &oai_cancelreservation_request);

    /**
    * @param[in]  paginate_limit qint32 [optional]
    * @param[in]  paginate_page QString [optional]
    * @param[in]  paginate_enabled bool [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  created_at_gte QDateTime [optional]
    * @param[in]  created_at_lte QDateTime [optional]
    * @param[in]  updated_at_gte QDateTime [optional]
    * @param[in]  updated_at_lte QDateTime [optional]
    * @param[in]  include_chargestation bool [optional]
    * @param[in]  include_driver bool [optional]
    * @param[in]  include_transaction bool [optional]
    * @param[in]  include_organization bool [optional]
    */
    virtual void getCommands(const ::OpenAPI::OptionalParam<qint32> &paginate_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &paginate_page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &paginate_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_gte = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_lte = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &updated_at_gte = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &updated_at_lte = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &include_chargestation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_driver = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_transaction = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_organization = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getVariables(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_patch_charge_station_variable_request OAIPatchChargeStationVariable_request [required]
    */
    virtual void patchChargeStationVariable(const QString &id, const OAIPatchChargeStationVariable_request &oai_patch_charge_station_variable_request);

    /**
    * @param[in]  oai_remotestart_request OAIRemotestart_request [required]
    */
    virtual void remotestart(const OAIRemotestart_request &oai_remotestart_request);

    /**
    * @param[in]  oai_remotestop_request OAIRemotestop_request [required]
    */
    virtual void remotestop(const OAIRemotestop_request &oai_remotestop_request);

    /**
    * @param[in]  oai_reserve_request OAIReserve_request [required]
    */
    virtual void reserve(const OAIReserve_request &oai_reserve_request);

    /**
    * @param[in]  oai_reset_request OAIReset_request [required]
    */
    virtual void reset(const OAIReset_request &oai_reset_request);

    /**
    * @param[in]  oai_unlockconnector_request OAIUnlockconnector_request [required]
    */
    virtual void unlockconnector(const OAIUnlockconnector_request &oai_unlockconnector_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelreservationCallback(OAIHttpRequestWorker *worker);
    void getCommandsCallback(OAIHttpRequestWorker *worker);
    void getVariablesCallback(OAIHttpRequestWorker *worker);
    void patchChargeStationVariableCallback(OAIHttpRequestWorker *worker);
    void remotestartCallback(OAIHttpRequestWorker *worker);
    void remotestopCallback(OAIHttpRequestWorker *worker);
    void reserveCallback(OAIHttpRequestWorker *worker);
    void resetCallback(OAIHttpRequestWorker *worker);
    void unlockconnectorCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelreservationSignal(OAIPatchChargeStation_200_response summary);
    void getCommandsSignal();
    void getVariablesSignal();
    void patchChargeStationVariableSignal(OAIPatchChargeStation_200_response summary);
    void remotestartSignal(OAISetchargingschedule_201_response summary);
    void remotestopSignal();
    void reserveSignal(OAISetchargingschedule_201_response summary);
    void resetSignal(OAIPatchChargeStation_200_response summary);
    void unlockconnectorSignal(OAISetchargingschedule_201_response summary);


    void cancelreservationSignalFull(OAIHttpRequestWorker *worker, OAIPatchChargeStation_200_response summary);
    void getCommandsSignalFull(OAIHttpRequestWorker *worker);
    void getVariablesSignalFull(OAIHttpRequestWorker *worker);
    void patchChargeStationVariableSignalFull(OAIHttpRequestWorker *worker, OAIPatchChargeStation_200_response summary);
    void remotestartSignalFull(OAIHttpRequestWorker *worker, OAISetchargingschedule_201_response summary);
    void remotestopSignalFull(OAIHttpRequestWorker *worker);
    void reserveSignalFull(OAIHttpRequestWorker *worker, OAISetchargingschedule_201_response summary);
    void resetSignalFull(OAIHttpRequestWorker *worker, OAIPatchChargeStation_200_response summary);
    void unlockconnectorSignalFull(OAIHttpRequestWorker *worker, OAISetchargingschedule_201_response summary);

    Q_DECL_DEPRECATED_X("Use cancelreservationSignalError() instead")
    void cancelreservationSignalE(OAIPatchChargeStation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelreservationSignalError(OAIPatchChargeStation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommandsSignalError() instead")
    void getCommandsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getCommandsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariablesSignalError() instead")
    void getVariablesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getVariablesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchChargeStationVariableSignalError() instead")
    void patchChargeStationVariableSignalE(OAIPatchChargeStation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchChargeStationVariableSignalError(OAIPatchChargeStation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remotestartSignalError() instead")
    void remotestartSignalE(OAISetchargingschedule_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void remotestartSignalError(OAISetchargingschedule_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remotestopSignalError() instead")
    void remotestopSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void remotestopSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reserveSignalError() instead")
    void reserveSignalE(OAISetchargingschedule_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reserveSignalError(OAISetchargingschedule_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetSignalError() instead")
    void resetSignalE(OAIPatchChargeStation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resetSignalError(OAIPatchChargeStation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unlockconnectorSignalError() instead")
    void unlockconnectorSignalE(OAISetchargingschedule_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unlockconnectorSignalError(OAISetchargingschedule_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelreservationSignalErrorFull() instead")
    void cancelreservationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelreservationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommandsSignalErrorFull() instead")
    void getCommandsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommandsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVariablesSignalErrorFull() instead")
    void getVariablesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVariablesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchChargeStationVariableSignalErrorFull() instead")
    void patchChargeStationVariableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchChargeStationVariableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remotestartSignalErrorFull() instead")
    void remotestartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void remotestartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remotestopSignalErrorFull() instead")
    void remotestopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void remotestopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reserveSignalErrorFull() instead")
    void reserveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reserveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetSignalErrorFull() instead")
    void resetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unlockconnectorSignalErrorFull() instead")
    void unlockconnectorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unlockconnectorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
