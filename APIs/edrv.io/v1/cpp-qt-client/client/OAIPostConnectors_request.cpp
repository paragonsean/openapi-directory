/**
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostConnectors_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostConnectors_request::OAIPostConnectors_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostConnectors_request::OAIPostConnectors_request() {
    this->initializeModel();
}

OAIPostConnectors_request::~OAIPostConnectors_request() {}

void OAIPostConnectors_request::initializeModel() {

    m_chargestation_isSet = false;
    m_chargestation_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_power_isSet = false;
    m_power_isValid = false;

    m_power_type_isSet = false;
    m_power_type_isValid = false;

    m_rate_isSet = false;
    m_rate_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPostConnectors_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostConnectors_request::fromJsonObject(QJsonObject json) {

    m_chargestation_isValid = ::OpenAPI::fromJsonValue(m_chargestation, json[QString("chargestation")]);
    m_chargestation_isSet = !json[QString("chargestation")].isNull() && m_chargestation_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_power_isValid = ::OpenAPI::fromJsonValue(m_power, json[QString("power")]);
    m_power_isSet = !json[QString("power")].isNull() && m_power_isValid;

    m_power_type_isValid = ::OpenAPI::fromJsonValue(m_power_type, json[QString("power_type")]);
    m_power_type_isSet = !json[QString("power_type")].isNull() && m_power_type_isValid;

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("rate")]);
    m_rate_isSet = !json[QString("rate")].isNull() && m_rate_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPostConnectors_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostConnectors_request::asJsonObject() const {
    QJsonObject obj;
    if (m_chargestation_isSet) {
        obj.insert(QString("chargestation"), ::OpenAPI::toJsonValue(m_chargestation));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_power_isSet) {
        obj.insert(QString("power"), ::OpenAPI::toJsonValue(m_power));
    }
    if (m_power_type_isSet) {
        obj.insert(QString("power_type"), ::OpenAPI::toJsonValue(m_power_type));
    }
    if (m_rate_isSet) {
        obj.insert(QString("rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIPostConnectors_request::getChargestation() const {
    return m_chargestation;
}
void OAIPostConnectors_request::setChargestation(const QString &chargestation) {
    m_chargestation = chargestation;
    m_chargestation_isSet = true;
}

bool OAIPostConnectors_request::is_chargestation_Set() const{
    return m_chargestation_isSet;
}

bool OAIPostConnectors_request::is_chargestation_Valid() const{
    return m_chargestation_isValid;
}

QString OAIPostConnectors_request::getFormat() const {
    return m_format;
}
void OAIPostConnectors_request::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIPostConnectors_request::is_format_Set() const{
    return m_format_isSet;
}

bool OAIPostConnectors_request::is_format_Valid() const{
    return m_format_isValid;
}

qint32 OAIPostConnectors_request::getPower() const {
    return m_power;
}
void OAIPostConnectors_request::setPower(const qint32 &power) {
    m_power = power;
    m_power_isSet = true;
}

bool OAIPostConnectors_request::is_power_Set() const{
    return m_power_isSet;
}

bool OAIPostConnectors_request::is_power_Valid() const{
    return m_power_isValid;
}

QString OAIPostConnectors_request::getPowerType() const {
    return m_power_type;
}
void OAIPostConnectors_request::setPowerType(const QString &power_type) {
    m_power_type = power_type;
    m_power_type_isSet = true;
}

bool OAIPostConnectors_request::is_power_type_Set() const{
    return m_power_type_isSet;
}

bool OAIPostConnectors_request::is_power_type_Valid() const{
    return m_power_type_isValid;
}

QString OAIPostConnectors_request::getRate() const {
    return m_rate;
}
void OAIPostConnectors_request::setRate(const QString &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAIPostConnectors_request::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAIPostConnectors_request::is_rate_Valid() const{
    return m_rate_isValid;
}

QString OAIPostConnectors_request::getType() const {
    return m_type;
}
void OAIPostConnectors_request::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPostConnectors_request::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPostConnectors_request::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPostConnectors_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chargestation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostConnectors_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
