/**
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatchDriver_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatchDriver_request::OAIPatchDriver_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatchDriver_request::OAIPatchDriver_request() {
    this->initializeModel();
}

OAIPatchDriver_request::~OAIPatchDriver_request() {}

void OAIPatchDriver_request::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_firstname_isSet = false;
    m_firstname_isValid = false;

    m_lastname_isSet = false;
    m_lastname_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_tokens_isSet = false;
    m_tokens_isValid = false;
}

void OAIPatchDriver_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatchDriver_request::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_firstname_isValid = ::OpenAPI::fromJsonValue(m_firstname, json[QString("firstname")]);
    m_firstname_isSet = !json[QString("firstname")].isNull() && m_firstname_isValid;

    m_lastname_isValid = ::OpenAPI::fromJsonValue(m_lastname, json[QString("lastname")]);
    m_lastname_isSet = !json[QString("lastname")].isNull() && m_lastname_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_tokens_isValid = ::OpenAPI::fromJsonValue(m_tokens, json[QString("tokens")]);
    m_tokens_isSet = !json[QString("tokens")].isNull() && m_tokens_isValid;
}

QString OAIPatchDriver_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatchDriver_request::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_firstname_isSet) {
        obj.insert(QString("firstname"), ::OpenAPI::toJsonValue(m_firstname));
    }
    if (m_lastname_isSet) {
        obj.insert(QString("lastname"), ::OpenAPI::toJsonValue(m_lastname));
    }
    if (m_phone.isSet()) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_tokens.size() > 0) {
        obj.insert(QString("tokens"), ::OpenAPI::toJsonValue(m_tokens));
    }
    return obj;
}

bool OAIPatchDriver_request::isActive() const {
    return m_active;
}
void OAIPatchDriver_request::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIPatchDriver_request::is_active_Set() const{
    return m_active_isSet;
}

bool OAIPatchDriver_request::is_active_Valid() const{
    return m_active_isValid;
}

OAIPostDrivers_request_address OAIPatchDriver_request::getAddress() const {
    return m_address;
}
void OAIPatchDriver_request::setAddress(const OAIPostDrivers_request_address &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIPatchDriver_request::is_address_Set() const{
    return m_address_isSet;
}

bool OAIPatchDriver_request::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIPatchDriver_request::getEmail() const {
    return m_email;
}
void OAIPatchDriver_request::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIPatchDriver_request::is_email_Set() const{
    return m_email_isSet;
}

bool OAIPatchDriver_request::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIPatchDriver_request::getFirstname() const {
    return m_firstname;
}
void OAIPatchDriver_request::setFirstname(const QString &firstname) {
    m_firstname = firstname;
    m_firstname_isSet = true;
}

bool OAIPatchDriver_request::is_firstname_Set() const{
    return m_firstname_isSet;
}

bool OAIPatchDriver_request::is_firstname_Valid() const{
    return m_firstname_isValid;
}

QString OAIPatchDriver_request::getLastname() const {
    return m_lastname;
}
void OAIPatchDriver_request::setLastname(const QString &lastname) {
    m_lastname = lastname;
    m_lastname_isSet = true;
}

bool OAIPatchDriver_request::is_lastname_Set() const{
    return m_lastname_isSet;
}

bool OAIPatchDriver_request::is_lastname_Valid() const{
    return m_lastname_isValid;
}

OAIPostDrivers_request_phone OAIPatchDriver_request::getPhone() const {
    return m_phone;
}
void OAIPatchDriver_request::setPhone(const OAIPostDrivers_request_phone &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIPatchDriver_request::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIPatchDriver_request::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIPatchDriver_request::getSource() const {
    return m_source;
}
void OAIPatchDriver_request::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIPatchDriver_request::is_source_Set() const{
    return m_source_isSet;
}

bool OAIPatchDriver_request::is_source_Valid() const{
    return m_source_isValid;
}

QList<QJsonValue> OAIPatchDriver_request::getTokens() const {
    return m_tokens;
}
void OAIPatchDriver_request::setTokens(const QList<QJsonValue> &tokens) {
    m_tokens = tokens;
    m_tokens_isSet = true;
}

bool OAIPatchDriver_request::is_tokens_Set() const{
    return m_tokens_isSet;
}

bool OAIPatchDriver_request::is_tokens_Valid() const{
    return m_tokens_isValid;
}

bool OAIPatchDriver_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firstname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lastname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tokens.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatchDriver_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
