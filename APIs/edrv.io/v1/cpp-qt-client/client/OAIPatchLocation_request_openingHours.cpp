/**
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatchLocation_request_openingHours.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatchLocation_request_openingHours::OAIPatchLocation_request_openingHours(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatchLocation_request_openingHours::OAIPatchLocation_request_openingHours() {
    this->initializeModel();
}

OAIPatchLocation_request_openingHours::~OAIPatchLocation_request_openingHours() {}

void OAIPatchLocation_request_openingHours::initializeModel() {

    m_r_0_isSet = false;
    m_r_0_isValid = false;

    m_r_1_isSet = false;
    m_r_1_isValid = false;

    m_r_2_isSet = false;
    m_r_2_isValid = false;

    m_r_3_isSet = false;
    m_r_3_isValid = false;

    m_r_4_isSet = false;
    m_r_4_isValid = false;

    m_r_5_isSet = false;
    m_r_5_isValid = false;

    m_r_6_isSet = false;
    m_r_6_isValid = false;
}

void OAIPatchLocation_request_openingHours::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatchLocation_request_openingHours::fromJsonObject(QJsonObject json) {

    m_r_0_isValid = ::OpenAPI::fromJsonValue(m_r_0, json[QString("0")]);
    m_r_0_isSet = !json[QString("0")].isNull() && m_r_0_isValid;

    m_r_1_isValid = ::OpenAPI::fromJsonValue(m_r_1, json[QString("1")]);
    m_r_1_isSet = !json[QString("1")].isNull() && m_r_1_isValid;

    m_r_2_isValid = ::OpenAPI::fromJsonValue(m_r_2, json[QString("2")]);
    m_r_2_isSet = !json[QString("2")].isNull() && m_r_2_isValid;

    m_r_3_isValid = ::OpenAPI::fromJsonValue(m_r_3, json[QString("3")]);
    m_r_3_isSet = !json[QString("3")].isNull() && m_r_3_isValid;

    m_r_4_isValid = ::OpenAPI::fromJsonValue(m_r_4, json[QString("4")]);
    m_r_4_isSet = !json[QString("4")].isNull() && m_r_4_isValid;

    m_r_5_isValid = ::OpenAPI::fromJsonValue(m_r_5, json[QString("5")]);
    m_r_5_isSet = !json[QString("5")].isNull() && m_r_5_isValid;

    m_r_6_isValid = ::OpenAPI::fromJsonValue(m_r_6, json[QString("6")]);
    m_r_6_isSet = !json[QString("6")].isNull() && m_r_6_isValid;
}

QString OAIPatchLocation_request_openingHours::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatchLocation_request_openingHours::asJsonObject() const {
    QJsonObject obj;
    if (m_r_0.size() > 0) {
        obj.insert(QString("0"), ::OpenAPI::toJsonValue(m_r_0));
    }
    if (m_r_1.size() > 0) {
        obj.insert(QString("1"), ::OpenAPI::toJsonValue(m_r_1));
    }
    if (m_r_2.size() > 0) {
        obj.insert(QString("2"), ::OpenAPI::toJsonValue(m_r_2));
    }
    if (m_r_3.size() > 0) {
        obj.insert(QString("3"), ::OpenAPI::toJsonValue(m_r_3));
    }
    if (m_r_4.size() > 0) {
        obj.insert(QString("4"), ::OpenAPI::toJsonValue(m_r_4));
    }
    if (m_r_5.size() > 0) {
        obj.insert(QString("5"), ::OpenAPI::toJsonValue(m_r_5));
    }
    if (m_r_6.size() > 0) {
        obj.insert(QString("6"), ::OpenAPI::toJsonValue(m_r_6));
    }
    return obj;
}

QList<OAIPatchLocation_request_openingHours_0_inner> OAIPatchLocation_request_openingHours::getR0() const {
    return m_r_0;
}
void OAIPatchLocation_request_openingHours::setR0(const QList<OAIPatchLocation_request_openingHours_0_inner> &r_0) {
    m_r_0 = r_0;
    m_r_0_isSet = true;
}

bool OAIPatchLocation_request_openingHours::is_r_0_Set() const{
    return m_r_0_isSet;
}

bool OAIPatchLocation_request_openingHours::is_r_0_Valid() const{
    return m_r_0_isValid;
}

QList<OAIPatchLocation_request_openingHours_0_inner> OAIPatchLocation_request_openingHours::getR1() const {
    return m_r_1;
}
void OAIPatchLocation_request_openingHours::setR1(const QList<OAIPatchLocation_request_openingHours_0_inner> &r_1) {
    m_r_1 = r_1;
    m_r_1_isSet = true;
}

bool OAIPatchLocation_request_openingHours::is_r_1_Set() const{
    return m_r_1_isSet;
}

bool OAIPatchLocation_request_openingHours::is_r_1_Valid() const{
    return m_r_1_isValid;
}

QList<OAIPatchLocation_request_openingHours_0_inner> OAIPatchLocation_request_openingHours::getR2() const {
    return m_r_2;
}
void OAIPatchLocation_request_openingHours::setR2(const QList<OAIPatchLocation_request_openingHours_0_inner> &r_2) {
    m_r_2 = r_2;
    m_r_2_isSet = true;
}

bool OAIPatchLocation_request_openingHours::is_r_2_Set() const{
    return m_r_2_isSet;
}

bool OAIPatchLocation_request_openingHours::is_r_2_Valid() const{
    return m_r_2_isValid;
}

QList<OAIPatchLocation_request_openingHours_0_inner> OAIPatchLocation_request_openingHours::getR3() const {
    return m_r_3;
}
void OAIPatchLocation_request_openingHours::setR3(const QList<OAIPatchLocation_request_openingHours_0_inner> &r_3) {
    m_r_3 = r_3;
    m_r_3_isSet = true;
}

bool OAIPatchLocation_request_openingHours::is_r_3_Set() const{
    return m_r_3_isSet;
}

bool OAIPatchLocation_request_openingHours::is_r_3_Valid() const{
    return m_r_3_isValid;
}

QList<OAIPatchLocation_request_openingHours_0_inner> OAIPatchLocation_request_openingHours::getR4() const {
    return m_r_4;
}
void OAIPatchLocation_request_openingHours::setR4(const QList<OAIPatchLocation_request_openingHours_0_inner> &r_4) {
    m_r_4 = r_4;
    m_r_4_isSet = true;
}

bool OAIPatchLocation_request_openingHours::is_r_4_Set() const{
    return m_r_4_isSet;
}

bool OAIPatchLocation_request_openingHours::is_r_4_Valid() const{
    return m_r_4_isValid;
}

QList<OAIPatchLocation_request_openingHours_0_inner> OAIPatchLocation_request_openingHours::getR5() const {
    return m_r_5;
}
void OAIPatchLocation_request_openingHours::setR5(const QList<OAIPatchLocation_request_openingHours_0_inner> &r_5) {
    m_r_5 = r_5;
    m_r_5_isSet = true;
}

bool OAIPatchLocation_request_openingHours::is_r_5_Set() const{
    return m_r_5_isSet;
}

bool OAIPatchLocation_request_openingHours::is_r_5_Valid() const{
    return m_r_5_isValid;
}

QList<OAIPatchLocation_request_openingHours_0_inner> OAIPatchLocation_request_openingHours::getR6() const {
    return m_r_6;
}
void OAIPatchLocation_request_openingHours::setR6(const QList<OAIPatchLocation_request_openingHours_0_inner> &r_6) {
    m_r_6 = r_6;
    m_r_6_isSet = true;
}

bool OAIPatchLocation_request_openingHours::is_r_6_Set() const{
    return m_r_6_isSet;
}

bool OAIPatchLocation_request_openingHours::is_r_6_Valid() const{
    return m_r_6_isValid;
}

bool OAIPatchLocation_request_openingHours::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_0.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_1.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_2.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_3.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_4.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_5.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_6.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatchLocation_request_openingHours::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
