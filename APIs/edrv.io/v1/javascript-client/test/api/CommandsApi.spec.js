/**
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EDrvApi);
  }
}(this, function(expect, EDrvApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EDrvApi.CommandsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CommandsApi', function() {
    describe('cancelreservation', function() {
      it('should call cancelreservation successfully', function(done) {
        //uncomment below and update the code to test cancelreservation
        //instance.cancelreservation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCommands', function() {
      it('should call getCommands successfully', function(done) {
        //uncomment below and update the code to test getCommands
        //instance.getCommands(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getVariables', function() {
      it('should call getVariables successfully', function(done) {
        //uncomment below and update the code to test getVariables
        //instance.getVariables(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchChargeStationVariable', function() {
      it('should call patchChargeStationVariable successfully', function(done) {
        //uncomment below and update the code to test patchChargeStationVariable
        //instance.patchChargeStationVariable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('remotestart', function() {
      it('should call remotestart successfully', function(done) {
        //uncomment below and update the code to test remotestart
        //instance.remotestart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('remotestop', function() {
      it('should call remotestop successfully', function(done) {
        //uncomment below and update the code to test remotestop
        //instance.remotestop(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reserve', function() {
      it('should call reserve successfully', function(done) {
        //uncomment below and update the code to test reserve
        //instance.reserve(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reset', function() {
      it('should call reset successfully', function(done) {
        //uncomment below and update the code to test reset
        //instance.reset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unlockconnector', function() {
      it('should call unlockconnector successfully', function(done) {
        //uncomment below and update the code to test unlockconnector
        //instance.unlockconnector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
