/**
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PatchTokenRequest model module.
 * @module model/PatchTokenRequest
 * @version v1
 */
class PatchTokenRequest {
    /**
     * Constructs a new <code>PatchTokenRequest</code>.
     * @alias module:model/PatchTokenRequest
     */
    constructor() { 
        
        PatchTokenRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['active'] = true;
    }

    /**
     * Constructs a <code>PatchTokenRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PatchTokenRequest} obj Optional instance to populate.
     * @return {module:model/PatchTokenRequest} The populated <code>PatchTokenRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PatchTokenRequest();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
            if (data.hasOwnProperty('driver')) {
                obj['driver'] = ApiClient.convertToType(data['driver'], 'String');
            }
            if (data.hasOwnProperty('physicalId')) {
                obj['physicalId'] = ApiClient.convertToType(data['physicalId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PatchTokenRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PatchTokenRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['channel'] && !(typeof data['channel'] === 'string' || data['channel'] instanceof String)) {
            throw new Error("Expected the field `channel` to be a primitive type in the JSON string but got " + data['channel']);
        }
        // ensure the json data is a string
        if (data['driver'] && !(typeof data['driver'] === 'string' || data['driver'] instanceof String)) {
            throw new Error("Expected the field `driver` to be a primitive type in the JSON string but got " + data['driver']);
        }
        // ensure the json data is a string
        if (data['physicalId'] && !(typeof data['physicalId'] === 'string' || data['physicalId'] instanceof String)) {
            throw new Error("Expected the field `physicalId` to be a primitive type in the JSON string but got " + data['physicalId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {Boolean} active
 * @default true
 */
PatchTokenRequest.prototype['active'] = true;

/**
 * @member {module:model/PatchTokenRequest.ChannelEnum} channel
 */
PatchTokenRequest.prototype['channel'] = undefined;

/**
 * @member {String} driver
 */
PatchTokenRequest.prototype['driver'] = undefined;

/**
 * @member {String} physicalId
 */
PatchTokenRequest.prototype['physicalId'] = undefined;

/**
 * @member {String} type
 */
PatchTokenRequest.prototype['type'] = undefined;





/**
 * Allowed values for the <code>channel</code> property.
 * @enum {String}
 * @readonly
 */
PatchTokenRequest['ChannelEnum'] = {

    /**
     * value: "physical"
     * @const
     */
    "physical": "physical",

    /**
     * value: "slack"
     * @const
     */
    "slack": "slack",

    /**
     * value: "telegram"
     * @const
     */
    "telegram": "telegram",

    /**
     * value: "sms"
     * @const
     */
    "sms": "sms"
};



export default PatchTokenRequest;

