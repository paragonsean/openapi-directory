/**
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PatchLocationRequestOpeningHours0Inner from './PatchLocationRequestOpeningHours0Inner';

/**
 * The PatchLocationRequestOpeningHours model module.
 * @module model/PatchLocationRequestOpeningHours
 * @version v1
 */
class PatchLocationRequestOpeningHours {
    /**
     * Constructs a new <code>PatchLocationRequestOpeningHours</code>.
     * @alias module:model/PatchLocationRequestOpeningHours
     */
    constructor() { 
        
        PatchLocationRequestOpeningHours.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PatchLocationRequestOpeningHours</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PatchLocationRequestOpeningHours} obj Optional instance to populate.
     * @return {module:model/PatchLocationRequestOpeningHours} The populated <code>PatchLocationRequestOpeningHours</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PatchLocationRequestOpeningHours();

            if (data.hasOwnProperty('0')) {
                obj['0'] = ApiClient.convertToType(data['0'], [PatchLocationRequestOpeningHours0Inner]);
            }
            if (data.hasOwnProperty('1')) {
                obj['1'] = ApiClient.convertToType(data['1'], [PatchLocationRequestOpeningHours0Inner]);
            }
            if (data.hasOwnProperty('2')) {
                obj['2'] = ApiClient.convertToType(data['2'], [PatchLocationRequestOpeningHours0Inner]);
            }
            if (data.hasOwnProperty('3')) {
                obj['3'] = ApiClient.convertToType(data['3'], [PatchLocationRequestOpeningHours0Inner]);
            }
            if (data.hasOwnProperty('4')) {
                obj['4'] = ApiClient.convertToType(data['4'], [PatchLocationRequestOpeningHours0Inner]);
            }
            if (data.hasOwnProperty('5')) {
                obj['5'] = ApiClient.convertToType(data['5'], [PatchLocationRequestOpeningHours0Inner]);
            }
            if (data.hasOwnProperty('6')) {
                obj['6'] = ApiClient.convertToType(data['6'], [PatchLocationRequestOpeningHours0Inner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PatchLocationRequestOpeningHours</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PatchLocationRequestOpeningHours</code>.
     */
    static validateJSON(data) {
        if (data['0']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['0'])) {
                throw new Error("Expected the field `0` to be an array in the JSON data but got " + data['0']);
            }
            // validate the optional field `0` (array)
            for (const item of data['0']) {
                PatchLocationRequestOpeningHours0Inner.validateJSON(item);
            };
        }
        if (data['1']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['1'])) {
                throw new Error("Expected the field `1` to be an array in the JSON data but got " + data['1']);
            }
            // validate the optional field `1` (array)
            for (const item of data['1']) {
                PatchLocationRequestOpeningHours0Inner.validateJSON(item);
            };
        }
        if (data['2']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['2'])) {
                throw new Error("Expected the field `2` to be an array in the JSON data but got " + data['2']);
            }
            // validate the optional field `2` (array)
            for (const item of data['2']) {
                PatchLocationRequestOpeningHours0Inner.validateJSON(item);
            };
        }
        if (data['3']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['3'])) {
                throw new Error("Expected the field `3` to be an array in the JSON data but got " + data['3']);
            }
            // validate the optional field `3` (array)
            for (const item of data['3']) {
                PatchLocationRequestOpeningHours0Inner.validateJSON(item);
            };
        }
        if (data['4']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['4'])) {
                throw new Error("Expected the field `4` to be an array in the JSON data but got " + data['4']);
            }
            // validate the optional field `4` (array)
            for (const item of data['4']) {
                PatchLocationRequestOpeningHours0Inner.validateJSON(item);
            };
        }
        if (data['5']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['5'])) {
                throw new Error("Expected the field `5` to be an array in the JSON data but got " + data['5']);
            }
            // validate the optional field `5` (array)
            for (const item of data['5']) {
                PatchLocationRequestOpeningHours0Inner.validateJSON(item);
            };
        }
        if (data['6']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['6'])) {
                throw new Error("Expected the field `6` to be an array in the JSON data but got " + data['6']);
            }
            // validate the optional field `6` (array)
            for (const item of data['6']) {
                PatchLocationRequestOpeningHours0Inner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/PatchLocationRequestOpeningHours0Inner>} 0
 */
PatchLocationRequestOpeningHours.prototype['0'] = undefined;

/**
 * @member {Array.<module:model/PatchLocationRequestOpeningHours0Inner>} 1
 */
PatchLocationRequestOpeningHours.prototype['1'] = undefined;

/**
 * @member {Array.<module:model/PatchLocationRequestOpeningHours0Inner>} 2
 */
PatchLocationRequestOpeningHours.prototype['2'] = undefined;

/**
 * @member {Array.<module:model/PatchLocationRequestOpeningHours0Inner>} 3
 */
PatchLocationRequestOpeningHours.prototype['3'] = undefined;

/**
 * @member {Array.<module:model/PatchLocationRequestOpeningHours0Inner>} 4
 */
PatchLocationRequestOpeningHours.prototype['4'] = undefined;

/**
 * @member {Array.<module:model/PatchLocationRequestOpeningHours0Inner>} 5
 */
PatchLocationRequestOpeningHours.prototype['5'] = undefined;

/**
 * @member {Array.<module:model/PatchLocationRequestOpeningHours0Inner>} 6
 */
PatchLocationRequestOpeningHours.prototype['6'] = undefined;






export default PatchLocationRequestOpeningHours;

