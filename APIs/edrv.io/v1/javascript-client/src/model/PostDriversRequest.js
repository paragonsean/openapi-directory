/**
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PostDriversRequestAddress from './PostDriversRequestAddress';
import PostDriversRequestPhone from './PostDriversRequestPhone';

/**
 * The PostDriversRequest model module.
 * @module model/PostDriversRequest
 * @version v1
 */
class PostDriversRequest {
    /**
     * Constructs a new <code>PostDriversRequest</code>.
     * @alias module:model/PostDriversRequest
     * @param firstname {String} 
     * @param lastname {String} 
     * @param source {module:model/PostDriversRequest.SourceEnum} 
     */
    constructor(firstname, lastname, source) { 
        
        PostDriversRequest.initialize(this, firstname, lastname, source);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, firstname, lastname, source) { 
        obj['active'] = true;
        obj['firstname'] = firstname;
        obj['lastname'] = lastname;
        obj['source'] = source;
    }

    /**
     * Constructs a <code>PostDriversRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostDriversRequest} obj Optional instance to populate.
     * @return {module:model/PostDriversRequest} The populated <code>PostDriversRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostDriversRequest();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = PostDriversRequestAddress.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('firstname')) {
                obj['firstname'] = ApiClient.convertToType(data['firstname'], 'String');
            }
            if (data.hasOwnProperty('lastname')) {
                obj['lastname'] = ApiClient.convertToType(data['lastname'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = PostDriversRequestPhone.constructFromObject(data['phone']);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostDriversRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostDriversRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PostDriversRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          PostDriversRequestAddress.validateJSON(data['address']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['firstname'] && !(typeof data['firstname'] === 'string' || data['firstname'] instanceof String)) {
            throw new Error("Expected the field `firstname` to be a primitive type in the JSON string but got " + data['firstname']);
        }
        // ensure the json data is a string
        if (data['lastname'] && !(typeof data['lastname'] === 'string' || data['lastname'] instanceof String)) {
            throw new Error("Expected the field `lastname` to be a primitive type in the JSON string but got " + data['lastname']);
        }
        // validate the optional field `phone`
        if (data['phone']) { // data not null
          PostDriversRequestPhone.validateJSON(data['phone']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }

        return true;
    }


}

PostDriversRequest.RequiredProperties = ["firstname", "lastname", "source"];

/**
 * @member {Boolean} active
 * @default true
 */
PostDriversRequest.prototype['active'] = true;

/**
 * @member {module:model/PostDriversRequestAddress} address
 */
PostDriversRequest.prototype['address'] = undefined;

/**
 * @member {String} email
 */
PostDriversRequest.prototype['email'] = undefined;

/**
 * @member {String} firstname
 */
PostDriversRequest.prototype['firstname'] = undefined;

/**
 * @member {String} lastname
 */
PostDriversRequest.prototype['lastname'] = undefined;

/**
 * @member {module:model/PostDriversRequestPhone} phone
 */
PostDriversRequest.prototype['phone'] = undefined;

/**
 * @member {module:model/PostDriversRequest.SourceEnum} source
 */
PostDriversRequest.prototype['source'] = undefined;





/**
 * Allowed values for the <code>source</code> property.
 * @enum {String}
 * @readonly
 */
PostDriversRequest['SourceEnum'] = {

    /**
     * value: "physical"
     * @const
     */
    "physical": "physical",

    /**
     * value: "slack"
     * @const
     */
    "slack": "slack",

    /**
     * value: "telegram"
     * @const
     */
    "telegram": "telegram",

    /**
     * value: "sms"
     * @const
     */
    "sms": "sms"
};



export default PostDriversRequest;

