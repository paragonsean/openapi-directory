/**
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PatchLocationRequestCoordinates from './PatchLocationRequestCoordinates';
import PostDriversRequestAddress from './PostDriversRequestAddress';

/**
 * The PostLocationsRequest model module.
 * @module model/PostLocationsRequest
 * @version v1
 */
class PostLocationsRequest {
    /**
     * Constructs a new <code>PostLocationsRequest</code>.
     * @alias module:model/PostLocationsRequest
     * @param address {module:model/PostDriversRequestAddress} 
     * @param coordinates {module:model/PatchLocationRequestCoordinates} 
     * @param operatorName {String} 
     */
    constructor(address, coordinates, operatorName) { 
        
        PostLocationsRequest.initialize(this, address, coordinates, operatorName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, address, coordinates, operatorName) { 
        obj['active'] = true;
        obj['address'] = address;
        obj['coordinates'] = coordinates;
        obj['operatorName'] = operatorName;
    }

    /**
     * Constructs a <code>PostLocationsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostLocationsRequest} obj Optional instance to populate.
     * @return {module:model/PostLocationsRequest} The populated <code>PostLocationsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostLocationsRequest();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = PostDriversRequestAddress.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('chargestations')) {
                obj['chargestations'] = ApiClient.convertToType(data['chargestations'], [Object]);
            }
            if (data.hasOwnProperty('coordinates')) {
                obj['coordinates'] = PatchLocationRequestCoordinates.constructFromObject(data['coordinates']);
            }
            if (data.hasOwnProperty('operatorName')) {
                obj['operatorName'] = ApiClient.convertToType(data['operatorName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostLocationsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostLocationsRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PostLocationsRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          PostDriversRequestAddress.validateJSON(data['address']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['chargestations'])) {
            throw new Error("Expected the field `chargestations` to be an array in the JSON data but got " + data['chargestations']);
        }
        // validate the optional field `coordinates`
        if (data['coordinates']) { // data not null
          PatchLocationRequestCoordinates.validateJSON(data['coordinates']);
        }
        // ensure the json data is a string
        if (data['operatorName'] && !(typeof data['operatorName'] === 'string' || data['operatorName'] instanceof String)) {
            throw new Error("Expected the field `operatorName` to be a primitive type in the JSON string but got " + data['operatorName']);
        }

        return true;
    }


}

PostLocationsRequest.RequiredProperties = ["address", "coordinates", "operatorName"];

/**
 * @member {Boolean} active
 * @default true
 */
PostLocationsRequest.prototype['active'] = true;

/**
 * @member {module:model/PostDriversRequestAddress} address
 */
PostLocationsRequest.prototype['address'] = undefined;

/**
 * @member {Array.<Object>} chargestations
 */
PostLocationsRequest.prototype['chargestations'] = undefined;

/**
 * @member {module:model/PatchLocationRequestCoordinates} coordinates
 */
PostLocationsRequest.prototype['coordinates'] = undefined;

/**
 * @member {String} operatorName
 */
PostLocationsRequest.prototype['operatorName'] = undefined;






export default PostLocationsRequest;

