/**
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CancelreservationRequest from '../model/CancelreservationRequest';
import PatchChargeStation200Response from '../model/PatchChargeStation200Response';
import PatchChargeStationVariableRequest from '../model/PatchChargeStationVariableRequest';
import RemotestartRequest from '../model/RemotestartRequest';
import RemotestopRequest from '../model/RemotestopRequest';
import ReserveRequest from '../model/ReserveRequest';
import ResetRequest from '../model/ResetRequest';
import Setchargingschedule201Response from '../model/Setchargingschedule201Response';
import UnlockconnectorRequest from '../model/UnlockconnectorRequest';

/**
* Commands service.
* @module api/CommandsApi
* @version v1
*/
export default class CommandsApi {

    /**
    * Constructs a new CommandsApi. 
    * @alias module:api/CommandsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelreservation operation.
     * @callback module:api/CommandsApi~cancelreservationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PatchChargeStation200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use to request a delete an existing reservation. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     * @param {module:model/CancelreservationRequest} cancelreservationRequest 
     * @param {module:api/CommandsApi~cancelreservationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PatchChargeStation200Response}
     */
    cancelreservation(cancelreservationRequest, callback) {
      let postBody = cancelreservationRequest;
      // verify the required parameter 'cancelreservationRequest' is set
      if (cancelreservationRequest === undefined || cancelreservationRequest === null) {
        throw new Error("Missing the required parameter 'cancelreservationRequest' when calling cancelreservation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PatchChargeStation200Response;
      return this.apiClient.callApi(
        '/v1/commands/cancelreservation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCommands operation.
     * @callback module:api/CommandsApi~getCommandsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Commands data
     * @param {Object} opts Optional parameters
     * @param {Number} [paginateLimit = 20)] Number of results per page
     * @param {String} [paginatePage] The queried page index
     * @param {Boolean} [paginateEnabled = true)] Enable pagination
     * @param {String} [sortBy = 'createdAt')] Sort data by this key
     * @param {module:model/String} [sortOrder = 'desc')] asc to sort ascending (default is desc - descending)
     * @param {Date} [createdAtGte] Date as ISO String
     * @param {Date} [createdAtLte] Date as ISO String
     * @param {Date} [updatedAtGte] Date as ISO String
     * @param {Date} [updatedAtLte] Date as ISO String
     * @param {Boolean} [includeChargestation] Populate chargestation
     * @param {Boolean} [includeDriver] Populate driver
     * @param {Boolean} [includeTransaction] Populate transaction
     * @param {Boolean} [includeOrganization] Populate organization
     * @param {module:api/CommandsApi~getCommandsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCommands(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'paginate_limit': opts['paginateLimit'],
        'paginate_page': opts['paginatePage'],
        'paginate_enabled': opts['paginateEnabled'],
        'sort_by': opts['sortBy'],
        'sort_order': opts['sortOrder'],
        'createdAt[$gte]': opts['createdAtGte'],
        'createdAt[$lte]': opts['createdAtLte'],
        'updatedAt[$gte]': opts['updatedAtGte'],
        'updatedAt[$lte]': opts['updatedAtLte'],
        'include_chargestation': opts['includeChargestation'],
        'include_driver': opts['includeDriver'],
        'include_transaction': opts['includeTransaction'],
        'include_organization': opts['includeOrganization']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/commands', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariables operation.
     * @callback module:api/CommandsApi~getVariablesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a charge station's config variables
     * @param {String} id The chargestation id
     * @param {module:api/CommandsApi~getVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getVariables(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVariables");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/commands/{id}/variables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchChargeStationVariable operation.
     * @callback module:api/CommandsApi~patchChargeStationVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PatchChargeStation200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update config variables for a chargestation
     * @param {String} id ID of charge station
     * @param {module:model/PatchChargeStationVariableRequest} patchChargeStationVariableRequest Charge Station Variable to set
     * @param {module:api/CommandsApi~patchChargeStationVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PatchChargeStation200Response}
     */
    patchChargeStationVariable(id, patchChargeStationVariableRequest, callback) {
      let postBody = patchChargeStationVariableRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchChargeStationVariable");
      }
      // verify the required parameter 'patchChargeStationVariableRequest' is set
      if (patchChargeStationVariableRequest === undefined || patchChargeStationVariableRequest === null) {
        throw new Error("Missing the required parameter 'patchChargeStationVariableRequest' when calling patchChargeStationVariable");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PatchChargeStation200Response;
      return this.apiClient.callApi(
        '/v1/commands/{id}/variables', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remotestart operation.
     * @callback module:api/CommandsApi~remotestartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Setchargingschedule201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use to request a remote start command. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     * @param {module:model/RemotestartRequest} remotestartRequest 
     * @param {module:api/CommandsApi~remotestartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Setchargingschedule201Response}
     */
    remotestart(remotestartRequest, callback) {
      let postBody = remotestartRequest;
      // verify the required parameter 'remotestartRequest' is set
      if (remotestartRequest === undefined || remotestartRequest === null) {
        throw new Error("Missing the required parameter 'remotestartRequest' when calling remotestart");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Setchargingschedule201Response;
      return this.apiClient.callApi(
        '/v1/commands/remotestart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remotestop operation.
     * @callback module:api/CommandsApi~remotestopCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use to request a remote stop command. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     * @param {module:model/RemotestopRequest} remotestopRequest Remote stop transaction info here.
     * @param {module:api/CommandsApi~remotestopCallback} callback The callback function, accepting three arguments: error, data, response
     */
    remotestop(remotestopRequest, callback) {
      let postBody = remotestopRequest;
      // verify the required parameter 'remotestopRequest' is set
      if (remotestopRequest === undefined || remotestopRequest === null) {
        throw new Error("Missing the required parameter 'remotestopRequest' when calling remotestop");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/commands/remotestop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reserve operation.
     * @callback module:api/CommandsApi~reserveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Setchargingschedule201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use to request a reserve command. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     * @param {module:model/ReserveRequest} reserveRequest 
     * @param {module:api/CommandsApi~reserveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Setchargingschedule201Response}
     */
    reserve(reserveRequest, callback) {
      let postBody = reserveRequest;
      // verify the required parameter 'reserveRequest' is set
      if (reserveRequest === undefined || reserveRequest === null) {
        throw new Error("Missing the required parameter 'reserveRequest' when calling reserve");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Setchargingschedule201Response;
      return this.apiClient.callApi(
        '/v1/commands/reserve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reset operation.
     * @callback module:api/CommandsApi~resetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PatchChargeStation200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use to request a reset command. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     * @param {module:model/ResetRequest} resetRequest 
     * @param {module:api/CommandsApi~resetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PatchChargeStation200Response}
     */
    reset(resetRequest, callback) {
      let postBody = resetRequest;
      // verify the required parameter 'resetRequest' is set
      if (resetRequest === undefined || resetRequest === null) {
        throw new Error("Missing the required parameter 'resetRequest' when calling reset");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PatchChargeStation200Response;
      return this.apiClient.callApi(
        '/v1/commands/reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unlockconnector operation.
     * @callback module:api/CommandsApi~unlockconnectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Setchargingschedule201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use to request an unlock command for a connector. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     * @param {module:model/UnlockconnectorRequest} unlockconnectorRequest 
     * @param {module:api/CommandsApi~unlockconnectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Setchargingschedule201Response}
     */
    unlockconnector(unlockconnectorRequest, callback) {
      let postBody = unlockconnectorRequest;
      // verify the required parameter 'unlockconnectorRequest' is set
      if (unlockconnectorRequest === undefined || unlockconnectorRequest === null) {
        throw new Error("Missing the required parameter 'unlockconnectorRequest' when calling unlockconnector");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Setchargingschedule201Response;
      return this.apiClient.callApi(
        '/v1/commands/unlockconnector', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
