/**
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetDrivers200Response from '../model/GetDrivers200Response';
import PatchChargeStation200Response from '../model/PatchChargeStation200Response';
import PatchDriverRequest from '../model/PatchDriverRequest';
import PostDriversRequest from '../model/PostDriversRequest';

/**
* Drivers service.
* @module api/DriversApi
* @version v1
*/
export default class DriversApi {

    /**
    * Constructs a new DriversApi. 
    * @alias module:api/DriversApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteDriver operation.
     * @callback module:api/DriversApi~deleteDriverCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a driver
     * @param {String} id The driver id that needs to be deleted
     * @param {module:api/DriversApi~deleteDriverCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDriver(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDriver");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/drivers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDriver operation.
     * @callback module:api/DriversApi~getDriverCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a driver's data
     * @param {String} id The driver id that needs to be fetched
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeTokens] Populate tokens
     * @param {Boolean} [includeGroup] Populate group
     * @param {Boolean} [includeOrganization] Populate organization
     * @param {module:api/DriversApi~getDriverCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDriver(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDriver");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include_tokens': opts['includeTokens'],
        'include_group': opts['includeGroup'],
        'include_organization': opts['includeOrganization']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/drivers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDrivers operation.
     * @callback module:api/DriversApi~getDriversCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDrivers200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all drivers
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] Get a list of active drivers
     * @param {Number} [paginateLimit = 20)] Number of results per page
     * @param {String} [paginatePage] The queried page index
     * @param {Boolean} [paginateEnabled = true)] Enable pagination
     * @param {String} [sortBy = 'createdAt')] Sort data by this key
     * @param {module:model/String} [sortOrder = 'desc')] asc to sort ascending (default is desc - descending)
     * @param {Date} [createdAtGte] Date as ISO String
     * @param {Date} [createdAtLte] Date as ISO String
     * @param {Date} [updatedAtGte] Date as ISO String
     * @param {Date} [updatedAtLte] Date as ISO String
     * @param {Boolean} [includeTokens] Populate tokens
     * @param {Boolean} [includeGroup] Populate group
     * @param {Boolean} [includeOrganization] Populate organization
     * @param {module:api/DriversApi~getDriversCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDrivers200Response}
     */
    getDrivers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active'],
        'paginate_limit': opts['paginateLimit'],
        'paginate_page': opts['paginatePage'],
        'paginate_enabled': opts['paginateEnabled'],
        'sort_by': opts['sortBy'],
        'sort_order': opts['sortOrder'],
        'createdAt[$gte]': opts['createdAtGte'],
        'createdAt[$lte]': opts['createdAtLte'],
        'updatedAt[$gte]': opts['updatedAtGte'],
        'updatedAt[$lte]': opts['updatedAtLte'],
        'include_tokens': opts['includeTokens'],
        'include_group': opts['includeGroup'],
        'include_organization': opts['includeOrganization']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDrivers200Response;
      return this.apiClient.callApi(
        '/v1/drivers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchDriver operation.
     * @callback module:api/DriversApi~patchDriverCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDrivers200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a driver's data
     * @param {String} id ID of driver that needs to be updated
     * @param {module:model/PatchDriverRequest} patchDriverRequest Include driver properties to create here
     * @param {module:api/DriversApi~patchDriverCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDrivers200Response}
     */
    patchDriver(id, patchDriverRequest, callback) {
      let postBody = patchDriverRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchDriver");
      }
      // verify the required parameter 'patchDriverRequest' is set
      if (patchDriverRequest === undefined || patchDriverRequest === null) {
        throw new Error("Missing the required parameter 'patchDriverRequest' when calling patchDriver");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDrivers200Response;
      return this.apiClient.callApi(
        '/v1/drivers/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDrivers operation.
     * @callback module:api/DriversApi~postDriversCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PatchChargeStation200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new driver
     * @param {module:model/PostDriversRequest} postDriversRequest Include driver properties to create here
     * @param {module:api/DriversApi~postDriversCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PatchChargeStation200Response}
     */
    postDrivers(postDriversRequest, callback) {
      let postBody = postDriversRequest;
      // verify the required parameter 'postDriversRequest' is set
      if (postDriversRequest === undefined || postDriversRequest === null) {
        throw new Error("Missing the required parameter 'postDriversRequest' when calling postDrivers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PatchChargeStation200Response;
      return this.apiClient.callApi(
        '/v1/drivers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
