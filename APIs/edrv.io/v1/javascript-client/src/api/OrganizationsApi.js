/**
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PatchOrganizationRequest from '../model/PatchOrganizationRequest';

/**
* Organizations service.
* @module api/OrganizationsApi
* @version v1
*/
export default class OrganizationsApi {

    /**
    * Constructs a new OrganizationsApi. 
    * @alias module:api/OrganizationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getOrganization operation.
     * @callback module:api/OrganizationsApi~getOrganizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one organization's data by id
     * @param {String} id ID of organization that needs to be fetched
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeLocations] Populate locations
     * @param {module:api/OrganizationsApi~getOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrganization(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganization");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include_locations': opts['includeLocations']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/organizations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizations operation.
     * @callback module:api/OrganizationsApi~getOrganizationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an array of all Organizations
     * @param {Object} opts Optional parameters
     * @param {Number} [paginateLimit = 20)] Number of results per page
     * @param {String} [paginatePage] The queried page index
     * @param {Boolean} [paginateEnabled = true)] Enable pagination
     * @param {String} [sortBy = 'createdAt')] Sort data by this key
     * @param {module:model/String} [sortOrder = 'desc')] asc to sort ascending (default is desc - descending)
     * @param {Date} [createdAtGte] Date as ISO String
     * @param {Date} [createdAtLte] Date as ISO String
     * @param {Date} [updatedAtGte] Date as ISO String
     * @param {Date} [updatedAtLte] Date as ISO String
     * @param {Boolean} [includeLocations] Populate locations
     * @param {module:api/OrganizationsApi~getOrganizationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrganizations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'paginate_limit': opts['paginateLimit'],
        'paginate_page': opts['paginatePage'],
        'paginate_enabled': opts['paginateEnabled'],
        'sort_by': opts['sortBy'],
        'sort_order': opts['sortOrder'],
        'createdAt[$gte]': opts['createdAtGte'],
        'createdAt[$lte]': opts['createdAtLte'],
        'updatedAt[$gte]': opts['updatedAtGte'],
        'updatedAt[$lte]': opts['updatedAtLte'],
        'include_locations': opts['includeLocations']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/organizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchOrganization operation.
     * @callback module:api/OrganizationsApi~patchOrganizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an organization's data
     * @param {String} id ID of organization that needs to be updated
     * @param {module:model/PatchOrganizationRequest} patchOrganizationRequest Include organization properties to create here
     * @param {module:api/OrganizationsApi~patchOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    patchOrganization(id, patchOrganizationRequest, callback) {
      let postBody = patchOrganizationRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchOrganization");
      }
      // verify the required parameter 'patchOrganizationRequest' is set
      if (patchOrganizationRequest === undefined || patchOrganizationRequest === null) {
        throw new Error("Missing the required parameter 'patchOrganizationRequest' when calling patchOrganization");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/organizations/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
