/**
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PatchChargeStation200Response from '../model/PatchChargeStation200Response';
import PostChargeStations201Response from '../model/PostChargeStations201Response';
import Schema1 from '../model/Schema1';

/**
* ChargeStations service.
* @module api/ChargeStationsApi
* @version v1
*/
export default class ChargeStationsApi {

    /**
    * Constructs a new ChargeStationsApi. 
    * @alias module:api/ChargeStationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteChargeStation operation.
     * @callback module:api/ChargeStationsApi~deleteChargeStationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use to delete a charge station
     * @param {String} id The charge station id that needs to be deleted
     * @param {module:api/ChargeStationsApi~deleteChargeStationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteChargeStation(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteChargeStation");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/chargestations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChargeStation operation.
     * @callback module:api/ChargeStationsApi~getChargeStationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single charge station's data
     * @param {String} id The charge station id that needs to be fetched
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeLocation] Populate location
     * @param {Boolean} [includeEvses] Populate evses
     * @param {Boolean} [includeOrganization] Populate organization
     * @param {module:api/ChargeStationsApi~getChargeStationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getChargeStation(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChargeStation");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include_location': opts['includeLocation'],
        'include_evses': opts['includeEvses'],
        'include_organization': opts['includeOrganization']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/chargestations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChargeStationConnectors operation.
     * @callback module:api/ChargeStationsApi~getChargeStationConnectorsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List connectors for a chargestation
     * @param {String} id chargeStation id
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeEvse] Populate evse
     * @param {Boolean} [includeOrganization] Populate organization
     * @param {module:api/ChargeStationsApi~getChargeStationConnectorsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getChargeStationConnectors(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChargeStationConnectors");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include_evse': opts['includeEvse'],
        'include_organization': opts['includeOrganization']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/chargestations/{id}/connectors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChargeStations operation.
     * @callback module:api/ChargeStationsApi~getChargeStationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Chargestations
     * @param {Object} opts Optional parameters
     * @param {String} [organization] Filter by Org. Id
     * @param {String} [location] Filter by Location Id
     * @param {Boolean} [online] Filter by Online Status
     * @param {Boolean} [active] Chargestations that have been activated/deactivated by the admin
     * @param {Boolean} [_public] Chargestations that are public
     * @param {Number} [paginateLimit = 20)] Number of results per page
     * @param {String} [paginatePage] The queried page index
     * @param {Boolean} [paginateEnabled = true)] Enable pagination
     * @param {String} [sortBy = 'createdAt')] Sort data by this key
     * @param {module:model/String} [sortOrder = 'desc')] asc to sort ascending (default is desc - descending)
     * @param {Date} [createdAtGte] Date as ISO String
     * @param {Date} [createdAtLte] Date as ISO String
     * @param {Date} [updatedAtGte] Date as ISO String
     * @param {Date} [updatedAtLte] Date as ISO String
     * @param {Boolean} [includeLocation] Populate location
     * @param {Boolean} [includeEvses] Populate evses
     * @param {Boolean} [includeOrganization] Populate organization
     * @param {module:api/ChargeStationsApi~getChargeStationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getChargeStations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'organization': opts['organization'],
        'location': opts['location'],
        'online': opts['online'],
        'active': opts['active'],
        'public': opts['_public'],
        'paginate_limit': opts['paginateLimit'],
        'paginate_page': opts['paginatePage'],
        'paginate_enabled': opts['paginateEnabled'],
        'sort_by': opts['sortBy'],
        'sort_order': opts['sortOrder'],
        'createdAt[$gte]': opts['createdAtGte'],
        'createdAt[$lte]': opts['createdAtLte'],
        'updatedAt[$gte]': opts['updatedAtGte'],
        'updatedAt[$lte]': opts['updatedAtLte'],
        'include_location': opts['includeLocation'],
        'include_evses': opts['includeEvses'],
        'include_organization': opts['includeOrganization']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/chargestations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchChargeStation operation.
     * @callback module:api/ChargeStationsApi~patchChargeStationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PatchChargeStation200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a charge station's data
     * @param {String} id ID of charge station that needs to be updated
     * @param {module:model/Schema1} schema1 Include charge station properties to update here
     * @param {module:api/ChargeStationsApi~patchChargeStationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PatchChargeStation200Response}
     */
    patchChargeStation(id, schema1, callback) {
      let postBody = schema1;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchChargeStation");
      }
      // verify the required parameter 'schema1' is set
      if (schema1 === undefined || schema1 === null) {
        throw new Error("Missing the required parameter 'schema1' when calling patchChargeStation");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PatchChargeStation200Response;
      return this.apiClient.callApi(
        '/v1/chargestations/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postChargeStations operation.
     * @callback module:api/ChargeStationsApi~postChargeStationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostChargeStations201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new charge station
     * @param {module:model/Schema1} schema1 Include charge station properties to create here
     * @param {module:api/ChargeStationsApi~postChargeStationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostChargeStations201Response}
     */
    postChargeStations(schema1, callback) {
      let postBody = schema1;
      // verify the required parameter 'schema1' is set
      if (schema1 === undefined || schema1 === null) {
        throw new Error("Missing the required parameter 'schema1' when calling postChargeStations");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostChargeStations201Response;
      return this.apiClient.callApi(
        '/v1/chargestations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
