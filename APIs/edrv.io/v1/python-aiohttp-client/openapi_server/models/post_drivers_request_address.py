# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostDriversRequestAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country: str=None, postal_code: str=None, street_and_number: str=None):
        """PostDriversRequestAddress - a model defined in OpenAPI

        :param city: The city of this PostDriversRequestAddress.
        :param country: The country of this PostDriversRequestAddress.
        :param postal_code: The postal_code of this PostDriversRequestAddress.
        :param street_and_number: The street_and_number of this PostDriversRequestAddress.
        """
        self.openapi_types = {
            'city': str,
            'country': str,
            'postal_code': str,
            'street_and_number': str
        }

        self.attribute_map = {
            'city': 'city',
            'country': 'country',
            'postal_code': 'postalCode',
            'street_and_number': 'streetAndNumber'
        }

        self._city = city
        self._country = country
        self._postal_code = postal_code
        self._street_and_number = street_and_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostDriversRequestAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The postDrivers_request_address of this PostDriversRequestAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this PostDriversRequestAddress.


        :return: The city of this PostDriversRequestAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this PostDriversRequestAddress.


        :param city: The city of this PostDriversRequestAddress.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this PostDriversRequestAddress.


        :return: The country of this PostDriversRequestAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PostDriversRequestAddress.


        :param country: The country of this PostDriversRequestAddress.
        :type country: str
        """

        self._country = country

    @property
    def postal_code(self):
        """Gets the postal_code of this PostDriversRequestAddress.


        :return: The postal_code of this PostDriversRequestAddress.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this PostDriversRequestAddress.


        :param postal_code: The postal_code of this PostDriversRequestAddress.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def street_and_number(self):
        """Gets the street_and_number of this PostDriversRequestAddress.


        :return: The street_and_number of this PostDriversRequestAddress.
        :rtype: str
        """
        return self._street_and_number

    @street_and_number.setter
    def street_and_number(self, street_and_number):
        """Sets the street_and_number of this PostDriversRequestAddress.


        :param street_and_number: The street_and_number of this PostDriversRequestAddress.
        :type street_and_number: str
        """

        self._street_and_number = street_and_number
