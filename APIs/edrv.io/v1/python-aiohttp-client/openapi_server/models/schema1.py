# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Schema1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location: str=None, manufacturer: str=None, model: str=None, protocol: str=None, public: bool=None):
        """Schema1 - a model defined in OpenAPI

        :param location: The location of this Schema1.
        :param manufacturer: The manufacturer of this Schema1.
        :param model: The model of this Schema1.
        :param protocol: The protocol of this Schema1.
        :param public: The public of this Schema1.
        """
        self.openapi_types = {
            'location': str,
            'manufacturer': str,
            'model': str,
            'protocol': str,
            'public': bool
        }

        self.attribute_map = {
            'location': 'location',
            'manufacturer': 'manufacturer',
            'model': 'model',
            'protocol': 'protocol',
            'public': 'public'
        }

        self._location = location
        self._manufacturer = manufacturer
        self._model = model
        self._protocol = protocol
        self._public = public

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Schema1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The schema1 of this Schema1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location(self):
        """Gets the location of this Schema1.


        :return: The location of this Schema1.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Schema1.


        :param location: The location of this Schema1.
        :type location: str
        """

        self._location = location

    @property
    def manufacturer(self):
        """Gets the manufacturer of this Schema1.


        :return: The manufacturer of this Schema1.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this Schema1.


        :param manufacturer: The manufacturer of this Schema1.
        :type manufacturer: str
        """

        self._manufacturer = manufacturer

    @property
    def model(self):
        """Gets the model of this Schema1.


        :return: The model of this Schema1.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Schema1.


        :param model: The model of this Schema1.
        :type model: str
        """

        self._model = model

    @property
    def protocol(self):
        """Gets the protocol of this Schema1.


        :return: The protocol of this Schema1.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this Schema1.


        :param protocol: The protocol of this Schema1.
        :type protocol: str
        """

        self._protocol = protocol

    @property
    def public(self):
        """Gets the public of this Schema1.


        :return: The public of this Schema1.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this Schema1.


        :param public: The public of this Schema1.
        :type public: bool
        """

        self._public = public
