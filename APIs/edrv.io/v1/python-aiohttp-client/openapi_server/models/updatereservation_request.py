# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdatereservationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector: int=None, driver: str=None, end_date: str=None, evse: int=None):
        """UpdatereservationRequest - a model defined in OpenAPI

        :param connector: The connector of this UpdatereservationRequest.
        :param driver: The driver of this UpdatereservationRequest.
        :param end_date: The end_date of this UpdatereservationRequest.
        :param evse: The evse of this UpdatereservationRequest.
        """
        self.openapi_types = {
            'connector': int,
            'driver': str,
            'end_date': str,
            'evse': int
        }

        self.attribute_map = {
            'connector': 'connector',
            'driver': 'driver',
            'end_date': 'endDate',
            'evse': 'evse'
        }

        self._connector = connector
        self._driver = driver
        self._end_date = end_date
        self._evse = evse

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdatereservationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updatereservation_request of this UpdatereservationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector(self):
        """Gets the connector of this UpdatereservationRequest.


        :return: The connector of this UpdatereservationRequest.
        :rtype: int
        """
        return self._connector

    @connector.setter
    def connector(self, connector):
        """Sets the connector of this UpdatereservationRequest.


        :param connector: The connector of this UpdatereservationRequest.
        :type connector: int
        """
        if connector is not None and connector < 1:
            raise ValueError("Invalid value for `connector`, must be a value greater than or equal to `1`")

        self._connector = connector

    @property
    def driver(self):
        """Gets the driver of this UpdatereservationRequest.


        :return: The driver of this UpdatereservationRequest.
        :rtype: str
        """
        return self._driver

    @driver.setter
    def driver(self, driver):
        """Sets the driver of this UpdatereservationRequest.


        :param driver: The driver of this UpdatereservationRequest.
        :type driver: str
        """

        self._driver = driver

    @property
    def end_date(self):
        """Gets the end_date of this UpdatereservationRequest.


        :return: The end_date of this UpdatereservationRequest.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this UpdatereservationRequest.


        :param end_date: The end_date of this UpdatereservationRequest.
        :type end_date: str
        """

        self._end_date = end_date

    @property
    def evse(self):
        """Gets the evse of this UpdatereservationRequest.


        :return: The evse of this UpdatereservationRequest.
        :rtype: int
        """
        return self._evse

    @evse.setter
    def evse(self, evse):
        """Sets the evse of this UpdatereservationRequest.


        :param evse: The evse of this UpdatereservationRequest.
        :type evse: int
        """
        if evse is not None and evse < 1:
            raise ValueError("Invalid value for `evse`, must be a value greater than or equal to `1`")

        self._evse = evse
