# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PatchTokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=True, channel: str=None, driver: str=None, physical_id: str=None, type: str=None):
        """PatchTokenRequest - a model defined in OpenAPI

        :param active: The active of this PatchTokenRequest.
        :param channel: The channel of this PatchTokenRequest.
        :param driver: The driver of this PatchTokenRequest.
        :param physical_id: The physical_id of this PatchTokenRequest.
        :param type: The type of this PatchTokenRequest.
        """
        self.openapi_types = {
            'active': bool,
            'channel': str,
            'driver': str,
            'physical_id': str,
            'type': str
        }

        self.attribute_map = {
            'active': 'active',
            'channel': 'channel',
            'driver': 'driver',
            'physical_id': 'physicalId',
            'type': 'type'
        }

        self._active = active
        self._channel = channel
        self._driver = driver
        self._physical_id = physical_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchTokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The patchToken_request of this PatchTokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this PatchTokenRequest.


        :return: The active of this PatchTokenRequest.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this PatchTokenRequest.


        :param active: The active of this PatchTokenRequest.
        :type active: bool
        """

        self._active = active

    @property
    def channel(self):
        """Gets the channel of this PatchTokenRequest.


        :return: The channel of this PatchTokenRequest.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this PatchTokenRequest.


        :param channel: The channel of this PatchTokenRequest.
        :type channel: str
        """
        allowed_values = ["physical", "slack", "telegram", "sms"]  # noqa: E501
        if channel not in allowed_values:
            raise ValueError(
                "Invalid value for `channel` ({0}), must be one of {1}"
                .format(channel, allowed_values)
            )

        self._channel = channel

    @property
    def driver(self):
        """Gets the driver of this PatchTokenRequest.


        :return: The driver of this PatchTokenRequest.
        :rtype: str
        """
        return self._driver

    @driver.setter
    def driver(self, driver):
        """Sets the driver of this PatchTokenRequest.


        :param driver: The driver of this PatchTokenRequest.
        :type driver: str
        """

        self._driver = driver

    @property
    def physical_id(self):
        """Gets the physical_id of this PatchTokenRequest.


        :return: The physical_id of this PatchTokenRequest.
        :rtype: str
        """
        return self._physical_id

    @physical_id.setter
    def physical_id(self, physical_id):
        """Sets the physical_id of this PatchTokenRequest.


        :param physical_id: The physical_id of this PatchTokenRequest.
        :type physical_id: str
        """

        self._physical_id = physical_id

    @property
    def type(self):
        """Gets the type of this PatchTokenRequest.


        :return: The type of this PatchTokenRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PatchTokenRequest.


        :param type: The type of this PatchTokenRequest.
        :type type: str
        """

        self._type = type
