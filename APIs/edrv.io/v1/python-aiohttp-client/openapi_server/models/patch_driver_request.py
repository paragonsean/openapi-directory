# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.post_drivers_request_address import PostDriversRequestAddress
from openapi_server.models.post_drivers_request_phone import PostDriversRequestPhone
from openapi_server import util


class PatchDriverRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, address: PostDriversRequestAddress=None, email: str=None, firstname: str=None, lastname: str=None, phone: PostDriversRequestPhone=None, source: str=None, tokens: List[object]=None):
        """PatchDriverRequest - a model defined in OpenAPI

        :param active: The active of this PatchDriverRequest.
        :param address: The address of this PatchDriverRequest.
        :param email: The email of this PatchDriverRequest.
        :param firstname: The firstname of this PatchDriverRequest.
        :param lastname: The lastname of this PatchDriverRequest.
        :param phone: The phone of this PatchDriverRequest.
        :param source: The source of this PatchDriverRequest.
        :param tokens: The tokens of this PatchDriverRequest.
        """
        self.openapi_types = {
            'active': bool,
            'address': PostDriversRequestAddress,
            'email': str,
            'firstname': str,
            'lastname': str,
            'phone': PostDriversRequestPhone,
            'source': str,
            'tokens': List[object]
        }

        self.attribute_map = {
            'active': 'active',
            'address': 'address',
            'email': 'email',
            'firstname': 'firstname',
            'lastname': 'lastname',
            'phone': 'phone',
            'source': 'source',
            'tokens': 'tokens'
        }

        self._active = active
        self._address = address
        self._email = email
        self._firstname = firstname
        self._lastname = lastname
        self._phone = phone
        self._source = source
        self._tokens = tokens

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchDriverRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The patchDriver_request of this PatchDriverRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this PatchDriverRequest.


        :return: The active of this PatchDriverRequest.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this PatchDriverRequest.


        :param active: The active of this PatchDriverRequest.
        :type active: bool
        """

        self._active = active

    @property
    def address(self):
        """Gets the address of this PatchDriverRequest.


        :return: The address of this PatchDriverRequest.
        :rtype: PostDriversRequestAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PatchDriverRequest.


        :param address: The address of this PatchDriverRequest.
        :type address: PostDriversRequestAddress
        """

        self._address = address

    @property
    def email(self):
        """Gets the email of this PatchDriverRequest.


        :return: The email of this PatchDriverRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PatchDriverRequest.


        :param email: The email of this PatchDriverRequest.
        :type email: str
        """

        self._email = email

    @property
    def firstname(self):
        """Gets the firstname of this PatchDriverRequest.


        :return: The firstname of this PatchDriverRequest.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this PatchDriverRequest.


        :param firstname: The firstname of this PatchDriverRequest.
        :type firstname: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this PatchDriverRequest.


        :return: The lastname of this PatchDriverRequest.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this PatchDriverRequest.


        :param lastname: The lastname of this PatchDriverRequest.
        :type lastname: str
        """

        self._lastname = lastname

    @property
    def phone(self):
        """Gets the phone of this PatchDriverRequest.


        :return: The phone of this PatchDriverRequest.
        :rtype: PostDriversRequestPhone
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this PatchDriverRequest.


        :param phone: The phone of this PatchDriverRequest.
        :type phone: PostDriversRequestPhone
        """

        self._phone = phone

    @property
    def source(self):
        """Gets the source of this PatchDriverRequest.


        :return: The source of this PatchDriverRequest.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this PatchDriverRequest.


        :param source: The source of this PatchDriverRequest.
        :type source: str
        """

        self._source = source

    @property
    def tokens(self):
        """Gets the tokens of this PatchDriverRequest.


        :return: The tokens of this PatchDriverRequest.
        :rtype: List[object]
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens):
        """Sets the tokens of this PatchDriverRequest.


        :param tokens: The tokens of this PatchDriverRequest.
        :type tokens: List[object]
        """

        self._tokens = tokens
