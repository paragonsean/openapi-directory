/*
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PatchChargeStation200Response;
import org.openapitools.client.model.PostChargeStations201Response;
import org.openapitools.client.model.Schema1;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ChargeStationsApi
 */
@Disabled
public class ChargeStationsApiTest {

    private final ChargeStationsApi api = new ChargeStationsApi();

    /**
     * Use to delete a charge station
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChargeStationTest() throws ApiException {
        String id = null;
        api.deleteChargeStation(id);
        // TODO: test validations
    }

    /**
     * Get a single charge station&#39;s data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChargeStationTest() throws ApiException {
        String id = null;
        Boolean includeLocation = null;
        Boolean includeEvses = null;
        Boolean includeOrganization = null;
        api.getChargeStation(id, includeLocation, includeEvses, includeOrganization);
        // TODO: test validations
    }

    /**
     * List connectors for a chargestation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChargeStationConnectorsTest() throws ApiException {
        String id = null;
        Boolean includeEvse = null;
        Boolean includeOrganization = null;
        api.getChargeStationConnectors(id, includeEvse, includeOrganization);
        // TODO: test validations
    }

    /**
     * List all Chargestations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChargeStationsTest() throws ApiException {
        String organization = null;
        String location = null;
        Boolean online = null;
        Boolean active = null;
        Boolean _public = null;
        Integer paginateLimit = null;
        String paginatePage = null;
        Boolean paginateEnabled = null;
        String sortBy = null;
        String sortOrder = null;
        OffsetDateTime createdAt$gte = null;
        OffsetDateTime createdAt$lte = null;
        OffsetDateTime updatedAt$gte = null;
        OffsetDateTime updatedAt$lte = null;
        Boolean includeLocation = null;
        Boolean includeEvses = null;
        Boolean includeOrganization = null;
        api.getChargeStations(organization, location, online, active, _public, paginateLimit, paginatePage, paginateEnabled, sortBy, sortOrder, createdAt$gte, createdAt$lte, updatedAt$gte, updatedAt$lte, includeLocation, includeEvses, includeOrganization);
        // TODO: test validations
    }

    /**
     * Update a charge station&#39;s data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchChargeStationTest() throws ApiException {
        String id = null;
        Schema1 schema1 = null;
        PatchChargeStation200Response response = api.patchChargeStation(id, schema1);
        // TODO: test validations
    }

    /**
     * Create a new charge station
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postChargeStationsTest() throws ApiException {
        Schema1 schema1 = null;
        PostChargeStations201Response response = api.postChargeStations(schema1);
        // TODO: test validations
    }

}
