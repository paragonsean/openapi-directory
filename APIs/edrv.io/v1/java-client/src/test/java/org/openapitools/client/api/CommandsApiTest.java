/*
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CancelreservationRequest;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PatchChargeStation200Response;
import org.openapitools.client.model.PatchChargeStationVariableRequest;
import org.openapitools.client.model.RemotestartRequest;
import org.openapitools.client.model.RemotestopRequest;
import org.openapitools.client.model.ReserveRequest;
import org.openapitools.client.model.ResetRequest;
import org.openapitools.client.model.Setchargingschedule201Response;
import org.openapitools.client.model.UnlockconnectorRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CommandsApi
 */
@Disabled
public class CommandsApiTest {

    private final CommandsApi api = new CommandsApi();

    /**
     * Use to request a delete an existing reservation. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelreservationTest() throws ApiException {
        CancelreservationRequest cancelreservationRequest = null;
        PatchChargeStation200Response response = api.cancelreservation(cancelreservationRequest);
        // TODO: test validations
    }

    /**
     * Get Commands data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCommandsTest() throws ApiException {
        Integer paginateLimit = null;
        String paginatePage = null;
        Boolean paginateEnabled = null;
        String sortBy = null;
        String sortOrder = null;
        OffsetDateTime createdAt$gte = null;
        OffsetDateTime createdAt$lte = null;
        OffsetDateTime updatedAt$gte = null;
        OffsetDateTime updatedAt$lte = null;
        Boolean includeChargestation = null;
        Boolean includeDriver = null;
        Boolean includeTransaction = null;
        Boolean includeOrganization = null;
        api.getCommands(paginateLimit, paginatePage, paginateEnabled, sortBy, sortOrder, createdAt$gte, createdAt$lte, updatedAt$gte, updatedAt$lte, includeChargestation, includeDriver, includeTransaction, includeOrganization);
        // TODO: test validations
    }

    /**
     * Get a charge station&#39;s config variables
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVariablesTest() throws ApiException {
        String id = null;
        api.getVariables(id);
        // TODO: test validations
    }

    /**
     * Update config variables for a chargestation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchChargeStationVariableTest() throws ApiException {
        String id = null;
        PatchChargeStationVariableRequest patchChargeStationVariableRequest = null;
        PatchChargeStation200Response response = api.patchChargeStationVariable(id, patchChargeStationVariableRequest);
        // TODO: test validations
    }

    /**
     * Use to request a remote start command. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void remotestartTest() throws ApiException {
        RemotestartRequest remotestartRequest = null;
        Setchargingschedule201Response response = api.remotestart(remotestartRequest);
        // TODO: test validations
    }

    /**
     * Use to request a remote stop command. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void remotestopTest() throws ApiException {
        RemotestopRequest remotestopRequest = null;
        api.remotestop(remotestopRequest);
        // TODO: test validations
    }

    /**
     * Use to request a reserve command. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reserveTest() throws ApiException {
        ReserveRequest reserveRequest = null;
        Setchargingschedule201Response response = api.reserve(reserveRequest);
        // TODO: test validations
    }

    /**
     * Use to request a reset command. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetTest() throws ApiException {
        ResetRequest resetRequest = null;
        PatchChargeStation200Response response = api.reset(resetRequest);
        // TODO: test validations
    }

    /**
     * Use to request an unlock command for a connector. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unlockconnectorTest() throws ApiException {
        UnlockconnectorRequest unlockconnectorRequest = null;
        Setchargingschedule201Response response = api.unlockconnector(unlockconnectorRequest);
        // TODO: test validations
    }

}
