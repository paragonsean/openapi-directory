/*
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import org.openapitools.client.model.PatchChargeStation200Response;
import org.openapitools.client.model.PostChargeStations201Response;
import org.openapitools.client.model.Schema1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChargeStationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChargeStationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChargeStationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteChargeStation
     * @param id The charge station id that needs to be deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the deleted chargestion object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChargeStationCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/chargestations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChargeStationValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteChargeStation(Async)");
        }

        return deleteChargeStationCall(id, _callback);

    }

    /**
     * 
     * Use to delete a charge station
     * @param id The charge station id that needs to be deleted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the deleted chargestion object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request Error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteChargeStation(String id) throws ApiException {
        deleteChargeStationWithHttpInfo(id);
    }

    /**
     * 
     * Use to delete a charge station
     * @param id The charge station id that needs to be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the deleted chargestion object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteChargeStationWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteChargeStationValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Use to delete a charge station
     * @param id The charge station id that needs to be deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the deleted chargestion object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChargeStationAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChargeStationValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChargeStation
     * @param id The charge station id that needs to be fetched (required)
     * @param includeLocation Populate location (optional)
     * @param includeEvses Populate evses (optional)
     * @param includeOrganization Populate organization (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a chargestion object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChargeStationCall(String id, Boolean includeLocation, Boolean includeEvses, Boolean includeOrganization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/chargestations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeLocation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_location", includeLocation));
        }

        if (includeEvses != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_evses", includeEvses));
        }

        if (includeOrganization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_organization", includeOrganization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChargeStationValidateBeforeCall(String id, Boolean includeLocation, Boolean includeEvses, Boolean includeOrganization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getChargeStation(Async)");
        }

        return getChargeStationCall(id, includeLocation, includeEvses, includeOrganization, _callback);

    }

    /**
     * 
     * Get a single charge station&#39;s data
     * @param id The charge station id that needs to be fetched (required)
     * @param includeLocation Populate location (optional)
     * @param includeEvses Populate evses (optional)
     * @param includeOrganization Populate organization (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a chargestion object </td><td>  -  </td></tr>
     </table>
     */
    public void getChargeStation(String id, Boolean includeLocation, Boolean includeEvses, Boolean includeOrganization) throws ApiException {
        getChargeStationWithHttpInfo(id, includeLocation, includeEvses, includeOrganization);
    }

    /**
     * 
     * Get a single charge station&#39;s data
     * @param id The charge station id that needs to be fetched (required)
     * @param includeLocation Populate location (optional)
     * @param includeEvses Populate evses (optional)
     * @param includeOrganization Populate organization (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a chargestion object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getChargeStationWithHttpInfo(String id, Boolean includeLocation, Boolean includeEvses, Boolean includeOrganization) throws ApiException {
        okhttp3.Call localVarCall = getChargeStationValidateBeforeCall(id, includeLocation, includeEvses, includeOrganization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get a single charge station&#39;s data
     * @param id The charge station id that needs to be fetched (required)
     * @param includeLocation Populate location (optional)
     * @param includeEvses Populate evses (optional)
     * @param includeOrganization Populate organization (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a chargestion object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChargeStationAsync(String id, Boolean includeLocation, Boolean includeEvses, Boolean includeOrganization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChargeStationValidateBeforeCall(id, includeLocation, includeEvses, includeOrganization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChargeStationConnectors
     * @param id chargeStation id (required)
     * @param includeEvse Populate evse (optional)
     * @param includeOrganization Populate organization (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an array of connector objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChargeStationConnectorsCall(String id, Boolean includeEvse, Boolean includeOrganization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/chargestations/{id}/connectors"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeEvse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_evse", includeEvse));
        }

        if (includeOrganization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_organization", includeOrganization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChargeStationConnectorsValidateBeforeCall(String id, Boolean includeEvse, Boolean includeOrganization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getChargeStationConnectors(Async)");
        }

        return getChargeStationConnectorsCall(id, includeEvse, includeOrganization, _callback);

    }

    /**
     * 
     * List connectors for a chargestation
     * @param id chargeStation id (required)
     * @param includeEvse Populate evse (optional)
     * @param includeOrganization Populate organization (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an array of connector objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public void getChargeStationConnectors(String id, Boolean includeEvse, Boolean includeOrganization) throws ApiException {
        getChargeStationConnectorsWithHttpInfo(id, includeEvse, includeOrganization);
    }

    /**
     * 
     * List connectors for a chargestation
     * @param id chargeStation id (required)
     * @param includeEvse Populate evse (optional)
     * @param includeOrganization Populate organization (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an array of connector objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getChargeStationConnectorsWithHttpInfo(String id, Boolean includeEvse, Boolean includeOrganization) throws ApiException {
        okhttp3.Call localVarCall = getChargeStationConnectorsValidateBeforeCall(id, includeEvse, includeOrganization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * List connectors for a chargestation
     * @param id chargeStation id (required)
     * @param includeEvse Populate evse (optional)
     * @param includeOrganization Populate organization (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an array of connector objects </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChargeStationConnectorsAsync(String id, Boolean includeEvse, Boolean includeOrganization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChargeStationConnectorsValidateBeforeCall(id, includeEvse, includeOrganization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChargeStations
     * @param organization Filter by Org. Id (optional)
     * @param location Filter by Location Id (optional)
     * @param online Filter by Online Status (optional)
     * @param active Chargestations that have been activated/deactivated by the admin (optional)
     * @param _public Chargestations that are public (optional)
     * @param paginateLimit Number of results per page (optional, default to 20)
     * @param paginatePage The queried page index (optional)
     * @param paginateEnabled Enable pagination (optional, default to true)
     * @param sortBy Sort data by this key (optional, default to createdAt)
     * @param sortOrder asc to sort ascending (default is desc - descending) (optional, default to desc)
     * @param createdAt$gte Date as ISO String (optional)
     * @param createdAt$lte Date as ISO String (optional)
     * @param updatedAt$gte Date as ISO String (optional)
     * @param updatedAt$lte Date as ISO String (optional)
     * @param includeLocation Populate location (optional)
     * @param includeEvses Populate evses (optional)
     * @param includeOrganization Populate organization (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of chargestation objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChargeStationsCall(String organization, String location, Boolean online, Boolean active, Boolean _public, Integer paginateLimit, String paginatePage, Boolean paginateEnabled, String sortBy, String sortOrder, OffsetDateTime createdAt$gte, OffsetDateTime createdAt$lte, OffsetDateTime updatedAt$gte, OffsetDateTime updatedAt$lte, Boolean includeLocation, Boolean includeEvses, Boolean includeOrganization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/chargestations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (organization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization", organization));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (online != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("online", online));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (_public != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("public", _public));
        }

        if (paginateLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paginate_limit", paginateLimit));
        }

        if (paginatePage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paginate_page", paginatePage));
        }

        if (paginateEnabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paginate_enabled", paginateEnabled));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (createdAt$gte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[$gte]", createdAt$gte));
        }

        if (createdAt$lte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[$lte]", createdAt$lte));
        }

        if (updatedAt$gte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedAt[$gte]", updatedAt$gte));
        }

        if (updatedAt$lte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedAt[$lte]", updatedAt$lte));
        }

        if (includeLocation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_location", includeLocation));
        }

        if (includeEvses != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_evses", includeEvses));
        }

        if (includeOrganization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_organization", includeOrganization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChargeStationsValidateBeforeCall(String organization, String location, Boolean online, Boolean active, Boolean _public, Integer paginateLimit, String paginatePage, Boolean paginateEnabled, String sortBy, String sortOrder, OffsetDateTime createdAt$gte, OffsetDateTime createdAt$lte, OffsetDateTime updatedAt$gte, OffsetDateTime updatedAt$lte, Boolean includeLocation, Boolean includeEvses, Boolean includeOrganization, final ApiCallback _callback) throws ApiException {
        return getChargeStationsCall(organization, location, online, active, _public, paginateLimit, paginatePage, paginateEnabled, sortBy, sortOrder, createdAt$gte, createdAt$lte, updatedAt$gte, updatedAt$lte, includeLocation, includeEvses, includeOrganization, _callback);

    }

    /**
     * 
     * List all Chargestations
     * @param organization Filter by Org. Id (optional)
     * @param location Filter by Location Id (optional)
     * @param online Filter by Online Status (optional)
     * @param active Chargestations that have been activated/deactivated by the admin (optional)
     * @param _public Chargestations that are public (optional)
     * @param paginateLimit Number of results per page (optional, default to 20)
     * @param paginatePage The queried page index (optional)
     * @param paginateEnabled Enable pagination (optional, default to true)
     * @param sortBy Sort data by this key (optional, default to createdAt)
     * @param sortOrder asc to sort ascending (default is desc - descending) (optional, default to desc)
     * @param createdAt$gte Date as ISO String (optional)
     * @param createdAt$lte Date as ISO String (optional)
     * @param updatedAt$gte Date as ISO String (optional)
     * @param updatedAt$lte Date as ISO String (optional)
     * @param includeLocation Populate location (optional)
     * @param includeEvses Populate evses (optional)
     * @param includeOrganization Populate organization (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of chargestation objects </td><td>  -  </td></tr>
     </table>
     */
    public void getChargeStations(String organization, String location, Boolean online, Boolean active, Boolean _public, Integer paginateLimit, String paginatePage, Boolean paginateEnabled, String sortBy, String sortOrder, OffsetDateTime createdAt$gte, OffsetDateTime createdAt$lte, OffsetDateTime updatedAt$gte, OffsetDateTime updatedAt$lte, Boolean includeLocation, Boolean includeEvses, Boolean includeOrganization) throws ApiException {
        getChargeStationsWithHttpInfo(organization, location, online, active, _public, paginateLimit, paginatePage, paginateEnabled, sortBy, sortOrder, createdAt$gte, createdAt$lte, updatedAt$gte, updatedAt$lte, includeLocation, includeEvses, includeOrganization);
    }

    /**
     * 
     * List all Chargestations
     * @param organization Filter by Org. Id (optional)
     * @param location Filter by Location Id (optional)
     * @param online Filter by Online Status (optional)
     * @param active Chargestations that have been activated/deactivated by the admin (optional)
     * @param _public Chargestations that are public (optional)
     * @param paginateLimit Number of results per page (optional, default to 20)
     * @param paginatePage The queried page index (optional)
     * @param paginateEnabled Enable pagination (optional, default to true)
     * @param sortBy Sort data by this key (optional, default to createdAt)
     * @param sortOrder asc to sort ascending (default is desc - descending) (optional, default to desc)
     * @param createdAt$gte Date as ISO String (optional)
     * @param createdAt$lte Date as ISO String (optional)
     * @param updatedAt$gte Date as ISO String (optional)
     * @param updatedAt$lte Date as ISO String (optional)
     * @param includeLocation Populate location (optional)
     * @param includeEvses Populate evses (optional)
     * @param includeOrganization Populate organization (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of chargestation objects </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getChargeStationsWithHttpInfo(String organization, String location, Boolean online, Boolean active, Boolean _public, Integer paginateLimit, String paginatePage, Boolean paginateEnabled, String sortBy, String sortOrder, OffsetDateTime createdAt$gte, OffsetDateTime createdAt$lte, OffsetDateTime updatedAt$gte, OffsetDateTime updatedAt$lte, Boolean includeLocation, Boolean includeEvses, Boolean includeOrganization) throws ApiException {
        okhttp3.Call localVarCall = getChargeStationsValidateBeforeCall(organization, location, online, active, _public, paginateLimit, paginatePage, paginateEnabled, sortBy, sortOrder, createdAt$gte, createdAt$lte, updatedAt$gte, updatedAt$lte, includeLocation, includeEvses, includeOrganization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * List all Chargestations
     * @param organization Filter by Org. Id (optional)
     * @param location Filter by Location Id (optional)
     * @param online Filter by Online Status (optional)
     * @param active Chargestations that have been activated/deactivated by the admin (optional)
     * @param _public Chargestations that are public (optional)
     * @param paginateLimit Number of results per page (optional, default to 20)
     * @param paginatePage The queried page index (optional)
     * @param paginateEnabled Enable pagination (optional, default to true)
     * @param sortBy Sort data by this key (optional, default to createdAt)
     * @param sortOrder asc to sort ascending (default is desc - descending) (optional, default to desc)
     * @param createdAt$gte Date as ISO String (optional)
     * @param createdAt$lte Date as ISO String (optional)
     * @param updatedAt$gte Date as ISO String (optional)
     * @param updatedAt$lte Date as ISO String (optional)
     * @param includeLocation Populate location (optional)
     * @param includeEvses Populate evses (optional)
     * @param includeOrganization Populate organization (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of chargestation objects </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChargeStationsAsync(String organization, String location, Boolean online, Boolean active, Boolean _public, Integer paginateLimit, String paginatePage, Boolean paginateEnabled, String sortBy, String sortOrder, OffsetDateTime createdAt$gte, OffsetDateTime createdAt$lte, OffsetDateTime updatedAt$gte, OffsetDateTime updatedAt$lte, Boolean includeLocation, Boolean includeEvses, Boolean includeOrganization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChargeStationsValidateBeforeCall(organization, location, online, active, _public, paginateLimit, paginatePage, paginateEnabled, sortBy, sortOrder, createdAt$gte, createdAt$lte, updatedAt$gte, updatedAt$lte, includeLocation, includeEvses, includeOrganization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchChargeStation
     * @param id ID of charge station that needs to be updated (required)
     * @param schema1 Include charge station properties to update here (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated chargestion object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchChargeStationCall(String id, Schema1 schema1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = schema1;

        // create path and map variables
        String localVarPath = "/v1/chargestations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchChargeStationValidateBeforeCall(String id, Schema1 schema1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling patchChargeStation(Async)");
        }

        // verify the required parameter 'schema1' is set
        if (schema1 == null) {
            throw new ApiException("Missing the required parameter 'schema1' when calling patchChargeStation(Async)");
        }

        return patchChargeStationCall(id, schema1, _callback);

    }

    /**
     * 
     * Update a charge station&#39;s data
     * @param id ID of charge station that needs to be updated (required)
     * @param schema1 Include charge station properties to update here (required)
     * @return PatchChargeStation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated chargestion object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public PatchChargeStation200Response patchChargeStation(String id, Schema1 schema1) throws ApiException {
        ApiResponse<PatchChargeStation200Response> localVarResp = patchChargeStationWithHttpInfo(id, schema1);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a charge station&#39;s data
     * @param id ID of charge station that needs to be updated (required)
     * @param schema1 Include charge station properties to update here (required)
     * @return ApiResponse&lt;PatchChargeStation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated chargestion object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PatchChargeStation200Response> patchChargeStationWithHttpInfo(String id, Schema1 schema1) throws ApiException {
        okhttp3.Call localVarCall = patchChargeStationValidateBeforeCall(id, schema1, null);
        Type localVarReturnType = new TypeToken<PatchChargeStation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a charge station&#39;s data
     * @param id ID of charge station that needs to be updated (required)
     * @param schema1 Include charge station properties to update here (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated chargestion object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchChargeStationAsync(String id, Schema1 schema1, final ApiCallback<PatchChargeStation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchChargeStationValidateBeforeCall(id, schema1, _callback);
        Type localVarReturnType = new TypeToken<PatchChargeStation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postChargeStations
     * @param schema1 Include charge station properties to create here (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the newly created chargestion object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postChargeStationsCall(Schema1 schema1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = schema1;

        // create path and map variables
        String localVarPath = "/v1/chargestations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postChargeStationsValidateBeforeCall(Schema1 schema1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schema1' is set
        if (schema1 == null) {
            throw new ApiException("Missing the required parameter 'schema1' when calling postChargeStations(Async)");
        }

        return postChargeStationsCall(schema1, _callback);

    }

    /**
     * 
     * Create a new charge station
     * @param schema1 Include charge station properties to create here (required)
     * @return PostChargeStations201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the newly created chargestion object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public PostChargeStations201Response postChargeStations(Schema1 schema1) throws ApiException {
        ApiResponse<PostChargeStations201Response> localVarResp = postChargeStationsWithHttpInfo(schema1);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new charge station
     * @param schema1 Include charge station properties to create here (required)
     * @return ApiResponse&lt;PostChargeStations201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the newly created chargestion object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostChargeStations201Response> postChargeStationsWithHttpInfo(Schema1 schema1) throws ApiException {
        okhttp3.Call localVarCall = postChargeStationsValidateBeforeCall(schema1, null);
        Type localVarReturnType = new TypeToken<PostChargeStations201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new charge station
     * @param schema1 Include charge station properties to create here (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the newly created chargestion object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postChargeStationsAsync(Schema1 schema1, final ApiCallback<PostChargeStations201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = postChargeStationsValidateBeforeCall(schema1, _callback);
        Type localVarReturnType = new TypeToken<PostChargeStations201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
