/*
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PatchOrganizationRequestChannels;
import org.openapitools.client.model.PatchOrganizationRequestConfigurations;
import org.openapitools.client.model.PatchOrganizationRequestLinks;
import org.openapitools.client.model.PatchOrganizationRequestSupport;
import org.openapitools.client.model.PatchOrganizationRequestSupportChat;
import org.openapitools.client.model.PatchOrganizationRequestTheme;
import org.openapitools.client.model.PostDriversRequestAddress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PatchOrganizationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:14.123389-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PatchOrganizationRequest {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private PostDriversRequestAddress address;

  public static final String SERIALIZED_NAME_CHANNELS = "channels";
  @SerializedName(SERIALIZED_NAME_CHANNELS)
  private PatchOrganizationRequestChannels channels;

  public static final String SERIALIZED_NAME_CONFIGURATIONS = "configurations";
  @SerializedName(SERIALIZED_NAME_CONFIGURATIONS)
  private PatchOrganizationRequestConfigurations configurations;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private PatchOrganizationRequestLinks links;

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<Object> locations = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private String logo;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OTP = "otp";
  @SerializedName(SERIALIZED_NAME_OTP)
  private String otp;

  public static final String SERIALIZED_NAME_STRIPE_CONNECTED_ACCOUNT_ID = "stripe_connected_account_id";
  @SerializedName(SERIALIZED_NAME_STRIPE_CONNECTED_ACCOUNT_ID)
  private String stripeConnectedAccountId;

  public static final String SERIALIZED_NAME_STRIPE_COUNTRY = "stripe_country";
  @SerializedName(SERIALIZED_NAME_STRIPE_COUNTRY)
  private String stripeCountry;

  public static final String SERIALIZED_NAME_STRIPE_CURRENCY = "stripe_currency";
  @SerializedName(SERIALIZED_NAME_STRIPE_CURRENCY)
  private String stripeCurrency;

  public static final String SERIALIZED_NAME_STRIPE_RESERVE_AMOUNT = "stripe_reserve_amount";
  @SerializedName(SERIALIZED_NAME_STRIPE_RESERVE_AMOUNT)
  private Integer stripeReserveAmount;

  public static final String SERIALIZED_NAME_SUPPORT = "support";
  @SerializedName(SERIALIZED_NAME_SUPPORT)
  private PatchOrganizationRequestSupport support;

  public static final String SERIALIZED_NAME_SUPPORT_CHAT = "supportChat";
  @SerializedName(SERIALIZED_NAME_SUPPORT_CHAT)
  private PatchOrganizationRequestSupportChat supportChat;

  public static final String SERIALIZED_NAME_THEME = "theme";
  @SerializedName(SERIALIZED_NAME_THEME)
  private PatchOrganizationRequestTheme theme;

  public PatchOrganizationRequest() {
  }

  public PatchOrganizationRequest active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Get active
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public PatchOrganizationRequest address(PostDriversRequestAddress address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public PostDriversRequestAddress getAddress() {
    return address;
  }

  public void setAddress(PostDriversRequestAddress address) {
    this.address = address;
  }


  public PatchOrganizationRequest channels(PatchOrganizationRequestChannels channels) {
    this.channels = channels;
    return this;
  }

  /**
   * Get channels
   * @return channels
   */
  @javax.annotation.Nullable
  public PatchOrganizationRequestChannels getChannels() {
    return channels;
  }

  public void setChannels(PatchOrganizationRequestChannels channels) {
    this.channels = channels;
  }


  public PatchOrganizationRequest configurations(PatchOrganizationRequestConfigurations configurations) {
    this.configurations = configurations;
    return this;
  }

  /**
   * Get configurations
   * @return configurations
   */
  @javax.annotation.Nullable
  public PatchOrganizationRequestConfigurations getConfigurations() {
    return configurations;
  }

  public void setConfigurations(PatchOrganizationRequestConfigurations configurations) {
    this.configurations = configurations;
  }


  public PatchOrganizationRequest links(PatchOrganizationRequestLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public PatchOrganizationRequestLinks getLinks() {
    return links;
  }

  public void setLinks(PatchOrganizationRequestLinks links) {
    this.links = links;
  }


  public PatchOrganizationRequest locations(List<Object> locations) {
    this.locations = locations;
    return this;
  }

  public PatchOrganizationRequest addLocationsItem(Object locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

  /**
   * Get locations
   * @return locations
   */
  @javax.annotation.Nullable
  public List<Object> getLocations() {
    return locations;
  }

  public void setLocations(List<Object> locations) {
    this.locations = locations;
  }


  public PatchOrganizationRequest logo(String logo) {
    this.logo = logo;
    return this;
  }

  /**
   * Get logo
   * @return logo
   */
  @javax.annotation.Nullable
  public String getLogo() {
    return logo;
  }

  public void setLogo(String logo) {
    this.logo = logo;
  }


  public PatchOrganizationRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PatchOrganizationRequest otp(String otp) {
    this.otp = otp;
    return this;
  }

  /**
   * Get otp
   * @return otp
   */
  @javax.annotation.Nullable
  public String getOtp() {
    return otp;
  }

  public void setOtp(String otp) {
    this.otp = otp;
  }


  public PatchOrganizationRequest stripeConnectedAccountId(String stripeConnectedAccountId) {
    this.stripeConnectedAccountId = stripeConnectedAccountId;
    return this;
  }

  /**
   * Get stripeConnectedAccountId
   * @return stripeConnectedAccountId
   */
  @javax.annotation.Nullable
  public String getStripeConnectedAccountId() {
    return stripeConnectedAccountId;
  }

  public void setStripeConnectedAccountId(String stripeConnectedAccountId) {
    this.stripeConnectedAccountId = stripeConnectedAccountId;
  }


  public PatchOrganizationRequest stripeCountry(String stripeCountry) {
    this.stripeCountry = stripeCountry;
    return this;
  }

  /**
   * Get stripeCountry
   * @return stripeCountry
   */
  @javax.annotation.Nullable
  public String getStripeCountry() {
    return stripeCountry;
  }

  public void setStripeCountry(String stripeCountry) {
    this.stripeCountry = stripeCountry;
  }


  public PatchOrganizationRequest stripeCurrency(String stripeCurrency) {
    this.stripeCurrency = stripeCurrency;
    return this;
  }

  /**
   * Get stripeCurrency
   * @return stripeCurrency
   */
  @javax.annotation.Nullable
  public String getStripeCurrency() {
    return stripeCurrency;
  }

  public void setStripeCurrency(String stripeCurrency) {
    this.stripeCurrency = stripeCurrency;
  }


  public PatchOrganizationRequest stripeReserveAmount(Integer stripeReserveAmount) {
    this.stripeReserveAmount = stripeReserveAmount;
    return this;
  }

  /**
   * Get stripeReserveAmount
   * @return stripeReserveAmount
   */
  @javax.annotation.Nullable
  public Integer getStripeReserveAmount() {
    return stripeReserveAmount;
  }

  public void setStripeReserveAmount(Integer stripeReserveAmount) {
    this.stripeReserveAmount = stripeReserveAmount;
  }


  public PatchOrganizationRequest support(PatchOrganizationRequestSupport support) {
    this.support = support;
    return this;
  }

  /**
   * Get support
   * @return support
   */
  @javax.annotation.Nullable
  public PatchOrganizationRequestSupport getSupport() {
    return support;
  }

  public void setSupport(PatchOrganizationRequestSupport support) {
    this.support = support;
  }


  public PatchOrganizationRequest supportChat(PatchOrganizationRequestSupportChat supportChat) {
    this.supportChat = supportChat;
    return this;
  }

  /**
   * Get supportChat
   * @return supportChat
   */
  @javax.annotation.Nullable
  public PatchOrganizationRequestSupportChat getSupportChat() {
    return supportChat;
  }

  public void setSupportChat(PatchOrganizationRequestSupportChat supportChat) {
    this.supportChat = supportChat;
  }


  public PatchOrganizationRequest theme(PatchOrganizationRequestTheme theme) {
    this.theme = theme;
    return this;
  }

  /**
   * Get theme
   * @return theme
   */
  @javax.annotation.Nullable
  public PatchOrganizationRequestTheme getTheme() {
    return theme;
  }

  public void setTheme(PatchOrganizationRequestTheme theme) {
    this.theme = theme;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatchOrganizationRequest patchOrganizationRequest = (PatchOrganizationRequest) o;
    return Objects.equals(this.active, patchOrganizationRequest.active) &&
        Objects.equals(this.address, patchOrganizationRequest.address) &&
        Objects.equals(this.channels, patchOrganizationRequest.channels) &&
        Objects.equals(this.configurations, patchOrganizationRequest.configurations) &&
        Objects.equals(this.links, patchOrganizationRequest.links) &&
        Objects.equals(this.locations, patchOrganizationRequest.locations) &&
        Objects.equals(this.logo, patchOrganizationRequest.logo) &&
        Objects.equals(this.name, patchOrganizationRequest.name) &&
        Objects.equals(this.otp, patchOrganizationRequest.otp) &&
        Objects.equals(this.stripeConnectedAccountId, patchOrganizationRequest.stripeConnectedAccountId) &&
        Objects.equals(this.stripeCountry, patchOrganizationRequest.stripeCountry) &&
        Objects.equals(this.stripeCurrency, patchOrganizationRequest.stripeCurrency) &&
        Objects.equals(this.stripeReserveAmount, patchOrganizationRequest.stripeReserveAmount) &&
        Objects.equals(this.support, patchOrganizationRequest.support) &&
        Objects.equals(this.supportChat, patchOrganizationRequest.supportChat) &&
        Objects.equals(this.theme, patchOrganizationRequest.theme);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, address, channels, configurations, links, locations, logo, name, otp, stripeConnectedAccountId, stripeCountry, stripeCurrency, stripeReserveAmount, support, supportChat, theme);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatchOrganizationRequest {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    channels: ").append(toIndentedString(channels)).append("\n");
    sb.append("    configurations: ").append(toIndentedString(configurations)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    otp: ").append(toIndentedString(otp)).append("\n");
    sb.append("    stripeConnectedAccountId: ").append(toIndentedString(stripeConnectedAccountId)).append("\n");
    sb.append("    stripeCountry: ").append(toIndentedString(stripeCountry)).append("\n");
    sb.append("    stripeCurrency: ").append(toIndentedString(stripeCurrency)).append("\n");
    sb.append("    stripeReserveAmount: ").append(toIndentedString(stripeReserveAmount)).append("\n");
    sb.append("    support: ").append(toIndentedString(support)).append("\n");
    sb.append("    supportChat: ").append(toIndentedString(supportChat)).append("\n");
    sb.append("    theme: ").append(toIndentedString(theme)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("address");
    openapiFields.add("channels");
    openapiFields.add("configurations");
    openapiFields.add("links");
    openapiFields.add("locations");
    openapiFields.add("logo");
    openapiFields.add("name");
    openapiFields.add("otp");
    openapiFields.add("stripe_connected_account_id");
    openapiFields.add("stripe_country");
    openapiFields.add("stripe_currency");
    openapiFields.add("stripe_reserve_amount");
    openapiFields.add("support");
    openapiFields.add("supportChat");
    openapiFields.add("theme");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PatchOrganizationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PatchOrganizationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatchOrganizationRequest is not found in the empty JSON string", PatchOrganizationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PatchOrganizationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatchOrganizationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        PostDriversRequestAddress.validateJsonElement(jsonObj.get("address"));
      }
      // validate the optional field `channels`
      if (jsonObj.get("channels") != null && !jsonObj.get("channels").isJsonNull()) {
        PatchOrganizationRequestChannels.validateJsonElement(jsonObj.get("channels"));
      }
      // validate the optional field `configurations`
      if (jsonObj.get("configurations") != null && !jsonObj.get("configurations").isJsonNull()) {
        PatchOrganizationRequestConfigurations.validateJsonElement(jsonObj.get("configurations"));
      }
      // validate the optional field `links`
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        PatchOrganizationRequestLinks.validateJsonElement(jsonObj.get("links"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("locations") != null && !jsonObj.get("locations").isJsonNull() && !jsonObj.get("locations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
      }
      if ((jsonObj.get("logo") != null && !jsonObj.get("logo").isJsonNull()) && !jsonObj.get("logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("otp") != null && !jsonObj.get("otp").isJsonNull()) && !jsonObj.get("otp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `otp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("otp").toString()));
      }
      if ((jsonObj.get("stripe_connected_account_id") != null && !jsonObj.get("stripe_connected_account_id").isJsonNull()) && !jsonObj.get("stripe_connected_account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stripe_connected_account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stripe_connected_account_id").toString()));
      }
      if ((jsonObj.get("stripe_country") != null && !jsonObj.get("stripe_country").isJsonNull()) && !jsonObj.get("stripe_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stripe_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stripe_country").toString()));
      }
      if ((jsonObj.get("stripe_currency") != null && !jsonObj.get("stripe_currency").isJsonNull()) && !jsonObj.get("stripe_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stripe_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stripe_currency").toString()));
      }
      // validate the optional field `support`
      if (jsonObj.get("support") != null && !jsonObj.get("support").isJsonNull()) {
        PatchOrganizationRequestSupport.validateJsonElement(jsonObj.get("support"));
      }
      // validate the optional field `supportChat`
      if (jsonObj.get("supportChat") != null && !jsonObj.get("supportChat").isJsonNull()) {
        PatchOrganizationRequestSupportChat.validateJsonElement(jsonObj.get("supportChat"));
      }
      // validate the optional field `theme`
      if (jsonObj.get("theme") != null && !jsonObj.get("theme").isJsonNull()) {
        PatchOrganizationRequestTheme.validateJsonElement(jsonObj.get("theme"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatchOrganizationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatchOrganizationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatchOrganizationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatchOrganizationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PatchOrganizationRequest>() {
           @Override
           public void write(JsonWriter out, PatchOrganizationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatchOrganizationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PatchOrganizationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PatchOrganizationRequest
   * @throws IOException if the JSON string is invalid with respect to PatchOrganizationRequest
   */
  public static PatchOrganizationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatchOrganizationRequest.class);
  }

  /**
   * Convert an instance of PatchOrganizationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

