/*
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PatchLocationRequestAddress;
import org.openapitools.client.model.PatchLocationRequestCoordinates;
import org.openapitools.client.model.PatchLocationRequestOpeningHours;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PatchLocationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:14.123389-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PatchLocationRequest {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active = true;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private PatchLocationRequestAddress address;

  public static final String SERIALIZED_NAME_CHARGESTATIONS = "chargestations";
  @SerializedName(SERIALIZED_NAME_CHARGESTATIONS)
  private List<Object> chargestations = new ArrayList<>();

  public static final String SERIALIZED_NAME_COORDINATES = "coordinates";
  @SerializedName(SERIALIZED_NAME_COORDINATES)
  private PatchLocationRequestCoordinates coordinates;

  public static final String SERIALIZED_NAME_OPENING_HOURS = "openingHours";
  @SerializedName(SERIALIZED_NAME_OPENING_HOURS)
  private PatchLocationRequestOpeningHours openingHours;

  public static final String SERIALIZED_NAME_OPERATOR_NAME = "operatorName";
  @SerializedName(SERIALIZED_NAME_OPERATOR_NAME)
  private String operatorName;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public PatchLocationRequest() {
  }

  public PatchLocationRequest active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Get active
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public PatchLocationRequest address(PatchLocationRequestAddress address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public PatchLocationRequestAddress getAddress() {
    return address;
  }

  public void setAddress(PatchLocationRequestAddress address) {
    this.address = address;
  }


  public PatchLocationRequest chargestations(List<Object> chargestations) {
    this.chargestations = chargestations;
    return this;
  }

  public PatchLocationRequest addChargestationsItem(Object chargestationsItem) {
    if (this.chargestations == null) {
      this.chargestations = new ArrayList<>();
    }
    this.chargestations.add(chargestationsItem);
    return this;
  }

  /**
   * Get chargestations
   * @return chargestations
   */
  @javax.annotation.Nullable
  public List<Object> getChargestations() {
    return chargestations;
  }

  public void setChargestations(List<Object> chargestations) {
    this.chargestations = chargestations;
  }


  public PatchLocationRequest coordinates(PatchLocationRequestCoordinates coordinates) {
    this.coordinates = coordinates;
    return this;
  }

  /**
   * Get coordinates
   * @return coordinates
   */
  @javax.annotation.Nullable
  public PatchLocationRequestCoordinates getCoordinates() {
    return coordinates;
  }

  public void setCoordinates(PatchLocationRequestCoordinates coordinates) {
    this.coordinates = coordinates;
  }


  public PatchLocationRequest openingHours(PatchLocationRequestOpeningHours openingHours) {
    this.openingHours = openingHours;
    return this;
  }

  /**
   * Get openingHours
   * @return openingHours
   */
  @javax.annotation.Nullable
  public PatchLocationRequestOpeningHours getOpeningHours() {
    return openingHours;
  }

  public void setOpeningHours(PatchLocationRequestOpeningHours openingHours) {
    this.openingHours = openingHours;
  }


  public PatchLocationRequest operatorName(String operatorName) {
    this.operatorName = operatorName;
    return this;
  }

  /**
   * Get operatorName
   * @return operatorName
   */
  @javax.annotation.Nullable
  public String getOperatorName() {
    return operatorName;
  }

  public void setOperatorName(String operatorName) {
    this.operatorName = operatorName;
  }


  public PatchLocationRequest timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Get timezone
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatchLocationRequest patchLocationRequest = (PatchLocationRequest) o;
    return Objects.equals(this.active, patchLocationRequest.active) &&
        Objects.equals(this.address, patchLocationRequest.address) &&
        Objects.equals(this.chargestations, patchLocationRequest.chargestations) &&
        Objects.equals(this.coordinates, patchLocationRequest.coordinates) &&
        Objects.equals(this.openingHours, patchLocationRequest.openingHours) &&
        Objects.equals(this.operatorName, patchLocationRequest.operatorName) &&
        Objects.equals(this.timezone, patchLocationRequest.timezone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, address, chargestations, coordinates, openingHours, operatorName, timezone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatchLocationRequest {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    chargestations: ").append(toIndentedString(chargestations)).append("\n");
    sb.append("    coordinates: ").append(toIndentedString(coordinates)).append("\n");
    sb.append("    openingHours: ").append(toIndentedString(openingHours)).append("\n");
    sb.append("    operatorName: ").append(toIndentedString(operatorName)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("address");
    openapiFields.add("chargestations");
    openapiFields.add("coordinates");
    openapiFields.add("openingHours");
    openapiFields.add("operatorName");
    openapiFields.add("timezone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PatchLocationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PatchLocationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatchLocationRequest is not found in the empty JSON string", PatchLocationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PatchLocationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatchLocationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        PatchLocationRequestAddress.validateJsonElement(jsonObj.get("address"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("chargestations") != null && !jsonObj.get("chargestations").isJsonNull() && !jsonObj.get("chargestations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `chargestations` to be an array in the JSON string but got `%s`", jsonObj.get("chargestations").toString()));
      }
      // validate the optional field `coordinates`
      if (jsonObj.get("coordinates") != null && !jsonObj.get("coordinates").isJsonNull()) {
        PatchLocationRequestCoordinates.validateJsonElement(jsonObj.get("coordinates"));
      }
      // validate the optional field `openingHours`
      if (jsonObj.get("openingHours") != null && !jsonObj.get("openingHours").isJsonNull()) {
        PatchLocationRequestOpeningHours.validateJsonElement(jsonObj.get("openingHours"));
      }
      if ((jsonObj.get("operatorName") != null && !jsonObj.get("operatorName").isJsonNull()) && !jsonObj.get("operatorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operatorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operatorName").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatchLocationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatchLocationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatchLocationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatchLocationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PatchLocationRequest>() {
           @Override
           public void write(JsonWriter out, PatchLocationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatchLocationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PatchLocationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PatchLocationRequest
   * @throws IOException if the JSON string is invalid with respect to PatchLocationRequest
   */
  public static PatchLocationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatchLocationRequest.class);
  }

  /**
   * Convert an instance of PatchLocationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

