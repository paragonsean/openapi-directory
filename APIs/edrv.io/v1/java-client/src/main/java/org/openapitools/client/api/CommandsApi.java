/*
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CancelreservationRequest;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PatchChargeStation200Response;
import org.openapitools.client.model.PatchChargeStationVariableRequest;
import org.openapitools.client.model.RemotestartRequest;
import org.openapitools.client.model.RemotestopRequest;
import org.openapitools.client.model.ReserveRequest;
import org.openapitools.client.model.ResetRequest;
import org.openapitools.client.model.Setchargingschedule201Response;
import org.openapitools.client.model.UnlockconnectorRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CommandsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CommandsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CommandsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelreservation
     * @param cancelreservationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelreservationCall(CancelreservationRequest cancelreservationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancelreservationRequest;

        // create path and map variables
        String localVarPath = "/v1/commands/cancelreservation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelreservationValidateBeforeCall(CancelreservationRequest cancelreservationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cancelreservationRequest' is set
        if (cancelreservationRequest == null) {
            throw new ApiException("Missing the required parameter 'cancelreservationRequest' when calling cancelreservation(Async)");
        }

        return cancelreservationCall(cancelreservationRequest, _callback);

    }

    /**
     * 
     * Use to request a delete an existing reservation. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     * @param cancelreservationRequest  (required)
     * @return PatchChargeStation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public PatchChargeStation200Response cancelreservation(CancelreservationRequest cancelreservationRequest) throws ApiException {
        ApiResponse<PatchChargeStation200Response> localVarResp = cancelreservationWithHttpInfo(cancelreservationRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use to request a delete an existing reservation. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     * @param cancelreservationRequest  (required)
     * @return ApiResponse&lt;PatchChargeStation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PatchChargeStation200Response> cancelreservationWithHttpInfo(CancelreservationRequest cancelreservationRequest) throws ApiException {
        okhttp3.Call localVarCall = cancelreservationValidateBeforeCall(cancelreservationRequest, null);
        Type localVarReturnType = new TypeToken<PatchChargeStation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use to request a delete an existing reservation. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     * @param cancelreservationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelreservationAsync(CancelreservationRequest cancelreservationRequest, final ApiCallback<PatchChargeStation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelreservationValidateBeforeCall(cancelreservationRequest, _callback);
        Type localVarReturnType = new TypeToken<PatchChargeStation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCommands
     * @param paginateLimit Number of results per page (optional, default to 20)
     * @param paginatePage The queried page index (optional)
     * @param paginateEnabled Enable pagination (optional, default to true)
     * @param sortBy Sort data by this key (optional, default to createdAt)
     * @param sortOrder asc to sort ascending (default is desc - descending) (optional, default to desc)
     * @param createdAt$gte Date as ISO String (optional)
     * @param createdAt$lte Date as ISO String (optional)
     * @param updatedAt$gte Date as ISO String (optional)
     * @param updatedAt$lte Date as ISO String (optional)
     * @param includeChargestation Populate chargestation (optional)
     * @param includeDriver Populate driver (optional)
     * @param includeTransaction Populate transaction (optional)
     * @param includeOrganization Populate organization (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommandsCall(Integer paginateLimit, String paginatePage, Boolean paginateEnabled, String sortBy, String sortOrder, OffsetDateTime createdAt$gte, OffsetDateTime createdAt$lte, OffsetDateTime updatedAt$gte, OffsetDateTime updatedAt$lte, Boolean includeChargestation, Boolean includeDriver, Boolean includeTransaction, Boolean includeOrganization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/commands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paginateLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paginate_limit", paginateLimit));
        }

        if (paginatePage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paginate_page", paginatePage));
        }

        if (paginateEnabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paginate_enabled", paginateEnabled));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (createdAt$gte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[$gte]", createdAt$gte));
        }

        if (createdAt$lte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[$lte]", createdAt$lte));
        }

        if (updatedAt$gte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedAt[$gte]", updatedAt$gte));
        }

        if (updatedAt$lte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedAt[$lte]", updatedAt$lte));
        }

        if (includeChargestation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_chargestation", includeChargestation));
        }

        if (includeDriver != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_driver", includeDriver));
        }

        if (includeTransaction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_transaction", includeTransaction));
        }

        if (includeOrganization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_organization", includeOrganization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommandsValidateBeforeCall(Integer paginateLimit, String paginatePage, Boolean paginateEnabled, String sortBy, String sortOrder, OffsetDateTime createdAt$gte, OffsetDateTime createdAt$lte, OffsetDateTime updatedAt$gte, OffsetDateTime updatedAt$lte, Boolean includeChargestation, Boolean includeDriver, Boolean includeTransaction, Boolean includeOrganization, final ApiCallback _callback) throws ApiException {
        return getCommandsCall(paginateLimit, paginatePage, paginateEnabled, sortBy, sortOrder, createdAt$gte, createdAt$lte, updatedAt$gte, updatedAt$lte, includeChargestation, includeDriver, includeTransaction, includeOrganization, _callback);

    }

    /**
     * 
     * Get Commands data
     * @param paginateLimit Number of results per page (optional, default to 20)
     * @param paginatePage The queried page index (optional)
     * @param paginateEnabled Enable pagination (optional, default to true)
     * @param sortBy Sort data by this key (optional, default to createdAt)
     * @param sortOrder asc to sort ascending (default is desc - descending) (optional, default to desc)
     * @param createdAt$gte Date as ISO String (optional)
     * @param createdAt$lte Date as ISO String (optional)
     * @param updatedAt$gte Date as ISO String (optional)
     * @param updatedAt$lte Date as ISO String (optional)
     * @param includeChargestation Populate chargestation (optional)
     * @param includeDriver Populate driver (optional)
     * @param includeTransaction Populate transaction (optional)
     * @param includeOrganization Populate organization (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getCommands(Integer paginateLimit, String paginatePage, Boolean paginateEnabled, String sortBy, String sortOrder, OffsetDateTime createdAt$gte, OffsetDateTime createdAt$lte, OffsetDateTime updatedAt$gte, OffsetDateTime updatedAt$lte, Boolean includeChargestation, Boolean includeDriver, Boolean includeTransaction, Boolean includeOrganization) throws ApiException {
        getCommandsWithHttpInfo(paginateLimit, paginatePage, paginateEnabled, sortBy, sortOrder, createdAt$gte, createdAt$lte, updatedAt$gte, updatedAt$lte, includeChargestation, includeDriver, includeTransaction, includeOrganization);
    }

    /**
     * 
     * Get Commands data
     * @param paginateLimit Number of results per page (optional, default to 20)
     * @param paginatePage The queried page index (optional)
     * @param paginateEnabled Enable pagination (optional, default to true)
     * @param sortBy Sort data by this key (optional, default to createdAt)
     * @param sortOrder asc to sort ascending (default is desc - descending) (optional, default to desc)
     * @param createdAt$gte Date as ISO String (optional)
     * @param createdAt$lte Date as ISO String (optional)
     * @param updatedAt$gte Date as ISO String (optional)
     * @param updatedAt$lte Date as ISO String (optional)
     * @param includeChargestation Populate chargestation (optional)
     * @param includeDriver Populate driver (optional)
     * @param includeTransaction Populate transaction (optional)
     * @param includeOrganization Populate organization (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getCommandsWithHttpInfo(Integer paginateLimit, String paginatePage, Boolean paginateEnabled, String sortBy, String sortOrder, OffsetDateTime createdAt$gte, OffsetDateTime createdAt$lte, OffsetDateTime updatedAt$gte, OffsetDateTime updatedAt$lte, Boolean includeChargestation, Boolean includeDriver, Boolean includeTransaction, Boolean includeOrganization) throws ApiException {
        okhttp3.Call localVarCall = getCommandsValidateBeforeCall(paginateLimit, paginatePage, paginateEnabled, sortBy, sortOrder, createdAt$gte, createdAt$lte, updatedAt$gte, updatedAt$lte, includeChargestation, includeDriver, includeTransaction, includeOrganization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get Commands data
     * @param paginateLimit Number of results per page (optional, default to 20)
     * @param paginatePage The queried page index (optional)
     * @param paginateEnabled Enable pagination (optional, default to true)
     * @param sortBy Sort data by this key (optional, default to createdAt)
     * @param sortOrder asc to sort ascending (default is desc - descending) (optional, default to desc)
     * @param createdAt$gte Date as ISO String (optional)
     * @param createdAt$lte Date as ISO String (optional)
     * @param updatedAt$gte Date as ISO String (optional)
     * @param updatedAt$lte Date as ISO String (optional)
     * @param includeChargestation Populate chargestation (optional)
     * @param includeDriver Populate driver (optional)
     * @param includeTransaction Populate transaction (optional)
     * @param includeOrganization Populate organization (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommandsAsync(Integer paginateLimit, String paginatePage, Boolean paginateEnabled, String sortBy, String sortOrder, OffsetDateTime createdAt$gte, OffsetDateTime createdAt$lte, OffsetDateTime updatedAt$gte, OffsetDateTime updatedAt$lte, Boolean includeChargestation, Boolean includeDriver, Boolean includeTransaction, Boolean includeOrganization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommandsValidateBeforeCall(paginateLimit, paginatePage, paginateEnabled, sortBy, sortOrder, createdAt$gte, createdAt$lte, updatedAt$gte, updatedAt$lte, includeChargestation, includeDriver, includeTransaction, includeOrganization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVariables
     * @param id The chargestation id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns Cs configurations array </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariablesCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/commands/{id}/variables"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVariablesValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVariables(Async)");
        }

        return getVariablesCall(id, _callback);

    }

    /**
     * 
     * Get a charge station&#39;s config variables
     * @param id The chargestation id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns Cs configurations array </td><td>  -  </td></tr>
     </table>
     */
    public void getVariables(String id) throws ApiException {
        getVariablesWithHttpInfo(id);
    }

    /**
     * 
     * Get a charge station&#39;s config variables
     * @param id The chargestation id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns Cs configurations array </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getVariablesWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getVariablesValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get a charge station&#39;s config variables
     * @param id The chargestation id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns Cs configurations array </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariablesAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVariablesValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchChargeStationVariable
     * @param id ID of charge station (required)
     * @param patchChargeStationVariableRequest Charge Station Variable to set (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchChargeStationVariableCall(String id, PatchChargeStationVariableRequest patchChargeStationVariableRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchChargeStationVariableRequest;

        // create path and map variables
        String localVarPath = "/v1/commands/{id}/variables"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchChargeStationVariableValidateBeforeCall(String id, PatchChargeStationVariableRequest patchChargeStationVariableRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling patchChargeStationVariable(Async)");
        }

        // verify the required parameter 'patchChargeStationVariableRequest' is set
        if (patchChargeStationVariableRequest == null) {
            throw new ApiException("Missing the required parameter 'patchChargeStationVariableRequest' when calling patchChargeStationVariable(Async)");
        }

        return patchChargeStationVariableCall(id, patchChargeStationVariableRequest, _callback);

    }

    /**
     * 
     * Update config variables for a chargestation
     * @param id ID of charge station (required)
     * @param patchChargeStationVariableRequest Charge Station Variable to set (required)
     * @return PatchChargeStation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public PatchChargeStation200Response patchChargeStationVariable(String id, PatchChargeStationVariableRequest patchChargeStationVariableRequest) throws ApiException {
        ApiResponse<PatchChargeStation200Response> localVarResp = patchChargeStationVariableWithHttpInfo(id, patchChargeStationVariableRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Update config variables for a chargestation
     * @param id ID of charge station (required)
     * @param patchChargeStationVariableRequest Charge Station Variable to set (required)
     * @return ApiResponse&lt;PatchChargeStation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PatchChargeStation200Response> patchChargeStationVariableWithHttpInfo(String id, PatchChargeStationVariableRequest patchChargeStationVariableRequest) throws ApiException {
        okhttp3.Call localVarCall = patchChargeStationVariableValidateBeforeCall(id, patchChargeStationVariableRequest, null);
        Type localVarReturnType = new TypeToken<PatchChargeStation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update config variables for a chargestation
     * @param id ID of charge station (required)
     * @param patchChargeStationVariableRequest Charge Station Variable to set (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchChargeStationVariableAsync(String id, PatchChargeStationVariableRequest patchChargeStationVariableRequest, final ApiCallback<PatchChargeStation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchChargeStationVariableValidateBeforeCall(id, patchChargeStationVariableRequest, _callback);
        Type localVarReturnType = new TypeToken<PatchChargeStation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remotestart
     * @param remotestartRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remotestartCall(RemotestartRequest remotestartRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = remotestartRequest;

        // create path and map variables
        String localVarPath = "/v1/commands/remotestart";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remotestartValidateBeforeCall(RemotestartRequest remotestartRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'remotestartRequest' is set
        if (remotestartRequest == null) {
            throw new ApiException("Missing the required parameter 'remotestartRequest' when calling remotestart(Async)");
        }

        return remotestartCall(remotestartRequest, _callback);

    }

    /**
     * 
     * Use to request a remote start command. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     * @param remotestartRequest  (required)
     * @return Setchargingschedule201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public Setchargingschedule201Response remotestart(RemotestartRequest remotestartRequest) throws ApiException {
        ApiResponse<Setchargingschedule201Response> localVarResp = remotestartWithHttpInfo(remotestartRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use to request a remote start command. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     * @param remotestartRequest  (required)
     * @return ApiResponse&lt;Setchargingschedule201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Setchargingschedule201Response> remotestartWithHttpInfo(RemotestartRequest remotestartRequest) throws ApiException {
        okhttp3.Call localVarCall = remotestartValidateBeforeCall(remotestartRequest, null);
        Type localVarReturnType = new TypeToken<Setchargingschedule201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use to request a remote start command. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     * @param remotestartRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remotestartAsync(RemotestartRequest remotestartRequest, final ApiCallback<Setchargingschedule201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = remotestartValidateBeforeCall(remotestartRequest, _callback);
        Type localVarReturnType = new TypeToken<Setchargingschedule201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remotestop
     * @param remotestopRequest Remote stop transaction info here. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remotestopCall(RemotestopRequest remotestopRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = remotestopRequest;

        // create path and map variables
        String localVarPath = "/v1/commands/remotestop";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remotestopValidateBeforeCall(RemotestopRequest remotestopRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'remotestopRequest' is set
        if (remotestopRequest == null) {
            throw new ApiException("Missing the required parameter 'remotestopRequest' when calling remotestop(Async)");
        }

        return remotestopCall(remotestopRequest, _callback);

    }

    /**
     * 
     * Use to request a remote stop command. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     * @param remotestopRequest Remote stop transaction info here. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public void remotestop(RemotestopRequest remotestopRequest) throws ApiException {
        remotestopWithHttpInfo(remotestopRequest);
    }

    /**
     * 
     * Use to request a remote stop command. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     * @param remotestopRequest Remote stop transaction info here. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> remotestopWithHttpInfo(RemotestopRequest remotestopRequest) throws ApiException {
        okhttp3.Call localVarCall = remotestopValidateBeforeCall(remotestopRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Use to request a remote stop command. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     * @param remotestopRequest Remote stop transaction info here. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remotestopAsync(RemotestopRequest remotestopRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = remotestopValidateBeforeCall(remotestopRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reserve
     * @param reserveRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reserveCall(ReserveRequest reserveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reserveRequest;

        // create path and map variables
        String localVarPath = "/v1/commands/reserve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reserveValidateBeforeCall(ReserveRequest reserveRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reserveRequest' is set
        if (reserveRequest == null) {
            throw new ApiException("Missing the required parameter 'reserveRequest' when calling reserve(Async)");
        }

        return reserveCall(reserveRequest, _callback);

    }

    /**
     * 
     * Use to request a reserve command. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     * @param reserveRequest  (required)
     * @return Setchargingschedule201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public Setchargingschedule201Response reserve(ReserveRequest reserveRequest) throws ApiException {
        ApiResponse<Setchargingschedule201Response> localVarResp = reserveWithHttpInfo(reserveRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use to request a reserve command. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     * @param reserveRequest  (required)
     * @return ApiResponse&lt;Setchargingschedule201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Setchargingschedule201Response> reserveWithHttpInfo(ReserveRequest reserveRequest) throws ApiException {
        okhttp3.Call localVarCall = reserveValidateBeforeCall(reserveRequest, null);
        Type localVarReturnType = new TypeToken<Setchargingschedule201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use to request a reserve command. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     * @param reserveRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reserveAsync(ReserveRequest reserveRequest, final ApiCallback<Setchargingschedule201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = reserveValidateBeforeCall(reserveRequest, _callback);
        Type localVarReturnType = new TypeToken<Setchargingschedule201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reset
     * @param resetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetCall(ResetRequest resetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resetRequest;

        // create path and map variables
        String localVarPath = "/v1/commands/reset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetValidateBeforeCall(ResetRequest resetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resetRequest' is set
        if (resetRequest == null) {
            throw new ApiException("Missing the required parameter 'resetRequest' when calling reset(Async)");
        }

        return resetCall(resetRequest, _callback);

    }

    /**
     * 
     * Use to request a reset command. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     * @param resetRequest  (required)
     * @return PatchChargeStation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public PatchChargeStation200Response reset(ResetRequest resetRequest) throws ApiException {
        ApiResponse<PatchChargeStation200Response> localVarResp = resetWithHttpInfo(resetRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use to request a reset command. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     * @param resetRequest  (required)
     * @return ApiResponse&lt;PatchChargeStation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PatchChargeStation200Response> resetWithHttpInfo(ResetRequest resetRequest) throws ApiException {
        okhttp3.Call localVarCall = resetValidateBeforeCall(resetRequest, null);
        Type localVarReturnType = new TypeToken<PatchChargeStation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use to request a reset command. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     * @param resetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetAsync(ResetRequest resetRequest, final ApiCallback<PatchChargeStation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetValidateBeforeCall(resetRequest, _callback);
        Type localVarReturnType = new TypeToken<PatchChargeStation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unlockconnector
     * @param unlockconnectorRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlockconnectorCall(UnlockconnectorRequest unlockconnectorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = unlockconnectorRequest;

        // create path and map variables
        String localVarPath = "/v1/commands/unlockconnector";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unlockconnectorValidateBeforeCall(UnlockconnectorRequest unlockconnectorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'unlockconnectorRequest' is set
        if (unlockconnectorRequest == null) {
            throw new ApiException("Missing the required parameter 'unlockconnectorRequest' when calling unlockconnector(Async)");
        }

        return unlockconnectorCall(unlockconnectorRequest, _callback);

    }

    /**
     * 
     * Use to request an unlock command for a connector. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     * @param unlockconnectorRequest  (required)
     * @return Setchargingschedule201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public Setchargingschedule201Response unlockconnector(UnlockconnectorRequest unlockconnectorRequest) throws ApiException {
        ApiResponse<Setchargingschedule201Response> localVarResp = unlockconnectorWithHttpInfo(unlockconnectorRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use to request an unlock command for a connector. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     * @param unlockconnectorRequest  (required)
     * @return ApiResponse&lt;Setchargingschedule201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Setchargingschedule201Response> unlockconnectorWithHttpInfo(UnlockconnectorRequest unlockconnectorRequest) throws ApiException {
        okhttp3.Call localVarCall = unlockconnectorValidateBeforeCall(unlockconnectorRequest, null);
        Type localVarReturnType = new TypeToken<Setchargingschedule201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use to request an unlock command for a connector. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     * @param unlockconnectorRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlockconnectorAsync(UnlockconnectorRequest unlockconnectorRequest, final ApiCallback<Setchargingschedule201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = unlockconnectorValidateBeforeCall(unlockconnectorRequest, _callback);
        Type localVarReturnType = new TypeToken<Setchargingschedule201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
