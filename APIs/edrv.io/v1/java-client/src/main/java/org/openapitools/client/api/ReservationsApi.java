/*
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import org.openapitools.client.model.PatchChargeStation200Response;
import org.openapitools.client.model.UpdatereservationRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReservationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReservationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReservationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getReservation
     * @param id ID of the reservation that needs to be fetched (required)
     * @param includeChargestation Populate chargestation (optional)
     * @param includeOrganization Populate organization (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReservationCall(String id, Boolean includeChargestation, Boolean includeOrganization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/reservations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeChargestation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_chargestation", includeChargestation));
        }

        if (includeOrganization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_organization", includeOrganization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReservationValidateBeforeCall(String id, Boolean includeChargestation, Boolean includeOrganization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getReservation(Async)");
        }

        return getReservationCall(id, includeChargestation, includeOrganization, _callback);

    }

    /**
     * 
     * Get one reservation data
     * @param id ID of the reservation that needs to be fetched (required)
     * @param includeChargestation Populate chargestation (optional)
     * @param includeOrganization Populate organization (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getReservation(String id, Boolean includeChargestation, Boolean includeOrganization) throws ApiException {
        getReservationWithHttpInfo(id, includeChargestation, includeOrganization);
    }

    /**
     * 
     * Get one reservation data
     * @param id ID of the reservation that needs to be fetched (required)
     * @param includeChargestation Populate chargestation (optional)
     * @param includeOrganization Populate organization (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getReservationWithHttpInfo(String id, Boolean includeChargestation, Boolean includeOrganization) throws ApiException {
        okhttp3.Call localVarCall = getReservationValidateBeforeCall(id, includeChargestation, includeOrganization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get one reservation data
     * @param id ID of the reservation that needs to be fetched (required)
     * @param includeChargestation Populate chargestation (optional)
     * @param includeOrganization Populate organization (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReservationAsync(String id, Boolean includeChargestation, Boolean includeOrganization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReservationValidateBeforeCall(id, includeChargestation, includeOrganization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReservations
     * @param paginateLimit Number of results per page (optional, default to 20)
     * @param paginatePage The queried page index (optional)
     * @param paginateEnabled Enable pagination (optional, default to true)
     * @param sortBy Sort data by this key (optional, default to createdAt)
     * @param sortOrder asc to sort ascending (default is desc - descending) (optional, default to desc)
     * @param createdAt$gte Date as ISO String (optional)
     * @param createdAt$lte Date as ISO String (optional)
     * @param updatedAt$gte Date as ISO String (optional)
     * @param updatedAt$lte Date as ISO String (optional)
     * @param includeChargestation Populate chargestation (optional)
     * @param includeOrganization Populate organization (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReservationsCall(Integer paginateLimit, String paginatePage, Boolean paginateEnabled, String sortBy, String sortOrder, OffsetDateTime createdAt$gte, OffsetDateTime createdAt$lte, OffsetDateTime updatedAt$gte, OffsetDateTime updatedAt$lte, Boolean includeChargestation, Boolean includeOrganization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/reservations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paginateLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paginate_limit", paginateLimit));
        }

        if (paginatePage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paginate_page", paginatePage));
        }

        if (paginateEnabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paginate_enabled", paginateEnabled));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (createdAt$gte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[$gte]", createdAt$gte));
        }

        if (createdAt$lte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt[$lte]", createdAt$lte));
        }

        if (updatedAt$gte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedAt[$gte]", updatedAt$gte));
        }

        if (updatedAt$lte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedAt[$lte]", updatedAt$lte));
        }

        if (includeChargestation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_chargestation", includeChargestation));
        }

        if (includeOrganization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_organization", includeOrganization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReservationsValidateBeforeCall(Integer paginateLimit, String paginatePage, Boolean paginateEnabled, String sortBy, String sortOrder, OffsetDateTime createdAt$gte, OffsetDateTime createdAt$lte, OffsetDateTime updatedAt$gte, OffsetDateTime updatedAt$lte, Boolean includeChargestation, Boolean includeOrganization, final ApiCallback _callback) throws ApiException {
        return getReservationsCall(paginateLimit, paginatePage, paginateEnabled, sortBy, sortOrder, createdAt$gte, createdAt$lte, updatedAt$gte, updatedAt$lte, includeChargestation, includeOrganization, _callback);

    }

    /**
     * 
     * Get Reservations data
     * @param paginateLimit Number of results per page (optional, default to 20)
     * @param paginatePage The queried page index (optional)
     * @param paginateEnabled Enable pagination (optional, default to true)
     * @param sortBy Sort data by this key (optional, default to createdAt)
     * @param sortOrder asc to sort ascending (default is desc - descending) (optional, default to desc)
     * @param createdAt$gte Date as ISO String (optional)
     * @param createdAt$lte Date as ISO String (optional)
     * @param updatedAt$gte Date as ISO String (optional)
     * @param updatedAt$lte Date as ISO String (optional)
     * @param includeChargestation Populate chargestation (optional)
     * @param includeOrganization Populate organization (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getReservations(Integer paginateLimit, String paginatePage, Boolean paginateEnabled, String sortBy, String sortOrder, OffsetDateTime createdAt$gte, OffsetDateTime createdAt$lte, OffsetDateTime updatedAt$gte, OffsetDateTime updatedAt$lte, Boolean includeChargestation, Boolean includeOrganization) throws ApiException {
        getReservationsWithHttpInfo(paginateLimit, paginatePage, paginateEnabled, sortBy, sortOrder, createdAt$gte, createdAt$lte, updatedAt$gte, updatedAt$lte, includeChargestation, includeOrganization);
    }

    /**
     * 
     * Get Reservations data
     * @param paginateLimit Number of results per page (optional, default to 20)
     * @param paginatePage The queried page index (optional)
     * @param paginateEnabled Enable pagination (optional, default to true)
     * @param sortBy Sort data by this key (optional, default to createdAt)
     * @param sortOrder asc to sort ascending (default is desc - descending) (optional, default to desc)
     * @param createdAt$gte Date as ISO String (optional)
     * @param createdAt$lte Date as ISO String (optional)
     * @param updatedAt$gte Date as ISO String (optional)
     * @param updatedAt$lte Date as ISO String (optional)
     * @param includeChargestation Populate chargestation (optional)
     * @param includeOrganization Populate organization (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getReservationsWithHttpInfo(Integer paginateLimit, String paginatePage, Boolean paginateEnabled, String sortBy, String sortOrder, OffsetDateTime createdAt$gte, OffsetDateTime createdAt$lte, OffsetDateTime updatedAt$gte, OffsetDateTime updatedAt$lte, Boolean includeChargestation, Boolean includeOrganization) throws ApiException {
        okhttp3.Call localVarCall = getReservationsValidateBeforeCall(paginateLimit, paginatePage, paginateEnabled, sortBy, sortOrder, createdAt$gte, createdAt$lte, updatedAt$gte, updatedAt$lte, includeChargestation, includeOrganization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get Reservations data
     * @param paginateLimit Number of results per page (optional, default to 20)
     * @param paginatePage The queried page index (optional)
     * @param paginateEnabled Enable pagination (optional, default to true)
     * @param sortBy Sort data by this key (optional, default to createdAt)
     * @param sortOrder asc to sort ascending (default is desc - descending) (optional, default to desc)
     * @param createdAt$gte Date as ISO String (optional)
     * @param createdAt$lte Date as ISO String (optional)
     * @param updatedAt$gte Date as ISO String (optional)
     * @param updatedAt$lte Date as ISO String (optional)
     * @param includeChargestation Populate chargestation (optional)
     * @param includeOrganization Populate organization (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReservationsAsync(Integer paginateLimit, String paginatePage, Boolean paginateEnabled, String sortBy, String sortOrder, OffsetDateTime createdAt$gte, OffsetDateTime createdAt$lte, OffsetDateTime updatedAt$gte, OffsetDateTime updatedAt$lte, Boolean includeChargestation, Boolean includeOrganization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReservationsValidateBeforeCall(paginateLimit, paginatePage, paginateEnabled, sortBy, sortOrder, createdAt$gte, createdAt$lte, updatedAt$gte, updatedAt$lte, includeChargestation, includeOrganization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatereservation
     * @param id ID of the reservation that needs to be fetched (required)
     * @param updatereservationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatereservationCall(String id, UpdatereservationRequest updatereservationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatereservationRequest;

        // create path and map variables
        String localVarPath = "/v1/reservations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatereservationValidateBeforeCall(String id, UpdatereservationRequest updatereservationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatereservation(Async)");
        }

        // verify the required parameter 'updatereservationRequest' is set
        if (updatereservationRequest == null) {
            throw new ApiException("Missing the required parameter 'updatereservationRequest' when calling updatereservation(Async)");
        }

        return updatereservationCall(id, updatereservationRequest, _callback);

    }

    /**
     * 
     * Use to request a update an existing reservation. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     * @param id ID of the reservation that needs to be fetched (required)
     * @param updatereservationRequest  (required)
     * @return PatchChargeStation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public PatchChargeStation200Response updatereservation(String id, UpdatereservationRequest updatereservationRequest) throws ApiException {
        ApiResponse<PatchChargeStation200Response> localVarResp = updatereservationWithHttpInfo(id, updatereservationRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Use to request a update an existing reservation. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     * @param id ID of the reservation that needs to be fetched (required)
     * @param updatereservationRequest  (required)
     * @return ApiResponse&lt;PatchChargeStation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PatchChargeStation200Response> updatereservationWithHttpInfo(String id, UpdatereservationRequest updatereservationRequest) throws ApiException {
        okhttp3.Call localVarCall = updatereservationValidateBeforeCall(id, updatereservationRequest, null);
        Type localVarReturnType = new TypeToken<PatchChargeStation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use to request a update an existing reservation. The request will wait for the charge station to process the command. It will timeout after 60 seconds.
     * @param id ID of the reservation that needs to be fetched (required)
     * @param updatereservationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatereservationAsync(String id, UpdatereservationRequest updatereservationRequest, final ApiCallback<PatchChargeStation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatereservationValidateBeforeCall(id, updatereservationRequest, _callback);
        Type localVarReturnType = new TypeToken<PatchChargeStation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
