/*
 * eDRV API
 * edrv.io API Documentation
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@edrv.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostConnectorsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:14.123389-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PostConnectorsRequest {
  public static final String SERIALIZED_NAME_CHARGESTATION = "chargestation";
  @SerializedName(SERIALIZED_NAME_CHARGESTATION)
  private String chargestation;

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private String format;

  public static final String SERIALIZED_NAME_POWER = "power";
  @SerializedName(SERIALIZED_NAME_POWER)
  private Integer power;

  public static final String SERIALIZED_NAME_POWER_TYPE = "power_type";
  @SerializedName(SERIALIZED_NAME_POWER_TYPE)
  private String powerType;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private String rate;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public PostConnectorsRequest() {
  }

  public PostConnectorsRequest chargestation(String chargestation) {
    this.chargestation = chargestation;
    return this;
  }

  /**
   * Get chargestation
   * @return chargestation
   */
  @javax.annotation.Nullable
  public String getChargestation() {
    return chargestation;
  }

  public void setChargestation(String chargestation) {
    this.chargestation = chargestation;
  }


  public PostConnectorsRequest format(String format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }


  public PostConnectorsRequest power(Integer power) {
    this.power = power;
    return this;
  }

  /**
   * Get power
   * @return power
   */
  @javax.annotation.Nullable
  public Integer getPower() {
    return power;
  }

  public void setPower(Integer power) {
    this.power = power;
  }


  public PostConnectorsRequest powerType(String powerType) {
    this.powerType = powerType;
    return this;
  }

  /**
   * Get powerType
   * @return powerType
   */
  @javax.annotation.Nullable
  public String getPowerType() {
    return powerType;
  }

  public void setPowerType(String powerType) {
    this.powerType = powerType;
  }


  public PostConnectorsRequest rate(String rate) {
    this.rate = rate;
    return this;
  }

  /**
   * Get rate
   * @return rate
   */
  @javax.annotation.Nullable
  public String getRate() {
    return rate;
  }

  public void setRate(String rate) {
    this.rate = rate;
  }


  public PostConnectorsRequest type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostConnectorsRequest postConnectorsRequest = (PostConnectorsRequest) o;
    return Objects.equals(this.chargestation, postConnectorsRequest.chargestation) &&
        Objects.equals(this.format, postConnectorsRequest.format) &&
        Objects.equals(this.power, postConnectorsRequest.power) &&
        Objects.equals(this.powerType, postConnectorsRequest.powerType) &&
        Objects.equals(this.rate, postConnectorsRequest.rate) &&
        Objects.equals(this.type, postConnectorsRequest.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chargestation, format, power, powerType, rate, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostConnectorsRequest {\n");
    sb.append("    chargestation: ").append(toIndentedString(chargestation)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    power: ").append(toIndentedString(power)).append("\n");
    sb.append("    powerType: ").append(toIndentedString(powerType)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chargestation");
    openapiFields.add("format");
    openapiFields.add("power");
    openapiFields.add("power_type");
    openapiFields.add("rate");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostConnectorsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostConnectorsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostConnectorsRequest is not found in the empty JSON string", PostConnectorsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostConnectorsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostConnectorsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("chargestation") != null && !jsonObj.get("chargestation").isJsonNull()) && !jsonObj.get("chargestation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chargestation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chargestation").toString()));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      if ((jsonObj.get("power_type") != null && !jsonObj.get("power_type").isJsonNull()) && !jsonObj.get("power_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `power_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("power_type").toString()));
      }
      if ((jsonObj.get("rate") != null && !jsonObj.get("rate").isJsonNull()) && !jsonObj.get("rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rate").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostConnectorsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostConnectorsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostConnectorsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostConnectorsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PostConnectorsRequest>() {
           @Override
           public void write(JsonWriter out, PostConnectorsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostConnectorsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostConnectorsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostConnectorsRequest
   * @throws IOException if the JSON string is invalid with respect to PostConnectorsRequest
   */
  public static PostConnectorsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostConnectorsRequest.class);
  }

  /**
   * Convert an instance of PostConnectorsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

