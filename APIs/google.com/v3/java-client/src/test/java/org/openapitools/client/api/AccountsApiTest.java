/*
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccountLink;
import org.openapitools.client.model.Brand;
import org.openapitools.client.model.CreateReconciliationReportResponse;
import org.openapitools.client.model.Icon;
import org.openapitools.client.model.ListAccountLinksResponse;
import org.openapitools.client.model.ListBrandsResponse;
import org.openapitools.client.model.ListHotelViewsResponse;
import org.openapitools.client.model.ListIconsResponse;
import org.openapitools.client.model.ListPriceAccuracyViewsResponse;
import org.openapitools.client.model.ListPriceCoverageViewsResponse;
import org.openapitools.client.model.ListReconciliationReportsResponse;
import org.openapitools.client.model.PriceCoverageView;
import org.openapitools.client.model.QueryFreeBookingLinksReportResponse;
import org.openapitools.client.model.QueryParticipationReportResponse;
import org.openapitools.client.model.QueryPropertyPerformanceReportResponse;
import org.openapitools.client.model.ReconciliationReport;
import org.openapitools.client.model.SetLiveOnGoogleRequest;
import org.openapitools.client.model.SetLiveOnGoogleResponse;
import org.openapitools.client.model.SummarizeHotelViewsResponse;
import org.openapitools.client.model.SummarizePriceAccuracyResponse;
import org.openapitools.client.model.ValidateReconciliationReportResponse;
import org.openapitools.client.model.VerifyListingsRequest;
import org.openapitools.client.model.VerifyListingsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsApi
 */
@Disabled
public class AccountsApiTest {

    private final AccountsApi api = new AccountsApi();

    /**
     * Creates a new account link between a Hotel Center account and a Google Ads account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelpartnerAccountsAccountLinksCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AccountLink accountLink = null;
        AccountLink response = api.travelpartnerAccountsAccountLinksCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, accountLink);
        // TODO: test validations
    }

    /**
     * Deletes an account link.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelpartnerAccountsAccountLinksDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.travelpartnerAccountsAccountLinksDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Returns the account links for a Hotel Center account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelpartnerAccountsAccountLinksListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListAccountLinksResponse response = api.travelpartnerAccountsAccountLinksList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a new brand. Because Google detects brands from your existing properties, you only need this operation when you want to configure a brand before you send its properties to Google. Note that it might take a couple of days after your listing feed first provides a brand for the brand to appear.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelpartnerAccountsBrandsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String brandId = null;
        Brand brand = null;
        Brand response = api.travelpartnerAccountsBrandsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, brandId, brand);
        // TODO: test validations
    }

    /**
     * Returns the brands for a partner account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelpartnerAccountsBrandsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListBrandsResponse response = api.travelpartnerAccountsBrandsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Updates a brand.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelpartnerAccountsBrandsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean allowMissing = null;
        String updateMask = null;
        Brand brand = null;
        Brand response = api.travelpartnerAccountsBrandsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, allowMissing, updateMask, brand);
        // TODO: test validations
    }

    /**
     * **DEPRECATED:** Use PropertyPerformanceReportService.QueryPropertyPerformanceReport, which also has impression reporting, instead. Provides the ability to query (get, filter, and segment) a free booking links report for a specific account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelpartnerAccountsFreeBookingLinksReportViewsQueryTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String aggregateBy = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        QueryFreeBookingLinksReportResponse response = api.travelpartnerAccountsFreeBookingLinksReportViewsQuery(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, aggregateBy, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Returns the list of hotel views.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelpartnerAccountsHotelViewsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListHotelViewsResponse response = api.travelpartnerAccountsHotelViewsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Returns summarized information about hotels.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelpartnerAccountsHotelViewsSummarizeTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SummarizeHotelViewsResponse response = api.travelpartnerAccountsHotelViewsSummarize(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Collection-level custom method to update the Live on Google status for multiple properties. Each call can turn on or off multiple hotels. To turn some hotels on and turn some hotels off, you will have to make multiple calls.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelpartnerAccountsHotelsSetLiveOnGoogleTest() throws ApiException {
        String account = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetLiveOnGoogleRequest setLiveOnGoogleRequest = null;
        SetLiveOnGoogleResponse response = api.travelpartnerAccountsHotelsSetLiveOnGoogle(account, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setLiveOnGoogleRequest);
        // TODO: test validations
    }

    /**
     * Uploads a new icon and starts its review process. Generates an &#x60;icon_id&#x60; and includes it in the icon&#39;s resource name, which is the format &#x60;accounts/{account_id}/icons/{icon_id}&#x60; Returns HTTP status 400 and doesn&#39;t trigger the review process if the icon has any of these conditions: * Image is not in PNG format, or not convertible to PNG format. * Size less than 72 pixels * Size greater than 1200 pixels * Aspect ratio other than 1:1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelpartnerAccountsIconsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Icon icon = null;
        Icon response = api.travelpartnerAccountsIconsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, icon);
        // TODO: test validations
    }

    /**
     * Returns the &#x60;Icon&#x60;s for a partner account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelpartnerAccountsIconsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListIconsResponse response = api.travelpartnerAccountsIconsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * returns verified listings with data issues and serving eligibilities
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelpartnerAccountsListingsVerifyTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        VerifyListingsRequest verifyListingsRequest = null;
        VerifyListingsResponse response = api.travelpartnerAccountsListingsVerify(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, verifyListingsRequest);
        // TODO: test validations
    }

    /**
     * Provides the ability to query (get, filter, and segment) a participation report for a particular account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelpartnerAccountsParticipationReportViewsQueryTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String aggregateBy = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        QueryParticipationReportResponse response = api.travelpartnerAccountsParticipationReportViewsQuery(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, aggregateBy, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists the available price accuracy views.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelpartnerAccountsPriceAccuracyViewsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListPriceAccuracyViewsResponse response = api.travelpartnerAccountsPriceAccuracyViewsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Returns the price accuracy summary.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelpartnerAccountsPriceAccuracyViewsSummarizeTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SummarizePriceAccuracyResponse response = api.travelpartnerAccountsPriceAccuracyViewsSummarize(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Returns the latest price coverage view in full detail.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelpartnerAccountsPriceCoverageViewsGetLatestTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PriceCoverageView response = api.travelpartnerAccountsPriceCoverageViewsGetLatest(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Returns the entire price coverage history.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelpartnerAccountsPriceCoverageViewsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListPriceCoverageViewsResponse response = api.travelpartnerAccountsPriceCoverageViewsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Provides the ability to query (get, filter, and segment) a property performance links report for a specific account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelpartnerAccountsPropertyPerformanceReportViewsQueryTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String aggregateBy = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        QueryPropertyPerformanceReportResponse response = api.travelpartnerAccountsPropertyPerformanceReportViewsQuery(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, aggregateBy, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a reconciliation report and uploads it to Google.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelpartnerAccountsReconciliationReportsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ReconciliationReport reconciliationReport = null;
        CreateReconciliationReportResponse response = api.travelpartnerAccountsReconciliationReportsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, reconciliationReport);
        // TODO: test validations
    }

    /**
     * Returns a reconciliation report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelpartnerAccountsReconciliationReportsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean includeMatchedPrices = null;
        Boolean includeNonScoring = null;
        Boolean includePixels = null;
        ReconciliationReport response = api.travelpartnerAccountsReconciliationReportsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeMatchedPrices, includeNonScoring, includePixels);
        // TODO: test validations
    }

    /**
     * Returns a list of the names of created reconciliation reports.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelpartnerAccountsReconciliationReportsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String endDate = null;
        String startDate = null;
        ListReconciliationReportsResponse response = api.travelpartnerAccountsReconciliationReportsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, endDate, startDate);
        // TODO: test validations
    }

    /**
     * Validates a reconciliation report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void travelpartnerAccountsReconciliationReportsValidateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ReconciliationReport reconciliationReport = null;
        ValidateReconciliationReportResponse response = api.travelpartnerAccountsReconciliationReportsValidate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, reconciliationReport);
        // TODO: test validations
    }

}
