/*
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The reasons that contributed to the price problem count and the total count for each reason.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:52.320664-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PriceProblemCountDetails {
  public static final String SERIALIZED_NAME_HOTEL_SUSPENDED_COUNT = "hotelSuspendedCount";
  @SerializedName(SERIALIZED_NAME_HOTEL_SUSPENDED_COUNT)
  private String hotelSuspendedCount;

  public static final String SERIALIZED_NAME_PRICE_UNUSUALLY_HIGH_COUNT = "priceUnusuallyHighCount";
  @SerializedName(SERIALIZED_NAME_PRICE_UNUSUALLY_HIGH_COUNT)
  private String priceUnusuallyHighCount;

  public static final String SERIALIZED_NAME_PRICE_UNUSUALLY_LOW_COUNT = "priceUnusuallyLowCount";
  @SerializedName(SERIALIZED_NAME_PRICE_UNUSUALLY_LOW_COUNT)
  private String priceUnusuallyLowCount;

  public static final String SERIALIZED_NAME_TAXES_AND_FEES_MISSING_COUNT = "taxesAndFeesMissingCount";
  @SerializedName(SERIALIZED_NAME_TAXES_AND_FEES_MISSING_COUNT)
  private String taxesAndFeesMissingCount;

  public PriceProblemCountDetails() {
  }

  public PriceProblemCountDetails hotelSuspendedCount(String hotelSuspendedCount) {
    this.hotelSuspendedCount = hotelSuspendedCount;
    return this;
  }

  /**
   * The hotel was suspended. This may be due to persistent problems in areas such as incorrect taxes and fees.
   * @return hotelSuspendedCount
   */
  @javax.annotation.Nullable
  public String getHotelSuspendedCount() {
    return hotelSuspendedCount;
  }

  public void setHotelSuspendedCount(String hotelSuspendedCount) {
    this.hotelSuspendedCount = hotelSuspendedCount;
  }


  public PriceProblemCountDetails priceUnusuallyHighCount(String priceUnusuallyHighCount) {
    this.priceUnusuallyHighCount = priceUnusuallyHighCount;
    return this;
  }

  /**
   * The price given for this itinerary seemed oddly high compared to regional trends.
   * @return priceUnusuallyHighCount
   */
  @javax.annotation.Nullable
  public String getPriceUnusuallyHighCount() {
    return priceUnusuallyHighCount;
  }

  public void setPriceUnusuallyHighCount(String priceUnusuallyHighCount) {
    this.priceUnusuallyHighCount = priceUnusuallyHighCount;
  }


  public PriceProblemCountDetails priceUnusuallyLowCount(String priceUnusuallyLowCount) {
    this.priceUnusuallyLowCount = priceUnusuallyLowCount;
    return this;
  }

  /**
   * The price given for this itinerary seemed oddly low compared to regional trends.
   * @return priceUnusuallyLowCount
   */
  @javax.annotation.Nullable
  public String getPriceUnusuallyLowCount() {
    return priceUnusuallyLowCount;
  }

  public void setPriceUnusuallyLowCount(String priceUnusuallyLowCount) {
    this.priceUnusuallyLowCount = priceUnusuallyLowCount;
  }


  public PriceProblemCountDetails taxesAndFeesMissingCount(String taxesAndFeesMissingCount) {
    this.taxesAndFeesMissingCount = taxesAndFeesMissingCount;
    return this;
  }

  /**
   * Taxes and fees were missing from pricing.
   * @return taxesAndFeesMissingCount
   */
  @javax.annotation.Nullable
  public String getTaxesAndFeesMissingCount() {
    return taxesAndFeesMissingCount;
  }

  public void setTaxesAndFeesMissingCount(String taxesAndFeesMissingCount) {
    this.taxesAndFeesMissingCount = taxesAndFeesMissingCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PriceProblemCountDetails priceProblemCountDetails = (PriceProblemCountDetails) o;
    return Objects.equals(this.hotelSuspendedCount, priceProblemCountDetails.hotelSuspendedCount) &&
        Objects.equals(this.priceUnusuallyHighCount, priceProblemCountDetails.priceUnusuallyHighCount) &&
        Objects.equals(this.priceUnusuallyLowCount, priceProblemCountDetails.priceUnusuallyLowCount) &&
        Objects.equals(this.taxesAndFeesMissingCount, priceProblemCountDetails.taxesAndFeesMissingCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hotelSuspendedCount, priceUnusuallyHighCount, priceUnusuallyLowCount, taxesAndFeesMissingCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PriceProblemCountDetails {\n");
    sb.append("    hotelSuspendedCount: ").append(toIndentedString(hotelSuspendedCount)).append("\n");
    sb.append("    priceUnusuallyHighCount: ").append(toIndentedString(priceUnusuallyHighCount)).append("\n");
    sb.append("    priceUnusuallyLowCount: ").append(toIndentedString(priceUnusuallyLowCount)).append("\n");
    sb.append("    taxesAndFeesMissingCount: ").append(toIndentedString(taxesAndFeesMissingCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hotelSuspendedCount");
    openapiFields.add("priceUnusuallyHighCount");
    openapiFields.add("priceUnusuallyLowCount");
    openapiFields.add("taxesAndFeesMissingCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PriceProblemCountDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PriceProblemCountDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PriceProblemCountDetails is not found in the empty JSON string", PriceProblemCountDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PriceProblemCountDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PriceProblemCountDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hotelSuspendedCount") != null && !jsonObj.get("hotelSuspendedCount").isJsonNull()) && !jsonObj.get("hotelSuspendedCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hotelSuspendedCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hotelSuspendedCount").toString()));
      }
      if ((jsonObj.get("priceUnusuallyHighCount") != null && !jsonObj.get("priceUnusuallyHighCount").isJsonNull()) && !jsonObj.get("priceUnusuallyHighCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceUnusuallyHighCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceUnusuallyHighCount").toString()));
      }
      if ((jsonObj.get("priceUnusuallyLowCount") != null && !jsonObj.get("priceUnusuallyLowCount").isJsonNull()) && !jsonObj.get("priceUnusuallyLowCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceUnusuallyLowCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceUnusuallyLowCount").toString()));
      }
      if ((jsonObj.get("taxesAndFeesMissingCount") != null && !jsonObj.get("taxesAndFeesMissingCount").isJsonNull()) && !jsonObj.get("taxesAndFeesMissingCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxesAndFeesMissingCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxesAndFeesMissingCount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PriceProblemCountDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PriceProblemCountDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PriceProblemCountDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PriceProblemCountDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<PriceProblemCountDetails>() {
           @Override
           public void write(JsonWriter out, PriceProblemCountDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PriceProblemCountDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PriceProblemCountDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PriceProblemCountDetails
   * @throws IOException if the JSON string is invalid with respect to PriceProblemCountDetails
   */
  public static PriceProblemCountDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PriceProblemCountDetails.class);
  }

  /**
   * Convert an instance of PriceProblemCountDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

