/*
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details on a data issue in the listing.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:52.320664-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataIssueDetail {
  /**
   * The severity of the data issue.
   */
  @JsonAdapter(DataIssueSeverityEnum.Adapter.class)
  public enum DataIssueSeverityEnum {
    DATA_ISSUE_SEVERITY_UNSPECIFIED("DATA_ISSUE_SEVERITY_UNSPECIFIED"),
    
    ERROR("ERROR"),
    
    WARNING("WARNING"),
    
    INFO("INFO");

    private String value;

    DataIssueSeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataIssueSeverityEnum fromValue(String value) {
      for (DataIssueSeverityEnum b : DataIssueSeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataIssueSeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataIssueSeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataIssueSeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataIssueSeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataIssueSeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_ISSUE_SEVERITY = "dataIssueSeverity";
  @SerializedName(SERIALIZED_NAME_DATA_ISSUE_SEVERITY)
  private DataIssueSeverityEnum dataIssueSeverity;

  /**
   * The type of the data issue.
   */
  @JsonAdapter(DataIssueTypeEnum.Adapter.class)
  public enum DataIssueTypeEnum {
    FEED_DATA_ISSUE_UNSPECIFIED("FEED_DATA_ISSUE_UNSPECIFIED"),
    
    FEED_DATA_ISSUE_UNKNOWN("FEED_DATA_ISSUE_UNKNOWN"),
    
    NO_DATA_ISSUE("NO_DATA_ISSUE"),
    
    DUPLICATE_ADDRESS("DUPLICATE_ADDRESS"),
    
    MISSING_PHYSICAL_STREET_ADDRESS("MISSING_PHYSICAL_STREET_ADDRESS"),
    
    MISSING_STREET_NAME("MISSING_STREET_NAME"),
    
    MISSING_STREET_NUMBER("MISSING_STREET_NUMBER"),
    
    MISSING_ADDRESS("MISSING_ADDRESS"),
    
    MISSING_COUNTRY("MISSING_COUNTRY"),
    
    INVALID_POSTAL_CODE("INVALID_POSTAL_CODE"),
    
    INVALID_POSTAL_CODE_SUFFIX("INVALID_POSTAL_CODE_SUFFIX"),
    
    UNEXPECTED_POSTAL_CODE_SUFFIX("UNEXPECTED_POSTAL_CODE_SUFFIX"),
    
    UNEXPECTED_POSTAL_CODE("UNEXPECTED_POSTAL_CODE"),
    
    INVALID_AMENITIES("INVALID_AMENITIES"),
    
    INVALID_EMAIL_ADDRESS("INVALID_EMAIL_ADDRESS"),
    
    DUPLICATE_LATLONG("DUPLICATE_LATLONG"),
    
    LATLONG_INCONSISTENT_WITH_ADDRESS("LATLONG_INCONSISTENT_WITH_ADDRESS"),
    
    MISSING_LATLONG("MISSING_LATLONG"),
    
    COULD_NOT_GEOCODE("COULD_NOT_GEOCODE"),
    
    MISSING_HOTEL_NAME("MISSING_HOTEL_NAME"),
    
    HOTEL_NAME_EMPTY("HOTEL_NAME_EMPTY"),
    
    INVALID_HOTEL_NAME("INVALID_HOTEL_NAME"),
    
    HOTEL_NAME_TOO_LONG("HOTEL_NAME_TOO_LONG"),
    
    PARSE_ERROR_IN_XML("PARSE_ERROR_IN_XML"),
    
    UNEXPECTED_ATTRIBUTE_IN_XML("UNEXPECTED_ATTRIBUTE_IN_XML"),
    
    DUPLICATE_PHONE_NUMBER("DUPLICATE_PHONE_NUMBER"),
    
    MISSING_PHONE_NUMBER("MISSING_PHONE_NUMBER"),
    
    MISSING_VOICE_PHONE_NUMBER("MISSING_VOICE_PHONE_NUMBER"),
    
    INVALID_PHONE_NUMBER_FORMAT("INVALID_PHONE_NUMBER_FORMAT"),
    
    INVALID_PHONE_NUMBER("INVALID_PHONE_NUMBER"),
    
    INVALID_PHONE_NUMBER_COUNTRY_CODE("INVALID_PHONE_NUMBER_COUNTRY_CODE"),
    
    PHONE_NUMBER_TOO_LONG("PHONE_NUMBER_TOO_LONG"),
    
    PHONE_NUMBER_TOO_SHORT("PHONE_NUMBER_TOO_SHORT"),
    
    INVALID_WEBSITE_URL("INVALID_WEBSITE_URL"),
    
    ADWORDS_ATTRIBUTE_TOO_LONG("ADWORDS_ATTRIBUTE_TOO_LONG"),
    
    BRAND_NOT_ALLOWED("BRAND_NOT_ALLOWED"),
    
    FLAGGED_DUE_TO_SUSPICIOUS_METADATA("FLAGGED_DUE_TO_SUSPICIOUS_METADATA"),
    
    NOT_ENOUGH_IMAGES_PROVIDED("NOT_ENOUGH_IMAGES_PROVIDED"),
    
    IMAGE_PROCESSING_IN_PROGRESS("IMAGE_PROCESSING_IN_PROGRESS"),
    
    CANNOT_FETCH_IMAGES("CANNOT_FETCH_IMAGES"),
    
    INCOMPATIBLE_IMAGE_SIZE_OR_LOW_QUALITY("INCOMPATIBLE_IMAGE_SIZE_OR_LOW_QUALITY"),
    
    MISSING_LANG_IN_RAW_LISTING("MISSING_LANG_IN_RAW_LISTING"),
    
    IS_HOTEL("IS_HOTEL"),
    
    MISSING_REQ_ATTR("MISSING_REQ_ATTR"),
    
    MISSING_NAME("MISSING_NAME"),
    
    MISSING_LANG_IN_NAME("MISSING_LANG_IN_NAME"),
    
    VR_NAME_TOO_LONG("VR_NAME_TOO_LONG"),
    
    TEST_PROPERTY("TEST_PROPERTY"),
    
    NON_VR_ACCOMMODATION_TYPE_BASED_ON_LISTING_NAME("NON_VR_ACCOMMODATION_TYPE_BASED_ON_LISTING_NAME"),
    
    BRAND_NAME_TOO_LONG("BRAND_NAME_TOO_LONG"),
    
    MISSING_BRAND_NAME("MISSING_BRAND_NAME"),
    
    INVALID_REVIEW_RATING("INVALID_REVIEW_RATING"),
    
    INVALID_CHECKIN_FORMAT("INVALID_CHECKIN_FORMAT"),
    
    INVALID_CHECKOUT_FORMAT("INVALID_CHECKOUT_FORMAT");

    private String value;

    DataIssueTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataIssueTypeEnum fromValue(String value) {
      for (DataIssueTypeEnum b : DataIssueTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataIssueTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataIssueTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataIssueTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataIssueTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataIssueTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_ISSUE_TYPE = "dataIssueType";
  @SerializedName(SERIALIZED_NAME_DATA_ISSUE_TYPE)
  private DataIssueTypeEnum dataIssueType;

  public static final String SERIALIZED_NAME_IS_SELF_RESOLVING = "isSelfResolving";
  @SerializedName(SERIALIZED_NAME_IS_SELF_RESOLVING)
  private Boolean isSelfResolving;

  public DataIssueDetail() {
  }

  public DataIssueDetail dataIssueSeverity(DataIssueSeverityEnum dataIssueSeverity) {
    this.dataIssueSeverity = dataIssueSeverity;
    return this;
  }

  /**
   * The severity of the data issue.
   * @return dataIssueSeverity
   */
  @javax.annotation.Nullable
  public DataIssueSeverityEnum getDataIssueSeverity() {
    return dataIssueSeverity;
  }

  public void setDataIssueSeverity(DataIssueSeverityEnum dataIssueSeverity) {
    this.dataIssueSeverity = dataIssueSeverity;
  }


  public DataIssueDetail dataIssueType(DataIssueTypeEnum dataIssueType) {
    this.dataIssueType = dataIssueType;
    return this;
  }

  /**
   * The type of the data issue.
   * @return dataIssueType
   */
  @javax.annotation.Nullable
  public DataIssueTypeEnum getDataIssueType() {
    return dataIssueType;
  }

  public void setDataIssueType(DataIssueTypeEnum dataIssueType) {
    this.dataIssueType = dataIssueType;
  }


  public DataIssueDetail isSelfResolving(Boolean isSelfResolving) {
    this.isSelfResolving = isSelfResolving;
    return this;
  }

  /**
   * Whether or not the issue is self-resolving. If true, the issue is expected to resolve itself. If false or not set, action is needed to resolve the issue. Refer to documentation on the data issueâ€™s type for further information.
   * @return isSelfResolving
   */
  @javax.annotation.Nullable
  public Boolean getIsSelfResolving() {
    return isSelfResolving;
  }

  public void setIsSelfResolving(Boolean isSelfResolving) {
    this.isSelfResolving = isSelfResolving;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataIssueDetail dataIssueDetail = (DataIssueDetail) o;
    return Objects.equals(this.dataIssueSeverity, dataIssueDetail.dataIssueSeverity) &&
        Objects.equals(this.dataIssueType, dataIssueDetail.dataIssueType) &&
        Objects.equals(this.isSelfResolving, dataIssueDetail.isSelfResolving);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataIssueSeverity, dataIssueType, isSelfResolving);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataIssueDetail {\n");
    sb.append("    dataIssueSeverity: ").append(toIndentedString(dataIssueSeverity)).append("\n");
    sb.append("    dataIssueType: ").append(toIndentedString(dataIssueType)).append("\n");
    sb.append("    isSelfResolving: ").append(toIndentedString(isSelfResolving)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataIssueSeverity");
    openapiFields.add("dataIssueType");
    openapiFields.add("isSelfResolving");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataIssueDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataIssueDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataIssueDetail is not found in the empty JSON string", DataIssueDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataIssueDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataIssueDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataIssueSeverity") != null && !jsonObj.get("dataIssueSeverity").isJsonNull()) && !jsonObj.get("dataIssueSeverity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataIssueSeverity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataIssueSeverity").toString()));
      }
      // validate the optional field `dataIssueSeverity`
      if (jsonObj.get("dataIssueSeverity") != null && !jsonObj.get("dataIssueSeverity").isJsonNull()) {
        DataIssueSeverityEnum.validateJsonElement(jsonObj.get("dataIssueSeverity"));
      }
      if ((jsonObj.get("dataIssueType") != null && !jsonObj.get("dataIssueType").isJsonNull()) && !jsonObj.get("dataIssueType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataIssueType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataIssueType").toString()));
      }
      // validate the optional field `dataIssueType`
      if (jsonObj.get("dataIssueType") != null && !jsonObj.get("dataIssueType").isJsonNull()) {
        DataIssueTypeEnum.validateJsonElement(jsonObj.get("dataIssueType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataIssueDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataIssueDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataIssueDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataIssueDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<DataIssueDetail>() {
           @Override
           public void write(JsonWriter out, DataIssueDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataIssueDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataIssueDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataIssueDetail
   * @throws IOException if the JSON string is invalid with respect to DataIssueDetail
   */
  public static DataIssueDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataIssueDetail.class);
  }

  /**
   * Convert an instance of DataIssueDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

