/*
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Rating;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single review in a VR Listing. NEXT ID: 10
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:52.320664-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Review {
  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private String author;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private List<Rating> rating = new ArrayList<>();

  public static final String SERIALIZED_NAME_REVIEW_TIME = "reviewTime";
  @SerializedName(SERIALIZED_NAME_REVIEW_TIME)
  private String reviewTime;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  /**
   * The type of the review.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    UNKNOWN("UNKNOWN"),
    
    EDITORIAL("EDITORIAL"),
    
    USER("USER");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VISIT_TIME = "visitTime";
  @SerializedName(SERIALIZED_NAME_VISIT_TIME)
  private String visitTime;

  public Review() {
  }

  public Review author(String author) {
    this.author = author;
    return this;
  }

  /**
   * The author of the review.
   * @return author
   */
  @javax.annotation.Nullable
  public String getAuthor() {
    return author;
  }

  public void setAuthor(String author) {
    this.author = author;
  }


  public Review body(String body) {
    this.body = body;
    return this;
  }

  /**
   * The body of the review.
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public Review languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Language of the review, such as \&quot;en\&quot;, \&quot;de\&quot;, etc.
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public Review link(String link) {
    this.link = link;
    return this;
  }

  /**
   * The url of the review.
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public Review rating(List<Rating> rating) {
    this.rating = rating;
    return this;
  }

  public Review addRatingItem(Rating ratingItem) {
    if (this.rating == null) {
      this.rating = new ArrayList<>();
    }
    this.rating.add(ratingItem);
    return this;
  }

  /**
   * Any ratings associated with this review. This is repeated because reviews can include ratings on different aspects of a listing, e.g. location, cleanliness, etc.
   * @return rating
   */
  @javax.annotation.Nullable
  public List<Rating> getRating() {
    return rating;
  }

  public void setRating(List<Rating> rating) {
    this.rating = rating;
  }


  public Review reviewTime(String reviewTime) {
    this.reviewTime = reviewTime;
    return this;
  }

  /**
   * Unix timestamp (in seconds) of the review, in UTC+0.
   * @return reviewTime
   */
  @javax.annotation.Nullable
  public String getReviewTime() {
    return reviewTime;
  }

  public void setReviewTime(String reviewTime) {
    this.reviewTime = reviewTime;
  }


  public Review title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the review, for example: Great three bedrooms.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Review type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the review.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Review visitTime(String visitTime) {
    this.visitTime = visitTime;
    return this;
  }

  /**
   * Unix timestamp (in seconds) of when the stay was, in UTC+0.
   * @return visitTime
   */
  @javax.annotation.Nullable
  public String getVisitTime() {
    return visitTime;
  }

  public void setVisitTime(String visitTime) {
    this.visitTime = visitTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Review review = (Review) o;
    return Objects.equals(this.author, review.author) &&
        Objects.equals(this.body, review.body) &&
        Objects.equals(this.languageCode, review.languageCode) &&
        Objects.equals(this.link, review.link) &&
        Objects.equals(this.rating, review.rating) &&
        Objects.equals(this.reviewTime, review.reviewTime) &&
        Objects.equals(this.title, review.title) &&
        Objects.equals(this.type, review.type) &&
        Objects.equals(this.visitTime, review.visitTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(author, body, languageCode, link, rating, reviewTime, title, type, visitTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Review {\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    reviewTime: ").append(toIndentedString(reviewTime)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    visitTime: ").append(toIndentedString(visitTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("author");
    openapiFields.add("body");
    openapiFields.add("languageCode");
    openapiFields.add("link");
    openapiFields.add("rating");
    openapiFields.add("reviewTime");
    openapiFields.add("title");
    openapiFields.add("type");
    openapiFields.add("visitTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Review
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Review.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Review is not found in the empty JSON string", Review.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Review.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Review` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) && !jsonObj.get("author").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author").toString()));
      }
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("languageCode") != null && !jsonObj.get("languageCode").isJsonNull()) && !jsonObj.get("languageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCode").toString()));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if (jsonObj.get("rating") != null && !jsonObj.get("rating").isJsonNull()) {
        JsonArray jsonArrayrating = jsonObj.getAsJsonArray("rating");
        if (jsonArrayrating != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rating").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rating` to be an array in the JSON string but got `%s`", jsonObj.get("rating").toString()));
          }

          // validate the optional field `rating` (array)
          for (int i = 0; i < jsonArrayrating.size(); i++) {
            Rating.validateJsonElement(jsonArrayrating.get(i));
          };
        }
      }
      if ((jsonObj.get("reviewTime") != null && !jsonObj.get("reviewTime").isJsonNull()) && !jsonObj.get("reviewTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reviewTime").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("visitTime") != null && !jsonObj.get("visitTime").isJsonNull()) && !jsonObj.get("visitTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visitTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visitTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Review.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Review' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Review> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Review.class));

       return (TypeAdapter<T>) new TypeAdapter<Review>() {
           @Override
           public void write(JsonWriter out, Review value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Review read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Review given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Review
   * @throws IOException if the JSON string is invalid with respect to Review
   */
  public static Review fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Review.class);
  }

  /**
   * Convert an instance of Review to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

