/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBrand.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBrand::OAIBrand(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBrand::OAIBrand() {
    this->initializeModel();
}

OAIBrand::~OAIBrand() {}

void OAIBrand::initializeModel() {

    m_active_display_names_isSet = false;
    m_active_display_names_isValid = false;

    m_active_icon_isSet = false;
    m_active_icon_isValid = false;

    m_active_icon_uri_isSet = false;
    m_active_icon_uri_isValid = false;

    m_display_name_disapproval_reason_isSet = false;
    m_display_name_disapproval_reason_isValid = false;

    m_display_name_state_isSet = false;
    m_display_name_state_isValid = false;

    m_display_names_isSet = false;
    m_display_names_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_icon_disapproval_reasons_isSet = false;
    m_icon_disapproval_reasons_isValid = false;

    m_icon_state_isSet = false;
    m_icon_state_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_property_count_isSet = false;
    m_property_count_isValid = false;

    m_submitted_display_names_isSet = false;
    m_submitted_display_names_isValid = false;

    m_submitted_icon_isSet = false;
    m_submitted_icon_isValid = false;
}

void OAIBrand::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBrand::fromJsonObject(QJsonObject json) {

    m_active_display_names_isValid = ::OpenAPI::fromJsonValue(m_active_display_names, json[QString("activeDisplayNames")]);
    m_active_display_names_isSet = !json[QString("activeDisplayNames")].isNull() && m_active_display_names_isValid;

    m_active_icon_isValid = ::OpenAPI::fromJsonValue(m_active_icon, json[QString("activeIcon")]);
    m_active_icon_isSet = !json[QString("activeIcon")].isNull() && m_active_icon_isValid;

    m_active_icon_uri_isValid = ::OpenAPI::fromJsonValue(m_active_icon_uri, json[QString("activeIconUri")]);
    m_active_icon_uri_isSet = !json[QString("activeIconUri")].isNull() && m_active_icon_uri_isValid;

    m_display_name_disapproval_reason_isValid = ::OpenAPI::fromJsonValue(m_display_name_disapproval_reason, json[QString("displayNameDisapprovalReason")]);
    m_display_name_disapproval_reason_isSet = !json[QString("displayNameDisapprovalReason")].isNull() && m_display_name_disapproval_reason_isValid;

    m_display_name_state_isValid = ::OpenAPI::fromJsonValue(m_display_name_state, json[QString("displayNameState")]);
    m_display_name_state_isSet = !json[QString("displayNameState")].isNull() && m_display_name_state_isValid;

    m_display_names_isValid = ::OpenAPI::fromJsonValue(m_display_names, json[QString("displayNames")]);
    m_display_names_isSet = !json[QString("displayNames")].isNull() && m_display_names_isValid;

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("icon")]);
    m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;

    m_icon_disapproval_reasons_isValid = ::OpenAPI::fromJsonValue(m_icon_disapproval_reasons, json[QString("iconDisapprovalReasons")]);
    m_icon_disapproval_reasons_isSet = !json[QString("iconDisapprovalReasons")].isNull() && m_icon_disapproval_reasons_isValid;

    m_icon_state_isValid = ::OpenAPI::fromJsonValue(m_icon_state, json[QString("iconState")]);
    m_icon_state_isSet = !json[QString("iconState")].isNull() && m_icon_state_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_property_count_isValid = ::OpenAPI::fromJsonValue(m_property_count, json[QString("propertyCount")]);
    m_property_count_isSet = !json[QString("propertyCount")].isNull() && m_property_count_isValid;

    m_submitted_display_names_isValid = ::OpenAPI::fromJsonValue(m_submitted_display_names, json[QString("submittedDisplayNames")]);
    m_submitted_display_names_isSet = !json[QString("submittedDisplayNames")].isNull() && m_submitted_display_names_isValid;

    m_submitted_icon_isValid = ::OpenAPI::fromJsonValue(m_submitted_icon, json[QString("submittedIcon")]);
    m_submitted_icon_isSet = !json[QString("submittedIcon")].isNull() && m_submitted_icon_isValid;
}

QString OAIBrand::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBrand::asJsonObject() const {
    QJsonObject obj;
    if (m_active_display_names.size() > 0) {
        obj.insert(QString("activeDisplayNames"), ::OpenAPI::toJsonValue(m_active_display_names));
    }
    if (m_active_icon_isSet) {
        obj.insert(QString("activeIcon"), ::OpenAPI::toJsonValue(m_active_icon));
    }
    if (m_active_icon_uri_isSet) {
        obj.insert(QString("activeIconUri"), ::OpenAPI::toJsonValue(m_active_icon_uri));
    }
    if (m_display_name_disapproval_reason.size() > 0) {
        obj.insert(QString("displayNameDisapprovalReason"), ::OpenAPI::toJsonValue(m_display_name_disapproval_reason));
    }
    if (m_display_name_state_isSet) {
        obj.insert(QString("displayNameState"), ::OpenAPI::toJsonValue(m_display_name_state));
    }
    if (m_display_names.size() > 0) {
        obj.insert(QString("displayNames"), ::OpenAPI::toJsonValue(m_display_names));
    }
    if (m_icon_isSet) {
        obj.insert(QString("icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_icon_disapproval_reasons.size() > 0) {
        obj.insert(QString("iconDisapprovalReasons"), ::OpenAPI::toJsonValue(m_icon_disapproval_reasons));
    }
    if (m_icon_state_isSet) {
        obj.insert(QString("iconState"), ::OpenAPI::toJsonValue(m_icon_state));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_property_count_isSet) {
        obj.insert(QString("propertyCount"), ::OpenAPI::toJsonValue(m_property_count));
    }
    if (m_submitted_display_names.size() > 0) {
        obj.insert(QString("submittedDisplayNames"), ::OpenAPI::toJsonValue(m_submitted_display_names));
    }
    if (m_submitted_icon_isSet) {
        obj.insert(QString("submittedIcon"), ::OpenAPI::toJsonValue(m_submitted_icon));
    }
    return obj;
}

QList<OAILocalizedText> OAIBrand::getActiveDisplayNames() const {
    return m_active_display_names;
}
void OAIBrand::setActiveDisplayNames(const QList<OAILocalizedText> &active_display_names) {
    m_active_display_names = active_display_names;
    m_active_display_names_isSet = true;
}

bool OAIBrand::is_active_display_names_Set() const{
    return m_active_display_names_isSet;
}

bool OAIBrand::is_active_display_names_Valid() const{
    return m_active_display_names_isValid;
}

QString OAIBrand::getActiveIcon() const {
    return m_active_icon;
}
void OAIBrand::setActiveIcon(const QString &active_icon) {
    m_active_icon = active_icon;
    m_active_icon_isSet = true;
}

bool OAIBrand::is_active_icon_Set() const{
    return m_active_icon_isSet;
}

bool OAIBrand::is_active_icon_Valid() const{
    return m_active_icon_isValid;
}

QString OAIBrand::getActiveIconUri() const {
    return m_active_icon_uri;
}
void OAIBrand::setActiveIconUri(const QString &active_icon_uri) {
    m_active_icon_uri = active_icon_uri;
    m_active_icon_uri_isSet = true;
}

bool OAIBrand::is_active_icon_uri_Set() const{
    return m_active_icon_uri_isSet;
}

bool OAIBrand::is_active_icon_uri_Valid() const{
    return m_active_icon_uri_isValid;
}

QList<OAIDisplayNameDisapprovalReason> OAIBrand::getDisplayNameDisapprovalReason() const {
    return m_display_name_disapproval_reason;
}
void OAIBrand::setDisplayNameDisapprovalReason(const QList<OAIDisplayNameDisapprovalReason> &display_name_disapproval_reason) {
    m_display_name_disapproval_reason = display_name_disapproval_reason;
    m_display_name_disapproval_reason_isSet = true;
}

bool OAIBrand::is_display_name_disapproval_reason_Set() const{
    return m_display_name_disapproval_reason_isSet;
}

bool OAIBrand::is_display_name_disapproval_reason_Valid() const{
    return m_display_name_disapproval_reason_isValid;
}

QString OAIBrand::getDisplayNameState() const {
    return m_display_name_state;
}
void OAIBrand::setDisplayNameState(const QString &display_name_state) {
    m_display_name_state = display_name_state;
    m_display_name_state_isSet = true;
}

bool OAIBrand::is_display_name_state_Set() const{
    return m_display_name_state_isSet;
}

bool OAIBrand::is_display_name_state_Valid() const{
    return m_display_name_state_isValid;
}

QList<OAILocalizedText> OAIBrand::getDisplayNames() const {
    return m_display_names;
}
void OAIBrand::setDisplayNames(const QList<OAILocalizedText> &display_names) {
    m_display_names = display_names;
    m_display_names_isSet = true;
}

bool OAIBrand::is_display_names_Set() const{
    return m_display_names_isSet;
}

bool OAIBrand::is_display_names_Valid() const{
    return m_display_names_isValid;
}

QString OAIBrand::getIcon() const {
    return m_icon;
}
void OAIBrand::setIcon(const QString &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAIBrand::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAIBrand::is_icon_Valid() const{
    return m_icon_isValid;
}

QList<QString> OAIBrand::getIconDisapprovalReasons() const {
    return m_icon_disapproval_reasons;
}
void OAIBrand::setIconDisapprovalReasons(const QList<QString> &icon_disapproval_reasons) {
    m_icon_disapproval_reasons = icon_disapproval_reasons;
    m_icon_disapproval_reasons_isSet = true;
}

bool OAIBrand::is_icon_disapproval_reasons_Set() const{
    return m_icon_disapproval_reasons_isSet;
}

bool OAIBrand::is_icon_disapproval_reasons_Valid() const{
    return m_icon_disapproval_reasons_isValid;
}

QString OAIBrand::getIconState() const {
    return m_icon_state;
}
void OAIBrand::setIconState(const QString &icon_state) {
    m_icon_state = icon_state;
    m_icon_state_isSet = true;
}

bool OAIBrand::is_icon_state_Set() const{
    return m_icon_state_isSet;
}

bool OAIBrand::is_icon_state_Valid() const{
    return m_icon_state_isValid;
}

QString OAIBrand::getName() const {
    return m_name;
}
void OAIBrand::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBrand::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBrand::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIBrand::getPropertyCount() const {
    return m_property_count;
}
void OAIBrand::setPropertyCount(const QString &property_count) {
    m_property_count = property_count;
    m_property_count_isSet = true;
}

bool OAIBrand::is_property_count_Set() const{
    return m_property_count_isSet;
}

bool OAIBrand::is_property_count_Valid() const{
    return m_property_count_isValid;
}

QList<OAILocalizedText> OAIBrand::getSubmittedDisplayNames() const {
    return m_submitted_display_names;
}
void OAIBrand::setSubmittedDisplayNames(const QList<OAILocalizedText> &submitted_display_names) {
    m_submitted_display_names = submitted_display_names;
    m_submitted_display_names_isSet = true;
}

bool OAIBrand::is_submitted_display_names_Set() const{
    return m_submitted_display_names_isSet;
}

bool OAIBrand::is_submitted_display_names_Valid() const{
    return m_submitted_display_names_isValid;
}

QString OAIBrand::getSubmittedIcon() const {
    return m_submitted_icon;
}
void OAIBrand::setSubmittedIcon(const QString &submitted_icon) {
    m_submitted_icon = submitted_icon;
    m_submitted_icon_isSet = true;
}

bool OAIBrand::is_submitted_icon_Set() const{
    return m_submitted_icon_isSet;
}

bool OAIBrand::is_submitted_icon_Valid() const{
    return m_submitted_icon_isValid;
}

bool OAIBrand::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_display_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_icon_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_disapproval_reason.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_disapproval_reasons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submitted_display_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_submitted_icon_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBrand::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
