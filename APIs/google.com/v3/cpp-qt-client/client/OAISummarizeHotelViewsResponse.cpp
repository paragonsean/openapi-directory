/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISummarizeHotelViewsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISummarizeHotelViewsResponse::OAISummarizeHotelViewsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISummarizeHotelViewsResponse::OAISummarizeHotelViewsResponse() {
    this->initializeModel();
}

OAISummarizeHotelViewsResponse::~OAISummarizeHotelViewsResponse() {}

void OAISummarizeHotelViewsResponse::initializeModel() {

    m_last_feed_submission_time_isSet = false;
    m_last_feed_submission_time_isValid = false;

    m_last_manifest_update_time_isSet = false;
    m_last_manifest_update_time_isValid = false;

    m_live_on_google_property_count_isSet = false;
    m_live_on_google_property_count_isValid = false;

    m_matched_property_count_isSet = false;
    m_matched_property_count_isValid = false;

    m_overclustered_property_count_isSet = false;
    m_overclustered_property_count_isValid = false;

    m_overclustered_property_with_errors_count_isSet = false;
    m_overclustered_property_with_errors_count_isValid = false;

    m_unmatched_property_count_isSet = false;
    m_unmatched_property_count_isValid = false;

    m_unmatched_property_with_errors_count_isSet = false;
    m_unmatched_property_with_errors_count_isValid = false;
}

void OAISummarizeHotelViewsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISummarizeHotelViewsResponse::fromJsonObject(QJsonObject json) {

    m_last_feed_submission_time_isValid = ::OpenAPI::fromJsonValue(m_last_feed_submission_time, json[QString("lastFeedSubmissionTime")]);
    m_last_feed_submission_time_isSet = !json[QString("lastFeedSubmissionTime")].isNull() && m_last_feed_submission_time_isValid;

    m_last_manifest_update_time_isValid = ::OpenAPI::fromJsonValue(m_last_manifest_update_time, json[QString("lastManifestUpdateTime")]);
    m_last_manifest_update_time_isSet = !json[QString("lastManifestUpdateTime")].isNull() && m_last_manifest_update_time_isValid;

    m_live_on_google_property_count_isValid = ::OpenAPI::fromJsonValue(m_live_on_google_property_count, json[QString("liveOnGooglePropertyCount")]);
    m_live_on_google_property_count_isSet = !json[QString("liveOnGooglePropertyCount")].isNull() && m_live_on_google_property_count_isValid;

    m_matched_property_count_isValid = ::OpenAPI::fromJsonValue(m_matched_property_count, json[QString("matchedPropertyCount")]);
    m_matched_property_count_isSet = !json[QString("matchedPropertyCount")].isNull() && m_matched_property_count_isValid;

    m_overclustered_property_count_isValid = ::OpenAPI::fromJsonValue(m_overclustered_property_count, json[QString("overclusteredPropertyCount")]);
    m_overclustered_property_count_isSet = !json[QString("overclusteredPropertyCount")].isNull() && m_overclustered_property_count_isValid;

    m_overclustered_property_with_errors_count_isValid = ::OpenAPI::fromJsonValue(m_overclustered_property_with_errors_count, json[QString("overclusteredPropertyWithErrorsCount")]);
    m_overclustered_property_with_errors_count_isSet = !json[QString("overclusteredPropertyWithErrorsCount")].isNull() && m_overclustered_property_with_errors_count_isValid;

    m_unmatched_property_count_isValid = ::OpenAPI::fromJsonValue(m_unmatched_property_count, json[QString("unmatchedPropertyCount")]);
    m_unmatched_property_count_isSet = !json[QString("unmatchedPropertyCount")].isNull() && m_unmatched_property_count_isValid;

    m_unmatched_property_with_errors_count_isValid = ::OpenAPI::fromJsonValue(m_unmatched_property_with_errors_count, json[QString("unmatchedPropertyWithErrorsCount")]);
    m_unmatched_property_with_errors_count_isSet = !json[QString("unmatchedPropertyWithErrorsCount")].isNull() && m_unmatched_property_with_errors_count_isValid;
}

QString OAISummarizeHotelViewsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISummarizeHotelViewsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_last_feed_submission_time_isSet) {
        obj.insert(QString("lastFeedSubmissionTime"), ::OpenAPI::toJsonValue(m_last_feed_submission_time));
    }
    if (m_last_manifest_update_time_isSet) {
        obj.insert(QString("lastManifestUpdateTime"), ::OpenAPI::toJsonValue(m_last_manifest_update_time));
    }
    if (m_live_on_google_property_count_isSet) {
        obj.insert(QString("liveOnGooglePropertyCount"), ::OpenAPI::toJsonValue(m_live_on_google_property_count));
    }
    if (m_matched_property_count_isSet) {
        obj.insert(QString("matchedPropertyCount"), ::OpenAPI::toJsonValue(m_matched_property_count));
    }
    if (m_overclustered_property_count_isSet) {
        obj.insert(QString("overclusteredPropertyCount"), ::OpenAPI::toJsonValue(m_overclustered_property_count));
    }
    if (m_overclustered_property_with_errors_count_isSet) {
        obj.insert(QString("overclusteredPropertyWithErrorsCount"), ::OpenAPI::toJsonValue(m_overclustered_property_with_errors_count));
    }
    if (m_unmatched_property_count_isSet) {
        obj.insert(QString("unmatchedPropertyCount"), ::OpenAPI::toJsonValue(m_unmatched_property_count));
    }
    if (m_unmatched_property_with_errors_count_isSet) {
        obj.insert(QString("unmatchedPropertyWithErrorsCount"), ::OpenAPI::toJsonValue(m_unmatched_property_with_errors_count));
    }
    return obj;
}

QString OAISummarizeHotelViewsResponse::getLastFeedSubmissionTime() const {
    return m_last_feed_submission_time;
}
void OAISummarizeHotelViewsResponse::setLastFeedSubmissionTime(const QString &last_feed_submission_time) {
    m_last_feed_submission_time = last_feed_submission_time;
    m_last_feed_submission_time_isSet = true;
}

bool OAISummarizeHotelViewsResponse::is_last_feed_submission_time_Set() const{
    return m_last_feed_submission_time_isSet;
}

bool OAISummarizeHotelViewsResponse::is_last_feed_submission_time_Valid() const{
    return m_last_feed_submission_time_isValid;
}

QString OAISummarizeHotelViewsResponse::getLastManifestUpdateTime() const {
    return m_last_manifest_update_time;
}
void OAISummarizeHotelViewsResponse::setLastManifestUpdateTime(const QString &last_manifest_update_time) {
    m_last_manifest_update_time = last_manifest_update_time;
    m_last_manifest_update_time_isSet = true;
}

bool OAISummarizeHotelViewsResponse::is_last_manifest_update_time_Set() const{
    return m_last_manifest_update_time_isSet;
}

bool OAISummarizeHotelViewsResponse::is_last_manifest_update_time_Valid() const{
    return m_last_manifest_update_time_isValid;
}

QString OAISummarizeHotelViewsResponse::getLiveOnGooglePropertyCount() const {
    return m_live_on_google_property_count;
}
void OAISummarizeHotelViewsResponse::setLiveOnGooglePropertyCount(const QString &live_on_google_property_count) {
    m_live_on_google_property_count = live_on_google_property_count;
    m_live_on_google_property_count_isSet = true;
}

bool OAISummarizeHotelViewsResponse::is_live_on_google_property_count_Set() const{
    return m_live_on_google_property_count_isSet;
}

bool OAISummarizeHotelViewsResponse::is_live_on_google_property_count_Valid() const{
    return m_live_on_google_property_count_isValid;
}

QString OAISummarizeHotelViewsResponse::getMatchedPropertyCount() const {
    return m_matched_property_count;
}
void OAISummarizeHotelViewsResponse::setMatchedPropertyCount(const QString &matched_property_count) {
    m_matched_property_count = matched_property_count;
    m_matched_property_count_isSet = true;
}

bool OAISummarizeHotelViewsResponse::is_matched_property_count_Set() const{
    return m_matched_property_count_isSet;
}

bool OAISummarizeHotelViewsResponse::is_matched_property_count_Valid() const{
    return m_matched_property_count_isValid;
}

QString OAISummarizeHotelViewsResponse::getOverclusteredPropertyCount() const {
    return m_overclustered_property_count;
}
void OAISummarizeHotelViewsResponse::setOverclusteredPropertyCount(const QString &overclustered_property_count) {
    m_overclustered_property_count = overclustered_property_count;
    m_overclustered_property_count_isSet = true;
}

bool OAISummarizeHotelViewsResponse::is_overclustered_property_count_Set() const{
    return m_overclustered_property_count_isSet;
}

bool OAISummarizeHotelViewsResponse::is_overclustered_property_count_Valid() const{
    return m_overclustered_property_count_isValid;
}

QString OAISummarizeHotelViewsResponse::getOverclusteredPropertyWithErrorsCount() const {
    return m_overclustered_property_with_errors_count;
}
void OAISummarizeHotelViewsResponse::setOverclusteredPropertyWithErrorsCount(const QString &overclustered_property_with_errors_count) {
    m_overclustered_property_with_errors_count = overclustered_property_with_errors_count;
    m_overclustered_property_with_errors_count_isSet = true;
}

bool OAISummarizeHotelViewsResponse::is_overclustered_property_with_errors_count_Set() const{
    return m_overclustered_property_with_errors_count_isSet;
}

bool OAISummarizeHotelViewsResponse::is_overclustered_property_with_errors_count_Valid() const{
    return m_overclustered_property_with_errors_count_isValid;
}

QString OAISummarizeHotelViewsResponse::getUnmatchedPropertyCount() const {
    return m_unmatched_property_count;
}
void OAISummarizeHotelViewsResponse::setUnmatchedPropertyCount(const QString &unmatched_property_count) {
    m_unmatched_property_count = unmatched_property_count;
    m_unmatched_property_count_isSet = true;
}

bool OAISummarizeHotelViewsResponse::is_unmatched_property_count_Set() const{
    return m_unmatched_property_count_isSet;
}

bool OAISummarizeHotelViewsResponse::is_unmatched_property_count_Valid() const{
    return m_unmatched_property_count_isValid;
}

QString OAISummarizeHotelViewsResponse::getUnmatchedPropertyWithErrorsCount() const {
    return m_unmatched_property_with_errors_count;
}
void OAISummarizeHotelViewsResponse::setUnmatchedPropertyWithErrorsCount(const QString &unmatched_property_with_errors_count) {
    m_unmatched_property_with_errors_count = unmatched_property_with_errors_count;
    m_unmatched_property_with_errors_count_isSet = true;
}

bool OAISummarizeHotelViewsResponse::is_unmatched_property_with_errors_count_Set() const{
    return m_unmatched_property_with_errors_count_isSet;
}

bool OAISummarizeHotelViewsResponse::is_unmatched_property_with_errors_count_Valid() const{
    return m_unmatched_property_with_errors_count_isValid;
}

bool OAISummarizeHotelViewsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_last_feed_submission_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_manifest_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_on_google_property_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matched_property_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overclustered_property_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overclustered_property_with_errors_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unmatched_property_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unmatched_property_with_errors_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISummarizeHotelViewsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
