/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPriceCoverageView.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPriceCoverageView::OAIPriceCoverageView(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPriceCoverageView::OAIPriceCoverageView() {
    this->initializeModel();
}

OAIPriceCoverageView::~OAIPriceCoverageView() {}

void OAIPriceCoverageView::initializeModel() {

    m_calculation_date_isSet = false;
    m_calculation_date_isValid = false;

    m_matched_property_count_isSet = false;
    m_matched_property_count_isValid = false;

    m_price_coverage_binary_percent_isSet = false;
    m_price_coverage_binary_percent_isValid = false;

    m_price_coverage_buckets_isSet = false;
    m_price_coverage_buckets_isValid = false;

    m_price_coverage_percent_isSet = false;
    m_price_coverage_percent_isValid = false;
}

void OAIPriceCoverageView::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPriceCoverageView::fromJsonObject(QJsonObject json) {

    m_calculation_date_isValid = ::OpenAPI::fromJsonValue(m_calculation_date, json[QString("calculationDate")]);
    m_calculation_date_isSet = !json[QString("calculationDate")].isNull() && m_calculation_date_isValid;

    m_matched_property_count_isValid = ::OpenAPI::fromJsonValue(m_matched_property_count, json[QString("matchedPropertyCount")]);
    m_matched_property_count_isSet = !json[QString("matchedPropertyCount")].isNull() && m_matched_property_count_isValid;

    m_price_coverage_binary_percent_isValid = ::OpenAPI::fromJsonValue(m_price_coverage_binary_percent, json[QString("priceCoverageBinaryPercent")]);
    m_price_coverage_binary_percent_isSet = !json[QString("priceCoverageBinaryPercent")].isNull() && m_price_coverage_binary_percent_isValid;

    m_price_coverage_buckets_isValid = ::OpenAPI::fromJsonValue(m_price_coverage_buckets, json[QString("priceCoverageBuckets")]);
    m_price_coverage_buckets_isSet = !json[QString("priceCoverageBuckets")].isNull() && m_price_coverage_buckets_isValid;

    m_price_coverage_percent_isValid = ::OpenAPI::fromJsonValue(m_price_coverage_percent, json[QString("priceCoveragePercent")]);
    m_price_coverage_percent_isSet = !json[QString("priceCoveragePercent")].isNull() && m_price_coverage_percent_isValid;
}

QString OAIPriceCoverageView::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPriceCoverageView::asJsonObject() const {
    QJsonObject obj;
    if (m_calculation_date.isSet()) {
        obj.insert(QString("calculationDate"), ::OpenAPI::toJsonValue(m_calculation_date));
    }
    if (m_matched_property_count_isSet) {
        obj.insert(QString("matchedPropertyCount"), ::OpenAPI::toJsonValue(m_matched_property_count));
    }
    if (m_price_coverage_binary_percent_isSet) {
        obj.insert(QString("priceCoverageBinaryPercent"), ::OpenAPI::toJsonValue(m_price_coverage_binary_percent));
    }
    if (m_price_coverage_buckets.size() > 0) {
        obj.insert(QString("priceCoverageBuckets"), ::OpenAPI::toJsonValue(m_price_coverage_buckets));
    }
    if (m_price_coverage_percent_isSet) {
        obj.insert(QString("priceCoveragePercent"), ::OpenAPI::toJsonValue(m_price_coverage_percent));
    }
    return obj;
}

OAIDate OAIPriceCoverageView::getCalculationDate() const {
    return m_calculation_date;
}
void OAIPriceCoverageView::setCalculationDate(const OAIDate &calculation_date) {
    m_calculation_date = calculation_date;
    m_calculation_date_isSet = true;
}

bool OAIPriceCoverageView::is_calculation_date_Set() const{
    return m_calculation_date_isSet;
}

bool OAIPriceCoverageView::is_calculation_date_Valid() const{
    return m_calculation_date_isValid;
}

qint32 OAIPriceCoverageView::getMatchedPropertyCount() const {
    return m_matched_property_count;
}
void OAIPriceCoverageView::setMatchedPropertyCount(const qint32 &matched_property_count) {
    m_matched_property_count = matched_property_count;
    m_matched_property_count_isSet = true;
}

bool OAIPriceCoverageView::is_matched_property_count_Set() const{
    return m_matched_property_count_isSet;
}

bool OAIPriceCoverageView::is_matched_property_count_Valid() const{
    return m_matched_property_count_isValid;
}

double OAIPriceCoverageView::getPriceCoverageBinaryPercent() const {
    return m_price_coverage_binary_percent;
}
void OAIPriceCoverageView::setPriceCoverageBinaryPercent(const double &price_coverage_binary_percent) {
    m_price_coverage_binary_percent = price_coverage_binary_percent;
    m_price_coverage_binary_percent_isSet = true;
}

bool OAIPriceCoverageView::is_price_coverage_binary_percent_Set() const{
    return m_price_coverage_binary_percent_isSet;
}

bool OAIPriceCoverageView::is_price_coverage_binary_percent_Valid() const{
    return m_price_coverage_binary_percent_isValid;
}

QList<OAIPriceCoverageBucket> OAIPriceCoverageView::getPriceCoverageBuckets() const {
    return m_price_coverage_buckets;
}
void OAIPriceCoverageView::setPriceCoverageBuckets(const QList<OAIPriceCoverageBucket> &price_coverage_buckets) {
    m_price_coverage_buckets = price_coverage_buckets;
    m_price_coverage_buckets_isSet = true;
}

bool OAIPriceCoverageView::is_price_coverage_buckets_Set() const{
    return m_price_coverage_buckets_isSet;
}

bool OAIPriceCoverageView::is_price_coverage_buckets_Valid() const{
    return m_price_coverage_buckets_isValid;
}

double OAIPriceCoverageView::getPriceCoveragePercent() const {
    return m_price_coverage_percent;
}
void OAIPriceCoverageView::setPriceCoveragePercent(const double &price_coverage_percent) {
    m_price_coverage_percent = price_coverage_percent;
    m_price_coverage_percent_isSet = true;
}

bool OAIPriceCoverageView::is_price_coverage_percent_Set() const{
    return m_price_coverage_percent_isSet;
}

bool OAIPriceCoverageView::is_price_coverage_percent_Valid() const{
    return m_price_coverage_percent_isValid;
}

bool OAIPriceCoverageView::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calculation_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_matched_property_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_coverage_binary_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_coverage_buckets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_coverage_percent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPriceCoverageView::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
