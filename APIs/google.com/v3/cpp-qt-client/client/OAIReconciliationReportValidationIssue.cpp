/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReconciliationReportValidationIssue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReconciliationReportValidationIssue::OAIReconciliationReportValidationIssue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReconciliationReportValidationIssue::OAIReconciliationReportValidationIssue() {
    this->initializeModel();
}

OAIReconciliationReportValidationIssue::~OAIReconciliationReportValidationIssue() {}

void OAIReconciliationReportValidationIssue::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_field_name_isSet = false;
    m_field_name_isValid = false;

    m_line_num_isSet = false;
    m_line_num_isValid = false;
}

void OAIReconciliationReportValidationIssue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReconciliationReportValidationIssue::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_field_name_isValid = ::OpenAPI::fromJsonValue(m_field_name, json[QString("fieldName")]);
    m_field_name_isSet = !json[QString("fieldName")].isNull() && m_field_name_isValid;

    m_line_num_isValid = ::OpenAPI::fromJsonValue(m_line_num, json[QString("lineNum")]);
    m_line_num_isSet = !json[QString("lineNum")].isNull() && m_line_num_isValid;
}

QString OAIReconciliationReportValidationIssue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReconciliationReportValidationIssue::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_field_name_isSet) {
        obj.insert(QString("fieldName"), ::OpenAPI::toJsonValue(m_field_name));
    }
    if (m_line_num_isSet) {
        obj.insert(QString("lineNum"), ::OpenAPI::toJsonValue(m_line_num));
    }
    return obj;
}

QString OAIReconciliationReportValidationIssue::getDescription() const {
    return m_description;
}
void OAIReconciliationReportValidationIssue::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIReconciliationReportValidationIssue::is_description_Set() const{
    return m_description_isSet;
}

bool OAIReconciliationReportValidationIssue::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIReconciliationReportValidationIssue::getFieldName() const {
    return m_field_name;
}
void OAIReconciliationReportValidationIssue::setFieldName(const QString &field_name) {
    m_field_name = field_name;
    m_field_name_isSet = true;
}

bool OAIReconciliationReportValidationIssue::is_field_name_Set() const{
    return m_field_name_isSet;
}

bool OAIReconciliationReportValidationIssue::is_field_name_Valid() const{
    return m_field_name_isValid;
}

qint32 OAIReconciliationReportValidationIssue::getLineNum() const {
    return m_line_num;
}
void OAIReconciliationReportValidationIssue::setLineNum(const qint32 &line_num) {
    m_line_num = line_num;
    m_line_num_isSet = true;
}

bool OAIReconciliationReportValidationIssue::is_line_num_Set() const{
    return m_line_num_isSet;
}

bool OAIReconciliationReportValidationIssue::is_line_num_Valid() const{
    return m_line_num_isValid;
}

bool OAIReconciliationReportValidationIssue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_num_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReconciliationReportValidationIssue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
