/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateReconciliationReportResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateReconciliationReportResponse::OAICreateReconciliationReportResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateReconciliationReportResponse::OAICreateReconciliationReportResponse() {
    this->initializeModel();
}

OAICreateReconciliationReportResponse::~OAICreateReconciliationReportResponse() {}

void OAICreateReconciliationReportResponse::initializeModel() {

    m_issues_isSet = false;
    m_issues_isValid = false;

    m_reconciliation_report_isSet = false;
    m_reconciliation_report_isValid = false;

    m_successful_record_count_isSet = false;
    m_successful_record_count_isValid = false;
}

void OAICreateReconciliationReportResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateReconciliationReportResponse::fromJsonObject(QJsonObject json) {

    m_issues_isValid = ::OpenAPI::fromJsonValue(m_issues, json[QString("issues")]);
    m_issues_isSet = !json[QString("issues")].isNull() && m_issues_isValid;

    m_reconciliation_report_isValid = ::OpenAPI::fromJsonValue(m_reconciliation_report, json[QString("reconciliationReport")]);
    m_reconciliation_report_isSet = !json[QString("reconciliationReport")].isNull() && m_reconciliation_report_isValid;

    m_successful_record_count_isValid = ::OpenAPI::fromJsonValue(m_successful_record_count, json[QString("successfulRecordCount")]);
    m_successful_record_count_isSet = !json[QString("successfulRecordCount")].isNull() && m_successful_record_count_isValid;
}

QString OAICreateReconciliationReportResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateReconciliationReportResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_issues.size() > 0) {
        obj.insert(QString("issues"), ::OpenAPI::toJsonValue(m_issues));
    }
    if (m_reconciliation_report.isSet()) {
        obj.insert(QString("reconciliationReport"), ::OpenAPI::toJsonValue(m_reconciliation_report));
    }
    if (m_successful_record_count_isSet) {
        obj.insert(QString("successfulRecordCount"), ::OpenAPI::toJsonValue(m_successful_record_count));
    }
    return obj;
}

QList<OAIReconciliationReportValidationIssue> OAICreateReconciliationReportResponse::getIssues() const {
    return m_issues;
}
void OAICreateReconciliationReportResponse::setIssues(const QList<OAIReconciliationReportValidationIssue> &issues) {
    m_issues = issues;
    m_issues_isSet = true;
}

bool OAICreateReconciliationReportResponse::is_issues_Set() const{
    return m_issues_isSet;
}

bool OAICreateReconciliationReportResponse::is_issues_Valid() const{
    return m_issues_isValid;
}

OAIReconciliationReport OAICreateReconciliationReportResponse::getReconciliationReport() const {
    return m_reconciliation_report;
}
void OAICreateReconciliationReportResponse::setReconciliationReport(const OAIReconciliationReport &reconciliation_report) {
    m_reconciliation_report = reconciliation_report;
    m_reconciliation_report_isSet = true;
}

bool OAICreateReconciliationReportResponse::is_reconciliation_report_Set() const{
    return m_reconciliation_report_isSet;
}

bool OAICreateReconciliationReportResponse::is_reconciliation_report_Valid() const{
    return m_reconciliation_report_isValid;
}

qint32 OAICreateReconciliationReportResponse::getSuccessfulRecordCount() const {
    return m_successful_record_count;
}
void OAICreateReconciliationReportResponse::setSuccessfulRecordCount(const qint32 &successful_record_count) {
    m_successful_record_count = successful_record_count;
    m_successful_record_count_isSet = true;
}

bool OAICreateReconciliationReportResponse::is_successful_record_count_Set() const{
    return m_successful_record_count_isSet;
}

bool OAICreateReconciliationReportResponse::is_successful_record_count_Valid() const{
    return m_successful_record_count_isValid;
}

bool OAICreateReconciliationReportResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_issues.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconciliation_report.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_successful_record_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateReconciliationReportResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
