/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReconciliationReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReconciliationReport::OAIReconciliationReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReconciliationReport::OAIReconciliationReport() {
    this->initializeModel();
}

OAIReconciliationReport::~OAIReconciliationReport() {}

void OAIReconciliationReport::initializeModel() {

    m_contents_isSet = false;
    m_contents_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIReconciliationReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReconciliationReport::fromJsonObject(QJsonObject json) {

    m_contents_isValid = ::OpenAPI::fromJsonValue(m_contents, json[QString("contents")]);
    m_contents_isSet = !json[QString("contents")].isNull() && m_contents_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("fileName")]);
    m_file_name_isSet = !json[QString("fileName")].isNull() && m_file_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIReconciliationReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReconciliationReport::asJsonObject() const {
    QJsonObject obj;
    if (m_contents_isSet) {
        obj.insert(QString("contents"), ::OpenAPI::toJsonValue(m_contents));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("fileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIReconciliationReport::getContents() const {
    return m_contents;
}
void OAIReconciliationReport::setContents(const QString &contents) {
    m_contents = contents;
    m_contents_isSet = true;
}

bool OAIReconciliationReport::is_contents_Set() const{
    return m_contents_isSet;
}

bool OAIReconciliationReport::is_contents_Valid() const{
    return m_contents_isValid;
}

QString OAIReconciliationReport::getFileName() const {
    return m_file_name;
}
void OAIReconciliationReport::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIReconciliationReport::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIReconciliationReport::is_file_name_Valid() const{
    return m_file_name_isValid;
}

QString OAIReconciliationReport::getName() const {
    return m_name;
}
void OAIReconciliationReport::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIReconciliationReport::is_name_Set() const{
    return m_name_isSet;
}

bool OAIReconciliationReport::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIReconciliationReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contents_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReconciliationReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
