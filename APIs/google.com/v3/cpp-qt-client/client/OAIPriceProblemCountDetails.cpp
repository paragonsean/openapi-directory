/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPriceProblemCountDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPriceProblemCountDetails::OAIPriceProblemCountDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPriceProblemCountDetails::OAIPriceProblemCountDetails() {
    this->initializeModel();
}

OAIPriceProblemCountDetails::~OAIPriceProblemCountDetails() {}

void OAIPriceProblemCountDetails::initializeModel() {

    m_hotel_suspended_count_isSet = false;
    m_hotel_suspended_count_isValid = false;

    m_price_unusually_high_count_isSet = false;
    m_price_unusually_high_count_isValid = false;

    m_price_unusually_low_count_isSet = false;
    m_price_unusually_low_count_isValid = false;

    m_taxes_and_fees_missing_count_isSet = false;
    m_taxes_and_fees_missing_count_isValid = false;
}

void OAIPriceProblemCountDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPriceProblemCountDetails::fromJsonObject(QJsonObject json) {

    m_hotel_suspended_count_isValid = ::OpenAPI::fromJsonValue(m_hotel_suspended_count, json[QString("hotelSuspendedCount")]);
    m_hotel_suspended_count_isSet = !json[QString("hotelSuspendedCount")].isNull() && m_hotel_suspended_count_isValid;

    m_price_unusually_high_count_isValid = ::OpenAPI::fromJsonValue(m_price_unusually_high_count, json[QString("priceUnusuallyHighCount")]);
    m_price_unusually_high_count_isSet = !json[QString("priceUnusuallyHighCount")].isNull() && m_price_unusually_high_count_isValid;

    m_price_unusually_low_count_isValid = ::OpenAPI::fromJsonValue(m_price_unusually_low_count, json[QString("priceUnusuallyLowCount")]);
    m_price_unusually_low_count_isSet = !json[QString("priceUnusuallyLowCount")].isNull() && m_price_unusually_low_count_isValid;

    m_taxes_and_fees_missing_count_isValid = ::OpenAPI::fromJsonValue(m_taxes_and_fees_missing_count, json[QString("taxesAndFeesMissingCount")]);
    m_taxes_and_fees_missing_count_isSet = !json[QString("taxesAndFeesMissingCount")].isNull() && m_taxes_and_fees_missing_count_isValid;
}

QString OAIPriceProblemCountDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPriceProblemCountDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_hotel_suspended_count_isSet) {
        obj.insert(QString("hotelSuspendedCount"), ::OpenAPI::toJsonValue(m_hotel_suspended_count));
    }
    if (m_price_unusually_high_count_isSet) {
        obj.insert(QString("priceUnusuallyHighCount"), ::OpenAPI::toJsonValue(m_price_unusually_high_count));
    }
    if (m_price_unusually_low_count_isSet) {
        obj.insert(QString("priceUnusuallyLowCount"), ::OpenAPI::toJsonValue(m_price_unusually_low_count));
    }
    if (m_taxes_and_fees_missing_count_isSet) {
        obj.insert(QString("taxesAndFeesMissingCount"), ::OpenAPI::toJsonValue(m_taxes_and_fees_missing_count));
    }
    return obj;
}

QString OAIPriceProblemCountDetails::getHotelSuspendedCount() const {
    return m_hotel_suspended_count;
}
void OAIPriceProblemCountDetails::setHotelSuspendedCount(const QString &hotel_suspended_count) {
    m_hotel_suspended_count = hotel_suspended_count;
    m_hotel_suspended_count_isSet = true;
}

bool OAIPriceProblemCountDetails::is_hotel_suspended_count_Set() const{
    return m_hotel_suspended_count_isSet;
}

bool OAIPriceProblemCountDetails::is_hotel_suspended_count_Valid() const{
    return m_hotel_suspended_count_isValid;
}

QString OAIPriceProblemCountDetails::getPriceUnusuallyHighCount() const {
    return m_price_unusually_high_count;
}
void OAIPriceProblemCountDetails::setPriceUnusuallyHighCount(const QString &price_unusually_high_count) {
    m_price_unusually_high_count = price_unusually_high_count;
    m_price_unusually_high_count_isSet = true;
}

bool OAIPriceProblemCountDetails::is_price_unusually_high_count_Set() const{
    return m_price_unusually_high_count_isSet;
}

bool OAIPriceProblemCountDetails::is_price_unusually_high_count_Valid() const{
    return m_price_unusually_high_count_isValid;
}

QString OAIPriceProblemCountDetails::getPriceUnusuallyLowCount() const {
    return m_price_unusually_low_count;
}
void OAIPriceProblemCountDetails::setPriceUnusuallyLowCount(const QString &price_unusually_low_count) {
    m_price_unusually_low_count = price_unusually_low_count;
    m_price_unusually_low_count_isSet = true;
}

bool OAIPriceProblemCountDetails::is_price_unusually_low_count_Set() const{
    return m_price_unusually_low_count_isSet;
}

bool OAIPriceProblemCountDetails::is_price_unusually_low_count_Valid() const{
    return m_price_unusually_low_count_isValid;
}

QString OAIPriceProblemCountDetails::getTaxesAndFeesMissingCount() const {
    return m_taxes_and_fees_missing_count;
}
void OAIPriceProblemCountDetails::setTaxesAndFeesMissingCount(const QString &taxes_and_fees_missing_count) {
    m_taxes_and_fees_missing_count = taxes_and_fees_missing_count;
    m_taxes_and_fees_missing_count_isSet = true;
}

bool OAIPriceProblemCountDetails::is_taxes_and_fees_missing_count_Set() const{
    return m_taxes_and_fees_missing_count_isSet;
}

bool OAIPriceProblemCountDetails::is_taxes_and_fees_missing_count_Valid() const{
    return m_taxes_and_fees_missing_count_isValid;
}

bool OAIPriceProblemCountDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hotel_suspended_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_unusually_high_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_unusually_low_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxes_and_fees_missing_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPriceProblemCountDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
