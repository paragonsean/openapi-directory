/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHotelPricePerItinerary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHotelPricePerItinerary::OAIHotelPricePerItinerary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHotelPricePerItinerary::OAIHotelPricePerItinerary() {
    this->initializeModel();
}

OAIHotelPricePerItinerary::~OAIHotelPricePerItinerary() {}

void OAIHotelPricePerItinerary::initializeModel() {

    m_checkin_date_isSet = false;
    m_checkin_date_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_fees_isSet = false;
    m_fees_isValid = false;

    m_length_of_stay_days_isSet = false;
    m_length_of_stay_days_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_taxes_isSet = false;
    m_taxes_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIHotelPricePerItinerary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHotelPricePerItinerary::fromJsonObject(QJsonObject json) {

    m_checkin_date_isValid = ::OpenAPI::fromJsonValue(m_checkin_date, json[QString("checkinDate")]);
    m_checkin_date_isSet = !json[QString("checkinDate")].isNull() && m_checkin_date_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_fees_isValid = ::OpenAPI::fromJsonValue(m_fees, json[QString("fees")]);
    m_fees_isSet = !json[QString("fees")].isNull() && m_fees_isValid;

    m_length_of_stay_days_isValid = ::OpenAPI::fromJsonValue(m_length_of_stay_days, json[QString("lengthOfStayDays")]);
    m_length_of_stay_days_isSet = !json[QString("lengthOfStayDays")].isNull() && m_length_of_stay_days_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_taxes_isValid = ::OpenAPI::fromJsonValue(m_taxes, json[QString("taxes")]);
    m_taxes_isSet = !json[QString("taxes")].isNull() && m_taxes_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIHotelPricePerItinerary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHotelPricePerItinerary::asJsonObject() const {
    QJsonObject obj;
    if (m_checkin_date.isSet()) {
        obj.insert(QString("checkinDate"), ::OpenAPI::toJsonValue(m_checkin_date));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_fees_isSet) {
        obj.insert(QString("fees"), ::OpenAPI::toJsonValue(m_fees));
    }
    if (m_length_of_stay_days_isSet) {
        obj.insert(QString("lengthOfStayDays"), ::OpenAPI::toJsonValue(m_length_of_stay_days));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_taxes_isSet) {
        obj.insert(QString("taxes"), ::OpenAPI::toJsonValue(m_taxes));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

OAIDate OAIHotelPricePerItinerary::getCheckinDate() const {
    return m_checkin_date;
}
void OAIHotelPricePerItinerary::setCheckinDate(const OAIDate &checkin_date) {
    m_checkin_date = checkin_date;
    m_checkin_date_isSet = true;
}

bool OAIHotelPricePerItinerary::is_checkin_date_Set() const{
    return m_checkin_date_isSet;
}

bool OAIHotelPricePerItinerary::is_checkin_date_Valid() const{
    return m_checkin_date_isValid;
}

QString OAIHotelPricePerItinerary::getCurrencyCode() const {
    return m_currency_code;
}
void OAIHotelPricePerItinerary::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIHotelPricePerItinerary::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIHotelPricePerItinerary::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

float OAIHotelPricePerItinerary::getFees() const {
    return m_fees;
}
void OAIHotelPricePerItinerary::setFees(const float &fees) {
    m_fees = fees;
    m_fees_isSet = true;
}

bool OAIHotelPricePerItinerary::is_fees_Set() const{
    return m_fees_isSet;
}

bool OAIHotelPricePerItinerary::is_fees_Valid() const{
    return m_fees_isValid;
}

qint32 OAIHotelPricePerItinerary::getLengthOfStayDays() const {
    return m_length_of_stay_days;
}
void OAIHotelPricePerItinerary::setLengthOfStayDays(const qint32 &length_of_stay_days) {
    m_length_of_stay_days = length_of_stay_days;
    m_length_of_stay_days_isSet = true;
}

bool OAIHotelPricePerItinerary::is_length_of_stay_days_Set() const{
    return m_length_of_stay_days_isSet;
}

bool OAIHotelPricePerItinerary::is_length_of_stay_days_Valid() const{
    return m_length_of_stay_days_isValid;
}

float OAIHotelPricePerItinerary::getPrice() const {
    return m_price;
}
void OAIHotelPricePerItinerary::setPrice(const float &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIHotelPricePerItinerary::is_price_Set() const{
    return m_price_isSet;
}

bool OAIHotelPricePerItinerary::is_price_Valid() const{
    return m_price_isValid;
}

float OAIHotelPricePerItinerary::getTaxes() const {
    return m_taxes;
}
void OAIHotelPricePerItinerary::setTaxes(const float &taxes) {
    m_taxes = taxes;
    m_taxes_isSet = true;
}

bool OAIHotelPricePerItinerary::is_taxes_Set() const{
    return m_taxes_isSet;
}

bool OAIHotelPricePerItinerary::is_taxes_Valid() const{
    return m_taxes_isValid;
}

QString OAIHotelPricePerItinerary::getUpdateTime() const {
    return m_update_time;
}
void OAIHotelPricePerItinerary::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIHotelPricePerItinerary::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIHotelPricePerItinerary::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIHotelPricePerItinerary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_checkin_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fees_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_of_stay_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHotelPricePerItinerary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
