/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataIssueDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataIssueDetail::OAIDataIssueDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataIssueDetail::OAIDataIssueDetail() {
    this->initializeModel();
}

OAIDataIssueDetail::~OAIDataIssueDetail() {}

void OAIDataIssueDetail::initializeModel() {

    m_data_issue_severity_isSet = false;
    m_data_issue_severity_isValid = false;

    m_data_issue_type_isSet = false;
    m_data_issue_type_isValid = false;

    m_is_self_resolving_isSet = false;
    m_is_self_resolving_isValid = false;
}

void OAIDataIssueDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataIssueDetail::fromJsonObject(QJsonObject json) {

    m_data_issue_severity_isValid = ::OpenAPI::fromJsonValue(m_data_issue_severity, json[QString("dataIssueSeverity")]);
    m_data_issue_severity_isSet = !json[QString("dataIssueSeverity")].isNull() && m_data_issue_severity_isValid;

    m_data_issue_type_isValid = ::OpenAPI::fromJsonValue(m_data_issue_type, json[QString("dataIssueType")]);
    m_data_issue_type_isSet = !json[QString("dataIssueType")].isNull() && m_data_issue_type_isValid;

    m_is_self_resolving_isValid = ::OpenAPI::fromJsonValue(m_is_self_resolving, json[QString("isSelfResolving")]);
    m_is_self_resolving_isSet = !json[QString("isSelfResolving")].isNull() && m_is_self_resolving_isValid;
}

QString OAIDataIssueDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataIssueDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_data_issue_severity_isSet) {
        obj.insert(QString("dataIssueSeverity"), ::OpenAPI::toJsonValue(m_data_issue_severity));
    }
    if (m_data_issue_type_isSet) {
        obj.insert(QString("dataIssueType"), ::OpenAPI::toJsonValue(m_data_issue_type));
    }
    if (m_is_self_resolving_isSet) {
        obj.insert(QString("isSelfResolving"), ::OpenAPI::toJsonValue(m_is_self_resolving));
    }
    return obj;
}

QString OAIDataIssueDetail::getDataIssueSeverity() const {
    return m_data_issue_severity;
}
void OAIDataIssueDetail::setDataIssueSeverity(const QString &data_issue_severity) {
    m_data_issue_severity = data_issue_severity;
    m_data_issue_severity_isSet = true;
}

bool OAIDataIssueDetail::is_data_issue_severity_Set() const{
    return m_data_issue_severity_isSet;
}

bool OAIDataIssueDetail::is_data_issue_severity_Valid() const{
    return m_data_issue_severity_isValid;
}

QString OAIDataIssueDetail::getDataIssueType() const {
    return m_data_issue_type;
}
void OAIDataIssueDetail::setDataIssueType(const QString &data_issue_type) {
    m_data_issue_type = data_issue_type;
    m_data_issue_type_isSet = true;
}

bool OAIDataIssueDetail::is_data_issue_type_Set() const{
    return m_data_issue_type_isSet;
}

bool OAIDataIssueDetail::is_data_issue_type_Valid() const{
    return m_data_issue_type_isValid;
}

bool OAIDataIssueDetail::isIsSelfResolving() const {
    return m_is_self_resolving;
}
void OAIDataIssueDetail::setIsSelfResolving(const bool &is_self_resolving) {
    m_is_self_resolving = is_self_resolving;
    m_is_self_resolving_isSet = true;
}

bool OAIDataIssueDetail::is_is_self_resolving_Set() const{
    return m_is_self_resolving_isSet;
}

bool OAIDataIssueDetail::is_is_self_resolving_Valid() const{
    return m_is_self_resolving_isValid;
}

bool OAIDataIssueDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_issue_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_issue_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_self_resolving_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataIssueDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
