/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRating.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRating::OAIRating(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRating::OAIRating() {
    this->initializeModel();
}

OAIRating::~OAIRating() {}

void OAIRating::initializeModel() {

    m_rating_scale_isSet = false;
    m_rating_scale_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRating::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRating::fromJsonObject(QJsonObject json) {

    m_rating_scale_isValid = ::OpenAPI::fromJsonValue(m_rating_scale, json[QString("ratingScale")]);
    m_rating_scale_isSet = !json[QString("ratingScale")].isNull() && m_rating_scale_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRating::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRating::asJsonObject() const {
    QJsonObject obj;
    if (m_rating_scale_isSet) {
        obj.insert(QString("ratingScale"), ::OpenAPI::toJsonValue(m_rating_scale));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIRating::getRatingScale() const {
    return m_rating_scale;
}
void OAIRating::setRatingScale(const qint32 &rating_scale) {
    m_rating_scale = rating_scale;
    m_rating_scale_isSet = true;
}

bool OAIRating::is_rating_scale_Set() const{
    return m_rating_scale_isSet;
}

bool OAIRating::is_rating_scale_Valid() const{
    return m_rating_scale_isValid;
}

float OAIRating::getScore() const {
    return m_score;
}
void OAIRating::setScore(const float &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIRating::is_score_Set() const{
    return m_score_isSet;
}

bool OAIRating::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIRating::getType() const {
    return m_type;
}
void OAIRating::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRating::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRating::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRating::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rating_scale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRating::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
