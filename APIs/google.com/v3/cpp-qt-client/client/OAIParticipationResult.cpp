/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParticipationResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParticipationResult::OAIParticipationResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParticipationResult::OAIParticipationResult() {
    this->initializeModel();
}

OAIParticipationResult::~OAIParticipationResult() {}

void OAIParticipationResult::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_missed_participation_count_isSet = false;
    m_missed_participation_count_isValid = false;

    m_missed_participation_count_details_isSet = false;
    m_missed_participation_count_details_isValid = false;

    m_opportunity_count_isSet = false;
    m_opportunity_count_isValid = false;

    m_participation_count_isSet = false;
    m_participation_count_isValid = false;

    m_participation_percent_isSet = false;
    m_participation_percent_isValid = false;

    m_partner_hotel_display_name_isSet = false;
    m_partner_hotel_display_name_isValid = false;
}

void OAIParticipationResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParticipationResult::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_missed_participation_count_isValid = ::OpenAPI::fromJsonValue(m_missed_participation_count, json[QString("missedParticipationCount")]);
    m_missed_participation_count_isSet = !json[QString("missedParticipationCount")].isNull() && m_missed_participation_count_isValid;

    m_missed_participation_count_details_isValid = ::OpenAPI::fromJsonValue(m_missed_participation_count_details, json[QString("missedParticipationCountDetails")]);
    m_missed_participation_count_details_isSet = !json[QString("missedParticipationCountDetails")].isNull() && m_missed_participation_count_details_isValid;

    m_opportunity_count_isValid = ::OpenAPI::fromJsonValue(m_opportunity_count, json[QString("opportunityCount")]);
    m_opportunity_count_isSet = !json[QString("opportunityCount")].isNull() && m_opportunity_count_isValid;

    m_participation_count_isValid = ::OpenAPI::fromJsonValue(m_participation_count, json[QString("participationCount")]);
    m_participation_count_isSet = !json[QString("participationCount")].isNull() && m_participation_count_isValid;

    m_participation_percent_isValid = ::OpenAPI::fromJsonValue(m_participation_percent, json[QString("participationPercent")]);
    m_participation_percent_isSet = !json[QString("participationPercent")].isNull() && m_participation_percent_isValid;

    m_partner_hotel_display_name_isValid = ::OpenAPI::fromJsonValue(m_partner_hotel_display_name, json[QString("partnerHotelDisplayName")]);
    m_partner_hotel_display_name_isSet = !json[QString("partnerHotelDisplayName")].isNull() && m_partner_hotel_display_name_isValid;
}

QString OAIParticipationResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParticipationResult::asJsonObject() const {
    QJsonObject obj;
    if (m_key.isSet()) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_missed_participation_count_isSet) {
        obj.insert(QString("missedParticipationCount"), ::OpenAPI::toJsonValue(m_missed_participation_count));
    }
    if (m_missed_participation_count_details.isSet()) {
        obj.insert(QString("missedParticipationCountDetails"), ::OpenAPI::toJsonValue(m_missed_participation_count_details));
    }
    if (m_opportunity_count_isSet) {
        obj.insert(QString("opportunityCount"), ::OpenAPI::toJsonValue(m_opportunity_count));
    }
    if (m_participation_count_isSet) {
        obj.insert(QString("participationCount"), ::OpenAPI::toJsonValue(m_participation_count));
    }
    if (m_participation_percent_isSet) {
        obj.insert(QString("participationPercent"), ::OpenAPI::toJsonValue(m_participation_percent));
    }
    if (m_partner_hotel_display_name_isSet) {
        obj.insert(QString("partnerHotelDisplayName"), ::OpenAPI::toJsonValue(m_partner_hotel_display_name));
    }
    return obj;
}

OAIKey OAIParticipationResult::getKey() const {
    return m_key;
}
void OAIParticipationResult::setKey(const OAIKey &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIParticipationResult::is_key_Set() const{
    return m_key_isSet;
}

bool OAIParticipationResult::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIParticipationResult::getMissedParticipationCount() const {
    return m_missed_participation_count;
}
void OAIParticipationResult::setMissedParticipationCount(const QString &missed_participation_count) {
    m_missed_participation_count = missed_participation_count;
    m_missed_participation_count_isSet = true;
}

bool OAIParticipationResult::is_missed_participation_count_Set() const{
    return m_missed_participation_count_isSet;
}

bool OAIParticipationResult::is_missed_participation_count_Valid() const{
    return m_missed_participation_count_isValid;
}

OAIMissedParticipationCountDetails OAIParticipationResult::getMissedParticipationCountDetails() const {
    return m_missed_participation_count_details;
}
void OAIParticipationResult::setMissedParticipationCountDetails(const OAIMissedParticipationCountDetails &missed_participation_count_details) {
    m_missed_participation_count_details = missed_participation_count_details;
    m_missed_participation_count_details_isSet = true;
}

bool OAIParticipationResult::is_missed_participation_count_details_Set() const{
    return m_missed_participation_count_details_isSet;
}

bool OAIParticipationResult::is_missed_participation_count_details_Valid() const{
    return m_missed_participation_count_details_isValid;
}

QString OAIParticipationResult::getOpportunityCount() const {
    return m_opportunity_count;
}
void OAIParticipationResult::setOpportunityCount(const QString &opportunity_count) {
    m_opportunity_count = opportunity_count;
    m_opportunity_count_isSet = true;
}

bool OAIParticipationResult::is_opportunity_count_Set() const{
    return m_opportunity_count_isSet;
}

bool OAIParticipationResult::is_opportunity_count_Valid() const{
    return m_opportunity_count_isValid;
}

QString OAIParticipationResult::getParticipationCount() const {
    return m_participation_count;
}
void OAIParticipationResult::setParticipationCount(const QString &participation_count) {
    m_participation_count = participation_count;
    m_participation_count_isSet = true;
}

bool OAIParticipationResult::is_participation_count_Set() const{
    return m_participation_count_isSet;
}

bool OAIParticipationResult::is_participation_count_Valid() const{
    return m_participation_count_isValid;
}

double OAIParticipationResult::getParticipationPercent() const {
    return m_participation_percent;
}
void OAIParticipationResult::setParticipationPercent(const double &participation_percent) {
    m_participation_percent = participation_percent;
    m_participation_percent_isSet = true;
}

bool OAIParticipationResult::is_participation_percent_Set() const{
    return m_participation_percent_isSet;
}

bool OAIParticipationResult::is_participation_percent_Valid() const{
    return m_participation_percent_isValid;
}

QString OAIParticipationResult::getPartnerHotelDisplayName() const {
    return m_partner_hotel_display_name;
}
void OAIParticipationResult::setPartnerHotelDisplayName(const QString &partner_hotel_display_name) {
    m_partner_hotel_display_name = partner_hotel_display_name;
    m_partner_hotel_display_name_isSet = true;
}

bool OAIParticipationResult::is_partner_hotel_display_name_Set() const{
    return m_partner_hotel_display_name_isSet;
}

bool OAIParticipationResult::is_partner_hotel_display_name_Valid() const{
    return m_partner_hotel_display_name_isValid;
}

bool OAIParticipationResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_missed_participation_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_missed_participation_count_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_opportunity_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participation_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participation_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_hotel_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParticipationResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
