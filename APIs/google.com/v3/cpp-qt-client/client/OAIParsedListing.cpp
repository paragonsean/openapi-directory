/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParsedListing.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParsedListing::OAIParsedListing(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParsedListing::OAIParsedListing() {
    this->initializeModel();
}

OAIParsedListing::~OAIParsedListing() {}

void OAIParsedListing::initializeModel() {

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_data_issue_detail_isSet = false;
    m_data_issue_detail_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_imprecision_radius_meters_isSet = false;
    m_imprecision_radius_meters_isValid = false;

    m_is_served_isSet = false;
    m_is_served_isValid = false;

    m_listing_name_isSet = false;
    m_listing_name_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_partner_list_id_isSet = false;
    m_partner_list_id_isValid = false;

    m_region_code_isSet = false;
    m_region_code_isValid = false;

    m_review_isSet = false;
    m_review_isValid = false;

    m_unit_attributes_isSet = false;
    m_unit_attributes_isValid = false;
}

void OAIParsedListing::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParsedListing::fromJsonObject(QJsonObject json) {

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_data_issue_detail_isValid = ::OpenAPI::fromJsonValue(m_data_issue_detail, json[QString("dataIssueDetail")]);
    m_data_issue_detail_isSet = !json[QString("dataIssueDetail")].isNull() && m_data_issue_detail_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_imprecision_radius_meters_isValid = ::OpenAPI::fromJsonValue(m_imprecision_radius_meters, json[QString("imprecisionRadiusMeters")]);
    m_imprecision_radius_meters_isSet = !json[QString("imprecisionRadiusMeters")].isNull() && m_imprecision_radius_meters_isValid;

    m_is_served_isValid = ::OpenAPI::fromJsonValue(m_is_served, json[QString("isServed")]);
    m_is_served_isSet = !json[QString("isServed")].isNull() && m_is_served_isValid;

    m_listing_name_isValid = ::OpenAPI::fromJsonValue(m_listing_name, json[QString("listingName")]);
    m_listing_name_isSet = !json[QString("listingName")].isNull() && m_listing_name_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_partner_list_id_isValid = ::OpenAPI::fromJsonValue(m_partner_list_id, json[QString("partnerListId")]);
    m_partner_list_id_isSet = !json[QString("partnerListId")].isNull() && m_partner_list_id_isValid;

    m_region_code_isValid = ::OpenAPI::fromJsonValue(m_region_code, json[QString("regionCode")]);
    m_region_code_isSet = !json[QString("regionCode")].isNull() && m_region_code_isValid;

    m_review_isValid = ::OpenAPI::fromJsonValue(m_review, json[QString("review")]);
    m_review_isSet = !json[QString("review")].isNull() && m_review_isValid;

    m_unit_attributes_isValid = ::OpenAPI::fromJsonValue(m_unit_attributes, json[QString("unitAttributes")]);
    m_unit_attributes_isSet = !json[QString("unitAttributes")].isNull() && m_unit_attributes_isValid;
}

QString OAIParsedListing::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParsedListing::asJsonObject() const {
    QJsonObject obj;
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_category.size() > 0) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_data_issue_detail.size() > 0) {
        obj.insert(QString("dataIssueDetail"), ::OpenAPI::toJsonValue(m_data_issue_detail));
    }
    if (m_description.size() > 0) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_image.size() > 0) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_imprecision_radius_meters_isSet) {
        obj.insert(QString("imprecisionRadiusMeters"), ::OpenAPI::toJsonValue(m_imprecision_radius_meters));
    }
    if (m_is_served_isSet) {
        obj.insert(QString("isServed"), ::OpenAPI::toJsonValue(m_is_served));
    }
    if (m_listing_name.size() > 0) {
        obj.insert(QString("listingName"), ::OpenAPI::toJsonValue(m_listing_name));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_partner_list_id_isSet) {
        obj.insert(QString("partnerListId"), ::OpenAPI::toJsonValue(m_partner_list_id));
    }
    if (m_region_code_isSet) {
        obj.insert(QString("regionCode"), ::OpenAPI::toJsonValue(m_region_code));
    }
    if (m_review.size() > 0) {
        obj.insert(QString("review"), ::OpenAPI::toJsonValue(m_review));
    }
    if (m_unit_attributes.size() > 0) {
        obj.insert(QString("unitAttributes"), ::OpenAPI::toJsonValue(m_unit_attributes));
    }
    return obj;
}

QString OAIParsedListing::getBrand() const {
    return m_brand;
}
void OAIParsedListing::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIParsedListing::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIParsedListing::is_brand_Valid() const{
    return m_brand_isValid;
}

QList<OAILocalizedText> OAIParsedListing::getCategory() const {
    return m_category;
}
void OAIParsedListing::setCategory(const QList<OAILocalizedText> &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIParsedListing::is_category_Set() const{
    return m_category_isSet;
}

bool OAIParsedListing::is_category_Valid() const{
    return m_category_isValid;
}

QList<OAIDataIssueDetail> OAIParsedListing::getDataIssueDetail() const {
    return m_data_issue_detail;
}
void OAIParsedListing::setDataIssueDetail(const QList<OAIDataIssueDetail> &data_issue_detail) {
    m_data_issue_detail = data_issue_detail;
    m_data_issue_detail_isSet = true;
}

bool OAIParsedListing::is_data_issue_detail_Set() const{
    return m_data_issue_detail_isSet;
}

bool OAIParsedListing::is_data_issue_detail_Valid() const{
    return m_data_issue_detail_isValid;
}

QList<OAILocalizedText> OAIParsedListing::getDescription() const {
    return m_description;
}
void OAIParsedListing::setDescription(const QList<OAILocalizedText> &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIParsedListing::is_description_Set() const{
    return m_description_isSet;
}

bool OAIParsedListing::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIImage> OAIParsedListing::getImage() const {
    return m_image;
}
void OAIParsedListing::setImage(const QList<OAIImage> &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIParsedListing::is_image_Set() const{
    return m_image_isSet;
}

bool OAIParsedListing::is_image_Valid() const{
    return m_image_isValid;
}

qint32 OAIParsedListing::getImprecisionRadiusMeters() const {
    return m_imprecision_radius_meters;
}
void OAIParsedListing::setImprecisionRadiusMeters(const qint32 &imprecision_radius_meters) {
    m_imprecision_radius_meters = imprecision_radius_meters;
    m_imprecision_radius_meters_isSet = true;
}

bool OAIParsedListing::is_imprecision_radius_meters_Set() const{
    return m_imprecision_radius_meters_isSet;
}

bool OAIParsedListing::is_imprecision_radius_meters_Valid() const{
    return m_imprecision_radius_meters_isValid;
}

bool OAIParsedListing::isIsServed() const {
    return m_is_served;
}
void OAIParsedListing::setIsServed(const bool &is_served) {
    m_is_served = is_served;
    m_is_served_isSet = true;
}

bool OAIParsedListing::is_is_served_Set() const{
    return m_is_served_isSet;
}

bool OAIParsedListing::is_is_served_Valid() const{
    return m_is_served_isValid;
}

QList<OAILocalizedText> OAIParsedListing::getListingName() const {
    return m_listing_name;
}
void OAIParsedListing::setListingName(const QList<OAILocalizedText> &listing_name) {
    m_listing_name = listing_name;
    m_listing_name_isSet = true;
}

bool OAIParsedListing::is_listing_name_Set() const{
    return m_listing_name_isSet;
}

bool OAIParsedListing::is_listing_name_Valid() const{
    return m_listing_name_isValid;
}

OAILatLng OAIParsedListing::getLocation() const {
    return m_location;
}
void OAIParsedListing::setLocation(const OAILatLng &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIParsedListing::is_location_Set() const{
    return m_location_isSet;
}

bool OAIParsedListing::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIParsedListing::getPartnerListId() const {
    return m_partner_list_id;
}
void OAIParsedListing::setPartnerListId(const QString &partner_list_id) {
    m_partner_list_id = partner_list_id;
    m_partner_list_id_isSet = true;
}

bool OAIParsedListing::is_partner_list_id_Set() const{
    return m_partner_list_id_isSet;
}

bool OAIParsedListing::is_partner_list_id_Valid() const{
    return m_partner_list_id_isValid;
}

QString OAIParsedListing::getRegionCode() const {
    return m_region_code;
}
void OAIParsedListing::setRegionCode(const QString &region_code) {
    m_region_code = region_code;
    m_region_code_isSet = true;
}

bool OAIParsedListing::is_region_code_Set() const{
    return m_region_code_isSet;
}

bool OAIParsedListing::is_region_code_Valid() const{
    return m_region_code_isValid;
}

QList<OAIReview> OAIParsedListing::getReview() const {
    return m_review;
}
void OAIParsedListing::setReview(const QList<OAIReview> &review) {
    m_review = review;
    m_review_isSet = true;
}

bool OAIParsedListing::is_review_Set() const{
    return m_review_isSet;
}

bool OAIParsedListing::is_review_Valid() const{
    return m_review_isValid;
}

QMap<QString, QString> OAIParsedListing::getUnitAttributes() const {
    return m_unit_attributes;
}
void OAIParsedListing::setUnitAttributes(const QMap<QString, QString> &unit_attributes) {
    m_unit_attributes = unit_attributes;
    m_unit_attributes_isSet = true;
}

bool OAIParsedListing::is_unit_attributes_Set() const{
    return m_unit_attributes_isSet;
}

bool OAIParsedListing::is_unit_attributes_Valid() const{
    return m_unit_attributes_isValid;
}

bool OAIParsedListing::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_issue_detail.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_imprecision_radius_meters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_served_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listing_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_list_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_review.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParsedListing::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
