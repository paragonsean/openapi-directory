/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPriceMissingCountDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPriceMissingCountDetails::OAIPriceMissingCountDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPriceMissingCountDetails::OAIPriceMissingCountDetails() {
    this->initializeModel();
}

OAIPriceMissingCountDetails::~OAIPriceMissingCountDetails() {}

void OAIPriceMissingCountDetails::initializeModel() {

    m_bandwidth_depleted_count_isSet = false;
    m_bandwidth_depleted_count_isValid = false;

    m_cache_rate_missing_count_isSet = false;
    m_cache_rate_missing_count_isValid = false;

    m_itinerary_blocked_count_isSet = false;
    m_itinerary_blocked_count_isValid = false;

    m_live_pricing_error_count_isSet = false;
    m_live_pricing_error_count_isValid = false;

    m_live_pricing_not_setup_count_isSet = false;
    m_live_pricing_not_setup_count_isValid = false;

    m_live_pricing_timeout_count_isSet = false;
    m_live_pricing_timeout_count_isValid = false;
}

void OAIPriceMissingCountDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPriceMissingCountDetails::fromJsonObject(QJsonObject json) {

    m_bandwidth_depleted_count_isValid = ::OpenAPI::fromJsonValue(m_bandwidth_depleted_count, json[QString("bandwidthDepletedCount")]);
    m_bandwidth_depleted_count_isSet = !json[QString("bandwidthDepletedCount")].isNull() && m_bandwidth_depleted_count_isValid;

    m_cache_rate_missing_count_isValid = ::OpenAPI::fromJsonValue(m_cache_rate_missing_count, json[QString("cacheRateMissingCount")]);
    m_cache_rate_missing_count_isSet = !json[QString("cacheRateMissingCount")].isNull() && m_cache_rate_missing_count_isValid;

    m_itinerary_blocked_count_isValid = ::OpenAPI::fromJsonValue(m_itinerary_blocked_count, json[QString("itineraryBlockedCount")]);
    m_itinerary_blocked_count_isSet = !json[QString("itineraryBlockedCount")].isNull() && m_itinerary_blocked_count_isValid;

    m_live_pricing_error_count_isValid = ::OpenAPI::fromJsonValue(m_live_pricing_error_count, json[QString("livePricingErrorCount")]);
    m_live_pricing_error_count_isSet = !json[QString("livePricingErrorCount")].isNull() && m_live_pricing_error_count_isValid;

    m_live_pricing_not_setup_count_isValid = ::OpenAPI::fromJsonValue(m_live_pricing_not_setup_count, json[QString("livePricingNotSetupCount")]);
    m_live_pricing_not_setup_count_isSet = !json[QString("livePricingNotSetupCount")].isNull() && m_live_pricing_not_setup_count_isValid;

    m_live_pricing_timeout_count_isValid = ::OpenAPI::fromJsonValue(m_live_pricing_timeout_count, json[QString("livePricingTimeoutCount")]);
    m_live_pricing_timeout_count_isSet = !json[QString("livePricingTimeoutCount")].isNull() && m_live_pricing_timeout_count_isValid;
}

QString OAIPriceMissingCountDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPriceMissingCountDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_bandwidth_depleted_count_isSet) {
        obj.insert(QString("bandwidthDepletedCount"), ::OpenAPI::toJsonValue(m_bandwidth_depleted_count));
    }
    if (m_cache_rate_missing_count_isSet) {
        obj.insert(QString("cacheRateMissingCount"), ::OpenAPI::toJsonValue(m_cache_rate_missing_count));
    }
    if (m_itinerary_blocked_count_isSet) {
        obj.insert(QString("itineraryBlockedCount"), ::OpenAPI::toJsonValue(m_itinerary_blocked_count));
    }
    if (m_live_pricing_error_count_isSet) {
        obj.insert(QString("livePricingErrorCount"), ::OpenAPI::toJsonValue(m_live_pricing_error_count));
    }
    if (m_live_pricing_not_setup_count_isSet) {
        obj.insert(QString("livePricingNotSetupCount"), ::OpenAPI::toJsonValue(m_live_pricing_not_setup_count));
    }
    if (m_live_pricing_timeout_count_isSet) {
        obj.insert(QString("livePricingTimeoutCount"), ::OpenAPI::toJsonValue(m_live_pricing_timeout_count));
    }
    return obj;
}

QString OAIPriceMissingCountDetails::getBandwidthDepletedCount() const {
    return m_bandwidth_depleted_count;
}
void OAIPriceMissingCountDetails::setBandwidthDepletedCount(const QString &bandwidth_depleted_count) {
    m_bandwidth_depleted_count = bandwidth_depleted_count;
    m_bandwidth_depleted_count_isSet = true;
}

bool OAIPriceMissingCountDetails::is_bandwidth_depleted_count_Set() const{
    return m_bandwidth_depleted_count_isSet;
}

bool OAIPriceMissingCountDetails::is_bandwidth_depleted_count_Valid() const{
    return m_bandwidth_depleted_count_isValid;
}

QString OAIPriceMissingCountDetails::getCacheRateMissingCount() const {
    return m_cache_rate_missing_count;
}
void OAIPriceMissingCountDetails::setCacheRateMissingCount(const QString &cache_rate_missing_count) {
    m_cache_rate_missing_count = cache_rate_missing_count;
    m_cache_rate_missing_count_isSet = true;
}

bool OAIPriceMissingCountDetails::is_cache_rate_missing_count_Set() const{
    return m_cache_rate_missing_count_isSet;
}

bool OAIPriceMissingCountDetails::is_cache_rate_missing_count_Valid() const{
    return m_cache_rate_missing_count_isValid;
}

QString OAIPriceMissingCountDetails::getItineraryBlockedCount() const {
    return m_itinerary_blocked_count;
}
void OAIPriceMissingCountDetails::setItineraryBlockedCount(const QString &itinerary_blocked_count) {
    m_itinerary_blocked_count = itinerary_blocked_count;
    m_itinerary_blocked_count_isSet = true;
}

bool OAIPriceMissingCountDetails::is_itinerary_blocked_count_Set() const{
    return m_itinerary_blocked_count_isSet;
}

bool OAIPriceMissingCountDetails::is_itinerary_blocked_count_Valid() const{
    return m_itinerary_blocked_count_isValid;
}

QString OAIPriceMissingCountDetails::getLivePricingErrorCount() const {
    return m_live_pricing_error_count;
}
void OAIPriceMissingCountDetails::setLivePricingErrorCount(const QString &live_pricing_error_count) {
    m_live_pricing_error_count = live_pricing_error_count;
    m_live_pricing_error_count_isSet = true;
}

bool OAIPriceMissingCountDetails::is_live_pricing_error_count_Set() const{
    return m_live_pricing_error_count_isSet;
}

bool OAIPriceMissingCountDetails::is_live_pricing_error_count_Valid() const{
    return m_live_pricing_error_count_isValid;
}

QString OAIPriceMissingCountDetails::getLivePricingNotSetupCount() const {
    return m_live_pricing_not_setup_count;
}
void OAIPriceMissingCountDetails::setLivePricingNotSetupCount(const QString &live_pricing_not_setup_count) {
    m_live_pricing_not_setup_count = live_pricing_not_setup_count;
    m_live_pricing_not_setup_count_isSet = true;
}

bool OAIPriceMissingCountDetails::is_live_pricing_not_setup_count_Set() const{
    return m_live_pricing_not_setup_count_isSet;
}

bool OAIPriceMissingCountDetails::is_live_pricing_not_setup_count_Valid() const{
    return m_live_pricing_not_setup_count_isValid;
}

QString OAIPriceMissingCountDetails::getLivePricingTimeoutCount() const {
    return m_live_pricing_timeout_count;
}
void OAIPriceMissingCountDetails::setLivePricingTimeoutCount(const QString &live_pricing_timeout_count) {
    m_live_pricing_timeout_count = live_pricing_timeout_count;
    m_live_pricing_timeout_count_isSet = true;
}

bool OAIPriceMissingCountDetails::is_live_pricing_timeout_count_Set() const{
    return m_live_pricing_timeout_count_isSet;
}

bool OAIPriceMissingCountDetails::is_live_pricing_timeout_count_Valid() const{
    return m_live_pricing_timeout_count_isValid;
}

bool OAIPriceMissingCountDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bandwidth_depleted_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_rate_missing_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_itinerary_blocked_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_pricing_error_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_pricing_not_setup_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_pricing_timeout_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPriceMissingCountDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
