/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPriceCoverageBucket.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPriceCoverageBucket::OAIPriceCoverageBucket(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPriceCoverageBucket::OAIPriceCoverageBucket() {
    this->initializeModel();
}

OAIPriceCoverageBucket::~OAIPriceCoverageBucket() {}

void OAIPriceCoverageBucket::initializeModel() {

    m_advance_booking_window_range_isSet = false;
    m_advance_booking_window_range_isValid = false;

    m_available_price_count_isSet = false;
    m_available_price_count_isValid = false;

    m_length_of_stay_range_isSet = false;
    m_length_of_stay_range_isValid = false;

    m_price_coverage_percent_isSet = false;
    m_price_coverage_percent_isValid = false;
}

void OAIPriceCoverageBucket::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPriceCoverageBucket::fromJsonObject(QJsonObject json) {

    m_advance_booking_window_range_isValid = ::OpenAPI::fromJsonValue(m_advance_booking_window_range, json[QString("advanceBookingWindowRange")]);
    m_advance_booking_window_range_isSet = !json[QString("advanceBookingWindowRange")].isNull() && m_advance_booking_window_range_isValid;

    m_available_price_count_isValid = ::OpenAPI::fromJsonValue(m_available_price_count, json[QString("availablePriceCount")]);
    m_available_price_count_isSet = !json[QString("availablePriceCount")].isNull() && m_available_price_count_isValid;

    m_length_of_stay_range_isValid = ::OpenAPI::fromJsonValue(m_length_of_stay_range, json[QString("lengthOfStayRange")]);
    m_length_of_stay_range_isSet = !json[QString("lengthOfStayRange")].isNull() && m_length_of_stay_range_isValid;

    m_price_coverage_percent_isValid = ::OpenAPI::fromJsonValue(m_price_coverage_percent, json[QString("priceCoveragePercent")]);
    m_price_coverage_percent_isSet = !json[QString("priceCoveragePercent")].isNull() && m_price_coverage_percent_isValid;
}

QString OAIPriceCoverageBucket::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPriceCoverageBucket::asJsonObject() const {
    QJsonObject obj;
    if (m_advance_booking_window_range_isSet) {
        obj.insert(QString("advanceBookingWindowRange"), ::OpenAPI::toJsonValue(m_advance_booking_window_range));
    }
    if (m_available_price_count_isSet) {
        obj.insert(QString("availablePriceCount"), ::OpenAPI::toJsonValue(m_available_price_count));
    }
    if (m_length_of_stay_range_isSet) {
        obj.insert(QString("lengthOfStayRange"), ::OpenAPI::toJsonValue(m_length_of_stay_range));
    }
    if (m_price_coverage_percent_isSet) {
        obj.insert(QString("priceCoveragePercent"), ::OpenAPI::toJsonValue(m_price_coverage_percent));
    }
    return obj;
}

QString OAIPriceCoverageBucket::getAdvanceBookingWindowRange() const {
    return m_advance_booking_window_range;
}
void OAIPriceCoverageBucket::setAdvanceBookingWindowRange(const QString &advance_booking_window_range) {
    m_advance_booking_window_range = advance_booking_window_range;
    m_advance_booking_window_range_isSet = true;
}

bool OAIPriceCoverageBucket::is_advance_booking_window_range_Set() const{
    return m_advance_booking_window_range_isSet;
}

bool OAIPriceCoverageBucket::is_advance_booking_window_range_Valid() const{
    return m_advance_booking_window_range_isValid;
}

QString OAIPriceCoverageBucket::getAvailablePriceCount() const {
    return m_available_price_count;
}
void OAIPriceCoverageBucket::setAvailablePriceCount(const QString &available_price_count) {
    m_available_price_count = available_price_count;
    m_available_price_count_isSet = true;
}

bool OAIPriceCoverageBucket::is_available_price_count_Set() const{
    return m_available_price_count_isSet;
}

bool OAIPriceCoverageBucket::is_available_price_count_Valid() const{
    return m_available_price_count_isValid;
}

QString OAIPriceCoverageBucket::getLengthOfStayRange() const {
    return m_length_of_stay_range;
}
void OAIPriceCoverageBucket::setLengthOfStayRange(const QString &length_of_stay_range) {
    m_length_of_stay_range = length_of_stay_range;
    m_length_of_stay_range_isSet = true;
}

bool OAIPriceCoverageBucket::is_length_of_stay_range_Set() const{
    return m_length_of_stay_range_isSet;
}

bool OAIPriceCoverageBucket::is_length_of_stay_range_Valid() const{
    return m_length_of_stay_range_isValid;
}

double OAIPriceCoverageBucket::getPriceCoveragePercent() const {
    return m_price_coverage_percent;
}
void OAIPriceCoverageBucket::setPriceCoveragePercent(const double &price_coverage_percent) {
    m_price_coverage_percent = price_coverage_percent;
    m_price_coverage_percent_isSet = true;
}

bool OAIPriceCoverageBucket::is_price_coverage_percent_Set() const{
    return m_price_coverage_percent_isSet;
}

bool OAIPriceCoverageBucket::is_price_coverage_percent_Valid() const{
    return m_price_coverage_percent_isValid;
}

bool OAIPriceCoverageBucket::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advance_booking_window_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_price_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_of_stay_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_coverage_percent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPriceCoverageBucket::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
