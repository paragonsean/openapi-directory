/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReview.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReview::OAIReview(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReview::OAIReview() {
    this->initializeModel();
}

OAIReview::~OAIReview() {}

void OAIReview::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_review_time_isSet = false;
    m_review_time_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_visit_time_isSet = false;
    m_visit_time_isValid = false;
}

void OAIReview::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReview::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_review_time_isValid = ::OpenAPI::fromJsonValue(m_review_time, json[QString("reviewTime")]);
    m_review_time_isSet = !json[QString("reviewTime")].isNull() && m_review_time_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_visit_time_isValid = ::OpenAPI::fromJsonValue(m_visit_time, json[QString("visitTime")]);
    m_visit_time_isSet = !json[QString("visitTime")].isNull() && m_visit_time_isValid;
}

QString OAIReview::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReview::asJsonObject() const {
    QJsonObject obj;
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_rating.size() > 0) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_review_time_isSet) {
        obj.insert(QString("reviewTime"), ::OpenAPI::toJsonValue(m_review_time));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_visit_time_isSet) {
        obj.insert(QString("visitTime"), ::OpenAPI::toJsonValue(m_visit_time));
    }
    return obj;
}

QString OAIReview::getAuthor() const {
    return m_author;
}
void OAIReview::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIReview::is_author_Set() const{
    return m_author_isSet;
}

bool OAIReview::is_author_Valid() const{
    return m_author_isValid;
}

QString OAIReview::getBody() const {
    return m_body;
}
void OAIReview::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIReview::is_body_Set() const{
    return m_body_isSet;
}

bool OAIReview::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIReview::getLanguageCode() const {
    return m_language_code;
}
void OAIReview::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIReview::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIReview::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAIReview::getLink() const {
    return m_link;
}
void OAIReview::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIReview::is_link_Set() const{
    return m_link_isSet;
}

bool OAIReview::is_link_Valid() const{
    return m_link_isValid;
}

QList<OAIRating> OAIReview::getRating() const {
    return m_rating;
}
void OAIReview::setRating(const QList<OAIRating> &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIReview::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIReview::is_rating_Valid() const{
    return m_rating_isValid;
}

QString OAIReview::getReviewTime() const {
    return m_review_time;
}
void OAIReview::setReviewTime(const QString &review_time) {
    m_review_time = review_time;
    m_review_time_isSet = true;
}

bool OAIReview::is_review_time_Set() const{
    return m_review_time_isSet;
}

bool OAIReview::is_review_time_Valid() const{
    return m_review_time_isValid;
}

QString OAIReview::getTitle() const {
    return m_title;
}
void OAIReview::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIReview::is_title_Set() const{
    return m_title_isSet;
}

bool OAIReview::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIReview::getType() const {
    return m_type;
}
void OAIReview::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIReview::is_type_Set() const{
    return m_type_isSet;
}

bool OAIReview::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIReview::getVisitTime() const {
    return m_visit_time;
}
void OAIReview::setVisitTime(const QString &visit_time) {
    m_visit_time = visit_time;
    m_visit_time_isSet = true;
}

bool OAIReview::is_visit_time_Set() const{
    return m_visit_time_isSet;
}

bool OAIReview::is_visit_time_Valid() const{
    return m_visit_time_isValid;
}

bool OAIReview::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visit_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReview::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
