/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPropertyPerformanceResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPropertyPerformanceResult::OAIPropertyPerformanceResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPropertyPerformanceResult::OAIPropertyPerformanceResult() {
    this->initializeModel();
}

OAIPropertyPerformanceResult::~OAIPropertyPerformanceResult() {}

void OAIPropertyPerformanceResult::initializeModel() {

    m_ads_click_count_isSet = false;
    m_ads_click_count_isValid = false;

    m_ads_clickthrough_rate_isSet = false;
    m_ads_clickthrough_rate_isValid = false;

    m_ads_impression_count_isSet = false;
    m_ads_impression_count_isValid = false;

    m_advance_booking_window_isSet = false;
    m_advance_booking_window_isValid = false;

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_click_count_isSet = false;
    m_click_count_isValid = false;

    m_clickthrough_rate_isSet = false;
    m_clickthrough_rate_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_device_type_isSet = false;
    m_device_type_isValid = false;

    m_high_intent_users_isSet = false;
    m_high_intent_users_isValid = false;

    m_impression_count_isSet = false;
    m_impression_count_isValid = false;

    m_length_of_stay_isSet = false;
    m_length_of_stay_isValid = false;

    m_occupancy_isSet = false;
    m_occupancy_isValid = false;

    m_partner_property_display_name_isSet = false;
    m_partner_property_display_name_isValid = false;

    m_partner_property_id_isSet = false;
    m_partner_property_id_isValid = false;

    m_property_region_code_isSet = false;
    m_property_region_code_isValid = false;

    m_user_region_code_isSet = false;
    m_user_region_code_isValid = false;

    m_vr_website_button_clicks_isSet = false;
    m_vr_website_button_clicks_isValid = false;
}

void OAIPropertyPerformanceResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPropertyPerformanceResult::fromJsonObject(QJsonObject json) {

    m_ads_click_count_isValid = ::OpenAPI::fromJsonValue(m_ads_click_count, json[QString("adsClickCount")]);
    m_ads_click_count_isSet = !json[QString("adsClickCount")].isNull() && m_ads_click_count_isValid;

    m_ads_clickthrough_rate_isValid = ::OpenAPI::fromJsonValue(m_ads_clickthrough_rate, json[QString("adsClickthroughRate")]);
    m_ads_clickthrough_rate_isSet = !json[QString("adsClickthroughRate")].isNull() && m_ads_clickthrough_rate_isValid;

    m_ads_impression_count_isValid = ::OpenAPI::fromJsonValue(m_ads_impression_count, json[QString("adsImpressionCount")]);
    m_ads_impression_count_isSet = !json[QString("adsImpressionCount")].isNull() && m_ads_impression_count_isValid;

    m_advance_booking_window_isValid = ::OpenAPI::fromJsonValue(m_advance_booking_window, json[QString("advanceBookingWindow")]);
    m_advance_booking_window_isSet = !json[QString("advanceBookingWindow")].isNull() && m_advance_booking_window_isValid;

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_click_count_isValid = ::OpenAPI::fromJsonValue(m_click_count, json[QString("clickCount")]);
    m_click_count_isSet = !json[QString("clickCount")].isNull() && m_click_count_isValid;

    m_clickthrough_rate_isValid = ::OpenAPI::fromJsonValue(m_clickthrough_rate, json[QString("clickthroughRate")]);
    m_clickthrough_rate_isSet = !json[QString("clickthroughRate")].isNull() && m_clickthrough_rate_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_device_type_isValid = ::OpenAPI::fromJsonValue(m_device_type, json[QString("deviceType")]);
    m_device_type_isSet = !json[QString("deviceType")].isNull() && m_device_type_isValid;

    m_high_intent_users_isValid = ::OpenAPI::fromJsonValue(m_high_intent_users, json[QString("highIntentUsers")]);
    m_high_intent_users_isSet = !json[QString("highIntentUsers")].isNull() && m_high_intent_users_isValid;

    m_impression_count_isValid = ::OpenAPI::fromJsonValue(m_impression_count, json[QString("impressionCount")]);
    m_impression_count_isSet = !json[QString("impressionCount")].isNull() && m_impression_count_isValid;

    m_length_of_stay_isValid = ::OpenAPI::fromJsonValue(m_length_of_stay, json[QString("lengthOfStay")]);
    m_length_of_stay_isSet = !json[QString("lengthOfStay")].isNull() && m_length_of_stay_isValid;

    m_occupancy_isValid = ::OpenAPI::fromJsonValue(m_occupancy, json[QString("occupancy")]);
    m_occupancy_isSet = !json[QString("occupancy")].isNull() && m_occupancy_isValid;

    m_partner_property_display_name_isValid = ::OpenAPI::fromJsonValue(m_partner_property_display_name, json[QString("partnerPropertyDisplayName")]);
    m_partner_property_display_name_isSet = !json[QString("partnerPropertyDisplayName")].isNull() && m_partner_property_display_name_isValid;

    m_partner_property_id_isValid = ::OpenAPI::fromJsonValue(m_partner_property_id, json[QString("partnerPropertyId")]);
    m_partner_property_id_isSet = !json[QString("partnerPropertyId")].isNull() && m_partner_property_id_isValid;

    m_property_region_code_isValid = ::OpenAPI::fromJsonValue(m_property_region_code, json[QString("propertyRegionCode")]);
    m_property_region_code_isSet = !json[QString("propertyRegionCode")].isNull() && m_property_region_code_isValid;

    m_user_region_code_isValid = ::OpenAPI::fromJsonValue(m_user_region_code, json[QString("userRegionCode")]);
    m_user_region_code_isSet = !json[QString("userRegionCode")].isNull() && m_user_region_code_isValid;

    m_vr_website_button_clicks_isValid = ::OpenAPI::fromJsonValue(m_vr_website_button_clicks, json[QString("vrWebsiteButtonClicks")]);
    m_vr_website_button_clicks_isSet = !json[QString("vrWebsiteButtonClicks")].isNull() && m_vr_website_button_clicks_isValid;
}

QString OAIPropertyPerformanceResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPropertyPerformanceResult::asJsonObject() const {
    QJsonObject obj;
    if (m_ads_click_count_isSet) {
        obj.insert(QString("adsClickCount"), ::OpenAPI::toJsonValue(m_ads_click_count));
    }
    if (m_ads_clickthrough_rate_isSet) {
        obj.insert(QString("adsClickthroughRate"), ::OpenAPI::toJsonValue(m_ads_clickthrough_rate));
    }
    if (m_ads_impression_count_isSet) {
        obj.insert(QString("adsImpressionCount"), ::OpenAPI::toJsonValue(m_ads_impression_count));
    }
    if (m_advance_booking_window_isSet) {
        obj.insert(QString("advanceBookingWindow"), ::OpenAPI::toJsonValue(m_advance_booking_window));
    }
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_click_count_isSet) {
        obj.insert(QString("clickCount"), ::OpenAPI::toJsonValue(m_click_count));
    }
    if (m_clickthrough_rate_isSet) {
        obj.insert(QString("clickthroughRate"), ::OpenAPI::toJsonValue(m_clickthrough_rate));
    }
    if (m_date.isSet()) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_device_type_isSet) {
        obj.insert(QString("deviceType"), ::OpenAPI::toJsonValue(m_device_type));
    }
    if (m_high_intent_users_isSet) {
        obj.insert(QString("highIntentUsers"), ::OpenAPI::toJsonValue(m_high_intent_users));
    }
    if (m_impression_count_isSet) {
        obj.insert(QString("impressionCount"), ::OpenAPI::toJsonValue(m_impression_count));
    }
    if (m_length_of_stay_isSet) {
        obj.insert(QString("lengthOfStay"), ::OpenAPI::toJsonValue(m_length_of_stay));
    }
    if (m_occupancy_isSet) {
        obj.insert(QString("occupancy"), ::OpenAPI::toJsonValue(m_occupancy));
    }
    if (m_partner_property_display_name_isSet) {
        obj.insert(QString("partnerPropertyDisplayName"), ::OpenAPI::toJsonValue(m_partner_property_display_name));
    }
    if (m_partner_property_id_isSet) {
        obj.insert(QString("partnerPropertyId"), ::OpenAPI::toJsonValue(m_partner_property_id));
    }
    if (m_property_region_code_isSet) {
        obj.insert(QString("propertyRegionCode"), ::OpenAPI::toJsonValue(m_property_region_code));
    }
    if (m_user_region_code_isSet) {
        obj.insert(QString("userRegionCode"), ::OpenAPI::toJsonValue(m_user_region_code));
    }
    if (m_vr_website_button_clicks_isSet) {
        obj.insert(QString("vrWebsiteButtonClicks"), ::OpenAPI::toJsonValue(m_vr_website_button_clicks));
    }
    return obj;
}

QString OAIPropertyPerformanceResult::getAdsClickCount() const {
    return m_ads_click_count;
}
void OAIPropertyPerformanceResult::setAdsClickCount(const QString &ads_click_count) {
    m_ads_click_count = ads_click_count;
    m_ads_click_count_isSet = true;
}

bool OAIPropertyPerformanceResult::is_ads_click_count_Set() const{
    return m_ads_click_count_isSet;
}

bool OAIPropertyPerformanceResult::is_ads_click_count_Valid() const{
    return m_ads_click_count_isValid;
}

double OAIPropertyPerformanceResult::getAdsClickthroughRate() const {
    return m_ads_clickthrough_rate;
}
void OAIPropertyPerformanceResult::setAdsClickthroughRate(const double &ads_clickthrough_rate) {
    m_ads_clickthrough_rate = ads_clickthrough_rate;
    m_ads_clickthrough_rate_isSet = true;
}

bool OAIPropertyPerformanceResult::is_ads_clickthrough_rate_Set() const{
    return m_ads_clickthrough_rate_isSet;
}

bool OAIPropertyPerformanceResult::is_ads_clickthrough_rate_Valid() const{
    return m_ads_clickthrough_rate_isValid;
}

QString OAIPropertyPerformanceResult::getAdsImpressionCount() const {
    return m_ads_impression_count;
}
void OAIPropertyPerformanceResult::setAdsImpressionCount(const QString &ads_impression_count) {
    m_ads_impression_count = ads_impression_count;
    m_ads_impression_count_isSet = true;
}

bool OAIPropertyPerformanceResult::is_ads_impression_count_Set() const{
    return m_ads_impression_count_isSet;
}

bool OAIPropertyPerformanceResult::is_ads_impression_count_Valid() const{
    return m_ads_impression_count_isValid;
}

QString OAIPropertyPerformanceResult::getAdvanceBookingWindow() const {
    return m_advance_booking_window;
}
void OAIPropertyPerformanceResult::setAdvanceBookingWindow(const QString &advance_booking_window) {
    m_advance_booking_window = advance_booking_window;
    m_advance_booking_window_isSet = true;
}

bool OAIPropertyPerformanceResult::is_advance_booking_window_Set() const{
    return m_advance_booking_window_isSet;
}

bool OAIPropertyPerformanceResult::is_advance_booking_window_Valid() const{
    return m_advance_booking_window_isValid;
}

QString OAIPropertyPerformanceResult::getBrand() const {
    return m_brand;
}
void OAIPropertyPerformanceResult::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIPropertyPerformanceResult::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIPropertyPerformanceResult::is_brand_Valid() const{
    return m_brand_isValid;
}

QString OAIPropertyPerformanceResult::getClickCount() const {
    return m_click_count;
}
void OAIPropertyPerformanceResult::setClickCount(const QString &click_count) {
    m_click_count = click_count;
    m_click_count_isSet = true;
}

bool OAIPropertyPerformanceResult::is_click_count_Set() const{
    return m_click_count_isSet;
}

bool OAIPropertyPerformanceResult::is_click_count_Valid() const{
    return m_click_count_isValid;
}

double OAIPropertyPerformanceResult::getClickthroughRate() const {
    return m_clickthrough_rate;
}
void OAIPropertyPerformanceResult::setClickthroughRate(const double &clickthrough_rate) {
    m_clickthrough_rate = clickthrough_rate;
    m_clickthrough_rate_isSet = true;
}

bool OAIPropertyPerformanceResult::is_clickthrough_rate_Set() const{
    return m_clickthrough_rate_isSet;
}

bool OAIPropertyPerformanceResult::is_clickthrough_rate_Valid() const{
    return m_clickthrough_rate_isValid;
}

OAIDate OAIPropertyPerformanceResult::getDate() const {
    return m_date;
}
void OAIPropertyPerformanceResult::setDate(const OAIDate &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIPropertyPerformanceResult::is_date_Set() const{
    return m_date_isSet;
}

bool OAIPropertyPerformanceResult::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIPropertyPerformanceResult::getDeviceType() const {
    return m_device_type;
}
void OAIPropertyPerformanceResult::setDeviceType(const QString &device_type) {
    m_device_type = device_type;
    m_device_type_isSet = true;
}

bool OAIPropertyPerformanceResult::is_device_type_Set() const{
    return m_device_type_isSet;
}

bool OAIPropertyPerformanceResult::is_device_type_Valid() const{
    return m_device_type_isValid;
}

bool OAIPropertyPerformanceResult::isHighIntentUsers() const {
    return m_high_intent_users;
}
void OAIPropertyPerformanceResult::setHighIntentUsers(const bool &high_intent_users) {
    m_high_intent_users = high_intent_users;
    m_high_intent_users_isSet = true;
}

bool OAIPropertyPerformanceResult::is_high_intent_users_Set() const{
    return m_high_intent_users_isSet;
}

bool OAIPropertyPerformanceResult::is_high_intent_users_Valid() const{
    return m_high_intent_users_isValid;
}

QString OAIPropertyPerformanceResult::getImpressionCount() const {
    return m_impression_count;
}
void OAIPropertyPerformanceResult::setImpressionCount(const QString &impression_count) {
    m_impression_count = impression_count;
    m_impression_count_isSet = true;
}

bool OAIPropertyPerformanceResult::is_impression_count_Set() const{
    return m_impression_count_isSet;
}

bool OAIPropertyPerformanceResult::is_impression_count_Valid() const{
    return m_impression_count_isValid;
}

QString OAIPropertyPerformanceResult::getLengthOfStay() const {
    return m_length_of_stay;
}
void OAIPropertyPerformanceResult::setLengthOfStay(const QString &length_of_stay) {
    m_length_of_stay = length_of_stay;
    m_length_of_stay_isSet = true;
}

bool OAIPropertyPerformanceResult::is_length_of_stay_Set() const{
    return m_length_of_stay_isSet;
}

bool OAIPropertyPerformanceResult::is_length_of_stay_Valid() const{
    return m_length_of_stay_isValid;
}

QString OAIPropertyPerformanceResult::getOccupancy() const {
    return m_occupancy;
}
void OAIPropertyPerformanceResult::setOccupancy(const QString &occupancy) {
    m_occupancy = occupancy;
    m_occupancy_isSet = true;
}

bool OAIPropertyPerformanceResult::is_occupancy_Set() const{
    return m_occupancy_isSet;
}

bool OAIPropertyPerformanceResult::is_occupancy_Valid() const{
    return m_occupancy_isValid;
}

QString OAIPropertyPerformanceResult::getPartnerPropertyDisplayName() const {
    return m_partner_property_display_name;
}
void OAIPropertyPerformanceResult::setPartnerPropertyDisplayName(const QString &partner_property_display_name) {
    m_partner_property_display_name = partner_property_display_name;
    m_partner_property_display_name_isSet = true;
}

bool OAIPropertyPerformanceResult::is_partner_property_display_name_Set() const{
    return m_partner_property_display_name_isSet;
}

bool OAIPropertyPerformanceResult::is_partner_property_display_name_Valid() const{
    return m_partner_property_display_name_isValid;
}

QString OAIPropertyPerformanceResult::getPartnerPropertyId() const {
    return m_partner_property_id;
}
void OAIPropertyPerformanceResult::setPartnerPropertyId(const QString &partner_property_id) {
    m_partner_property_id = partner_property_id;
    m_partner_property_id_isSet = true;
}

bool OAIPropertyPerformanceResult::is_partner_property_id_Set() const{
    return m_partner_property_id_isSet;
}

bool OAIPropertyPerformanceResult::is_partner_property_id_Valid() const{
    return m_partner_property_id_isValid;
}

QString OAIPropertyPerformanceResult::getPropertyRegionCode() const {
    return m_property_region_code;
}
void OAIPropertyPerformanceResult::setPropertyRegionCode(const QString &property_region_code) {
    m_property_region_code = property_region_code;
    m_property_region_code_isSet = true;
}

bool OAIPropertyPerformanceResult::is_property_region_code_Set() const{
    return m_property_region_code_isSet;
}

bool OAIPropertyPerformanceResult::is_property_region_code_Valid() const{
    return m_property_region_code_isValid;
}

QString OAIPropertyPerformanceResult::getUserRegionCode() const {
    return m_user_region_code;
}
void OAIPropertyPerformanceResult::setUserRegionCode(const QString &user_region_code) {
    m_user_region_code = user_region_code;
    m_user_region_code_isSet = true;
}

bool OAIPropertyPerformanceResult::is_user_region_code_Set() const{
    return m_user_region_code_isSet;
}

bool OAIPropertyPerformanceResult::is_user_region_code_Valid() const{
    return m_user_region_code_isValid;
}

QString OAIPropertyPerformanceResult::getVrWebsiteButtonClicks() const {
    return m_vr_website_button_clicks;
}
void OAIPropertyPerformanceResult::setVrWebsiteButtonClicks(const QString &vr_website_button_clicks) {
    m_vr_website_button_clicks = vr_website_button_clicks;
    m_vr_website_button_clicks_isSet = true;
}

bool OAIPropertyPerformanceResult::is_vr_website_button_clicks_Set() const{
    return m_vr_website_button_clicks_isSet;
}

bool OAIPropertyPerformanceResult::is_vr_website_button_clicks_Valid() const{
    return m_vr_website_button_clicks_isValid;
}

bool OAIPropertyPerformanceResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ads_click_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ads_clickthrough_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ads_impression_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advance_booking_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_click_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clickthrough_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_intent_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_impression_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_of_stay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_occupancy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_property_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_property_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_region_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_region_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vr_website_button_clicks_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPropertyPerformanceResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
