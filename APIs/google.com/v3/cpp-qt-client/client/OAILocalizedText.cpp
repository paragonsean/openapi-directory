/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocalizedText.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocalizedText::OAILocalizedText(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocalizedText::OAILocalizedText() {
    this->initializeModel();
}

OAILocalizedText::~OAILocalizedText() {}

void OAILocalizedText::initializeModel() {

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAILocalizedText::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocalizedText::fromJsonObject(QJsonObject json) {

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAILocalizedText::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocalizedText::asJsonObject() const {
    QJsonObject obj;
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAILocalizedText::getLanguageCode() const {
    return m_language_code;
}
void OAILocalizedText::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAILocalizedText::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAILocalizedText::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAILocalizedText::getText() const {
    return m_text;
}
void OAILocalizedText::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAILocalizedText::is_text_Set() const{
    return m_text_isSet;
}

bool OAILocalizedText::is_text_Valid() const{
    return m_text_isValid;
}

bool OAILocalizedText::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocalizedText::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
