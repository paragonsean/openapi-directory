/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIParsedListing.h
 *
 * A parsed listing
 */

#ifndef OAIParsedListing_H
#define OAIParsedListing_H

#include <QJsonObject>

#include "OAIDataIssueDetail.h"
#include "OAIImage.h"
#include "OAILatLng.h"
#include "OAILocalizedText.h"
#include "OAIReview.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILocalizedText;
class OAIDataIssueDetail;
class OAIImage;
class OAILatLng;
class OAIReview;

class OAIParsedListing : public OAIObject {
public:
    OAIParsedListing();
    OAIParsedListing(QString json);
    ~OAIParsedListing() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBrand() const;
    void setBrand(const QString &brand);
    bool is_brand_Set() const;
    bool is_brand_Valid() const;

    QList<OAILocalizedText> getCategory() const;
    void setCategory(const QList<OAILocalizedText> &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    QList<OAIDataIssueDetail> getDataIssueDetail() const;
    void setDataIssueDetail(const QList<OAIDataIssueDetail> &data_issue_detail);
    bool is_data_issue_detail_Set() const;
    bool is_data_issue_detail_Valid() const;

    QList<OAILocalizedText> getDescription() const;
    void setDescription(const QList<OAILocalizedText> &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList<OAIImage> getImage() const;
    void setImage(const QList<OAIImage> &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    qint32 getImprecisionRadiusMeters() const;
    void setImprecisionRadiusMeters(const qint32 &imprecision_radius_meters);
    bool is_imprecision_radius_meters_Set() const;
    bool is_imprecision_radius_meters_Valid() const;

    bool isIsServed() const;
    void setIsServed(const bool &is_served);
    bool is_is_served_Set() const;
    bool is_is_served_Valid() const;

    QList<OAILocalizedText> getListingName() const;
    void setListingName(const QList<OAILocalizedText> &listing_name);
    bool is_listing_name_Set() const;
    bool is_listing_name_Valid() const;

    OAILatLng getLocation() const;
    void setLocation(const OAILatLng &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QString getPartnerListId() const;
    void setPartnerListId(const QString &partner_list_id);
    bool is_partner_list_id_Set() const;
    bool is_partner_list_id_Valid() const;

    QString getRegionCode() const;
    void setRegionCode(const QString &region_code);
    bool is_region_code_Set() const;
    bool is_region_code_Valid() const;

    QList<OAIReview> getReview() const;
    void setReview(const QList<OAIReview> &review);
    bool is_review_Set() const;
    bool is_review_Valid() const;

    QMap<QString, QString> getUnitAttributes() const;
    void setUnitAttributes(const QMap<QString, QString> &unit_attributes);
    bool is_unit_attributes_Set() const;
    bool is_unit_attributes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_brand;
    bool m_brand_isSet;
    bool m_brand_isValid;

    QList<OAILocalizedText> m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    QList<OAIDataIssueDetail> m_data_issue_detail;
    bool m_data_issue_detail_isSet;
    bool m_data_issue_detail_isValid;

    QList<OAILocalizedText> m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList<OAIImage> m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    qint32 m_imprecision_radius_meters;
    bool m_imprecision_radius_meters_isSet;
    bool m_imprecision_radius_meters_isValid;

    bool m_is_served;
    bool m_is_served_isSet;
    bool m_is_served_isValid;

    QList<OAILocalizedText> m_listing_name;
    bool m_listing_name_isSet;
    bool m_listing_name_isValid;

    OAILatLng m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QString m_partner_list_id;
    bool m_partner_list_id_isSet;
    bool m_partner_list_id_isValid;

    QString m_region_code;
    bool m_region_code_isSet;
    bool m_region_code_isValid;

    QList<OAIReview> m_review;
    bool m_review_isSet;
    bool m_review_isValid;

    QMap<QString, QString> m_unit_attributes;
    bool m_unit_attributes_isSet;
    bool m_unit_attributes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIParsedListing)

#endif // OAIParsedListing_H
