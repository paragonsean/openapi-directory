/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHotelView.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHotelView::OAIHotelView(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHotelView::OAIHotelView() {
    this->initializeModel();
}

OAIHotelView::~OAIHotelView() {}

void OAIHotelView::initializeModel() {

    m_data_issue_detail_isSet = false;
    m_data_issue_detail_isValid = false;

    m_data_issues_isSet = false;
    m_data_issues_isValid = false;

    m_google_cluster_id_isSet = false;
    m_google_cluster_id_isValid = false;

    m_google_hotel_display_name_isSet = false;
    m_google_hotel_display_name_isValid = false;

    m_google_hotel_id_isSet = false;
    m_google_hotel_id_isValid = false;

    m_live_on_google_isSet = false;
    m_live_on_google_isValid = false;

    m_match_status_isSet = false;
    m_match_status_isValid = false;

    m_overclustered_partner_hotel_ids_isSet = false;
    m_overclustered_partner_hotel_ids_isValid = false;

    m_partner_hotel_display_name_isSet = false;
    m_partner_hotel_display_name_isValid = false;

    m_partner_hotel_id_isSet = false;
    m_partner_hotel_id_isValid = false;

    m_primary_overclustered_partner_hotel_id_isSet = false;
    m_primary_overclustered_partner_hotel_id_isValid = false;

    m_property_details_isSet = false;
    m_property_details_isValid = false;
}

void OAIHotelView::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHotelView::fromJsonObject(QJsonObject json) {

    m_data_issue_detail_isValid = ::OpenAPI::fromJsonValue(m_data_issue_detail, json[QString("dataIssueDetail")]);
    m_data_issue_detail_isSet = !json[QString("dataIssueDetail")].isNull() && m_data_issue_detail_isValid;

    m_data_issues_isValid = ::OpenAPI::fromJsonValue(m_data_issues, json[QString("dataIssues")]);
    m_data_issues_isSet = !json[QString("dataIssues")].isNull() && m_data_issues_isValid;

    m_google_cluster_id_isValid = ::OpenAPI::fromJsonValue(m_google_cluster_id, json[QString("googleClusterId")]);
    m_google_cluster_id_isSet = !json[QString("googleClusterId")].isNull() && m_google_cluster_id_isValid;

    m_google_hotel_display_name_isValid = ::OpenAPI::fromJsonValue(m_google_hotel_display_name, json[QString("googleHotelDisplayName")]);
    m_google_hotel_display_name_isSet = !json[QString("googleHotelDisplayName")].isNull() && m_google_hotel_display_name_isValid;

    m_google_hotel_id_isValid = ::OpenAPI::fromJsonValue(m_google_hotel_id, json[QString("googleHotelId")]);
    m_google_hotel_id_isSet = !json[QString("googleHotelId")].isNull() && m_google_hotel_id_isValid;

    m_live_on_google_isValid = ::OpenAPI::fromJsonValue(m_live_on_google, json[QString("liveOnGoogle")]);
    m_live_on_google_isSet = !json[QString("liveOnGoogle")].isNull() && m_live_on_google_isValid;

    m_match_status_isValid = ::OpenAPI::fromJsonValue(m_match_status, json[QString("matchStatus")]);
    m_match_status_isSet = !json[QString("matchStatus")].isNull() && m_match_status_isValid;

    m_overclustered_partner_hotel_ids_isValid = ::OpenAPI::fromJsonValue(m_overclustered_partner_hotel_ids, json[QString("overclusteredPartnerHotelIds")]);
    m_overclustered_partner_hotel_ids_isSet = !json[QString("overclusteredPartnerHotelIds")].isNull() && m_overclustered_partner_hotel_ids_isValid;

    m_partner_hotel_display_name_isValid = ::OpenAPI::fromJsonValue(m_partner_hotel_display_name, json[QString("partnerHotelDisplayName")]);
    m_partner_hotel_display_name_isSet = !json[QString("partnerHotelDisplayName")].isNull() && m_partner_hotel_display_name_isValid;

    m_partner_hotel_id_isValid = ::OpenAPI::fromJsonValue(m_partner_hotel_id, json[QString("partnerHotelId")]);
    m_partner_hotel_id_isSet = !json[QString("partnerHotelId")].isNull() && m_partner_hotel_id_isValid;

    m_primary_overclustered_partner_hotel_id_isValid = ::OpenAPI::fromJsonValue(m_primary_overclustered_partner_hotel_id, json[QString("primaryOverclusteredPartnerHotelId")]);
    m_primary_overclustered_partner_hotel_id_isSet = !json[QString("primaryOverclusteredPartnerHotelId")].isNull() && m_primary_overclustered_partner_hotel_id_isValid;

    m_property_details_isValid = ::OpenAPI::fromJsonValue(m_property_details, json[QString("propertyDetails")]);
    m_property_details_isSet = !json[QString("propertyDetails")].isNull() && m_property_details_isValid;
}

QString OAIHotelView::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHotelView::asJsonObject() const {
    QJsonObject obj;
    if (m_data_issue_detail.size() > 0) {
        obj.insert(QString("dataIssueDetail"), ::OpenAPI::toJsonValue(m_data_issue_detail));
    }
    if (m_data_issues.size() > 0) {
        obj.insert(QString("dataIssues"), ::OpenAPI::toJsonValue(m_data_issues));
    }
    if (m_google_cluster_id_isSet) {
        obj.insert(QString("googleClusterId"), ::OpenAPI::toJsonValue(m_google_cluster_id));
    }
    if (m_google_hotel_display_name_isSet) {
        obj.insert(QString("googleHotelDisplayName"), ::OpenAPI::toJsonValue(m_google_hotel_display_name));
    }
    if (m_google_hotel_id_isSet) {
        obj.insert(QString("googleHotelId"), ::OpenAPI::toJsonValue(m_google_hotel_id));
    }
    if (m_live_on_google_isSet) {
        obj.insert(QString("liveOnGoogle"), ::OpenAPI::toJsonValue(m_live_on_google));
    }
    if (m_match_status_isSet) {
        obj.insert(QString("matchStatus"), ::OpenAPI::toJsonValue(m_match_status));
    }
    if (m_overclustered_partner_hotel_ids.size() > 0) {
        obj.insert(QString("overclusteredPartnerHotelIds"), ::OpenAPI::toJsonValue(m_overclustered_partner_hotel_ids));
    }
    if (m_partner_hotel_display_name_isSet) {
        obj.insert(QString("partnerHotelDisplayName"), ::OpenAPI::toJsonValue(m_partner_hotel_display_name));
    }
    if (m_partner_hotel_id_isSet) {
        obj.insert(QString("partnerHotelId"), ::OpenAPI::toJsonValue(m_partner_hotel_id));
    }
    if (m_primary_overclustered_partner_hotel_id_isSet) {
        obj.insert(QString("primaryOverclusteredPartnerHotelId"), ::OpenAPI::toJsonValue(m_primary_overclustered_partner_hotel_id));
    }
    if (m_property_details_isSet) {
        obj.insert(QString("propertyDetails"), ::OpenAPI::toJsonValue(m_property_details));
    }
    return obj;
}

QList<OAIDataIssueDetail> OAIHotelView::getDataIssueDetail() const {
    return m_data_issue_detail;
}
void OAIHotelView::setDataIssueDetail(const QList<OAIDataIssueDetail> &data_issue_detail) {
    m_data_issue_detail = data_issue_detail;
    m_data_issue_detail_isSet = true;
}

bool OAIHotelView::is_data_issue_detail_Set() const{
    return m_data_issue_detail_isSet;
}

bool OAIHotelView::is_data_issue_detail_Valid() const{
    return m_data_issue_detail_isValid;
}

QList<QString> OAIHotelView::getDataIssues() const {
    return m_data_issues;
}
void OAIHotelView::setDataIssues(const QList<QString> &data_issues) {
    m_data_issues = data_issues;
    m_data_issues_isSet = true;
}

bool OAIHotelView::is_data_issues_Set() const{
    return m_data_issues_isSet;
}

bool OAIHotelView::is_data_issues_Valid() const{
    return m_data_issues_isValid;
}

QString OAIHotelView::getGoogleClusterId() const {
    return m_google_cluster_id;
}
void OAIHotelView::setGoogleClusterId(const QString &google_cluster_id) {
    m_google_cluster_id = google_cluster_id;
    m_google_cluster_id_isSet = true;
}

bool OAIHotelView::is_google_cluster_id_Set() const{
    return m_google_cluster_id_isSet;
}

bool OAIHotelView::is_google_cluster_id_Valid() const{
    return m_google_cluster_id_isValid;
}

QString OAIHotelView::getGoogleHotelDisplayName() const {
    return m_google_hotel_display_name;
}
void OAIHotelView::setGoogleHotelDisplayName(const QString &google_hotel_display_name) {
    m_google_hotel_display_name = google_hotel_display_name;
    m_google_hotel_display_name_isSet = true;
}

bool OAIHotelView::is_google_hotel_display_name_Set() const{
    return m_google_hotel_display_name_isSet;
}

bool OAIHotelView::is_google_hotel_display_name_Valid() const{
    return m_google_hotel_display_name_isValid;
}

QString OAIHotelView::getGoogleHotelId() const {
    return m_google_hotel_id;
}
void OAIHotelView::setGoogleHotelId(const QString &google_hotel_id) {
    m_google_hotel_id = google_hotel_id;
    m_google_hotel_id_isSet = true;
}

bool OAIHotelView::is_google_hotel_id_Set() const{
    return m_google_hotel_id_isSet;
}

bool OAIHotelView::is_google_hotel_id_Valid() const{
    return m_google_hotel_id_isValid;
}

bool OAIHotelView::isLiveOnGoogle() const {
    return m_live_on_google;
}
void OAIHotelView::setLiveOnGoogle(const bool &live_on_google) {
    m_live_on_google = live_on_google;
    m_live_on_google_isSet = true;
}

bool OAIHotelView::is_live_on_google_Set() const{
    return m_live_on_google_isSet;
}

bool OAIHotelView::is_live_on_google_Valid() const{
    return m_live_on_google_isValid;
}

QString OAIHotelView::getMatchStatus() const {
    return m_match_status;
}
void OAIHotelView::setMatchStatus(const QString &match_status) {
    m_match_status = match_status;
    m_match_status_isSet = true;
}

bool OAIHotelView::is_match_status_Set() const{
    return m_match_status_isSet;
}

bool OAIHotelView::is_match_status_Valid() const{
    return m_match_status_isValid;
}

QList<QString> OAIHotelView::getOverclusteredPartnerHotelIds() const {
    return m_overclustered_partner_hotel_ids;
}
void OAIHotelView::setOverclusteredPartnerHotelIds(const QList<QString> &overclustered_partner_hotel_ids) {
    m_overclustered_partner_hotel_ids = overclustered_partner_hotel_ids;
    m_overclustered_partner_hotel_ids_isSet = true;
}

bool OAIHotelView::is_overclustered_partner_hotel_ids_Set() const{
    return m_overclustered_partner_hotel_ids_isSet;
}

bool OAIHotelView::is_overclustered_partner_hotel_ids_Valid() const{
    return m_overclustered_partner_hotel_ids_isValid;
}

QString OAIHotelView::getPartnerHotelDisplayName() const {
    return m_partner_hotel_display_name;
}
void OAIHotelView::setPartnerHotelDisplayName(const QString &partner_hotel_display_name) {
    m_partner_hotel_display_name = partner_hotel_display_name;
    m_partner_hotel_display_name_isSet = true;
}

bool OAIHotelView::is_partner_hotel_display_name_Set() const{
    return m_partner_hotel_display_name_isSet;
}

bool OAIHotelView::is_partner_hotel_display_name_Valid() const{
    return m_partner_hotel_display_name_isValid;
}

QString OAIHotelView::getPartnerHotelId() const {
    return m_partner_hotel_id;
}
void OAIHotelView::setPartnerHotelId(const QString &partner_hotel_id) {
    m_partner_hotel_id = partner_hotel_id;
    m_partner_hotel_id_isSet = true;
}

bool OAIHotelView::is_partner_hotel_id_Set() const{
    return m_partner_hotel_id_isSet;
}

bool OAIHotelView::is_partner_hotel_id_Valid() const{
    return m_partner_hotel_id_isValid;
}

QString OAIHotelView::getPrimaryOverclusteredPartnerHotelId() const {
    return m_primary_overclustered_partner_hotel_id;
}
void OAIHotelView::setPrimaryOverclusteredPartnerHotelId(const QString &primary_overclustered_partner_hotel_id) {
    m_primary_overclustered_partner_hotel_id = primary_overclustered_partner_hotel_id;
    m_primary_overclustered_partner_hotel_id_isSet = true;
}

bool OAIHotelView::is_primary_overclustered_partner_hotel_id_Set() const{
    return m_primary_overclustered_partner_hotel_id_isSet;
}

bool OAIHotelView::is_primary_overclustered_partner_hotel_id_Valid() const{
    return m_primary_overclustered_partner_hotel_id_isValid;
}

QString OAIHotelView::getPropertyDetails() const {
    return m_property_details;
}
void OAIHotelView::setPropertyDetails(const QString &property_details) {
    m_property_details = property_details;
    m_property_details_isSet = true;
}

bool OAIHotelView::is_property_details_Set() const{
    return m_property_details_isSet;
}

bool OAIHotelView::is_property_details_Valid() const{
    return m_property_details_isValid;
}

bool OAIHotelView::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_issue_detail.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_issues.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_cluster_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_hotel_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_hotel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_on_google_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overclustered_partner_hotel_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_hotel_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_hotel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_overclustered_partner_hotel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_details_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHotelView::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
