/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINoPriceCountDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINoPriceCountDetails::OAINoPriceCountDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINoPriceCountDetails::OAINoPriceCountDetails() {
    this->initializeModel();
}

OAINoPriceCountDetails::~OAINoPriceCountDetails() {}

void OAINoPriceCountDetails::initializeModel() {

    m_live_pricing_config_issue_count_isSet = false;
    m_live_pricing_config_issue_count_isValid = false;

    m_live_pricing_not_available_count_isSet = false;
    m_live_pricing_not_available_count_isValid = false;

    m_live_pricing_not_triggered_count_isSet = false;
    m_live_pricing_not_triggered_count_isValid = false;

    m_live_pricing_other_reason_count_isSet = false;
    m_live_pricing_other_reason_count_isValid = false;

    m_live_pricing_technical_issue_count_isSet = false;
    m_live_pricing_technical_issue_count_isValid = false;
}

void OAINoPriceCountDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINoPriceCountDetails::fromJsonObject(QJsonObject json) {

    m_live_pricing_config_issue_count_isValid = ::OpenAPI::fromJsonValue(m_live_pricing_config_issue_count, json[QString("livePricingConfigIssueCount")]);
    m_live_pricing_config_issue_count_isSet = !json[QString("livePricingConfigIssueCount")].isNull() && m_live_pricing_config_issue_count_isValid;

    m_live_pricing_not_available_count_isValid = ::OpenAPI::fromJsonValue(m_live_pricing_not_available_count, json[QString("livePricingNotAvailableCount")]);
    m_live_pricing_not_available_count_isSet = !json[QString("livePricingNotAvailableCount")].isNull() && m_live_pricing_not_available_count_isValid;

    m_live_pricing_not_triggered_count_isValid = ::OpenAPI::fromJsonValue(m_live_pricing_not_triggered_count, json[QString("livePricingNotTriggeredCount")]);
    m_live_pricing_not_triggered_count_isSet = !json[QString("livePricingNotTriggeredCount")].isNull() && m_live_pricing_not_triggered_count_isValid;

    m_live_pricing_other_reason_count_isValid = ::OpenAPI::fromJsonValue(m_live_pricing_other_reason_count, json[QString("livePricingOtherReasonCount")]);
    m_live_pricing_other_reason_count_isSet = !json[QString("livePricingOtherReasonCount")].isNull() && m_live_pricing_other_reason_count_isValid;

    m_live_pricing_technical_issue_count_isValid = ::OpenAPI::fromJsonValue(m_live_pricing_technical_issue_count, json[QString("livePricingTechnicalIssueCount")]);
    m_live_pricing_technical_issue_count_isSet = !json[QString("livePricingTechnicalIssueCount")].isNull() && m_live_pricing_technical_issue_count_isValid;
}

QString OAINoPriceCountDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINoPriceCountDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_live_pricing_config_issue_count_isSet) {
        obj.insert(QString("livePricingConfigIssueCount"), ::OpenAPI::toJsonValue(m_live_pricing_config_issue_count));
    }
    if (m_live_pricing_not_available_count_isSet) {
        obj.insert(QString("livePricingNotAvailableCount"), ::OpenAPI::toJsonValue(m_live_pricing_not_available_count));
    }
    if (m_live_pricing_not_triggered_count_isSet) {
        obj.insert(QString("livePricingNotTriggeredCount"), ::OpenAPI::toJsonValue(m_live_pricing_not_triggered_count));
    }
    if (m_live_pricing_other_reason_count_isSet) {
        obj.insert(QString("livePricingOtherReasonCount"), ::OpenAPI::toJsonValue(m_live_pricing_other_reason_count));
    }
    if (m_live_pricing_technical_issue_count_isSet) {
        obj.insert(QString("livePricingTechnicalIssueCount"), ::OpenAPI::toJsonValue(m_live_pricing_technical_issue_count));
    }
    return obj;
}

QString OAINoPriceCountDetails::getLivePricingConfigIssueCount() const {
    return m_live_pricing_config_issue_count;
}
void OAINoPriceCountDetails::setLivePricingConfigIssueCount(const QString &live_pricing_config_issue_count) {
    m_live_pricing_config_issue_count = live_pricing_config_issue_count;
    m_live_pricing_config_issue_count_isSet = true;
}

bool OAINoPriceCountDetails::is_live_pricing_config_issue_count_Set() const{
    return m_live_pricing_config_issue_count_isSet;
}

bool OAINoPriceCountDetails::is_live_pricing_config_issue_count_Valid() const{
    return m_live_pricing_config_issue_count_isValid;
}

QString OAINoPriceCountDetails::getLivePricingNotAvailableCount() const {
    return m_live_pricing_not_available_count;
}
void OAINoPriceCountDetails::setLivePricingNotAvailableCount(const QString &live_pricing_not_available_count) {
    m_live_pricing_not_available_count = live_pricing_not_available_count;
    m_live_pricing_not_available_count_isSet = true;
}

bool OAINoPriceCountDetails::is_live_pricing_not_available_count_Set() const{
    return m_live_pricing_not_available_count_isSet;
}

bool OAINoPriceCountDetails::is_live_pricing_not_available_count_Valid() const{
    return m_live_pricing_not_available_count_isValid;
}

QString OAINoPriceCountDetails::getLivePricingNotTriggeredCount() const {
    return m_live_pricing_not_triggered_count;
}
void OAINoPriceCountDetails::setLivePricingNotTriggeredCount(const QString &live_pricing_not_triggered_count) {
    m_live_pricing_not_triggered_count = live_pricing_not_triggered_count;
    m_live_pricing_not_triggered_count_isSet = true;
}

bool OAINoPriceCountDetails::is_live_pricing_not_triggered_count_Set() const{
    return m_live_pricing_not_triggered_count_isSet;
}

bool OAINoPriceCountDetails::is_live_pricing_not_triggered_count_Valid() const{
    return m_live_pricing_not_triggered_count_isValid;
}

QString OAINoPriceCountDetails::getLivePricingOtherReasonCount() const {
    return m_live_pricing_other_reason_count;
}
void OAINoPriceCountDetails::setLivePricingOtherReasonCount(const QString &live_pricing_other_reason_count) {
    m_live_pricing_other_reason_count = live_pricing_other_reason_count;
    m_live_pricing_other_reason_count_isSet = true;
}

bool OAINoPriceCountDetails::is_live_pricing_other_reason_count_Set() const{
    return m_live_pricing_other_reason_count_isSet;
}

bool OAINoPriceCountDetails::is_live_pricing_other_reason_count_Valid() const{
    return m_live_pricing_other_reason_count_isValid;
}

QString OAINoPriceCountDetails::getLivePricingTechnicalIssueCount() const {
    return m_live_pricing_technical_issue_count;
}
void OAINoPriceCountDetails::setLivePricingTechnicalIssueCount(const QString &live_pricing_technical_issue_count) {
    m_live_pricing_technical_issue_count = live_pricing_technical_issue_count;
    m_live_pricing_technical_issue_count_isSet = true;
}

bool OAINoPriceCountDetails::is_live_pricing_technical_issue_count_Set() const{
    return m_live_pricing_technical_issue_count_isSet;
}

bool OAINoPriceCountDetails::is_live_pricing_technical_issue_count_Valid() const{
    return m_live_pricing_technical_issue_count_isValid;
}

bool OAINoPriceCountDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_live_pricing_config_issue_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_pricing_not_available_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_pricing_not_triggered_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_pricing_other_reason_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_pricing_technical_issue_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINoPriceCountDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
