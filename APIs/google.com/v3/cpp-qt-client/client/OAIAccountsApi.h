/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountsApi_H
#define OAI_OAIAccountsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountLink.h"
#include "OAIBrand.h"
#include "OAICreateReconciliationReportResponse.h"
#include "OAIIcon.h"
#include "OAIListAccountLinksResponse.h"
#include "OAIListBrandsResponse.h"
#include "OAIListHotelViewsResponse.h"
#include "OAIListIconsResponse.h"
#include "OAIListPriceAccuracyViewsResponse.h"
#include "OAIListPriceCoverageViewsResponse.h"
#include "OAIListReconciliationReportsResponse.h"
#include "OAIObject.h"
#include "OAIPriceCoverageView.h"
#include "OAIQueryFreeBookingLinksReportResponse.h"
#include "OAIQueryParticipationReportResponse.h"
#include "OAIQueryPropertyPerformanceReportResponse.h"
#include "OAIReconciliationReport.h"
#include "OAISetLiveOnGoogleRequest.h"
#include "OAISetLiveOnGoogleResponse.h"
#include "OAISummarizeHotelViewsResponse.h"
#include "OAISummarizePriceAccuracyResponse.h"
#include "OAIValidateReconciliationReportResponse.h"
#include "OAIVerifyListingsRequest.h"
#include "OAIVerifyListingsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountsApi : public QObject {
    Q_OBJECT

public:
    OAIAccountsApi(const int timeOut = 0);
    ~OAIAccountsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_account_link OAIAccountLink [optional]
    */
    virtual void travelpartner_accounts_accountLinks_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAccountLink> &oai_account_link = ::OpenAPI::OptionalParam<OAIAccountLink>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void travelpartner_accounts_accountLinks_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void travelpartner_accounts_accountLinks_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  brand_id QString [optional]
    * @param[in]  oai_brand OAIBrand [optional]
    */
    virtual void travelpartner_accounts_brands_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &brand_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBrand> &oai_brand = ::OpenAPI::OptionalParam<OAIBrand>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void travelpartner_accounts_brands_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  allow_missing bool [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_brand OAIBrand [optional]
    */
    virtual void travelpartner_accounts_brands_patch(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &allow_missing = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBrand> &oai_brand = ::OpenAPI::OptionalParam<OAIBrand>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  aggregate_by QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void travelpartner_accounts_freeBookingLinksReportViews_query(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &aggregate_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void travelpartner_accounts_hotelViews_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void travelpartner_accounts_hotelViews_summarize(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_live_on_google_request OAISetLiveOnGoogleRequest [optional]
    */
    virtual void travelpartner_accounts_hotels_setLiveOnGoogle(const QString &account, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetLiveOnGoogleRequest> &oai_set_live_on_google_request = ::OpenAPI::OptionalParam<OAISetLiveOnGoogleRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_icon OAIIcon [optional]
    */
    virtual void travelpartner_accounts_icons_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIIcon> &oai_icon = ::OpenAPI::OptionalParam<OAIIcon>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void travelpartner_accounts_icons_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_verify_listings_request OAIVerifyListingsRequest [optional]
    */
    virtual void travelpartner_accounts_listings_verify(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIVerifyListingsRequest> &oai_verify_listings_request = ::OpenAPI::OptionalParam<OAIVerifyListingsRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  aggregate_by QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void travelpartner_accounts_participationReportViews_query(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &aggregate_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void travelpartner_accounts_priceAccuracyViews_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void travelpartner_accounts_priceAccuracyViews_summarize(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void travelpartner_accounts_priceCoverageViews_getLatest(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void travelpartner_accounts_priceCoverageViews_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  aggregate_by QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void travelpartner_accounts_propertyPerformanceReportViews_query(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &aggregate_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_reconciliation_report OAIReconciliationReport [optional]
    */
    virtual void travelpartner_accounts_reconciliationReports_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIReconciliationReport> &oai_reconciliation_report = ::OpenAPI::OptionalParam<OAIReconciliationReport>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  include_matched_prices bool [optional]
    * @param[in]  include_non_scoring bool [optional]
    * @param[in]  include_pixels bool [optional]
    */
    virtual void travelpartner_accounts_reconciliationReports_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_matched_prices = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_non_scoring = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_pixels = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  end_date QString [optional]
    * @param[in]  start_date QString [optional]
    */
    virtual void travelpartner_accounts_reconciliationReports_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_reconciliation_report OAIReconciliationReport [optional]
    */
    virtual void travelpartner_accounts_reconciliationReports_validate(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIReconciliationReport> &oai_reconciliation_report = ::OpenAPI::OptionalParam<OAIReconciliationReport>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void travelpartner_accounts_accountLinks_createCallback(OAIHttpRequestWorker *worker);
    void travelpartner_accounts_accountLinks_deleteCallback(OAIHttpRequestWorker *worker);
    void travelpartner_accounts_accountLinks_listCallback(OAIHttpRequestWorker *worker);
    void travelpartner_accounts_brands_createCallback(OAIHttpRequestWorker *worker);
    void travelpartner_accounts_brands_listCallback(OAIHttpRequestWorker *worker);
    void travelpartner_accounts_brands_patchCallback(OAIHttpRequestWorker *worker);
    void travelpartner_accounts_freeBookingLinksReportViews_queryCallback(OAIHttpRequestWorker *worker);
    void travelpartner_accounts_hotelViews_listCallback(OAIHttpRequestWorker *worker);
    void travelpartner_accounts_hotelViews_summarizeCallback(OAIHttpRequestWorker *worker);
    void travelpartner_accounts_hotels_setLiveOnGoogleCallback(OAIHttpRequestWorker *worker);
    void travelpartner_accounts_icons_createCallback(OAIHttpRequestWorker *worker);
    void travelpartner_accounts_icons_listCallback(OAIHttpRequestWorker *worker);
    void travelpartner_accounts_listings_verifyCallback(OAIHttpRequestWorker *worker);
    void travelpartner_accounts_participationReportViews_queryCallback(OAIHttpRequestWorker *worker);
    void travelpartner_accounts_priceAccuracyViews_listCallback(OAIHttpRequestWorker *worker);
    void travelpartner_accounts_priceAccuracyViews_summarizeCallback(OAIHttpRequestWorker *worker);
    void travelpartner_accounts_priceCoverageViews_getLatestCallback(OAIHttpRequestWorker *worker);
    void travelpartner_accounts_priceCoverageViews_listCallback(OAIHttpRequestWorker *worker);
    void travelpartner_accounts_propertyPerformanceReportViews_queryCallback(OAIHttpRequestWorker *worker);
    void travelpartner_accounts_reconciliationReports_createCallback(OAIHttpRequestWorker *worker);
    void travelpartner_accounts_reconciliationReports_getCallback(OAIHttpRequestWorker *worker);
    void travelpartner_accounts_reconciliationReports_listCallback(OAIHttpRequestWorker *worker);
    void travelpartner_accounts_reconciliationReports_validateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void travelpartner_accounts_accountLinks_createSignal(OAIAccountLink summary);
    void travelpartner_accounts_accountLinks_deleteSignal(OAIObject summary);
    void travelpartner_accounts_accountLinks_listSignal(OAIListAccountLinksResponse summary);
    void travelpartner_accounts_brands_createSignal(OAIBrand summary);
    void travelpartner_accounts_brands_listSignal(OAIListBrandsResponse summary);
    void travelpartner_accounts_brands_patchSignal(OAIBrand summary);
    void travelpartner_accounts_freeBookingLinksReportViews_querySignal(OAIQueryFreeBookingLinksReportResponse summary);
    void travelpartner_accounts_hotelViews_listSignal(OAIListHotelViewsResponse summary);
    void travelpartner_accounts_hotelViews_summarizeSignal(OAISummarizeHotelViewsResponse summary);
    void travelpartner_accounts_hotels_setLiveOnGoogleSignal(OAISetLiveOnGoogleResponse summary);
    void travelpartner_accounts_icons_createSignal(OAIIcon summary);
    void travelpartner_accounts_icons_listSignal(OAIListIconsResponse summary);
    void travelpartner_accounts_listings_verifySignal(OAIVerifyListingsResponse summary);
    void travelpartner_accounts_participationReportViews_querySignal(OAIQueryParticipationReportResponse summary);
    void travelpartner_accounts_priceAccuracyViews_listSignal(OAIListPriceAccuracyViewsResponse summary);
    void travelpartner_accounts_priceAccuracyViews_summarizeSignal(OAISummarizePriceAccuracyResponse summary);
    void travelpartner_accounts_priceCoverageViews_getLatestSignal(OAIPriceCoverageView summary);
    void travelpartner_accounts_priceCoverageViews_listSignal(OAIListPriceCoverageViewsResponse summary);
    void travelpartner_accounts_propertyPerformanceReportViews_querySignal(OAIQueryPropertyPerformanceReportResponse summary);
    void travelpartner_accounts_reconciliationReports_createSignal(OAICreateReconciliationReportResponse summary);
    void travelpartner_accounts_reconciliationReports_getSignal(OAIReconciliationReport summary);
    void travelpartner_accounts_reconciliationReports_listSignal(OAIListReconciliationReportsResponse summary);
    void travelpartner_accounts_reconciliationReports_validateSignal(OAIValidateReconciliationReportResponse summary);


    void travelpartner_accounts_accountLinks_createSignalFull(OAIHttpRequestWorker *worker, OAIAccountLink summary);
    void travelpartner_accounts_accountLinks_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void travelpartner_accounts_accountLinks_listSignalFull(OAIHttpRequestWorker *worker, OAIListAccountLinksResponse summary);
    void travelpartner_accounts_brands_createSignalFull(OAIHttpRequestWorker *worker, OAIBrand summary);
    void travelpartner_accounts_brands_listSignalFull(OAIHttpRequestWorker *worker, OAIListBrandsResponse summary);
    void travelpartner_accounts_brands_patchSignalFull(OAIHttpRequestWorker *worker, OAIBrand summary);
    void travelpartner_accounts_freeBookingLinksReportViews_querySignalFull(OAIHttpRequestWorker *worker, OAIQueryFreeBookingLinksReportResponse summary);
    void travelpartner_accounts_hotelViews_listSignalFull(OAIHttpRequestWorker *worker, OAIListHotelViewsResponse summary);
    void travelpartner_accounts_hotelViews_summarizeSignalFull(OAIHttpRequestWorker *worker, OAISummarizeHotelViewsResponse summary);
    void travelpartner_accounts_hotels_setLiveOnGoogleSignalFull(OAIHttpRequestWorker *worker, OAISetLiveOnGoogleResponse summary);
    void travelpartner_accounts_icons_createSignalFull(OAIHttpRequestWorker *worker, OAIIcon summary);
    void travelpartner_accounts_icons_listSignalFull(OAIHttpRequestWorker *worker, OAIListIconsResponse summary);
    void travelpartner_accounts_listings_verifySignalFull(OAIHttpRequestWorker *worker, OAIVerifyListingsResponse summary);
    void travelpartner_accounts_participationReportViews_querySignalFull(OAIHttpRequestWorker *worker, OAIQueryParticipationReportResponse summary);
    void travelpartner_accounts_priceAccuracyViews_listSignalFull(OAIHttpRequestWorker *worker, OAIListPriceAccuracyViewsResponse summary);
    void travelpartner_accounts_priceAccuracyViews_summarizeSignalFull(OAIHttpRequestWorker *worker, OAISummarizePriceAccuracyResponse summary);
    void travelpartner_accounts_priceCoverageViews_getLatestSignalFull(OAIHttpRequestWorker *worker, OAIPriceCoverageView summary);
    void travelpartner_accounts_priceCoverageViews_listSignalFull(OAIHttpRequestWorker *worker, OAIListPriceCoverageViewsResponse summary);
    void travelpartner_accounts_propertyPerformanceReportViews_querySignalFull(OAIHttpRequestWorker *worker, OAIQueryPropertyPerformanceReportResponse summary);
    void travelpartner_accounts_reconciliationReports_createSignalFull(OAIHttpRequestWorker *worker, OAICreateReconciliationReportResponse summary);
    void travelpartner_accounts_reconciliationReports_getSignalFull(OAIHttpRequestWorker *worker, OAIReconciliationReport summary);
    void travelpartner_accounts_reconciliationReports_listSignalFull(OAIHttpRequestWorker *worker, OAIListReconciliationReportsResponse summary);
    void travelpartner_accounts_reconciliationReports_validateSignalFull(OAIHttpRequestWorker *worker, OAIValidateReconciliationReportResponse summary);

    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_accountLinks_createSignalError() instead")
    void travelpartner_accounts_accountLinks_createSignalE(OAIAccountLink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_accountLinks_createSignalError(OAIAccountLink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_accountLinks_deleteSignalError() instead")
    void travelpartner_accounts_accountLinks_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_accountLinks_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_accountLinks_listSignalError() instead")
    void travelpartner_accounts_accountLinks_listSignalE(OAIListAccountLinksResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_accountLinks_listSignalError(OAIListAccountLinksResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_brands_createSignalError() instead")
    void travelpartner_accounts_brands_createSignalE(OAIBrand summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_brands_createSignalError(OAIBrand summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_brands_listSignalError() instead")
    void travelpartner_accounts_brands_listSignalE(OAIListBrandsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_brands_listSignalError(OAIListBrandsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_brands_patchSignalError() instead")
    void travelpartner_accounts_brands_patchSignalE(OAIBrand summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_brands_patchSignalError(OAIBrand summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_freeBookingLinksReportViews_querySignalError() instead")
    void travelpartner_accounts_freeBookingLinksReportViews_querySignalE(OAIQueryFreeBookingLinksReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_freeBookingLinksReportViews_querySignalError(OAIQueryFreeBookingLinksReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_hotelViews_listSignalError() instead")
    void travelpartner_accounts_hotelViews_listSignalE(OAIListHotelViewsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_hotelViews_listSignalError(OAIListHotelViewsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_hotelViews_summarizeSignalError() instead")
    void travelpartner_accounts_hotelViews_summarizeSignalE(OAISummarizeHotelViewsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_hotelViews_summarizeSignalError(OAISummarizeHotelViewsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_hotels_setLiveOnGoogleSignalError() instead")
    void travelpartner_accounts_hotels_setLiveOnGoogleSignalE(OAISetLiveOnGoogleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_hotels_setLiveOnGoogleSignalError(OAISetLiveOnGoogleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_icons_createSignalError() instead")
    void travelpartner_accounts_icons_createSignalE(OAIIcon summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_icons_createSignalError(OAIIcon summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_icons_listSignalError() instead")
    void travelpartner_accounts_icons_listSignalE(OAIListIconsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_icons_listSignalError(OAIListIconsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_listings_verifySignalError() instead")
    void travelpartner_accounts_listings_verifySignalE(OAIVerifyListingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_listings_verifySignalError(OAIVerifyListingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_participationReportViews_querySignalError() instead")
    void travelpartner_accounts_participationReportViews_querySignalE(OAIQueryParticipationReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_participationReportViews_querySignalError(OAIQueryParticipationReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_priceAccuracyViews_listSignalError() instead")
    void travelpartner_accounts_priceAccuracyViews_listSignalE(OAIListPriceAccuracyViewsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_priceAccuracyViews_listSignalError(OAIListPriceAccuracyViewsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_priceAccuracyViews_summarizeSignalError() instead")
    void travelpartner_accounts_priceAccuracyViews_summarizeSignalE(OAISummarizePriceAccuracyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_priceAccuracyViews_summarizeSignalError(OAISummarizePriceAccuracyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_priceCoverageViews_getLatestSignalError() instead")
    void travelpartner_accounts_priceCoverageViews_getLatestSignalE(OAIPriceCoverageView summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_priceCoverageViews_getLatestSignalError(OAIPriceCoverageView summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_priceCoverageViews_listSignalError() instead")
    void travelpartner_accounts_priceCoverageViews_listSignalE(OAIListPriceCoverageViewsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_priceCoverageViews_listSignalError(OAIListPriceCoverageViewsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_propertyPerformanceReportViews_querySignalError() instead")
    void travelpartner_accounts_propertyPerformanceReportViews_querySignalE(OAIQueryPropertyPerformanceReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_propertyPerformanceReportViews_querySignalError(OAIQueryPropertyPerformanceReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_reconciliationReports_createSignalError() instead")
    void travelpartner_accounts_reconciliationReports_createSignalE(OAICreateReconciliationReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_reconciliationReports_createSignalError(OAICreateReconciliationReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_reconciliationReports_getSignalError() instead")
    void travelpartner_accounts_reconciliationReports_getSignalE(OAIReconciliationReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_reconciliationReports_getSignalError(OAIReconciliationReport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_reconciliationReports_listSignalError() instead")
    void travelpartner_accounts_reconciliationReports_listSignalE(OAIListReconciliationReportsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_reconciliationReports_listSignalError(OAIListReconciliationReportsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_reconciliationReports_validateSignalError() instead")
    void travelpartner_accounts_reconciliationReports_validateSignalE(OAIValidateReconciliationReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_reconciliationReports_validateSignalError(OAIValidateReconciliationReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_accountLinks_createSignalErrorFull() instead")
    void travelpartner_accounts_accountLinks_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_accountLinks_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_accountLinks_deleteSignalErrorFull() instead")
    void travelpartner_accounts_accountLinks_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_accountLinks_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_accountLinks_listSignalErrorFull() instead")
    void travelpartner_accounts_accountLinks_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_accountLinks_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_brands_createSignalErrorFull() instead")
    void travelpartner_accounts_brands_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_brands_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_brands_listSignalErrorFull() instead")
    void travelpartner_accounts_brands_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_brands_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_brands_patchSignalErrorFull() instead")
    void travelpartner_accounts_brands_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_brands_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_freeBookingLinksReportViews_querySignalErrorFull() instead")
    void travelpartner_accounts_freeBookingLinksReportViews_querySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_freeBookingLinksReportViews_querySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_hotelViews_listSignalErrorFull() instead")
    void travelpartner_accounts_hotelViews_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_hotelViews_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_hotelViews_summarizeSignalErrorFull() instead")
    void travelpartner_accounts_hotelViews_summarizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_hotelViews_summarizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_hotels_setLiveOnGoogleSignalErrorFull() instead")
    void travelpartner_accounts_hotels_setLiveOnGoogleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_hotels_setLiveOnGoogleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_icons_createSignalErrorFull() instead")
    void travelpartner_accounts_icons_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_icons_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_icons_listSignalErrorFull() instead")
    void travelpartner_accounts_icons_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_icons_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_listings_verifySignalErrorFull() instead")
    void travelpartner_accounts_listings_verifySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_listings_verifySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_participationReportViews_querySignalErrorFull() instead")
    void travelpartner_accounts_participationReportViews_querySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_participationReportViews_querySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_priceAccuracyViews_listSignalErrorFull() instead")
    void travelpartner_accounts_priceAccuracyViews_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_priceAccuracyViews_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_priceAccuracyViews_summarizeSignalErrorFull() instead")
    void travelpartner_accounts_priceAccuracyViews_summarizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_priceAccuracyViews_summarizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_priceCoverageViews_getLatestSignalErrorFull() instead")
    void travelpartner_accounts_priceCoverageViews_getLatestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_priceCoverageViews_getLatestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_priceCoverageViews_listSignalErrorFull() instead")
    void travelpartner_accounts_priceCoverageViews_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_priceCoverageViews_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_propertyPerformanceReportViews_querySignalErrorFull() instead")
    void travelpartner_accounts_propertyPerformanceReportViews_querySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_propertyPerformanceReportViews_querySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_reconciliationReports_createSignalErrorFull() instead")
    void travelpartner_accounts_reconciliationReports_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_reconciliationReports_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_reconciliationReports_getSignalErrorFull() instead")
    void travelpartner_accounts_reconciliationReports_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_reconciliationReports_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_reconciliationReports_listSignalErrorFull() instead")
    void travelpartner_accounts_reconciliationReports_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_reconciliationReports_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use travelpartner_accounts_reconciliationReports_validateSignalErrorFull() instead")
    void travelpartner_accounts_reconciliationReports_validateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void travelpartner_accounts_reconciliationReports_validateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
