/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISummarizeHotelViewsResponse.h
 *
 * Response message for HotelViewService.SummarizeHotelViews.
 */

#ifndef OAISummarizeHotelViewsResponse_H
#define OAISummarizeHotelViewsResponse_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISummarizeHotelViewsResponse : public OAIObject {
public:
    OAISummarizeHotelViewsResponse();
    OAISummarizeHotelViewsResponse(QString json);
    ~OAISummarizeHotelViewsResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getLastFeedSubmissionTime() const;
    void setLastFeedSubmissionTime(const QString &last_feed_submission_time);
    bool is_last_feed_submission_time_Set() const;
    bool is_last_feed_submission_time_Valid() const;

    QString getLastManifestUpdateTime() const;
    void setLastManifestUpdateTime(const QString &last_manifest_update_time);
    bool is_last_manifest_update_time_Set() const;
    bool is_last_manifest_update_time_Valid() const;

    QString getLiveOnGooglePropertyCount() const;
    void setLiveOnGooglePropertyCount(const QString &live_on_google_property_count);
    bool is_live_on_google_property_count_Set() const;
    bool is_live_on_google_property_count_Valid() const;

    QString getMatchedPropertyCount() const;
    void setMatchedPropertyCount(const QString &matched_property_count);
    bool is_matched_property_count_Set() const;
    bool is_matched_property_count_Valid() const;

    QString getOverclusteredPropertyCount() const;
    void setOverclusteredPropertyCount(const QString &overclustered_property_count);
    bool is_overclustered_property_count_Set() const;
    bool is_overclustered_property_count_Valid() const;

    QString getOverclusteredPropertyWithErrorsCount() const;
    void setOverclusteredPropertyWithErrorsCount(const QString &overclustered_property_with_errors_count);
    bool is_overclustered_property_with_errors_count_Set() const;
    bool is_overclustered_property_with_errors_count_Valid() const;

    QString getUnmatchedPropertyCount() const;
    void setUnmatchedPropertyCount(const QString &unmatched_property_count);
    bool is_unmatched_property_count_Set() const;
    bool is_unmatched_property_count_Valid() const;

    QString getUnmatchedPropertyWithErrorsCount() const;
    void setUnmatchedPropertyWithErrorsCount(const QString &unmatched_property_with_errors_count);
    bool is_unmatched_property_with_errors_count_Set() const;
    bool is_unmatched_property_with_errors_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_last_feed_submission_time;
    bool m_last_feed_submission_time_isSet;
    bool m_last_feed_submission_time_isValid;

    QString m_last_manifest_update_time;
    bool m_last_manifest_update_time_isSet;
    bool m_last_manifest_update_time_isValid;

    QString m_live_on_google_property_count;
    bool m_live_on_google_property_count_isSet;
    bool m_live_on_google_property_count_isValid;

    QString m_matched_property_count;
    bool m_matched_property_count_isSet;
    bool m_matched_property_count_isValid;

    QString m_overclustered_property_count;
    bool m_overclustered_property_count_isSet;
    bool m_overclustered_property_count_isValid;

    QString m_overclustered_property_with_errors_count;
    bool m_overclustered_property_with_errors_count_isSet;
    bool m_overclustered_property_with_errors_count_isValid;

    QString m_unmatched_property_count;
    bool m_unmatched_property_count_isSet;
    bool m_unmatched_property_count_isValid;

    QString m_unmatched_property_with_errors_count;
    bool m_unmatched_property_with_errors_count_isSet;
    bool m_unmatched_property_with_errors_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISummarizeHotelViewsResponse)

#endif // OAISummarizeHotelViewsResponse_H
