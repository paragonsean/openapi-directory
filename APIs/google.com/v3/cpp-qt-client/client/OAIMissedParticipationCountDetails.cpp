/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMissedParticipationCountDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMissedParticipationCountDetails::OAIMissedParticipationCountDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMissedParticipationCountDetails::OAIMissedParticipationCountDetails() {
    this->initializeModel();
}

OAIMissedParticipationCountDetails::~OAIMissedParticipationCountDetails() {}

void OAIMissedParticipationCountDetails::initializeModel() {

    m_hotel_suspended_count_isSet = false;
    m_hotel_suspended_count_isValid = false;

    m_no_availability_count_isSet = false;
    m_no_availability_count_isValid = false;

    m_no_landing_page_count_isSet = false;
    m_no_landing_page_count_isValid = false;

    m_no_price_count_isSet = false;
    m_no_price_count_isValid = false;

    m_no_price_count_details_isSet = false;
    m_no_price_count_details_isValid = false;

    m_no_tax_breakdown_count_isSet = false;
    m_no_tax_breakdown_count_isValid = false;

    m_other_reason_count_isSet = false;
    m_other_reason_count_isValid = false;

    m_price_missing_count_isSet = false;
    m_price_missing_count_isValid = false;

    m_price_missing_count_details_isSet = false;
    m_price_missing_count_details_isValid = false;

    m_price_problem_count_isSet = false;
    m_price_problem_count_isValid = false;

    m_price_problem_count_details_isSet = false;
    m_price_problem_count_details_isValid = false;

    m_price_unavailable_count_isSet = false;
    m_price_unavailable_count_isValid = false;

    m_price_unavailable_count_details_isSet = false;
    m_price_unavailable_count_details_isValid = false;
}

void OAIMissedParticipationCountDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMissedParticipationCountDetails::fromJsonObject(QJsonObject json) {

    m_hotel_suspended_count_isValid = ::OpenAPI::fromJsonValue(m_hotel_suspended_count, json[QString("hotelSuspendedCount")]);
    m_hotel_suspended_count_isSet = !json[QString("hotelSuspendedCount")].isNull() && m_hotel_suspended_count_isValid;

    m_no_availability_count_isValid = ::OpenAPI::fromJsonValue(m_no_availability_count, json[QString("noAvailabilityCount")]);
    m_no_availability_count_isSet = !json[QString("noAvailabilityCount")].isNull() && m_no_availability_count_isValid;

    m_no_landing_page_count_isValid = ::OpenAPI::fromJsonValue(m_no_landing_page_count, json[QString("noLandingPageCount")]);
    m_no_landing_page_count_isSet = !json[QString("noLandingPageCount")].isNull() && m_no_landing_page_count_isValid;

    m_no_price_count_isValid = ::OpenAPI::fromJsonValue(m_no_price_count, json[QString("noPriceCount")]);
    m_no_price_count_isSet = !json[QString("noPriceCount")].isNull() && m_no_price_count_isValid;

    m_no_price_count_details_isValid = ::OpenAPI::fromJsonValue(m_no_price_count_details, json[QString("noPriceCountDetails")]);
    m_no_price_count_details_isSet = !json[QString("noPriceCountDetails")].isNull() && m_no_price_count_details_isValid;

    m_no_tax_breakdown_count_isValid = ::OpenAPI::fromJsonValue(m_no_tax_breakdown_count, json[QString("noTaxBreakdownCount")]);
    m_no_tax_breakdown_count_isSet = !json[QString("noTaxBreakdownCount")].isNull() && m_no_tax_breakdown_count_isValid;

    m_other_reason_count_isValid = ::OpenAPI::fromJsonValue(m_other_reason_count, json[QString("otherReasonCount")]);
    m_other_reason_count_isSet = !json[QString("otherReasonCount")].isNull() && m_other_reason_count_isValid;

    m_price_missing_count_isValid = ::OpenAPI::fromJsonValue(m_price_missing_count, json[QString("priceMissingCount")]);
    m_price_missing_count_isSet = !json[QString("priceMissingCount")].isNull() && m_price_missing_count_isValid;

    m_price_missing_count_details_isValid = ::OpenAPI::fromJsonValue(m_price_missing_count_details, json[QString("priceMissingCountDetails")]);
    m_price_missing_count_details_isSet = !json[QString("priceMissingCountDetails")].isNull() && m_price_missing_count_details_isValid;

    m_price_problem_count_isValid = ::OpenAPI::fromJsonValue(m_price_problem_count, json[QString("priceProblemCount")]);
    m_price_problem_count_isSet = !json[QString("priceProblemCount")].isNull() && m_price_problem_count_isValid;

    m_price_problem_count_details_isValid = ::OpenAPI::fromJsonValue(m_price_problem_count_details, json[QString("priceProblemCountDetails")]);
    m_price_problem_count_details_isSet = !json[QString("priceProblemCountDetails")].isNull() && m_price_problem_count_details_isValid;

    m_price_unavailable_count_isValid = ::OpenAPI::fromJsonValue(m_price_unavailable_count, json[QString("priceUnavailableCount")]);
    m_price_unavailable_count_isSet = !json[QString("priceUnavailableCount")].isNull() && m_price_unavailable_count_isValid;

    m_price_unavailable_count_details_isValid = ::OpenAPI::fromJsonValue(m_price_unavailable_count_details, json[QString("priceUnavailableCountDetails")]);
    m_price_unavailable_count_details_isSet = !json[QString("priceUnavailableCountDetails")].isNull() && m_price_unavailable_count_details_isValid;
}

QString OAIMissedParticipationCountDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMissedParticipationCountDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_hotel_suspended_count_isSet) {
        obj.insert(QString("hotelSuspendedCount"), ::OpenAPI::toJsonValue(m_hotel_suspended_count));
    }
    if (m_no_availability_count_isSet) {
        obj.insert(QString("noAvailabilityCount"), ::OpenAPI::toJsonValue(m_no_availability_count));
    }
    if (m_no_landing_page_count_isSet) {
        obj.insert(QString("noLandingPageCount"), ::OpenAPI::toJsonValue(m_no_landing_page_count));
    }
    if (m_no_price_count_isSet) {
        obj.insert(QString("noPriceCount"), ::OpenAPI::toJsonValue(m_no_price_count));
    }
    if (m_no_price_count_details.isSet()) {
        obj.insert(QString("noPriceCountDetails"), ::OpenAPI::toJsonValue(m_no_price_count_details));
    }
    if (m_no_tax_breakdown_count_isSet) {
        obj.insert(QString("noTaxBreakdownCount"), ::OpenAPI::toJsonValue(m_no_tax_breakdown_count));
    }
    if (m_other_reason_count_isSet) {
        obj.insert(QString("otherReasonCount"), ::OpenAPI::toJsonValue(m_other_reason_count));
    }
    if (m_price_missing_count_isSet) {
        obj.insert(QString("priceMissingCount"), ::OpenAPI::toJsonValue(m_price_missing_count));
    }
    if (m_price_missing_count_details.isSet()) {
        obj.insert(QString("priceMissingCountDetails"), ::OpenAPI::toJsonValue(m_price_missing_count_details));
    }
    if (m_price_problem_count_isSet) {
        obj.insert(QString("priceProblemCount"), ::OpenAPI::toJsonValue(m_price_problem_count));
    }
    if (m_price_problem_count_details.isSet()) {
        obj.insert(QString("priceProblemCountDetails"), ::OpenAPI::toJsonValue(m_price_problem_count_details));
    }
    if (m_price_unavailable_count_isSet) {
        obj.insert(QString("priceUnavailableCount"), ::OpenAPI::toJsonValue(m_price_unavailable_count));
    }
    if (m_price_unavailable_count_details.isSet()) {
        obj.insert(QString("priceUnavailableCountDetails"), ::OpenAPI::toJsonValue(m_price_unavailable_count_details));
    }
    return obj;
}

QString OAIMissedParticipationCountDetails::getHotelSuspendedCount() const {
    return m_hotel_suspended_count;
}
void OAIMissedParticipationCountDetails::setHotelSuspendedCount(const QString &hotel_suspended_count) {
    m_hotel_suspended_count = hotel_suspended_count;
    m_hotel_suspended_count_isSet = true;
}

bool OAIMissedParticipationCountDetails::is_hotel_suspended_count_Set() const{
    return m_hotel_suspended_count_isSet;
}

bool OAIMissedParticipationCountDetails::is_hotel_suspended_count_Valid() const{
    return m_hotel_suspended_count_isValid;
}

QString OAIMissedParticipationCountDetails::getNoAvailabilityCount() const {
    return m_no_availability_count;
}
void OAIMissedParticipationCountDetails::setNoAvailabilityCount(const QString &no_availability_count) {
    m_no_availability_count = no_availability_count;
    m_no_availability_count_isSet = true;
}

bool OAIMissedParticipationCountDetails::is_no_availability_count_Set() const{
    return m_no_availability_count_isSet;
}

bool OAIMissedParticipationCountDetails::is_no_availability_count_Valid() const{
    return m_no_availability_count_isValid;
}

QString OAIMissedParticipationCountDetails::getNoLandingPageCount() const {
    return m_no_landing_page_count;
}
void OAIMissedParticipationCountDetails::setNoLandingPageCount(const QString &no_landing_page_count) {
    m_no_landing_page_count = no_landing_page_count;
    m_no_landing_page_count_isSet = true;
}

bool OAIMissedParticipationCountDetails::is_no_landing_page_count_Set() const{
    return m_no_landing_page_count_isSet;
}

bool OAIMissedParticipationCountDetails::is_no_landing_page_count_Valid() const{
    return m_no_landing_page_count_isValid;
}

QString OAIMissedParticipationCountDetails::getNoPriceCount() const {
    return m_no_price_count;
}
void OAIMissedParticipationCountDetails::setNoPriceCount(const QString &no_price_count) {
    m_no_price_count = no_price_count;
    m_no_price_count_isSet = true;
}

bool OAIMissedParticipationCountDetails::is_no_price_count_Set() const{
    return m_no_price_count_isSet;
}

bool OAIMissedParticipationCountDetails::is_no_price_count_Valid() const{
    return m_no_price_count_isValid;
}

OAINoPriceCountDetails OAIMissedParticipationCountDetails::getNoPriceCountDetails() const {
    return m_no_price_count_details;
}
void OAIMissedParticipationCountDetails::setNoPriceCountDetails(const OAINoPriceCountDetails &no_price_count_details) {
    m_no_price_count_details = no_price_count_details;
    m_no_price_count_details_isSet = true;
}

bool OAIMissedParticipationCountDetails::is_no_price_count_details_Set() const{
    return m_no_price_count_details_isSet;
}

bool OAIMissedParticipationCountDetails::is_no_price_count_details_Valid() const{
    return m_no_price_count_details_isValid;
}

QString OAIMissedParticipationCountDetails::getNoTaxBreakdownCount() const {
    return m_no_tax_breakdown_count;
}
void OAIMissedParticipationCountDetails::setNoTaxBreakdownCount(const QString &no_tax_breakdown_count) {
    m_no_tax_breakdown_count = no_tax_breakdown_count;
    m_no_tax_breakdown_count_isSet = true;
}

bool OAIMissedParticipationCountDetails::is_no_tax_breakdown_count_Set() const{
    return m_no_tax_breakdown_count_isSet;
}

bool OAIMissedParticipationCountDetails::is_no_tax_breakdown_count_Valid() const{
    return m_no_tax_breakdown_count_isValid;
}

QString OAIMissedParticipationCountDetails::getOtherReasonCount() const {
    return m_other_reason_count;
}
void OAIMissedParticipationCountDetails::setOtherReasonCount(const QString &other_reason_count) {
    m_other_reason_count = other_reason_count;
    m_other_reason_count_isSet = true;
}

bool OAIMissedParticipationCountDetails::is_other_reason_count_Set() const{
    return m_other_reason_count_isSet;
}

bool OAIMissedParticipationCountDetails::is_other_reason_count_Valid() const{
    return m_other_reason_count_isValid;
}

QString OAIMissedParticipationCountDetails::getPriceMissingCount() const {
    return m_price_missing_count;
}
void OAIMissedParticipationCountDetails::setPriceMissingCount(const QString &price_missing_count) {
    m_price_missing_count = price_missing_count;
    m_price_missing_count_isSet = true;
}

bool OAIMissedParticipationCountDetails::is_price_missing_count_Set() const{
    return m_price_missing_count_isSet;
}

bool OAIMissedParticipationCountDetails::is_price_missing_count_Valid() const{
    return m_price_missing_count_isValid;
}

OAIPriceMissingCountDetails OAIMissedParticipationCountDetails::getPriceMissingCountDetails() const {
    return m_price_missing_count_details;
}
void OAIMissedParticipationCountDetails::setPriceMissingCountDetails(const OAIPriceMissingCountDetails &price_missing_count_details) {
    m_price_missing_count_details = price_missing_count_details;
    m_price_missing_count_details_isSet = true;
}

bool OAIMissedParticipationCountDetails::is_price_missing_count_details_Set() const{
    return m_price_missing_count_details_isSet;
}

bool OAIMissedParticipationCountDetails::is_price_missing_count_details_Valid() const{
    return m_price_missing_count_details_isValid;
}

QString OAIMissedParticipationCountDetails::getPriceProblemCount() const {
    return m_price_problem_count;
}
void OAIMissedParticipationCountDetails::setPriceProblemCount(const QString &price_problem_count) {
    m_price_problem_count = price_problem_count;
    m_price_problem_count_isSet = true;
}

bool OAIMissedParticipationCountDetails::is_price_problem_count_Set() const{
    return m_price_problem_count_isSet;
}

bool OAIMissedParticipationCountDetails::is_price_problem_count_Valid() const{
    return m_price_problem_count_isValid;
}

OAIPriceProblemCountDetails OAIMissedParticipationCountDetails::getPriceProblemCountDetails() const {
    return m_price_problem_count_details;
}
void OAIMissedParticipationCountDetails::setPriceProblemCountDetails(const OAIPriceProblemCountDetails &price_problem_count_details) {
    m_price_problem_count_details = price_problem_count_details;
    m_price_problem_count_details_isSet = true;
}

bool OAIMissedParticipationCountDetails::is_price_problem_count_details_Set() const{
    return m_price_problem_count_details_isSet;
}

bool OAIMissedParticipationCountDetails::is_price_problem_count_details_Valid() const{
    return m_price_problem_count_details_isValid;
}

QString OAIMissedParticipationCountDetails::getPriceUnavailableCount() const {
    return m_price_unavailable_count;
}
void OAIMissedParticipationCountDetails::setPriceUnavailableCount(const QString &price_unavailable_count) {
    m_price_unavailable_count = price_unavailable_count;
    m_price_unavailable_count_isSet = true;
}

bool OAIMissedParticipationCountDetails::is_price_unavailable_count_Set() const{
    return m_price_unavailable_count_isSet;
}

bool OAIMissedParticipationCountDetails::is_price_unavailable_count_Valid() const{
    return m_price_unavailable_count_isValid;
}

OAIPriceUnavailableCountDetails OAIMissedParticipationCountDetails::getPriceUnavailableCountDetails() const {
    return m_price_unavailable_count_details;
}
void OAIMissedParticipationCountDetails::setPriceUnavailableCountDetails(const OAIPriceUnavailableCountDetails &price_unavailable_count_details) {
    m_price_unavailable_count_details = price_unavailable_count_details;
    m_price_unavailable_count_details_isSet = true;
}

bool OAIMissedParticipationCountDetails::is_price_unavailable_count_details_Set() const{
    return m_price_unavailable_count_details_isSet;
}

bool OAIMissedParticipationCountDetails::is_price_unavailable_count_details_Valid() const{
    return m_price_unavailable_count_details_isValid;
}

bool OAIMissedParticipationCountDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hotel_suspended_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_availability_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_landing_page_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_price_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_price_count_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_tax_breakdown_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_reason_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_missing_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_missing_count_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_problem_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_problem_count_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_unavailable_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_unavailable_count_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMissedParticipationCountDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
