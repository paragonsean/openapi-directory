/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPriceAccuracyRow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPriceAccuracyRow::OAIPriceAccuracyRow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPriceAccuracyRow::OAIPriceAccuracyRow() {
    this->initializeModel();
}

OAIPriceAccuracyRow::~OAIPriceAccuracyRow() {}

void OAIPriceAccuracyRow::initializeModel() {

    m_adult_occupancy_isSet = false;
    m_adult_occupancy_isValid = false;

    m_affects_score_isSet = false;
    m_affects_score_isValid = false;

    m_cached_price_record_isSet = false;
    m_cached_price_record_isValid = false;

    m_checkin_date_isSet = false;
    m_checkin_date_isValid = false;

    m_child_occupancy_isSet = false;
    m_child_occupancy_isValid = false;

    m_correction_time_isSet = false;
    m_correction_time_isValid = false;

    m_device_type_isSet = false;
    m_device_type_isValid = false;

    m_fetched_price_record_isSet = false;
    m_fetched_price_record_isValid = false;

    m_final_domain_isSet = false;
    m_final_domain_isValid = false;

    m_hotel_isSet = false;
    m_hotel_isValid = false;

    m_hotel_country_code_isSet = false;
    m_hotel_country_code_isValid = false;

    m_length_of_stay_days_isSet = false;
    m_length_of_stay_days_isValid = false;

    m_mismatch_reason_isSet = false;
    m_mismatch_reason_isValid = false;

    m_rate_rule_id_isSet = false;
    m_rate_rule_id_isValid = false;

    m_signal_source_isSet = false;
    m_signal_source_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_region_code_isSet = false;
    m_user_region_code_isValid = false;
}

void OAIPriceAccuracyRow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPriceAccuracyRow::fromJsonObject(QJsonObject json) {

    m_adult_occupancy_isValid = ::OpenAPI::fromJsonValue(m_adult_occupancy, json[QString("adultOccupancy")]);
    m_adult_occupancy_isSet = !json[QString("adultOccupancy")].isNull() && m_adult_occupancy_isValid;

    m_affects_score_isValid = ::OpenAPI::fromJsonValue(m_affects_score, json[QString("affectsScore")]);
    m_affects_score_isSet = !json[QString("affectsScore")].isNull() && m_affects_score_isValid;

    m_cached_price_record_isValid = ::OpenAPI::fromJsonValue(m_cached_price_record, json[QString("cachedPriceRecord")]);
    m_cached_price_record_isSet = !json[QString("cachedPriceRecord")].isNull() && m_cached_price_record_isValid;

    m_checkin_date_isValid = ::OpenAPI::fromJsonValue(m_checkin_date, json[QString("checkinDate")]);
    m_checkin_date_isSet = !json[QString("checkinDate")].isNull() && m_checkin_date_isValid;

    m_child_occupancy_isValid = ::OpenAPI::fromJsonValue(m_child_occupancy, json[QString("childOccupancy")]);
    m_child_occupancy_isSet = !json[QString("childOccupancy")].isNull() && m_child_occupancy_isValid;

    m_correction_time_isValid = ::OpenAPI::fromJsonValue(m_correction_time, json[QString("correctionTime")]);
    m_correction_time_isSet = !json[QString("correctionTime")].isNull() && m_correction_time_isValid;

    m_device_type_isValid = ::OpenAPI::fromJsonValue(m_device_type, json[QString("deviceType")]);
    m_device_type_isSet = !json[QString("deviceType")].isNull() && m_device_type_isValid;

    m_fetched_price_record_isValid = ::OpenAPI::fromJsonValue(m_fetched_price_record, json[QString("fetchedPriceRecord")]);
    m_fetched_price_record_isSet = !json[QString("fetchedPriceRecord")].isNull() && m_fetched_price_record_isValid;

    m_final_domain_isValid = ::OpenAPI::fromJsonValue(m_final_domain, json[QString("finalDomain")]);
    m_final_domain_isSet = !json[QString("finalDomain")].isNull() && m_final_domain_isValid;

    m_hotel_isValid = ::OpenAPI::fromJsonValue(m_hotel, json[QString("hotel")]);
    m_hotel_isSet = !json[QString("hotel")].isNull() && m_hotel_isValid;

    m_hotel_country_code_isValid = ::OpenAPI::fromJsonValue(m_hotel_country_code, json[QString("hotelCountryCode")]);
    m_hotel_country_code_isSet = !json[QString("hotelCountryCode")].isNull() && m_hotel_country_code_isValid;

    m_length_of_stay_days_isValid = ::OpenAPI::fromJsonValue(m_length_of_stay_days, json[QString("lengthOfStayDays")]);
    m_length_of_stay_days_isSet = !json[QString("lengthOfStayDays")].isNull() && m_length_of_stay_days_isValid;

    m_mismatch_reason_isValid = ::OpenAPI::fromJsonValue(m_mismatch_reason, json[QString("mismatchReason")]);
    m_mismatch_reason_isSet = !json[QString("mismatchReason")].isNull() && m_mismatch_reason_isValid;

    m_rate_rule_id_isValid = ::OpenAPI::fromJsonValue(m_rate_rule_id, json[QString("rateRuleId")]);
    m_rate_rule_id_isSet = !json[QString("rateRuleId")].isNull() && m_rate_rule_id_isValid;

    m_signal_source_isValid = ::OpenAPI::fromJsonValue(m_signal_source, json[QString("signalSource")]);
    m_signal_source_isSet = !json[QString("signalSource")].isNull() && m_signal_source_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_region_code_isValid = ::OpenAPI::fromJsonValue(m_user_region_code, json[QString("userRegionCode")]);
    m_user_region_code_isSet = !json[QString("userRegionCode")].isNull() && m_user_region_code_isValid;
}

QString OAIPriceAccuracyRow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPriceAccuracyRow::asJsonObject() const {
    QJsonObject obj;
    if (m_adult_occupancy_isSet) {
        obj.insert(QString("adultOccupancy"), ::OpenAPI::toJsonValue(m_adult_occupancy));
    }
    if (m_affects_score_isSet) {
        obj.insert(QString("affectsScore"), ::OpenAPI::toJsonValue(m_affects_score));
    }
    if (m_cached_price_record.isSet()) {
        obj.insert(QString("cachedPriceRecord"), ::OpenAPI::toJsonValue(m_cached_price_record));
    }
    if (m_checkin_date.isSet()) {
        obj.insert(QString("checkinDate"), ::OpenAPI::toJsonValue(m_checkin_date));
    }
    if (m_child_occupancy_isSet) {
        obj.insert(QString("childOccupancy"), ::OpenAPI::toJsonValue(m_child_occupancy));
    }
    if (m_correction_time_isSet) {
        obj.insert(QString("correctionTime"), ::OpenAPI::toJsonValue(m_correction_time));
    }
    if (m_device_type_isSet) {
        obj.insert(QString("deviceType"), ::OpenAPI::toJsonValue(m_device_type));
    }
    if (m_fetched_price_record.isSet()) {
        obj.insert(QString("fetchedPriceRecord"), ::OpenAPI::toJsonValue(m_fetched_price_record));
    }
    if (m_final_domain_isSet) {
        obj.insert(QString("finalDomain"), ::OpenAPI::toJsonValue(m_final_domain));
    }
    if (m_hotel_isSet) {
        obj.insert(QString("hotel"), ::OpenAPI::toJsonValue(m_hotel));
    }
    if (m_hotel_country_code_isSet) {
        obj.insert(QString("hotelCountryCode"), ::OpenAPI::toJsonValue(m_hotel_country_code));
    }
    if (m_length_of_stay_days_isSet) {
        obj.insert(QString("lengthOfStayDays"), ::OpenAPI::toJsonValue(m_length_of_stay_days));
    }
    if (m_mismatch_reason_isSet) {
        obj.insert(QString("mismatchReason"), ::OpenAPI::toJsonValue(m_mismatch_reason));
    }
    if (m_rate_rule_id_isSet) {
        obj.insert(QString("rateRuleId"), ::OpenAPI::toJsonValue(m_rate_rule_id));
    }
    if (m_signal_source_isSet) {
        obj.insert(QString("signalSource"), ::OpenAPI::toJsonValue(m_signal_source));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user_region_code_isSet) {
        obj.insert(QString("userRegionCode"), ::OpenAPI::toJsonValue(m_user_region_code));
    }
    return obj;
}

qint32 OAIPriceAccuracyRow::getAdultOccupancy() const {
    return m_adult_occupancy;
}
void OAIPriceAccuracyRow::setAdultOccupancy(const qint32 &adult_occupancy) {
    m_adult_occupancy = adult_occupancy;
    m_adult_occupancy_isSet = true;
}

bool OAIPriceAccuracyRow::is_adult_occupancy_Set() const{
    return m_adult_occupancy_isSet;
}

bool OAIPriceAccuracyRow::is_adult_occupancy_Valid() const{
    return m_adult_occupancy_isValid;
}

bool OAIPriceAccuracyRow::isAffectsScore() const {
    return m_affects_score;
}
void OAIPriceAccuracyRow::setAffectsScore(const bool &affects_score) {
    m_affects_score = affects_score;
    m_affects_score_isSet = true;
}

bool OAIPriceAccuracyRow::is_affects_score_Set() const{
    return m_affects_score_isSet;
}

bool OAIPriceAccuracyRow::is_affects_score_Valid() const{
    return m_affects_score_isValid;
}

OAIPriceRecord OAIPriceAccuracyRow::getCachedPriceRecord() const {
    return m_cached_price_record;
}
void OAIPriceAccuracyRow::setCachedPriceRecord(const OAIPriceRecord &cached_price_record) {
    m_cached_price_record = cached_price_record;
    m_cached_price_record_isSet = true;
}

bool OAIPriceAccuracyRow::is_cached_price_record_Set() const{
    return m_cached_price_record_isSet;
}

bool OAIPriceAccuracyRow::is_cached_price_record_Valid() const{
    return m_cached_price_record_isValid;
}

OAIDate OAIPriceAccuracyRow::getCheckinDate() const {
    return m_checkin_date;
}
void OAIPriceAccuracyRow::setCheckinDate(const OAIDate &checkin_date) {
    m_checkin_date = checkin_date;
    m_checkin_date_isSet = true;
}

bool OAIPriceAccuracyRow::is_checkin_date_Set() const{
    return m_checkin_date_isSet;
}

bool OAIPriceAccuracyRow::is_checkin_date_Valid() const{
    return m_checkin_date_isValid;
}

qint32 OAIPriceAccuracyRow::getChildOccupancy() const {
    return m_child_occupancy;
}
void OAIPriceAccuracyRow::setChildOccupancy(const qint32 &child_occupancy) {
    m_child_occupancy = child_occupancy;
    m_child_occupancy_isSet = true;
}

bool OAIPriceAccuracyRow::is_child_occupancy_Set() const{
    return m_child_occupancy_isSet;
}

bool OAIPriceAccuracyRow::is_child_occupancy_Valid() const{
    return m_child_occupancy_isValid;
}

QString OAIPriceAccuracyRow::getCorrectionTime() const {
    return m_correction_time;
}
void OAIPriceAccuracyRow::setCorrectionTime(const QString &correction_time) {
    m_correction_time = correction_time;
    m_correction_time_isSet = true;
}

bool OAIPriceAccuracyRow::is_correction_time_Set() const{
    return m_correction_time_isSet;
}

bool OAIPriceAccuracyRow::is_correction_time_Valid() const{
    return m_correction_time_isValid;
}

QString OAIPriceAccuracyRow::getDeviceType() const {
    return m_device_type;
}
void OAIPriceAccuracyRow::setDeviceType(const QString &device_type) {
    m_device_type = device_type;
    m_device_type_isSet = true;
}

bool OAIPriceAccuracyRow::is_device_type_Set() const{
    return m_device_type_isSet;
}

bool OAIPriceAccuracyRow::is_device_type_Valid() const{
    return m_device_type_isValid;
}

OAIPriceRecord OAIPriceAccuracyRow::getFetchedPriceRecord() const {
    return m_fetched_price_record;
}
void OAIPriceAccuracyRow::setFetchedPriceRecord(const OAIPriceRecord &fetched_price_record) {
    m_fetched_price_record = fetched_price_record;
    m_fetched_price_record_isSet = true;
}

bool OAIPriceAccuracyRow::is_fetched_price_record_Set() const{
    return m_fetched_price_record_isSet;
}

bool OAIPriceAccuracyRow::is_fetched_price_record_Valid() const{
    return m_fetched_price_record_isValid;
}

QString OAIPriceAccuracyRow::getFinalDomain() const {
    return m_final_domain;
}
void OAIPriceAccuracyRow::setFinalDomain(const QString &final_domain) {
    m_final_domain = final_domain;
    m_final_domain_isSet = true;
}

bool OAIPriceAccuracyRow::is_final_domain_Set() const{
    return m_final_domain_isSet;
}

bool OAIPriceAccuracyRow::is_final_domain_Valid() const{
    return m_final_domain_isValid;
}

QString OAIPriceAccuracyRow::getHotel() const {
    return m_hotel;
}
void OAIPriceAccuracyRow::setHotel(const QString &hotel) {
    m_hotel = hotel;
    m_hotel_isSet = true;
}

bool OAIPriceAccuracyRow::is_hotel_Set() const{
    return m_hotel_isSet;
}

bool OAIPriceAccuracyRow::is_hotel_Valid() const{
    return m_hotel_isValid;
}

QString OAIPriceAccuracyRow::getHotelCountryCode() const {
    return m_hotel_country_code;
}
void OAIPriceAccuracyRow::setHotelCountryCode(const QString &hotel_country_code) {
    m_hotel_country_code = hotel_country_code;
    m_hotel_country_code_isSet = true;
}

bool OAIPriceAccuracyRow::is_hotel_country_code_Set() const{
    return m_hotel_country_code_isSet;
}

bool OAIPriceAccuracyRow::is_hotel_country_code_Valid() const{
    return m_hotel_country_code_isValid;
}

qint32 OAIPriceAccuracyRow::getLengthOfStayDays() const {
    return m_length_of_stay_days;
}
void OAIPriceAccuracyRow::setLengthOfStayDays(const qint32 &length_of_stay_days) {
    m_length_of_stay_days = length_of_stay_days;
    m_length_of_stay_days_isSet = true;
}

bool OAIPriceAccuracyRow::is_length_of_stay_days_Set() const{
    return m_length_of_stay_days_isSet;
}

bool OAIPriceAccuracyRow::is_length_of_stay_days_Valid() const{
    return m_length_of_stay_days_isValid;
}

QString OAIPriceAccuracyRow::getMismatchReason() const {
    return m_mismatch_reason;
}
void OAIPriceAccuracyRow::setMismatchReason(const QString &mismatch_reason) {
    m_mismatch_reason = mismatch_reason;
    m_mismatch_reason_isSet = true;
}

bool OAIPriceAccuracyRow::is_mismatch_reason_Set() const{
    return m_mismatch_reason_isSet;
}

bool OAIPriceAccuracyRow::is_mismatch_reason_Valid() const{
    return m_mismatch_reason_isValid;
}

QString OAIPriceAccuracyRow::getRateRuleId() const {
    return m_rate_rule_id;
}
void OAIPriceAccuracyRow::setRateRuleId(const QString &rate_rule_id) {
    m_rate_rule_id = rate_rule_id;
    m_rate_rule_id_isSet = true;
}

bool OAIPriceAccuracyRow::is_rate_rule_id_Set() const{
    return m_rate_rule_id_isSet;
}

bool OAIPriceAccuracyRow::is_rate_rule_id_Valid() const{
    return m_rate_rule_id_isValid;
}

QString OAIPriceAccuracyRow::getSignalSource() const {
    return m_signal_source;
}
void OAIPriceAccuracyRow::setSignalSource(const QString &signal_source) {
    m_signal_source = signal_source;
    m_signal_source_isSet = true;
}

bool OAIPriceAccuracyRow::is_signal_source_Set() const{
    return m_signal_source_isSet;
}

bool OAIPriceAccuracyRow::is_signal_source_Valid() const{
    return m_signal_source_isValid;
}

QString OAIPriceAccuracyRow::getUrl() const {
    return m_url;
}
void OAIPriceAccuracyRow::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPriceAccuracyRow::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPriceAccuracyRow::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIPriceAccuracyRow::getUserRegionCode() const {
    return m_user_region_code;
}
void OAIPriceAccuracyRow::setUserRegionCode(const QString &user_region_code) {
    m_user_region_code = user_region_code;
    m_user_region_code_isSet = true;
}

bool OAIPriceAccuracyRow::is_user_region_code_Set() const{
    return m_user_region_code_isSet;
}

bool OAIPriceAccuracyRow::is_user_region_code_Valid() const{
    return m_user_region_code_isValid;
}

bool OAIPriceAccuracyRow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adult_occupancy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_affects_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cached_price_record.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_checkin_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_occupancy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_correction_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fetched_price_record.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_final_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hotel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hotel_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_of_stay_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mismatch_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signal_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_region_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPriceAccuracyRow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
