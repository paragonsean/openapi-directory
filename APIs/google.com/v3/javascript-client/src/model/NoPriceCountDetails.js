/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NoPriceCountDetails model module.
 * @module model/NoPriceCountDetails
 * @version v3
 */
class NoPriceCountDetails {
    /**
     * Constructs a new <code>NoPriceCountDetails</code>.
     * The reasons that contributed to the no price count and the total count for each reason.
     * @alias module:model/NoPriceCountDetails
     */
    constructor() { 
        
        NoPriceCountDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NoPriceCountDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NoPriceCountDetails} obj Optional instance to populate.
     * @return {module:model/NoPriceCountDetails} The populated <code>NoPriceCountDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NoPriceCountDetails();

            if (data.hasOwnProperty('livePricingConfigIssueCount')) {
                obj['livePricingConfigIssueCount'] = ApiClient.convertToType(data['livePricingConfigIssueCount'], 'String');
            }
            if (data.hasOwnProperty('livePricingNotAvailableCount')) {
                obj['livePricingNotAvailableCount'] = ApiClient.convertToType(data['livePricingNotAvailableCount'], 'String');
            }
            if (data.hasOwnProperty('livePricingNotTriggeredCount')) {
                obj['livePricingNotTriggeredCount'] = ApiClient.convertToType(data['livePricingNotTriggeredCount'], 'String');
            }
            if (data.hasOwnProperty('livePricingOtherReasonCount')) {
                obj['livePricingOtherReasonCount'] = ApiClient.convertToType(data['livePricingOtherReasonCount'], 'String');
            }
            if (data.hasOwnProperty('livePricingTechnicalIssueCount')) {
                obj['livePricingTechnicalIssueCount'] = ApiClient.convertToType(data['livePricingTechnicalIssueCount'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NoPriceCountDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NoPriceCountDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['livePricingConfigIssueCount'] && !(typeof data['livePricingConfigIssueCount'] === 'string' || data['livePricingConfigIssueCount'] instanceof String)) {
            throw new Error("Expected the field `livePricingConfigIssueCount` to be a primitive type in the JSON string but got " + data['livePricingConfigIssueCount']);
        }
        // ensure the json data is a string
        if (data['livePricingNotAvailableCount'] && !(typeof data['livePricingNotAvailableCount'] === 'string' || data['livePricingNotAvailableCount'] instanceof String)) {
            throw new Error("Expected the field `livePricingNotAvailableCount` to be a primitive type in the JSON string but got " + data['livePricingNotAvailableCount']);
        }
        // ensure the json data is a string
        if (data['livePricingNotTriggeredCount'] && !(typeof data['livePricingNotTriggeredCount'] === 'string' || data['livePricingNotTriggeredCount'] instanceof String)) {
            throw new Error("Expected the field `livePricingNotTriggeredCount` to be a primitive type in the JSON string but got " + data['livePricingNotTriggeredCount']);
        }
        // ensure the json data is a string
        if (data['livePricingOtherReasonCount'] && !(typeof data['livePricingOtherReasonCount'] === 'string' || data['livePricingOtherReasonCount'] instanceof String)) {
            throw new Error("Expected the field `livePricingOtherReasonCount` to be a primitive type in the JSON string but got " + data['livePricingOtherReasonCount']);
        }
        // ensure the json data is a string
        if (data['livePricingTechnicalIssueCount'] && !(typeof data['livePricingTechnicalIssueCount'] === 'string' || data['livePricingTechnicalIssueCount'] instanceof String)) {
            throw new Error("Expected the field `livePricingTechnicalIssueCount` to be a primitive type in the JSON string but got " + data['livePricingTechnicalIssueCount']);
        }

        return true;
    }


}



/**
 * The total number of missed participation due to live pricing not being triggered for any of the following reasons: * You didn't have live pricing configured for these searches. * You restricted Google from accessing the hotel itinerary in question.
 * @member {String} livePricingConfigIssueCount
 */
NoPriceCountDetails.prototype['livePricingConfigIssueCount'] = undefined;

/**
 * The total number of missed participation due to live pricing being unavailable. Live pricing will not be triggered for certain default itineraries or UIs. In this scenario, partners will need a cached price to participate.
 * @member {String} livePricingNotAvailableCount
 */
NoPriceCountDetails.prototype['livePricingNotAvailableCount'] = undefined;

/**
 * The total number of missed participation due to live pricing not being triggered for any of the following reasons: * You didn't set a bid. * You didn't have a valid landing page. * There weren't enough prices in the cache.
 * @member {String} livePricingNotTriggeredCount
 */
NoPriceCountDetails.prototype['livePricingNotTriggeredCount'] = undefined;

/**
 * The number of missed participations due to other issues with live pricing.
 * @member {String} livePricingOtherReasonCount
 */
NoPriceCountDetails.prototype['livePricingOtherReasonCount'] = undefined;

/**
 * The total number of missed participation due to technical issues with live pricing for any of the following reasons: * You didnâ€™t respond quickly enough and exceeded the response deadline (around 4000 milliseconds). * You returned an error. * Your response was malformed.
 * @member {String} livePricingTechnicalIssueCount
 */
NoPriceCountDetails.prototype['livePricingTechnicalIssueCount'] = undefined;






export default NoPriceCountDetails;

