/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LocalizedText from './LocalizedText';

/**
 * The Image model module.
 * @module model/Image
 * @version v3
 */
class Image {
    /**
     * Constructs a new <code>Image</code>.
     * A single image in a VR Listing. Title and gallery URL are stored per locale. NEXT ID: 4
     * @alias module:model/Image
     */
    constructor() { 
        
        Image.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Image</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Image} obj Optional instance to populate.
     * @return {module:model/Image} The populated <code>Image</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Image();

            if (data.hasOwnProperty('galleryUri')) {
                obj['galleryUri'] = ApiClient.convertToType(data['galleryUri'], [LocalizedText]);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], [LocalizedText]);
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Image</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Image</code>.
     */
    static validateJSON(data) {
        if (data['galleryUri']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['galleryUri'])) {
                throw new Error("Expected the field `galleryUri` to be an array in the JSON data but got " + data['galleryUri']);
            }
            // validate the optional field `galleryUri` (array)
            for (const item of data['galleryUri']) {
                LocalizedText.validateJSON(item);
            };
        }
        if (data['title']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['title'])) {
                throw new Error("Expected the field `title` to be an array in the JSON data but got " + data['title']);
            }
            // validate the optional field `title` (array)
            for (const item of data['title']) {
                LocalizedText.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}



/**
 * URL that is deeplink to the image in a gallery (or a webpage).
 * @member {Array.<module:model/LocalizedText>} galleryUri
 */
Image.prototype['galleryUri'] = undefined;

/**
 * Title of the image.
 * @member {Array.<module:model/LocalizedText>} title
 */
Image.prototype['title'] = undefined;

/**
 * URL that points to the binary image content directly.
 * @member {String} uri
 */
Image.prototype['uri'] = undefined;






export default Image;

