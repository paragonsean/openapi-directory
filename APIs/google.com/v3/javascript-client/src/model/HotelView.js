/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataIssueDetail from './DataIssueDetail';

/**
 * The HotelView model module.
 * @module model/HotelView
 * @version v3
 */
class HotelView {
    /**
     * Constructs a new <code>HotelView</code>.
     * A hotel view.
     * @alias module:model/HotelView
     */
    constructor() { 
        
        HotelView.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HotelView</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HotelView} obj Optional instance to populate.
     * @return {module:model/HotelView} The populated <code>HotelView</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HotelView();

            if (data.hasOwnProperty('dataIssueDetail')) {
                obj['dataIssueDetail'] = ApiClient.convertToType(data['dataIssueDetail'], [DataIssueDetail]);
            }
            if (data.hasOwnProperty('dataIssues')) {
                obj['dataIssues'] = ApiClient.convertToType(data['dataIssues'], ['String']);
            }
            if (data.hasOwnProperty('googleClusterId')) {
                obj['googleClusterId'] = ApiClient.convertToType(data['googleClusterId'], 'String');
            }
            if (data.hasOwnProperty('googleHotelDisplayName')) {
                obj['googleHotelDisplayName'] = ApiClient.convertToType(data['googleHotelDisplayName'], 'String');
            }
            if (data.hasOwnProperty('googleHotelId')) {
                obj['googleHotelId'] = ApiClient.convertToType(data['googleHotelId'], 'String');
            }
            if (data.hasOwnProperty('liveOnGoogle')) {
                obj['liveOnGoogle'] = ApiClient.convertToType(data['liveOnGoogle'], 'Boolean');
            }
            if (data.hasOwnProperty('matchStatus')) {
                obj['matchStatus'] = ApiClient.convertToType(data['matchStatus'], 'String');
            }
            if (data.hasOwnProperty('overclusteredPartnerHotelIds')) {
                obj['overclusteredPartnerHotelIds'] = ApiClient.convertToType(data['overclusteredPartnerHotelIds'], ['String']);
            }
            if (data.hasOwnProperty('partnerHotelDisplayName')) {
                obj['partnerHotelDisplayName'] = ApiClient.convertToType(data['partnerHotelDisplayName'], 'String');
            }
            if (data.hasOwnProperty('partnerHotelId')) {
                obj['partnerHotelId'] = ApiClient.convertToType(data['partnerHotelId'], 'String');
            }
            if (data.hasOwnProperty('primaryOverclusteredPartnerHotelId')) {
                obj['primaryOverclusteredPartnerHotelId'] = ApiClient.convertToType(data['primaryOverclusteredPartnerHotelId'], 'String');
            }
            if (data.hasOwnProperty('propertyDetails')) {
                obj['propertyDetails'] = ApiClient.convertToType(data['propertyDetails'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HotelView</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HotelView</code>.
     */
    static validateJSON(data) {
        if (data['dataIssueDetail']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dataIssueDetail'])) {
                throw new Error("Expected the field `dataIssueDetail` to be an array in the JSON data but got " + data['dataIssueDetail']);
            }
            // validate the optional field `dataIssueDetail` (array)
            for (const item of data['dataIssueDetail']) {
                DataIssueDetail.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dataIssues'])) {
            throw new Error("Expected the field `dataIssues` to be an array in the JSON data but got " + data['dataIssues']);
        }
        // ensure the json data is a string
        if (data['googleClusterId'] && !(typeof data['googleClusterId'] === 'string' || data['googleClusterId'] instanceof String)) {
            throw new Error("Expected the field `googleClusterId` to be a primitive type in the JSON string but got " + data['googleClusterId']);
        }
        // ensure the json data is a string
        if (data['googleHotelDisplayName'] && !(typeof data['googleHotelDisplayName'] === 'string' || data['googleHotelDisplayName'] instanceof String)) {
            throw new Error("Expected the field `googleHotelDisplayName` to be a primitive type in the JSON string but got " + data['googleHotelDisplayName']);
        }
        // ensure the json data is a string
        if (data['googleHotelId'] && !(typeof data['googleHotelId'] === 'string' || data['googleHotelId'] instanceof String)) {
            throw new Error("Expected the field `googleHotelId` to be a primitive type in the JSON string but got " + data['googleHotelId']);
        }
        // ensure the json data is a string
        if (data['matchStatus'] && !(typeof data['matchStatus'] === 'string' || data['matchStatus'] instanceof String)) {
            throw new Error("Expected the field `matchStatus` to be a primitive type in the JSON string but got " + data['matchStatus']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['overclusteredPartnerHotelIds'])) {
            throw new Error("Expected the field `overclusteredPartnerHotelIds` to be an array in the JSON data but got " + data['overclusteredPartnerHotelIds']);
        }
        // ensure the json data is a string
        if (data['partnerHotelDisplayName'] && !(typeof data['partnerHotelDisplayName'] === 'string' || data['partnerHotelDisplayName'] instanceof String)) {
            throw new Error("Expected the field `partnerHotelDisplayName` to be a primitive type in the JSON string but got " + data['partnerHotelDisplayName']);
        }
        // ensure the json data is a string
        if (data['partnerHotelId'] && !(typeof data['partnerHotelId'] === 'string' || data['partnerHotelId'] instanceof String)) {
            throw new Error("Expected the field `partnerHotelId` to be a primitive type in the JSON string but got " + data['partnerHotelId']);
        }
        // ensure the json data is a string
        if (data['primaryOverclusteredPartnerHotelId'] && !(typeof data['primaryOverclusteredPartnerHotelId'] === 'string' || data['primaryOverclusteredPartnerHotelId'] instanceof String)) {
            throw new Error("Expected the field `primaryOverclusteredPartnerHotelId` to be a primitive type in the JSON string but got " + data['primaryOverclusteredPartnerHotelId']);
        }
        // ensure the json data is a string
        if (data['propertyDetails'] && !(typeof data['propertyDetails'] === 'string' || data['propertyDetails'] instanceof String)) {
            throw new Error("Expected the field `propertyDetails` to be a primitive type in the JSON string but got " + data['propertyDetails']);
        }

        return true;
    }


}



/**
 * The type and severity of each data quality issue in the feed. If your feed contains data issues, update the feed and resubmit it. For more information, refer to this article.
 * @member {Array.<module:model/DataIssueDetail>} dataIssueDetail
 */
HotelView.prototype['dataIssueDetail'] = undefined;

/**
 * DEPRECATED. Indicates that the hotel has data quality issues. The value of this field indicates the type of error. This has been replaced with the data_issue_detail field. If your feed contains data issues, update the feed and resubmit it. For more information, refer to this article.
 * @member {Array.<module:model/HotelView.DataIssuesEnum>} dataIssues
 */
HotelView.prototype['dataIssues'] = undefined;

/**
 * The Google Maps identifier for the hotel.
 * @member {String} googleClusterId
 */
HotelView.prototype['googleClusterId'] = undefined;

/**
 * Google's hotel name.
 * @member {String} googleHotelDisplayName
 */
HotelView.prototype['googleHotelDisplayName'] = undefined;

/**
 * Google's canonical ID for the hotel.
 * @member {String} googleHotelId
 */
HotelView.prototype['googleHotelId'] = undefined;

/**
 * Optional. Whether the hotel appears in Google's hotel booking links. Declaration & behavior to get detection of presence/absence in JSON conversion.
 * @member {Boolean} liveOnGoogle
 */
HotelView.prototype['liveOnGoogle'] = undefined;

/**
 * Current matching status of the hotel.
 * @member {module:model/HotelView.MatchStatusEnum} matchStatus
 */
HotelView.prototype['matchStatus'] = undefined;

/**
 * Other hotels with which the hotel is overclustered. If your feed contains overclustered hotels, update the feed and resubmit it. To do this, you can use the manual match tool.
 * @member {Array.<String>} overclusteredPartnerHotelIds
 */
HotelView.prototype['overclusteredPartnerHotelIds'] = undefined;

/**
 * Partner's hotel name.
 * @member {String} partnerHotelDisplayName
 */
HotelView.prototype['partnerHotelDisplayName'] = undefined;

/**
 * The unique ID of the hotel that the partner provides in their Hotel List Feed.
 * @member {String} partnerHotelId
 */
HotelView.prototype['partnerHotelId'] = undefined;

/**
 * The primary hotel in the overclustered set.
 * @member {String} primaryOverclusteredPartnerHotelId
 */
HotelView.prototype['primaryOverclusteredPartnerHotelId'] = undefined;

/**
 * Optional. A URL to the property on Google. Only available for properties that are listed.
 * @member {String} propertyDetails
 */
HotelView.prototype['propertyDetails'] = undefined;





/**
 * Allowed values for the <code>dataIssues</code> property.
 * @enum {String}
 * @readonly
 */
HotelView['DataIssuesEnum'] = {

    /**
     * value: "FEED_DATA_ISSUE_UNSPECIFIED"
     * @const
     */
    "FEED_DATA_ISSUE_UNSPECIFIED": "FEED_DATA_ISSUE_UNSPECIFIED",

    /**
     * value: "FEED_DATA_ISSUE_UNKNOWN"
     * @const
     */
    "FEED_DATA_ISSUE_UNKNOWN": "FEED_DATA_ISSUE_UNKNOWN",

    /**
     * value: "NO_DATA_ISSUE"
     * @const
     */
    "NO_DATA_ISSUE": "NO_DATA_ISSUE",

    /**
     * value: "DUPLICATE_ADDRESS"
     * @const
     */
    "DUPLICATE_ADDRESS": "DUPLICATE_ADDRESS",

    /**
     * value: "MISSING_PHYSICAL_STREET_ADDRESS"
     * @const
     */
    "MISSING_PHYSICAL_STREET_ADDRESS": "MISSING_PHYSICAL_STREET_ADDRESS",

    /**
     * value: "MISSING_STREET_NAME"
     * @const
     */
    "MISSING_STREET_NAME": "MISSING_STREET_NAME",

    /**
     * value: "MISSING_STREET_NUMBER"
     * @const
     */
    "MISSING_STREET_NUMBER": "MISSING_STREET_NUMBER",

    /**
     * value: "MISSING_ADDRESS"
     * @const
     */
    "MISSING_ADDRESS": "MISSING_ADDRESS",

    /**
     * value: "MISSING_COUNTRY"
     * @const
     */
    "MISSING_COUNTRY": "MISSING_COUNTRY",

    /**
     * value: "INVALID_POSTAL_CODE"
     * @const
     */
    "INVALID_POSTAL_CODE": "INVALID_POSTAL_CODE",

    /**
     * value: "INVALID_POSTAL_CODE_SUFFIX"
     * @const
     */
    "INVALID_POSTAL_CODE_SUFFIX": "INVALID_POSTAL_CODE_SUFFIX",

    /**
     * value: "UNEXPECTED_POSTAL_CODE_SUFFIX"
     * @const
     */
    "UNEXPECTED_POSTAL_CODE_SUFFIX": "UNEXPECTED_POSTAL_CODE_SUFFIX",

    /**
     * value: "UNEXPECTED_POSTAL_CODE"
     * @const
     */
    "UNEXPECTED_POSTAL_CODE": "UNEXPECTED_POSTAL_CODE",

    /**
     * value: "INVALID_AMENITIES"
     * @const
     */
    "INVALID_AMENITIES": "INVALID_AMENITIES",

    /**
     * value: "INVALID_EMAIL_ADDRESS"
     * @const
     */
    "INVALID_EMAIL_ADDRESS": "INVALID_EMAIL_ADDRESS",

    /**
     * value: "DUPLICATE_LATLONG"
     * @const
     */
    "DUPLICATE_LATLONG": "DUPLICATE_LATLONG",

    /**
     * value: "LATLONG_INCONSISTENT_WITH_ADDRESS"
     * @const
     */
    "LATLONG_INCONSISTENT_WITH_ADDRESS": "LATLONG_INCONSISTENT_WITH_ADDRESS",

    /**
     * value: "MISSING_LATLONG"
     * @const
     */
    "MISSING_LATLONG": "MISSING_LATLONG",

    /**
     * value: "COULD_NOT_GEOCODE"
     * @const
     */
    "COULD_NOT_GEOCODE": "COULD_NOT_GEOCODE",

    /**
     * value: "MISSING_HOTEL_NAME"
     * @const
     */
    "MISSING_HOTEL_NAME": "MISSING_HOTEL_NAME",

    /**
     * value: "HOTEL_NAME_EMPTY"
     * @const
     */
    "HOTEL_NAME_EMPTY": "HOTEL_NAME_EMPTY",

    /**
     * value: "INVALID_HOTEL_NAME"
     * @const
     */
    "INVALID_HOTEL_NAME": "INVALID_HOTEL_NAME",

    /**
     * value: "HOTEL_NAME_TOO_LONG"
     * @const
     */
    "HOTEL_NAME_TOO_LONG": "HOTEL_NAME_TOO_LONG",

    /**
     * value: "PARSE_ERROR_IN_XML"
     * @const
     */
    "PARSE_ERROR_IN_XML": "PARSE_ERROR_IN_XML",

    /**
     * value: "UNEXPECTED_ATTRIBUTE_IN_XML"
     * @const
     */
    "UNEXPECTED_ATTRIBUTE_IN_XML": "UNEXPECTED_ATTRIBUTE_IN_XML",

    /**
     * value: "DUPLICATE_PHONE_NUMBER"
     * @const
     */
    "DUPLICATE_PHONE_NUMBER": "DUPLICATE_PHONE_NUMBER",

    /**
     * value: "MISSING_PHONE_NUMBER"
     * @const
     */
    "MISSING_PHONE_NUMBER": "MISSING_PHONE_NUMBER",

    /**
     * value: "MISSING_VOICE_PHONE_NUMBER"
     * @const
     */
    "MISSING_VOICE_PHONE_NUMBER": "MISSING_VOICE_PHONE_NUMBER",

    /**
     * value: "INVALID_PHONE_NUMBER_FORMAT"
     * @const
     */
    "INVALID_PHONE_NUMBER_FORMAT": "INVALID_PHONE_NUMBER_FORMAT",

    /**
     * value: "INVALID_PHONE_NUMBER"
     * @const
     */
    "INVALID_PHONE_NUMBER": "INVALID_PHONE_NUMBER",

    /**
     * value: "INVALID_PHONE_NUMBER_COUNTRY_CODE"
     * @const
     */
    "INVALID_PHONE_NUMBER_COUNTRY_CODE": "INVALID_PHONE_NUMBER_COUNTRY_CODE",

    /**
     * value: "PHONE_NUMBER_TOO_LONG"
     * @const
     */
    "PHONE_NUMBER_TOO_LONG": "PHONE_NUMBER_TOO_LONG",

    /**
     * value: "PHONE_NUMBER_TOO_SHORT"
     * @const
     */
    "PHONE_NUMBER_TOO_SHORT": "PHONE_NUMBER_TOO_SHORT",

    /**
     * value: "INVALID_WEBSITE_URL"
     * @const
     */
    "INVALID_WEBSITE_URL": "INVALID_WEBSITE_URL",

    /**
     * value: "ADWORDS_ATTRIBUTE_TOO_LONG"
     * @const
     */
    "ADWORDS_ATTRIBUTE_TOO_LONG": "ADWORDS_ATTRIBUTE_TOO_LONG",

    /**
     * value: "BRAND_NOT_ALLOWED"
     * @const
     */
    "BRAND_NOT_ALLOWED": "BRAND_NOT_ALLOWED",

    /**
     * value: "FLAGGED_DUE_TO_SUSPICIOUS_METADATA"
     * @const
     */
    "FLAGGED_DUE_TO_SUSPICIOUS_METADATA": "FLAGGED_DUE_TO_SUSPICIOUS_METADATA",

    /**
     * value: "NOT_ENOUGH_IMAGES_PROVIDED"
     * @const
     */
    "NOT_ENOUGH_IMAGES_PROVIDED": "NOT_ENOUGH_IMAGES_PROVIDED",

    /**
     * value: "IMAGE_PROCESSING_IN_PROGRESS"
     * @const
     */
    "IMAGE_PROCESSING_IN_PROGRESS": "IMAGE_PROCESSING_IN_PROGRESS",

    /**
     * value: "CANNOT_FETCH_IMAGES"
     * @const
     */
    "CANNOT_FETCH_IMAGES": "CANNOT_FETCH_IMAGES",

    /**
     * value: "INCOMPATIBLE_IMAGE_SIZE_OR_LOW_QUALITY"
     * @const
     */
    "INCOMPATIBLE_IMAGE_SIZE_OR_LOW_QUALITY": "INCOMPATIBLE_IMAGE_SIZE_OR_LOW_QUALITY",

    /**
     * value: "MISSING_LANG_IN_RAW_LISTING"
     * @const
     */
    "MISSING_LANG_IN_RAW_LISTING": "MISSING_LANG_IN_RAW_LISTING",

    /**
     * value: "IS_HOTEL"
     * @const
     */
    "IS_HOTEL": "IS_HOTEL",

    /**
     * value: "MISSING_REQ_ATTR"
     * @const
     */
    "MISSING_REQ_ATTR": "MISSING_REQ_ATTR",

    /**
     * value: "MISSING_NAME"
     * @const
     */
    "MISSING_NAME": "MISSING_NAME",

    /**
     * value: "MISSING_LANG_IN_NAME"
     * @const
     */
    "MISSING_LANG_IN_NAME": "MISSING_LANG_IN_NAME",

    /**
     * value: "VR_NAME_TOO_LONG"
     * @const
     */
    "VR_NAME_TOO_LONG": "VR_NAME_TOO_LONG",

    /**
     * value: "TEST_PROPERTY"
     * @const
     */
    "TEST_PROPERTY": "TEST_PROPERTY",

    /**
     * value: "NON_VR_ACCOMMODATION_TYPE_BASED_ON_LISTING_NAME"
     * @const
     */
    "NON_VR_ACCOMMODATION_TYPE_BASED_ON_LISTING_NAME": "NON_VR_ACCOMMODATION_TYPE_BASED_ON_LISTING_NAME",

    /**
     * value: "BRAND_NAME_TOO_LONG"
     * @const
     */
    "BRAND_NAME_TOO_LONG": "BRAND_NAME_TOO_LONG",

    /**
     * value: "MISSING_BRAND_NAME"
     * @const
     */
    "MISSING_BRAND_NAME": "MISSING_BRAND_NAME",

    /**
     * value: "INVALID_REVIEW_RATING"
     * @const
     */
    "INVALID_REVIEW_RATING": "INVALID_REVIEW_RATING",

    /**
     * value: "INVALID_CHECKIN_FORMAT"
     * @const
     */
    "INVALID_CHECKIN_FORMAT": "INVALID_CHECKIN_FORMAT",

    /**
     * value: "INVALID_CHECKOUT_FORMAT"
     * @const
     */
    "INVALID_CHECKOUT_FORMAT": "INVALID_CHECKOUT_FORMAT"
};


/**
 * Allowed values for the <code>matchStatus</code> property.
 * @enum {String}
 * @readonly
 */
HotelView['MatchStatusEnum'] = {

    /**
     * value: "MATCH_STATUS_UNSPECIFIED"
     * @const
     */
    "MATCH_STATUS_UNSPECIFIED": "MATCH_STATUS_UNSPECIFIED",

    /**
     * value: "MATCH_STATUS_UNKNOWN"
     * @const
     */
    "MATCH_STATUS_UNKNOWN": "MATCH_STATUS_UNKNOWN",

    /**
     * value: "NOT_MATCHED"
     * @const
     */
    "NOT_MATCHED": "NOT_MATCHED",

    /**
     * value: "MATCHED"
     * @const
     */
    "MATCHED": "MATCHED",

    /**
     * value: "MAP_OVERLAP"
     * @const
     */
    "MAP_OVERLAP": "MAP_OVERLAP"
};



export default HotelView;

