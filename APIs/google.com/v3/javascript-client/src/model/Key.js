/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelDate from './ModelDate';

/**
 * The Key model module.
 * @module model/Key
 * @version v3
 */
class Key {
    /**
     * Constructs a new <code>Key</code>.
     * Key of a result.
     * @alias module:model/Key
     */
    constructor() { 
        
        Key.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Key</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Key} obj Optional instance to populate.
     * @return {module:model/Key} The populated <code>Key</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Key();

            if (data.hasOwnProperty('advanceBookingWindow')) {
                obj['advanceBookingWindow'] = ApiClient.convertToType(data['advanceBookingWindow'], 'Number');
            }
            if (data.hasOwnProperty('checkinDate')) {
                obj['checkinDate'] = ModelDate.constructFromObject(data['checkinDate']);
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ModelDate.constructFromObject(data['date']);
            }
            if (data.hasOwnProperty('deviceType')) {
                obj['deviceType'] = ApiClient.convertToType(data['deviceType'], 'String');
            }
            if (data.hasOwnProperty('hotelRegionCode')) {
                obj['hotelRegionCode'] = ApiClient.convertToType(data['hotelRegionCode'], 'String');
            }
            if (data.hasOwnProperty('lengthOfStayDays')) {
                obj['lengthOfStayDays'] = ApiClient.convertToType(data['lengthOfStayDays'], 'Number');
            }
            if (data.hasOwnProperty('occupancy')) {
                obj['occupancy'] = ApiClient.convertToType(data['occupancy'], 'Number');
            }
            if (data.hasOwnProperty('partnerHotelId')) {
                obj['partnerHotelId'] = ApiClient.convertToType(data['partnerHotelId'], 'String');
            }
            if (data.hasOwnProperty('userRegionCode')) {
                obj['userRegionCode'] = ApiClient.convertToType(data['userRegionCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Key</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Key</code>.
     */
    static validateJSON(data) {
        // validate the optional field `checkinDate`
        if (data['checkinDate']) { // data not null
          ModelDate.validateJSON(data['checkinDate']);
        }
        // validate the optional field `date`
        if (data['date']) { // data not null
          ModelDate.validateJSON(data['date']);
        }
        // ensure the json data is a string
        if (data['deviceType'] && !(typeof data['deviceType'] === 'string' || data['deviceType'] instanceof String)) {
            throw new Error("Expected the field `deviceType` to be a primitive type in the JSON string but got " + data['deviceType']);
        }
        // ensure the json data is a string
        if (data['hotelRegionCode'] && !(typeof data['hotelRegionCode'] === 'string' || data['hotelRegionCode'] instanceof String)) {
            throw new Error("Expected the field `hotelRegionCode` to be a primitive type in the JSON string but got " + data['hotelRegionCode']);
        }
        // ensure the json data is a string
        if (data['partnerHotelId'] && !(typeof data['partnerHotelId'] === 'string' || data['partnerHotelId'] instanceof String)) {
            throw new Error("Expected the field `partnerHotelId` to be a primitive type in the JSON string but got " + data['partnerHotelId']);
        }
        // ensure the json data is a string
        if (data['userRegionCode'] && !(typeof data['userRegionCode'] === 'string' || data['userRegionCode'] instanceof String)) {
            throw new Error("Expected the field `userRegionCode` to be a primitive type in the JSON string but got " + data['userRegionCode']);
        }

        return true;
    }


}



/**
 * The number of days in advance the user wants to book the itinerary. If `advanceBookingWindow` is not a value of the `aggregateBy` parameter in the request call, then the `advanceBookingWindow` field is not returned in the `Key`.
 * @member {Number} advanceBookingWindow
 */
Key.prototype['advanceBookingWindow'] = undefined;

/**
 * @member {module:model/ModelDate} checkinDate
 */
Key.prototype['checkinDate'] = undefined;

/**
 * @member {module:model/ModelDate} date
 */
Key.prototype['date'] = undefined;

/**
 * The userâ€™s device type. If `deviceType` is not a value of the `aggregateBy` parameter in the request call, then the `deviceType` field is not returned in the `Key`.
 * @member {module:model/Key.DeviceTypeEnum} deviceType
 */
Key.prototype['deviceType'] = undefined;

/**
 * CLDR region code of the country/region of the hotel. If `hotelRegionCode` is not a value of the `aggregateBy` parameter in the request call, then the `hotelRegionCode` field is not returned in the `Key`.
 * @member {String} hotelRegionCode
 */
Key.prototype['hotelRegionCode'] = undefined;

/**
 * The number of nights for the itinerary. If `lengthOfStayDays` is not a value of the `aggregateBy` parameter in the request call, then the `lengthOfStayDays` field is not returned in the `Key`.
 * @member {Number} lengthOfStayDays
 */
Key.prototype['lengthOfStayDays'] = undefined;

/**
 * The total occupancy of the itinerary. If `occupancy` is not a value of the `aggregateBy` parameter in the request call, then the `occupancy` field is not returned in the `Key`.
 * @member {Number} occupancy
 */
Key.prototype['occupancy'] = undefined;

/**
 * Partner's hotel ID. If `partnerHotelId` is not a value of the `aggregateBy` parameter in the request call, then the `partnerHotelId` field is not returned in the `Key`.
 * @member {String} partnerHotelId
 */
Key.prototype['partnerHotelId'] = undefined;

/**
 * ISO 3116 region code of the country/region of the user. If `userRegionCode` is not a value of the `aggregateBy` parameter in the request call, then the `userRegionCode` field is not returned in the `Key`.
 * @member {String} userRegionCode
 */
Key.prototype['userRegionCode'] = undefined;





/**
 * Allowed values for the <code>deviceType</code> property.
 * @enum {String}
 * @readonly
 */
Key['DeviceTypeEnum'] = {

    /**
     * value: "DEVICE_UNSPECIFIED"
     * @const
     */
    "DEVICE_UNSPECIFIED": "DEVICE_UNSPECIFIED",

    /**
     * value: "DEVICE_UNKNOWN"
     * @const
     */
    "DEVICE_UNKNOWN": "DEVICE_UNKNOWN",

    /**
     * value: "DESKTOP"
     * @const
     */
    "DESKTOP": "DESKTOP",

    /**
     * value: "MOBILE"
     * @const
     */
    "MOBILE": "MOBILE",

    /**
     * value: "TABLET"
     * @const
     */
    "TABLET": "TABLET"
};



export default Key;

