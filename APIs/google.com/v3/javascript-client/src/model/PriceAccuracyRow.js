/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelDate from './ModelDate';
import PriceRecord from './PriceRecord';

/**
 * The PriceAccuracyRow model module.
 * @module model/PriceAccuracyRow
 * @version v3
 */
class PriceAccuracyRow {
    /**
     * Constructs a new <code>PriceAccuracyRow</code>.
     * A price accuracy row.
     * @alias module:model/PriceAccuracyRow
     */
    constructor() { 
        
        PriceAccuracyRow.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PriceAccuracyRow</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PriceAccuracyRow} obj Optional instance to populate.
     * @return {module:model/PriceAccuracyRow} The populated <code>PriceAccuracyRow</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PriceAccuracyRow();

            if (data.hasOwnProperty('adultOccupancy')) {
                obj['adultOccupancy'] = ApiClient.convertToType(data['adultOccupancy'], 'Number');
            }
            if (data.hasOwnProperty('affectsScore')) {
                obj['affectsScore'] = ApiClient.convertToType(data['affectsScore'], 'Boolean');
            }
            if (data.hasOwnProperty('cachedPriceRecord')) {
                obj['cachedPriceRecord'] = PriceRecord.constructFromObject(data['cachedPriceRecord']);
            }
            if (data.hasOwnProperty('checkinDate')) {
                obj['checkinDate'] = ModelDate.constructFromObject(data['checkinDate']);
            }
            if (data.hasOwnProperty('childOccupancy')) {
                obj['childOccupancy'] = ApiClient.convertToType(data['childOccupancy'], 'Number');
            }
            if (data.hasOwnProperty('correctionTime')) {
                obj['correctionTime'] = ApiClient.convertToType(data['correctionTime'], 'String');
            }
            if (data.hasOwnProperty('deviceType')) {
                obj['deviceType'] = ApiClient.convertToType(data['deviceType'], 'String');
            }
            if (data.hasOwnProperty('fetchedPriceRecord')) {
                obj['fetchedPriceRecord'] = PriceRecord.constructFromObject(data['fetchedPriceRecord']);
            }
            if (data.hasOwnProperty('finalDomain')) {
                obj['finalDomain'] = ApiClient.convertToType(data['finalDomain'], 'String');
            }
            if (data.hasOwnProperty('hotel')) {
                obj['hotel'] = ApiClient.convertToType(data['hotel'], 'String');
            }
            if (data.hasOwnProperty('hotelCountryCode')) {
                obj['hotelCountryCode'] = ApiClient.convertToType(data['hotelCountryCode'], 'String');
            }
            if (data.hasOwnProperty('lengthOfStayDays')) {
                obj['lengthOfStayDays'] = ApiClient.convertToType(data['lengthOfStayDays'], 'Number');
            }
            if (data.hasOwnProperty('mismatchReason')) {
                obj['mismatchReason'] = ApiClient.convertToType(data['mismatchReason'], 'String');
            }
            if (data.hasOwnProperty('rateRuleId')) {
                obj['rateRuleId'] = ApiClient.convertToType(data['rateRuleId'], 'String');
            }
            if (data.hasOwnProperty('signalSource')) {
                obj['signalSource'] = ApiClient.convertToType(data['signalSource'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('userRegionCode')) {
                obj['userRegionCode'] = ApiClient.convertToType(data['userRegionCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PriceAccuracyRow</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PriceAccuracyRow</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cachedPriceRecord`
        if (data['cachedPriceRecord']) { // data not null
          PriceRecord.validateJSON(data['cachedPriceRecord']);
        }
        // validate the optional field `checkinDate`
        if (data['checkinDate']) { // data not null
          ModelDate.validateJSON(data['checkinDate']);
        }
        // ensure the json data is a string
        if (data['correctionTime'] && !(typeof data['correctionTime'] === 'string' || data['correctionTime'] instanceof String)) {
            throw new Error("Expected the field `correctionTime` to be a primitive type in the JSON string but got " + data['correctionTime']);
        }
        // ensure the json data is a string
        if (data['deviceType'] && !(typeof data['deviceType'] === 'string' || data['deviceType'] instanceof String)) {
            throw new Error("Expected the field `deviceType` to be a primitive type in the JSON string but got " + data['deviceType']);
        }
        // validate the optional field `fetchedPriceRecord`
        if (data['fetchedPriceRecord']) { // data not null
          PriceRecord.validateJSON(data['fetchedPriceRecord']);
        }
        // ensure the json data is a string
        if (data['finalDomain'] && !(typeof data['finalDomain'] === 'string' || data['finalDomain'] instanceof String)) {
            throw new Error("Expected the field `finalDomain` to be a primitive type in the JSON string but got " + data['finalDomain']);
        }
        // ensure the json data is a string
        if (data['hotel'] && !(typeof data['hotel'] === 'string' || data['hotel'] instanceof String)) {
            throw new Error("Expected the field `hotel` to be a primitive type in the JSON string but got " + data['hotel']);
        }
        // ensure the json data is a string
        if (data['hotelCountryCode'] && !(typeof data['hotelCountryCode'] === 'string' || data['hotelCountryCode'] instanceof String)) {
            throw new Error("Expected the field `hotelCountryCode` to be a primitive type in the JSON string but got " + data['hotelCountryCode']);
        }
        // ensure the json data is a string
        if (data['mismatchReason'] && !(typeof data['mismatchReason'] === 'string' || data['mismatchReason'] instanceof String)) {
            throw new Error("Expected the field `mismatchReason` to be a primitive type in the JSON string but got " + data['mismatchReason']);
        }
        // ensure the json data is a string
        if (data['rateRuleId'] && !(typeof data['rateRuleId'] === 'string' || data['rateRuleId'] instanceof String)) {
            throw new Error("Expected the field `rateRuleId` to be a primitive type in the JSON string but got " + data['rateRuleId']);
        }
        // ensure the json data is a string
        if (data['signalSource'] && !(typeof data['signalSource'] === 'string' || data['signalSource'] instanceof String)) {
            throw new Error("Expected the field `signalSource` to be a primitive type in the JSON string but got " + data['signalSource']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['userRegionCode'] && !(typeof data['userRegionCode'] === 'string' || data['userRegionCode'] instanceof String)) {
            throw new Error("Expected the field `userRegionCode` to be a primitive type in the JSON string but got " + data['userRegionCode']);
        }

        return true;
    }


}



/**
 * The number of adults in the occupancy details of the validation query.
 * @member {Number} adultOccupancy
 */
PriceAccuracyRow.prototype['adultOccupancy'] = undefined;

/**
 * True if this row affects the placement of a price. This field has been renamed to “Affects placement” in Hotel Center.
 * @member {Boolean} affectsScore
 */
PriceAccuracyRow.prototype['affectsScore'] = undefined;

/**
 * @member {module:model/PriceRecord} cachedPriceRecord
 */
PriceAccuracyRow.prototype['cachedPriceRecord'] = undefined;

/**
 * @member {module:model/ModelDate} checkinDate
 */
PriceAccuracyRow.prototype['checkinDate'] = undefined;

/**
 * The number of children in the occupancy details of the validation query.
 * @member {Number} childOccupancy
 */
PriceAccuracyRow.prototype['childOccupancy'] = undefined;

/**
 * Time at which an incorrect price is updated to a correct price.
 * @member {String} correctionTime
 */
PriceAccuracyRow.prototype['correctionTime'] = undefined;

/**
 * The user's device type.
 * @member {module:model/PriceAccuracyRow.DeviceTypeEnum} deviceType
 */
PriceAccuracyRow.prototype['deviceType'] = undefined;

/**
 * @member {module:model/PriceRecord} fetchedPriceRecord
 */
PriceAccuracyRow.prototype['fetchedPriceRecord'] = undefined;

/**
 * The domain of the final page from which prices are read.
 * @member {String} finalDomain
 */
PriceAccuracyRow.prototype['finalDomain'] = undefined;

/**
 * Partner-defined hotel ID.
 * @member {String} hotel
 */
PriceAccuracyRow.prototype['hotel'] = undefined;

/**
 * The country of the hotel (based on address).
 * @member {String} hotelCountryCode
 */
PriceAccuracyRow.prototype['hotelCountryCode'] = undefined;

/**
 * Length of stay.
 * @member {Number} lengthOfStayDays
 */
PriceAccuracyRow.prototype['lengthOfStayDays'] = undefined;

/**
 * The reason why the fetched price didn't match the cached price.
 * @member {module:model/PriceAccuracyRow.MismatchReasonEnum} mismatchReason
 */
PriceAccuracyRow.prototype['mismatchReason'] = undefined;

/**
 * The rate rule of the advertised price for non-public rates.
 * @member {String} rateRuleId
 */
PriceAccuracyRow.prototype['rateRuleId'] = undefined;

/**
 * Source of the price accuracy signal.
 * @member {module:model/PriceAccuracyRow.SignalSourceEnum} signalSource
 */
PriceAccuracyRow.prototype['signalSource'] = undefined;

/**
 * Initial URL visited on the partner website.
 * @member {String} url
 */
PriceAccuracyRow.prototype['url'] = undefined;

/**
 * The user's region.
 * @member {String} userRegionCode
 */
PriceAccuracyRow.prototype['userRegionCode'] = undefined;





/**
 * Allowed values for the <code>deviceType</code> property.
 * @enum {String}
 * @readonly
 */
PriceAccuracyRow['DeviceTypeEnum'] = {

    /**
     * value: "DEVICE_UNSPECIFIED"
     * @const
     */
    "DEVICE_UNSPECIFIED": "DEVICE_UNSPECIFIED",

    /**
     * value: "DEVICE_UNKNOWN"
     * @const
     */
    "DEVICE_UNKNOWN": "DEVICE_UNKNOWN",

    /**
     * value: "DESKTOP"
     * @const
     */
    "DESKTOP": "DESKTOP",

    /**
     * value: "MOBILE"
     * @const
     */
    "MOBILE": "MOBILE",

    /**
     * value: "TABLET"
     * @const
     */
    "TABLET": "TABLET"
};


/**
 * Allowed values for the <code>mismatchReason</code> property.
 * @enum {String}
 * @readonly
 */
PriceAccuracyRow['MismatchReasonEnum'] = {

    /**
     * value: "MISMATCH_REASON_UNSPECIFIED"
     * @const
     */
    "MISMATCH_REASON_UNSPECIFIED": "MISMATCH_REASON_UNSPECIFIED",

    /**
     * value: "MISMATCH_REASON_UNKNOWN"
     * @const
     */
    "MISMATCH_REASON_UNKNOWN": "MISMATCH_REASON_UNKNOWN",

    /**
     * value: "TAX_MISMATCH"
     * @const
     */
    "TAX_MISMATCH": "TAX_MISMATCH",

    /**
     * value: "ROOM_UNAVAILABLE"
     * @const
     */
    "ROOM_UNAVAILABLE": "ROOM_UNAVAILABLE",

    /**
     * value: "SITE_ERROR"
     * @const
     */
    "SITE_ERROR": "SITE_ERROR",

    /**
     * value: "PRICE_FEED_DELAYED"
     * @const
     */
    "PRICE_FEED_DELAYED": "PRICE_FEED_DELAYED",

    /**
     * value: "DISCOUNT_MISSING"
     * @const
     */
    "DISCOUNT_MISSING": "DISCOUNT_MISSING",

    /**
     * value: "INCORRECT_DISCOUNT_VALUE"
     * @const
     */
    "INCORRECT_DISCOUNT_VALUE": "INCORRECT_DISCOUNT_VALUE",

    /**
     * value: "WRONG_ITINERARY"
     * @const
     */
    "WRONG_ITINERARY": "WRONG_ITINERARY"
};


/**
 * Allowed values for the <code>signalSource</code> property.
 * @enum {String}
 * @readonly
 */
PriceAccuracyRow['SignalSourceEnum'] = {

    /**
     * value: "SIGNAL_SOURCE_UNSPECIFIED"
     * @const
     */
    "SIGNAL_SOURCE_UNSPECIFIED": "SIGNAL_SOURCE_UNSPECIFIED",

    /**
     * value: "SIGNAL_SOURCE_UNKNOWN"
     * @const
     */
    "SIGNAL_SOURCE_UNKNOWN": "SIGNAL_SOURCE_UNKNOWN",

    /**
     * value: "FETCHED"
     * @const
     */
    "FETCHED": "FETCHED",

    /**
     * value: "PIXEL"
     * @const
     */
    "PIXEL": "PIXEL"
};



export default PriceAccuracyRow;

