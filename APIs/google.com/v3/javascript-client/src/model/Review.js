/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Rating from './Rating';

/**
 * The Review model module.
 * @module model/Review
 * @version v3
 */
class Review {
    /**
     * Constructs a new <code>Review</code>.
     * A single review in a VR Listing. NEXT ID: 10
     * @alias module:model/Review
     */
    constructor() { 
        
        Review.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Review</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Review} obj Optional instance to populate.
     * @return {module:model/Review} The populated <code>Review</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Review();

            if (data.hasOwnProperty('author')) {
                obj['author'] = ApiClient.convertToType(data['author'], 'String');
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('languageCode')) {
                obj['languageCode'] = ApiClient.convertToType(data['languageCode'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('rating')) {
                obj['rating'] = ApiClient.convertToType(data['rating'], [Rating]);
            }
            if (data.hasOwnProperty('reviewTime')) {
                obj['reviewTime'] = ApiClient.convertToType(data['reviewTime'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('visitTime')) {
                obj['visitTime'] = ApiClient.convertToType(data['visitTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Review</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Review</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['author'] && !(typeof data['author'] === 'string' || data['author'] instanceof String)) {
            throw new Error("Expected the field `author` to be a primitive type in the JSON string but got " + data['author']);
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['languageCode'] && !(typeof data['languageCode'] === 'string' || data['languageCode'] instanceof String)) {
            throw new Error("Expected the field `languageCode` to be a primitive type in the JSON string but got " + data['languageCode']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        if (data['rating']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rating'])) {
                throw new Error("Expected the field `rating` to be an array in the JSON data but got " + data['rating']);
            }
            // validate the optional field `rating` (array)
            for (const item of data['rating']) {
                Rating.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['reviewTime'] && !(typeof data['reviewTime'] === 'string' || data['reviewTime'] instanceof String)) {
            throw new Error("Expected the field `reviewTime` to be a primitive type in the JSON string but got " + data['reviewTime']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['visitTime'] && !(typeof data['visitTime'] === 'string' || data['visitTime'] instanceof String)) {
            throw new Error("Expected the field `visitTime` to be a primitive type in the JSON string but got " + data['visitTime']);
        }

        return true;
    }


}



/**
 * The author of the review.
 * @member {String} author
 */
Review.prototype['author'] = undefined;

/**
 * The body of the review.
 * @member {String} body
 */
Review.prototype['body'] = undefined;

/**
 * Language of the review, such as \"en\", \"de\", etc.
 * @member {String} languageCode
 */
Review.prototype['languageCode'] = undefined;

/**
 * The url of the review.
 * @member {String} link
 */
Review.prototype['link'] = undefined;

/**
 * Any ratings associated with this review. This is repeated because reviews can include ratings on different aspects of a listing, e.g. location, cleanliness, etc.
 * @member {Array.<module:model/Rating>} rating
 */
Review.prototype['rating'] = undefined;

/**
 * Unix timestamp (in seconds) of the review, in UTC+0.
 * @member {String} reviewTime
 */
Review.prototype['reviewTime'] = undefined;

/**
 * The title of the review, for example: Great three bedrooms.
 * @member {String} title
 */
Review.prototype['title'] = undefined;

/**
 * The type of the review.
 * @member {module:model/Review.TypeEnum} type
 */
Review.prototype['type'] = undefined;

/**
 * Unix timestamp (in seconds) of when the stay was, in UTC+0.
 * @member {String} visitTime
 */
Review.prototype['visitTime'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Review['TypeEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "EDITORIAL"
     * @const
     */
    "EDITORIAL": "EDITORIAL",

    /**
     * value: "USER"
     * @const
     */
    "USER": "USER"
};



export default Review;

