/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelDate from './ModelDate';
import PriceCoverageBucket from './PriceCoverageBucket';

/**
 * The PriceCoverageView model module.
 * @module model/PriceCoverageView
 * @version v3
 */
class PriceCoverageView {
    /**
     * Constructs a new <code>PriceCoverageView</code>.
     * A price coverage view. Covers the &#x60;price_coverage_stats&#x60; Scorecard functionality in pre-v3.0 API versions. For more information, refer to Price Coverage for Push and Hint partners.
     * @alias module:model/PriceCoverageView
     */
    constructor() { 
        
        PriceCoverageView.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PriceCoverageView</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PriceCoverageView} obj Optional instance to populate.
     * @return {module:model/PriceCoverageView} The populated <code>PriceCoverageView</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PriceCoverageView();

            if (data.hasOwnProperty('calculationDate')) {
                obj['calculationDate'] = ModelDate.constructFromObject(data['calculationDate']);
            }
            if (data.hasOwnProperty('matchedPropertyCount')) {
                obj['matchedPropertyCount'] = ApiClient.convertToType(data['matchedPropertyCount'], 'Number');
            }
            if (data.hasOwnProperty('priceCoverageBinaryPercent')) {
                obj['priceCoverageBinaryPercent'] = ApiClient.convertToType(data['priceCoverageBinaryPercent'], 'Number');
            }
            if (data.hasOwnProperty('priceCoverageBuckets')) {
                obj['priceCoverageBuckets'] = ApiClient.convertToType(data['priceCoverageBuckets'], [PriceCoverageBucket]);
            }
            if (data.hasOwnProperty('priceCoveragePercent')) {
                obj['priceCoveragePercent'] = ApiClient.convertToType(data['priceCoveragePercent'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PriceCoverageView</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PriceCoverageView</code>.
     */
    static validateJSON(data) {
        // validate the optional field `calculationDate`
        if (data['calculationDate']) { // data not null
          ModelDate.validateJSON(data['calculationDate']);
        }
        if (data['priceCoverageBuckets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['priceCoverageBuckets'])) {
                throw new Error("Expected the field `priceCoverageBuckets` to be an array in the JSON data but got " + data['priceCoverageBuckets']);
            }
            // validate the optional field `priceCoverageBuckets` (array)
            for (const item of data['priceCoverageBuckets']) {
                PriceCoverageBucket.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/ModelDate} calculationDate
 */
PriceCoverageView.prototype['calculationDate'] = undefined;

/**
 * The total number of properties that have prices for the given itineraries.
 * @member {Number} matchedPropertyCount
 */
PriceCoverageView.prototype['matchedPropertyCount'] = undefined;

/**
 * The ratio between the number of hotels which have at least one price for the calculation period and `matched_property_count`.
 * @member {Number} priceCoverageBinaryPercent
 */
PriceCoverageView.prototype['priceCoverageBinaryPercent'] = undefined;

/**
 * Price coverage stats for combinations of advance booking window and length of stay ranges.
 * @member {Array.<module:model/PriceCoverageBucket>} priceCoverageBuckets
 */
PriceCoverageView.prototype['priceCoverageBuckets'] = undefined;

/**
 * The overall price coverage for an account. This value is the ratio between the number of hotel prices for the calculation booking window and length of stay range divided by the number of all possible prices, which is `matched_property_count` times 330 (for advance book window) times 30 (for length of stay).
 * @member {Number} priceCoveragePercent
 */
PriceCoverageView.prototype['priceCoveragePercent'] = undefined;






export default PriceCoverageView;

