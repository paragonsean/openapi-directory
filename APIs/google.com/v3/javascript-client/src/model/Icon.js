/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Icon model module.
 * @module model/Icon
 * @version v3
 */
class Icon {
    /**
     * Constructs a new <code>Icon</code>.
     * Information about a partner&#39;s icon.
     * @alias module:model/Icon
     */
    constructor() { 
        
        Icon.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Icon</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Icon} obj Optional instance to populate.
     * @return {module:model/Icon} The populated <code>Icon</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Icon();

            if (data.hasOwnProperty('disapprovalReasons')) {
                obj['disapprovalReasons'] = ApiClient.convertToType(data['disapprovalReasons'], ['String']);
            }
            if (data.hasOwnProperty('iconUri')) {
                obj['iconUri'] = ApiClient.convertToType(data['iconUri'], 'String');
            }
            if (data.hasOwnProperty('imageData')) {
                obj['imageData'] = ApiClient.convertToType(data['imageData'], 'Blob');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Icon</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Icon</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['disapprovalReasons'])) {
            throw new Error("Expected the field `disapprovalReasons` to be an array in the JSON data but got " + data['disapprovalReasons']);
        }
        // ensure the json data is a string
        if (data['iconUri'] && !(typeof data['iconUri'] === 'string' || data['iconUri'] instanceof String)) {
            throw new Error("Expected the field `iconUri` to be a primitive type in the JSON string but got " + data['iconUri']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Output only. The icon's disapproval reason(s). Only applies to icons with `REJECTED` state.
 * @member {Array.<module:model/Icon.DisapprovalReasonsEnum>} disapprovalReasons
 */
Icon.prototype['disapprovalReasons'] = undefined;

/**
 * Output only. The approved icon's Google-hosted URI. Only applies to icons with `APPROVED` state.
 * @member {String} iconUri
 */
Icon.prototype['iconUri'] = undefined;

/**
 * Required. Input only. The icon contents, which must be in PNG format, or convertible to PNG.
 * @member {Blob} imageData
 */
Icon.prototype['imageData'] = undefined;

/**
 * Required. Output only. The resource name for the icon in the format `accounts/{account_id}/icons/{icon_id}`. Google generates the `icon_id` during the `create` operation. Use the `icon_id` to associate the icon with a brand using the [accounts.brands](/hotels/hotel-prices/api-reference/rest/v3/accounts.brands#resource:-brand) API.
 * @member {String} name
 */
Icon.prototype['name'] = undefined;

/**
 * Optional. Value for tracking the icon. It could be the primary key to your icon in your system, or the icon's filename. Google does not use this value.
 * @member {String} reference
 */
Icon.prototype['reference'] = undefined;

/**
 * Output only. The icon's current state.
 * @member {module:model/Icon.StateEnum} state
 */
Icon.prototype['state'] = undefined;





/**
 * Allowed values for the <code>disapprovalReasons</code> property.
 * @enum {String}
 * @readonly
 */
Icon['DisapprovalReasonsEnum'] = {

    /**
     * value: "IMAGE_DISAPPROVAL_REASON_UNSPECIFIED"
     * @const
     */
    "IMAGE_DISAPPROVAL_REASON_UNSPECIFIED": "IMAGE_DISAPPROVAL_REASON_UNSPECIFIED",

    /**
     * value: "NOT_LIKE_SITE"
     * @const
     */
    "NOT_LIKE_SITE": "NOT_LIKE_SITE",

    /**
     * value: "OFFENSIVE"
     * @const
     */
    "OFFENSIVE": "OFFENSIVE",

    /**
     * value: "LOW_QUALITY"
     * @const
     */
    "LOW_QUALITY": "LOW_QUALITY",

    /**
     * value: "ANIMATED"
     * @const
     */
    "ANIMATED": "ANIMATED",

    /**
     * value: "BAD_BACKGROUND"
     * @const
     */
    "BAD_BACKGROUND": "BAD_BACKGROUND",

    /**
     * value: "TEXT_TOO_SMALL"
     * @const
     */
    "TEXT_TOO_SMALL": "TEXT_TOO_SMALL"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Icon['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "NEW"
     * @const
     */
    "NEW": "NEW",

    /**
     * value: "APPROVED"
     * @const
     */
    "APPROVED": "APPROVED",

    /**
     * value: "REJECTED"
     * @const
     */
    "REJECTED": "REJECTED"
};



export default Icon;

