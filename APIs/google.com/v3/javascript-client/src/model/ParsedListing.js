/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataIssueDetail from './DataIssueDetail';
import Image from './Image';
import LatLng from './LatLng';
import LocalizedText from './LocalizedText';
import Review from './Review';

/**
 * The ParsedListing model module.
 * @module model/ParsedListing
 * @version v3
 */
class ParsedListing {
    /**
     * Constructs a new <code>ParsedListing</code>.
     * A parsed listing
     * @alias module:model/ParsedListing
     */
    constructor() { 
        
        ParsedListing.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ParsedListing</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ParsedListing} obj Optional instance to populate.
     * @return {module:model/ParsedListing} The populated <code>ParsedListing</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ParsedListing();

            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], [LocalizedText]);
            }
            if (data.hasOwnProperty('dataIssueDetail')) {
                obj['dataIssueDetail'] = ApiClient.convertToType(data['dataIssueDetail'], [DataIssueDetail]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], [LocalizedText]);
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], [Image]);
            }
            if (data.hasOwnProperty('imprecisionRadiusMeters')) {
                obj['imprecisionRadiusMeters'] = ApiClient.convertToType(data['imprecisionRadiusMeters'], 'Number');
            }
            if (data.hasOwnProperty('isServed')) {
                obj['isServed'] = ApiClient.convertToType(data['isServed'], 'Boolean');
            }
            if (data.hasOwnProperty('listingName')) {
                obj['listingName'] = ApiClient.convertToType(data['listingName'], [LocalizedText]);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = LatLng.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('partnerListId')) {
                obj['partnerListId'] = ApiClient.convertToType(data['partnerListId'], 'String');
            }
            if (data.hasOwnProperty('regionCode')) {
                obj['regionCode'] = ApiClient.convertToType(data['regionCode'], 'String');
            }
            if (data.hasOwnProperty('review')) {
                obj['review'] = ApiClient.convertToType(data['review'], [Review]);
            }
            if (data.hasOwnProperty('unitAttributes')) {
                obj['unitAttributes'] = ApiClient.convertToType(data['unitAttributes'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ParsedListing</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ParsedListing</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['brand'] && !(typeof data['brand'] === 'string' || data['brand'] instanceof String)) {
            throw new Error("Expected the field `brand` to be a primitive type in the JSON string but got " + data['brand']);
        }
        if (data['category']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['category'])) {
                throw new Error("Expected the field `category` to be an array in the JSON data but got " + data['category']);
            }
            // validate the optional field `category` (array)
            for (const item of data['category']) {
                LocalizedText.validateJSON(item);
            };
        }
        if (data['dataIssueDetail']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dataIssueDetail'])) {
                throw new Error("Expected the field `dataIssueDetail` to be an array in the JSON data but got " + data['dataIssueDetail']);
            }
            // validate the optional field `dataIssueDetail` (array)
            for (const item of data['dataIssueDetail']) {
                DataIssueDetail.validateJSON(item);
            };
        }
        if (data['description']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['description'])) {
                throw new Error("Expected the field `description` to be an array in the JSON data but got " + data['description']);
            }
            // validate the optional field `description` (array)
            for (const item of data['description']) {
                LocalizedText.validateJSON(item);
            };
        }
        if (data['image']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['image'])) {
                throw new Error("Expected the field `image` to be an array in the JSON data but got " + data['image']);
            }
            // validate the optional field `image` (array)
            for (const item of data['image']) {
                Image.validateJSON(item);
            };
        }
        if (data['listingName']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['listingName'])) {
                throw new Error("Expected the field `listingName` to be an array in the JSON data but got " + data['listingName']);
            }
            // validate the optional field `listingName` (array)
            for (const item of data['listingName']) {
                LocalizedText.validateJSON(item);
            };
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          LatLng.validateJSON(data['location']);
        }
        // ensure the json data is a string
        if (data['partnerListId'] && !(typeof data['partnerListId'] === 'string' || data['partnerListId'] instanceof String)) {
            throw new Error("Expected the field `partnerListId` to be a primitive type in the JSON string but got " + data['partnerListId']);
        }
        // ensure the json data is a string
        if (data['regionCode'] && !(typeof data['regionCode'] === 'string' || data['regionCode'] instanceof String)) {
            throw new Error("Expected the field `regionCode` to be a primitive type in the JSON string but got " + data['regionCode']);
        }
        if (data['review']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['review'])) {
                throw new Error("Expected the field `review` to be an array in the JSON data but got " + data['review']);
            }
            // validate the optional field `review` (array)
            for (const item of data['review']) {
                Review.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * If not empty, it indicates that this listing belongs to a brand of the feed.
 * @member {String} brand
 */
ParsedListing.prototype['brand'] = undefined;

/**
 * The partner provided category (accommodation type) of the property.
 * @member {Array.<module:model/LocalizedText>} category
 */
ParsedListing.prototype['category'] = undefined;

/**
 * Data issues about this listing
 * @member {Array.<module:model/DataIssueDetail>} dataIssueDetail
 */
ParsedListing.prototype['dataIssueDetail'] = undefined;

/**
 * Description of the property.
 * @member {Array.<module:model/LocalizedText>} description
 */
ParsedListing.prototype['description'] = undefined;

/**
 * Images associated with this listing, localized.
 * @member {Array.<module:model/Image>} image
 */
ParsedListing.prototype['image'] = undefined;

/**
 * Represents the accuracy of the location. The listing can be anywhere within the defined circular area.
 * @member {Number} imprecisionRadiusMeters
 */
ParsedListing.prototype['imprecisionRadiusMeters'] = undefined;

/**
 * Whether the listing can be served based on non image data alone.
 * @member {Boolean} isServed
 */
ParsedListing.prototype['isServed'] = undefined;

/**
 * List of localized names.
 * @member {Array.<module:model/LocalizedText>} listingName
 */
ParsedListing.prototype['listingName'] = undefined;

/**
 * @member {module:model/LatLng} location
 */
ParsedListing.prototype['location'] = undefined;

/**
 * The list id on partner lec feed, provided by partner.
 * @member {String} partnerListId
 */
ParsedListing.prototype['partnerListId'] = undefined;

/**
 * The country code where the listing is located.
 * @member {String} regionCode
 */
ParsedListing.prototype['regionCode'] = undefined;

/**
 * Reviews associated with this listing. Each review proto has a single language attached to it.
 * @member {Array.<module:model/Review>} review
 */
ParsedListing.prototype['review'] = undefined;

/**
 * VR List attribute.
 * @member {Object.<String, String>} unitAttributes
 */
ParsedListing.prototype['unitAttributes'] = undefined;






export default ParsedListing;

