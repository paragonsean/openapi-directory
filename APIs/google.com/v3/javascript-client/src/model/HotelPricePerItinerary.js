/**
 * Travel Partner API
 * The Travel Partner API provides you with a RESTful interface to the Google Hotel Center platform. It enables an app to efficiently retrieve and change Hotel Center data, and is thus suitable for managing large or complex accounts.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelDate from './ModelDate';

/**
 * The HotelPricePerItinerary model module.
 * @module model/HotelPricePerItinerary
 * @version v3
 */
class HotelPricePerItinerary {
    /**
     * Constructs a new <code>HotelPricePerItinerary</code>.
     * Hotel price for a given itinerary.
     * @alias module:model/HotelPricePerItinerary
     */
    constructor() { 
        
        HotelPricePerItinerary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HotelPricePerItinerary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HotelPricePerItinerary} obj Optional instance to populate.
     * @return {module:model/HotelPricePerItinerary} The populated <code>HotelPricePerItinerary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HotelPricePerItinerary();

            if (data.hasOwnProperty('checkinDate')) {
                obj['checkinDate'] = ModelDate.constructFromObject(data['checkinDate']);
            }
            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('fees')) {
                obj['fees'] = ApiClient.convertToType(data['fees'], 'Number');
            }
            if (data.hasOwnProperty('lengthOfStayDays')) {
                obj['lengthOfStayDays'] = ApiClient.convertToType(data['lengthOfStayDays'], 'Number');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('taxes')) {
                obj['taxes'] = ApiClient.convertToType(data['taxes'], 'Number');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HotelPricePerItinerary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HotelPricePerItinerary</code>.
     */
    static validateJSON(data) {
        // validate the optional field `checkinDate`
        if (data['checkinDate']) { // data not null
          ModelDate.validateJSON(data['checkinDate']);
        }
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * @member {module:model/ModelDate} checkinDate
 */
HotelPricePerItinerary.prototype['checkinDate'] = undefined;

/**
 * Currency for `price`, `taxes`, and `fees`.
 * @member {String} currencyCode
 */
HotelPricePerItinerary.prototype['currencyCode'] = undefined;

/**
 * Fees for this itinerary.
 * @member {Number} fees
 */
HotelPricePerItinerary.prototype['fees'] = undefined;

/**
 * Number of nights for the itinerary.
 * @member {Number} lengthOfStayDays
 */
HotelPricePerItinerary.prototype['lengthOfStayDays'] = undefined;

/**
 * Hotel price for this itinerary.
 * @member {Number} price
 */
HotelPricePerItinerary.prototype['price'] = undefined;

/**
 * Taxes for this itinerary.
 * @member {Number} taxes
 */
HotelPricePerItinerary.prototype['taxes'] = undefined;

/**
 * Update timestamp for this hotel price.
 * @member {String} updateTime
 */
HotelPricePerItinerary.prototype['updateTime'] = undefined;






export default HotelPricePerItinerary;

