# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PriceRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_price: float=None, currency_code: str=None, taxes_and_fees: float=None, time: str=None):
        """PriceRecord - a model defined in OpenAPI

        :param base_price: The base_price of this PriceRecord.
        :param currency_code: The currency_code of this PriceRecord.
        :param taxes_and_fees: The taxes_and_fees of this PriceRecord.
        :param time: The time of this PriceRecord.
        """
        self.openapi_types = {
            'base_price': float,
            'currency_code': str,
            'taxes_and_fees': float,
            'time': str
        }

        self.attribute_map = {
            'base_price': 'basePrice',
            'currency_code': 'currencyCode',
            'taxes_and_fees': 'taxesAndFees',
            'time': 'time'
        }

        self._base_price = base_price
        self._currency_code = currency_code
        self._taxes_and_fees = taxes_and_fees
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PriceRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PriceRecord of this PriceRecord.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_price(self):
        """Gets the base_price of this PriceRecord.

        Base price.

        :return: The base_price of this PriceRecord.
        :rtype: float
        """
        return self._base_price

    @base_price.setter
    def base_price(self, base_price):
        """Sets the base_price of this PriceRecord.

        Base price.

        :param base_price: The base_price of this PriceRecord.
        :type base_price: float
        """

        self._base_price = base_price

    @property
    def currency_code(self):
        """Gets the currency_code of this PriceRecord.

        ISO 4217 currency code.

        :return: The currency_code of this PriceRecord.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this PriceRecord.

        ISO 4217 currency code.

        :param currency_code: The currency_code of this PriceRecord.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def taxes_and_fees(self):
        """Gets the taxes_and_fees of this PriceRecord.

        Taxes and fees.

        :return: The taxes_and_fees of this PriceRecord.
        :rtype: float
        """
        return self._taxes_and_fees

    @taxes_and_fees.setter
    def taxes_and_fees(self, taxes_and_fees):
        """Sets the taxes_and_fees of this PriceRecord.

        Taxes and fees.

        :param taxes_and_fees: The taxes_and_fees of this PriceRecord.
        :type taxes_and_fees: float
        """

        self._taxes_and_fees = taxes_and_fees

    @property
    def time(self):
        """Gets the time of this PriceRecord.

        Timestamp of this price record.

        :return: The time of this PriceRecord.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this PriceRecord.

        Timestamp of this price record.

        :param time: The time of this PriceRecord.
        :type time: str
        """

        self._time = time
