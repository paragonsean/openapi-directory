# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SummarizePriceAccuracyResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_book_on_google_score: str=None, current_overall_score: str=None, current_score: str=None, current_website_score: str=None, predicted_book_on_google_score: str=None, predicted_overall_score: str=None, predicted_score: str=None, predicted_website_score: str=None, update_time: str=None):
        """SummarizePriceAccuracyResponse - a model defined in OpenAPI

        :param current_book_on_google_score: The current_book_on_google_score of this SummarizePriceAccuracyResponse.
        :param current_overall_score: The current_overall_score of this SummarizePriceAccuracyResponse.
        :param current_score: The current_score of this SummarizePriceAccuracyResponse.
        :param current_website_score: The current_website_score of this SummarizePriceAccuracyResponse.
        :param predicted_book_on_google_score: The predicted_book_on_google_score of this SummarizePriceAccuracyResponse.
        :param predicted_overall_score: The predicted_overall_score of this SummarizePriceAccuracyResponse.
        :param predicted_score: The predicted_score of this SummarizePriceAccuracyResponse.
        :param predicted_website_score: The predicted_website_score of this SummarizePriceAccuracyResponse.
        :param update_time: The update_time of this SummarizePriceAccuracyResponse.
        """
        self.openapi_types = {
            'current_book_on_google_score': str,
            'current_overall_score': str,
            'current_score': str,
            'current_website_score': str,
            'predicted_book_on_google_score': str,
            'predicted_overall_score': str,
            'predicted_score': str,
            'predicted_website_score': str,
            'update_time': str
        }

        self.attribute_map = {
            'current_book_on_google_score': 'currentBookOnGoogleScore',
            'current_overall_score': 'currentOverallScore',
            'current_score': 'currentScore',
            'current_website_score': 'currentWebsiteScore',
            'predicted_book_on_google_score': 'predictedBookOnGoogleScore',
            'predicted_overall_score': 'predictedOverallScore',
            'predicted_score': 'predictedScore',
            'predicted_website_score': 'predictedWebsiteScore',
            'update_time': 'updateTime'
        }

        self._current_book_on_google_score = current_book_on_google_score
        self._current_overall_score = current_overall_score
        self._current_score = current_score
        self._current_website_score = current_website_score
        self._predicted_book_on_google_score = predicted_book_on_google_score
        self._predicted_overall_score = predicted_overall_score
        self._predicted_score = predicted_score
        self._predicted_website_score = predicted_website_score
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SummarizePriceAccuracyResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SummarizePriceAccuracyResponse of this SummarizePriceAccuracyResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_book_on_google_score(self):
        """Gets the current_book_on_google_score of this SummarizePriceAccuracyResponse.

        The current Book on Google price accuracy score.

        :return: The current_book_on_google_score of this SummarizePriceAccuracyResponse.
        :rtype: str
        """
        return self._current_book_on_google_score

    @current_book_on_google_score.setter
    def current_book_on_google_score(self, current_book_on_google_score):
        """Sets the current_book_on_google_score of this SummarizePriceAccuracyResponse.

        The current Book on Google price accuracy score.

        :param current_book_on_google_score: The current_book_on_google_score of this SummarizePriceAccuracyResponse.
        :type current_book_on_google_score: str
        """
        allowed_values = ["PRICE_ACCURACY_STATE_UNSPECIFIED", "PRICE_ACCURACY_STATE_UNKNOWN", "EXCELLENT", "GOOD", "POOR", "AT_RISK", "FAILED"]  # noqa: E501
        if current_book_on_google_score not in allowed_values:
            raise ValueError(
                "Invalid value for `current_book_on_google_score` ({0}), must be one of {1}"
                .format(current_book_on_google_score, allowed_values)
            )

        self._current_book_on_google_score = current_book_on_google_score

    @property
    def current_overall_score(self):
        """Gets the current_overall_score of this SummarizePriceAccuracyResponse.

        The current price accuracy score combining both website and Book on Google scores.

        :return: The current_overall_score of this SummarizePriceAccuracyResponse.
        :rtype: str
        """
        return self._current_overall_score

    @current_overall_score.setter
    def current_overall_score(self, current_overall_score):
        """Sets the current_overall_score of this SummarizePriceAccuracyResponse.

        The current price accuracy score combining both website and Book on Google scores.

        :param current_overall_score: The current_overall_score of this SummarizePriceAccuracyResponse.
        :type current_overall_score: str
        """
        allowed_values = ["PRICE_ACCURACY_STATE_UNSPECIFIED", "PRICE_ACCURACY_STATE_UNKNOWN", "EXCELLENT", "GOOD", "POOR", "AT_RISK", "FAILED"]  # noqa: E501
        if current_overall_score not in allowed_values:
            raise ValueError(
                "Invalid value for `current_overall_score` ({0}), must be one of {1}"
                .format(current_overall_score, allowed_values)
            )

        self._current_overall_score = current_overall_score

    @property
    def current_score(self):
        """Gets the current_score of this SummarizePriceAccuracyResponse.

        The current price accuracy score. Contains the same value as `current_website_score`. For clarity, use either `current_website_score` or 'current_overall_score` depending upon which is needed.

        :return: The current_score of this SummarizePriceAccuracyResponse.
        :rtype: str
        """
        return self._current_score

    @current_score.setter
    def current_score(self, current_score):
        """Sets the current_score of this SummarizePriceAccuracyResponse.

        The current price accuracy score. Contains the same value as `current_website_score`. For clarity, use either `current_website_score` or 'current_overall_score` depending upon which is needed.

        :param current_score: The current_score of this SummarizePriceAccuracyResponse.
        :type current_score: str
        """
        allowed_values = ["PRICE_ACCURACY_STATE_UNSPECIFIED", "PRICE_ACCURACY_STATE_UNKNOWN", "EXCELLENT", "GOOD", "POOR", "AT_RISK", "FAILED"]  # noqa: E501
        if current_score not in allowed_values:
            raise ValueError(
                "Invalid value for `current_score` ({0}), must be one of {1}"
                .format(current_score, allowed_values)
            )

        self._current_score = current_score

    @property
    def current_website_score(self):
        """Gets the current_website_score of this SummarizePriceAccuracyResponse.

        The current website price accuracy score.

        :return: The current_website_score of this SummarizePriceAccuracyResponse.
        :rtype: str
        """
        return self._current_website_score

    @current_website_score.setter
    def current_website_score(self, current_website_score):
        """Sets the current_website_score of this SummarizePriceAccuracyResponse.

        The current website price accuracy score.

        :param current_website_score: The current_website_score of this SummarizePriceAccuracyResponse.
        :type current_website_score: str
        """
        allowed_values = ["PRICE_ACCURACY_STATE_UNSPECIFIED", "PRICE_ACCURACY_STATE_UNKNOWN", "EXCELLENT", "GOOD", "POOR", "AT_RISK", "FAILED"]  # noqa: E501
        if current_website_score not in allowed_values:
            raise ValueError(
                "Invalid value for `current_website_score` ({0}), must be one of {1}"
                .format(current_website_score, allowed_values)
            )

        self._current_website_score = current_website_score

    @property
    def predicted_book_on_google_score(self):
        """Gets the predicted_book_on_google_score of this SummarizePriceAccuracyResponse.

        The predicted Book on Google price accuracy score.

        :return: The predicted_book_on_google_score of this SummarizePriceAccuracyResponse.
        :rtype: str
        """
        return self._predicted_book_on_google_score

    @predicted_book_on_google_score.setter
    def predicted_book_on_google_score(self, predicted_book_on_google_score):
        """Sets the predicted_book_on_google_score of this SummarizePriceAccuracyResponse.

        The predicted Book on Google price accuracy score.

        :param predicted_book_on_google_score: The predicted_book_on_google_score of this SummarizePriceAccuracyResponse.
        :type predicted_book_on_google_score: str
        """
        allowed_values = ["PRICE_ACCURACY_STATE_UNSPECIFIED", "PRICE_ACCURACY_STATE_UNKNOWN", "EXCELLENT", "GOOD", "POOR", "AT_RISK", "FAILED"]  # noqa: E501
        if predicted_book_on_google_score not in allowed_values:
            raise ValueError(
                "Invalid value for `predicted_book_on_google_score` ({0}), must be one of {1}"
                .format(predicted_book_on_google_score, allowed_values)
            )

        self._predicted_book_on_google_score = predicted_book_on_google_score

    @property
    def predicted_overall_score(self):
        """Gets the predicted_overall_score of this SummarizePriceAccuracyResponse.

        The predicted price accuracy score combining both website and Book on Google scores.

        :return: The predicted_overall_score of this SummarizePriceAccuracyResponse.
        :rtype: str
        """
        return self._predicted_overall_score

    @predicted_overall_score.setter
    def predicted_overall_score(self, predicted_overall_score):
        """Sets the predicted_overall_score of this SummarizePriceAccuracyResponse.

        The predicted price accuracy score combining both website and Book on Google scores.

        :param predicted_overall_score: The predicted_overall_score of this SummarizePriceAccuracyResponse.
        :type predicted_overall_score: str
        """
        allowed_values = ["PRICE_ACCURACY_STATE_UNSPECIFIED", "PRICE_ACCURACY_STATE_UNKNOWN", "EXCELLENT", "GOOD", "POOR", "AT_RISK", "FAILED"]  # noqa: E501
        if predicted_overall_score not in allowed_values:
            raise ValueError(
                "Invalid value for `predicted_overall_score` ({0}), must be one of {1}"
                .format(predicted_overall_score, allowed_values)
            )

        self._predicted_overall_score = predicted_overall_score

    @property
    def predicted_score(self):
        """Gets the predicted_score of this SummarizePriceAccuracyResponse.

        The predicted price accuracy score. Contains the same value as `predicted_website_score`. For clarity, use either `predicted_website_score` or 'predicted_overall_score` depending upon which is needed.

        :return: The predicted_score of this SummarizePriceAccuracyResponse.
        :rtype: str
        """
        return self._predicted_score

    @predicted_score.setter
    def predicted_score(self, predicted_score):
        """Sets the predicted_score of this SummarizePriceAccuracyResponse.

        The predicted price accuracy score. Contains the same value as `predicted_website_score`. For clarity, use either `predicted_website_score` or 'predicted_overall_score` depending upon which is needed.

        :param predicted_score: The predicted_score of this SummarizePriceAccuracyResponse.
        :type predicted_score: str
        """
        allowed_values = ["PRICE_ACCURACY_STATE_UNSPECIFIED", "PRICE_ACCURACY_STATE_UNKNOWN", "EXCELLENT", "GOOD", "POOR", "AT_RISK", "FAILED"]  # noqa: E501
        if predicted_score not in allowed_values:
            raise ValueError(
                "Invalid value for `predicted_score` ({0}), must be one of {1}"
                .format(predicted_score, allowed_values)
            )

        self._predicted_score = predicted_score

    @property
    def predicted_website_score(self):
        """Gets the predicted_website_score of this SummarizePriceAccuracyResponse.

        The predicted website price accuracy score.

        :return: The predicted_website_score of this SummarizePriceAccuracyResponse.
        :rtype: str
        """
        return self._predicted_website_score

    @predicted_website_score.setter
    def predicted_website_score(self, predicted_website_score):
        """Sets the predicted_website_score of this SummarizePriceAccuracyResponse.

        The predicted website price accuracy score.

        :param predicted_website_score: The predicted_website_score of this SummarizePriceAccuracyResponse.
        :type predicted_website_score: str
        """
        allowed_values = ["PRICE_ACCURACY_STATE_UNSPECIFIED", "PRICE_ACCURACY_STATE_UNKNOWN", "EXCELLENT", "GOOD", "POOR", "AT_RISK", "FAILED"]  # noqa: E501
        if predicted_website_score not in allowed_values:
            raise ValueError(
                "Invalid value for `predicted_website_score` ({0}), must be one of {1}"
                .format(predicted_website_score, allowed_values)
            )

        self._predicted_website_score = predicted_website_score

    @property
    def update_time(self):
        """Gets the update_time of this SummarizePriceAccuracyResponse.

        The update timestamp for the current score.

        :return: The update_time of this SummarizePriceAccuracyResponse.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this SummarizePriceAccuracyResponse.

        The update timestamp for the current score.

        :param update_time: The update_time of this SummarizePriceAccuracyResponse.
        :type update_time: str
        """

        self._update_time = update_time
