# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_issue_detail import DataIssueDetail
from openapi_server import util


class HotelView(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_issue_detail: List[DataIssueDetail]=None, data_issues: List[str]=None, google_cluster_id: str=None, google_hotel_display_name: str=None, google_hotel_id: str=None, live_on_google: bool=None, match_status: str=None, overclustered_partner_hotel_ids: List[str]=None, partner_hotel_display_name: str=None, partner_hotel_id: str=None, primary_overclustered_partner_hotel_id: str=None, property_details: str=None):
        """HotelView - a model defined in OpenAPI

        :param data_issue_detail: The data_issue_detail of this HotelView.
        :param data_issues: The data_issues of this HotelView.
        :param google_cluster_id: The google_cluster_id of this HotelView.
        :param google_hotel_display_name: The google_hotel_display_name of this HotelView.
        :param google_hotel_id: The google_hotel_id of this HotelView.
        :param live_on_google: The live_on_google of this HotelView.
        :param match_status: The match_status of this HotelView.
        :param overclustered_partner_hotel_ids: The overclustered_partner_hotel_ids of this HotelView.
        :param partner_hotel_display_name: The partner_hotel_display_name of this HotelView.
        :param partner_hotel_id: The partner_hotel_id of this HotelView.
        :param primary_overclustered_partner_hotel_id: The primary_overclustered_partner_hotel_id of this HotelView.
        :param property_details: The property_details of this HotelView.
        """
        self.openapi_types = {
            'data_issue_detail': List[DataIssueDetail],
            'data_issues': List[str],
            'google_cluster_id': str,
            'google_hotel_display_name': str,
            'google_hotel_id': str,
            'live_on_google': bool,
            'match_status': str,
            'overclustered_partner_hotel_ids': List[str],
            'partner_hotel_display_name': str,
            'partner_hotel_id': str,
            'primary_overclustered_partner_hotel_id': str,
            'property_details': str
        }

        self.attribute_map = {
            'data_issue_detail': 'dataIssueDetail',
            'data_issues': 'dataIssues',
            'google_cluster_id': 'googleClusterId',
            'google_hotel_display_name': 'googleHotelDisplayName',
            'google_hotel_id': 'googleHotelId',
            'live_on_google': 'liveOnGoogle',
            'match_status': 'matchStatus',
            'overclustered_partner_hotel_ids': 'overclusteredPartnerHotelIds',
            'partner_hotel_display_name': 'partnerHotelDisplayName',
            'partner_hotel_id': 'partnerHotelId',
            'primary_overclustered_partner_hotel_id': 'primaryOverclusteredPartnerHotelId',
            'property_details': 'propertyDetails'
        }

        self._data_issue_detail = data_issue_detail
        self._data_issues = data_issues
        self._google_cluster_id = google_cluster_id
        self._google_hotel_display_name = google_hotel_display_name
        self._google_hotel_id = google_hotel_id
        self._live_on_google = live_on_google
        self._match_status = match_status
        self._overclustered_partner_hotel_ids = overclustered_partner_hotel_ids
        self._partner_hotel_display_name = partner_hotel_display_name
        self._partner_hotel_id = partner_hotel_id
        self._primary_overclustered_partner_hotel_id = primary_overclustered_partner_hotel_id
        self._property_details = property_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HotelView':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HotelView of this HotelView.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_issue_detail(self):
        """Gets the data_issue_detail of this HotelView.

        The type and severity of each data quality issue in the feed. If your feed contains data issues, update the feed and resubmit it. For more information, refer to this article.

        :return: The data_issue_detail of this HotelView.
        :rtype: List[DataIssueDetail]
        """
        return self._data_issue_detail

    @data_issue_detail.setter
    def data_issue_detail(self, data_issue_detail):
        """Sets the data_issue_detail of this HotelView.

        The type and severity of each data quality issue in the feed. If your feed contains data issues, update the feed and resubmit it. For more information, refer to this article.

        :param data_issue_detail: The data_issue_detail of this HotelView.
        :type data_issue_detail: List[DataIssueDetail]
        """

        self._data_issue_detail = data_issue_detail

    @property
    def data_issues(self):
        """Gets the data_issues of this HotelView.

        DEPRECATED. Indicates that the hotel has data quality issues. The value of this field indicates the type of error. This has been replaced with the data_issue_detail field. If your feed contains data issues, update the feed and resubmit it. For more information, refer to this article.

        :return: The data_issues of this HotelView.
        :rtype: List[str]
        """
        return self._data_issues

    @data_issues.setter
    def data_issues(self, data_issues):
        """Sets the data_issues of this HotelView.

        DEPRECATED. Indicates that the hotel has data quality issues. The value of this field indicates the type of error. This has been replaced with the data_issue_detail field. If your feed contains data issues, update the feed and resubmit it. For more information, refer to this article.

        :param data_issues: The data_issues of this HotelView.
        :type data_issues: List[str]
        """
        allowed_values = ["FEED_DATA_ISSUE_UNSPECIFIED", "FEED_DATA_ISSUE_UNKNOWN", "NO_DATA_ISSUE", "DUPLICATE_ADDRESS", "MISSING_PHYSICAL_STREET_ADDRESS", "MISSING_STREET_NAME", "MISSING_STREET_NUMBER", "MISSING_ADDRESS", "MISSING_COUNTRY", "INVALID_POSTAL_CODE", "INVALID_POSTAL_CODE_SUFFIX", "UNEXPECTED_POSTAL_CODE_SUFFIX", "UNEXPECTED_POSTAL_CODE", "INVALID_AMENITIES", "INVALID_EMAIL_ADDRESS", "DUPLICATE_LATLONG", "LATLONG_INCONSISTENT_WITH_ADDRESS", "MISSING_LATLONG", "COULD_NOT_GEOCODE", "MISSING_HOTEL_NAME", "HOTEL_NAME_EMPTY", "INVALID_HOTEL_NAME", "HOTEL_NAME_TOO_LONG", "PARSE_ERROR_IN_XML", "UNEXPECTED_ATTRIBUTE_IN_XML", "DUPLICATE_PHONE_NUMBER", "MISSING_PHONE_NUMBER", "MISSING_VOICE_PHONE_NUMBER", "INVALID_PHONE_NUMBER_FORMAT", "INVALID_PHONE_NUMBER", "INVALID_PHONE_NUMBER_COUNTRY_CODE", "PHONE_NUMBER_TOO_LONG", "PHONE_NUMBER_TOO_SHORT", "INVALID_WEBSITE_URL", "ADWORDS_ATTRIBUTE_TOO_LONG", "BRAND_NOT_ALLOWED", "FLAGGED_DUE_TO_SUSPICIOUS_METADATA", "NOT_ENOUGH_IMAGES_PROVIDED", "IMAGE_PROCESSING_IN_PROGRESS", "CANNOT_FETCH_IMAGES", "INCOMPATIBLE_IMAGE_SIZE_OR_LOW_QUALITY", "MISSING_LANG_IN_RAW_LISTING", "IS_HOTEL", "MISSING_REQ_ATTR", "MISSING_NAME", "MISSING_LANG_IN_NAME", "VR_NAME_TOO_LONG", "TEST_PROPERTY", "NON_VR_ACCOMMODATION_TYPE_BASED_ON_LISTING_NAME", "BRAND_NAME_TOO_LONG", "MISSING_BRAND_NAME", "INVALID_REVIEW_RATING", "INVALID_CHECKIN_FORMAT", "INVALID_CHECKOUT_FORMAT"]  # noqa: E501
        if not set(data_issues).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `data_issues` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(data_issues) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._data_issues = data_issues

    @property
    def google_cluster_id(self):
        """Gets the google_cluster_id of this HotelView.

        The Google Maps identifier for the hotel.

        :return: The google_cluster_id of this HotelView.
        :rtype: str
        """
        return self._google_cluster_id

    @google_cluster_id.setter
    def google_cluster_id(self, google_cluster_id):
        """Sets the google_cluster_id of this HotelView.

        The Google Maps identifier for the hotel.

        :param google_cluster_id: The google_cluster_id of this HotelView.
        :type google_cluster_id: str
        """

        self._google_cluster_id = google_cluster_id

    @property
    def google_hotel_display_name(self):
        """Gets the google_hotel_display_name of this HotelView.

        Google's hotel name.

        :return: The google_hotel_display_name of this HotelView.
        :rtype: str
        """
        return self._google_hotel_display_name

    @google_hotel_display_name.setter
    def google_hotel_display_name(self, google_hotel_display_name):
        """Sets the google_hotel_display_name of this HotelView.

        Google's hotel name.

        :param google_hotel_display_name: The google_hotel_display_name of this HotelView.
        :type google_hotel_display_name: str
        """

        self._google_hotel_display_name = google_hotel_display_name

    @property
    def google_hotel_id(self):
        """Gets the google_hotel_id of this HotelView.

        Google's canonical ID for the hotel.

        :return: The google_hotel_id of this HotelView.
        :rtype: str
        """
        return self._google_hotel_id

    @google_hotel_id.setter
    def google_hotel_id(self, google_hotel_id):
        """Sets the google_hotel_id of this HotelView.

        Google's canonical ID for the hotel.

        :param google_hotel_id: The google_hotel_id of this HotelView.
        :type google_hotel_id: str
        """

        self._google_hotel_id = google_hotel_id

    @property
    def live_on_google(self):
        """Gets the live_on_google of this HotelView.

        Optional. Whether the hotel appears in Google's hotel booking links. Declaration & behavior to get detection of presence/absence in JSON conversion.

        :return: The live_on_google of this HotelView.
        :rtype: bool
        """
        return self._live_on_google

    @live_on_google.setter
    def live_on_google(self, live_on_google):
        """Sets the live_on_google of this HotelView.

        Optional. Whether the hotel appears in Google's hotel booking links. Declaration & behavior to get detection of presence/absence in JSON conversion.

        :param live_on_google: The live_on_google of this HotelView.
        :type live_on_google: bool
        """

        self._live_on_google = live_on_google

    @property
    def match_status(self):
        """Gets the match_status of this HotelView.

        Current matching status of the hotel.

        :return: The match_status of this HotelView.
        :rtype: str
        """
        return self._match_status

    @match_status.setter
    def match_status(self, match_status):
        """Sets the match_status of this HotelView.

        Current matching status of the hotel.

        :param match_status: The match_status of this HotelView.
        :type match_status: str
        """
        allowed_values = ["MATCH_STATUS_UNSPECIFIED", "MATCH_STATUS_UNKNOWN", "NOT_MATCHED", "MATCHED", "MAP_OVERLAP"]  # noqa: E501
        if match_status not in allowed_values:
            raise ValueError(
                "Invalid value for `match_status` ({0}), must be one of {1}"
                .format(match_status, allowed_values)
            )

        self._match_status = match_status

    @property
    def overclustered_partner_hotel_ids(self):
        """Gets the overclustered_partner_hotel_ids of this HotelView.

        Other hotels with which the hotel is overclustered. If your feed contains overclustered hotels, update the feed and resubmit it. To do this, you can use the manual match tool.

        :return: The overclustered_partner_hotel_ids of this HotelView.
        :rtype: List[str]
        """
        return self._overclustered_partner_hotel_ids

    @overclustered_partner_hotel_ids.setter
    def overclustered_partner_hotel_ids(self, overclustered_partner_hotel_ids):
        """Sets the overclustered_partner_hotel_ids of this HotelView.

        Other hotels with which the hotel is overclustered. If your feed contains overclustered hotels, update the feed and resubmit it. To do this, you can use the manual match tool.

        :param overclustered_partner_hotel_ids: The overclustered_partner_hotel_ids of this HotelView.
        :type overclustered_partner_hotel_ids: List[str]
        """

        self._overclustered_partner_hotel_ids = overclustered_partner_hotel_ids

    @property
    def partner_hotel_display_name(self):
        """Gets the partner_hotel_display_name of this HotelView.

        Partner's hotel name.

        :return: The partner_hotel_display_name of this HotelView.
        :rtype: str
        """
        return self._partner_hotel_display_name

    @partner_hotel_display_name.setter
    def partner_hotel_display_name(self, partner_hotel_display_name):
        """Sets the partner_hotel_display_name of this HotelView.

        Partner's hotel name.

        :param partner_hotel_display_name: The partner_hotel_display_name of this HotelView.
        :type partner_hotel_display_name: str
        """

        self._partner_hotel_display_name = partner_hotel_display_name

    @property
    def partner_hotel_id(self):
        """Gets the partner_hotel_id of this HotelView.

        The unique ID of the hotel that the partner provides in their Hotel List Feed.

        :return: The partner_hotel_id of this HotelView.
        :rtype: str
        """
        return self._partner_hotel_id

    @partner_hotel_id.setter
    def partner_hotel_id(self, partner_hotel_id):
        """Sets the partner_hotel_id of this HotelView.

        The unique ID of the hotel that the partner provides in their Hotel List Feed.

        :param partner_hotel_id: The partner_hotel_id of this HotelView.
        :type partner_hotel_id: str
        """

        self._partner_hotel_id = partner_hotel_id

    @property
    def primary_overclustered_partner_hotel_id(self):
        """Gets the primary_overclustered_partner_hotel_id of this HotelView.

        The primary hotel in the overclustered set.

        :return: The primary_overclustered_partner_hotel_id of this HotelView.
        :rtype: str
        """
        return self._primary_overclustered_partner_hotel_id

    @primary_overclustered_partner_hotel_id.setter
    def primary_overclustered_partner_hotel_id(self, primary_overclustered_partner_hotel_id):
        """Sets the primary_overclustered_partner_hotel_id of this HotelView.

        The primary hotel in the overclustered set.

        :param primary_overclustered_partner_hotel_id: The primary_overclustered_partner_hotel_id of this HotelView.
        :type primary_overclustered_partner_hotel_id: str
        """

        self._primary_overclustered_partner_hotel_id = primary_overclustered_partner_hotel_id

    @property
    def property_details(self):
        """Gets the property_details of this HotelView.

        Optional. A URL to the property on Google. Only available for properties that are listed.

        :return: The property_details of this HotelView.
        :rtype: str
        """
        return self._property_details

    @property_details.setter
    def property_details(self, property_details):
        """Sets the property_details of this HotelView.

        Optional. A URL to the property on Google. Only available for properties that are listed.

        :param property_details: The property_details of this HotelView.
        :type property_details: str
        """

        self._property_details = property_details
