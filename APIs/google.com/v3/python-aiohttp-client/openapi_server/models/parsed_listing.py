# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_issue_detail import DataIssueDetail
from openapi_server.models.image import Image
from openapi_server.models.lat_lng import LatLng
from openapi_server.models.localized_text import LocalizedText
from openapi_server.models.review import Review
from openapi_server import util


class ParsedListing(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brand: str=None, category: List[LocalizedText]=None, data_issue_detail: List[DataIssueDetail]=None, description: List[LocalizedText]=None, image: List[Image]=None, imprecision_radius_meters: int=None, is_served: bool=None, listing_name: List[LocalizedText]=None, location: LatLng=None, partner_list_id: str=None, region_code: str=None, review: List[Review]=None, unit_attributes: Dict[str, str]=None):
        """ParsedListing - a model defined in OpenAPI

        :param brand: The brand of this ParsedListing.
        :param category: The category of this ParsedListing.
        :param data_issue_detail: The data_issue_detail of this ParsedListing.
        :param description: The description of this ParsedListing.
        :param image: The image of this ParsedListing.
        :param imprecision_radius_meters: The imprecision_radius_meters of this ParsedListing.
        :param is_served: The is_served of this ParsedListing.
        :param listing_name: The listing_name of this ParsedListing.
        :param location: The location of this ParsedListing.
        :param partner_list_id: The partner_list_id of this ParsedListing.
        :param region_code: The region_code of this ParsedListing.
        :param review: The review of this ParsedListing.
        :param unit_attributes: The unit_attributes of this ParsedListing.
        """
        self.openapi_types = {
            'brand': str,
            'category': List[LocalizedText],
            'data_issue_detail': List[DataIssueDetail],
            'description': List[LocalizedText],
            'image': List[Image],
            'imprecision_radius_meters': int,
            'is_served': bool,
            'listing_name': List[LocalizedText],
            'location': LatLng,
            'partner_list_id': str,
            'region_code': str,
            'review': List[Review],
            'unit_attributes': Dict[str, str]
        }

        self.attribute_map = {
            'brand': 'brand',
            'category': 'category',
            'data_issue_detail': 'dataIssueDetail',
            'description': 'description',
            'image': 'image',
            'imprecision_radius_meters': 'imprecisionRadiusMeters',
            'is_served': 'isServed',
            'listing_name': 'listingName',
            'location': 'location',
            'partner_list_id': 'partnerListId',
            'region_code': 'regionCode',
            'review': 'review',
            'unit_attributes': 'unitAttributes'
        }

        self._brand = brand
        self._category = category
        self._data_issue_detail = data_issue_detail
        self._description = description
        self._image = image
        self._imprecision_radius_meters = imprecision_radius_meters
        self._is_served = is_served
        self._listing_name = listing_name
        self._location = location
        self._partner_list_id = partner_list_id
        self._region_code = region_code
        self._review = review
        self._unit_attributes = unit_attributes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParsedListing':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParsedListing of this ParsedListing.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand(self):
        """Gets the brand of this ParsedListing.

        If not empty, it indicates that this listing belongs to a brand of the feed.

        :return: The brand of this ParsedListing.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this ParsedListing.

        If not empty, it indicates that this listing belongs to a brand of the feed.

        :param brand: The brand of this ParsedListing.
        :type brand: str
        """

        self._brand = brand

    @property
    def category(self):
        """Gets the category of this ParsedListing.

        The partner provided category (accommodation type) of the property.

        :return: The category of this ParsedListing.
        :rtype: List[LocalizedText]
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ParsedListing.

        The partner provided category (accommodation type) of the property.

        :param category: The category of this ParsedListing.
        :type category: List[LocalizedText]
        """

        self._category = category

    @property
    def data_issue_detail(self):
        """Gets the data_issue_detail of this ParsedListing.

        Data issues about this listing

        :return: The data_issue_detail of this ParsedListing.
        :rtype: List[DataIssueDetail]
        """
        return self._data_issue_detail

    @data_issue_detail.setter
    def data_issue_detail(self, data_issue_detail):
        """Sets the data_issue_detail of this ParsedListing.

        Data issues about this listing

        :param data_issue_detail: The data_issue_detail of this ParsedListing.
        :type data_issue_detail: List[DataIssueDetail]
        """

        self._data_issue_detail = data_issue_detail

    @property
    def description(self):
        """Gets the description of this ParsedListing.

        Description of the property.

        :return: The description of this ParsedListing.
        :rtype: List[LocalizedText]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ParsedListing.

        Description of the property.

        :param description: The description of this ParsedListing.
        :type description: List[LocalizedText]
        """

        self._description = description

    @property
    def image(self):
        """Gets the image of this ParsedListing.

        Images associated with this listing, localized.

        :return: The image of this ParsedListing.
        :rtype: List[Image]
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ParsedListing.

        Images associated with this listing, localized.

        :param image: The image of this ParsedListing.
        :type image: List[Image]
        """

        self._image = image

    @property
    def imprecision_radius_meters(self):
        """Gets the imprecision_radius_meters of this ParsedListing.

        Represents the accuracy of the location. The listing can be anywhere within the defined circular area.

        :return: The imprecision_radius_meters of this ParsedListing.
        :rtype: int
        """
        return self._imprecision_radius_meters

    @imprecision_radius_meters.setter
    def imprecision_radius_meters(self, imprecision_radius_meters):
        """Sets the imprecision_radius_meters of this ParsedListing.

        Represents the accuracy of the location. The listing can be anywhere within the defined circular area.

        :param imprecision_radius_meters: The imprecision_radius_meters of this ParsedListing.
        :type imprecision_radius_meters: int
        """

        self._imprecision_radius_meters = imprecision_radius_meters

    @property
    def is_served(self):
        """Gets the is_served of this ParsedListing.

        Whether the listing can be served based on non image data alone.

        :return: The is_served of this ParsedListing.
        :rtype: bool
        """
        return self._is_served

    @is_served.setter
    def is_served(self, is_served):
        """Sets the is_served of this ParsedListing.

        Whether the listing can be served based on non image data alone.

        :param is_served: The is_served of this ParsedListing.
        :type is_served: bool
        """

        self._is_served = is_served

    @property
    def listing_name(self):
        """Gets the listing_name of this ParsedListing.

        List of localized names.

        :return: The listing_name of this ParsedListing.
        :rtype: List[LocalizedText]
        """
        return self._listing_name

    @listing_name.setter
    def listing_name(self, listing_name):
        """Sets the listing_name of this ParsedListing.

        List of localized names.

        :param listing_name: The listing_name of this ParsedListing.
        :type listing_name: List[LocalizedText]
        """

        self._listing_name = listing_name

    @property
    def location(self):
        """Gets the location of this ParsedListing.


        :return: The location of this ParsedListing.
        :rtype: LatLng
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ParsedListing.


        :param location: The location of this ParsedListing.
        :type location: LatLng
        """

        self._location = location

    @property
    def partner_list_id(self):
        """Gets the partner_list_id of this ParsedListing.

        The list id on partner lec feed, provided by partner.

        :return: The partner_list_id of this ParsedListing.
        :rtype: str
        """
        return self._partner_list_id

    @partner_list_id.setter
    def partner_list_id(self, partner_list_id):
        """Sets the partner_list_id of this ParsedListing.

        The list id on partner lec feed, provided by partner.

        :param partner_list_id: The partner_list_id of this ParsedListing.
        :type partner_list_id: str
        """

        self._partner_list_id = partner_list_id

    @property
    def region_code(self):
        """Gets the region_code of this ParsedListing.

        The country code where the listing is located.

        :return: The region_code of this ParsedListing.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this ParsedListing.

        The country code where the listing is located.

        :param region_code: The region_code of this ParsedListing.
        :type region_code: str
        """

        self._region_code = region_code

    @property
    def review(self):
        """Gets the review of this ParsedListing.

        Reviews associated with this listing. Each review proto has a single language attached to it.

        :return: The review of this ParsedListing.
        :rtype: List[Review]
        """
        return self._review

    @review.setter
    def review(self, review):
        """Sets the review of this ParsedListing.

        Reviews associated with this listing. Each review proto has a single language attached to it.

        :param review: The review of this ParsedListing.
        :type review: List[Review]
        """

        self._review = review

    @property
    def unit_attributes(self):
        """Gets the unit_attributes of this ParsedListing.

        VR List attribute.

        :return: The unit_attributes of this ParsedListing.
        :rtype: Dict[str, str]
        """
        return self._unit_attributes

    @unit_attributes.setter
    def unit_attributes(self, unit_attributes):
        """Sets the unit_attributes of this ParsedListing.

        VR List attribute.

        :param unit_attributes: The unit_attributes of this ParsedListing.
        :type unit_attributes: Dict[str, str]
        """

        self._unit_attributes = unit_attributes
