# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.display_name_disapproval_reason import DisplayNameDisapprovalReason
from openapi_server.models.localized_text import LocalizedText
from openapi_server import util


class Brand(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_display_names: List[LocalizedText]=None, active_icon: str=None, active_icon_uri: str=None, display_name_disapproval_reason: List[DisplayNameDisapprovalReason]=None, display_name_state: str=None, display_names: List[LocalizedText]=None, icon: str=None, icon_disapproval_reasons: List[str]=None, icon_state: str=None, name: str=None, property_count: str=None, submitted_display_names: List[LocalizedText]=None, submitted_icon: str=None):
        """Brand - a model defined in OpenAPI

        :param active_display_names: The active_display_names of this Brand.
        :param active_icon: The active_icon of this Brand.
        :param active_icon_uri: The active_icon_uri of this Brand.
        :param display_name_disapproval_reason: The display_name_disapproval_reason of this Brand.
        :param display_name_state: The display_name_state of this Brand.
        :param display_names: The display_names of this Brand.
        :param icon: The icon of this Brand.
        :param icon_disapproval_reasons: The icon_disapproval_reasons of this Brand.
        :param icon_state: The icon_state of this Brand.
        :param name: The name of this Brand.
        :param property_count: The property_count of this Brand.
        :param submitted_display_names: The submitted_display_names of this Brand.
        :param submitted_icon: The submitted_icon of this Brand.
        """
        self.openapi_types = {
            'active_display_names': List[LocalizedText],
            'active_icon': str,
            'active_icon_uri': str,
            'display_name_disapproval_reason': List[DisplayNameDisapprovalReason],
            'display_name_state': str,
            'display_names': List[LocalizedText],
            'icon': str,
            'icon_disapproval_reasons': List[str],
            'icon_state': str,
            'name': str,
            'property_count': str,
            'submitted_display_names': List[LocalizedText],
            'submitted_icon': str
        }

        self.attribute_map = {
            'active_display_names': 'activeDisplayNames',
            'active_icon': 'activeIcon',
            'active_icon_uri': 'activeIconUri',
            'display_name_disapproval_reason': 'displayNameDisapprovalReason',
            'display_name_state': 'displayNameState',
            'display_names': 'displayNames',
            'icon': 'icon',
            'icon_disapproval_reasons': 'iconDisapprovalReasons',
            'icon_state': 'iconState',
            'name': 'name',
            'property_count': 'propertyCount',
            'submitted_display_names': 'submittedDisplayNames',
            'submitted_icon': 'submittedIcon'
        }

        self._active_display_names = active_display_names
        self._active_icon = active_icon
        self._active_icon_uri = active_icon_uri
        self._display_name_disapproval_reason = display_name_disapproval_reason
        self._display_name_state = display_name_state
        self._display_names = display_names
        self._icon = icon
        self._icon_disapproval_reasons = icon_disapproval_reasons
        self._icon_state = icon_state
        self._name = name
        self._property_count = property_count
        self._submitted_display_names = submitted_display_names
        self._submitted_icon = submitted_icon

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Brand':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Brand of this Brand.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_display_names(self):
        """Gets the active_display_names of this Brand.

        Output only. The brand's active display names in all provided languages, only present if the display name is approved for all provided languages.

        :return: The active_display_names of this Brand.
        :rtype: List[LocalizedText]
        """
        return self._active_display_names

    @active_display_names.setter
    def active_display_names(self, active_display_names):
        """Sets the active_display_names of this Brand.

        Output only. The brand's active display names in all provided languages, only present if the display name is approved for all provided languages.

        :param active_display_names: The active_display_names of this Brand.
        :type active_display_names: List[LocalizedText]
        """

        self._active_display_names = active_display_names

    @property
    def active_icon(self):
        """Gets the active_icon of this Brand.

        Output only. The brand's active [accounts.icon](/hotels/hotel-prices/api-reference/rest/v3/accounts.icons#resource:-iconresource). The value refers to the icons's resource name in the format `accounts/{account_id}/icons/{icon_id}`. An active icon is one that has been approved.

        :return: The active_icon of this Brand.
        :rtype: str
        """
        return self._active_icon

    @active_icon.setter
    def active_icon(self, active_icon):
        """Sets the active_icon of this Brand.

        Output only. The brand's active [accounts.icon](/hotels/hotel-prices/api-reference/rest/v3/accounts.icons#resource:-iconresource). The value refers to the icons's resource name in the format `accounts/{account_id}/icons/{icon_id}`. An active icon is one that has been approved.

        :param active_icon: The active_icon of this Brand.
        :type active_icon: str
        """

        self._active_icon = active_icon

    @property
    def active_icon_uri(self):
        """Gets the active_icon_uri of this Brand.

        Output only. URL of the active icon, only present when the icon has been approved.

        :return: The active_icon_uri of this Brand.
        :rtype: str
        """
        return self._active_icon_uri

    @active_icon_uri.setter
    def active_icon_uri(self, active_icon_uri):
        """Sets the active_icon_uri of this Brand.

        Output only. URL of the active icon, only present when the icon has been approved.

        :param active_icon_uri: The active_icon_uri of this Brand.
        :type active_icon_uri: str
        """

        self._active_icon_uri = active_icon_uri

    @property
    def display_name_disapproval_reason(self):
        """Gets the display_name_disapproval_reason of this Brand.

        Output only. Display name's disapproval reason. Only applies to display names with the review state 'REJECTED'.

        :return: The display_name_disapproval_reason of this Brand.
        :rtype: List[DisplayNameDisapprovalReason]
        """
        return self._display_name_disapproval_reason

    @display_name_disapproval_reason.setter
    def display_name_disapproval_reason(self, display_name_disapproval_reason):
        """Sets the display_name_disapproval_reason of this Brand.

        Output only. Display name's disapproval reason. Only applies to display names with the review state 'REJECTED'.

        :param display_name_disapproval_reason: The display_name_disapproval_reason of this Brand.
        :type display_name_disapproval_reason: List[DisplayNameDisapprovalReason]
        """

        self._display_name_disapproval_reason = display_name_disapproval_reason

    @property
    def display_name_state(self):
        """Gets the display_name_state of this Brand.

        Output only. The brand's display names review state, which applies to all display name language entries. If there are both submitted and active display names, this refers to the submitted display names.

        :return: The display_name_state of this Brand.
        :rtype: str
        """
        return self._display_name_state

    @display_name_state.setter
    def display_name_state(self, display_name_state):
        """Sets the display_name_state of this Brand.

        Output only. The brand's display names review state, which applies to all display name language entries. If there are both submitted and active display names, this refers to the submitted display names.

        :param display_name_state: The display_name_state of this Brand.
        :type display_name_state: str
        """
        allowed_values = ["REVIEW_STATE_UNSPECIFIED", "REVIEW_STATE_NEW", "APPROVED", "REJECTED"]  # noqa: E501
        if display_name_state not in allowed_values:
            raise ValueError(
                "Invalid value for `display_name_state` ({0}), must be one of {1}"
                .format(display_name_state, allowed_values)
            )

        self._display_name_state = display_name_state

    @property
    def display_names(self):
        """Gets the display_names of this Brand.

        Input only. The name Google displays for the brand's properties. Setting the display names is only necessary if you want to override the landing page display name or account-level display name for the brand. Google reviews the display names for appropriate content. When there are multiple languages, Google will only show the display names once Google approves all the languages.

        :return: The display_names of this Brand.
        :rtype: List[LocalizedText]
        """
        return self._display_names

    @display_names.setter
    def display_names(self, display_names):
        """Sets the display_names of this Brand.

        Input only. The name Google displays for the brand's properties. Setting the display names is only necessary if you want to override the landing page display name or account-level display name for the brand. Google reviews the display names for appropriate content. When there are multiple languages, Google will only show the display names once Google approves all the languages.

        :param display_names: The display_names of this Brand.
        :type display_names: List[LocalizedText]
        """

        self._display_names = display_names

    @property
    def icon(self):
        """Gets the icon of this Brand.

        Input only. The brand's [accounts.icon](/hotels/hotel-prices/api-reference/rest/v3/accounts.icons#resource:-iconresource) identifying the brand's icon. The value refers to the icons's resource name in the format `accounts/{account_id}/icons/{icon_id}`.

        :return: The icon of this Brand.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this Brand.

        Input only. The brand's [accounts.icon](/hotels/hotel-prices/api-reference/rest/v3/accounts.icons#resource:-iconresource) identifying the brand's icon. The value refers to the icons's resource name in the format `accounts/{account_id}/icons/{icon_id}`.

        :param icon: The icon of this Brand.
        :type icon: str
        """

        self._icon = icon

    @property
    def icon_disapproval_reasons(self):
        """Gets the icon_disapproval_reasons of this Brand.

        Output only. The icon's disapproval reason(s). Only applies to submitted icons with `REJECTED` state.

        :return: The icon_disapproval_reasons of this Brand.
        :rtype: List[str]
        """
        return self._icon_disapproval_reasons

    @icon_disapproval_reasons.setter
    def icon_disapproval_reasons(self, icon_disapproval_reasons):
        """Sets the icon_disapproval_reasons of this Brand.

        Output only. The icon's disapproval reason(s). Only applies to submitted icons with `REJECTED` state.

        :param icon_disapproval_reasons: The icon_disapproval_reasons of this Brand.
        :type icon_disapproval_reasons: List[str]
        """
        allowed_values = ["IMAGE_DISAPPROVAL_REASON_UNSPECIFIED", "NOT_LIKE_SITE", "OFFENSIVE", "LOW_QUALITY", "ANIMATED", "BAD_BACKGROUND", "TEXT_TOO_SMALL"]  # noqa: E501
        if not set(icon_disapproval_reasons).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `icon_disapproval_reasons` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(icon_disapproval_reasons) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._icon_disapproval_reasons = icon_disapproval_reasons

    @property
    def icon_state(self):
        """Gets the icon_state of this Brand.

        Output only. The brand's icon's review state. If there are both submitted and active icons, this refers to the submitted icon.

        :return: The icon_state of this Brand.
        :rtype: str
        """
        return self._icon_state

    @icon_state.setter
    def icon_state(self, icon_state):
        """Sets the icon_state of this Brand.

        Output only. The brand's icon's review state. If there are both submitted and active icons, this refers to the submitted icon.

        :param icon_state: The icon_state of this Brand.
        :type icon_state: str
        """
        allowed_values = ["REVIEW_STATE_UNSPECIFIED", "REVIEW_STATE_NEW", "APPROVED", "REJECTED"]  # noqa: E501
        if icon_state not in allowed_values:
            raise ValueError(
                "Invalid value for `icon_state` ({0}), must be one of {1}"
                .format(icon_state, allowed_values)
            )

        self._icon_state = icon_state

    @property
    def name(self):
        """Gets the name of this Brand.

        Output only. The resource name for the brand in the format `accounts/{account_id}/brands/{brand_id}`. The `brand_id` corresponds to the partner's brand identifier used for landing page matching and the property-level brand identifier. A default brand is applied to properties that do not have a brand. The `brand_id` of the default brand is `NO_BRAND_ID`. It can be fetched and updated like any configured brand.

        :return: The name of this Brand.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Brand.

        Output only. The resource name for the brand in the format `accounts/{account_id}/brands/{brand_id}`. The `brand_id` corresponds to the partner's brand identifier used for landing page matching and the property-level brand identifier. A default brand is applied to properties that do not have a brand. The `brand_id` of the default brand is `NO_BRAND_ID`. It can be fetched and updated like any configured brand.

        :param name: The name of this Brand.
        :type name: str
        """

        self._name = name

    @property
    def property_count(self):
        """Gets the property_count of this Brand.

        Output only. The number of properties with the corresponding brand ID.

        :return: The property_count of this Brand.
        :rtype: str
        """
        return self._property_count

    @property_count.setter
    def property_count(self, property_count):
        """Sets the property_count of this Brand.

        Output only. The number of properties with the corresponding brand ID.

        :param property_count: The property_count of this Brand.
        :type property_count: str
        """

        self._property_count = property_count

    @property
    def submitted_display_names(self):
        """Gets the submitted_display_names of this Brand.

        Output only. The brand's submitted display names in all provided languages, only present if the display name is new or rejected for any language.

        :return: The submitted_display_names of this Brand.
        :rtype: List[LocalizedText]
        """
        return self._submitted_display_names

    @submitted_display_names.setter
    def submitted_display_names(self, submitted_display_names):
        """Sets the submitted_display_names of this Brand.

        Output only. The brand's submitted display names in all provided languages, only present if the display name is new or rejected for any language.

        :param submitted_display_names: The submitted_display_names of this Brand.
        :type submitted_display_names: List[LocalizedText]
        """

        self._submitted_display_names = submitted_display_names

    @property
    def submitted_icon(self):
        """Gets the submitted_icon of this Brand.

        Output only. The brand's submitted [accounts.icon](/hotels/hotel-prices/api-reference/rest/v3/accounts.icons#resource:-iconresource). The value refers to the icons's resource name in the format `accounts/{account_id}/icons/{icon_id}`. A submitted icon is one that is new or rejected.

        :return: The submitted_icon of this Brand.
        :rtype: str
        """
        return self._submitted_icon

    @submitted_icon.setter
    def submitted_icon(self, submitted_icon):
        """Sets the submitted_icon of this Brand.

        Output only. The brand's submitted [accounts.icon](/hotels/hotel-prices/api-reference/rest/v3/accounts.icons#resource:-iconresource). The value refers to the icons's resource name in the format `accounts/{account_id}/icons/{icon_id}`. A submitted icon is one that is new or rejected.

        :param submitted_icon: The submitted_icon of this Brand.
        :type submitted_icon: str
        """

        self._submitted_icon = submitted_icon
