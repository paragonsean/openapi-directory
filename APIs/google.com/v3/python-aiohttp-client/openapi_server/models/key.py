# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_date import ModelDate
from openapi_server import util


class Key(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advance_booking_window: int=None, checkin_date: ModelDate=None, _date: ModelDate=None, device_type: str=None, hotel_region_code: str=None, length_of_stay_days: int=None, occupancy: int=None, partner_hotel_id: str=None, user_region_code: str=None):
        """Key - a model defined in OpenAPI

        :param advance_booking_window: The advance_booking_window of this Key.
        :param checkin_date: The checkin_date of this Key.
        :param _date: The _date of this Key.
        :param device_type: The device_type of this Key.
        :param hotel_region_code: The hotel_region_code of this Key.
        :param length_of_stay_days: The length_of_stay_days of this Key.
        :param occupancy: The occupancy of this Key.
        :param partner_hotel_id: The partner_hotel_id of this Key.
        :param user_region_code: The user_region_code of this Key.
        """
        self.openapi_types = {
            'advance_booking_window': int,
            'checkin_date': ModelDate,
            '_date': ModelDate,
            'device_type': str,
            'hotel_region_code': str,
            'length_of_stay_days': int,
            'occupancy': int,
            'partner_hotel_id': str,
            'user_region_code': str
        }

        self.attribute_map = {
            'advance_booking_window': 'advanceBookingWindow',
            'checkin_date': 'checkinDate',
            '_date': 'date',
            'device_type': 'deviceType',
            'hotel_region_code': 'hotelRegionCode',
            'length_of_stay_days': 'lengthOfStayDays',
            'occupancy': 'occupancy',
            'partner_hotel_id': 'partnerHotelId',
            'user_region_code': 'userRegionCode'
        }

        self._advance_booking_window = advance_booking_window
        self._checkin_date = checkin_date
        self.__date = _date
        self._device_type = device_type
        self._hotel_region_code = hotel_region_code
        self._length_of_stay_days = length_of_stay_days
        self._occupancy = occupancy
        self._partner_hotel_id = partner_hotel_id
        self._user_region_code = user_region_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Key':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Key of this Key.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advance_booking_window(self):
        """Gets the advance_booking_window of this Key.

        The number of days in advance the user wants to book the itinerary. If `advanceBookingWindow` is not a value of the `aggregateBy` parameter in the request call, then the `advanceBookingWindow` field is not returned in the `Key`.

        :return: The advance_booking_window of this Key.
        :rtype: int
        """
        return self._advance_booking_window

    @advance_booking_window.setter
    def advance_booking_window(self, advance_booking_window):
        """Sets the advance_booking_window of this Key.

        The number of days in advance the user wants to book the itinerary. If `advanceBookingWindow` is not a value of the `aggregateBy` parameter in the request call, then the `advanceBookingWindow` field is not returned in the `Key`.

        :param advance_booking_window: The advance_booking_window of this Key.
        :type advance_booking_window: int
        """

        self._advance_booking_window = advance_booking_window

    @property
    def checkin_date(self):
        """Gets the checkin_date of this Key.


        :return: The checkin_date of this Key.
        :rtype: ModelDate
        """
        return self._checkin_date

    @checkin_date.setter
    def checkin_date(self, checkin_date):
        """Sets the checkin_date of this Key.


        :param checkin_date: The checkin_date of this Key.
        :type checkin_date: ModelDate
        """

        self._checkin_date = checkin_date

    @property
    def _date(self):
        """Gets the _date of this Key.


        :return: The _date of this Key.
        :rtype: ModelDate
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Key.


        :param _date: The _date of this Key.
        :type _date: ModelDate
        """

        self.__date = _date

    @property
    def device_type(self):
        """Gets the device_type of this Key.

        The user’s device type. If `deviceType` is not a value of the `aggregateBy` parameter in the request call, then the `deviceType` field is not returned in the `Key`.

        :return: The device_type of this Key.
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this Key.

        The user’s device type. If `deviceType` is not a value of the `aggregateBy` parameter in the request call, then the `deviceType` field is not returned in the `Key`.

        :param device_type: The device_type of this Key.
        :type device_type: str
        """
        allowed_values = ["DEVICE_UNSPECIFIED", "DEVICE_UNKNOWN", "DESKTOP", "MOBILE", "TABLET"]  # noqa: E501
        if device_type not in allowed_values:
            raise ValueError(
                "Invalid value for `device_type` ({0}), must be one of {1}"
                .format(device_type, allowed_values)
            )

        self._device_type = device_type

    @property
    def hotel_region_code(self):
        """Gets the hotel_region_code of this Key.

        CLDR region code of the country/region of the hotel. If `hotelRegionCode` is not a value of the `aggregateBy` parameter in the request call, then the `hotelRegionCode` field is not returned in the `Key`.

        :return: The hotel_region_code of this Key.
        :rtype: str
        """
        return self._hotel_region_code

    @hotel_region_code.setter
    def hotel_region_code(self, hotel_region_code):
        """Sets the hotel_region_code of this Key.

        CLDR region code of the country/region of the hotel. If `hotelRegionCode` is not a value of the `aggregateBy` parameter in the request call, then the `hotelRegionCode` field is not returned in the `Key`.

        :param hotel_region_code: The hotel_region_code of this Key.
        :type hotel_region_code: str
        """

        self._hotel_region_code = hotel_region_code

    @property
    def length_of_stay_days(self):
        """Gets the length_of_stay_days of this Key.

        The number of nights for the itinerary. If `lengthOfStayDays` is not a value of the `aggregateBy` parameter in the request call, then the `lengthOfStayDays` field is not returned in the `Key`.

        :return: The length_of_stay_days of this Key.
        :rtype: int
        """
        return self._length_of_stay_days

    @length_of_stay_days.setter
    def length_of_stay_days(self, length_of_stay_days):
        """Sets the length_of_stay_days of this Key.

        The number of nights for the itinerary. If `lengthOfStayDays` is not a value of the `aggregateBy` parameter in the request call, then the `lengthOfStayDays` field is not returned in the `Key`.

        :param length_of_stay_days: The length_of_stay_days of this Key.
        :type length_of_stay_days: int
        """

        self._length_of_stay_days = length_of_stay_days

    @property
    def occupancy(self):
        """Gets the occupancy of this Key.

        The total occupancy of the itinerary. If `occupancy` is not a value of the `aggregateBy` parameter in the request call, then the `occupancy` field is not returned in the `Key`.

        :return: The occupancy of this Key.
        :rtype: int
        """
        return self._occupancy

    @occupancy.setter
    def occupancy(self, occupancy):
        """Sets the occupancy of this Key.

        The total occupancy of the itinerary. If `occupancy` is not a value of the `aggregateBy` parameter in the request call, then the `occupancy` field is not returned in the `Key`.

        :param occupancy: The occupancy of this Key.
        :type occupancy: int
        """

        self._occupancy = occupancy

    @property
    def partner_hotel_id(self):
        """Gets the partner_hotel_id of this Key.

        Partner's hotel ID. If `partnerHotelId` is not a value of the `aggregateBy` parameter in the request call, then the `partnerHotelId` field is not returned in the `Key`.

        :return: The partner_hotel_id of this Key.
        :rtype: str
        """
        return self._partner_hotel_id

    @partner_hotel_id.setter
    def partner_hotel_id(self, partner_hotel_id):
        """Sets the partner_hotel_id of this Key.

        Partner's hotel ID. If `partnerHotelId` is not a value of the `aggregateBy` parameter in the request call, then the `partnerHotelId` field is not returned in the `Key`.

        :param partner_hotel_id: The partner_hotel_id of this Key.
        :type partner_hotel_id: str
        """

        self._partner_hotel_id = partner_hotel_id

    @property
    def user_region_code(self):
        """Gets the user_region_code of this Key.

        ISO 3116 region code of the country/region of the user. If `userRegionCode` is not a value of the `aggregateBy` parameter in the request call, then the `userRegionCode` field is not returned in the `Key`.

        :return: The user_region_code of this Key.
        :rtype: str
        """
        return self._user_region_code

    @user_region_code.setter
    def user_region_code(self, user_region_code):
        """Sets the user_region_code of this Key.

        ISO 3116 region code of the country/region of the user. If `userRegionCode` is not a value of the `aggregateBy` parameter in the request call, then the `userRegionCode` field is not returned in the `Key`.

        :param user_region_code: The user_region_code of this Key.
        :type user_region_code: str
        """

        self._user_region_code = user_region_code
