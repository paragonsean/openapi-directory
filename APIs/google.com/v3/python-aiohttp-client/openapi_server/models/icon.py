# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Icon(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disapproval_reasons: List[str]=None, icon_uri: str=None, image_data: str=None, name: str=None, reference: str=None, state: str=None):
        """Icon - a model defined in OpenAPI

        :param disapproval_reasons: The disapproval_reasons of this Icon.
        :param icon_uri: The icon_uri of this Icon.
        :param image_data: The image_data of this Icon.
        :param name: The name of this Icon.
        :param reference: The reference of this Icon.
        :param state: The state of this Icon.
        """
        self.openapi_types = {
            'disapproval_reasons': List[str],
            'icon_uri': str,
            'image_data': str,
            'name': str,
            'reference': str,
            'state': str
        }

        self.attribute_map = {
            'disapproval_reasons': 'disapprovalReasons',
            'icon_uri': 'iconUri',
            'image_data': 'imageData',
            'name': 'name',
            'reference': 'reference',
            'state': 'state'
        }

        self._disapproval_reasons = disapproval_reasons
        self._icon_uri = icon_uri
        self._image_data = image_data
        self._name = name
        self._reference = reference
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Icon':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Icon of this Icon.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disapproval_reasons(self):
        """Gets the disapproval_reasons of this Icon.

        Output only. The icon's disapproval reason(s). Only applies to icons with `REJECTED` state.

        :return: The disapproval_reasons of this Icon.
        :rtype: List[str]
        """
        return self._disapproval_reasons

    @disapproval_reasons.setter
    def disapproval_reasons(self, disapproval_reasons):
        """Sets the disapproval_reasons of this Icon.

        Output only. The icon's disapproval reason(s). Only applies to icons with `REJECTED` state.

        :param disapproval_reasons: The disapproval_reasons of this Icon.
        :type disapproval_reasons: List[str]
        """
        allowed_values = ["IMAGE_DISAPPROVAL_REASON_UNSPECIFIED", "NOT_LIKE_SITE", "OFFENSIVE", "LOW_QUALITY", "ANIMATED", "BAD_BACKGROUND", "TEXT_TOO_SMALL"]  # noqa: E501
        if not set(disapproval_reasons).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `disapproval_reasons` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(disapproval_reasons) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._disapproval_reasons = disapproval_reasons

    @property
    def icon_uri(self):
        """Gets the icon_uri of this Icon.

        Output only. The approved icon's Google-hosted URI. Only applies to icons with `APPROVED` state.

        :return: The icon_uri of this Icon.
        :rtype: str
        """
        return self._icon_uri

    @icon_uri.setter
    def icon_uri(self, icon_uri):
        """Sets the icon_uri of this Icon.

        Output only. The approved icon's Google-hosted URI. Only applies to icons with `APPROVED` state.

        :param icon_uri: The icon_uri of this Icon.
        :type icon_uri: str
        """

        self._icon_uri = icon_uri

    @property
    def image_data(self):
        """Gets the image_data of this Icon.

        Required. Input only. The icon contents, which must be in PNG format, or convertible to PNG.

        :return: The image_data of this Icon.
        :rtype: str
        """
        return self._image_data

    @image_data.setter
    def image_data(self, image_data):
        """Sets the image_data of this Icon.

        Required. Input only. The icon contents, which must be in PNG format, or convertible to PNG.

        :param image_data: The image_data of this Icon.
        :type image_data: str
        """

        self._image_data = image_data

    @property
    def name(self):
        """Gets the name of this Icon.

        Required. Output only. The resource name for the icon in the format `accounts/{account_id}/icons/{icon_id}`. Google generates the `icon_id` during the `create` operation. Use the `icon_id` to associate the icon with a brand using the [accounts.brands](/hotels/hotel-prices/api-reference/rest/v3/accounts.brands#resource:-brand) API.

        :return: The name of this Icon.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Icon.

        Required. Output only. The resource name for the icon in the format `accounts/{account_id}/icons/{icon_id}`. Google generates the `icon_id` during the `create` operation. Use the `icon_id` to associate the icon with a brand using the [accounts.brands](/hotels/hotel-prices/api-reference/rest/v3/accounts.brands#resource:-brand) API.

        :param name: The name of this Icon.
        :type name: str
        """

        self._name = name

    @property
    def reference(self):
        """Gets the reference of this Icon.

        Optional. Value for tracking the icon. It could be the primary key to your icon in your system, or the icon's filename. Google does not use this value.

        :return: The reference of this Icon.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Icon.

        Optional. Value for tracking the icon. It could be the primary key to your icon in your system, or the icon's filename. Google does not use this value.

        :param reference: The reference of this Icon.
        :type reference: str
        """

        self._reference = reference

    @property
    def state(self):
        """Gets the state of this Icon.

        Output only. The icon's current state.

        :return: The state of this Icon.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Icon.

        Output only. The icon's current state.

        :param state: The state of this Icon.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "NEW", "APPROVED", "REJECTED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
