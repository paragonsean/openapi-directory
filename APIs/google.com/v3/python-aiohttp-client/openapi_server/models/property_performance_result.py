# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_date import ModelDate
from openapi_server import util


class PropertyPerformanceResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ads_click_count: str=None, ads_clickthrough_rate: float=None, ads_impression_count: str=None, advance_booking_window: str=None, brand: str=None, click_count: str=None, clickthrough_rate: float=None, _date: ModelDate=None, device_type: str=None, high_intent_users: bool=None, impression_count: str=None, length_of_stay: str=None, occupancy: str=None, partner_property_display_name: str=None, partner_property_id: str=None, property_region_code: str=None, user_region_code: str=None, vr_website_button_clicks: str=None):
        """PropertyPerformanceResult - a model defined in OpenAPI

        :param ads_click_count: The ads_click_count of this PropertyPerformanceResult.
        :param ads_clickthrough_rate: The ads_clickthrough_rate of this PropertyPerformanceResult.
        :param ads_impression_count: The ads_impression_count of this PropertyPerformanceResult.
        :param advance_booking_window: The advance_booking_window of this PropertyPerformanceResult.
        :param brand: The brand of this PropertyPerformanceResult.
        :param click_count: The click_count of this PropertyPerformanceResult.
        :param clickthrough_rate: The clickthrough_rate of this PropertyPerformanceResult.
        :param _date: The _date of this PropertyPerformanceResult.
        :param device_type: The device_type of this PropertyPerformanceResult.
        :param high_intent_users: The high_intent_users of this PropertyPerformanceResult.
        :param impression_count: The impression_count of this PropertyPerformanceResult.
        :param length_of_stay: The length_of_stay of this PropertyPerformanceResult.
        :param occupancy: The occupancy of this PropertyPerformanceResult.
        :param partner_property_display_name: The partner_property_display_name of this PropertyPerformanceResult.
        :param partner_property_id: The partner_property_id of this PropertyPerformanceResult.
        :param property_region_code: The property_region_code of this PropertyPerformanceResult.
        :param user_region_code: The user_region_code of this PropertyPerformanceResult.
        :param vr_website_button_clicks: The vr_website_button_clicks of this PropertyPerformanceResult.
        """
        self.openapi_types = {
            'ads_click_count': str,
            'ads_clickthrough_rate': float,
            'ads_impression_count': str,
            'advance_booking_window': str,
            'brand': str,
            'click_count': str,
            'clickthrough_rate': float,
            '_date': ModelDate,
            'device_type': str,
            'high_intent_users': bool,
            'impression_count': str,
            'length_of_stay': str,
            'occupancy': str,
            'partner_property_display_name': str,
            'partner_property_id': str,
            'property_region_code': str,
            'user_region_code': str,
            'vr_website_button_clicks': str
        }

        self.attribute_map = {
            'ads_click_count': 'adsClickCount',
            'ads_clickthrough_rate': 'adsClickthroughRate',
            'ads_impression_count': 'adsImpressionCount',
            'advance_booking_window': 'advanceBookingWindow',
            'brand': 'brand',
            'click_count': 'clickCount',
            'clickthrough_rate': 'clickthroughRate',
            '_date': 'date',
            'device_type': 'deviceType',
            'high_intent_users': 'highIntentUsers',
            'impression_count': 'impressionCount',
            'length_of_stay': 'lengthOfStay',
            'occupancy': 'occupancy',
            'partner_property_display_name': 'partnerPropertyDisplayName',
            'partner_property_id': 'partnerPropertyId',
            'property_region_code': 'propertyRegionCode',
            'user_region_code': 'userRegionCode',
            'vr_website_button_clicks': 'vrWebsiteButtonClicks'
        }

        self._ads_click_count = ads_click_count
        self._ads_clickthrough_rate = ads_clickthrough_rate
        self._ads_impression_count = ads_impression_count
        self._advance_booking_window = advance_booking_window
        self._brand = brand
        self._click_count = click_count
        self._clickthrough_rate = clickthrough_rate
        self.__date = _date
        self._device_type = device_type
        self._high_intent_users = high_intent_users
        self._impression_count = impression_count
        self._length_of_stay = length_of_stay
        self._occupancy = occupancy
        self._partner_property_display_name = partner_property_display_name
        self._partner_property_id = partner_property_id
        self._property_region_code = property_region_code
        self._user_region_code = user_region_code
        self._vr_website_button_clicks = vr_website_button_clicks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PropertyPerformanceResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PropertyPerformanceResult of this PropertyPerformanceResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ads_click_count(self):
        """Gets the ads_click_count of this PropertyPerformanceResult.

        The total number of ad clicks that were recorded for this result.

        :return: The ads_click_count of this PropertyPerformanceResult.
        :rtype: str
        """
        return self._ads_click_count

    @ads_click_count.setter
    def ads_click_count(self, ads_click_count):
        """Sets the ads_click_count of this PropertyPerformanceResult.

        The total number of ad clicks that were recorded for this result.

        :param ads_click_count: The ads_click_count of this PropertyPerformanceResult.
        :type ads_click_count: str
        """

        self._ads_click_count = ads_click_count

    @property
    def ads_clickthrough_rate(self):
        """Gets the ads_clickthrough_rate of this PropertyPerformanceResult.

        Equal to `ads_click_count` divided by `ads_impression_count`.

        :return: The ads_clickthrough_rate of this PropertyPerformanceResult.
        :rtype: float
        """
        return self._ads_clickthrough_rate

    @ads_clickthrough_rate.setter
    def ads_clickthrough_rate(self, ads_clickthrough_rate):
        """Sets the ads_clickthrough_rate of this PropertyPerformanceResult.

        Equal to `ads_click_count` divided by `ads_impression_count`.

        :param ads_clickthrough_rate: The ads_clickthrough_rate of this PropertyPerformanceResult.
        :type ads_clickthrough_rate: float
        """

        self._ads_clickthrough_rate = ads_clickthrough_rate

    @property
    def ads_impression_count(self):
        """Gets the ads_impression_count of this PropertyPerformanceResult.

        The total number of ad impressions that were recorded for this result.

        :return: The ads_impression_count of this PropertyPerformanceResult.
        :rtype: str
        """
        return self._ads_impression_count

    @ads_impression_count.setter
    def ads_impression_count(self, ads_impression_count):
        """Sets the ads_impression_count of this PropertyPerformanceResult.

        The total number of ad impressions that were recorded for this result.

        :param ads_impression_count: The ads_impression_count of this PropertyPerformanceResult.
        :type ads_impression_count: str
        """

        self._ads_impression_count = ads_impression_count

    @property
    def advance_booking_window(self):
        """Gets the advance_booking_window of this PropertyPerformanceResult.

        Difference in days between query date and check-in date in property's local timezone. Only present if `advanceBookingWindow` is specified in `aggregateBy` in the request.

        :return: The advance_booking_window of this PropertyPerformanceResult.
        :rtype: str
        """
        return self._advance_booking_window

    @advance_booking_window.setter
    def advance_booking_window(self, advance_booking_window):
        """Sets the advance_booking_window of this PropertyPerformanceResult.

        Difference in days between query date and check-in date in property's local timezone. Only present if `advanceBookingWindow` is specified in `aggregateBy` in the request.

        :param advance_booking_window: The advance_booking_window of this PropertyPerformanceResult.
        :type advance_booking_window: str
        """
        allowed_values = ["ADVANCE_BOOKING_WINDOW_UNSPECIFIED", "ADVANCE_BOOKING_WINDOW_SAME_DAY", "ADVANCE_BOOKING_WINDOW_NEXT_DAY", "ADVANCE_BOOKING_WINDOW_DAYS_2_TO_7", "ADVANCE_BOOKING_WINDOW_DAYS_8_TO_14", "ADVANCE_BOOKING_WINDOW_DAYS_15_TO_30", "ADVANCE_BOOKING_WINDOW_DAYS_31_TO_60", "ADVANCE_BOOKING_WINDOW_DAYS_61_TO_90", "ADVANCE_BOOKING_WINDOW_DAYS_91_TO_120", "ADVANCE_BOOKING_WINDOW_DAYS_121_TO_150", "ADVANCE_BOOKING_WINDOW_DAYS_151_TO_180", "ADVANCE_BOOKING_WINDOW_DAYS_OVER_180"]  # noqa: E501
        if advance_booking_window not in allowed_values:
            raise ValueError(
                "Invalid value for `advance_booking_window` ({0}), must be one of {1}"
                .format(advance_booking_window, allowed_values)
            )

        self._advance_booking_window = advance_booking_window

    @property
    def brand(self):
        """Gets the brand of this PropertyPerformanceResult.

        Partner-specified brand for the property. Only present if `brand` is specified in `aggregateBy` in the request.

        :return: The brand of this PropertyPerformanceResult.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this PropertyPerformanceResult.

        Partner-specified brand for the property. Only present if `brand` is specified in `aggregateBy` in the request.

        :param brand: The brand of this PropertyPerformanceResult.
        :type brand: str
        """

        self._brand = brand

    @property
    def click_count(self):
        """Gets the click_count of this PropertyPerformanceResult.

        The total number of free booking link clicks that were recorded for this result.

        :return: The click_count of this PropertyPerformanceResult.
        :rtype: str
        """
        return self._click_count

    @click_count.setter
    def click_count(self, click_count):
        """Sets the click_count of this PropertyPerformanceResult.

        The total number of free booking link clicks that were recorded for this result.

        :param click_count: The click_count of this PropertyPerformanceResult.
        :type click_count: str
        """

        self._click_count = click_count

    @property
    def clickthrough_rate(self):
        """Gets the clickthrough_rate of this PropertyPerformanceResult.

        Equal to `click_count` divided by `impression_count`.

        :return: The clickthrough_rate of this PropertyPerformanceResult.
        :rtype: float
        """
        return self._clickthrough_rate

    @clickthrough_rate.setter
    def clickthrough_rate(self, clickthrough_rate):
        """Sets the clickthrough_rate of this PropertyPerformanceResult.

        Equal to `click_count` divided by `impression_count`.

        :param clickthrough_rate: The clickthrough_rate of this PropertyPerformanceResult.
        :type clickthrough_rate: float
        """

        self._clickthrough_rate = clickthrough_rate

    @property
    def _date(self):
        """Gets the _date of this PropertyPerformanceResult.


        :return: The _date of this PropertyPerformanceResult.
        :rtype: ModelDate
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this PropertyPerformanceResult.


        :param _date: The _date of this PropertyPerformanceResult.
        :type _date: ModelDate
        """

        self.__date = _date

    @property
    def device_type(self):
        """Gets the device_type of this PropertyPerformanceResult.

        The user’s device type. Only present if `deviceType` is specified in `aggregateBy` in the request.

        :return: The device_type of this PropertyPerformanceResult.
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this PropertyPerformanceResult.

        The user’s device type. Only present if `deviceType` is specified in `aggregateBy` in the request.

        :param device_type: The device_type of this PropertyPerformanceResult.
        :type device_type: str
        """
        allowed_values = ["DEVICE_UNSPECIFIED", "DEVICE_UNKNOWN", "DESKTOP", "MOBILE", "TABLET"]  # noqa: E501
        if device_type not in allowed_values:
            raise ValueError(
                "Invalid value for `device_type` ({0}), must be one of {1}"
                .format(device_type, allowed_values)
            )

        self._device_type = device_type

    @property
    def high_intent_users(self):
        """Gets the high_intent_users of this PropertyPerformanceResult.

        Whether the user’s query indicated a strong interest in booking. Only present if `highIntentUsers` is specified in `aggregateBy` in the request.

        :return: The high_intent_users of this PropertyPerformanceResult.
        :rtype: bool
        """
        return self._high_intent_users

    @high_intent_users.setter
    def high_intent_users(self, high_intent_users):
        """Sets the high_intent_users of this PropertyPerformanceResult.

        Whether the user’s query indicated a strong interest in booking. Only present if `highIntentUsers` is specified in `aggregateBy` in the request.

        :param high_intent_users: The high_intent_users of this PropertyPerformanceResult.
        :type high_intent_users: bool
        """

        self._high_intent_users = high_intent_users

    @property
    def impression_count(self):
        """Gets the impression_count of this PropertyPerformanceResult.

        The total number of free booking link impressions that were recorded for this result. This value is rounded to preserve user privacy.

        :return: The impression_count of this PropertyPerformanceResult.
        :rtype: str
        """
        return self._impression_count

    @impression_count.setter
    def impression_count(self, impression_count):
        """Sets the impression_count of this PropertyPerformanceResult.

        The total number of free booking link impressions that were recorded for this result. This value is rounded to preserve user privacy.

        :param impression_count: The impression_count of this PropertyPerformanceResult.
        :type impression_count: str
        """

        self._impression_count = impression_count

    @property
    def length_of_stay(self):
        """Gets the length_of_stay of this PropertyPerformanceResult.

        Number of nights between check-in and check-out dates specified by user. Only present if `lengthOfStay` is specified in `aggregateBy` in the request.

        :return: The length_of_stay of this PropertyPerformanceResult.
        :rtype: str
        """
        return self._length_of_stay

    @length_of_stay.setter
    def length_of_stay(self, length_of_stay):
        """Sets the length_of_stay of this PropertyPerformanceResult.

        Number of nights between check-in and check-out dates specified by user. Only present if `lengthOfStay` is specified in `aggregateBy` in the request.

        :param length_of_stay: The length_of_stay of this PropertyPerformanceResult.
        :type length_of_stay: str
        """
        allowed_values = ["LENGTH_OF_STAY_UNSPECIFIED", "LENGTH_OF_STAY_NIGHTS_1", "LENGTH_OF_STAY_NIGHTS_2", "LENGTH_OF_STAY_NIGHTS_3", "LENGTH_OF_STAY_NIGHTS_4_TO_7", "LENGTH_OF_STAY_NIGHTS_8_TO_14", "LENGTH_OF_STAY_NIGHTS_15_TO_21", "LENGTH_OF_STAY_NIGHTS_22_TO_30", "LENGTH_OF_STAY_NIGHTS_OVER_30"]  # noqa: E501
        if length_of_stay not in allowed_values:
            raise ValueError(
                "Invalid value for `length_of_stay` ({0}), must be one of {1}"
                .format(length_of_stay, allowed_values)
            )

        self._length_of_stay = length_of_stay

    @property
    def occupancy(self):
        """Gets the occupancy of this PropertyPerformanceResult.

        Requested number of people staying at the property. Only present if `partnerPropertyId` is specified in `aggregateBy` in the request.

        :return: The occupancy of this PropertyPerformanceResult.
        :rtype: str
        """
        return self._occupancy

    @occupancy.setter
    def occupancy(self, occupancy):
        """Sets the occupancy of this PropertyPerformanceResult.

        Requested number of people staying at the property. Only present if `partnerPropertyId` is specified in `aggregateBy` in the request.

        :param occupancy: The occupancy of this PropertyPerformanceResult.
        :type occupancy: str
        """
        allowed_values = ["OCCUPANCY_UNSPECIFIED", "OCCUPANCY_1", "OCCUPANCY_2", "OCCUPANCY_3", "OCCUPANCY_4", "OCCUPANCY_OVER_4"]  # noqa: E501
        if occupancy not in allowed_values:
            raise ValueError(
                "Invalid value for `occupancy` ({0}), must be one of {1}"
                .format(occupancy, allowed_values)
            )

        self._occupancy = occupancy

    @property
    def partner_property_display_name(self):
        """Gets the partner_property_display_name of this PropertyPerformanceResult.

        Partner's property name. Only present if `partnerPropertyDisplayName` is specified in `aggregateBy` in the request.

        :return: The partner_property_display_name of this PropertyPerformanceResult.
        :rtype: str
        """
        return self._partner_property_display_name

    @partner_property_display_name.setter
    def partner_property_display_name(self, partner_property_display_name):
        """Sets the partner_property_display_name of this PropertyPerformanceResult.

        Partner's property name. Only present if `partnerPropertyDisplayName` is specified in `aggregateBy` in the request.

        :param partner_property_display_name: The partner_property_display_name of this PropertyPerformanceResult.
        :type partner_property_display_name: str
        """

        self._partner_property_display_name = partner_property_display_name

    @property
    def partner_property_id(self):
        """Gets the partner_property_id of this PropertyPerformanceResult.

        Partner's property ID. Only present if `partnerPropertyId` is specified in `aggregateBy` in the request.

        :return: The partner_property_id of this PropertyPerformanceResult.
        :rtype: str
        """
        return self._partner_property_id

    @partner_property_id.setter
    def partner_property_id(self, partner_property_id):
        """Sets the partner_property_id of this PropertyPerformanceResult.

        Partner's property ID. Only present if `partnerPropertyId` is specified in `aggregateBy` in the request.

        :param partner_property_id: The partner_property_id of this PropertyPerformanceResult.
        :type partner_property_id: str
        """

        self._partner_property_id = partner_property_id

    @property
    def property_region_code(self):
        """Gets the property_region_code of this PropertyPerformanceResult.

        ISO 3116 region code of the country/region of the property. Only present if `propertyRegionCode` is specified in `aggregateBy` in the request

        :return: The property_region_code of this PropertyPerformanceResult.
        :rtype: str
        """
        return self._property_region_code

    @property_region_code.setter
    def property_region_code(self, property_region_code):
        """Sets the property_region_code of this PropertyPerformanceResult.

        ISO 3116 region code of the country/region of the property. Only present if `propertyRegionCode` is specified in `aggregateBy` in the request

        :param property_region_code: The property_region_code of this PropertyPerformanceResult.
        :type property_region_code: str
        """

        self._property_region_code = property_region_code

    @property
    def user_region_code(self):
        """Gets the user_region_code of this PropertyPerformanceResult.

        ISO 3116 region code of the country/region of the user. Only present if `userRegionCode` is specified in `aggregateBy` in the request

        :return: The user_region_code of this PropertyPerformanceResult.
        :rtype: str
        """
        return self._user_region_code

    @user_region_code.setter
    def user_region_code(self, user_region_code):
        """Sets the user_region_code of this PropertyPerformanceResult.

        ISO 3116 region code of the country/region of the user. Only present if `userRegionCode` is specified in `aggregateBy` in the request

        :param user_region_code: The user_region_code of this PropertyPerformanceResult.
        :type user_region_code: str
        """

        self._user_region_code = user_region_code

    @property
    def vr_website_button_clicks(self):
        """Gets the vr_website_button_clicks of this PropertyPerformanceResult.

        The total number of clicks on the \"Website\" button on Google for vacation rentals.

        :return: The vr_website_button_clicks of this PropertyPerformanceResult.
        :rtype: str
        """
        return self._vr_website_button_clicks

    @vr_website_button_clicks.setter
    def vr_website_button_clicks(self, vr_website_button_clicks):
        """Sets the vr_website_button_clicks of this PropertyPerformanceResult.

        The total number of clicks on the \"Website\" button on Google for vacation rentals.

        :param vr_website_button_clicks: The vr_website_button_clicks of this PropertyPerformanceResult.
        :type vr_website_button_clicks: str
        """

        self._vr_website_button_clicks = vr_website_button_clicks
