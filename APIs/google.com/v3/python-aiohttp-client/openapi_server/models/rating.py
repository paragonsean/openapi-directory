# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Rating(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rating_scale: int=None, score: float=None, type: str=None):
        """Rating - a model defined in OpenAPI

        :param rating_scale: The rating_scale of this Rating.
        :param score: The score of this Rating.
        :param type: The type of this Rating.
        """
        self.openapi_types = {
            'rating_scale': int,
            'score': float,
            'type': str
        }

        self.attribute_map = {
            'rating_scale': 'ratingScale',
            'score': 'score',
            'type': 'type'
        }

        self._rating_scale = rating_scale
        self._score = score
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rating':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rating of this Rating.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rating_scale(self):
        """Gets the rating_scale of this Rating.

        Maximum rating possible.

        :return: The rating_scale of this Rating.
        :rtype: int
        """
        return self._rating_scale

    @rating_scale.setter
    def rating_scale(self, rating_scale):
        """Sets the rating_scale of this Rating.

        Maximum rating possible.

        :param rating_scale: The rating_scale of this Rating.
        :type rating_scale: int
        """

        self._rating_scale = rating_scale

    @property
    def score(self):
        """Gets the score of this Rating.

        The rating score. (e.g. 8.5)

        :return: The score of this Rating.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Rating.

        The rating score. (e.g. 8.5)

        :param score: The score of this Rating.
        :type score: float
        """

        self._score = score

    @property
    def type(self):
        """Gets the type of this Rating.

        The type of the rating.

        :return: The type of this Rating.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Rating.

        The type of the rating.

        :param type: The type of this Rating.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "OVERALL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
