# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_date import ModelDate
from openapi_server.models.price_coverage_bucket import PriceCoverageBucket
from openapi_server import util


class PriceCoverageView(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calculation_date: ModelDate=None, matched_property_count: int=None, price_coverage_binary_percent: float=None, price_coverage_buckets: List[PriceCoverageBucket]=None, price_coverage_percent: float=None):
        """PriceCoverageView - a model defined in OpenAPI

        :param calculation_date: The calculation_date of this PriceCoverageView.
        :param matched_property_count: The matched_property_count of this PriceCoverageView.
        :param price_coverage_binary_percent: The price_coverage_binary_percent of this PriceCoverageView.
        :param price_coverage_buckets: The price_coverage_buckets of this PriceCoverageView.
        :param price_coverage_percent: The price_coverage_percent of this PriceCoverageView.
        """
        self.openapi_types = {
            'calculation_date': ModelDate,
            'matched_property_count': int,
            'price_coverage_binary_percent': float,
            'price_coverage_buckets': List[PriceCoverageBucket],
            'price_coverage_percent': float
        }

        self.attribute_map = {
            'calculation_date': 'calculationDate',
            'matched_property_count': 'matchedPropertyCount',
            'price_coverage_binary_percent': 'priceCoverageBinaryPercent',
            'price_coverage_buckets': 'priceCoverageBuckets',
            'price_coverage_percent': 'priceCoveragePercent'
        }

        self._calculation_date = calculation_date
        self._matched_property_count = matched_property_count
        self._price_coverage_binary_percent = price_coverage_binary_percent
        self._price_coverage_buckets = price_coverage_buckets
        self._price_coverage_percent = price_coverage_percent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PriceCoverageView':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PriceCoverageView of this PriceCoverageView.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calculation_date(self):
        """Gets the calculation_date of this PriceCoverageView.


        :return: The calculation_date of this PriceCoverageView.
        :rtype: ModelDate
        """
        return self._calculation_date

    @calculation_date.setter
    def calculation_date(self, calculation_date):
        """Sets the calculation_date of this PriceCoverageView.


        :param calculation_date: The calculation_date of this PriceCoverageView.
        :type calculation_date: ModelDate
        """

        self._calculation_date = calculation_date

    @property
    def matched_property_count(self):
        """Gets the matched_property_count of this PriceCoverageView.

        The total number of properties that have prices for the given itineraries.

        :return: The matched_property_count of this PriceCoverageView.
        :rtype: int
        """
        return self._matched_property_count

    @matched_property_count.setter
    def matched_property_count(self, matched_property_count):
        """Sets the matched_property_count of this PriceCoverageView.

        The total number of properties that have prices for the given itineraries.

        :param matched_property_count: The matched_property_count of this PriceCoverageView.
        :type matched_property_count: int
        """

        self._matched_property_count = matched_property_count

    @property
    def price_coverage_binary_percent(self):
        """Gets the price_coverage_binary_percent of this PriceCoverageView.

        The ratio between the number of hotels which have at least one price for the calculation period and `matched_property_count`.

        :return: The price_coverage_binary_percent of this PriceCoverageView.
        :rtype: float
        """
        return self._price_coverage_binary_percent

    @price_coverage_binary_percent.setter
    def price_coverage_binary_percent(self, price_coverage_binary_percent):
        """Sets the price_coverage_binary_percent of this PriceCoverageView.

        The ratio between the number of hotels which have at least one price for the calculation period and `matched_property_count`.

        :param price_coverage_binary_percent: The price_coverage_binary_percent of this PriceCoverageView.
        :type price_coverage_binary_percent: float
        """

        self._price_coverage_binary_percent = price_coverage_binary_percent

    @property
    def price_coverage_buckets(self):
        """Gets the price_coverage_buckets of this PriceCoverageView.

        Price coverage stats for combinations of advance booking window and length of stay ranges.

        :return: The price_coverage_buckets of this PriceCoverageView.
        :rtype: List[PriceCoverageBucket]
        """
        return self._price_coverage_buckets

    @price_coverage_buckets.setter
    def price_coverage_buckets(self, price_coverage_buckets):
        """Sets the price_coverage_buckets of this PriceCoverageView.

        Price coverage stats for combinations of advance booking window and length of stay ranges.

        :param price_coverage_buckets: The price_coverage_buckets of this PriceCoverageView.
        :type price_coverage_buckets: List[PriceCoverageBucket]
        """

        self._price_coverage_buckets = price_coverage_buckets

    @property
    def price_coverage_percent(self):
        """Gets the price_coverage_percent of this PriceCoverageView.

        The overall price coverage for an account. This value is the ratio between the number of hotel prices for the calculation booking window and length of stay range divided by the number of all possible prices, which is `matched_property_count` times 330 (for advance book window) times 30 (for length of stay).

        :return: The price_coverage_percent of this PriceCoverageView.
        :rtype: float
        """
        return self._price_coverage_percent

    @price_coverage_percent.setter
    def price_coverage_percent(self, price_coverage_percent):
        """Sets the price_coverage_percent of this PriceCoverageView.

        The overall price coverage for an account. This value is the ratio between the number of hotel prices for the calculation booking window and length of stay range divided by the number of all possible prices, which is `matched_property_count` times 330 (for advance book window) times 30 (for length of stay).

        :param price_coverage_percent: The price_coverage_percent of this PriceCoverageView.
        :type price_coverage_percent: float
        """

        self._price_coverage_percent = price_coverage_percent
