# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DisplayNameDisapprovalReason(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disapproval_reason: str=None, language_code: str=None):
        """DisplayNameDisapprovalReason - a model defined in OpenAPI

        :param disapproval_reason: The disapproval_reason of this DisplayNameDisapprovalReason.
        :param language_code: The language_code of this DisplayNameDisapprovalReason.
        """
        self.openapi_types = {
            'disapproval_reason': str,
            'language_code': str
        }

        self.attribute_map = {
            'disapproval_reason': 'disapprovalReason',
            'language_code': 'languageCode'
        }

        self._disapproval_reason = disapproval_reason
        self._language_code = language_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisplayNameDisapprovalReason':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisplayNameDisapprovalReason of this DisplayNameDisapprovalReason.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disapproval_reason(self):
        """Gets the disapproval_reason of this DisplayNameDisapprovalReason.

        Disapproval reason.

        :return: The disapproval_reason of this DisplayNameDisapprovalReason.
        :rtype: str
        """
        return self._disapproval_reason

    @disapproval_reason.setter
    def disapproval_reason(self, disapproval_reason):
        """Sets the disapproval_reason of this DisplayNameDisapprovalReason.

        Disapproval reason.

        :param disapproval_reason: The disapproval_reason of this DisplayNameDisapprovalReason.
        :type disapproval_reason: str
        """
        allowed_values = ["DISAPPROVAL_REASON_UNSPECIFIED", "PUNCTUATION", "MARKETING_LANGUAGE", "LANDING_PAGE_NOT_MATCHED"]  # noqa: E501
        if disapproval_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `disapproval_reason` ({0}), must be one of {1}"
                .format(disapproval_reason, allowed_values)
            )

        self._disapproval_reason = disapproval_reason

    @property
    def language_code(self):
        """Gets the language_code of this DisplayNameDisapprovalReason.

        Language of the disapproved display name.

        :return: The language_code of this DisplayNameDisapprovalReason.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this DisplayNameDisapprovalReason.

        Language of the disapproved display name.

        :param language_code: The language_code of this DisplayNameDisapprovalReason.
        :type language_code: str
        """

        self._language_code = language_code
