# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PriceProblemCountDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hotel_suspended_count: str=None, price_unusually_high_count: str=None, price_unusually_low_count: str=None, taxes_and_fees_missing_count: str=None):
        """PriceProblemCountDetails - a model defined in OpenAPI

        :param hotel_suspended_count: The hotel_suspended_count of this PriceProblemCountDetails.
        :param price_unusually_high_count: The price_unusually_high_count of this PriceProblemCountDetails.
        :param price_unusually_low_count: The price_unusually_low_count of this PriceProblemCountDetails.
        :param taxes_and_fees_missing_count: The taxes_and_fees_missing_count of this PriceProblemCountDetails.
        """
        self.openapi_types = {
            'hotel_suspended_count': str,
            'price_unusually_high_count': str,
            'price_unusually_low_count': str,
            'taxes_and_fees_missing_count': str
        }

        self.attribute_map = {
            'hotel_suspended_count': 'hotelSuspendedCount',
            'price_unusually_high_count': 'priceUnusuallyHighCount',
            'price_unusually_low_count': 'priceUnusuallyLowCount',
            'taxes_and_fees_missing_count': 'taxesAndFeesMissingCount'
        }

        self._hotel_suspended_count = hotel_suspended_count
        self._price_unusually_high_count = price_unusually_high_count
        self._price_unusually_low_count = price_unusually_low_count
        self._taxes_and_fees_missing_count = taxes_and_fees_missing_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PriceProblemCountDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PriceProblemCountDetails of this PriceProblemCountDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hotel_suspended_count(self):
        """Gets the hotel_suspended_count of this PriceProblemCountDetails.

        The hotel was suspended. This may be due to persistent problems in areas such as incorrect taxes and fees.

        :return: The hotel_suspended_count of this PriceProblemCountDetails.
        :rtype: str
        """
        return self._hotel_suspended_count

    @hotel_suspended_count.setter
    def hotel_suspended_count(self, hotel_suspended_count):
        """Sets the hotel_suspended_count of this PriceProblemCountDetails.

        The hotel was suspended. This may be due to persistent problems in areas such as incorrect taxes and fees.

        :param hotel_suspended_count: The hotel_suspended_count of this PriceProblemCountDetails.
        :type hotel_suspended_count: str
        """

        self._hotel_suspended_count = hotel_suspended_count

    @property
    def price_unusually_high_count(self):
        """Gets the price_unusually_high_count of this PriceProblemCountDetails.

        The price given for this itinerary seemed oddly high compared to regional trends.

        :return: The price_unusually_high_count of this PriceProblemCountDetails.
        :rtype: str
        """
        return self._price_unusually_high_count

    @price_unusually_high_count.setter
    def price_unusually_high_count(self, price_unusually_high_count):
        """Sets the price_unusually_high_count of this PriceProblemCountDetails.

        The price given for this itinerary seemed oddly high compared to regional trends.

        :param price_unusually_high_count: The price_unusually_high_count of this PriceProblemCountDetails.
        :type price_unusually_high_count: str
        """

        self._price_unusually_high_count = price_unusually_high_count

    @property
    def price_unusually_low_count(self):
        """Gets the price_unusually_low_count of this PriceProblemCountDetails.

        The price given for this itinerary seemed oddly low compared to regional trends.

        :return: The price_unusually_low_count of this PriceProblemCountDetails.
        :rtype: str
        """
        return self._price_unusually_low_count

    @price_unusually_low_count.setter
    def price_unusually_low_count(self, price_unusually_low_count):
        """Sets the price_unusually_low_count of this PriceProblemCountDetails.

        The price given for this itinerary seemed oddly low compared to regional trends.

        :param price_unusually_low_count: The price_unusually_low_count of this PriceProblemCountDetails.
        :type price_unusually_low_count: str
        """

        self._price_unusually_low_count = price_unusually_low_count

    @property
    def taxes_and_fees_missing_count(self):
        """Gets the taxes_and_fees_missing_count of this PriceProblemCountDetails.

        Taxes and fees were missing from pricing.

        :return: The taxes_and_fees_missing_count of this PriceProblemCountDetails.
        :rtype: str
        """
        return self._taxes_and_fees_missing_count

    @taxes_and_fees_missing_count.setter
    def taxes_and_fees_missing_count(self, taxes_and_fees_missing_count):
        """Sets the taxes_and_fees_missing_count of this PriceProblemCountDetails.

        Taxes and fees were missing from pricing.

        :param taxes_and_fees_missing_count: The taxes_and_fees_missing_count of this PriceProblemCountDetails.
        :type taxes_and_fees_missing_count: str
        """

        self._taxes_and_fees_missing_count = taxes_and_fees_missing_count
