/**
 * dweet.io
 * Dweet.io allows users to share data from mobile, tablets, and pcs, and them to other devices and accounts across social media platforms. Dweet.io provides an API to access the different functionality of the Dweet.io service. Users can make REST calls to read and create dweets, lock and unlock things, and perform other calls. The API returns JSON and JSONP.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DweetIo);
  }
}(this, function(expect, DweetIo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DweetIo.DweetsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DweetsApi', function() {
    describe('dweetForThingPost', function() {
      it('should call dweetForThingPost successfully', function(done) {
        //uncomment below and update the code to test dweetForThingPost
        //instance.dweetForThingPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dweetQuietlyForThingPost', function() {
      it('should call dweetQuietlyForThingPost successfully', function(done) {
        //uncomment below and update the code to test dweetQuietlyForThingPost
        //instance.dweetQuietlyForThingPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDweetsForThingGet', function() {
      it('should call getDweetsForThingGet successfully', function(done) {
        //uncomment below and update the code to test getDweetsForThingGet
        //instance.getDweetsForThingGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLatestDweet', function() {
      it('should call getLatestDweet successfully', function(done) {
        //uncomment below and update the code to test getLatestDweet
        //instance.getLatestDweet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listenForDweets', function() {
      it('should call listenForDweets successfully', function(done) {
        //uncomment below and update the code to test listenForDweets
        //instance.listenForDweets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
