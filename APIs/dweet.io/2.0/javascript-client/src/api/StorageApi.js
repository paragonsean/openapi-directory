/**
 * dweet.io
 * Dweet.io allows users to share data from mobile, tablets, and pcs, and them to other devices and accounts across social media platforms. Dweet.io provides an API to access the different functionality of the Dweet.io service. Users can make REST calls to read and create dweets, lock and unlock things, and perform other calls. The API returns JSON and JSONP.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Storage service.
* @module api/StorageApi
* @version 2.0
*/
export default class StorageApi {

    /**
    * Constructs a new StorageApi. 
    * @alias module:api/StorageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getStoredAlerts operation.
     * @callback module:api/StorageApi~getStoredAlertsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read all the saved alerts for a thing from long term storage.  You can query a maximum of 1 day per request and a granularly of 1 hour.
     * @param {String} thing A unique name of a thing.
     * @param {String} key A valid key for a locked thing. If the thing is not locked, this can be ignored.
     * @param {String} date The calendar date (YYYY-MM-DD) from which you'd like to start your query.  The response will be a maximum of one day.
     * @param {Object} opts Optional parameters
     * @param {String} [hour] The hour of the day represented in the date parameter in 24-hour (00-23) format.  If this parameter is included, a maximum of 1 hour will be returned starting at this hour.
     * @param {String} [responseType] Current valid parameters for this are 'csv' and 'json'.  If this parameter is left blank, all responses default to hapi-json dweet-speak.
     * @param {module:api/StorageApi~getStoredAlertsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getStoredAlerts(thing, key, date, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'thing' is set
      if (thing === undefined || thing === null) {
        throw new Error("Missing the required parameter 'thing' when calling getStoredAlerts");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getStoredAlerts");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling getStoredAlerts");
      }

      let pathParams = {
        'thing': thing
      };
      let queryParams = {
        'key': key,
        'date': date,
        'hour': opts['hour'],
        'responseType': opts['responseType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/get/stored/alerts/for/{thing}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoredDweetsForThingGet operation.
     * @callback module:api/StorageApi~getStoredDweetsForThingGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read all the saved dweets for a thing from long term storage.  You can query a maximum of 1 day per request and a granularly of 1 hour.
     * @param {String} thing A unique name of a thing.
     * @param {String} key A valid key for a locked thing. If the thing is not locked, this can be ignored.
     * @param {String} date The calendar date (YYYY-MM-DD) from which you'd like to start your query.  The response will be a maximum of one day.
     * @param {Object} opts Optional parameters
     * @param {String} [hour] The hour of the day represented in the date parameter in 24-hour (00-23) format.  If this parameter is included, a maximum of 1 hour will be returned starting at this hour.
     * @param {String} [responseType] Current valid parameters for this are 'csv' and 'json'.  If this parameter is left blank, all responses default to hapi-json dweet-speak.
     * @param {module:api/StorageApi~getStoredDweetsForThingGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getStoredDweetsForThingGet(thing, key, date, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'thing' is set
      if (thing === undefined || thing === null) {
        throw new Error("Missing the required parameter 'thing' when calling getStoredDweetsForThingGet");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getStoredDweetsForThingGet");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling getStoredDweetsForThingGet");
      }

      let pathParams = {
        'thing': thing
      };
      let queryParams = {
        'key': key,
        'date': date,
        'hour': opts['hour'],
        'responseType': opts['responseType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/get/stored/dweets/for/{thing}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
