/**
 * dweet.io
 * Dweet.io allows users to share data from mobile, tablets, and pcs, and them to other devices and accounts across social media platforms. Dweet.io provides an API to access the different functionality of the Dweet.io service. Users can make REST calls to read and create dweets, lock and unlock things, and perform other calls. The API returns JSON and JSONP.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Alerts service.
* @module api/AlertsApi
* @version 2.0
*/
export default class AlertsApi {

    /**
    * Constructs a new AlertsApi. 
    * @alias module:api/AlertsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAlertGET operation.
     * @callback module:api/AlertsApi~createAlertGETCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an alert for a thing. A thing must be locked before an alert can be set.
     * @param {String} who A comma separated list of Email addresses to send the alert to.
     * @param {String} thing A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions.
     * @param {String} condition A condition that returns a string or a true value if a condition is met.
     * @param {String} key A valid key for a locked thing. If the thing is not locked, this can be ignored.
     * @param {module:api/AlertsApi~createAlertGETCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createAlertGET(who, thing, condition, key, callback) {
      let postBody = null;
      // verify the required parameter 'who' is set
      if (who === undefined || who === null) {
        throw new Error("Missing the required parameter 'who' when calling createAlertGET");
      }
      // verify the required parameter 'thing' is set
      if (thing === undefined || thing === null) {
        throw new Error("Missing the required parameter 'thing' when calling createAlertGET");
      }
      // verify the required parameter 'condition' is set
      if (condition === undefined || condition === null) {
        throw new Error("Missing the required parameter 'condition' when calling createAlertGET");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling createAlertGET");
      }

      let pathParams = {
        'who': who,
        'thing': thing,
        'condition': condition
      };
      let queryParams = {
        'key': key
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/alert/{who}/when/{thing}/{condition}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlert operation.
     * @callback module:api/AlertsApi~getAlertCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the alert attached to a thing.
     * @param {String} thing A unique name of a thing.
     * @param {String} key A valid key for a locked thing. If the thing is not locked, this can be ignored.
     * @param {module:api/AlertsApi~getAlertCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAlert(thing, key, callback) {
      let postBody = null;
      // verify the required parameter 'thing' is set
      if (thing === undefined || thing === null) {
        throw new Error("Missing the required parameter 'thing' when calling getAlert");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getAlert");
      }

      let pathParams = {
        'thing': thing
      };
      let queryParams = {
        'key': key
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/get/alert/for/{thing}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeAlert operation.
     * @callback module:api/AlertsApi~removeAlertCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an alert for a thing.
     * @param {String} thing A unique name of a thing.
     * @param {String} key A valid key for a locked thing. If the thing is not locked, this can be ignored.
     * @param {module:api/AlertsApi~removeAlertCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeAlert(thing, key, callback) {
      let postBody = null;
      // verify the required parameter 'thing' is set
      if (thing === undefined || thing === null) {
        throw new Error("Missing the required parameter 'thing' when calling removeAlert");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling removeAlert");
      }

      let pathParams = {
        'thing': thing
      };
      let queryParams = {
        'key': key
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/remove/alert/for/{thing}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
