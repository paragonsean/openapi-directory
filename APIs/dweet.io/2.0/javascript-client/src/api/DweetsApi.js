/**
 * dweet.io
 * Dweet.io allows users to share data from mobile, tablets, and pcs, and them to other devices and accounts across social media platforms. Dweet.io provides an API to access the different functionality of the Dweet.io service. Users can make REST calls to read and create dweets, lock and unlock things, and perform other calls. The API returns JSON and JSONP.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Dweets service.
* @module api/DweetsApi
* @version 2.0
*/
export default class DweetsApi {

    /**
    * Constructs a new DweetsApi. 
    * @alias module:api/DweetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dweetForThingPost operation.
     * @callback module:api/DweetsApi~dweetForThingPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a dweet for a thing.
     * @param {String} thing A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions.
     * @param {String} content The actual content of the string. Can be any valid JSON string.
     * @param {Object} opts Optional parameters
     * @param {String} [key] A valid key for a locked thing. If the thing is not locked, this can be ignored.
     * @param {module:api/DweetsApi~dweetForThingPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dweetForThingPost(thing, content, opts, callback) {
      opts = opts || {};
      let postBody = content;
      // verify the required parameter 'thing' is set
      if (thing === undefined || thing === null) {
        throw new Error("Missing the required parameter 'thing' when calling dweetForThingPost");
      }
      // verify the required parameter 'content' is set
      if (content === undefined || content === null) {
        throw new Error("Missing the required parameter 'content' when calling dweetForThingPost");
      }

      let pathParams = {
        'thing': thing
      };
      let queryParams = {
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dweet/for/{thing}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dweetQuietlyForThingPost operation.
     * @callback module:api/DweetsApi~dweetQuietlyForThingPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a dweet for a thing.  This method differs from /dweet/for/{thing} only in that successful dweets result in an HTTP 204 response rather than the typical verbose response.
     * @param {String} thing A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions.
     * @param {String} content The actual content of the string. Can be any valid JSON string.
     * @param {Object} opts Optional parameters
     * @param {String} [key] A valid key for a locked thing. If the thing is not locked, this can be ignored.
     * @param {module:api/DweetsApi~dweetQuietlyForThingPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dweetQuietlyForThingPost(thing, content, opts, callback) {
      opts = opts || {};
      let postBody = content;
      // verify the required parameter 'thing' is set
      if (thing === undefined || thing === null) {
        throw new Error("Missing the required parameter 'thing' when calling dweetQuietlyForThingPost");
      }
      // verify the required parameter 'content' is set
      if (content === undefined || content === null) {
        throw new Error("Missing the required parameter 'content' when calling dweetQuietlyForThingPost");
      }

      let pathParams = {
        'thing': thing
      };
      let queryParams = {
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dweet/quietly/for/{thing}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDweetsForThingGet operation.
     * @callback module:api/DweetsApi~getDweetsForThingGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read the last 5 cached dweets for a thing.
     * @param {String} thing A unique name of a thing.
     * @param {Object} opts Optional parameters
     * @param {String} [key] A valid key for a locked thing. If the thing is not locked, this can be ignored.
     * @param {module:api/DweetsApi~getDweetsForThingGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDweetsForThingGet(thing, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'thing' is set
      if (thing === undefined || thing === null) {
        throw new Error("Missing the required parameter 'thing' when calling getDweetsForThingGet");
      }

      let pathParams = {
        'thing': thing
      };
      let queryParams = {
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/get/dweets/for/{thing}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLatestDweet operation.
     * @callback module:api/DweetsApi~getLatestDweetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read the latest dweet for a thing.
     * @param {String} thing A unique name of a thing.
     * @param {Object} opts Optional parameters
     * @param {String} [key] A valid key for a locked thing. If the thing is not locked, this can be ignored.
     * @param {module:api/DweetsApi~getLatestDweetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getLatestDweet(thing, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'thing' is set
      if (thing === undefined || thing === null) {
        throw new Error("Missing the required parameter 'thing' when calling getLatestDweet");
      }

      let pathParams = {
        'thing': thing
      };
      let queryParams = {
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/get/latest/dweet/for/{thing}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listenForDweets operation.
     * @callback module:api/DweetsApi~listenForDweetsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listen for dweets from a thing.
     * Sorry, this function uses HTTP chunked responses and cannot be tested here. Try something like: <pre>curl --raw https://dweet.io/listen/for/dweets/from/{thing}</pre>
     * @param {String} thing 
     * @param {module:api/DweetsApi~listenForDweetsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listenForDweets(thing, callback) {
      let postBody = null;
      // verify the required parameter 'thing' is set
      if (thing === undefined || thing === null) {
        throw new Error("Missing the required parameter 'thing' when calling listenForDweets");
      }

      let pathParams = {
        'thing': thing
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/listen/for/dweets/from/{thing}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
