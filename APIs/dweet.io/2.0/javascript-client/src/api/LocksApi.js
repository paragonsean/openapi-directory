/**
 * dweet.io
 * Dweet.io allows users to share data from mobile, tablets, and pcs, and them to other devices and accounts across social media platforms. Dweet.io provides an API to access the different functionality of the Dweet.io service. Users can make REST calls to read and create dweets, lock and unlock things, and perform other calls. The API returns JSON and JSONP.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Locks service.
* @module api/LocksApi
* @version 2.0
*/
export default class LocksApi {

    /**
    * Constructs a new LocksApi. 
    * @alias module:api/LocksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the lockThing operation.
     * @callback module:api/LocksApi~lockThingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reserve and lock a thing.
     * @param {String} thing A unique name of a thing.
     * @param {String} lock A valid dweet.io lock.
     * @param {String} key A valid dweet.io master key.
     * @param {module:api/LocksApi~lockThingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    lockThing(thing, lock, key, callback) {
      let postBody = null;
      // verify the required parameter 'thing' is set
      if (thing === undefined || thing === null) {
        throw new Error("Missing the required parameter 'thing' when calling lockThing");
      }
      // verify the required parameter 'lock' is set
      if (lock === undefined || lock === null) {
        throw new Error("Missing the required parameter 'lock' when calling lockThing");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling lockThing");
      }

      let pathParams = {
        'thing': thing
      };
      let queryParams = {
        'lock': lock,
        'key': key
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lock/{thing}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeLock operation.
     * @callback module:api/LocksApi~removeLockCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a lock from thing.
     * @param {String} lock A valid dweet.io lock.
     * @param {String} key A valid dweet.io master key.
     * @param {module:api/LocksApi~removeLockCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeLock(lock, key, callback) {
      let postBody = null;
      // verify the required parameter 'lock' is set
      if (lock === undefined || lock === null) {
        throw new Error("Missing the required parameter 'lock' when calling removeLock");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling removeLock");
      }

      let pathParams = {
        'lock': lock
      };
      let queryParams = {
        'key': key
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/remove/lock/{lock}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unlockThing operation.
     * @callback module:api/LocksApi~unlockThingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unlock a thing.
     * @param {String} thing A unique name of a thing.
     * @param {String} key A valid dweet.io master key.
     * @param {module:api/LocksApi~unlockThingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unlockThing(thing, key, callback) {
      let postBody = null;
      // verify the required parameter 'thing' is set
      if (thing === undefined || thing === null) {
        throw new Error("Missing the required parameter 'thing' when calling unlockThing");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling unlockThing");
      }

      let pathParams = {
        'thing': thing
      };
      let queryParams = {
        'key': key
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/unlock/{thing}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
