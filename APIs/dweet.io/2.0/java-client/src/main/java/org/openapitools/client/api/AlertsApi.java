/*
 * dweet.io
 * Dweet.io allows users to share data from mobile, tablets, and pcs, and them to other devices and accounts across social media platforms. Dweet.io provides an API to access the different functionality of the Dweet.io service. Users can make REST calls to read and create dweets, lock and unlock things, and perform other calls. The API returns JSON and JSONP.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AlertsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AlertsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AlertsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAlertGET
     * @param who A comma separated list of Email addresses to send the alert to. (required)
     * @param thing A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions. (required)
     * @param condition A condition that returns a string or a true value if a condition is met. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAlertGETCall(String who, String thing, String condition, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/alert/{who}/when/{thing}/{condition}"
            .replace("{" + "who" + "}", localVarApiClient.escapeString(who.toString()))
            .replace("{" + "thing" + "}", localVarApiClient.escapeString(thing.toString()))
            .replace("{" + "condition" + "}", localVarApiClient.escapeString(condition.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAlertGETValidateBeforeCall(String who, String thing, String condition, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'who' is set
        if (who == null) {
            throw new ApiException("Missing the required parameter 'who' when calling createAlertGET(Async)");
        }

        // verify the required parameter 'thing' is set
        if (thing == null) {
            throw new ApiException("Missing the required parameter 'thing' when calling createAlertGET(Async)");
        }

        // verify the required parameter 'condition' is set
        if (condition == null) {
            throw new ApiException("Missing the required parameter 'condition' when calling createAlertGET(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling createAlertGET(Async)");
        }

        return createAlertGETCall(who, thing, condition, key, _callback);

    }

    /**
     * Create an alert for a thing. A thing must be locked before an alert can be set.
     * 
     * @param who A comma separated list of Email addresses to send the alert to. (required)
     * @param thing A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions. (required)
     * @param condition A condition that returns a string or a true value if a condition is met. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void createAlertGET(String who, String thing, String condition, String key) throws ApiException {
        createAlertGETWithHttpInfo(who, thing, condition, key);
    }

    /**
     * Create an alert for a thing. A thing must be locked before an alert can be set.
     * 
     * @param who A comma separated list of Email addresses to send the alert to. (required)
     * @param thing A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions. (required)
     * @param condition A condition that returns a string or a true value if a condition is met. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createAlertGETWithHttpInfo(String who, String thing, String condition, String key) throws ApiException {
        okhttp3.Call localVarCall = createAlertGETValidateBeforeCall(who, thing, condition, key, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create an alert for a thing. A thing must be locked before an alert can be set. (asynchronously)
     * 
     * @param who A comma separated list of Email addresses to send the alert to. (required)
     * @param thing A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions. (required)
     * @param condition A condition that returns a string or a true value if a condition is met. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAlertGETAsync(String who, String thing, String condition, String key, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAlertGETValidateBeforeCall(who, thing, condition, key, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAlert
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlertCall(String thing, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/get/alert/for/{thing}"
            .replace("{" + "thing" + "}", localVarApiClient.escapeString(thing.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAlertValidateBeforeCall(String thing, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'thing' is set
        if (thing == null) {
            throw new ApiException("Missing the required parameter 'thing' when calling getAlert(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getAlert(Async)");
        }

        return getAlertCall(thing, key, _callback);

    }

    /**
     * Get the alert attached to a thing.
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void getAlert(String thing, String key) throws ApiException {
        getAlertWithHttpInfo(thing, key);
    }

    /**
     * Get the alert attached to a thing.
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getAlertWithHttpInfo(String thing, String key) throws ApiException {
        okhttp3.Call localVarCall = getAlertValidateBeforeCall(thing, key, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the alert attached to a thing. (asynchronously)
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlertAsync(String thing, String key, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAlertValidateBeforeCall(thing, key, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeAlert
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAlertCall(String thing, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/remove/alert/for/{thing}"
            .replace("{" + "thing" + "}", localVarApiClient.escapeString(thing.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAlertValidateBeforeCall(String thing, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'thing' is set
        if (thing == null) {
            throw new ApiException("Missing the required parameter 'thing' when calling removeAlert(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling removeAlert(Async)");
        }

        return removeAlertCall(thing, key, _callback);

    }

    /**
     * Remove an alert for a thing.
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void removeAlert(String thing, String key) throws ApiException {
        removeAlertWithHttpInfo(thing, key);
    }

    /**
     * Remove an alert for a thing.
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeAlertWithHttpInfo(String thing, String key) throws ApiException {
        okhttp3.Call localVarCall = removeAlertValidateBeforeCall(thing, key, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove an alert for a thing. (asynchronously)
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAlertAsync(String thing, String key, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAlertValidateBeforeCall(thing, key, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
