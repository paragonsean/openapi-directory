/*
 * dweet.io
 * Dweet.io allows users to share data from mobile, tablets, and pcs, and them to other devices and accounts across social media platforms. Dweet.io provides an API to access the different functionality of the Dweet.io service. Users can make REST calls to read and create dweets, lock and unlock things, and perform other calls. The API returns JSON and JSONP.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LocksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LocksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LocksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for lockThing
     * @param thing A unique name of a thing. (required)
     * @param lock A valid dweet.io lock. (required)
     * @param key A valid dweet.io master key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lockThingCall(String thing, String lock, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lock/{thing}"
            .replace("{" + "thing" + "}", localVarApiClient.escapeString(thing.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lock != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lock", lock));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lockThingValidateBeforeCall(String thing, String lock, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'thing' is set
        if (thing == null) {
            throw new ApiException("Missing the required parameter 'thing' when calling lockThing(Async)");
        }

        // verify the required parameter 'lock' is set
        if (lock == null) {
            throw new ApiException("Missing the required parameter 'lock' when calling lockThing(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling lockThing(Async)");
        }

        return lockThingCall(thing, lock, key, _callback);

    }

    /**
     * Reserve and lock a thing.
     * 
     * @param thing A unique name of a thing. (required)
     * @param lock A valid dweet.io lock. (required)
     * @param key A valid dweet.io master key. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void lockThing(String thing, String lock, String key) throws ApiException {
        lockThingWithHttpInfo(thing, lock, key);
    }

    /**
     * Reserve and lock a thing.
     * 
     * @param thing A unique name of a thing. (required)
     * @param lock A valid dweet.io lock. (required)
     * @param key A valid dweet.io master key. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> lockThingWithHttpInfo(String thing, String lock, String key) throws ApiException {
        okhttp3.Call localVarCall = lockThingValidateBeforeCall(thing, lock, key, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reserve and lock a thing. (asynchronously)
     * 
     * @param thing A unique name of a thing. (required)
     * @param lock A valid dweet.io lock. (required)
     * @param key A valid dweet.io master key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lockThingAsync(String thing, String lock, String key, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = lockThingValidateBeforeCall(thing, lock, key, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeLock
     * @param lock A valid dweet.io lock. (required)
     * @param key A valid dweet.io master key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeLockCall(String lock, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/remove/lock/{lock}"
            .replace("{" + "lock" + "}", localVarApiClient.escapeString(lock.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeLockValidateBeforeCall(String lock, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lock' is set
        if (lock == null) {
            throw new ApiException("Missing the required parameter 'lock' when calling removeLock(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling removeLock(Async)");
        }

        return removeLockCall(lock, key, _callback);

    }

    /**
     * Remove a lock from thing.
     * 
     * @param lock A valid dweet.io lock. (required)
     * @param key A valid dweet.io master key. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void removeLock(String lock, String key) throws ApiException {
        removeLockWithHttpInfo(lock, key);
    }

    /**
     * Remove a lock from thing.
     * 
     * @param lock A valid dweet.io lock. (required)
     * @param key A valid dweet.io master key. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeLockWithHttpInfo(String lock, String key) throws ApiException {
        okhttp3.Call localVarCall = removeLockValidateBeforeCall(lock, key, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a lock from thing. (asynchronously)
     * 
     * @param lock A valid dweet.io lock. (required)
     * @param key A valid dweet.io master key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeLockAsync(String lock, String key, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeLockValidateBeforeCall(lock, key, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for unlockThing
     * @param thing A unique name of a thing. (required)
     * @param key A valid dweet.io master key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlockThingCall(String thing, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/unlock/{thing}"
            .replace("{" + "thing" + "}", localVarApiClient.escapeString(thing.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unlockThingValidateBeforeCall(String thing, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'thing' is set
        if (thing == null) {
            throw new ApiException("Missing the required parameter 'thing' when calling unlockThing(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling unlockThing(Async)");
        }

        return unlockThingCall(thing, key, _callback);

    }

    /**
     * Unlock a thing.
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid dweet.io master key. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void unlockThing(String thing, String key) throws ApiException {
        unlockThingWithHttpInfo(thing, key);
    }

    /**
     * Unlock a thing.
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid dweet.io master key. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unlockThingWithHttpInfo(String thing, String key) throws ApiException {
        okhttp3.Call localVarCall = unlockThingValidateBeforeCall(thing, key, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unlock a thing. (asynchronously)
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid dweet.io master key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlockThingAsync(String thing, String key, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unlockThingValidateBeforeCall(thing, key, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
