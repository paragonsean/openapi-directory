/*
 * dweet.io
 * Dweet.io allows users to share data from mobile, tablets, and pcs, and them to other devices and accounts across social media platforms. Dweet.io provides an API to access the different functionality of the Dweet.io service. Users can make REST calls to read and create dweets, lock and unlock things, and perform other calls. The API returns JSON and JSONP.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DweetsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DweetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DweetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dweetForThingPost
     * @param thing A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions. (required)
     * @param content The actual content of the string. Can be any valid JSON string. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dweetForThingPostCall(String thing, String content, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = content;

        // create path and map variables
        String localVarPath = "/dweet/for/{thing}"
            .replace("{" + "thing" + "}", localVarApiClient.escapeString(thing.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dweetForThingPostValidateBeforeCall(String thing, String content, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'thing' is set
        if (thing == null) {
            throw new ApiException("Missing the required parameter 'thing' when calling dweetForThingPost(Async)");
        }

        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling dweetForThingPost(Async)");
        }

        return dweetForThingPostCall(thing, content, key, _callback);

    }

    /**
     * Create a dweet for a thing.
     * 
     * @param thing A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions. (required)
     * @param content The actual content of the string. Can be any valid JSON string. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void dweetForThingPost(String thing, String content, String key) throws ApiException {
        dweetForThingPostWithHttpInfo(thing, content, key);
    }

    /**
     * Create a dweet for a thing.
     * 
     * @param thing A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions. (required)
     * @param content The actual content of the string. Can be any valid JSON string. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dweetForThingPostWithHttpInfo(String thing, String content, String key) throws ApiException {
        okhttp3.Call localVarCall = dweetForThingPostValidateBeforeCall(thing, content, key, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a dweet for a thing. (asynchronously)
     * 
     * @param thing A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions. (required)
     * @param content The actual content of the string. Can be any valid JSON string. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dweetForThingPostAsync(String thing, String content, String key, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dweetForThingPostValidateBeforeCall(thing, content, key, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dweetQuietlyForThingPost
     * @param thing A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions. (required)
     * @param content The actual content of the string. Can be any valid JSON string. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dweetQuietlyForThingPostCall(String thing, String content, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = content;

        // create path and map variables
        String localVarPath = "/dweet/quietly/for/{thing}"
            .replace("{" + "thing" + "}", localVarApiClient.escapeString(thing.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dweetQuietlyForThingPostValidateBeforeCall(String thing, String content, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'thing' is set
        if (thing == null) {
            throw new ApiException("Missing the required parameter 'thing' when calling dweetQuietlyForThingPost(Async)");
        }

        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling dweetQuietlyForThingPost(Async)");
        }

        return dweetQuietlyForThingPostCall(thing, content, key, _callback);

    }

    /**
     * Create a dweet for a thing.  This method differs from /dweet/for/{thing} only in that successful dweets result in an HTTP 204 response rather than the typical verbose response.
     * 
     * @param thing A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions. (required)
     * @param content The actual content of the string. Can be any valid JSON string. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void dweetQuietlyForThingPost(String thing, String content, String key) throws ApiException {
        dweetQuietlyForThingPostWithHttpInfo(thing, content, key);
    }

    /**
     * Create a dweet for a thing.  This method differs from /dweet/for/{thing} only in that successful dweets result in an HTTP 204 response rather than the typical verbose response.
     * 
     * @param thing A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions. (required)
     * @param content The actual content of the string. Can be any valid JSON string. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dweetQuietlyForThingPostWithHttpInfo(String thing, String content, String key) throws ApiException {
        okhttp3.Call localVarCall = dweetQuietlyForThingPostValidateBeforeCall(thing, content, key, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a dweet for a thing.  This method differs from /dweet/for/{thing} only in that successful dweets result in an HTTP 204 response rather than the typical verbose response. (asynchronously)
     * 
     * @param thing A unique name of a thing. It is recommended that you use a GUID as to avoid name collisions. (required)
     * @param content The actual content of the string. Can be any valid JSON string. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dweetQuietlyForThingPostAsync(String thing, String content, String key, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dweetQuietlyForThingPostValidateBeforeCall(thing, content, key, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDweetsForThingGet
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDweetsForThingGetCall(String thing, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/get/dweets/for/{thing}"
            .replace("{" + "thing" + "}", localVarApiClient.escapeString(thing.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDweetsForThingGetValidateBeforeCall(String thing, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'thing' is set
        if (thing == null) {
            throw new ApiException("Missing the required parameter 'thing' when calling getDweetsForThingGet(Async)");
        }

        return getDweetsForThingGetCall(thing, key, _callback);

    }

    /**
     * Read the last 5 cached dweets for a thing.
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void getDweetsForThingGet(String thing, String key) throws ApiException {
        getDweetsForThingGetWithHttpInfo(thing, key);
    }

    /**
     * Read the last 5 cached dweets for a thing.
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getDweetsForThingGetWithHttpInfo(String thing, String key) throws ApiException {
        okhttp3.Call localVarCall = getDweetsForThingGetValidateBeforeCall(thing, key, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Read the last 5 cached dweets for a thing. (asynchronously)
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDweetsForThingGetAsync(String thing, String key, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDweetsForThingGetValidateBeforeCall(thing, key, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLatestDweet
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLatestDweetCall(String thing, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/get/latest/dweet/for/{thing}"
            .replace("{" + "thing" + "}", localVarApiClient.escapeString(thing.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLatestDweetValidateBeforeCall(String thing, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'thing' is set
        if (thing == null) {
            throw new ApiException("Missing the required parameter 'thing' when calling getLatestDweet(Async)");
        }

        return getLatestDweetCall(thing, key, _callback);

    }

    /**
     * Read the latest dweet for a thing.
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void getLatestDweet(String thing, String key) throws ApiException {
        getLatestDweetWithHttpInfo(thing, key);
    }

    /**
     * Read the latest dweet for a thing.
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getLatestDweetWithHttpInfo(String thing, String key) throws ApiException {
        okhttp3.Call localVarCall = getLatestDweetValidateBeforeCall(thing, key, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Read the latest dweet for a thing. (asynchronously)
     * 
     * @param thing A unique name of a thing. (required)
     * @param key A valid key for a locked thing. If the thing is not locked, this can be ignored. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLatestDweetAsync(String thing, String key, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLatestDweetValidateBeforeCall(thing, key, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listenForDweets
     * @param thing  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listenForDweetsCall(String thing, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listen/for/dweets/from/{thing}"
            .replace("{" + "thing" + "}", localVarApiClient.escapeString(thing.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listenForDweetsValidateBeforeCall(String thing, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'thing' is set
        if (thing == null) {
            throw new ApiException("Missing the required parameter 'thing' when calling listenForDweets(Async)");
        }

        return listenForDweetsCall(thing, _callback);

    }

    /**
     * Listen for dweets from a thing.
     * Sorry, this function uses HTTP chunked responses and cannot be tested here. Try something like: &lt;pre&gt;curl --raw https://dweet.io/listen/for/dweets/from/{thing}&lt;/pre&gt;
     * @param thing  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public void listenForDweets(String thing) throws ApiException {
        listenForDweetsWithHttpInfo(thing);
    }

    /**
     * Listen for dweets from a thing.
     * Sorry, this function uses HTTP chunked responses and cannot be tested here. Try something like: &lt;pre&gt;curl --raw https://dweet.io/listen/for/dweets/from/{thing}&lt;/pre&gt;
     * @param thing  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listenForDweetsWithHttpInfo(String thing) throws ApiException {
        okhttp3.Call localVarCall = listenForDweetsValidateBeforeCall(thing, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Listen for dweets from a thing. (asynchronously)
     * Sorry, this function uses HTTP chunked responses and cannot be tested here. Try something like: &lt;pre&gt;curl --raw https://dweet.io/listen/for/dweets/from/{thing}&lt;/pre&gt;
     * @param thing  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listenForDweetsAsync(String thing, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listenForDweetsValidateBeforeCall(thing, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
