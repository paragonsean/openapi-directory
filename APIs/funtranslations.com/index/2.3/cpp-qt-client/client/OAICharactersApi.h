/**
 * FunTranslations API
 * Funtranslations API gives access to the full set of translations available at funtranslations.com so that you can integrate them in your workflow or an app. [Click here to get details and subscribe](http://funtranslations.com/api) . Here are the individual API links:    ## Morse code API ##   Morse code conversion API on the cloud. Translate to and from Morse Code.[Click here to subscribe](http://funtranslations.com/api/morse)   ## Braille API ##   Braille conversion API on the cloud. Translate to Braille and get Braille results suitable for many display types.[Click here to subscribe](http://funtranslations.com/api/braille)        ## Starwars Translation API ##   Ever wonder how to talk like Yoda? Well, use our API and let your APP/webpage speak like Yoda too.[Click here to subscribe](http://funtranslations.com/api/yoda)        Sith Translator API. [Click here to subscribe](http://funtranslations.com/api/sith)       Cheunh Translator API. [Click here to subscribe](http://funtranslations.com/api/cheunh)       Huttese Translator API. [Click here to subscribe](http://funtranslations.com/api/huttese)      Mandalorian Translator API. [Click here to subscribe](http://funtranslations.com/api/mandalorian)      Gungan Translator API. [Click here to subscribe](http://funtranslations.com/api/gungan)      ## Pirate Speak Translation API ##   Ahoy, matey. Let's get those land lubbers speak our tounge too! Our evergreen pirate speak tranlsator API.[Click here to subscribe](http://funtranslations.com/api/pirate)    ## Valley Speak Translation API ##   Our throwback Valspeak translations API.[Click here to subscribe](http://funtranslations.com/api/valspeak)       ## Minion Speak Translation API ##   Our evil master following minion speak translations API.[Click here to subscribe](http://funtranslations.com/api/minion)      
 *
 * The version of the OpenAPI document: 2.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICharactersApi_H
#define OAI_OAICharactersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICharactersApi : public QObject {
    Q_OBJECT

public:
    OAICharactersApi(const int timeOut = 0);
    ~OAICharactersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  text QString [required]
    */
    virtual void translateChefGet(const QString &text);

    /**
    * @param[in]  text QString [required]
    */
    virtual void translateDolanGet(const QString &text);

    /**
    * @param[in]  text QString [required]
    */
    virtual void translateFerblatinGet(const QString &text);

    /**
    * @param[in]  text QString [required]
    */
    virtual void translateFuddGet(const QString &text);

    /**
    * @param[in]  text QString [required]
    */
    virtual void translateMinionGet(const QString &text);

    /**
    * @param[in]  text QString [required]
    */
    virtual void translatePirateGet(const QString &text);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void translateChefGetCallback(OAIHttpRequestWorker *worker);
    void translateDolanGetCallback(OAIHttpRequestWorker *worker);
    void translateFerblatinGetCallback(OAIHttpRequestWorker *worker);
    void translateFuddGetCallback(OAIHttpRequestWorker *worker);
    void translateMinionGetCallback(OAIHttpRequestWorker *worker);
    void translatePirateGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void translateChefGetSignal();
    void translateDolanGetSignal();
    void translateFerblatinGetSignal();
    void translateFuddGetSignal();
    void translateMinionGetSignal();
    void translatePirateGetSignal();


    void translateChefGetSignalFull(OAIHttpRequestWorker *worker);
    void translateDolanGetSignalFull(OAIHttpRequestWorker *worker);
    void translateFerblatinGetSignalFull(OAIHttpRequestWorker *worker);
    void translateFuddGetSignalFull(OAIHttpRequestWorker *worker);
    void translateMinionGetSignalFull(OAIHttpRequestWorker *worker);
    void translatePirateGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use translateChefGetSignalError() instead")
    void translateChefGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void translateChefGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translateDolanGetSignalError() instead")
    void translateDolanGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void translateDolanGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translateFerblatinGetSignalError() instead")
    void translateFerblatinGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void translateFerblatinGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translateFuddGetSignalError() instead")
    void translateFuddGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void translateFuddGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translateMinionGetSignalError() instead")
    void translateMinionGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void translateMinionGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translatePirateGetSignalError() instead")
    void translatePirateGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void translatePirateGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use translateChefGetSignalErrorFull() instead")
    void translateChefGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translateChefGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translateDolanGetSignalErrorFull() instead")
    void translateDolanGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translateDolanGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translateFerblatinGetSignalErrorFull() instead")
    void translateFerblatinGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translateFerblatinGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translateFuddGetSignalErrorFull() instead")
    void translateFuddGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translateFuddGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translateMinionGetSignalErrorFull() instead")
    void translateMinionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translateMinionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translatePirateGetSignalErrorFull() instead")
    void translatePirateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translatePirateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
