/**
 * FunTranslations Braille API
 * Braille conversion API on the cloud. Translate from English text to Braille and get Braille results suitable for many display types.[Click here to subscribe](http://funtranslations.com/api/braille)  
 *
 * The version of the OpenAPI document: 2.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Braille service.
* @module api/BrailleApi
* @version 2.3
*/
export default class BrailleApi {

    /**
    * Constructs a new BrailleApi. 
    * @alias module:api/BrailleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the translateBrailleDotsGet operation.
     * @callback module:api/BrailleApi~translateBrailleDotsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this to see which dots are enabled for each Braille letters. This is highly educational (to see which dots are enabled) and can potentially drive a non braille display which works on individual dots.
     * @param {String} text Text to translate
     * @param {module:api/BrailleApi~translateBrailleDotsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    translateBrailleDotsGet(text, callback) {
      let postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling translateBrailleDotsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'text': text
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Funtranslations-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/translate/braille/dots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the translateBrailleGet operation.
     * @callback module:api/BrailleApi~translateBrailleGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate from English to Braille. This is what you use if you have a braille display. This API translates the English text into characters that a braille display understands and you can feed the translated text directly to the display.
     * @param {String} text Text to translate
     * @param {module:api/BrailleApi~translateBrailleGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    translateBrailleGet(text, callback) {
      let postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling translateBrailleGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'text': text
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Funtranslations-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/translate/braille', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the translateBrailleHtmlGet operation.
     * @callback module:api/BrailleApi~translateBrailleHtmlGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate from English to Braille Image characters. This is probably what you want to use if you are displaying braille in a browser.
     * @param {String} text Text to translate
     * @param {module:api/BrailleApi~translateBrailleHtmlGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    translateBrailleHtmlGet(text, callback) {
      let postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling translateBrailleHtmlGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'text': text
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Funtranslations-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/translate/braille/html', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the translateBrailleImageGet operation.
     * @callback module:api/BrailleApi~translateBrailleImageGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate from English to Braille image characters. This is probably what you want to use if you are displaying braille in a browser.
     * @param {String} text Text to translate
     * @param {module:api/BrailleApi~translateBrailleImageGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    translateBrailleImageGet(text, callback) {
      let postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling translateBrailleImageGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'text': text
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Funtranslations-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/translate/braille/image', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the translateBrailleUnicodeGet operation.
     * @callback module:api/BrailleApi~translateBrailleUnicodeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate from English to Braille Unicode characters.
     * @param {String} text Text to translate
     * @param {module:api/BrailleApi~translateBrailleUnicodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    translateBrailleUnicodeGet(text, callback) {
      let postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling translateBrailleUnicodeGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'text': text
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Funtranslations-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/translate/braille/unicode', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
