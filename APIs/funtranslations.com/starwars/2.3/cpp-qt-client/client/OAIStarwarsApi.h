/**
 * Starwars Translations API
 * Funtranslations Starwars API gives access to the full set of starwars language translations available at funtranslations.com so that you can integrate them in your workflow or an app. [Click here to get details and subscribe](http://funtranslations.com/api/starwars) .          You can also subscribe to individual translators. Here are the details.      Ever wonder how to talk like Yoda? Well, use our API and let your APP/webpage speak like Yoda too.[Click here to subscribe](http://funtranslations.com/api/yoda)        Sith Translator API. [Click here to subscribe](http://funtranslations.com/api/sith)       Cheunh Translator API. [Click here to subscribe](http://funtranslations.com/api/cheunh)       Huttese Translator API. [Click here to subscribe](http://funtranslations.com/api/huttese)      Mandalorian Translator API. [Click here to subscribe](http://funtranslations.com/api/mandalorian)      Gungan Translator API. [Click here to subscribe](http://funtranslations.com/api/gungan) 
 *
 * The version of the OpenAPI document: 2.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStarwarsApi_H
#define OAI_OAIStarwarsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStarwarsApi : public QObject {
    Q_OBJECT

public:
    OAIStarwarsApi(const int timeOut = 0);
    ~OAIStarwarsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  text QString [required]
    */
    virtual void translateCheunhGet(const QString &text);

    /**
    * @param[in]  text QString [required]
    */
    virtual void translateGunganGet(const QString &text);

    /**
    * @param[in]  text QString [required]
    */
    virtual void translateHutteseGet(const QString &text);

    /**
    * @param[in]  text QString [required]
    */
    virtual void translateMandalorianGet(const QString &text);

    /**
    * @param[in]  text QString [required]
    */
    virtual void translateSithGet(const QString &text);

    /**
    * @param[in]  text QString [required]
    */
    virtual void translateYodaGet(const QString &text);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void translateCheunhGetCallback(OAIHttpRequestWorker *worker);
    void translateGunganGetCallback(OAIHttpRequestWorker *worker);
    void translateHutteseGetCallback(OAIHttpRequestWorker *worker);
    void translateMandalorianGetCallback(OAIHttpRequestWorker *worker);
    void translateSithGetCallback(OAIHttpRequestWorker *worker);
    void translateYodaGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void translateCheunhGetSignal();
    void translateGunganGetSignal();
    void translateHutteseGetSignal();
    void translateMandalorianGetSignal();
    void translateSithGetSignal();
    void translateYodaGetSignal();


    void translateCheunhGetSignalFull(OAIHttpRequestWorker *worker);
    void translateGunganGetSignalFull(OAIHttpRequestWorker *worker);
    void translateHutteseGetSignalFull(OAIHttpRequestWorker *worker);
    void translateMandalorianGetSignalFull(OAIHttpRequestWorker *worker);
    void translateSithGetSignalFull(OAIHttpRequestWorker *worker);
    void translateYodaGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use translateCheunhGetSignalError() instead")
    void translateCheunhGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void translateCheunhGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translateGunganGetSignalError() instead")
    void translateGunganGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void translateGunganGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translateHutteseGetSignalError() instead")
    void translateHutteseGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void translateHutteseGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translateMandalorianGetSignalError() instead")
    void translateMandalorianGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void translateMandalorianGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translateSithGetSignalError() instead")
    void translateSithGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void translateSithGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translateYodaGetSignalError() instead")
    void translateYodaGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void translateYodaGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use translateCheunhGetSignalErrorFull() instead")
    void translateCheunhGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translateCheunhGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translateGunganGetSignalErrorFull() instead")
    void translateGunganGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translateGunganGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translateHutteseGetSignalErrorFull() instead")
    void translateHutteseGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translateHutteseGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translateMandalorianGetSignalErrorFull() instead")
    void translateMandalorianGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translateMandalorianGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translateSithGetSignalErrorFull() instead")
    void translateSithGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translateSithGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translateYodaGetSignalErrorFull() instead")
    void translateYodaGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translateYodaGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
