/*
 * Starwars Translations API
 * Funtranslations Starwars API gives access to the full set of starwars language translations available at funtranslations.com so that you can integrate them in your workflow or an app. [Click here to get details and subscribe](http://funtranslations.com/api/starwars) .          You can also subscribe to individual translators. Here are the details.      Ever wonder how to talk like Yoda? Well, use our API and let your APP/webpage speak like Yoda too.[Click here to subscribe](http://funtranslations.com/api/yoda)        Sith Translator API. [Click here to subscribe](http://funtranslations.com/api/sith)       Cheunh Translator API. [Click here to subscribe](http://funtranslations.com/api/cheunh)       Huttese Translator API. [Click here to subscribe](http://funtranslations.com/api/huttese)      Mandalorian Translator API. [Click here to subscribe](http://funtranslations.com/api/mandalorian)      Gungan Translator API. [Click here to subscribe](http://funtranslations.com/api/gungan) 
 *
 * The version of the OpenAPI document: 2.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StarwarsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StarwarsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StarwarsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for translateCheunhGet
     * @param text Text to translate (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateCheunhGetCall(String text, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/translate/cheunh";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Funtranslations-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call translateCheunhGetValidateBeforeCall(String text, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling translateCheunhGet(Async)");
        }

        return translateCheunhGetCall(text, _callback);

    }

    /**
     * 
     * Translate from English to Starwars cheunh.
     * @param text Text to translate (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public void translateCheunhGet(String text) throws ApiException {
        translateCheunhGetWithHttpInfo(text);
    }

    /**
     * 
     * Translate from English to Starwars cheunh.
     * @param text Text to translate (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> translateCheunhGetWithHttpInfo(String text) throws ApiException {
        okhttp3.Call localVarCall = translateCheunhGetValidateBeforeCall(text, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Translate from English to Starwars cheunh.
     * @param text Text to translate (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateCheunhGetAsync(String text, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = translateCheunhGetValidateBeforeCall(text, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for translateGunganGet
     * @param text Text to translate (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateGunganGetCall(String text, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/translate/gungan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Funtranslations-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call translateGunganGetValidateBeforeCall(String text, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling translateGunganGet(Async)");
        }

        return translateGunganGetCall(text, _callback);

    }

    /**
     * 
     * Translate from English to Starwars Gungan Language.
     * @param text Text to translate (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public void translateGunganGet(String text) throws ApiException {
        translateGunganGetWithHttpInfo(text);
    }

    /**
     * 
     * Translate from English to Starwars Gungan Language.
     * @param text Text to translate (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> translateGunganGetWithHttpInfo(String text) throws ApiException {
        okhttp3.Call localVarCall = translateGunganGetValidateBeforeCall(text, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Translate from English to Starwars Gungan Language.
     * @param text Text to translate (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateGunganGetAsync(String text, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = translateGunganGetValidateBeforeCall(text, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for translateHutteseGet
     * @param text Text to translate (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateHutteseGetCall(String text, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/translate/huttese";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Funtranslations-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call translateHutteseGetValidateBeforeCall(String text, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling translateHutteseGet(Async)");
        }

        return translateHutteseGetCall(text, _callback);

    }

    /**
     * 
     * Translate from English to Starwars Huttese Language.
     * @param text Text to translate (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public void translateHutteseGet(String text) throws ApiException {
        translateHutteseGetWithHttpInfo(text);
    }

    /**
     * 
     * Translate from English to Starwars Huttese Language.
     * @param text Text to translate (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> translateHutteseGetWithHttpInfo(String text) throws ApiException {
        okhttp3.Call localVarCall = translateHutteseGetValidateBeforeCall(text, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Translate from English to Starwars Huttese Language.
     * @param text Text to translate (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateHutteseGetAsync(String text, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = translateHutteseGetValidateBeforeCall(text, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for translateMandalorianGet
     * @param text Text to translate (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateMandalorianGetCall(String text, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/translate/mandalorian";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Funtranslations-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call translateMandalorianGetValidateBeforeCall(String text, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling translateMandalorianGet(Async)");
        }

        return translateMandalorianGetCall(text, _callback);

    }

    /**
     * 
     * Translate from English to Starwars Mandalorian Language.
     * @param text Text to translate (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public void translateMandalorianGet(String text) throws ApiException {
        translateMandalorianGetWithHttpInfo(text);
    }

    /**
     * 
     * Translate from English to Starwars Mandalorian Language.
     * @param text Text to translate (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> translateMandalorianGetWithHttpInfo(String text) throws ApiException {
        okhttp3.Call localVarCall = translateMandalorianGetValidateBeforeCall(text, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Translate from English to Starwars Mandalorian Language.
     * @param text Text to translate (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateMandalorianGetAsync(String text, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = translateMandalorianGetValidateBeforeCall(text, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for translateSithGet
     * @param text Text to translate (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateSithGetCall(String text, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/translate/sith";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Funtranslations-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call translateSithGetValidateBeforeCall(String text, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling translateSithGet(Async)");
        }

        return translateSithGetCall(text, _callback);

    }

    /**
     * 
     * Translate from English to Sith Speak.
     * @param text Text to translate (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public void translateSithGet(String text) throws ApiException {
        translateSithGetWithHttpInfo(text);
    }

    /**
     * 
     * Translate from English to Sith Speak.
     * @param text Text to translate (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> translateSithGetWithHttpInfo(String text) throws ApiException {
        okhttp3.Call localVarCall = translateSithGetValidateBeforeCall(text, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Translate from English to Sith Speak.
     * @param text Text to translate (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateSithGetAsync(String text, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = translateSithGetValidateBeforeCall(text, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for translateYodaGet
     * @param text Text to translate (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateYodaGetCall(String text, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/translate/yoda";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Funtranslations-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call translateYodaGetValidateBeforeCall(String text, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling translateYodaGet(Async)");
        }

        return translateYodaGetCall(text, _callback);

    }

    /**
     * 
     * Translate from English to Yoda Speak.
     * @param text Text to translate (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public void translateYodaGet(String text) throws ApiException {
        translateYodaGetWithHttpInfo(text);
    }

    /**
     * 
     * Translate from English to Yoda Speak.
     * @param text Text to translate (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> translateYodaGetWithHttpInfo(String text) throws ApiException {
        okhttp3.Call localVarCall = translateYodaGetValidateBeforeCall(text, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Translate from English to Yoda Speak.
     * @param text Text to translate (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateYodaGetAsync(String text, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = translateYodaGetValidateBeforeCall(text, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
