# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.company_rejection import CompanyRejection
from openapi_server import util


class CompanyCreditDecisionResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, company_id: str=None, rejections: CompanyRejection=None, status_code: str=None, status_text: str=None, town: str=None, zip_code: str=None):
        """CompanyCreditDecisionResult - a model defined in OpenAPI

        :param address: The address of this CompanyCreditDecisionResult.
        :param company_id: The company_id of this CompanyCreditDecisionResult.
        :param rejections: The rejections of this CompanyCreditDecisionResult.
        :param status_code: The status_code of this CompanyCreditDecisionResult.
        :param status_text: The status_text of this CompanyCreditDecisionResult.
        :param town: The town of this CompanyCreditDecisionResult.
        :param zip_code: The zip_code of this CompanyCreditDecisionResult.
        """
        self.openapi_types = {
            'address': str,
            'company_id': str,
            'rejections': CompanyRejection,
            'status_code': str,
            'status_text': str,
            'town': str,
            'zip_code': str
        }

        self.attribute_map = {
            'address': 'address',
            'company_id': 'companyId',
            'rejections': 'rejections',
            'status_code': 'statusCode',
            'status_text': 'statusText',
            'town': 'town',
            'zip_code': 'zipCode'
        }

        self._address = address
        self._company_id = company_id
        self._rejections = rejections
        self._status_code = status_code
        self._status_text = status_text
        self._town = town
        self._zip_code = zip_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompanyCreditDecisionResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompanyCreditDecisionResult of this CompanyCreditDecisionResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this CompanyCreditDecisionResult.

        

        :return: The address of this CompanyCreditDecisionResult.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CompanyCreditDecisionResult.

        

        :param address: The address of this CompanyCreditDecisionResult.
        :type address: str
        """

        self._address = address

    @property
    def company_id(self):
        """Gets the company_id of this CompanyCreditDecisionResult.

        Company identifier

        :return: The company_id of this CompanyCreditDecisionResult.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this CompanyCreditDecisionResult.

        Company identifier

        :param company_id: The company_id of this CompanyCreditDecisionResult.
        :type company_id: str
        """

        self._company_id = company_id

    @property
    def rejections(self):
        """Gets the rejections of this CompanyCreditDecisionResult.


        :return: The rejections of this CompanyCreditDecisionResult.
        :rtype: CompanyRejection
        """
        return self._rejections

    @rejections.setter
    def rejections(self, rejections):
        """Sets the rejections of this CompanyCreditDecisionResult.


        :param rejections: The rejections of this CompanyCreditDecisionResult.
        :type rejections: CompanyRejection
        """

        self._rejections = rejections

    @property
    def status_code(self):
        """Gets the status_code of this CompanyCreditDecisionResult.

        

        :return: The status_code of this CompanyCreditDecisionResult.
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this CompanyCreditDecisionResult.

        

        :param status_code: The status_code of this CompanyCreditDecisionResult.
        :type status_code: str
        """

        self._status_code = status_code

    @property
    def status_text(self):
        """Gets the status_text of this CompanyCreditDecisionResult.

        

        :return: The status_text of this CompanyCreditDecisionResult.
        :rtype: str
        """
        return self._status_text

    @status_text.setter
    def status_text(self, status_text):
        """Sets the status_text of this CompanyCreditDecisionResult.

        

        :param status_text: The status_text of this CompanyCreditDecisionResult.
        :type status_text: str
        """

        self._status_text = status_text

    @property
    def town(self):
        """Gets the town of this CompanyCreditDecisionResult.

        

        :return: The town of this CompanyCreditDecisionResult.
        :rtype: str
        """
        return self._town

    @town.setter
    def town(self, town):
        """Sets the town of this CompanyCreditDecisionResult.

        

        :param town: The town of this CompanyCreditDecisionResult.
        :type town: str
        """

        self._town = town

    @property
    def zip_code(self):
        """Gets the zip_code of this CompanyCreditDecisionResult.

        

        :return: The zip_code of this CompanyCreditDecisionResult.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this CompanyCreditDecisionResult.

        

        :param zip_code: The zip_code of this CompanyCreditDecisionResult.
        :type zip_code: str
        """

        self._zip_code = zip_code
