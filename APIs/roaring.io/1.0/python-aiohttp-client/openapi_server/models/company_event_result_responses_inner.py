# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CompanyEventResultResponsesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, change_date: str=None, code: str=None, company_id: str=None, data_set: List[str]=None):
        """CompanyEventResultResponsesInner - a model defined in OpenAPI

        :param change_date: The change_date of this CompanyEventResultResponsesInner.
        :param code: The code of this CompanyEventResultResponsesInner.
        :param company_id: The company_id of this CompanyEventResultResponsesInner.
        :param data_set: The data_set of this CompanyEventResultResponsesInner.
        """
        self.openapi_types = {
            'change_date': str,
            'code': str,
            'company_id': str,
            'data_set': List[str]
        }

        self.attribute_map = {
            'change_date': 'changeDate',
            'code': 'code',
            'company_id': 'companyId',
            'data_set': 'dataSet'
        }

        self._change_date = change_date
        self._code = code
        self._company_id = company_id
        self._data_set = data_set

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompanyEventResultResponsesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompanyEventResult_responses_inner of this CompanyEventResultResponsesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def change_date(self):
        """Gets the change_date of this CompanyEventResultResponsesInner.

        Date for when the event occurred

        :return: The change_date of this CompanyEventResultResponsesInner.
        :rtype: str
        """
        return self._change_date

    @change_date.setter
    def change_date(self, change_date):
        """Sets the change_date of this CompanyEventResultResponsesInner.

        Date for when the event occurred

        :param change_date: The change_date of this CompanyEventResultResponsesInner.
        :type change_date: str
        """

        self._change_date = change_date

    @property
    def code(self):
        """Gets the code of this CompanyEventResultResponsesInner.

        Change code for the event

        :return: The code of this CompanyEventResultResponsesInner.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CompanyEventResultResponsesInner.

        Change code for the event

        :param code: The code of this CompanyEventResultResponsesInner.
        :type code: str
        """

        self._code = code

    @property
    def company_id(self):
        """Gets the company_id of this CompanyEventResultResponsesInner.

        Company identifier

        :return: The company_id of this CompanyEventResultResponsesInner.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this CompanyEventResultResponsesInner.

        Company identifier

        :param company_id: The company_id of this CompanyEventResultResponsesInner.
        :type company_id: str
        """

        self._company_id = company_id

    @property
    def data_set(self):
        """Gets the data_set of this CompanyEventResultResponsesInner.

        List of all Roaring datasets affected by the event

        :return: The data_set of this CompanyEventResultResponsesInner.
        :rtype: List[str]
        """
        return self._data_set

    @data_set.setter
    def data_set(self, data_set):
        """Sets the data_set of this CompanyEventResultResponsesInner.

        List of all Roaring datasets affected by the event

        :param data_set: The data_set of this CompanyEventResultResponsesInner.
        :type data_set: List[str]
        """

        self._data_set = data_set
