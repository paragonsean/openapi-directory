# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResponseInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hit_count: int=None, no_match_ids: List[str]=None, request_count: int=None):
        """ResponseInfo - a model defined in OpenAPI

        :param hit_count: The hit_count of this ResponseInfo.
        :param no_match_ids: The no_match_ids of this ResponseInfo.
        :param request_count: The request_count of this ResponseInfo.
        """
        self.openapi_types = {
            'hit_count': int,
            'no_match_ids': List[str],
            'request_count': int
        }

        self.attribute_map = {
            'hit_count': 'hitCount',
            'no_match_ids': 'noMatchIds',
            'request_count': 'requestCount'
        }

        self._hit_count = hit_count
        self._no_match_ids = no_match_ids
        self._request_count = request_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResponseInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResponseInfo of this ResponseInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hit_count(self):
        """Gets the hit_count of this ResponseInfo.

        Number of companyIds in response (companyIds that could be found)

        :return: The hit_count of this ResponseInfo.
        :rtype: int
        """
        return self._hit_count

    @hit_count.setter
    def hit_count(self, hit_count):
        """Sets the hit_count of this ResponseInfo.

        Number of companyIds in response (companyIds that could be found)

        :param hit_count: The hit_count of this ResponseInfo.
        :type hit_count: int
        """

        self._hit_count = hit_count

    @property
    def no_match_ids(self):
        """Gets the no_match_ids of this ResponseInfo.

        Array of companyIds that was in request but could not be matched

        :return: The no_match_ids of this ResponseInfo.
        :rtype: List[str]
        """
        return self._no_match_ids

    @no_match_ids.setter
    def no_match_ids(self, no_match_ids):
        """Sets the no_match_ids of this ResponseInfo.

        Array of companyIds that was in request but could not be matched

        :param no_match_ids: The no_match_ids of this ResponseInfo.
        :type no_match_ids: List[str]
        """

        self._no_match_ids = no_match_ids

    @property
    def request_count(self):
        """Gets the request_count of this ResponseInfo.

        Number of requested companyIds

        :return: The request_count of this ResponseInfo.
        :rtype: int
        """
        return self._request_count

    @request_count.setter
    def request_count(self, request_count):
        """Sets the request_count of this ResponseInfo.

        Number of requested companyIds

        :param request_count: The request_count of this ResponseInfo.
        :type request_count: int
        """

        self._request_count = request_count
