/**
 * CompanyAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponseInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponseInfo::OAIResponseInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponseInfo::OAIResponseInfo() {
    this->initializeModel();
}

OAIResponseInfo::~OAIResponseInfo() {}

void OAIResponseInfo::initializeModel() {

    m_hit_count_isSet = false;
    m_hit_count_isValid = false;

    m_no_match_ids_isSet = false;
    m_no_match_ids_isValid = false;

    m_request_count_isSet = false;
    m_request_count_isValid = false;
}

void OAIResponseInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponseInfo::fromJsonObject(QJsonObject json) {

    m_hit_count_isValid = ::OpenAPI::fromJsonValue(m_hit_count, json[QString("hitCount")]);
    m_hit_count_isSet = !json[QString("hitCount")].isNull() && m_hit_count_isValid;

    m_no_match_ids_isValid = ::OpenAPI::fromJsonValue(m_no_match_ids, json[QString("noMatchIds")]);
    m_no_match_ids_isSet = !json[QString("noMatchIds")].isNull() && m_no_match_ids_isValid;

    m_request_count_isValid = ::OpenAPI::fromJsonValue(m_request_count, json[QString("requestCount")]);
    m_request_count_isSet = !json[QString("requestCount")].isNull() && m_request_count_isValid;
}

QString OAIResponseInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponseInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_hit_count_isSet) {
        obj.insert(QString("hitCount"), ::OpenAPI::toJsonValue(m_hit_count));
    }
    if (m_no_match_ids.size() > 0) {
        obj.insert(QString("noMatchIds"), ::OpenAPI::toJsonValue(m_no_match_ids));
    }
    if (m_request_count_isSet) {
        obj.insert(QString("requestCount"), ::OpenAPI::toJsonValue(m_request_count));
    }
    return obj;
}

qint32 OAIResponseInfo::getHitCount() const {
    return m_hit_count;
}
void OAIResponseInfo::setHitCount(const qint32 &hit_count) {
    m_hit_count = hit_count;
    m_hit_count_isSet = true;
}

bool OAIResponseInfo::is_hit_count_Set() const{
    return m_hit_count_isSet;
}

bool OAIResponseInfo::is_hit_count_Valid() const{
    return m_hit_count_isValid;
}

QList<QString> OAIResponseInfo::getNoMatchIds() const {
    return m_no_match_ids;
}
void OAIResponseInfo::setNoMatchIds(const QList<QString> &no_match_ids) {
    m_no_match_ids = no_match_ids;
    m_no_match_ids_isSet = true;
}

bool OAIResponseInfo::is_no_match_ids_Set() const{
    return m_no_match_ids_isSet;
}

bool OAIResponseInfo::is_no_match_ids_Valid() const{
    return m_no_match_ids_isValid;
}

qint32 OAIResponseInfo::getRequestCount() const {
    return m_request_count;
}
void OAIResponseInfo::setRequestCount(const qint32 &request_count) {
    m_request_count = request_count;
    m_request_count_isSet = true;
}

bool OAIResponseInfo::is_request_count_Set() const{
    return m_request_count_isSet;
}

bool OAIResponseInfo::is_request_count_Valid() const{
    return m_request_count_isValid;
}

bool OAIResponseInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hit_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_match_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponseInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
