/**
 * CompanyAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBadRequest.h"
#include "OAICompanyBoardMembersMulti.h"
#include "OAICompanyBoardMembersResult.h"
#include "OAICompanyCreditDecisionResult.h"
#include "OAICompanyEconomyOverviewMulti.h"
#include "OAICompanyEconomyOverviewResult.h"
#include "OAICompanyEventRequestBody.h"
#include "OAICompanyEventResult.h"
#include "OAICompanyLookupRequestBody.h"
#include "OAICompanyOverviewMulti.h"
#include "OAICompanyOverviewResult.h"
#include "OAICompanySignatoryMulti.h"
#include "OAICompanySignatoryResult.h"
#include "OAINotFound.h"
#include "OAIServerError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  country_code QString [required]
    * @param[in]  company_id QString [required]
    */
    virtual void companyBoardMembersGet(const QString &country_code, const QString &company_id);

    /**
    * @param[in]  country_code QString [required]
    * @param[in]  body OAICompanyLookupRequestBody [required]
    */
    virtual void companyBoardMembersPost(const QString &country_code, const OAICompanyLookupRequestBody &body);

    /**
    * @param[in]  country_code QString [required]
    * @param[in]  company_id QString [required]
    * @param[in]  r_template QString [required]
    */
    virtual void companyCreditDecisionGet(const QString &country_code, const QString &company_id, const QString &r_template);

    /**
    * @param[in]  country_code QString [required]
    * @param[in]  company_id QString [required]
    */
    virtual void companyEconomyOverviewGet(const QString &country_code, const QString &company_id);

    /**
    * @param[in]  country_code QString [required]
    * @param[in]  body OAICompanyLookupRequestBody [required]
    */
    virtual void companyEconomyOverviewPost(const QString &country_code, const OAICompanyLookupRequestBody &body);

    /**
    * @param[in]  country_code QString [required]
    * @param[in]  body OAICompanyEventRequestBody [required]
    */
    virtual void companyEventPost(const QString &country_code, const OAICompanyEventRequestBody &body);

    /**
    * @param[in]  country_code QString [required]
    * @param[in]  company_id QString [required]
    */
    virtual void companyOverviewGet(const QString &country_code, const QString &company_id);

    /**
    * @param[in]  country_code QString [required]
    * @param[in]  body OAICompanyLookupRequestBody [required]
    */
    virtual void companyOverviewPost(const QString &country_code, const OAICompanyLookupRequestBody &body);

    /**
    * @param[in]  country_code QString [required]
    * @param[in]  company_id QString [required]
    */
    virtual void companySignatoryGet(const QString &country_code, const QString &company_id);

    /**
    * @param[in]  country_code QString [required]
    * @param[in]  body OAICompanyLookupRequestBody [required]
    */
    virtual void companySignatoryPost(const QString &country_code, const OAICompanyLookupRequestBody &body);

    /**
    * @param[in]  country_code QString [required]
    * @param[in]  company_name QString [optional]
    * @param[in]  town QString [optional]
    */
    virtual void companySimpleSearchGet(const QString &country_code, const ::OpenAPI::OptionalParam<QString> &company_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &town = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void companyBoardMembersGetCallback(OAIHttpRequestWorker *worker);
    void companyBoardMembersPostCallback(OAIHttpRequestWorker *worker);
    void companyCreditDecisionGetCallback(OAIHttpRequestWorker *worker);
    void companyEconomyOverviewGetCallback(OAIHttpRequestWorker *worker);
    void companyEconomyOverviewPostCallback(OAIHttpRequestWorker *worker);
    void companyEventPostCallback(OAIHttpRequestWorker *worker);
    void companyOverviewGetCallback(OAIHttpRequestWorker *worker);
    void companyOverviewPostCallback(OAIHttpRequestWorker *worker);
    void companySignatoryGetCallback(OAIHttpRequestWorker *worker);
    void companySignatoryPostCallback(OAIHttpRequestWorker *worker);
    void companySimpleSearchGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void companyBoardMembersGetSignal(OAICompanyBoardMembersResult summary);
    void companyBoardMembersPostSignal(OAICompanyBoardMembersMulti summary);
    void companyCreditDecisionGetSignal(OAICompanyCreditDecisionResult summary);
    void companyEconomyOverviewGetSignal(OAICompanyEconomyOverviewResult summary);
    void companyEconomyOverviewPostSignal(OAICompanyEconomyOverviewMulti summary);
    void companyEventPostSignal(OAICompanyEventResult summary);
    void companyOverviewGetSignal(OAICompanyOverviewResult summary);
    void companyOverviewPostSignal(OAICompanyOverviewMulti summary);
    void companySignatoryGetSignal(OAICompanySignatoryResult summary);
    void companySignatoryPostSignal(OAICompanySignatoryMulti summary);
    void companySimpleSearchGetSignal();


    void companyBoardMembersGetSignalFull(OAIHttpRequestWorker *worker, OAICompanyBoardMembersResult summary);
    void companyBoardMembersPostSignalFull(OAIHttpRequestWorker *worker, OAICompanyBoardMembersMulti summary);
    void companyCreditDecisionGetSignalFull(OAIHttpRequestWorker *worker, OAICompanyCreditDecisionResult summary);
    void companyEconomyOverviewGetSignalFull(OAIHttpRequestWorker *worker, OAICompanyEconomyOverviewResult summary);
    void companyEconomyOverviewPostSignalFull(OAIHttpRequestWorker *worker, OAICompanyEconomyOverviewMulti summary);
    void companyEventPostSignalFull(OAIHttpRequestWorker *worker, OAICompanyEventResult summary);
    void companyOverviewGetSignalFull(OAIHttpRequestWorker *worker, OAICompanyOverviewResult summary);
    void companyOverviewPostSignalFull(OAIHttpRequestWorker *worker, OAICompanyOverviewMulti summary);
    void companySignatoryGetSignalFull(OAIHttpRequestWorker *worker, OAICompanySignatoryResult summary);
    void companySignatoryPostSignalFull(OAIHttpRequestWorker *worker, OAICompanySignatoryMulti summary);
    void companySimpleSearchGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use companyBoardMembersGetSignalError() instead")
    void companyBoardMembersGetSignalE(OAICompanyBoardMembersResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void companyBoardMembersGetSignalError(OAICompanyBoardMembersResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyBoardMembersPostSignalError() instead")
    void companyBoardMembersPostSignalE(OAICompanyBoardMembersMulti summary, QNetworkReply::NetworkError error_type, QString error_str);
    void companyBoardMembersPostSignalError(OAICompanyBoardMembersMulti summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyCreditDecisionGetSignalError() instead")
    void companyCreditDecisionGetSignalE(OAICompanyCreditDecisionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void companyCreditDecisionGetSignalError(OAICompanyCreditDecisionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyEconomyOverviewGetSignalError() instead")
    void companyEconomyOverviewGetSignalE(OAICompanyEconomyOverviewResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void companyEconomyOverviewGetSignalError(OAICompanyEconomyOverviewResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyEconomyOverviewPostSignalError() instead")
    void companyEconomyOverviewPostSignalE(OAICompanyEconomyOverviewMulti summary, QNetworkReply::NetworkError error_type, QString error_str);
    void companyEconomyOverviewPostSignalError(OAICompanyEconomyOverviewMulti summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyEventPostSignalError() instead")
    void companyEventPostSignalE(OAICompanyEventResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void companyEventPostSignalError(OAICompanyEventResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyOverviewGetSignalError() instead")
    void companyOverviewGetSignalE(OAICompanyOverviewResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void companyOverviewGetSignalError(OAICompanyOverviewResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyOverviewPostSignalError() instead")
    void companyOverviewPostSignalE(OAICompanyOverviewMulti summary, QNetworkReply::NetworkError error_type, QString error_str);
    void companyOverviewPostSignalError(OAICompanyOverviewMulti summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companySignatoryGetSignalError() instead")
    void companySignatoryGetSignalE(OAICompanySignatoryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void companySignatoryGetSignalError(OAICompanySignatoryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companySignatoryPostSignalError() instead")
    void companySignatoryPostSignalE(OAICompanySignatoryMulti summary, QNetworkReply::NetworkError error_type, QString error_str);
    void companySignatoryPostSignalError(OAICompanySignatoryMulti summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companySimpleSearchGetSignalError() instead")
    void companySimpleSearchGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void companySimpleSearchGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use companyBoardMembersGetSignalErrorFull() instead")
    void companyBoardMembersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companyBoardMembersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyBoardMembersPostSignalErrorFull() instead")
    void companyBoardMembersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companyBoardMembersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyCreditDecisionGetSignalErrorFull() instead")
    void companyCreditDecisionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companyCreditDecisionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyEconomyOverviewGetSignalErrorFull() instead")
    void companyEconomyOverviewGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companyEconomyOverviewGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyEconomyOverviewPostSignalErrorFull() instead")
    void companyEconomyOverviewPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companyEconomyOverviewPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyEventPostSignalErrorFull() instead")
    void companyEventPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companyEventPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyOverviewGetSignalErrorFull() instead")
    void companyOverviewGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companyOverviewGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companyOverviewPostSignalErrorFull() instead")
    void companyOverviewPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companyOverviewPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companySignatoryGetSignalErrorFull() instead")
    void companySignatoryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companySignatoryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companySignatoryPostSignalErrorFull() instead")
    void companySignatoryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companySignatoryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use companySimpleSearchGetSignalErrorFull() instead")
    void companySimpleSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void companySimpleSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
