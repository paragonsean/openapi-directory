/*
 * CompanyAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CompanyEventResultResponsesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:12.861098-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompanyEventResultResponsesInner {
  public static final String SERIALIZED_NAME_CHANGE_DATE = "changeDate";
  @SerializedName(SERIALIZED_NAME_CHANGE_DATE)
  private String changeDate;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_COMPANY_ID = "companyId";
  @SerializedName(SERIALIZED_NAME_COMPANY_ID)
  private String companyId;

  public static final String SERIALIZED_NAME_DATA_SET = "dataSet";
  @SerializedName(SERIALIZED_NAME_DATA_SET)
  private List<String> dataSet = new ArrayList<>();

  public CompanyEventResultResponsesInner() {
  }

  public CompanyEventResultResponsesInner changeDate(String changeDate) {
    this.changeDate = changeDate;
    return this;
  }

  /**
   * Date for when the event occurred
   * @return changeDate
   */
  @javax.annotation.Nullable
  public String getChangeDate() {
    return changeDate;
  }

  public void setChangeDate(String changeDate) {
    this.changeDate = changeDate;
  }


  public CompanyEventResultResponsesInner code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Change code for the event
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public CompanyEventResultResponsesInner companyId(String companyId) {
    this.companyId = companyId;
    return this;
  }

  /**
   * Company identifier
   * @return companyId
   */
  @javax.annotation.Nullable
  public String getCompanyId() {
    return companyId;
  }

  public void setCompanyId(String companyId) {
    this.companyId = companyId;
  }


  public CompanyEventResultResponsesInner dataSet(List<String> dataSet) {
    this.dataSet = dataSet;
    return this;
  }

  public CompanyEventResultResponsesInner addDataSetItem(String dataSetItem) {
    if (this.dataSet == null) {
      this.dataSet = new ArrayList<>();
    }
    this.dataSet.add(dataSetItem);
    return this;
  }

  /**
   * List of all Roaring datasets affected by the event
   * @return dataSet
   */
  @javax.annotation.Nullable
  public List<String> getDataSet() {
    return dataSet;
  }

  public void setDataSet(List<String> dataSet) {
    this.dataSet = dataSet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompanyEventResultResponsesInner companyEventResultResponsesInner = (CompanyEventResultResponsesInner) o;
    return Objects.equals(this.changeDate, companyEventResultResponsesInner.changeDate) &&
        Objects.equals(this.code, companyEventResultResponsesInner.code) &&
        Objects.equals(this.companyId, companyEventResultResponsesInner.companyId) &&
        Objects.equals(this.dataSet, companyEventResultResponsesInner.dataSet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changeDate, code, companyId, dataSet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompanyEventResultResponsesInner {\n");
    sb.append("    changeDate: ").append(toIndentedString(changeDate)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    companyId: ").append(toIndentedString(companyId)).append("\n");
    sb.append("    dataSet: ").append(toIndentedString(dataSet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changeDate");
    openapiFields.add("code");
    openapiFields.add("companyId");
    openapiFields.add("dataSet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompanyEventResultResponsesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompanyEventResultResponsesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompanyEventResultResponsesInner is not found in the empty JSON string", CompanyEventResultResponsesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompanyEventResultResponsesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompanyEventResultResponsesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("changeDate") != null && !jsonObj.get("changeDate").isJsonNull()) && !jsonObj.get("changeDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changeDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changeDate").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("companyId") != null && !jsonObj.get("companyId").isJsonNull()) && !jsonObj.get("companyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dataSet") != null && !jsonObj.get("dataSet").isJsonNull() && !jsonObj.get("dataSet").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSet` to be an array in the JSON string but got `%s`", jsonObj.get("dataSet").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompanyEventResultResponsesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompanyEventResultResponsesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompanyEventResultResponsesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompanyEventResultResponsesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CompanyEventResultResponsesInner>() {
           @Override
           public void write(JsonWriter out, CompanyEventResultResponsesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompanyEventResultResponsesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompanyEventResultResponsesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompanyEventResultResponsesInner
   * @throws IOException if the JSON string is invalid with respect to CompanyEventResultResponsesInner
   */
  public static CompanyEventResultResponsesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompanyEventResultResponsesInner.class);
  }

  /**
   * Convert an instance of CompanyEventResultResponsesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

