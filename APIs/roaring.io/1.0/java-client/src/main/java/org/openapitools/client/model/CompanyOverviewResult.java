/*
 * CompanyAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Roaring Apps company overview in a lookup. list contains all possible fields returned by either of the api verb calls
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:12.861098-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompanyOverviewResult {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_CHANGE_DATE = "changeDate";
  @SerializedName(SERIALIZED_NAME_CHANGE_DATE)
  private String changeDate;

  public static final String SERIALIZED_NAME_CO_ADDRESS = "coAddress";
  @SerializedName(SERIALIZED_NAME_CO_ADDRESS)
  private String coAddress;

  public static final String SERIALIZED_NAME_COMMUNE = "commune";
  @SerializedName(SERIALIZED_NAME_COMMUNE)
  private String commune;

  public static final String SERIALIZED_NAME_COMPANY_HOLDER = "companyHolder";
  @SerializedName(SERIALIZED_NAME_COMPANY_HOLDER)
  private String companyHolder;

  public static final String SERIALIZED_NAME_COMPANY_ID = "companyId";
  @SerializedName(SERIALIZED_NAME_COMPANY_ID)
  private String companyId;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "companyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_COMPANY_REGISTRATION_DATE = "companyRegistrationDate";
  @SerializedName(SERIALIZED_NAME_COMPANY_REGISTRATION_DATE)
  private String companyRegistrationDate;

  public static final String SERIALIZED_NAME_COUNTY = "county";
  @SerializedName(SERIALIZED_NAME_COUNTY)
  private String county;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EMPLOYER_CONTRIBUTION_REG = "employerContributionReg";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_CONTRIBUTION_REG)
  private String employerContributionReg;

  public static final String SERIALIZED_NAME_FAX_NUMBER = "faxNumber";
  @SerializedName(SERIALIZED_NAME_FAX_NUMBER)
  private String faxNumber;

  public static final String SERIALIZED_NAME_INDUSTRY_CODE = "industryCode";
  @SerializedName(SERIALIZED_NAME_INDUSTRY_CODE)
  private String industryCode;

  public static final String SERIALIZED_NAME_INDUSTRY_TEXT = "industryText";
  @SerializedName(SERIALIZED_NAME_INDUSTRY_TEXT)
  private String industryText;

  public static final String SERIALIZED_NAME_LEGAL_GROUP_CODE = "legalGroupCode";
  @SerializedName(SERIALIZED_NAME_LEGAL_GROUP_CODE)
  private String legalGroupCode;

  public static final String SERIALIZED_NAME_LEGAL_GROUP_TEXT = "legalGroupText";
  @SerializedName(SERIALIZED_NAME_LEGAL_GROUP_TEXT)
  private String legalGroupText;

  public static final String SERIALIZED_NAME_NUMBER_COMPANY_UNITS = "numberCompanyUnits";
  @SerializedName(SERIALIZED_NAME_NUMBER_COMPANY_UNITS)
  private Integer numberCompanyUnits;

  public static final String SERIALIZED_NAME_NUMBER_EMPLOYEES = "numberEmployees";
  @SerializedName(SERIALIZED_NAME_NUMBER_EMPLOYEES)
  private String numberEmployees;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_PRELIMINARY_TAX_REG = "preliminaryTaxReg";
  @SerializedName(SERIALIZED_NAME_PRELIMINARY_TAX_REG)
  private String preliminaryTaxReg;

  public static final String SERIALIZED_NAME_SEVERAL_COMPANY_NAME = "severalCompanyName";
  @SerializedName(SERIALIZED_NAME_SEVERAL_COMPANY_NAME)
  private Boolean severalCompanyName;

  public static final String SERIALIZED_NAME_STATUS_CODE = "statusCode";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private String statusCode;

  public static final String SERIALIZED_NAME_STATUS_DATE_FROM = "statusDateFrom";
  @SerializedName(SERIALIZED_NAME_STATUS_DATE_FROM)
  private String statusDateFrom;

  public static final String SERIALIZED_NAME_STATUS_TEXT_DETAILED = "statusTextDetailed";
  @SerializedName(SERIALIZED_NAME_STATUS_TEXT_DETAILED)
  private String statusTextDetailed;

  public static final String SERIALIZED_NAME_STATUS_TEXT_HIGH = "statusTextHigh";
  @SerializedName(SERIALIZED_NAME_STATUS_TEXT_HIGH)
  private String statusTextHigh;

  public static final String SERIALIZED_NAME_TOP_DIRECTOR_FUNCTION = "topDirectorFunction";
  @SerializedName(SERIALIZED_NAME_TOP_DIRECTOR_FUNCTION)
  private String topDirectorFunction;

  public static final String SERIALIZED_NAME_TOP_DIRECTOR_NAME = "topDirectorName";
  @SerializedName(SERIALIZED_NAME_TOP_DIRECTOR_NAME)
  private String topDirectorName;

  public static final String SERIALIZED_NAME_TOWN = "town";
  @SerializedName(SERIALIZED_NAME_TOWN)
  private String town;

  public static final String SERIALIZED_NAME_VAT_REG = "vatReg";
  @SerializedName(SERIALIZED_NAME_VAT_REG)
  private String vatReg;

  public static final String SERIALIZED_NAME_VEP_CHANGED_DATE = "vepChangedDate";
  @SerializedName(SERIALIZED_NAME_VEP_CHANGED_DATE)
  private String vepChangedDate;

  public static final String SERIALIZED_NAME_VISIT_ADDRESS = "visitAddress";
  @SerializedName(SERIALIZED_NAME_VISIT_ADDRESS)
  private String visitAddress;

  public static final String SERIALIZED_NAME_VISIT_COMMUNE = "visitCommune";
  @SerializedName(SERIALIZED_NAME_VISIT_COMMUNE)
  private String visitCommune;

  public static final String SERIALIZED_NAME_VISIT_COUNTY = "visitCounty";
  @SerializedName(SERIALIZED_NAME_VISIT_COUNTY)
  private String visitCounty;

  public static final String SERIALIZED_NAME_VISIT_STREET = "visitStreet";
  @SerializedName(SERIALIZED_NAME_VISIT_STREET)
  private String visitStreet;

  public static final String SERIALIZED_NAME_VISIT_STREET_NUMBER = "visitStreetNumber";
  @SerializedName(SERIALIZED_NAME_VISIT_STREET_NUMBER)
  private String visitStreetNumber;

  public static final String SERIALIZED_NAME_VISIT_STREET_UNIT = "visitStreetUnit";
  @SerializedName(SERIALIZED_NAME_VISIT_STREET_UNIT)
  private String visitStreetUnit;

  public static final String SERIALIZED_NAME_VISIT_TOWN = "visitTown";
  @SerializedName(SERIALIZED_NAME_VISIT_TOWN)
  private String visitTown;

  public static final String SERIALIZED_NAME_VISIT_ZIP_CODE = "visitZipCode";
  @SerializedName(SERIALIZED_NAME_VISIT_ZIP_CODE)
  private String visitZipCode;

  public static final String SERIALIZED_NAME_WEB_ADDRESS = "webAddress";
  @SerializedName(SERIALIZED_NAME_WEB_ADDRESS)
  private String webAddress;

  public static final String SERIALIZED_NAME_ZIP_CODE = "zipCode";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE)
  private String zipCode;

  public CompanyOverviewResult() {
  }

  public CompanyOverviewResult address(String address) {
    this.address = address;
    return this;
  }

  /**
   * Postal address, street/P.O BOX
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public CompanyOverviewResult changeDate(String changeDate) {
    this.changeDate = changeDate;
    return this;
  }

  /**
   * Date for when the record was last changed 
   * @return changeDate
   */
  @javax.annotation.Nullable
  public String getChangeDate() {
    return changeDate;
  }

  public void setChangeDate(String changeDate) {
    this.changeDate = changeDate;
  }


  public CompanyOverviewResult coAddress(String coAddress) {
    this.coAddress = coAddress;
    return this;
  }

  /**
   * Postal address, C/O address
   * @return coAddress
   */
  @javax.annotation.Nullable
  public String getCoAddress() {
    return coAddress;
  }

  public void setCoAddress(String coAddress) {
    this.coAddress = coAddress;
  }


  public CompanyOverviewResult commune(String commune) {
    this.commune = commune;
    return this;
  }

  /**
   * Postal address, commune name
   * @return commune
   */
  @javax.annotation.Nullable
  public String getCommune() {
    return commune;
  }

  public void setCommune(String commune) {
    this.commune = commune;
  }


  public CompanyOverviewResult companyHolder(String companyHolder) {
    this.companyHolder = companyHolder;
    return this;
  }

  /**
   * Name of company holder
   * @return companyHolder
   */
  @javax.annotation.Nullable
  public String getCompanyHolder() {
    return companyHolder;
  }

  public void setCompanyHolder(String companyHolder) {
    this.companyHolder = companyHolder;
  }


  public CompanyOverviewResult companyId(String companyId) {
    this.companyId = companyId;
    return this;
  }

  /**
   * Company identifier (company registration number / organization number)
   * @return companyId
   */
  @javax.annotation.Nullable
  public String getCompanyId() {
    return companyId;
  }

  public void setCompanyId(String companyId) {
    this.companyId = companyId;
  }


  public CompanyOverviewResult companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Company name
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public CompanyOverviewResult companyRegistrationDate(String companyRegistrationDate) {
    this.companyRegistrationDate = companyRegistrationDate;
    return this;
  }

  /**
   * Company registration date
   * @return companyRegistrationDate
   */
  @javax.annotation.Nullable
  public String getCompanyRegistrationDate() {
    return companyRegistrationDate;
  }

  public void setCompanyRegistrationDate(String companyRegistrationDate) {
    this.companyRegistrationDate = companyRegistrationDate;
  }


  public CompanyOverviewResult county(String county) {
    this.county = county;
    return this;
  }

  /**
   * Postal address, county
   * @return county
   */
  @javax.annotation.Nullable
  public String getCounty() {
    return county;
  }

  public void setCounty(String county) {
    this.county = county;
  }


  public CompanyOverviewResult email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Email address
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public CompanyOverviewResult employerContributionReg(String employerContributionReg) {
    this.employerContributionReg = employerContributionReg;
    return this;
  }

  /**
   * Company is registererd for employer contribution tax (Arb.avg Sweden)
   * @return employerContributionReg
   */
  @javax.annotation.Nullable
  public String getEmployerContributionReg() {
    return employerContributionReg;
  }

  public void setEmployerContributionReg(String employerContributionReg) {
    this.employerContributionReg = employerContributionReg;
  }


  public CompanyOverviewResult faxNumber(String faxNumber) {
    this.faxNumber = faxNumber;
    return this;
  }

  /**
   * Fax number
   * @return faxNumber
   */
  @javax.annotation.Nullable
  public String getFaxNumber() {
    return faxNumber;
  }

  public void setFaxNumber(String faxNumber) {
    this.faxNumber = faxNumber;
  }


  public CompanyOverviewResult industryCode(String industryCode) {
    this.industryCode = industryCode;
    return this;
  }

  /**
   * Company main industry, NACE code
   * @return industryCode
   */
  @javax.annotation.Nullable
  public String getIndustryCode() {
    return industryCode;
  }

  public void setIndustryCode(String industryCode) {
    this.industryCode = industryCode;
  }


  public CompanyOverviewResult industryText(String industryText) {
    this.industryText = industryText;
    return this;
  }

  /**
   * Company main industry, NACE text
   * @return industryText
   */
  @javax.annotation.Nullable
  public String getIndustryText() {
    return industryText;
  }

  public void setIndustryText(String industryText) {
    this.industryText = industryText;
  }


  public CompanyOverviewResult legalGroupCode(String legalGroupCode) {
    this.legalGroupCode = legalGroupCode;
    return this;
  }

  /**
   * Company type code
   * @return legalGroupCode
   */
  @javax.annotation.Nullable
  public String getLegalGroupCode() {
    return legalGroupCode;
  }

  public void setLegalGroupCode(String legalGroupCode) {
    this.legalGroupCode = legalGroupCode;
  }


  public CompanyOverviewResult legalGroupText(String legalGroupText) {
    this.legalGroupText = legalGroupText;
    return this;
  }

  /**
   * Company type text
   * @return legalGroupText
   */
  @javax.annotation.Nullable
  public String getLegalGroupText() {
    return legalGroupText;
  }

  public void setLegalGroupText(String legalGroupText) {
    this.legalGroupText = legalGroupText;
  }


  public CompanyOverviewResult numberCompanyUnits(Integer numberCompanyUnits) {
    this.numberCompanyUnits = numberCompanyUnits;
    return this;
  }

  /**
   * Number of company units/workplaces
   * @return numberCompanyUnits
   */
  @javax.annotation.Nullable
  public Integer getNumberCompanyUnits() {
    return numberCompanyUnits;
  }

  public void setNumberCompanyUnits(Integer numberCompanyUnits) {
    this.numberCompanyUnits = numberCompanyUnits;
  }


  public CompanyOverviewResult numberEmployees(String numberEmployees) {
    this.numberEmployees = numberEmployees;
    return this;
  }

  /**
   * Number of employees (pcs)
   * @return numberEmployees
   */
  @javax.annotation.Nullable
  public String getNumberEmployees() {
    return numberEmployees;
  }

  public void setNumberEmployees(String numberEmployees) {
    this.numberEmployees = numberEmployees;
  }


  public CompanyOverviewResult phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Telephone number
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public CompanyOverviewResult preliminaryTaxReg(String preliminaryTaxReg) {
    this.preliminaryTaxReg = preliminaryTaxReg;
    return this;
  }

  /**
   * Company is approved for preliminary tax (F-skatt Sweden)
   * @return preliminaryTaxReg
   */
  @javax.annotation.Nullable
  public String getPreliminaryTaxReg() {
    return preliminaryTaxReg;
  }

  public void setPreliminaryTaxReg(String preliminaryTaxReg) {
    this.preliminaryTaxReg = preliminaryTaxReg;
  }


  public CompanyOverviewResult severalCompanyName(Boolean severalCompanyName) {
    this.severalCompanyName = severalCompanyName;
    return this;
  }

  /**
   * Indicates if the company have more than one active name
   * @return severalCompanyName
   */
  @javax.annotation.Nullable
  public Boolean getSeveralCompanyName() {
    return severalCompanyName;
  }

  public void setSeveralCompanyName(Boolean severalCompanyName) {
    this.severalCompanyName = severalCompanyName;
  }


  public CompanyOverviewResult statusCode(String statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  /**
   * Company status code
   * @return statusCode
   */
  @javax.annotation.Nullable
  public String getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(String statusCode) {
    this.statusCode = statusCode;
  }


  public CompanyOverviewResult statusDateFrom(String statusDateFrom) {
    this.statusDateFrom = statusDateFrom;
    return this;
  }

  /**
   * Company status date from
   * @return statusDateFrom
   */
  @javax.annotation.Nullable
  public String getStatusDateFrom() {
    return statusDateFrom;
  }

  public void setStatusDateFrom(String statusDateFrom) {
    this.statusDateFrom = statusDateFrom;
  }


  public CompanyOverviewResult statusTextDetailed(String statusTextDetailed) {
    this.statusTextDetailed = statusTextDetailed;
    return this;
  }

  /**
   * Company status text detailed
   * @return statusTextDetailed
   */
  @javax.annotation.Nullable
  public String getStatusTextDetailed() {
    return statusTextDetailed;
  }

  public void setStatusTextDetailed(String statusTextDetailed) {
    this.statusTextDetailed = statusTextDetailed;
  }


  public CompanyOverviewResult statusTextHigh(String statusTextHigh) {
    this.statusTextHigh = statusTextHigh;
    return this;
  }

  /**
   * Company status text
   * @return statusTextHigh
   */
  @javax.annotation.Nullable
  public String getStatusTextHigh() {
    return statusTextHigh;
  }

  public void setStatusTextHigh(String statusTextHigh) {
    this.statusTextHigh = statusTextHigh;
  }


  public CompanyOverviewResult topDirectorFunction(String topDirectorFunction) {
    this.topDirectorFunction = topDirectorFunction;
    return this;
  }

  /**
   * Top director&#39;s function
   * @return topDirectorFunction
   */
  @javax.annotation.Nullable
  public String getTopDirectorFunction() {
    return topDirectorFunction;
  }

  public void setTopDirectorFunction(String topDirectorFunction) {
    this.topDirectorFunction = topDirectorFunction;
  }


  public CompanyOverviewResult topDirectorName(String topDirectorName) {
    this.topDirectorName = topDirectorName;
    return this;
  }

  /**
   * Top director&#39;s name
   * @return topDirectorName
   */
  @javax.annotation.Nullable
  public String getTopDirectorName() {
    return topDirectorName;
  }

  public void setTopDirectorName(String topDirectorName) {
    this.topDirectorName = topDirectorName;
  }


  public CompanyOverviewResult town(String town) {
    this.town = town;
    return this;
  }

  /**
   * Postal address, town
   * @return town
   */
  @javax.annotation.Nullable
  public String getTown() {
    return town;
  }

  public void setTown(String town) {
    this.town = town;
  }


  public CompanyOverviewResult vatReg(String vatReg) {
    this.vatReg = vatReg;
    return this;
  }

  /**
   * Company is registered for VAT (MOMS Sweden)
   * @return vatReg
   */
  @javax.annotation.Nullable
  public String getVatReg() {
    return vatReg;
  }

  public void setVatReg(String vatReg) {
    this.vatReg = vatReg;
  }


  public CompanyOverviewResult vepChangedDate(String vepChangedDate) {
    this.vepChangedDate = vepChangedDate;
    return this;
  }

  /**
   * Show the latest date any of preliminaryTaxReg, employerContributionReg or vatReg has had a change
   * @return vepChangedDate
   */
  @javax.annotation.Nullable
  public String getVepChangedDate() {
    return vepChangedDate;
  }

  public void setVepChangedDate(String vepChangedDate) {
    this.vepChangedDate = vepChangedDate;
  }


  public CompanyOverviewResult visitAddress(String visitAddress) {
    this.visitAddress = visitAddress;
    return this;
  }

  /**
   * Visiting address, street name, street number and unit
   * @return visitAddress
   */
  @javax.annotation.Nullable
  public String getVisitAddress() {
    return visitAddress;
  }

  public void setVisitAddress(String visitAddress) {
    this.visitAddress = visitAddress;
  }


  public CompanyOverviewResult visitCommune(String visitCommune) {
    this.visitCommune = visitCommune;
    return this;
  }

  /**
   * Visiting address, commune
   * @return visitCommune
   */
  @javax.annotation.Nullable
  public String getVisitCommune() {
    return visitCommune;
  }

  public void setVisitCommune(String visitCommune) {
    this.visitCommune = visitCommune;
  }


  public CompanyOverviewResult visitCounty(String visitCounty) {
    this.visitCounty = visitCounty;
    return this;
  }

  /**
   * Visiting address, county
   * @return visitCounty
   */
  @javax.annotation.Nullable
  public String getVisitCounty() {
    return visitCounty;
  }

  public void setVisitCounty(String visitCounty) {
    this.visitCounty = visitCounty;
  }


  public CompanyOverviewResult visitStreet(String visitStreet) {
    this.visitStreet = visitStreet;
    return this;
  }

  /**
   * Visiting address, street
   * @return visitStreet
   */
  @javax.annotation.Nullable
  public String getVisitStreet() {
    return visitStreet;
  }

  public void setVisitStreet(String visitStreet) {
    this.visitStreet = visitStreet;
  }


  public CompanyOverviewResult visitStreetNumber(String visitStreetNumber) {
    this.visitStreetNumber = visitStreetNumber;
    return this;
  }

  /**
   * Visiting address, number
   * @return visitStreetNumber
   */
  @javax.annotation.Nullable
  public String getVisitStreetNumber() {
    return visitStreetNumber;
  }

  public void setVisitStreetNumber(String visitStreetNumber) {
    this.visitStreetNumber = visitStreetNumber;
  }


  public CompanyOverviewResult visitStreetUnit(String visitStreetUnit) {
    this.visitStreetUnit = visitStreetUnit;
    return this;
  }

  /**
   * Visiting address, unit
   * @return visitStreetUnit
   */
  @javax.annotation.Nullable
  public String getVisitStreetUnit() {
    return visitStreetUnit;
  }

  public void setVisitStreetUnit(String visitStreetUnit) {
    this.visitStreetUnit = visitStreetUnit;
  }


  public CompanyOverviewResult visitTown(String visitTown) {
    this.visitTown = visitTown;
    return this;
  }

  /**
   * Visiting address, town
   * @return visitTown
   */
  @javax.annotation.Nullable
  public String getVisitTown() {
    return visitTown;
  }

  public void setVisitTown(String visitTown) {
    this.visitTown = visitTown;
  }


  public CompanyOverviewResult visitZipCode(String visitZipCode) {
    this.visitZipCode = visitZipCode;
    return this;
  }

  /**
   * Visiting address, zip code
   * @return visitZipCode
   */
  @javax.annotation.Nullable
  public String getVisitZipCode() {
    return visitZipCode;
  }

  public void setVisitZipCode(String visitZipCode) {
    this.visitZipCode = visitZipCode;
  }


  public CompanyOverviewResult webAddress(String webAddress) {
    this.webAddress = webAddress;
    return this;
  }

  /**
   * Web address
   * @return webAddress
   */
  @javax.annotation.Nullable
  public String getWebAddress() {
    return webAddress;
  }

  public void setWebAddress(String webAddress) {
    this.webAddress = webAddress;
  }


  public CompanyOverviewResult zipCode(String zipCode) {
    this.zipCode = zipCode;
    return this;
  }

  /**
   * Postal address, zipcode
   * @return zipCode
   */
  @javax.annotation.Nullable
  public String getZipCode() {
    return zipCode;
  }

  public void setZipCode(String zipCode) {
    this.zipCode = zipCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompanyOverviewResult companyOverviewResult = (CompanyOverviewResult) o;
    return Objects.equals(this.address, companyOverviewResult.address) &&
        Objects.equals(this.changeDate, companyOverviewResult.changeDate) &&
        Objects.equals(this.coAddress, companyOverviewResult.coAddress) &&
        Objects.equals(this.commune, companyOverviewResult.commune) &&
        Objects.equals(this.companyHolder, companyOverviewResult.companyHolder) &&
        Objects.equals(this.companyId, companyOverviewResult.companyId) &&
        Objects.equals(this.companyName, companyOverviewResult.companyName) &&
        Objects.equals(this.companyRegistrationDate, companyOverviewResult.companyRegistrationDate) &&
        Objects.equals(this.county, companyOverviewResult.county) &&
        Objects.equals(this.email, companyOverviewResult.email) &&
        Objects.equals(this.employerContributionReg, companyOverviewResult.employerContributionReg) &&
        Objects.equals(this.faxNumber, companyOverviewResult.faxNumber) &&
        Objects.equals(this.industryCode, companyOverviewResult.industryCode) &&
        Objects.equals(this.industryText, companyOverviewResult.industryText) &&
        Objects.equals(this.legalGroupCode, companyOverviewResult.legalGroupCode) &&
        Objects.equals(this.legalGroupText, companyOverviewResult.legalGroupText) &&
        Objects.equals(this.numberCompanyUnits, companyOverviewResult.numberCompanyUnits) &&
        Objects.equals(this.numberEmployees, companyOverviewResult.numberEmployees) &&
        Objects.equals(this.phoneNumber, companyOverviewResult.phoneNumber) &&
        Objects.equals(this.preliminaryTaxReg, companyOverviewResult.preliminaryTaxReg) &&
        Objects.equals(this.severalCompanyName, companyOverviewResult.severalCompanyName) &&
        Objects.equals(this.statusCode, companyOverviewResult.statusCode) &&
        Objects.equals(this.statusDateFrom, companyOverviewResult.statusDateFrom) &&
        Objects.equals(this.statusTextDetailed, companyOverviewResult.statusTextDetailed) &&
        Objects.equals(this.statusTextHigh, companyOverviewResult.statusTextHigh) &&
        Objects.equals(this.topDirectorFunction, companyOverviewResult.topDirectorFunction) &&
        Objects.equals(this.topDirectorName, companyOverviewResult.topDirectorName) &&
        Objects.equals(this.town, companyOverviewResult.town) &&
        Objects.equals(this.vatReg, companyOverviewResult.vatReg) &&
        Objects.equals(this.vepChangedDate, companyOverviewResult.vepChangedDate) &&
        Objects.equals(this.visitAddress, companyOverviewResult.visitAddress) &&
        Objects.equals(this.visitCommune, companyOverviewResult.visitCommune) &&
        Objects.equals(this.visitCounty, companyOverviewResult.visitCounty) &&
        Objects.equals(this.visitStreet, companyOverviewResult.visitStreet) &&
        Objects.equals(this.visitStreetNumber, companyOverviewResult.visitStreetNumber) &&
        Objects.equals(this.visitStreetUnit, companyOverviewResult.visitStreetUnit) &&
        Objects.equals(this.visitTown, companyOverviewResult.visitTown) &&
        Objects.equals(this.visitZipCode, companyOverviewResult.visitZipCode) &&
        Objects.equals(this.webAddress, companyOverviewResult.webAddress) &&
        Objects.equals(this.zipCode, companyOverviewResult.zipCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, changeDate, coAddress, commune, companyHolder, companyId, companyName, companyRegistrationDate, county, email, employerContributionReg, faxNumber, industryCode, industryText, legalGroupCode, legalGroupText, numberCompanyUnits, numberEmployees, phoneNumber, preliminaryTaxReg, severalCompanyName, statusCode, statusDateFrom, statusTextDetailed, statusTextHigh, topDirectorFunction, topDirectorName, town, vatReg, vepChangedDate, visitAddress, visitCommune, visitCounty, visitStreet, visitStreetNumber, visitStreetUnit, visitTown, visitZipCode, webAddress, zipCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompanyOverviewResult {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    changeDate: ").append(toIndentedString(changeDate)).append("\n");
    sb.append("    coAddress: ").append(toIndentedString(coAddress)).append("\n");
    sb.append("    commune: ").append(toIndentedString(commune)).append("\n");
    sb.append("    companyHolder: ").append(toIndentedString(companyHolder)).append("\n");
    sb.append("    companyId: ").append(toIndentedString(companyId)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    companyRegistrationDate: ").append(toIndentedString(companyRegistrationDate)).append("\n");
    sb.append("    county: ").append(toIndentedString(county)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    employerContributionReg: ").append(toIndentedString(employerContributionReg)).append("\n");
    sb.append("    faxNumber: ").append(toIndentedString(faxNumber)).append("\n");
    sb.append("    industryCode: ").append(toIndentedString(industryCode)).append("\n");
    sb.append("    industryText: ").append(toIndentedString(industryText)).append("\n");
    sb.append("    legalGroupCode: ").append(toIndentedString(legalGroupCode)).append("\n");
    sb.append("    legalGroupText: ").append(toIndentedString(legalGroupText)).append("\n");
    sb.append("    numberCompanyUnits: ").append(toIndentedString(numberCompanyUnits)).append("\n");
    sb.append("    numberEmployees: ").append(toIndentedString(numberEmployees)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    preliminaryTaxReg: ").append(toIndentedString(preliminaryTaxReg)).append("\n");
    sb.append("    severalCompanyName: ").append(toIndentedString(severalCompanyName)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    statusDateFrom: ").append(toIndentedString(statusDateFrom)).append("\n");
    sb.append("    statusTextDetailed: ").append(toIndentedString(statusTextDetailed)).append("\n");
    sb.append("    statusTextHigh: ").append(toIndentedString(statusTextHigh)).append("\n");
    sb.append("    topDirectorFunction: ").append(toIndentedString(topDirectorFunction)).append("\n");
    sb.append("    topDirectorName: ").append(toIndentedString(topDirectorName)).append("\n");
    sb.append("    town: ").append(toIndentedString(town)).append("\n");
    sb.append("    vatReg: ").append(toIndentedString(vatReg)).append("\n");
    sb.append("    vepChangedDate: ").append(toIndentedString(vepChangedDate)).append("\n");
    sb.append("    visitAddress: ").append(toIndentedString(visitAddress)).append("\n");
    sb.append("    visitCommune: ").append(toIndentedString(visitCommune)).append("\n");
    sb.append("    visitCounty: ").append(toIndentedString(visitCounty)).append("\n");
    sb.append("    visitStreet: ").append(toIndentedString(visitStreet)).append("\n");
    sb.append("    visitStreetNumber: ").append(toIndentedString(visitStreetNumber)).append("\n");
    sb.append("    visitStreetUnit: ").append(toIndentedString(visitStreetUnit)).append("\n");
    sb.append("    visitTown: ").append(toIndentedString(visitTown)).append("\n");
    sb.append("    visitZipCode: ").append(toIndentedString(visitZipCode)).append("\n");
    sb.append("    webAddress: ").append(toIndentedString(webAddress)).append("\n");
    sb.append("    zipCode: ").append(toIndentedString(zipCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("changeDate");
    openapiFields.add("coAddress");
    openapiFields.add("commune");
    openapiFields.add("companyHolder");
    openapiFields.add("companyId");
    openapiFields.add("companyName");
    openapiFields.add("companyRegistrationDate");
    openapiFields.add("county");
    openapiFields.add("email");
    openapiFields.add("employerContributionReg");
    openapiFields.add("faxNumber");
    openapiFields.add("industryCode");
    openapiFields.add("industryText");
    openapiFields.add("legalGroupCode");
    openapiFields.add("legalGroupText");
    openapiFields.add("numberCompanyUnits");
    openapiFields.add("numberEmployees");
    openapiFields.add("phoneNumber");
    openapiFields.add("preliminaryTaxReg");
    openapiFields.add("severalCompanyName");
    openapiFields.add("statusCode");
    openapiFields.add("statusDateFrom");
    openapiFields.add("statusTextDetailed");
    openapiFields.add("statusTextHigh");
    openapiFields.add("topDirectorFunction");
    openapiFields.add("topDirectorName");
    openapiFields.add("town");
    openapiFields.add("vatReg");
    openapiFields.add("vepChangedDate");
    openapiFields.add("visitAddress");
    openapiFields.add("visitCommune");
    openapiFields.add("visitCounty");
    openapiFields.add("visitStreet");
    openapiFields.add("visitStreetNumber");
    openapiFields.add("visitStreetUnit");
    openapiFields.add("visitTown");
    openapiFields.add("visitZipCode");
    openapiFields.add("webAddress");
    openapiFields.add("zipCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompanyOverviewResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompanyOverviewResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompanyOverviewResult is not found in the empty JSON string", CompanyOverviewResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompanyOverviewResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompanyOverviewResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("changeDate") != null && !jsonObj.get("changeDate").isJsonNull()) && !jsonObj.get("changeDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changeDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changeDate").toString()));
      }
      if ((jsonObj.get("coAddress") != null && !jsonObj.get("coAddress").isJsonNull()) && !jsonObj.get("coAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coAddress").toString()));
      }
      if ((jsonObj.get("commune") != null && !jsonObj.get("commune").isJsonNull()) && !jsonObj.get("commune").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commune` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commune").toString()));
      }
      if ((jsonObj.get("companyHolder") != null && !jsonObj.get("companyHolder").isJsonNull()) && !jsonObj.get("companyHolder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyHolder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyHolder").toString()));
      }
      if ((jsonObj.get("companyId") != null && !jsonObj.get("companyId").isJsonNull()) && !jsonObj.get("companyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyId").toString()));
      }
      if ((jsonObj.get("companyName") != null && !jsonObj.get("companyName").isJsonNull()) && !jsonObj.get("companyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyName").toString()));
      }
      if ((jsonObj.get("companyRegistrationDate") != null && !jsonObj.get("companyRegistrationDate").isJsonNull()) && !jsonObj.get("companyRegistrationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyRegistrationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyRegistrationDate").toString()));
      }
      if ((jsonObj.get("county") != null && !jsonObj.get("county").isJsonNull()) && !jsonObj.get("county").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `county` to be a primitive type in the JSON string but got `%s`", jsonObj.get("county").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("employerContributionReg") != null && !jsonObj.get("employerContributionReg").isJsonNull()) && !jsonObj.get("employerContributionReg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employerContributionReg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employerContributionReg").toString()));
      }
      if ((jsonObj.get("faxNumber") != null && !jsonObj.get("faxNumber").isJsonNull()) && !jsonObj.get("faxNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `faxNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("faxNumber").toString()));
      }
      if ((jsonObj.get("industryCode") != null && !jsonObj.get("industryCode").isJsonNull()) && !jsonObj.get("industryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `industryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("industryCode").toString()));
      }
      if ((jsonObj.get("industryText") != null && !jsonObj.get("industryText").isJsonNull()) && !jsonObj.get("industryText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `industryText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("industryText").toString()));
      }
      if ((jsonObj.get("legalGroupCode") != null && !jsonObj.get("legalGroupCode").isJsonNull()) && !jsonObj.get("legalGroupCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalGroupCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalGroupCode").toString()));
      }
      if ((jsonObj.get("legalGroupText") != null && !jsonObj.get("legalGroupText").isJsonNull()) && !jsonObj.get("legalGroupText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalGroupText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalGroupText").toString()));
      }
      if ((jsonObj.get("numberEmployees") != null && !jsonObj.get("numberEmployees").isJsonNull()) && !jsonObj.get("numberEmployees").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numberEmployees` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numberEmployees").toString()));
      }
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if ((jsonObj.get("preliminaryTaxReg") != null && !jsonObj.get("preliminaryTaxReg").isJsonNull()) && !jsonObj.get("preliminaryTaxReg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preliminaryTaxReg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preliminaryTaxReg").toString()));
      }
      if ((jsonObj.get("statusCode") != null && !jsonObj.get("statusCode").isJsonNull()) && !jsonObj.get("statusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusCode").toString()));
      }
      if ((jsonObj.get("statusDateFrom") != null && !jsonObj.get("statusDateFrom").isJsonNull()) && !jsonObj.get("statusDateFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusDateFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusDateFrom").toString()));
      }
      if ((jsonObj.get("statusTextDetailed") != null && !jsonObj.get("statusTextDetailed").isJsonNull()) && !jsonObj.get("statusTextDetailed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusTextDetailed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusTextDetailed").toString()));
      }
      if ((jsonObj.get("statusTextHigh") != null && !jsonObj.get("statusTextHigh").isJsonNull()) && !jsonObj.get("statusTextHigh").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusTextHigh` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusTextHigh").toString()));
      }
      if ((jsonObj.get("topDirectorFunction") != null && !jsonObj.get("topDirectorFunction").isJsonNull()) && !jsonObj.get("topDirectorFunction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topDirectorFunction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topDirectorFunction").toString()));
      }
      if ((jsonObj.get("topDirectorName") != null && !jsonObj.get("topDirectorName").isJsonNull()) && !jsonObj.get("topDirectorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topDirectorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topDirectorName").toString()));
      }
      if ((jsonObj.get("town") != null && !jsonObj.get("town").isJsonNull()) && !jsonObj.get("town").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `town` to be a primitive type in the JSON string but got `%s`", jsonObj.get("town").toString()));
      }
      if ((jsonObj.get("vatReg") != null && !jsonObj.get("vatReg").isJsonNull()) && !jsonObj.get("vatReg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vatReg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vatReg").toString()));
      }
      if ((jsonObj.get("vepChangedDate") != null && !jsonObj.get("vepChangedDate").isJsonNull()) && !jsonObj.get("vepChangedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vepChangedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vepChangedDate").toString()));
      }
      if ((jsonObj.get("visitAddress") != null && !jsonObj.get("visitAddress").isJsonNull()) && !jsonObj.get("visitAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visitAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visitAddress").toString()));
      }
      if ((jsonObj.get("visitCommune") != null && !jsonObj.get("visitCommune").isJsonNull()) && !jsonObj.get("visitCommune").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visitCommune` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visitCommune").toString()));
      }
      if ((jsonObj.get("visitCounty") != null && !jsonObj.get("visitCounty").isJsonNull()) && !jsonObj.get("visitCounty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visitCounty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visitCounty").toString()));
      }
      if ((jsonObj.get("visitStreet") != null && !jsonObj.get("visitStreet").isJsonNull()) && !jsonObj.get("visitStreet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visitStreet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visitStreet").toString()));
      }
      if ((jsonObj.get("visitStreetNumber") != null && !jsonObj.get("visitStreetNumber").isJsonNull()) && !jsonObj.get("visitStreetNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visitStreetNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visitStreetNumber").toString()));
      }
      if ((jsonObj.get("visitStreetUnit") != null && !jsonObj.get("visitStreetUnit").isJsonNull()) && !jsonObj.get("visitStreetUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visitStreetUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visitStreetUnit").toString()));
      }
      if ((jsonObj.get("visitTown") != null && !jsonObj.get("visitTown").isJsonNull()) && !jsonObj.get("visitTown").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visitTown` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visitTown").toString()));
      }
      if ((jsonObj.get("visitZipCode") != null && !jsonObj.get("visitZipCode").isJsonNull()) && !jsonObj.get("visitZipCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visitZipCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visitZipCode").toString()));
      }
      if ((jsonObj.get("webAddress") != null && !jsonObj.get("webAddress").isJsonNull()) && !jsonObj.get("webAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webAddress").toString()));
      }
      if ((jsonObj.get("zipCode") != null && !jsonObj.get("zipCode").isJsonNull()) && !jsonObj.get("zipCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompanyOverviewResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompanyOverviewResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompanyOverviewResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompanyOverviewResult.class));

       return (TypeAdapter<T>) new TypeAdapter<CompanyOverviewResult>() {
           @Override
           public void write(JsonWriter out, CompanyOverviewResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompanyOverviewResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompanyOverviewResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompanyOverviewResult
   * @throws IOException if the JSON string is invalid with respect to CompanyOverviewResult
   */
  public static CompanyOverviewResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompanyOverviewResult.class);
  }

  /**
   * Convert an instance of CompanyOverviewResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

