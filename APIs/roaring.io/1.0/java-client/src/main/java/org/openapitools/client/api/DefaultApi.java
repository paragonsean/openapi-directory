/*
 * CompanyAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BadRequest;
import org.openapitools.client.model.CompanyBoardMembersMulti;
import org.openapitools.client.model.CompanyBoardMembersResult;
import org.openapitools.client.model.CompanyCreditDecisionResult;
import org.openapitools.client.model.CompanyEconomyOverviewMulti;
import org.openapitools.client.model.CompanyEconomyOverviewResult;
import org.openapitools.client.model.CompanyEventRequestBody;
import org.openapitools.client.model.CompanyEventResult;
import org.openapitools.client.model.CompanyLookupRequestBody;
import org.openapitools.client.model.CompanyOverviewMulti;
import org.openapitools.client.model.CompanyOverviewResult;
import org.openapitools.client.model.CompanySignatoryMulti;
import org.openapitools.client.model.CompanySignatoryResult;
import org.openapitools.client.model.NotFound;
import org.openapitools.client.model.ServerError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for companyBoardMembersGet
     * @param countryCode Country code for the company (required)
     * @param companyId Company identification for the company (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyBoardMembersGetCall(String countryCode, String companyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company-board-members";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryCode", countryCode));
        }

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyId", companyId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call companyBoardMembersGetValidateBeforeCall(String countryCode, String companyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling companyBoardMembersGet(Async)");
        }

        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling companyBoardMembersGet(Async)");
        }

        return companyBoardMembersGetCall(countryCode, companyId, _callback);

    }

    /**
     * 
     * 
     * @param countryCode Country code for the company (required)
     * @param companyId Company identification for the company (required)
     * @return CompanyBoardMembersResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public CompanyBoardMembersResult companyBoardMembersGet(String countryCode, String companyId) throws ApiException {
        ApiResponse<CompanyBoardMembersResult> localVarResp = companyBoardMembersGetWithHttpInfo(countryCode, companyId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param countryCode Country code for the company (required)
     * @param companyId Company identification for the company (required)
     * @return ApiResponse&lt;CompanyBoardMembersResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompanyBoardMembersResult> companyBoardMembersGetWithHttpInfo(String countryCode, String companyId) throws ApiException {
        okhttp3.Call localVarCall = companyBoardMembersGetValidateBeforeCall(countryCode, companyId, null);
        Type localVarReturnType = new TypeToken<CompanyBoardMembersResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param countryCode Country code for the company (required)
     * @param companyId Company identification for the company (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyBoardMembersGetAsync(String countryCode, String companyId, final ApiCallback<CompanyBoardMembersResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = companyBoardMembersGetValidateBeforeCall(countryCode, companyId, _callback);
        Type localVarReturnType = new TypeToken<CompanyBoardMembersResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for companyBoardMembersPost
     * @param countryCode Country code for the company (required)
     * @param body Request body with company identifiers to lookup (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyBoardMembersPostCall(String countryCode, CompanyLookupRequestBody body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/company-board-members";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryCode", countryCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call companyBoardMembersPostValidateBeforeCall(String countryCode, CompanyLookupRequestBody body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling companyBoardMembersPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling companyBoardMembersPost(Async)");
        }

        return companyBoardMembersPostCall(countryCode, body, _callback);

    }

    /**
     * 
     * 
     * @param countryCode Country code for the company (required)
     * @param body Request body with company identifiers to lookup (required)
     * @return CompanyBoardMembersMulti
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public CompanyBoardMembersMulti companyBoardMembersPost(String countryCode, CompanyLookupRequestBody body) throws ApiException {
        ApiResponse<CompanyBoardMembersMulti> localVarResp = companyBoardMembersPostWithHttpInfo(countryCode, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param countryCode Country code for the company (required)
     * @param body Request body with company identifiers to lookup (required)
     * @return ApiResponse&lt;CompanyBoardMembersMulti&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompanyBoardMembersMulti> companyBoardMembersPostWithHttpInfo(String countryCode, CompanyLookupRequestBody body) throws ApiException {
        okhttp3.Call localVarCall = companyBoardMembersPostValidateBeforeCall(countryCode, body, null);
        Type localVarReturnType = new TypeToken<CompanyBoardMembersMulti>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param countryCode Country code for the company (required)
     * @param body Request body with company identifiers to lookup (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyBoardMembersPostAsync(String countryCode, CompanyLookupRequestBody body, final ApiCallback<CompanyBoardMembersMulti> _callback) throws ApiException {

        okhttp3.Call localVarCall = companyBoardMembersPostValidateBeforeCall(countryCode, body, _callback);
        Type localVarReturnType = new TypeToken<CompanyBoardMembersMulti>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for companyCreditDecisionGet
     * @param countryCode Country code for the company (required)
     * @param companyId Company identification for the company (required)
     * @param template Template for credit decision (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyCreditDecisionGetCall(String countryCode, String companyId, String template, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company-credit-decision";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryCode", countryCode));
        }

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyId", companyId));
        }

        if (template != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("template", template));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call companyCreditDecisionGetValidateBeforeCall(String countryCode, String companyId, String template, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling companyCreditDecisionGet(Async)");
        }

        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling companyCreditDecisionGet(Async)");
        }

        // verify the required parameter 'template' is set
        if (template == null) {
            throw new ApiException("Missing the required parameter 'template' when calling companyCreditDecisionGet(Async)");
        }

        return companyCreditDecisionGetCall(countryCode, companyId, template, _callback);

    }

    /**
     * 
     * 
     * @param countryCode Country code for the company (required)
     * @param companyId Company identification for the company (required)
     * @param template Template for credit decision (required)
     * @return CompanyCreditDecisionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public CompanyCreditDecisionResult companyCreditDecisionGet(String countryCode, String companyId, String template) throws ApiException {
        ApiResponse<CompanyCreditDecisionResult> localVarResp = companyCreditDecisionGetWithHttpInfo(countryCode, companyId, template);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param countryCode Country code for the company (required)
     * @param companyId Company identification for the company (required)
     * @param template Template for credit decision (required)
     * @return ApiResponse&lt;CompanyCreditDecisionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompanyCreditDecisionResult> companyCreditDecisionGetWithHttpInfo(String countryCode, String companyId, String template) throws ApiException {
        okhttp3.Call localVarCall = companyCreditDecisionGetValidateBeforeCall(countryCode, companyId, template, null);
        Type localVarReturnType = new TypeToken<CompanyCreditDecisionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param countryCode Country code for the company (required)
     * @param companyId Company identification for the company (required)
     * @param template Template for credit decision (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyCreditDecisionGetAsync(String countryCode, String companyId, String template, final ApiCallback<CompanyCreditDecisionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = companyCreditDecisionGetValidateBeforeCall(countryCode, companyId, template, _callback);
        Type localVarReturnType = new TypeToken<CompanyCreditDecisionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for companyEconomyOverviewGet
     * @param countryCode Country code for the company (required)
     * @param companyId Company identification for the company (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyEconomyOverviewGetCall(String countryCode, String companyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company-economy-overview";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryCode", countryCode));
        }

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyId", companyId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call companyEconomyOverviewGetValidateBeforeCall(String countryCode, String companyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling companyEconomyOverviewGet(Async)");
        }

        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling companyEconomyOverviewGet(Async)");
        }

        return companyEconomyOverviewGetCall(countryCode, companyId, _callback);

    }

    /**
     * 
     * 
     * @param countryCode Country code for the company (required)
     * @param companyId Company identification for the company (required)
     * @return CompanyEconomyOverviewResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public CompanyEconomyOverviewResult companyEconomyOverviewGet(String countryCode, String companyId) throws ApiException {
        ApiResponse<CompanyEconomyOverviewResult> localVarResp = companyEconomyOverviewGetWithHttpInfo(countryCode, companyId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param countryCode Country code for the company (required)
     * @param companyId Company identification for the company (required)
     * @return ApiResponse&lt;CompanyEconomyOverviewResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompanyEconomyOverviewResult> companyEconomyOverviewGetWithHttpInfo(String countryCode, String companyId) throws ApiException {
        okhttp3.Call localVarCall = companyEconomyOverviewGetValidateBeforeCall(countryCode, companyId, null);
        Type localVarReturnType = new TypeToken<CompanyEconomyOverviewResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param countryCode Country code for the company (required)
     * @param companyId Company identification for the company (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyEconomyOverviewGetAsync(String countryCode, String companyId, final ApiCallback<CompanyEconomyOverviewResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = companyEconomyOverviewGetValidateBeforeCall(countryCode, companyId, _callback);
        Type localVarReturnType = new TypeToken<CompanyEconomyOverviewResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for companyEconomyOverviewPost
     * @param countryCode Country code for the company (required)
     * @param body Request body with company identifiers to lookup (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyEconomyOverviewPostCall(String countryCode, CompanyLookupRequestBody body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/company-economy-overview";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryCode", countryCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call companyEconomyOverviewPostValidateBeforeCall(String countryCode, CompanyLookupRequestBody body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling companyEconomyOverviewPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling companyEconomyOverviewPost(Async)");
        }

        return companyEconomyOverviewPostCall(countryCode, body, _callback);

    }

    /**
     * 
     * 
     * @param countryCode Country code for the company (required)
     * @param body Request body with company identifiers to lookup (required)
     * @return CompanyEconomyOverviewMulti
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public CompanyEconomyOverviewMulti companyEconomyOverviewPost(String countryCode, CompanyLookupRequestBody body) throws ApiException {
        ApiResponse<CompanyEconomyOverviewMulti> localVarResp = companyEconomyOverviewPostWithHttpInfo(countryCode, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param countryCode Country code for the company (required)
     * @param body Request body with company identifiers to lookup (required)
     * @return ApiResponse&lt;CompanyEconomyOverviewMulti&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompanyEconomyOverviewMulti> companyEconomyOverviewPostWithHttpInfo(String countryCode, CompanyLookupRequestBody body) throws ApiException {
        okhttp3.Call localVarCall = companyEconomyOverviewPostValidateBeforeCall(countryCode, body, null);
        Type localVarReturnType = new TypeToken<CompanyEconomyOverviewMulti>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param countryCode Country code for the company (required)
     * @param body Request body with company identifiers to lookup (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyEconomyOverviewPostAsync(String countryCode, CompanyLookupRequestBody body, final ApiCallback<CompanyEconomyOverviewMulti> _callback) throws ApiException {

        okhttp3.Call localVarCall = companyEconomyOverviewPostValidateBeforeCall(countryCode, body, _callback);
        Type localVarReturnType = new TypeToken<CompanyEconomyOverviewMulti>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for companyEventPost
     * @param countryCode Country code for the company (required)
     * @param body Request body with company identifiers to lookup (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyEventPostCall(String countryCode, CompanyEventRequestBody body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/company-event";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryCode", countryCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call companyEventPostValidateBeforeCall(String countryCode, CompanyEventRequestBody body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling companyEventPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling companyEventPost(Async)");
        }

        return companyEventPostCall(countryCode, body, _callback);

    }

    /**
     * 
     * 
     * @param countryCode Country code for the company (required)
     * @param body Request body with company identifiers to lookup (required)
     * @return CompanyEventResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public CompanyEventResult companyEventPost(String countryCode, CompanyEventRequestBody body) throws ApiException {
        ApiResponse<CompanyEventResult> localVarResp = companyEventPostWithHttpInfo(countryCode, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param countryCode Country code for the company (required)
     * @param body Request body with company identifiers to lookup (required)
     * @return ApiResponse&lt;CompanyEventResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompanyEventResult> companyEventPostWithHttpInfo(String countryCode, CompanyEventRequestBody body) throws ApiException {
        okhttp3.Call localVarCall = companyEventPostValidateBeforeCall(countryCode, body, null);
        Type localVarReturnType = new TypeToken<CompanyEventResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param countryCode Country code for the company (required)
     * @param body Request body with company identifiers to lookup (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyEventPostAsync(String countryCode, CompanyEventRequestBody body, final ApiCallback<CompanyEventResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = companyEventPostValidateBeforeCall(countryCode, body, _callback);
        Type localVarReturnType = new TypeToken<CompanyEventResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for companyOverviewGet
     * @param countryCode Country code for the company (required)
     * @param companyId Company identification for the company (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyOverviewGetCall(String countryCode, String companyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company-overview";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryCode", countryCode));
        }

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyId", companyId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call companyOverviewGetValidateBeforeCall(String countryCode, String companyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling companyOverviewGet(Async)");
        }

        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling companyOverviewGet(Async)");
        }

        return companyOverviewGetCall(countryCode, companyId, _callback);

    }

    /**
     * 
     * 
     * @param countryCode Country code for the company (required)
     * @param companyId Company identification for the company (required)
     * @return CompanyOverviewResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public CompanyOverviewResult companyOverviewGet(String countryCode, String companyId) throws ApiException {
        ApiResponse<CompanyOverviewResult> localVarResp = companyOverviewGetWithHttpInfo(countryCode, companyId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param countryCode Country code for the company (required)
     * @param companyId Company identification for the company (required)
     * @return ApiResponse&lt;CompanyOverviewResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompanyOverviewResult> companyOverviewGetWithHttpInfo(String countryCode, String companyId) throws ApiException {
        okhttp3.Call localVarCall = companyOverviewGetValidateBeforeCall(countryCode, companyId, null);
        Type localVarReturnType = new TypeToken<CompanyOverviewResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param countryCode Country code for the company (required)
     * @param companyId Company identification for the company (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyOverviewGetAsync(String countryCode, String companyId, final ApiCallback<CompanyOverviewResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = companyOverviewGetValidateBeforeCall(countryCode, companyId, _callback);
        Type localVarReturnType = new TypeToken<CompanyOverviewResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for companyOverviewPost
     * @param countryCode Country code for the company (required)
     * @param body Request body with company identifiers to lookup (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyOverviewPostCall(String countryCode, CompanyLookupRequestBody body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/company-overview";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryCode", countryCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call companyOverviewPostValidateBeforeCall(String countryCode, CompanyLookupRequestBody body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling companyOverviewPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling companyOverviewPost(Async)");
        }

        return companyOverviewPostCall(countryCode, body, _callback);

    }

    /**
     * 
     * 
     * @param countryCode Country code for the company (required)
     * @param body Request body with company identifiers to lookup (required)
     * @return CompanyOverviewMulti
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public CompanyOverviewMulti companyOverviewPost(String countryCode, CompanyLookupRequestBody body) throws ApiException {
        ApiResponse<CompanyOverviewMulti> localVarResp = companyOverviewPostWithHttpInfo(countryCode, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param countryCode Country code for the company (required)
     * @param body Request body with company identifiers to lookup (required)
     * @return ApiResponse&lt;CompanyOverviewMulti&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompanyOverviewMulti> companyOverviewPostWithHttpInfo(String countryCode, CompanyLookupRequestBody body) throws ApiException {
        okhttp3.Call localVarCall = companyOverviewPostValidateBeforeCall(countryCode, body, null);
        Type localVarReturnType = new TypeToken<CompanyOverviewMulti>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param countryCode Country code for the company (required)
     * @param body Request body with company identifiers to lookup (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyOverviewPostAsync(String countryCode, CompanyLookupRequestBody body, final ApiCallback<CompanyOverviewMulti> _callback) throws ApiException {

        okhttp3.Call localVarCall = companyOverviewPostValidateBeforeCall(countryCode, body, _callback);
        Type localVarReturnType = new TypeToken<CompanyOverviewMulti>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for companySignatoryGet
     * @param countryCode Country code for the company (required)
     * @param companyId Company identification for the company (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companySignatoryGetCall(String countryCode, String companyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company-signatory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryCode", countryCode));
        }

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyId", companyId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call companySignatoryGetValidateBeforeCall(String countryCode, String companyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling companySignatoryGet(Async)");
        }

        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling companySignatoryGet(Async)");
        }

        return companySignatoryGetCall(countryCode, companyId, _callback);

    }

    /**
     * 
     * 
     * @param countryCode Country code for the company (required)
     * @param companyId Company identification for the company (required)
     * @return CompanySignatoryResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public CompanySignatoryResult companySignatoryGet(String countryCode, String companyId) throws ApiException {
        ApiResponse<CompanySignatoryResult> localVarResp = companySignatoryGetWithHttpInfo(countryCode, companyId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param countryCode Country code for the company (required)
     * @param companyId Company identification for the company (required)
     * @return ApiResponse&lt;CompanySignatoryResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompanySignatoryResult> companySignatoryGetWithHttpInfo(String countryCode, String companyId) throws ApiException {
        okhttp3.Call localVarCall = companySignatoryGetValidateBeforeCall(countryCode, companyId, null);
        Type localVarReturnType = new TypeToken<CompanySignatoryResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param countryCode Country code for the company (required)
     * @param companyId Company identification for the company (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companySignatoryGetAsync(String countryCode, String companyId, final ApiCallback<CompanySignatoryResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = companySignatoryGetValidateBeforeCall(countryCode, companyId, _callback);
        Type localVarReturnType = new TypeToken<CompanySignatoryResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for companySignatoryPost
     * @param countryCode Country code for the company (required)
     * @param body Request body with company identifiers to lookup (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companySignatoryPostCall(String countryCode, CompanyLookupRequestBody body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/company-signatory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryCode", countryCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call companySignatoryPostValidateBeforeCall(String countryCode, CompanyLookupRequestBody body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling companySignatoryPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling companySignatoryPost(Async)");
        }

        return companySignatoryPostCall(countryCode, body, _callback);

    }

    /**
     * 
     * 
     * @param countryCode Country code for the company (required)
     * @param body Request body with company identifiers to lookup (required)
     * @return CompanySignatoryMulti
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public CompanySignatoryMulti companySignatoryPost(String countryCode, CompanyLookupRequestBody body) throws ApiException {
        ApiResponse<CompanySignatoryMulti> localVarResp = companySignatoryPostWithHttpInfo(countryCode, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param countryCode Country code for the company (required)
     * @param body Request body with company identifiers to lookup (required)
     * @return ApiResponse&lt;CompanySignatoryMulti&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompanySignatoryMulti> companySignatoryPostWithHttpInfo(String countryCode, CompanyLookupRequestBody body) throws ApiException {
        okhttp3.Call localVarCall = companySignatoryPostValidateBeforeCall(countryCode, body, null);
        Type localVarReturnType = new TypeToken<CompanySignatoryMulti>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param countryCode Country code for the company (required)
     * @param body Request body with company identifiers to lookup (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. too many entities are requested or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companySignatoryPostAsync(String countryCode, CompanyLookupRequestBody body, final ApiCallback<CompanySignatoryMulti> _callback) throws ApiException {

        okhttp3.Call localVarCall = companySignatoryPostValidateBeforeCall(countryCode, body, _callback);
        Type localVarReturnType = new TypeToken<CompanySignatoryMulti>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for companySimpleSearchGet
     * @param countryCode Country code for the company (required)
     * @param companyName Company name (optional)
     * @param town Town (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companySimpleSearchGetCall(String countryCode, String companyName, String town, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company-simple-search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryCode", countryCode));
        }

        if (companyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyName", companyName));
        }

        if (town != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("town", town));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call companySimpleSearchGetValidateBeforeCall(String countryCode, String companyName, String town, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling companySimpleSearchGet(Async)");
        }

        return companySimpleSearchGetCall(countryCode, companyName, town, _callback);

    }

    /**
     * 
     * 
     * @param countryCode Country code for the company (required)
     * @param companyName Company name (optional)
     * @param town Town (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void companySimpleSearchGet(String countryCode, String companyName, String town) throws ApiException {
        companySimpleSearchGetWithHttpInfo(countryCode, companyName, town);
    }

    /**
     * 
     * 
     * @param countryCode Country code for the company (required)
     * @param companyName Company name (optional)
     * @param town Town (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> companySimpleSearchGetWithHttpInfo(String countryCode, String companyName, String town) throws ApiException {
        okhttp3.Call localVarCall = companySimpleSearchGetValidateBeforeCall(countryCode, companyName, town, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param countryCode Country code for the company (required)
     * @param companyName Company name (optional)
     * @param town Town (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companySimpleSearchGetAsync(String countryCode, String companyName, String town, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = companySimpleSearchGetValidateBeforeCall(countryCode, companyName, town, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
