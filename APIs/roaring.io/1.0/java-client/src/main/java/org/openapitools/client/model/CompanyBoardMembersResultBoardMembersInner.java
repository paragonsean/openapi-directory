/*
 * CompanyAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CompanyBoardMembersResultBoardMembersInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:12.861098-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompanyBoardMembersResultBoardMembersInner {
  public static final String SERIALIZED_NAME_BOARD_MEMBER_COMPANY_ID = "boardMemberCompanyId";
  @SerializedName(SERIALIZED_NAME_BOARD_MEMBER_COMPANY_ID)
  private String boardMemberCompanyId;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_FROM_DATE = "fromDate";
  @SerializedName(SERIALIZED_NAME_FROM_DATE)
  private String fromDate;

  public static final String SERIALIZED_NAME_FULL_NAME = "fullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_GIVEN_NAME = "givenName";
  @SerializedName(SERIALIZED_NAME_GIVEN_NAME)
  private String givenName;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "middleName";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_PERSONAL_NUMBER = "personalNumber";
  @SerializedName(SERIALIZED_NAME_PERSONAL_NUMBER)
  private String personalNumber;

  public static final String SERIALIZED_NAME_ROLE_CODE = "roleCode";
  @SerializedName(SERIALIZED_NAME_ROLE_CODE)
  private String roleCode;

  public static final String SERIALIZED_NAME_ROLE_NAME = "roleName";
  @SerializedName(SERIALIZED_NAME_ROLE_NAME)
  private String roleName;

  public static final String SERIALIZED_NAME_SUR_NAME = "surName";
  @SerializedName(SERIALIZED_NAME_SUR_NAME)
  private String surName;

  public static final String SERIALIZED_NAME_TO_DATE = "toDate";
  @SerializedName(SERIALIZED_NAME_TO_DATE)
  private String toDate;

  public CompanyBoardMembersResultBoardMembersInner() {
  }

  public CompanyBoardMembersResultBoardMembersInner boardMemberCompanyId(String boardMemberCompanyId) {
    this.boardMemberCompanyId = boardMemberCompanyId;
    return this;
  }

  /**
   * 
   * @return boardMemberCompanyId
   */
  @javax.annotation.Nullable
  public String getBoardMemberCompanyId() {
    return boardMemberCompanyId;
  }

  public void setBoardMemberCompanyId(String boardMemberCompanyId) {
    this.boardMemberCompanyId = boardMemberCompanyId;
  }


  public CompanyBoardMembersResultBoardMembersInner firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * 
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public CompanyBoardMembersResultBoardMembersInner fromDate(String fromDate) {
    this.fromDate = fromDate;
    return this;
  }

  /**
   * 
   * @return fromDate
   */
  @javax.annotation.Nullable
  public String getFromDate() {
    return fromDate;
  }

  public void setFromDate(String fromDate) {
    this.fromDate = fromDate;
  }


  public CompanyBoardMembersResultBoardMembersInner fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * 
   * @return fullName
   */
  @javax.annotation.Nullable
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public CompanyBoardMembersResultBoardMembersInner givenName(String givenName) {
    this.givenName = givenName;
    return this;
  }

  /**
   * 
   * @return givenName
   */
  @javax.annotation.Nullable
  public String getGivenName() {
    return givenName;
  }

  public void setGivenName(String givenName) {
    this.givenName = givenName;
  }


  public CompanyBoardMembersResultBoardMembersInner middleName(String middleName) {
    this.middleName = middleName;
    return this;
  }

  /**
   * 
   * @return middleName
   */
  @javax.annotation.Nullable
  public String getMiddleName() {
    return middleName;
  }

  public void setMiddleName(String middleName) {
    this.middleName = middleName;
  }


  public CompanyBoardMembersResultBoardMembersInner personalNumber(String personalNumber) {
    this.personalNumber = personalNumber;
    return this;
  }

  /**
   * 
   * @return personalNumber
   */
  @javax.annotation.Nullable
  public String getPersonalNumber() {
    return personalNumber;
  }

  public void setPersonalNumber(String personalNumber) {
    this.personalNumber = personalNumber;
  }


  public CompanyBoardMembersResultBoardMembersInner roleCode(String roleCode) {
    this.roleCode = roleCode;
    return this;
  }

  /**
   * 
   * @return roleCode
   */
  @javax.annotation.Nullable
  public String getRoleCode() {
    return roleCode;
  }

  public void setRoleCode(String roleCode) {
    this.roleCode = roleCode;
  }


  public CompanyBoardMembersResultBoardMembersInner roleName(String roleName) {
    this.roleName = roleName;
    return this;
  }

  /**
   * 
   * @return roleName
   */
  @javax.annotation.Nullable
  public String getRoleName() {
    return roleName;
  }

  public void setRoleName(String roleName) {
    this.roleName = roleName;
  }


  public CompanyBoardMembersResultBoardMembersInner surName(String surName) {
    this.surName = surName;
    return this;
  }

  /**
   * 
   * @return surName
   */
  @javax.annotation.Nullable
  public String getSurName() {
    return surName;
  }

  public void setSurName(String surName) {
    this.surName = surName;
  }


  public CompanyBoardMembersResultBoardMembersInner toDate(String toDate) {
    this.toDate = toDate;
    return this;
  }

  /**
   * 
   * @return toDate
   */
  @javax.annotation.Nullable
  public String getToDate() {
    return toDate;
  }

  public void setToDate(String toDate) {
    this.toDate = toDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompanyBoardMembersResultBoardMembersInner companyBoardMembersResultBoardMembersInner = (CompanyBoardMembersResultBoardMembersInner) o;
    return Objects.equals(this.boardMemberCompanyId, companyBoardMembersResultBoardMembersInner.boardMemberCompanyId) &&
        Objects.equals(this.firstName, companyBoardMembersResultBoardMembersInner.firstName) &&
        Objects.equals(this.fromDate, companyBoardMembersResultBoardMembersInner.fromDate) &&
        Objects.equals(this.fullName, companyBoardMembersResultBoardMembersInner.fullName) &&
        Objects.equals(this.givenName, companyBoardMembersResultBoardMembersInner.givenName) &&
        Objects.equals(this.middleName, companyBoardMembersResultBoardMembersInner.middleName) &&
        Objects.equals(this.personalNumber, companyBoardMembersResultBoardMembersInner.personalNumber) &&
        Objects.equals(this.roleCode, companyBoardMembersResultBoardMembersInner.roleCode) &&
        Objects.equals(this.roleName, companyBoardMembersResultBoardMembersInner.roleName) &&
        Objects.equals(this.surName, companyBoardMembersResultBoardMembersInner.surName) &&
        Objects.equals(this.toDate, companyBoardMembersResultBoardMembersInner.toDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boardMemberCompanyId, firstName, fromDate, fullName, givenName, middleName, personalNumber, roleCode, roleName, surName, toDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompanyBoardMembersResultBoardMembersInner {\n");
    sb.append("    boardMemberCompanyId: ").append(toIndentedString(boardMemberCompanyId)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    fromDate: ").append(toIndentedString(fromDate)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    givenName: ").append(toIndentedString(givenName)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    personalNumber: ").append(toIndentedString(personalNumber)).append("\n");
    sb.append("    roleCode: ").append(toIndentedString(roleCode)).append("\n");
    sb.append("    roleName: ").append(toIndentedString(roleName)).append("\n");
    sb.append("    surName: ").append(toIndentedString(surName)).append("\n");
    sb.append("    toDate: ").append(toIndentedString(toDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boardMemberCompanyId");
    openapiFields.add("firstName");
    openapiFields.add("fromDate");
    openapiFields.add("fullName");
    openapiFields.add("givenName");
    openapiFields.add("middleName");
    openapiFields.add("personalNumber");
    openapiFields.add("roleCode");
    openapiFields.add("roleName");
    openapiFields.add("surName");
    openapiFields.add("toDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompanyBoardMembersResultBoardMembersInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompanyBoardMembersResultBoardMembersInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompanyBoardMembersResultBoardMembersInner is not found in the empty JSON string", CompanyBoardMembersResultBoardMembersInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompanyBoardMembersResultBoardMembersInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompanyBoardMembersResultBoardMembersInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("boardMemberCompanyId") != null && !jsonObj.get("boardMemberCompanyId").isJsonNull()) && !jsonObj.get("boardMemberCompanyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `boardMemberCompanyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("boardMemberCompanyId").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("fromDate") != null && !jsonObj.get("fromDate").isJsonNull()) && !jsonObj.get("fromDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromDate").toString()));
      }
      if ((jsonObj.get("fullName") != null && !jsonObj.get("fullName").isJsonNull()) && !jsonObj.get("fullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullName").toString()));
      }
      if ((jsonObj.get("givenName") != null && !jsonObj.get("givenName").isJsonNull()) && !jsonObj.get("givenName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `givenName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("givenName").toString()));
      }
      if ((jsonObj.get("middleName") != null && !jsonObj.get("middleName").isJsonNull()) && !jsonObj.get("middleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `middleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("middleName").toString()));
      }
      if ((jsonObj.get("personalNumber") != null && !jsonObj.get("personalNumber").isJsonNull()) && !jsonObj.get("personalNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personalNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personalNumber").toString()));
      }
      if ((jsonObj.get("roleCode") != null && !jsonObj.get("roleCode").isJsonNull()) && !jsonObj.get("roleCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roleCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roleCode").toString()));
      }
      if ((jsonObj.get("roleName") != null && !jsonObj.get("roleName").isJsonNull()) && !jsonObj.get("roleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roleName").toString()));
      }
      if ((jsonObj.get("surName") != null && !jsonObj.get("surName").isJsonNull()) && !jsonObj.get("surName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `surName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surName").toString()));
      }
      if ((jsonObj.get("toDate") != null && !jsonObj.get("toDate").isJsonNull()) && !jsonObj.get("toDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompanyBoardMembersResultBoardMembersInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompanyBoardMembersResultBoardMembersInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompanyBoardMembersResultBoardMembersInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompanyBoardMembersResultBoardMembersInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CompanyBoardMembersResultBoardMembersInner>() {
           @Override
           public void write(JsonWriter out, CompanyBoardMembersResultBoardMembersInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompanyBoardMembersResultBoardMembersInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompanyBoardMembersResultBoardMembersInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompanyBoardMembersResultBoardMembersInner
   * @throws IOException if the JSON string is invalid with respect to CompanyBoardMembersResultBoardMembersInner
   */
  public static CompanyBoardMembersResultBoardMembersInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompanyBoardMembersResultBoardMembersInner.class);
  }

  /**
   * Convert an instance of CompanyBoardMembersResultBoardMembersInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

