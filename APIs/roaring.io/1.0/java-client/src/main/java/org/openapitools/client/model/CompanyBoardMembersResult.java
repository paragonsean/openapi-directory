/*
 * CompanyAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CompanyBoardMembersResultBoardMembersInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Roaring Apps company board members lookup. list contains all possible fields returned
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:12.861098-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompanyBoardMembersResult {
  public static final String SERIALIZED_NAME_BOARD_MEMBERS = "boardMembers";
  @SerializedName(SERIALIZED_NAME_BOARD_MEMBERS)
  private List<CompanyBoardMembersResultBoardMembersInner> boardMembers = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHANGE_DATE = "changeDate";
  @SerializedName(SERIALIZED_NAME_CHANGE_DATE)
  private String changeDate;

  public static final String SERIALIZED_NAME_COMPANY_ID = "companyId";
  @SerializedName(SERIALIZED_NAME_COMPANY_ID)
  private String companyId;

  public CompanyBoardMembersResult() {
  }

  public CompanyBoardMembersResult boardMembers(List<CompanyBoardMembersResultBoardMembersInner> boardMembers) {
    this.boardMembers = boardMembers;
    return this;
  }

  public CompanyBoardMembersResult addBoardMembersItem(CompanyBoardMembersResultBoardMembersInner boardMembersItem) {
    if (this.boardMembers == null) {
      this.boardMembers = new ArrayList<>();
    }
    this.boardMembers.add(boardMembersItem);
    return this;
  }

  /**
   * Array of board members for the requested company
   * @return boardMembers
   */
  @javax.annotation.Nullable
  public List<CompanyBoardMembersResultBoardMembersInner> getBoardMembers() {
    return boardMembers;
  }

  public void setBoardMembers(List<CompanyBoardMembersResultBoardMembersInner> boardMembers) {
    this.boardMembers = boardMembers;
  }


  public CompanyBoardMembersResult changeDate(String changeDate) {
    this.changeDate = changeDate;
    return this;
  }

  /**
   * 
   * @return changeDate
   */
  @javax.annotation.Nullable
  public String getChangeDate() {
    return changeDate;
  }

  public void setChangeDate(String changeDate) {
    this.changeDate = changeDate;
  }


  public CompanyBoardMembersResult companyId(String companyId) {
    this.companyId = companyId;
    return this;
  }

  /**
   * 
   * @return companyId
   */
  @javax.annotation.Nullable
  public String getCompanyId() {
    return companyId;
  }

  public void setCompanyId(String companyId) {
    this.companyId = companyId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompanyBoardMembersResult companyBoardMembersResult = (CompanyBoardMembersResult) o;
    return Objects.equals(this.boardMembers, companyBoardMembersResult.boardMembers) &&
        Objects.equals(this.changeDate, companyBoardMembersResult.changeDate) &&
        Objects.equals(this.companyId, companyBoardMembersResult.companyId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boardMembers, changeDate, companyId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompanyBoardMembersResult {\n");
    sb.append("    boardMembers: ").append(toIndentedString(boardMembers)).append("\n");
    sb.append("    changeDate: ").append(toIndentedString(changeDate)).append("\n");
    sb.append("    companyId: ").append(toIndentedString(companyId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boardMembers");
    openapiFields.add("changeDate");
    openapiFields.add("companyId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompanyBoardMembersResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompanyBoardMembersResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompanyBoardMembersResult is not found in the empty JSON string", CompanyBoardMembersResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompanyBoardMembersResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompanyBoardMembersResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("boardMembers") != null && !jsonObj.get("boardMembers").isJsonNull()) {
        JsonArray jsonArrayboardMembers = jsonObj.getAsJsonArray("boardMembers");
        if (jsonArrayboardMembers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("boardMembers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `boardMembers` to be an array in the JSON string but got `%s`", jsonObj.get("boardMembers").toString()));
          }

          // validate the optional field `boardMembers` (array)
          for (int i = 0; i < jsonArrayboardMembers.size(); i++) {
            CompanyBoardMembersResultBoardMembersInner.validateJsonElement(jsonArrayboardMembers.get(i));
          };
        }
      }
      if ((jsonObj.get("changeDate") != null && !jsonObj.get("changeDate").isJsonNull()) && !jsonObj.get("changeDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changeDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changeDate").toString()));
      }
      if ((jsonObj.get("companyId") != null && !jsonObj.get("companyId").isJsonNull()) && !jsonObj.get("companyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompanyBoardMembersResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompanyBoardMembersResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompanyBoardMembersResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompanyBoardMembersResult.class));

       return (TypeAdapter<T>) new TypeAdapter<CompanyBoardMembersResult>() {
           @Override
           public void write(JsonWriter out, CompanyBoardMembersResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompanyBoardMembersResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompanyBoardMembersResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompanyBoardMembersResult
   * @throws IOException if the JSON string is invalid with respect to CompanyBoardMembersResult
   */
  public static CompanyBoardMembersResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompanyBoardMembersResult.class);
  }

  /**
   * Convert an instance of CompanyBoardMembersResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

