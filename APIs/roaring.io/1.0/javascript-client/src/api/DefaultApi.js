/**
 * CompanyAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequest from '../model/BadRequest';
import CompanyBoardMembersMulti from '../model/CompanyBoardMembersMulti';
import CompanyBoardMembersResult from '../model/CompanyBoardMembersResult';
import CompanyCreditDecisionResult from '../model/CompanyCreditDecisionResult';
import CompanyEconomyOverviewMulti from '../model/CompanyEconomyOverviewMulti';
import CompanyEconomyOverviewResult from '../model/CompanyEconomyOverviewResult';
import CompanyEventRequestBody from '../model/CompanyEventRequestBody';
import CompanyEventResult from '../model/CompanyEventResult';
import CompanyLookupRequestBody from '../model/CompanyLookupRequestBody';
import CompanyOverviewMulti from '../model/CompanyOverviewMulti';
import CompanyOverviewResult from '../model/CompanyOverviewResult';
import CompanySignatoryMulti from '../model/CompanySignatoryMulti';
import CompanySignatoryResult from '../model/CompanySignatoryResult';
import NotFound from '../model/NotFound';
import ServerError from '../model/ServerError';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the companyBoardMembersGet operation.
     * @callback module:api/DefaultApi~companyBoardMembersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompanyBoardMembersResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} countryCode Country code for the company
     * @param {String} companyId Company identification for the company
     * @param {module:api/DefaultApi~companyBoardMembersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompanyBoardMembersResult}
     */
    companyBoardMembersGet(countryCode, companyId, callback) {
      let postBody = null;
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling companyBoardMembersGet");
      }
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyBoardMembersGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'countryCode': countryCode,
        'companyId': companyId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CompanyBoardMembersResult;
      return this.apiClient.callApi(
        '/company-board-members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyBoardMembersPost operation.
     * @callback module:api/DefaultApi~companyBoardMembersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompanyBoardMembersMulti} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} countryCode Country code for the company
     * @param {module:model/CompanyLookupRequestBody} body Request body with company identifiers to lookup
     * @param {module:api/DefaultApi~companyBoardMembersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompanyBoardMembersMulti}
     */
    companyBoardMembersPost(countryCode, body, callback) {
      let postBody = body;
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling companyBoardMembersPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling companyBoardMembersPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'countryCode': countryCode
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompanyBoardMembersMulti;
      return this.apiClient.callApi(
        '/company-board-members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyCreditDecisionGet operation.
     * @callback module:api/DefaultApi~companyCreditDecisionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompanyCreditDecisionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} countryCode Country code for the company
     * @param {String} companyId Company identification for the company
     * @param {String} template Template for credit decision
     * @param {module:api/DefaultApi~companyCreditDecisionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompanyCreditDecisionResult}
     */
    companyCreditDecisionGet(countryCode, companyId, template, callback) {
      let postBody = null;
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling companyCreditDecisionGet");
      }
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyCreditDecisionGet");
      }
      // verify the required parameter 'template' is set
      if (template === undefined || template === null) {
        throw new Error("Missing the required parameter 'template' when calling companyCreditDecisionGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'countryCode': countryCode,
        'companyId': companyId,
        'template': template
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CompanyCreditDecisionResult;
      return this.apiClient.callApi(
        '/company-credit-decision', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyEconomyOverviewGet operation.
     * @callback module:api/DefaultApi~companyEconomyOverviewGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompanyEconomyOverviewResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} countryCode Country code for the company
     * @param {String} companyId Company identification for the company
     * @param {module:api/DefaultApi~companyEconomyOverviewGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompanyEconomyOverviewResult}
     */
    companyEconomyOverviewGet(countryCode, companyId, callback) {
      let postBody = null;
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling companyEconomyOverviewGet");
      }
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyEconomyOverviewGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'countryCode': countryCode,
        'companyId': companyId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CompanyEconomyOverviewResult;
      return this.apiClient.callApi(
        '/company-economy-overview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyEconomyOverviewPost operation.
     * @callback module:api/DefaultApi~companyEconomyOverviewPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompanyEconomyOverviewMulti} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} countryCode Country code for the company
     * @param {module:model/CompanyLookupRequestBody} body Request body with company identifiers to lookup
     * @param {module:api/DefaultApi~companyEconomyOverviewPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompanyEconomyOverviewMulti}
     */
    companyEconomyOverviewPost(countryCode, body, callback) {
      let postBody = body;
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling companyEconomyOverviewPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling companyEconomyOverviewPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'countryCode': countryCode
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompanyEconomyOverviewMulti;
      return this.apiClient.callApi(
        '/company-economy-overview', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyEventPost operation.
     * @callback module:api/DefaultApi~companyEventPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompanyEventResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} countryCode Country code for the company
     * @param {module:model/CompanyEventRequestBody} body Request body with company identifiers to lookup
     * @param {module:api/DefaultApi~companyEventPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompanyEventResult}
     */
    companyEventPost(countryCode, body, callback) {
      let postBody = body;
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling companyEventPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling companyEventPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'countryCode': countryCode
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompanyEventResult;
      return this.apiClient.callApi(
        '/company-event', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyOverviewGet operation.
     * @callback module:api/DefaultApi~companyOverviewGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompanyOverviewResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} countryCode Country code for the company
     * @param {String} companyId Company identification for the company
     * @param {module:api/DefaultApi~companyOverviewGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompanyOverviewResult}
     */
    companyOverviewGet(countryCode, companyId, callback) {
      let postBody = null;
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling companyOverviewGet");
      }
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companyOverviewGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'countryCode': countryCode,
        'companyId': companyId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CompanyOverviewResult;
      return this.apiClient.callApi(
        '/company-overview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyOverviewPost operation.
     * @callback module:api/DefaultApi~companyOverviewPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompanyOverviewMulti} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} countryCode Country code for the company
     * @param {module:model/CompanyLookupRequestBody} body Request body with company identifiers to lookup
     * @param {module:api/DefaultApi~companyOverviewPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompanyOverviewMulti}
     */
    companyOverviewPost(countryCode, body, callback) {
      let postBody = body;
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling companyOverviewPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling companyOverviewPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'countryCode': countryCode
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompanyOverviewMulti;
      return this.apiClient.callApi(
        '/company-overview', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companySignatoryGet operation.
     * @callback module:api/DefaultApi~companySignatoryGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompanySignatoryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} countryCode Country code for the company
     * @param {String} companyId Company identification for the company
     * @param {module:api/DefaultApi~companySignatoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompanySignatoryResult}
     */
    companySignatoryGet(countryCode, companyId, callback) {
      let postBody = null;
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling companySignatoryGet");
      }
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling companySignatoryGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'countryCode': countryCode,
        'companyId': companyId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CompanySignatoryResult;
      return this.apiClient.callApi(
        '/company-signatory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companySignatoryPost operation.
     * @callback module:api/DefaultApi~companySignatoryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompanySignatoryMulti} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} countryCode Country code for the company
     * @param {module:model/CompanyLookupRequestBody} body Request body with company identifiers to lookup
     * @param {module:api/DefaultApi~companySignatoryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompanySignatoryMulti}
     */
    companySignatoryPost(countryCode, body, callback) {
      let postBody = body;
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling companySignatoryPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling companySignatoryPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'countryCode': countryCode
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompanySignatoryMulti;
      return this.apiClient.callApi(
        '/company-signatory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companySimpleSearchGet operation.
     * @callback module:api/DefaultApi~companySimpleSearchGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} countryCode Country code for the company
     * @param {Object} opts Optional parameters
     * @param {String} [companyName] Company name
     * @param {String} [town] Town
     * @param {module:api/DefaultApi~companySimpleSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    companySimpleSearchGet(countryCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling companySimpleSearchGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'countryCode': countryCode,
        'companyName': opts['companyName'],
        'town': opts['town']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/company-simple-search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
