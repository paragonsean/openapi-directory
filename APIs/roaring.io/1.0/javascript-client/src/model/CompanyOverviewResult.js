/**
 * CompanyAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CompanyOverviewResult model module.
 * @module model/CompanyOverviewResult
 * @version 1.0
 */
class CompanyOverviewResult {
    /**
     * Constructs a new <code>CompanyOverviewResult</code>.
     * Roaring Apps company overview in a lookup. list contains all possible fields returned by either of the api verb calls
     * @alias module:model/CompanyOverviewResult
     */
    constructor() { 
        
        CompanyOverviewResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CompanyOverviewResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CompanyOverviewResult} obj Optional instance to populate.
     * @return {module:model/CompanyOverviewResult} The populated <code>CompanyOverviewResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CompanyOverviewResult();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('changeDate')) {
                obj['changeDate'] = ApiClient.convertToType(data['changeDate'], 'String');
            }
            if (data.hasOwnProperty('coAddress')) {
                obj['coAddress'] = ApiClient.convertToType(data['coAddress'], 'String');
            }
            if (data.hasOwnProperty('commune')) {
                obj['commune'] = ApiClient.convertToType(data['commune'], 'String');
            }
            if (data.hasOwnProperty('companyHolder')) {
                obj['companyHolder'] = ApiClient.convertToType(data['companyHolder'], 'String');
            }
            if (data.hasOwnProperty('companyId')) {
                obj['companyId'] = ApiClient.convertToType(data['companyId'], 'String');
            }
            if (data.hasOwnProperty('companyName')) {
                obj['companyName'] = ApiClient.convertToType(data['companyName'], 'String');
            }
            if (data.hasOwnProperty('companyRegistrationDate')) {
                obj['companyRegistrationDate'] = ApiClient.convertToType(data['companyRegistrationDate'], 'String');
            }
            if (data.hasOwnProperty('county')) {
                obj['county'] = ApiClient.convertToType(data['county'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('employerContributionReg')) {
                obj['employerContributionReg'] = ApiClient.convertToType(data['employerContributionReg'], 'String');
            }
            if (data.hasOwnProperty('faxNumber')) {
                obj['faxNumber'] = ApiClient.convertToType(data['faxNumber'], 'String');
            }
            if (data.hasOwnProperty('industryCode')) {
                obj['industryCode'] = ApiClient.convertToType(data['industryCode'], 'String');
            }
            if (data.hasOwnProperty('industryText')) {
                obj['industryText'] = ApiClient.convertToType(data['industryText'], 'String');
            }
            if (data.hasOwnProperty('legalGroupCode')) {
                obj['legalGroupCode'] = ApiClient.convertToType(data['legalGroupCode'], 'String');
            }
            if (data.hasOwnProperty('legalGroupText')) {
                obj['legalGroupText'] = ApiClient.convertToType(data['legalGroupText'], 'String');
            }
            if (data.hasOwnProperty('numberCompanyUnits')) {
                obj['numberCompanyUnits'] = ApiClient.convertToType(data['numberCompanyUnits'], 'Number');
            }
            if (data.hasOwnProperty('numberEmployees')) {
                obj['numberEmployees'] = ApiClient.convertToType(data['numberEmployees'], 'String');
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
            }
            if (data.hasOwnProperty('preliminaryTaxReg')) {
                obj['preliminaryTaxReg'] = ApiClient.convertToType(data['preliminaryTaxReg'], 'String');
            }
            if (data.hasOwnProperty('severalCompanyName')) {
                obj['severalCompanyName'] = ApiClient.convertToType(data['severalCompanyName'], 'Boolean');
            }
            if (data.hasOwnProperty('statusCode')) {
                obj['statusCode'] = ApiClient.convertToType(data['statusCode'], 'String');
            }
            if (data.hasOwnProperty('statusDateFrom')) {
                obj['statusDateFrom'] = ApiClient.convertToType(data['statusDateFrom'], 'String');
            }
            if (data.hasOwnProperty('statusTextDetailed')) {
                obj['statusTextDetailed'] = ApiClient.convertToType(data['statusTextDetailed'], 'String');
            }
            if (data.hasOwnProperty('statusTextHigh')) {
                obj['statusTextHigh'] = ApiClient.convertToType(data['statusTextHigh'], 'String');
            }
            if (data.hasOwnProperty('topDirectorFunction')) {
                obj['topDirectorFunction'] = ApiClient.convertToType(data['topDirectorFunction'], 'String');
            }
            if (data.hasOwnProperty('topDirectorName')) {
                obj['topDirectorName'] = ApiClient.convertToType(data['topDirectorName'], 'String');
            }
            if (data.hasOwnProperty('town')) {
                obj['town'] = ApiClient.convertToType(data['town'], 'String');
            }
            if (data.hasOwnProperty('vatReg')) {
                obj['vatReg'] = ApiClient.convertToType(data['vatReg'], 'String');
            }
            if (data.hasOwnProperty('vepChangedDate')) {
                obj['vepChangedDate'] = ApiClient.convertToType(data['vepChangedDate'], 'String');
            }
            if (data.hasOwnProperty('visitAddress')) {
                obj['visitAddress'] = ApiClient.convertToType(data['visitAddress'], 'String');
            }
            if (data.hasOwnProperty('visitCommune')) {
                obj['visitCommune'] = ApiClient.convertToType(data['visitCommune'], 'String');
            }
            if (data.hasOwnProperty('visitCounty')) {
                obj['visitCounty'] = ApiClient.convertToType(data['visitCounty'], 'String');
            }
            if (data.hasOwnProperty('visitStreet')) {
                obj['visitStreet'] = ApiClient.convertToType(data['visitStreet'], 'String');
            }
            if (data.hasOwnProperty('visitStreetNumber')) {
                obj['visitStreetNumber'] = ApiClient.convertToType(data['visitStreetNumber'], 'String');
            }
            if (data.hasOwnProperty('visitStreetUnit')) {
                obj['visitStreetUnit'] = ApiClient.convertToType(data['visitStreetUnit'], 'String');
            }
            if (data.hasOwnProperty('visitTown')) {
                obj['visitTown'] = ApiClient.convertToType(data['visitTown'], 'String');
            }
            if (data.hasOwnProperty('visitZipCode')) {
                obj['visitZipCode'] = ApiClient.convertToType(data['visitZipCode'], 'String');
            }
            if (data.hasOwnProperty('webAddress')) {
                obj['webAddress'] = ApiClient.convertToType(data['webAddress'], 'String');
            }
            if (data.hasOwnProperty('zipCode')) {
                obj['zipCode'] = ApiClient.convertToType(data['zipCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CompanyOverviewResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CompanyOverviewResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['changeDate'] && !(typeof data['changeDate'] === 'string' || data['changeDate'] instanceof String)) {
            throw new Error("Expected the field `changeDate` to be a primitive type in the JSON string but got " + data['changeDate']);
        }
        // ensure the json data is a string
        if (data['coAddress'] && !(typeof data['coAddress'] === 'string' || data['coAddress'] instanceof String)) {
            throw new Error("Expected the field `coAddress` to be a primitive type in the JSON string but got " + data['coAddress']);
        }
        // ensure the json data is a string
        if (data['commune'] && !(typeof data['commune'] === 'string' || data['commune'] instanceof String)) {
            throw new Error("Expected the field `commune` to be a primitive type in the JSON string but got " + data['commune']);
        }
        // ensure the json data is a string
        if (data['companyHolder'] && !(typeof data['companyHolder'] === 'string' || data['companyHolder'] instanceof String)) {
            throw new Error("Expected the field `companyHolder` to be a primitive type in the JSON string but got " + data['companyHolder']);
        }
        // ensure the json data is a string
        if (data['companyId'] && !(typeof data['companyId'] === 'string' || data['companyId'] instanceof String)) {
            throw new Error("Expected the field `companyId` to be a primitive type in the JSON string but got " + data['companyId']);
        }
        // ensure the json data is a string
        if (data['companyName'] && !(typeof data['companyName'] === 'string' || data['companyName'] instanceof String)) {
            throw new Error("Expected the field `companyName` to be a primitive type in the JSON string but got " + data['companyName']);
        }
        // ensure the json data is a string
        if (data['companyRegistrationDate'] && !(typeof data['companyRegistrationDate'] === 'string' || data['companyRegistrationDate'] instanceof String)) {
            throw new Error("Expected the field `companyRegistrationDate` to be a primitive type in the JSON string but got " + data['companyRegistrationDate']);
        }
        // ensure the json data is a string
        if (data['county'] && !(typeof data['county'] === 'string' || data['county'] instanceof String)) {
            throw new Error("Expected the field `county` to be a primitive type in the JSON string but got " + data['county']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['employerContributionReg'] && !(typeof data['employerContributionReg'] === 'string' || data['employerContributionReg'] instanceof String)) {
            throw new Error("Expected the field `employerContributionReg` to be a primitive type in the JSON string but got " + data['employerContributionReg']);
        }
        // ensure the json data is a string
        if (data['faxNumber'] && !(typeof data['faxNumber'] === 'string' || data['faxNumber'] instanceof String)) {
            throw new Error("Expected the field `faxNumber` to be a primitive type in the JSON string but got " + data['faxNumber']);
        }
        // ensure the json data is a string
        if (data['industryCode'] && !(typeof data['industryCode'] === 'string' || data['industryCode'] instanceof String)) {
            throw new Error("Expected the field `industryCode` to be a primitive type in the JSON string but got " + data['industryCode']);
        }
        // ensure the json data is a string
        if (data['industryText'] && !(typeof data['industryText'] === 'string' || data['industryText'] instanceof String)) {
            throw new Error("Expected the field `industryText` to be a primitive type in the JSON string but got " + data['industryText']);
        }
        // ensure the json data is a string
        if (data['legalGroupCode'] && !(typeof data['legalGroupCode'] === 'string' || data['legalGroupCode'] instanceof String)) {
            throw new Error("Expected the field `legalGroupCode` to be a primitive type in the JSON string but got " + data['legalGroupCode']);
        }
        // ensure the json data is a string
        if (data['legalGroupText'] && !(typeof data['legalGroupText'] === 'string' || data['legalGroupText'] instanceof String)) {
            throw new Error("Expected the field `legalGroupText` to be a primitive type in the JSON string but got " + data['legalGroupText']);
        }
        // ensure the json data is a string
        if (data['numberEmployees'] && !(typeof data['numberEmployees'] === 'string' || data['numberEmployees'] instanceof String)) {
            throw new Error("Expected the field `numberEmployees` to be a primitive type in the JSON string but got " + data['numberEmployees']);
        }
        // ensure the json data is a string
        if (data['phoneNumber'] && !(typeof data['phoneNumber'] === 'string' || data['phoneNumber'] instanceof String)) {
            throw new Error("Expected the field `phoneNumber` to be a primitive type in the JSON string but got " + data['phoneNumber']);
        }
        // ensure the json data is a string
        if (data['preliminaryTaxReg'] && !(typeof data['preliminaryTaxReg'] === 'string' || data['preliminaryTaxReg'] instanceof String)) {
            throw new Error("Expected the field `preliminaryTaxReg` to be a primitive type in the JSON string but got " + data['preliminaryTaxReg']);
        }
        // ensure the json data is a string
        if (data['statusCode'] && !(typeof data['statusCode'] === 'string' || data['statusCode'] instanceof String)) {
            throw new Error("Expected the field `statusCode` to be a primitive type in the JSON string but got " + data['statusCode']);
        }
        // ensure the json data is a string
        if (data['statusDateFrom'] && !(typeof data['statusDateFrom'] === 'string' || data['statusDateFrom'] instanceof String)) {
            throw new Error("Expected the field `statusDateFrom` to be a primitive type in the JSON string but got " + data['statusDateFrom']);
        }
        // ensure the json data is a string
        if (data['statusTextDetailed'] && !(typeof data['statusTextDetailed'] === 'string' || data['statusTextDetailed'] instanceof String)) {
            throw new Error("Expected the field `statusTextDetailed` to be a primitive type in the JSON string but got " + data['statusTextDetailed']);
        }
        // ensure the json data is a string
        if (data['statusTextHigh'] && !(typeof data['statusTextHigh'] === 'string' || data['statusTextHigh'] instanceof String)) {
            throw new Error("Expected the field `statusTextHigh` to be a primitive type in the JSON string but got " + data['statusTextHigh']);
        }
        // ensure the json data is a string
        if (data['topDirectorFunction'] && !(typeof data['topDirectorFunction'] === 'string' || data['topDirectorFunction'] instanceof String)) {
            throw new Error("Expected the field `topDirectorFunction` to be a primitive type in the JSON string but got " + data['topDirectorFunction']);
        }
        // ensure the json data is a string
        if (data['topDirectorName'] && !(typeof data['topDirectorName'] === 'string' || data['topDirectorName'] instanceof String)) {
            throw new Error("Expected the field `topDirectorName` to be a primitive type in the JSON string but got " + data['topDirectorName']);
        }
        // ensure the json data is a string
        if (data['town'] && !(typeof data['town'] === 'string' || data['town'] instanceof String)) {
            throw new Error("Expected the field `town` to be a primitive type in the JSON string but got " + data['town']);
        }
        // ensure the json data is a string
        if (data['vatReg'] && !(typeof data['vatReg'] === 'string' || data['vatReg'] instanceof String)) {
            throw new Error("Expected the field `vatReg` to be a primitive type in the JSON string but got " + data['vatReg']);
        }
        // ensure the json data is a string
        if (data['vepChangedDate'] && !(typeof data['vepChangedDate'] === 'string' || data['vepChangedDate'] instanceof String)) {
            throw new Error("Expected the field `vepChangedDate` to be a primitive type in the JSON string but got " + data['vepChangedDate']);
        }
        // ensure the json data is a string
        if (data['visitAddress'] && !(typeof data['visitAddress'] === 'string' || data['visitAddress'] instanceof String)) {
            throw new Error("Expected the field `visitAddress` to be a primitive type in the JSON string but got " + data['visitAddress']);
        }
        // ensure the json data is a string
        if (data['visitCommune'] && !(typeof data['visitCommune'] === 'string' || data['visitCommune'] instanceof String)) {
            throw new Error("Expected the field `visitCommune` to be a primitive type in the JSON string but got " + data['visitCommune']);
        }
        // ensure the json data is a string
        if (data['visitCounty'] && !(typeof data['visitCounty'] === 'string' || data['visitCounty'] instanceof String)) {
            throw new Error("Expected the field `visitCounty` to be a primitive type in the JSON string but got " + data['visitCounty']);
        }
        // ensure the json data is a string
        if (data['visitStreet'] && !(typeof data['visitStreet'] === 'string' || data['visitStreet'] instanceof String)) {
            throw new Error("Expected the field `visitStreet` to be a primitive type in the JSON string but got " + data['visitStreet']);
        }
        // ensure the json data is a string
        if (data['visitStreetNumber'] && !(typeof data['visitStreetNumber'] === 'string' || data['visitStreetNumber'] instanceof String)) {
            throw new Error("Expected the field `visitStreetNumber` to be a primitive type in the JSON string but got " + data['visitStreetNumber']);
        }
        // ensure the json data is a string
        if (data['visitStreetUnit'] && !(typeof data['visitStreetUnit'] === 'string' || data['visitStreetUnit'] instanceof String)) {
            throw new Error("Expected the field `visitStreetUnit` to be a primitive type in the JSON string but got " + data['visitStreetUnit']);
        }
        // ensure the json data is a string
        if (data['visitTown'] && !(typeof data['visitTown'] === 'string' || data['visitTown'] instanceof String)) {
            throw new Error("Expected the field `visitTown` to be a primitive type in the JSON string but got " + data['visitTown']);
        }
        // ensure the json data is a string
        if (data['visitZipCode'] && !(typeof data['visitZipCode'] === 'string' || data['visitZipCode'] instanceof String)) {
            throw new Error("Expected the field `visitZipCode` to be a primitive type in the JSON string but got " + data['visitZipCode']);
        }
        // ensure the json data is a string
        if (data['webAddress'] && !(typeof data['webAddress'] === 'string' || data['webAddress'] instanceof String)) {
            throw new Error("Expected the field `webAddress` to be a primitive type in the JSON string but got " + data['webAddress']);
        }
        // ensure the json data is a string
        if (data['zipCode'] && !(typeof data['zipCode'] === 'string' || data['zipCode'] instanceof String)) {
            throw new Error("Expected the field `zipCode` to be a primitive type in the JSON string but got " + data['zipCode']);
        }

        return true;
    }


}



/**
 * Postal address, street/P.O BOX
 * @member {String} address
 */
CompanyOverviewResult.prototype['address'] = undefined;

/**
 * Date for when the record was last changed 
 * @member {String} changeDate
 */
CompanyOverviewResult.prototype['changeDate'] = undefined;

/**
 * Postal address, C/O address
 * @member {String} coAddress
 */
CompanyOverviewResult.prototype['coAddress'] = undefined;

/**
 * Postal address, commune name
 * @member {String} commune
 */
CompanyOverviewResult.prototype['commune'] = undefined;

/**
 * Name of company holder
 * @member {String} companyHolder
 */
CompanyOverviewResult.prototype['companyHolder'] = undefined;

/**
 * Company identifier (company registration number / organization number)
 * @member {String} companyId
 */
CompanyOverviewResult.prototype['companyId'] = undefined;

/**
 * Company name
 * @member {String} companyName
 */
CompanyOverviewResult.prototype['companyName'] = undefined;

/**
 * Company registration date
 * @member {String} companyRegistrationDate
 */
CompanyOverviewResult.prototype['companyRegistrationDate'] = undefined;

/**
 * Postal address, county
 * @member {String} county
 */
CompanyOverviewResult.prototype['county'] = undefined;

/**
 * Email address
 * @member {String} email
 */
CompanyOverviewResult.prototype['email'] = undefined;

/**
 * Company is registererd for employer contribution tax (Arb.avg Sweden)
 * @member {String} employerContributionReg
 */
CompanyOverviewResult.prototype['employerContributionReg'] = undefined;

/**
 * Fax number
 * @member {String} faxNumber
 */
CompanyOverviewResult.prototype['faxNumber'] = undefined;

/**
 * Company main industry, NACE code
 * @member {String} industryCode
 */
CompanyOverviewResult.prototype['industryCode'] = undefined;

/**
 * Company main industry, NACE text
 * @member {String} industryText
 */
CompanyOverviewResult.prototype['industryText'] = undefined;

/**
 * Company type code
 * @member {String} legalGroupCode
 */
CompanyOverviewResult.prototype['legalGroupCode'] = undefined;

/**
 * Company type text
 * @member {String} legalGroupText
 */
CompanyOverviewResult.prototype['legalGroupText'] = undefined;

/**
 * Number of company units/workplaces
 * @member {Number} numberCompanyUnits
 */
CompanyOverviewResult.prototype['numberCompanyUnits'] = undefined;

/**
 * Number of employees (pcs)
 * @member {String} numberEmployees
 */
CompanyOverviewResult.prototype['numberEmployees'] = undefined;

/**
 * Telephone number
 * @member {String} phoneNumber
 */
CompanyOverviewResult.prototype['phoneNumber'] = undefined;

/**
 * Company is approved for preliminary tax (F-skatt Sweden)
 * @member {String} preliminaryTaxReg
 */
CompanyOverviewResult.prototype['preliminaryTaxReg'] = undefined;

/**
 * Indicates if the company have more than one active name
 * @member {Boolean} severalCompanyName
 */
CompanyOverviewResult.prototype['severalCompanyName'] = undefined;

/**
 * Company status code
 * @member {String} statusCode
 */
CompanyOverviewResult.prototype['statusCode'] = undefined;

/**
 * Company status date from
 * @member {String} statusDateFrom
 */
CompanyOverviewResult.prototype['statusDateFrom'] = undefined;

/**
 * Company status text detailed
 * @member {String} statusTextDetailed
 */
CompanyOverviewResult.prototype['statusTextDetailed'] = undefined;

/**
 * Company status text
 * @member {String} statusTextHigh
 */
CompanyOverviewResult.prototype['statusTextHigh'] = undefined;

/**
 * Top director's function
 * @member {String} topDirectorFunction
 */
CompanyOverviewResult.prototype['topDirectorFunction'] = undefined;

/**
 * Top director's name
 * @member {String} topDirectorName
 */
CompanyOverviewResult.prototype['topDirectorName'] = undefined;

/**
 * Postal address, town
 * @member {String} town
 */
CompanyOverviewResult.prototype['town'] = undefined;

/**
 * Company is registered for VAT (MOMS Sweden)
 * @member {String} vatReg
 */
CompanyOverviewResult.prototype['vatReg'] = undefined;

/**
 * Show the latest date any of preliminaryTaxReg, employerContributionReg or vatReg has had a change
 * @member {String} vepChangedDate
 */
CompanyOverviewResult.prototype['vepChangedDate'] = undefined;

/**
 * Visiting address, street name, street number and unit
 * @member {String} visitAddress
 */
CompanyOverviewResult.prototype['visitAddress'] = undefined;

/**
 * Visiting address, commune
 * @member {String} visitCommune
 */
CompanyOverviewResult.prototype['visitCommune'] = undefined;

/**
 * Visiting address, county
 * @member {String} visitCounty
 */
CompanyOverviewResult.prototype['visitCounty'] = undefined;

/**
 * Visiting address, street
 * @member {String} visitStreet
 */
CompanyOverviewResult.prototype['visitStreet'] = undefined;

/**
 * Visiting address, number
 * @member {String} visitStreetNumber
 */
CompanyOverviewResult.prototype['visitStreetNumber'] = undefined;

/**
 * Visiting address, unit
 * @member {String} visitStreetUnit
 */
CompanyOverviewResult.prototype['visitStreetUnit'] = undefined;

/**
 * Visiting address, town
 * @member {String} visitTown
 */
CompanyOverviewResult.prototype['visitTown'] = undefined;

/**
 * Visiting address, zip code
 * @member {String} visitZipCode
 */
CompanyOverviewResult.prototype['visitZipCode'] = undefined;

/**
 * Web address
 * @member {String} webAddress
 */
CompanyOverviewResult.prototype['webAddress'] = undefined;

/**
 * Postal address, zipcode
 * @member {String} zipCode
 */
CompanyOverviewResult.prototype['zipCode'] = undefined;






export default CompanyOverviewResult;

