/**
 * EasyPDFServer
 * API for converting HTML to PDF.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_make_pdf_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_make_pdf_post_request::OAI_make_pdf_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_make_pdf_post_request::OAI_make_pdf_post_request() {
    this->initializeModel();
}

OAI_make_pdf_post_request::~OAI_make_pdf_post_request() {}

void OAI_make_pdf_post_request::initializeModel() {

    m_html_isSet = false;
    m_html_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAI_make_pdf_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_make_pdf_post_request::fromJsonObject(QJsonObject json) {

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAI_make_pdf_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_make_pdf_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_html_isSet) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAI_make_pdf_post_request::getHtml() const {
    return m_html;
}
void OAI_make_pdf_post_request::setHtml(const QString &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAI_make_pdf_post_request::is_html_Set() const{
    return m_html_isSet;
}

bool OAI_make_pdf_post_request::is_html_Valid() const{
    return m_html_isValid;
}

QString OAI_make_pdf_post_request::getKey() const {
    return m_key;
}
void OAI_make_pdf_post_request::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAI_make_pdf_post_request::is_key_Set() const{
    return m_key_isSet;
}

bool OAI_make_pdf_post_request::is_key_Valid() const{
    return m_key_isValid;
}

QString OAI_make_pdf_post_request::getUrl() const {
    return m_url;
}
void OAI_make_pdf_post_request::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAI_make_pdf_post_request::is_url_Set() const{
    return m_url_isSet;
}

bool OAI_make_pdf_post_request::is_url_Valid() const{
    return m_url_isValid;
}

bool OAI_make_pdf_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_make_pdf_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_isValid && true;
}

} // namespace OpenAPI
