/*
 * JSON storage
 * JSON storage API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateStatus;
import org.openapitools.client.model.DeleteStatus;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.UpdateStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for binIdDelete
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of the deletion </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Wrong security key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bin not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Id must be specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call binIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bin/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call binIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling binIdDelete(Async)");
        }

        return binIdDeleteCall(id, _callback);

    }

    /**
     * Delete a json bin
     * 
     * @param id  (required)
     * @return DeleteStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of the deletion </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Wrong security key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bin not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Id must be specified </td><td>  -  </td></tr>
     </table>
     */
    public DeleteStatus binIdDelete(String id) throws ApiException {
        ApiResponse<DeleteStatus> localVarResp = binIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete a json bin
     * 
     * @param id  (required)
     * @return ApiResponse&lt;DeleteStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of the deletion </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Wrong security key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bin not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Id must be specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteStatus> binIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = binIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeleteStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a json bin (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status of the deletion </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Wrong security key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bin not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Id must be specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call binIdDeleteAsync(String id, final ApiCallback<DeleteStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = binIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeleteStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for binIdGet
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bin data </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bin not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Id must be specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call binIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bin/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call binIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling binIdGet(Async)");
        }

        return binIdGetCall(id, _callback);

    }

    /**
     * Return a json bin
     * 
     * @param id  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bin data </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bin not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Id must be specified </td><td>  -  </td></tr>
     </table>
     */
    public Object binIdGet(String id) throws ApiException {
        ApiResponse<Object> localVarResp = binIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Return a json bin
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bin data </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bin not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Id must be specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> binIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = binIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a json bin (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bin data </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bin not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Id must be specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call binIdGetAsync(String id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = binIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for binIdPatch
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bin data updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Wrong security key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bin not found </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> JSON data too large </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Id must be specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call binIdPatchCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bin/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call binIdPatchValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling binIdPatch(Async)");
        }

        return binIdPatchCall(id, _callback);

    }

    /**
     * Partially update a json bin with JSON Merge Patch
     * 
     * @param id  (required)
     * @return UpdateStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bin data updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Wrong security key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bin not found </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> JSON data too large </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Id must be specified </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStatus binIdPatch(String id) throws ApiException {
        ApiResponse<UpdateStatus> localVarResp = binIdPatchWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Partially update a json bin with JSON Merge Patch
     * 
     * @param id  (required)
     * @return ApiResponse&lt;UpdateStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bin data updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Wrong security key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bin not found </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> JSON data too large </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Id must be specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateStatus> binIdPatchWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = binIdPatchValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<UpdateStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Partially update a json bin with JSON Merge Patch (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bin data updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Wrong security key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bin not found </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> JSON data too large </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Id must be specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call binIdPatchAsync(String id, final ApiCallback<UpdateStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = binIdPatchValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<UpdateStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for binIdPut
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bin data updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Wrong security key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bin not found </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> JSON data too large </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Id must be specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call binIdPutCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bin/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call binIdPutValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling binIdPut(Async)");
        }

        return binIdPutCall(id, _callback);

    }

    /**
     * Update a json bin
     * 
     * @param id  (required)
     * @return UpdateStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bin data updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Wrong security key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bin not found </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> JSON data too large </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Id must be specified </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStatus binIdPut(String id) throws ApiException {
        ApiResponse<UpdateStatus> localVarResp = binIdPutWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Update a json bin
     * 
     * @param id  (required)
     * @return ApiResponse&lt;UpdateStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bin data updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Wrong security key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bin not found </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> JSON data too large </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Id must be specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateStatus> binIdPutWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = binIdPutValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<UpdateStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a json bin (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bin data updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Wrong security key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Bin not found </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> JSON data too large </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Id must be specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call binIdPutAsync(String id, final ApiCallback<UpdateStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = binIdPutValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<UpdateStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for binPost
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bin information (id and URL) </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> &#39;JSON data too large&#39; or &#39;Security key is too large&#39; </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Security key is required for private bin </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call binPostCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call binPostValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return binPostCall(_callback);

    }

    /**
     * Create a json bin
     * 
     * @return CreateStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bin information (id and URL) </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> &#39;JSON data too large&#39; or &#39;Security key is too large&#39; </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Security key is required for private bin </td><td>  -  </td></tr>
     </table>
     */
    public CreateStatus binPost() throws ApiException {
        ApiResponse<CreateStatus> localVarResp = binPostWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Create a json bin
     * 
     * @return ApiResponse&lt;CreateStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bin information (id and URL) </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> &#39;JSON data too large&#39; or &#39;Security key is too large&#39; </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Security key is required for private bin </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateStatus> binPostWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = binPostValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CreateStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a json bin (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bin information (id and URL) </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> &#39;JSON data too large&#39; or &#39;Security key is too large&#39; </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Security key is required for private bin </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call binPostAsync(final ApiCallback<CreateStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = binPostValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CreateStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
