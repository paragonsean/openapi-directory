/**
 * JSON storage
 * JSON storage API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateStatus from '../model/CreateStatus';
import DeleteStatus from '../model/DeleteStatus';
import Error from '../model/Error';
import UpdateStatus from '../model/UpdateStatus';

/**
* Default service.
* @module api/DefaultApi
* @version 0.1
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the binIdDelete operation.
     * @callback module:api/DefaultApi~binIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a json bin
     * @param {String} id 
     * @param {module:api/DefaultApi~binIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteStatus}
     */
    binIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling binIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteStatus;
      return this.apiClient.callApi(
        '/bin/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the binIdGet operation.
     * @callback module:api/DefaultApi~binIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a json bin
     * @param {String} id 
     * @param {module:api/DefaultApi~binIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    binIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling binIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/bin/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the binIdPatch operation.
     * @callback module:api/DefaultApi~binIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partially update a json bin with JSON Merge Patch
     * @param {String} id 
     * @param {module:api/DefaultApi~binIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateStatus}
     */
    binIdPatch(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling binIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UpdateStatus;
      return this.apiClient.callApi(
        '/bin/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the binIdPut operation.
     * @callback module:api/DefaultApi~binIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a json bin
     * @param {String} id 
     * @param {module:api/DefaultApi~binIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateStatus}
     */
    binIdPut(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling binIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UpdateStatus;
      return this.apiClient.callApi(
        '/bin/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the binPost operation.
     * @callback module:api/DefaultApi~binPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a json bin
     * @param {module:api/DefaultApi~binPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateStatus}
     */
    binPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateStatus;
      return this.apiClient.callApi(
        '/bin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
