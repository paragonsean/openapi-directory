/**
 * JSON storage
 * JSON storage API
 *
 * The version of the OpenAPI document: 0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateStatus.h"
#include "OAIDeleteStatus.h"
#include "OAIError.h"
#include "OAIObject.h"
#include "OAIUpdateStatus.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void binIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void binIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void binIdPatch(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void binIdPut(const QString &id);


    virtual void binPost();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void binIdDeleteCallback(OAIHttpRequestWorker *worker);
    void binIdGetCallback(OAIHttpRequestWorker *worker);
    void binIdPatchCallback(OAIHttpRequestWorker *worker);
    void binIdPutCallback(OAIHttpRequestWorker *worker);
    void binPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void binIdDeleteSignal(OAIDeleteStatus summary);
    void binIdGetSignal(OAIObject summary);
    void binIdPatchSignal(OAIUpdateStatus summary);
    void binIdPutSignal(OAIUpdateStatus summary);
    void binPostSignal(OAICreateStatus summary);


    void binIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIDeleteStatus summary);
    void binIdGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void binIdPatchSignalFull(OAIHttpRequestWorker *worker, OAIUpdateStatus summary);
    void binIdPutSignalFull(OAIHttpRequestWorker *worker, OAIUpdateStatus summary);
    void binPostSignalFull(OAIHttpRequestWorker *worker, OAICreateStatus summary);

    Q_DECL_DEPRECATED_X("Use binIdDeleteSignalError() instead")
    void binIdDeleteSignalE(OAIDeleteStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void binIdDeleteSignalError(OAIDeleteStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use binIdGetSignalError() instead")
    void binIdGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void binIdGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use binIdPatchSignalError() instead")
    void binIdPatchSignalE(OAIUpdateStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void binIdPatchSignalError(OAIUpdateStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use binIdPutSignalError() instead")
    void binIdPutSignalE(OAIUpdateStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void binIdPutSignalError(OAIUpdateStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use binPostSignalError() instead")
    void binPostSignalE(OAICreateStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void binPostSignalError(OAICreateStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use binIdDeleteSignalErrorFull() instead")
    void binIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void binIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use binIdGetSignalErrorFull() instead")
    void binIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void binIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use binIdPatchSignalErrorFull() instead")
    void binIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void binIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use binIdPutSignalErrorFull() instead")
    void binIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void binIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use binPostSignalErrorFull() instead")
    void binPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void binPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
