/**
 * elmah.io API
 * This is the public REST API for elmah.io. All of the integrations communicates with elmah.io through this API.<br/><br/>For additional help getting started with the API, visit the following help articles:<br/><ul><li>[Using the REST API](https://docs.elmah.io/using-the-rest-api/)</li><li>[Where is my API key?](https://docs.elmah.io/where-is-my-api-key/)</li><li>[Where is my log ID?](https://docs.elmah.io/where-is-my-log-id/)</li><li>[How to configure API key permissions](https://docs.elmah.io/how-to-configure-api-key-permissions/)</li></ul>
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMessagesApi_H
#define OAI_OAIMessagesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateBulkMessageResult.h"
#include "OAICreateMessage.h"
#include "OAICreateMessageResult.h"
#include "OAIMessage.h"
#include "OAIMessagesResult.h"
#include "OAISearch.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMessagesApi : public QObject {
    Q_OBJECT

public:
    OAIMessagesApi(const int timeOut = 0);
    ~OAIMessagesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  log_id QString [required]
    * @param[in]  oai_create_message OAICreateMessage [optional]
    */
    virtual void messagesCreate(const QString &log_id, const ::OpenAPI::OptionalParam<OAICreateMessage> &oai_create_message = ::OpenAPI::OptionalParam<OAICreateMessage>());

    /**
    * @param[in]  log_id QString [required]
    * @param[in]  oai_create_message QList<OAICreateMessage> [optional]
    */
    virtual void messagesCreateBulk(const QString &log_id, const ::OpenAPI::OptionalParam<QList<OAICreateMessage>> &oai_create_message = ::OpenAPI::OptionalParam<QList<OAICreateMessage>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  log_id QString [required]
    */
    virtual void messagesDelete(const QString &id, const QString &log_id);

    /**
    * @param[in]  log_id QString [required]
    * @param[in]  oai_search OAISearch [optional]
    */
    virtual void messagesDeleteAll(const QString &log_id, const ::OpenAPI::OptionalParam<OAISearch> &oai_search = ::OpenAPI::OptionalParam<OAISearch>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  log_id QString [required]
    * @param[in]  mark_all_as_fixed bool [optional]
    */
    virtual void messagesFix(const QString &id, const QString &log_id, const ::OpenAPI::OptionalParam<bool> &mark_all_as_fixed = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  log_id QString [required]
    * @param[in]  oai_search OAISearch [optional]
    */
    virtual void messagesFixAll(const QString &log_id, const ::OpenAPI::OptionalParam<OAISearch> &oai_search = ::OpenAPI::OptionalParam<OAISearch>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  log_id QString [required]
    */
    virtual void messagesGet(const QString &id, const QString &log_id);

    /**
    * @param[in]  log_id QString [required]
    * @param[in]  page_index qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  query QString [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    * @param[in]  include_headers bool [optional]
    */
    virtual void messagesGetAll(const QString &log_id, const ::OpenAPI::OptionalParam<qint32> &page_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &include_headers = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  log_id QString [required]
    */
    virtual void messagesHide(const QString &id, const QString &log_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void messagesCreateCallback(OAIHttpRequestWorker *worker);
    void messagesCreateBulkCallback(OAIHttpRequestWorker *worker);
    void messagesDeleteCallback(OAIHttpRequestWorker *worker);
    void messagesDeleteAllCallback(OAIHttpRequestWorker *worker);
    void messagesFixCallback(OAIHttpRequestWorker *worker);
    void messagesFixAllCallback(OAIHttpRequestWorker *worker);
    void messagesGetCallback(OAIHttpRequestWorker *worker);
    void messagesGetAllCallback(OAIHttpRequestWorker *worker);
    void messagesHideCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void messagesCreateSignal(OAICreateMessageResult summary);
    void messagesCreateBulkSignal(QList<OAICreateBulkMessageResult> summary);
    void messagesDeleteSignal();
    void messagesDeleteAllSignal();
    void messagesFixSignal();
    void messagesFixAllSignal();
    void messagesGetSignal(OAIMessage summary);
    void messagesGetAllSignal(OAIMessagesResult summary);
    void messagesHideSignal();


    void messagesCreateSignalFull(OAIHttpRequestWorker *worker, OAICreateMessageResult summary);
    void messagesCreateBulkSignalFull(OAIHttpRequestWorker *worker, QList<OAICreateBulkMessageResult> summary);
    void messagesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void messagesDeleteAllSignalFull(OAIHttpRequestWorker *worker);
    void messagesFixSignalFull(OAIHttpRequestWorker *worker);
    void messagesFixAllSignalFull(OAIHttpRequestWorker *worker);
    void messagesGetSignalFull(OAIHttpRequestWorker *worker, OAIMessage summary);
    void messagesGetAllSignalFull(OAIHttpRequestWorker *worker, OAIMessagesResult summary);
    void messagesHideSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use messagesCreateSignalError() instead")
    void messagesCreateSignalE(OAICreateMessageResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesCreateSignalError(OAICreateMessageResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesCreateBulkSignalError() instead")
    void messagesCreateBulkSignalE(QList<OAICreateBulkMessageResult> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesCreateBulkSignalError(QList<OAICreateBulkMessageResult> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesDeleteSignalError() instead")
    void messagesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void messagesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesDeleteAllSignalError() instead")
    void messagesDeleteAllSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void messagesDeleteAllSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesFixSignalError() instead")
    void messagesFixSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void messagesFixSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesFixAllSignalError() instead")
    void messagesFixAllSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void messagesFixAllSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesGetSignalError() instead")
    void messagesGetSignalE(OAIMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesGetSignalError(OAIMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesGetAllSignalError() instead")
    void messagesGetAllSignalE(OAIMessagesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesGetAllSignalError(OAIMessagesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesHideSignalError() instead")
    void messagesHideSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void messagesHideSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use messagesCreateSignalErrorFull() instead")
    void messagesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesCreateBulkSignalErrorFull() instead")
    void messagesCreateBulkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesCreateBulkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesDeleteSignalErrorFull() instead")
    void messagesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesDeleteAllSignalErrorFull() instead")
    void messagesDeleteAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesDeleteAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesFixSignalErrorFull() instead")
    void messagesFixSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesFixSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesFixAllSignalErrorFull() instead")
    void messagesFixAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesFixAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesGetSignalErrorFull() instead")
    void messagesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesGetAllSignalErrorFull() instead")
    void messagesGetAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesGetAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesHideSignalErrorFull() instead")
    void messagesHideSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesHideSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
