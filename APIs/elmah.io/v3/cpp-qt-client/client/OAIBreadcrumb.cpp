/**
 * elmah.io API
 * This is the public REST API for elmah.io. All of the integrations communicates with elmah.io through this API.<br/><br/>For additional help getting started with the API, visit the following help articles:<br/><ul><li>[Using the REST API](https://docs.elmah.io/using-the-rest-api/)</li><li>[Where is my API key?](https://docs.elmah.io/where-is-my-api-key/)</li><li>[Where is my log ID?](https://docs.elmah.io/where-is-my-log-id/)</li><li>[How to configure API key permissions](https://docs.elmah.io/how-to-configure-api-key-permissions/)</li></ul>
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBreadcrumb.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBreadcrumb::OAIBreadcrumb(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBreadcrumb::OAIBreadcrumb() {
    this->initializeModel();
}

OAIBreadcrumb::~OAIBreadcrumb() {}

void OAIBreadcrumb::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_date_time_isSet = false;
    m_date_time_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;
}

void OAIBreadcrumb::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBreadcrumb::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_date_time_isValid = ::OpenAPI::fromJsonValue(m_date_time, json[QString("dateTime")]);
    m_date_time_isSet = !json[QString("dateTime")].isNull() && m_date_time_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;
}

QString OAIBreadcrumb::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBreadcrumb::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_date_time_isSet) {
        obj.insert(QString("dateTime"), ::OpenAPI::toJsonValue(m_date_time));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    return obj;
}

QString OAIBreadcrumb::getAction() const {
    return m_action;
}
void OAIBreadcrumb::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIBreadcrumb::is_action_Set() const{
    return m_action_isSet;
}

bool OAIBreadcrumb::is_action_Valid() const{
    return m_action_isValid;
}

QDateTime OAIBreadcrumb::getDateTime() const {
    return m_date_time;
}
void OAIBreadcrumb::setDateTime(const QDateTime &date_time) {
    m_date_time = date_time;
    m_date_time_isSet = true;
}

bool OAIBreadcrumb::is_date_time_Set() const{
    return m_date_time_isSet;
}

bool OAIBreadcrumb::is_date_time_Valid() const{
    return m_date_time_isValid;
}

QString OAIBreadcrumb::getMessage() const {
    return m_message;
}
void OAIBreadcrumb::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIBreadcrumb::is_message_Set() const{
    return m_message_isSet;
}

bool OAIBreadcrumb::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIBreadcrumb::getSeverity() const {
    return m_severity;
}
void OAIBreadcrumb::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIBreadcrumb::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIBreadcrumb::is_severity_Valid() const{
    return m_severity_isValid;
}

bool OAIBreadcrumb::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBreadcrumb::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
