/**
 * elmah.io API
 * This is the public REST API for elmah.io. All of the integrations communicates with elmah.io through this API.<br/><br/>For additional help getting started with the API, visit the following help articles:<br/><ul><li>[Using the REST API](https://docs.elmah.io/using-the-rest-api/)</li><li>[Where is my API key?](https://docs.elmah.io/where-is-my-api-key/)</li><li>[Where is my log ID?](https://docs.elmah.io/where-is-my-log-id/)</li><li>[How to configure API key permissions](https://docs.elmah.io/how-to-configure-api-key-permissions/)</li></ul>
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessagesResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessagesResult::OAIMessagesResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessagesResult::OAIMessagesResult() {
    this->initializeModel();
}

OAIMessagesResult::~OAIMessagesResult() {}

void OAIMessagesResult::initializeModel() {

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIMessagesResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessagesResult::fromJsonObject(QJsonObject json) {

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIMessagesResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessagesResult::asJsonObject() const {
    QJsonObject obj;
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

QList<OAIMessageOverview> OAIMessagesResult::getMessages() const {
    return m_messages;
}
void OAIMessagesResult::setMessages(const QList<OAIMessageOverview> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAIMessagesResult::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIMessagesResult::is_messages_Valid() const{
    return m_messages_isValid;
}

qint32 OAIMessagesResult::getTotal() const {
    return m_total;
}
void OAIMessagesResult::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIMessagesResult::is_total_Set() const{
    return m_total_isSet;
}

bool OAIMessagesResult::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIMessagesResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessagesResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
