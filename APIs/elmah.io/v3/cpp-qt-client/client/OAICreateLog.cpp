/**
 * elmah.io API
 * This is the public REST API for elmah.io. All of the integrations communicates with elmah.io through this API.<br/><br/>For additional help getting started with the API, visit the following help articles:<br/><ul><li>[Using the REST API](https://docs.elmah.io/using-the-rest-api/)</li><li>[Where is my API key?](https://docs.elmah.io/where-is-my-api-key/)</li><li>[Where is my log ID?](https://docs.elmah.io/where-is-my-log-id/)</li><li>[How to configure API key permissions](https://docs.elmah.io/how-to-configure-api-key-permissions/)</li></ul>
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLog.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLog::OAICreateLog(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLog::OAICreateLog() {
    this->initializeModel();
}

OAICreateLog::~OAICreateLog() {}

void OAICreateLog::initializeModel() {

    m_color_isSet = false;
    m_color_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_environment_name_isSet = false;
    m_environment_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAICreateLog::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLog::fromJsonObject(QJsonObject json) {

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_environment_name_isValid = ::OpenAPI::fromJsonValue(m_environment_name, json[QString("environmentName")]);
    m_environment_name_isSet = !json[QString("environmentName")].isNull() && m_environment_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAICreateLog::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLog::asJsonObject() const {
    QJsonObject obj;
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_environment_name_isSet) {
        obj.insert(QString("environmentName"), ::OpenAPI::toJsonValue(m_environment_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAICreateLog::getColor() const {
    return m_color;
}
void OAICreateLog::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAICreateLog::is_color_Set() const{
    return m_color_isSet;
}

bool OAICreateLog::is_color_Valid() const{
    return m_color_isValid;
}

bool OAICreateLog::isDisabled() const {
    return m_disabled;
}
void OAICreateLog::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAICreateLog::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAICreateLog::is_disabled_Valid() const{
    return m_disabled_isValid;
}

QString OAICreateLog::getEnvironmentName() const {
    return m_environment_name;
}
void OAICreateLog::setEnvironmentName(const QString &environment_name) {
    m_environment_name = environment_name;
    m_environment_name_isSet = true;
}

bool OAICreateLog::is_environment_name_Set() const{
    return m_environment_name_isSet;
}

bool OAICreateLog::is_environment_name_Valid() const{
    return m_environment_name_isValid;
}

QString OAICreateLog::getName() const {
    return m_name;
}
void OAICreateLog::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateLog::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateLog::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICreateLog::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLog::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
