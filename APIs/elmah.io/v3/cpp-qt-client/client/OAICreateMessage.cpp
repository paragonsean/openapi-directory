/**
 * elmah.io API
 * This is the public REST API for elmah.io. All of the integrations communicates with elmah.io through this API.<br/><br/>For additional help getting started with the API, visit the following help articles:<br/><ul><li>[Using the REST API](https://docs.elmah.io/using-the-rest-api/)</li><li>[Where is my API key?](https://docs.elmah.io/where-is-my-api-key/)</li><li>[Where is my log ID?](https://docs.elmah.io/where-is-my-log-id/)</li><li>[How to configure API key permissions](https://docs.elmah.io/how-to-configure-api-key-permissions/)</li></ul>
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMessage::OAICreateMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMessage::OAICreateMessage() {
    this->initializeModel();
}

OAICreateMessage::~OAICreateMessage() {}

void OAICreateMessage::initializeModel() {

    m_application_isSet = false;
    m_application_isValid = false;

    m_breadcrumbs_isSet = false;
    m_breadcrumbs_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_cookies_isSet = false;
    m_cookies_isValid = false;

    m_correlation_id_isSet = false;
    m_correlation_id_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_date_time_isSet = false;
    m_date_time_isValid = false;

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_form_isSet = false;
    m_form_isValid = false;

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_query_string_isSet = false;
    m_query_string_isValid = false;

    m_server_variables_isSet = false;
    m_server_variables_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_title_template_isSet = false;
    m_title_template_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAICreateMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMessage::fromJsonObject(QJsonObject json) {

    m_application_isValid = ::OpenAPI::fromJsonValue(m_application, json[QString("application")]);
    m_application_isSet = !json[QString("application")].isNull() && m_application_isValid;

    m_breadcrumbs_isValid = ::OpenAPI::fromJsonValue(m_breadcrumbs, json[QString("breadcrumbs")]);
    m_breadcrumbs_isSet = !json[QString("breadcrumbs")].isNull() && m_breadcrumbs_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_cookies_isValid = ::OpenAPI::fromJsonValue(m_cookies, json[QString("cookies")]);
    m_cookies_isSet = !json[QString("cookies")].isNull() && m_cookies_isValid;

    m_correlation_id_isValid = ::OpenAPI::fromJsonValue(m_correlation_id, json[QString("correlationId")]);
    m_correlation_id_isSet = !json[QString("correlationId")].isNull() && m_correlation_id_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_date_time_isValid = ::OpenAPI::fromJsonValue(m_date_time, json[QString("dateTime")]);
    m_date_time_isSet = !json[QString("dateTime")].isNull() && m_date_time_isValid;

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_form_isValid = ::OpenAPI::fromJsonValue(m_form, json[QString("form")]);
    m_form_isSet = !json[QString("form")].isNull() && m_form_isValid;

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_query_string_isValid = ::OpenAPI::fromJsonValue(m_query_string, json[QString("queryString")]);
    m_query_string_isSet = !json[QString("queryString")].isNull() && m_query_string_isValid;

    m_server_variables_isValid = ::OpenAPI::fromJsonValue(m_server_variables, json[QString("serverVariables")]);
    m_server_variables_isSet = !json[QString("serverVariables")].isNull() && m_server_variables_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_title_template_isValid = ::OpenAPI::fromJsonValue(m_title_template, json[QString("titleTemplate")]);
    m_title_template_isSet = !json[QString("titleTemplate")].isNull() && m_title_template_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAICreateMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_application_isSet) {
        obj.insert(QString("application"), ::OpenAPI::toJsonValue(m_application));
    }
    if (m_breadcrumbs.size() > 0) {
        obj.insert(QString("breadcrumbs"), ::OpenAPI::toJsonValue(m_breadcrumbs));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_cookies.size() > 0) {
        obj.insert(QString("cookies"), ::OpenAPI::toJsonValue(m_cookies));
    }
    if (m_correlation_id_isSet) {
        obj.insert(QString("correlationId"), ::OpenAPI::toJsonValue(m_correlation_id));
    }
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_date_time_isSet) {
        obj.insert(QString("dateTime"), ::OpenAPI::toJsonValue(m_date_time));
    }
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_form.size() > 0) {
        obj.insert(QString("form"), ::OpenAPI::toJsonValue(m_form));
    }
    if (m_hostname_isSet) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_query_string.size() > 0) {
        obj.insert(QString("queryString"), ::OpenAPI::toJsonValue(m_query_string));
    }
    if (m_server_variables.size() > 0) {
        obj.insert(QString("serverVariables"), ::OpenAPI::toJsonValue(m_server_variables));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_title_template_isSet) {
        obj.insert(QString("titleTemplate"), ::OpenAPI::toJsonValue(m_title_template));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAICreateMessage::getApplication() const {
    return m_application;
}
void OAICreateMessage::setApplication(const QString &application) {
    m_application = application;
    m_application_isSet = true;
}

bool OAICreateMessage::is_application_Set() const{
    return m_application_isSet;
}

bool OAICreateMessage::is_application_Valid() const{
    return m_application_isValid;
}

QList<OAIBreadcrumb> OAICreateMessage::getBreadcrumbs() const {
    return m_breadcrumbs;
}
void OAICreateMessage::setBreadcrumbs(const QList<OAIBreadcrumb> &breadcrumbs) {
    m_breadcrumbs = breadcrumbs;
    m_breadcrumbs_isSet = true;
}

bool OAICreateMessage::is_breadcrumbs_Set() const{
    return m_breadcrumbs_isSet;
}

bool OAICreateMessage::is_breadcrumbs_Valid() const{
    return m_breadcrumbs_isValid;
}

QString OAICreateMessage::getCategory() const {
    return m_category;
}
void OAICreateMessage::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAICreateMessage::is_category_Set() const{
    return m_category_isSet;
}

bool OAICreateMessage::is_category_Valid() const{
    return m_category_isValid;
}

QString OAICreateMessage::getCode() const {
    return m_code;
}
void OAICreateMessage::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAICreateMessage::is_code_Set() const{
    return m_code_isSet;
}

bool OAICreateMessage::is_code_Valid() const{
    return m_code_isValid;
}

QList<OAIItem> OAICreateMessage::getCookies() const {
    return m_cookies;
}
void OAICreateMessage::setCookies(const QList<OAIItem> &cookies) {
    m_cookies = cookies;
    m_cookies_isSet = true;
}

bool OAICreateMessage::is_cookies_Set() const{
    return m_cookies_isSet;
}

bool OAICreateMessage::is_cookies_Valid() const{
    return m_cookies_isValid;
}

QString OAICreateMessage::getCorrelationId() const {
    return m_correlation_id;
}
void OAICreateMessage::setCorrelationId(const QString &correlation_id) {
    m_correlation_id = correlation_id;
    m_correlation_id_isSet = true;
}

bool OAICreateMessage::is_correlation_id_Set() const{
    return m_correlation_id_isSet;
}

bool OAICreateMessage::is_correlation_id_Valid() const{
    return m_correlation_id_isValid;
}

QList<OAIItem> OAICreateMessage::getData() const {
    return m_data;
}
void OAICreateMessage::setData(const QList<OAIItem> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAICreateMessage::is_data_Set() const{
    return m_data_isSet;
}

bool OAICreateMessage::is_data_Valid() const{
    return m_data_isValid;
}

QDateTime OAICreateMessage::getDateTime() const {
    return m_date_time;
}
void OAICreateMessage::setDateTime(const QDateTime &date_time) {
    m_date_time = date_time;
    m_date_time_isSet = true;
}

bool OAICreateMessage::is_date_time_Set() const{
    return m_date_time_isSet;
}

bool OAICreateMessage::is_date_time_Valid() const{
    return m_date_time_isValid;
}

QString OAICreateMessage::getDetail() const {
    return m_detail;
}
void OAICreateMessage::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAICreateMessage::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAICreateMessage::is_detail_Valid() const{
    return m_detail_isValid;
}

QList<OAIItem> OAICreateMessage::getForm() const {
    return m_form;
}
void OAICreateMessage::setForm(const QList<OAIItem> &form) {
    m_form = form;
    m_form_isSet = true;
}

bool OAICreateMessage::is_form_Set() const{
    return m_form_isSet;
}

bool OAICreateMessage::is_form_Valid() const{
    return m_form_isValid;
}

QString OAICreateMessage::getHostname() const {
    return m_hostname;
}
void OAICreateMessage::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAICreateMessage::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAICreateMessage::is_hostname_Valid() const{
    return m_hostname_isValid;
}

QString OAICreateMessage::getMethod() const {
    return m_method;
}
void OAICreateMessage::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAICreateMessage::is_method_Set() const{
    return m_method_isSet;
}

bool OAICreateMessage::is_method_Valid() const{
    return m_method_isValid;
}

QList<OAIItem> OAICreateMessage::getQueryString() const {
    return m_query_string;
}
void OAICreateMessage::setQueryString(const QList<OAIItem> &query_string) {
    m_query_string = query_string;
    m_query_string_isSet = true;
}

bool OAICreateMessage::is_query_string_Set() const{
    return m_query_string_isSet;
}

bool OAICreateMessage::is_query_string_Valid() const{
    return m_query_string_isValid;
}

QList<OAIItem> OAICreateMessage::getServerVariables() const {
    return m_server_variables;
}
void OAICreateMessage::setServerVariables(const QList<OAIItem> &server_variables) {
    m_server_variables = server_variables;
    m_server_variables_isSet = true;
}

bool OAICreateMessage::is_server_variables_Set() const{
    return m_server_variables_isSet;
}

bool OAICreateMessage::is_server_variables_Valid() const{
    return m_server_variables_isValid;
}

QString OAICreateMessage::getSeverity() const {
    return m_severity;
}
void OAICreateMessage::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAICreateMessage::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAICreateMessage::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAICreateMessage::getSource() const {
    return m_source;
}
void OAICreateMessage::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAICreateMessage::is_source_Set() const{
    return m_source_isSet;
}

bool OAICreateMessage::is_source_Valid() const{
    return m_source_isValid;
}

qint32 OAICreateMessage::getStatusCode() const {
    return m_status_code;
}
void OAICreateMessage::setStatusCode(const qint32 &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAICreateMessage::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAICreateMessage::is_status_code_Valid() const{
    return m_status_code_isValid;
}

QString OAICreateMessage::getTitle() const {
    return m_title;
}
void OAICreateMessage::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICreateMessage::is_title_Set() const{
    return m_title_isSet;
}

bool OAICreateMessage::is_title_Valid() const{
    return m_title_isValid;
}

QString OAICreateMessage::getTitleTemplate() const {
    return m_title_template;
}
void OAICreateMessage::setTitleTemplate(const QString &title_template) {
    m_title_template = title_template;
    m_title_template_isSet = true;
}

bool OAICreateMessage::is_title_template_Set() const{
    return m_title_template_isSet;
}

bool OAICreateMessage::is_title_template_Valid() const{
    return m_title_template_isValid;
}

QString OAICreateMessage::getType() const {
    return m_type;
}
void OAICreateMessage::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateMessage::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateMessage::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICreateMessage::getUrl() const {
    return m_url;
}
void OAICreateMessage::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICreateMessage::is_url_Set() const{
    return m_url_isSet;
}

bool OAICreateMessage::is_url_Valid() const{
    return m_url_isValid;
}

QString OAICreateMessage::getUser() const {
    return m_user;
}
void OAICreateMessage::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAICreateMessage::is_user_Set() const{
    return m_user_isSet;
}

bool OAICreateMessage::is_user_Valid() const{
    return m_user_isValid;
}

QString OAICreateMessage::getVersion() const {
    return m_version;
}
void OAICreateMessage::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAICreateMessage::is_version_Set() const{
    return m_version_isSet;
}

bool OAICreateMessage::is_version_Valid() const{
    return m_version_isValid;
}

bool OAICreateMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_breadcrumbs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cookies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_correlation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_string.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
