/**
 * elmah.io API
 * This is the public REST API for elmah.io. All of the integrations communicates with elmah.io through this API.<br/><br/>For additional help getting started with the API, visit the following help articles:<br/><ul><li>[Using the REST API](https://docs.elmah.io/using-the-rest-api/)</li><li>[Where is my API key?](https://docs.elmah.io/where-is-my-api-key/)</li><li>[Where is my log ID?](https://docs.elmah.io/where-is-my-log-id/)</li><li>[How to configure API key permissions](https://docs.elmah.io/how-to-configure-api-key-permissions/)</li></ul>
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployment::OAIDeployment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployment::OAIDeployment() {
    this->initializeModel();
}

OAIDeployment::~OAIDeployment() {}

void OAIDeployment::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_log_id_isSet = false;
    m_log_id_isValid = false;

    m_user_email_isSet = false;
    m_user_email_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIDeployment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployment::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_log_id_isValid = ::OpenAPI::fromJsonValue(m_log_id, json[QString("logId")]);
    m_log_id_isSet = !json[QString("logId")].isNull() && m_log_id_isValid;

    m_user_email_isValid = ::OpenAPI::fromJsonValue(m_user_email, json[QString("userEmail")]);
    m_user_email_isSet = !json[QString("userEmail")].isNull() && m_user_email_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIDeployment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployment::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_log_id_isSet) {
        obj.insert(QString("logId"), ::OpenAPI::toJsonValue(m_log_id));
    }
    if (m_user_email_isSet) {
        obj.insert(QString("userEmail"), ::OpenAPI::toJsonValue(m_user_email));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("userName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QDateTime OAIDeployment::getCreated() const {
    return m_created;
}
void OAIDeployment::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIDeployment::is_created_Set() const{
    return m_created_isSet;
}

bool OAIDeployment::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIDeployment::getCreatedBy() const {
    return m_created_by;
}
void OAIDeployment::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIDeployment::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIDeployment::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIDeployment::getDescription() const {
    return m_description;
}
void OAIDeployment::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDeployment::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDeployment::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDeployment::getId() const {
    return m_id;
}
void OAIDeployment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeployment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeployment::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDeployment::getLogId() const {
    return m_log_id;
}
void OAIDeployment::setLogId(const QString &log_id) {
    m_log_id = log_id;
    m_log_id_isSet = true;
}

bool OAIDeployment::is_log_id_Set() const{
    return m_log_id_isSet;
}

bool OAIDeployment::is_log_id_Valid() const{
    return m_log_id_isValid;
}

QString OAIDeployment::getUserEmail() const {
    return m_user_email;
}
void OAIDeployment::setUserEmail(const QString &user_email) {
    m_user_email = user_email;
    m_user_email_isSet = true;
}

bool OAIDeployment::is_user_email_Set() const{
    return m_user_email_isSet;
}

bool OAIDeployment::is_user_email_Valid() const{
    return m_user_email_isValid;
}

QString OAIDeployment::getUserName() const {
    return m_user_name;
}
void OAIDeployment::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIDeployment::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIDeployment::is_user_name_Valid() const{
    return m_user_name_isValid;
}

QString OAIDeployment::getVersion() const {
    return m_version;
}
void OAIDeployment::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIDeployment::is_version_Set() const{
    return m_version_isSet;
}

bool OAIDeployment::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIDeployment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
