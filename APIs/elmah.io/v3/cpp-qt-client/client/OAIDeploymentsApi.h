/**
 * elmah.io API
 * This is the public REST API for elmah.io. All of the integrations communicates with elmah.io through this API.<br/><br/>For additional help getting started with the API, visit the following help articles:<br/><ul><li>[Using the REST API](https://docs.elmah.io/using-the-rest-api/)</li><li>[Where is my API key?](https://docs.elmah.io/where-is-my-api-key/)</li><li>[Where is my log ID?](https://docs.elmah.io/where-is-my-log-id/)</li><li>[How to configure API key permissions](https://docs.elmah.io/how-to-configure-api-key-permissions/)</li></ul>
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDeploymentsApi_H
#define OAI_OAIDeploymentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateDeployment.h"
#include "OAICreateDeploymentResult.h"
#include "OAIDeployment.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDeploymentsApi : public QObject {
    Q_OBJECT

public:
    OAIDeploymentsApi(const int timeOut = 0);
    ~OAIDeploymentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_deployment OAICreateDeployment [optional]
    */
    virtual void deploymentsCreate(const ::OpenAPI::OptionalParam<OAICreateDeployment> &oai_create_deployment = ::OpenAPI::OptionalParam<OAICreateDeployment>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void deploymentsDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deploymentsGet(const QString &id);


    virtual void deploymentsGetAll();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deploymentsCreateCallback(OAIHttpRequestWorker *worker);
    void deploymentsDeleteCallback(OAIHttpRequestWorker *worker);
    void deploymentsGetCallback(OAIHttpRequestWorker *worker);
    void deploymentsGetAllCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deploymentsCreateSignal(OAICreateDeploymentResult summary);
    void deploymentsDeleteSignal();
    void deploymentsGetSignal(OAIDeployment summary);
    void deploymentsGetAllSignal(QList<OAIDeployment> summary);


    void deploymentsCreateSignalFull(OAIHttpRequestWorker *worker, OAICreateDeploymentResult summary);
    void deploymentsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void deploymentsGetSignalFull(OAIHttpRequestWorker *worker, OAIDeployment summary);
    void deploymentsGetAllSignalFull(OAIHttpRequestWorker *worker, QList<OAIDeployment> summary);

    Q_DECL_DEPRECATED_X("Use deploymentsCreateSignalError() instead")
    void deploymentsCreateSignalE(OAICreateDeploymentResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentsCreateSignalError(OAICreateDeploymentResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentsDeleteSignalError() instead")
    void deploymentsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentsGetSignalError() instead")
    void deploymentsGetSignalE(OAIDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentsGetSignalError(OAIDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentsGetAllSignalError() instead")
    void deploymentsGetAllSignalE(QList<OAIDeployment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentsGetAllSignalError(QList<OAIDeployment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deploymentsCreateSignalErrorFull() instead")
    void deploymentsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentsDeleteSignalErrorFull() instead")
    void deploymentsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentsGetSignalErrorFull() instead")
    void deploymentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentsGetAllSignalErrorFull() instead")
    void deploymentsGetAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentsGetAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
