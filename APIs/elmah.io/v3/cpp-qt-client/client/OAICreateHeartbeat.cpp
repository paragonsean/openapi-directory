/**
 * elmah.io API
 * This is the public REST API for elmah.io. All of the integrations communicates with elmah.io through this API.<br/><br/>For additional help getting started with the API, visit the following help articles:<br/><ul><li>[Using the REST API](https://docs.elmah.io/using-the-rest-api/)</li><li>[Where is my API key?](https://docs.elmah.io/where-is-my-api-key/)</li><li>[Where is my log ID?](https://docs.elmah.io/where-is-my-log-id/)</li><li>[How to configure API key permissions](https://docs.elmah.io/how-to-configure-api-key-permissions/)</li></ul>
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateHeartbeat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateHeartbeat::OAICreateHeartbeat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateHeartbeat::OAICreateHeartbeat() {
    this->initializeModel();
}

OAICreateHeartbeat::~OAICreateHeartbeat() {}

void OAICreateHeartbeat::initializeModel() {

    m_application_isSet = false;
    m_application_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_took_isSet = false;
    m_took_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAICreateHeartbeat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateHeartbeat::fromJsonObject(QJsonObject json) {

    m_application_isValid = ::OpenAPI::fromJsonValue(m_application, json[QString("application")]);
    m_application_isSet = !json[QString("application")].isNull() && m_application_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_took_isValid = ::OpenAPI::fromJsonValue(m_took, json[QString("took")]);
    m_took_isSet = !json[QString("took")].isNull() && m_took_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAICreateHeartbeat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateHeartbeat::asJsonObject() const {
    QJsonObject obj;
    if (m_application_isSet) {
        obj.insert(QString("application"), ::OpenAPI::toJsonValue(m_application));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_took_isSet) {
        obj.insert(QString("took"), ::OpenAPI::toJsonValue(m_took));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAICreateHeartbeat::getApplication() const {
    return m_application;
}
void OAICreateHeartbeat::setApplication(const QString &application) {
    m_application = application;
    m_application_isSet = true;
}

bool OAICreateHeartbeat::is_application_Set() const{
    return m_application_isSet;
}

bool OAICreateHeartbeat::is_application_Valid() const{
    return m_application_isValid;
}

QString OAICreateHeartbeat::getReason() const {
    return m_reason;
}
void OAICreateHeartbeat::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAICreateHeartbeat::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAICreateHeartbeat::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAICreateHeartbeat::getResult() const {
    return m_result;
}
void OAICreateHeartbeat::setResult(const QString &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAICreateHeartbeat::is_result_Set() const{
    return m_result_isSet;
}

bool OAICreateHeartbeat::is_result_Valid() const{
    return m_result_isValid;
}

qint64 OAICreateHeartbeat::getTook() const {
    return m_took;
}
void OAICreateHeartbeat::setTook(const qint64 &took) {
    m_took = took;
    m_took_isSet = true;
}

bool OAICreateHeartbeat::is_took_Set() const{
    return m_took_isSet;
}

bool OAICreateHeartbeat::is_took_Valid() const{
    return m_took_isValid;
}

QString OAICreateHeartbeat::getVersion() const {
    return m_version;
}
void OAICreateHeartbeat::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAICreateHeartbeat::is_version_Set() const{
    return m_version_isSet;
}

bool OAICreateHeartbeat::is_version_Valid() const{
    return m_version_isValid;
}

bool OAICreateHeartbeat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_took_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateHeartbeat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
