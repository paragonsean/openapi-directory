# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateLog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: str=None, disabled: bool=None, environment_name: str=None, name: str=None):
        """CreateLog - a model defined in OpenAPI

        :param color: The color of this CreateLog.
        :param disabled: The disabled of this CreateLog.
        :param environment_name: The environment_name of this CreateLog.
        :param name: The name of this CreateLog.
        """
        self.openapi_types = {
            'color': str,
            'disabled': bool,
            'environment_name': str,
            'name': str
        }

        self.attribute_map = {
            'color': 'color',
            'disabled': 'disabled',
            'environment_name': 'environmentName',
            'name': 'name'
        }

        self._color = color
        self._disabled = disabled
        self._environment_name = environment_name
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateLog':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateLog of this CreateLog.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this CreateLog.

        Color of the log. The color must be one of the following (green on unknown value or missing):  green, lightgreen, lime, yellow, orange, deeporange, red, pink, purple, deeppurple, blue, lightblue

        :return: The color of this CreateLog.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this CreateLog.

        Color of the log. The color must be one of the following (green on unknown value or missing):  green, lightgreen, lime, yellow, orange, deeporange, red, pink, purple, deeppurple, blue, lightblue

        :param color: The color of this CreateLog.
        :type color: str
        """

        self._color = color

    @property
    def disabled(self):
        """Gets the disabled of this CreateLog.

        Set to true to disable the log on creation. Defaults to false. A log can be enabled/disabled  afterwards by calling the _disable and _enable endpoints.

        :return: The disabled of this CreateLog.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this CreateLog.

        Set to true to disable the log on creation. Defaults to false. A log can be enabled/disabled  afterwards by calling the _disable and _enable endpoints.

        :param disabled: The disabled of this CreateLog.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def environment_name(self):
        """Gets the environment_name of this CreateLog.

        Environment name of the new log. Must match an environment name (case insensitive).  If a matching environment name was not found or the property is not set, the log  will appear under \"Other\" in the UI.

        :return: The environment_name of this CreateLog.
        :rtype: str
        """
        return self._environment_name

    @environment_name.setter
    def environment_name(self, environment_name):
        """Sets the environment_name of this CreateLog.

        Environment name of the new log. Must match an environment name (case insensitive).  If a matching environment name was not found or the property is not set, the log  will appear under \"Other\" in the UI.

        :param environment_name: The environment_name of this CreateLog.
        :type environment_name: str
        """

        self._environment_name = environment_name

    @property
    def name(self):
        """Gets the name of this CreateLog.

        Name of the new log.

        :return: The name of this CreateLog.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateLog.

        Name of the new log.

        :param name: The name of this CreateLog.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")

        self._name = name
