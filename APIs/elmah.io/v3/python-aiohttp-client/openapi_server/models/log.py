# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Log(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: str=None, disabled: bool=None, environment_name: str=None, id: str=None, name: str=None):
        """Log - a model defined in OpenAPI

        :param color: The color of this Log.
        :param disabled: The disabled of this Log.
        :param environment_name: The environment_name of this Log.
        :param id: The id of this Log.
        :param name: The name of this Log.
        """
        self.openapi_types = {
            'color': str,
            'disabled': bool,
            'environment_name': str,
            'id': str,
            'name': str
        }

        self.attribute_map = {
            'color': 'color',
            'disabled': 'disabled',
            'environment_name': 'environmentName',
            'id': 'id',
            'name': 'name'
        }

        self._color = color
        self._disabled = disabled
        self._environment_name = environment_name
        self._id = id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Log':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Log of this Log.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this Log.

        Color of the log. The color will always be one of the following (green being the default):  green, lightgreen, lime, yellow, orange, deeporange, red, pink, purple, deeppurple, blue, lightblue

        :return: The color of this Log.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Log.

        Color of the log. The color will always be one of the following (green being the default):  green, lightgreen, lime, yellow, orange, deeporange, red, pink, purple, deeppurple, blue, lightblue

        :param color: The color of this Log.
        :type color: str
        """

        self._color = color

    @property
    def disabled(self):
        """Gets the disabled of this Log.

        Returns true if the log is currently disabled. A log can be disabled either through the API  or in the elmah.io UI.

        :return: The disabled of this Log.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this Log.

        Returns true if the log is currently disabled. A log can be disabled either through the API  or in the elmah.io UI.

        :param disabled: The disabled of this Log.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def environment_name(self):
        """Gets the environment_name of this Log.

        Environment name this log is in or \"Other\" if not in an environment.  \"Other\" is chosen over null to mimic the experience in the elmah.io UI.

        :return: The environment_name of this Log.
        :rtype: str
        """
        return self._environment_name

    @environment_name.setter
    def environment_name(self, environment_name):
        """Sets the environment_name of this Log.

        Environment name this log is in or \"Other\" if not in an environment.  \"Other\" is chosen over null to mimic the experience in the elmah.io UI.

        :param environment_name: The environment_name of this Log.
        :type environment_name: str
        """

        self._environment_name = environment_name

    @property
    def id(self):
        """Gets the id of this Log.

        ID of the log.

        :return: The id of this Log.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Log.

        ID of the log.

        :param id: The id of this Log.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Log.

        Name of the log.

        :return: The name of this Log.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Log.

        Name of the log.

        :param name: The name of this Log.
        :type name: str
        """

        self._name = name
