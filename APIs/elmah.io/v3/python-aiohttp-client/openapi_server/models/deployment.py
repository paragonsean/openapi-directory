# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Deployment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, created_by: str=None, description: str=None, id: str=None, log_id: str=None, user_email: str=None, user_name: str=None, version: str=None):
        """Deployment - a model defined in OpenAPI

        :param created: The created of this Deployment.
        :param created_by: The created_by of this Deployment.
        :param description: The description of this Deployment.
        :param id: The id of this Deployment.
        :param log_id: The log_id of this Deployment.
        :param user_email: The user_email of this Deployment.
        :param user_name: The user_name of this Deployment.
        :param version: The version of this Deployment.
        """
        self.openapi_types = {
            'created': datetime,
            'created_by': str,
            'description': str,
            'id': str,
            'log_id': str,
            'user_email': str,
            'user_name': str,
            'version': str
        }

        self.attribute_map = {
            'created': 'created',
            'created_by': 'createdBy',
            'description': 'description',
            'id': 'id',
            'log_id': 'logId',
            'user_email': 'userEmail',
            'user_name': 'userName',
            'version': 'version'
        }

        self._created = created
        self._created_by = created_by
        self._description = description
        self._id = id
        self._log_id = log_id
        self._user_email = user_email
        self._user_name = user_name
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Deployment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Deployment of this Deployment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this Deployment.

        When was this deployment created.

        :return: The created of this Deployment.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Deployment.

        When was this deployment created.

        :param created: The created of this Deployment.
        :type created: datetime
        """

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this Deployment.

        The elmah.io id of the user creating this deployment. Since deployments are created on a subscription,  the CreatedBy will contain the id of the user with the subscription.

        :return: The created_by of this Deployment.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Deployment.

        The elmah.io id of the user creating this deployment. Since deployments are created on a subscription,  the CreatedBy will contain the id of the user with the subscription.

        :param created_by: The created_by of this Deployment.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def description(self):
        """Gets the description of this Deployment.

        Sescription of this deployment in markdown or clear text.

        :return: The description of this Deployment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Deployment.

        Sescription of this deployment in markdown or clear text.

        :param description: The description of this Deployment.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Deployment.

        The ID of this deployment.

        :return: The id of this Deployment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Deployment.

        The ID of this deployment.

        :param id: The id of this Deployment.
        :type id: str
        """

        self._id = id

    @property
    def log_id(self):
        """Gets the log_id of this Deployment.

        If the deployment is attached a single log, this property is set to the ID of that log.  If null, the deployment is attached all logs on the organization.

        :return: The log_id of this Deployment.
        :rtype: str
        """
        return self._log_id

    @log_id.setter
    def log_id(self, log_id):
        """Sets the log_id of this Deployment.

        If the deployment is attached a single log, this property is set to the ID of that log.  If null, the deployment is attached all logs on the organization.

        :param log_id: The log_id of this Deployment.
        :type log_id: str
        """

        self._log_id = log_id

    @property
    def user_email(self):
        """Gets the user_email of this Deployment.

        The email of the person responsible for creating this deployment.

        :return: The user_email of this Deployment.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this Deployment.

        The email of the person responsible for creating this deployment.

        :param user_email: The user_email of this Deployment.
        :type user_email: str
        """

        self._user_email = user_email

    @property
    def user_name(self):
        """Gets the user_name of this Deployment.

        The name of the person responsible for creating this deployment.

        :return: The user_name of this Deployment.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this Deployment.

        The name of the person responsible for creating this deployment.

        :param user_name: The user_name of this Deployment.
        :type user_name: str
        """

        self._user_name = user_name

    @property
    def version(self):
        """Gets the version of this Deployment.

        The version number of this deployment. The value of version can be a SemVer compliant string or any other  syntax that you are using as your version numbering scheme.

        :return: The version of this Deployment.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Deployment.

        The version number of this deployment. The value of version can be a SemVer compliant string or any other  syntax that you are using as your version numbering scheme.

        :param version: The version of this Deployment.
        :type version: str
        """

        self._version = version
