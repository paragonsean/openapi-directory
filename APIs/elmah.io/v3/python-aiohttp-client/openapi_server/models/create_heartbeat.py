# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateHeartbeat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application: str=None, reason: str=None, result: str=None, took: int=None, version: str=None):
        """CreateHeartbeat - a model defined in OpenAPI

        :param application: The application of this CreateHeartbeat.
        :param reason: The reason of this CreateHeartbeat.
        :param result: The result of this CreateHeartbeat.
        :param took: The took of this CreateHeartbeat.
        :param version: The version of this CreateHeartbeat.
        """
        self.openapi_types = {
            'application': str,
            'reason': str,
            'result': str,
            'took': int,
            'version': str
        }

        self.attribute_map = {
            'application': 'application',
            'reason': 'reason',
            'result': 'result',
            'took': 'took',
            'version': 'version'
        }

        self._application = application
        self._reason = reason
        self._result = result
        self._took = took
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateHeartbeat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateHeartbeat of this CreateHeartbeat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application(self):
        """Gets the application of this CreateHeartbeat.

        Optional string to identify which application logged this message. You can use this if you have multiple applications and services logging to the same log.  If not set, the application name \"Heartbeats\" will be set on all log messages generated from this heartbeat.

        :return: The application of this CreateHeartbeat.
        :rtype: str
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this CreateHeartbeat.

        Optional string to identify which application logged this message. You can use this if you have multiple applications and services logging to the same log.  If not set, the application name \"Heartbeats\" will be set on all log messages generated from this heartbeat.

        :param application: The application of this CreateHeartbeat.
        :type application: str
        """
        if application is not None and len(application) > 256:
            raise ValueError("Invalid value for `application`, length must be less than or equal to `256`")

        self._application = application

    @property
    def reason(self):
        """Gets the reason of this CreateHeartbeat.

        If result is \"Degraded\" or \"Unhealthy\" you can use this property to specify why.

        :return: The reason of this CreateHeartbeat.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this CreateHeartbeat.

        If result is \"Degraded\" or \"Unhealthy\" you can use this property to specify why.

        :param reason: The reason of this CreateHeartbeat.
        :type reason: str
        """
        if reason is not None and len(reason) > 8192:
            raise ValueError("Invalid value for `reason`, length must be less than or equal to `8192`")

        self._reason = reason

    @property
    def result(self):
        """Gets the result of this CreateHeartbeat.

        The result of this heartbeat. Can be \"Healthy, \"Degraded\", or \"Unhealthy\". Defaults to \"Healthy\"

        :return: The result of this CreateHeartbeat.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this CreateHeartbeat.

        The result of this heartbeat. Can be \"Healthy, \"Degraded\", or \"Unhealthy\". Defaults to \"Healthy\"

        :param result: The result of this CreateHeartbeat.
        :type result: str
        """
        if result is not None and len(result) > 9:
            raise ValueError("Invalid value for `result`, length must be less than or equal to `9`")

        self._result = result

    @property
    def took(self):
        """Gets the took of this CreateHeartbeat.

        Optional long for specifying how many milliseconds it took to execute the task resulting in this heartbeat. This can be used to get a better overview  of how long a scheduled task or service is running or to figure out if the grace period should be increased.

        :return: The took of this CreateHeartbeat.
        :rtype: int
        """
        return self._took

    @took.setter
    def took(self, took):
        """Sets the took of this CreateHeartbeat.

        Optional long for specifying how many milliseconds it took to execute the task resulting in this heartbeat. This can be used to get a better overview  of how long a scheduled task or service is running or to figure out if the grace period should be increased.

        :param took: The took of this CreateHeartbeat.
        :type took: int
        """

        self._took = took

    @property
    def version(self):
        """Gets the version of this CreateHeartbeat.

        Optional string to identify which version of your application logged this message. If not specified, any errors, warnings, or information messages will get  the newest version number created through deployment tracking as with normal log messages.

        :return: The version of this CreateHeartbeat.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CreateHeartbeat.

        Optional string to identify which version of your application logged this message. If not specified, any errors, warnings, or information messages will get  the newest version number created through deployment tracking as with normal log messages.

        :param version: The version of this CreateHeartbeat.
        :type version: str
        """
        if version is not None and len(version) > 256:
            raise ValueError("Invalid value for `version`, length must be less than or equal to `256`")

        self._version = version
