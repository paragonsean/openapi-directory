# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.breadcrumb import Breadcrumb
from openapi_server.models.item import Item
from openapi_server import util


class CreateMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application: str=None, breadcrumbs: List[Breadcrumb]=None, category: str=None, code: str=None, cookies: List[Item]=None, correlation_id: str=None, data: List[Item]=None, date_time: datetime=None, detail: str=None, form: List[Item]=None, hostname: str=None, method: str=None, query_string: List[Item]=None, server_variables: List[Item]=None, severity: str=None, source: str=None, status_code: int=None, title: str=None, title_template: str=None, type: str=None, url: str=None, user: str=None, version: str=None):
        """CreateMessage - a model defined in OpenAPI

        :param application: The application of this CreateMessage.
        :param breadcrumbs: The breadcrumbs of this CreateMessage.
        :param category: The category of this CreateMessage.
        :param code: The code of this CreateMessage.
        :param cookies: The cookies of this CreateMessage.
        :param correlation_id: The correlation_id of this CreateMessage.
        :param data: The data of this CreateMessage.
        :param date_time: The date_time of this CreateMessage.
        :param detail: The detail of this CreateMessage.
        :param form: The form of this CreateMessage.
        :param hostname: The hostname of this CreateMessage.
        :param method: The method of this CreateMessage.
        :param query_string: The query_string of this CreateMessage.
        :param server_variables: The server_variables of this CreateMessage.
        :param severity: The severity of this CreateMessage.
        :param source: The source of this CreateMessage.
        :param status_code: The status_code of this CreateMessage.
        :param title: The title of this CreateMessage.
        :param title_template: The title_template of this CreateMessage.
        :param type: The type of this CreateMessage.
        :param url: The url of this CreateMessage.
        :param user: The user of this CreateMessage.
        :param version: The version of this CreateMessage.
        """
        self.openapi_types = {
            'application': str,
            'breadcrumbs': List[Breadcrumb],
            'category': str,
            'code': str,
            'cookies': List[Item],
            'correlation_id': str,
            'data': List[Item],
            'date_time': datetime,
            'detail': str,
            'form': List[Item],
            'hostname': str,
            'method': str,
            'query_string': List[Item],
            'server_variables': List[Item],
            'severity': str,
            'source': str,
            'status_code': int,
            'title': str,
            'title_template': str,
            'type': str,
            'url': str,
            'user': str,
            'version': str
        }

        self.attribute_map = {
            'application': 'application',
            'breadcrumbs': 'breadcrumbs',
            'category': 'category',
            'code': 'code',
            'cookies': 'cookies',
            'correlation_id': 'correlationId',
            'data': 'data',
            'date_time': 'dateTime',
            'detail': 'detail',
            'form': 'form',
            'hostname': 'hostname',
            'method': 'method',
            'query_string': 'queryString',
            'server_variables': 'serverVariables',
            'severity': 'severity',
            'source': 'source',
            'status_code': 'statusCode',
            'title': 'title',
            'title_template': 'titleTemplate',
            'type': 'type',
            'url': 'url',
            'user': 'user',
            'version': 'version'
        }

        self._application = application
        self._breadcrumbs = breadcrumbs
        self._category = category
        self._code = code
        self._cookies = cookies
        self._correlation_id = correlation_id
        self._data = data
        self._date_time = date_time
        self._detail = detail
        self._form = form
        self._hostname = hostname
        self._method = method
        self._query_string = query_string
        self._server_variables = server_variables
        self._severity = severity
        self._source = source
        self._status_code = status_code
        self._title = title
        self._title_template = title_template
        self._type = type
        self._url = url
        self._user = user
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateMessage of this CreateMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application(self):
        """Gets the application of this CreateMessage.

        Used to identify which application logged this message. You can use this if you have multiple applications and services logging to the same log

        :return: The application of this CreateMessage.
        :rtype: str
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this CreateMessage.

        Used to identify which application logged this message. You can use this if you have multiple applications and services logging to the same log

        :param application: The application of this CreateMessage.
        :type application: str
        """

        self._application = application

    @property
    def breadcrumbs(self):
        """Gets the breadcrumbs of this CreateMessage.

        A list of breadcrumbs preceding this log message.

        :return: The breadcrumbs of this CreateMessage.
        :rtype: List[Breadcrumb]
        """
        return self._breadcrumbs

    @breadcrumbs.setter
    def breadcrumbs(self, breadcrumbs):
        """Sets the breadcrumbs of this CreateMessage.

        A list of breadcrumbs preceding this log message.

        :param breadcrumbs: The breadcrumbs of this CreateMessage.
        :type breadcrumbs: List[Breadcrumb]
        """

        self._breadcrumbs = breadcrumbs

    @property
    def category(self):
        """Gets the category of this CreateMessage.

        The log message category. Category can be a string of choice but typically contain a logging category set by a logging framework like NLog or Serilog.  When logging through a logging framework, this field will be provided by the framework and not something that needs to be set manually.

        :return: The category of this CreateMessage.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CreateMessage.

        The log message category. Category can be a string of choice but typically contain a logging category set by a logging framework like NLog or Serilog.  When logging through a logging framework, this field will be provided by the framework and not something that needs to be set manually.

        :param category: The category of this CreateMessage.
        :type category: str
        """

        self._category = category

    @property
    def code(self):
        """Gets the code of this CreateMessage.

        Code can be used to include source code related to the log message. The code will typically span from a few lines before the line causing the log message  to a few lines after. For now, all lines above 21 will be removed. This makes room for showing 10 lines before the logging line, the logging line, and  10 lines after the logging line. Don't include a very large string in this property since that will quickly make the entire messages exceed the max limit  of 256 kb.

        :return: The code of this CreateMessage.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CreateMessage.

        Code can be used to include source code related to the log message. The code will typically span from a few lines before the line causing the log message  to a few lines after. For now, all lines above 21 will be removed. This makes room for showing 10 lines before the logging line, the logging line, and  10 lines after the logging line. Don't include a very large string in this property since that will quickly make the entire messages exceed the max limit  of 256 kb.

        :param code: The code of this CreateMessage.
        :type code: str
        """

        self._code = code

    @property
    def cookies(self):
        """Gets the cookies of this CreateMessage.

        A key/value pair of cookies. This property only makes sense for logging messages related to web requests.

        :return: The cookies of this CreateMessage.
        :rtype: List[Item]
        """
        return self._cookies

    @cookies.setter
    def cookies(self, cookies):
        """Sets the cookies of this CreateMessage.

        A key/value pair of cookies. This property only makes sense for logging messages related to web requests.

        :param cookies: The cookies of this CreateMessage.
        :type cookies: List[Item]
        """

        self._cookies = cookies

    @property
    def correlation_id(self):
        """Gets the correlation_id of this CreateMessage.

        CorrelationId can be used to group similar log messages together into a single discoverable batch. A correlation ID could be a session ID from ASP.NET Core,  a unique string spanning multiple microsservices handling the same request, or similar.

        :return: The correlation_id of this CreateMessage.
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this CreateMessage.

        CorrelationId can be used to group similar log messages together into a single discoverable batch. A correlation ID could be a session ID from ASP.NET Core,  a unique string spanning multiple microsservices handling the same request, or similar.

        :param correlation_id: The correlation_id of this CreateMessage.
        :type correlation_id: str
        """

        self._correlation_id = correlation_id

    @property
    def data(self):
        """Gets the data of this CreateMessage.

        A key/value pair of user-defined fields and their values. When logging an exception, the Data dictionary of  the exception is copied to this property. You can add additional key/value pairs, by modifying the Data  dictionary on the exception or by supplying additional key/values to this API.

        :return: The data of this CreateMessage.
        :rtype: List[Item]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this CreateMessage.

        A key/value pair of user-defined fields and their values. When logging an exception, the Data dictionary of  the exception is copied to this property. You can add additional key/value pairs, by modifying the Data  dictionary on the exception or by supplying additional key/values to this API.

        :param data: The data of this CreateMessage.
        :type data: List[Item]
        """

        self._data = data

    @property
    def date_time(self):
        """Gets the date_time of this CreateMessage.

        The date and time in UTC of the message. If you don't provide us with a value in dateTime, we will set the current date and time in UTC.

        :return: The date_time of this CreateMessage.
        :rtype: datetime
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this CreateMessage.

        The date and time in UTC of the message. If you don't provide us with a value in dateTime, we will set the current date and time in UTC.

        :param date_time: The date_time of this CreateMessage.
        :type date_time: datetime
        """

        self._date_time = date_time

    @property
    def detail(self):
        """Gets the detail of this CreateMessage.

        A longer description of the message. For errors this could be a stacktrace, but it's really up to you what to log in there.

        :return: The detail of this CreateMessage.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this CreateMessage.

        A longer description of the message. For errors this could be a stacktrace, but it's really up to you what to log in there.

        :param detail: The detail of this CreateMessage.
        :type detail: str
        """

        self._detail = detail

    @property
    def form(self):
        """Gets the form of this CreateMessage.

        A key/value pair of form fields and their values. This property makes sense if logging message related to users inputting data in a form.

        :return: The form of this CreateMessage.
        :rtype: List[Item]
        """
        return self._form

    @form.setter
    def form(self, form):
        """Sets the form of this CreateMessage.

        A key/value pair of form fields and their values. This property makes sense if logging message related to users inputting data in a form.

        :param form: The form of this CreateMessage.
        :type form: List[Item]
        """

        self._form = form

    @property
    def hostname(self):
        """Gets the hostname of this CreateMessage.

        The hostname of the server logging the message.

        :return: The hostname of this CreateMessage.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this CreateMessage.

        The hostname of the server logging the message.

        :param hostname: The hostname of this CreateMessage.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def method(self):
        """Gets the method of this CreateMessage.

        If message relates to a HTTP request, you may send the HTTP method of that request. If you don't provide us with a method, we will try to find a key named REQUEST_METHOD in serverVariables.

        :return: The method of this CreateMessage.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this CreateMessage.

        If message relates to a HTTP request, you may send the HTTP method of that request. If you don't provide us with a method, we will try to find a key named REQUEST_METHOD in serverVariables.

        :param method: The method of this CreateMessage.
        :type method: str
        """

        self._method = method

    @property
    def query_string(self):
        """Gets the query_string of this CreateMessage.

        A key/value pair of query string parameters. This property makes sense if logging message related to a HTTP request.

        :return: The query_string of this CreateMessage.
        :rtype: List[Item]
        """
        return self._query_string

    @query_string.setter
    def query_string(self, query_string):
        """Sets the query_string of this CreateMessage.

        A key/value pair of query string parameters. This property makes sense if logging message related to a HTTP request.

        :param query_string: The query_string of this CreateMessage.
        :type query_string: List[Item]
        """

        self._query_string = query_string

    @property
    def server_variables(self):
        """Gets the server_variables of this CreateMessage.

        A key/value pair of server values. Server variables are typically related to handling requests in a webserver but could be used for other types of information as well.

        :return: The server_variables of this CreateMessage.
        :rtype: List[Item]
        """
        return self._server_variables

    @server_variables.setter
    def server_variables(self, server_variables):
        """Sets the server_variables of this CreateMessage.

        A key/value pair of server values. Server variables are typically related to handling requests in a webserver but could be used for other types of information as well.

        :param server_variables: The server_variables of this CreateMessage.
        :type server_variables: List[Item]
        """

        self._server_variables = server_variables

    @property
    def severity(self):
        """Gets the severity of this CreateMessage.

        An enum value representing the severity of this message. The following values are allowed: Verbose, Debug, Information, Warning, Error, Fatal

        :return: The severity of this CreateMessage.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this CreateMessage.

        An enum value representing the severity of this message. The following values are allowed: Verbose, Debug, Information, Warning, Error, Fatal

        :param severity: The severity of this CreateMessage.
        :type severity: str
        """

        self._severity = severity

    @property
    def source(self):
        """Gets the source of this CreateMessage.

        The source of the code logging the message. This could be the assembly name.

        :return: The source of this CreateMessage.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CreateMessage.

        The source of the code logging the message. This could be the assembly name.

        :param source: The source of this CreateMessage.
        :type source: str
        """

        self._source = source

    @property
    def status_code(self):
        """Gets the status_code of this CreateMessage.

        If the message logged relates to a HTTP status code, you can put the code in this property. This would probably only be relevant for errors,  but could be used for logging successful status codes as well.

        :return: The status_code of this CreateMessage.
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this CreateMessage.

        If the message logged relates to a HTTP status code, you can put the code in this property. This would probably only be relevant for errors,  but could be used for logging successful status codes as well.

        :param status_code: The status_code of this CreateMessage.
        :type status_code: int
        """

        self._status_code = status_code

    @property
    def title(self):
        """Gets the title of this CreateMessage.

        The textual title or headline of the message to log.

        :return: The title of this CreateMessage.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CreateMessage.

        The textual title or headline of the message to log.

        :param title: The title of this CreateMessage.
        :type title: str
        """

        self._title = title

    @property
    def title_template(self):
        """Gets the title_template of this CreateMessage.

        The title template of the message to log. This property can be used from logging frameworks that supports  structured logging like: \"{user} says {quote}\". In the example, titleTemplate will be this string and title  will be \"Gilfoyle says It's not magic. It's talent and sweat\".

        :return: The title_template of this CreateMessage.
        :rtype: str
        """
        return self._title_template

    @title_template.setter
    def title_template(self, title_template):
        """Sets the title_template of this CreateMessage.

        The title template of the message to log. This property can be used from logging frameworks that supports  structured logging like: \"{user} says {quote}\". In the example, titleTemplate will be this string and title  will be \"Gilfoyle says It's not magic. It's talent and sweat\".

        :param title_template: The title_template of this CreateMessage.
        :type title_template: str
        """

        self._title_template = title_template

    @property
    def type(self):
        """Gets the type of this CreateMessage.

        The type of message. If logging an error, the type of the exception would go into type but you can put anything in there, that makes sense for your domain.

        :return: The type of this CreateMessage.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateMessage.

        The type of message. If logging an error, the type of the exception would go into type but you can put anything in there, that makes sense for your domain.

        :param type: The type of this CreateMessage.
        :type type: str
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this CreateMessage.

        If message relates to a HTTP request, you may send the URL of that request. If you don't provide us with an URL, we will try to find a key named URL in serverVariables.

        :return: The url of this CreateMessage.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CreateMessage.

        If message relates to a HTTP request, you may send the URL of that request. If you don't provide us with an URL, we will try to find a key named URL in serverVariables.

        :param url: The url of this CreateMessage.
        :type url: str
        """

        self._url = url

    @property
    def user(self):
        """Gets the user of this CreateMessage.

        An identification of the user triggering this message. You can put the users email address or your user key into this property.

        :return: The user of this CreateMessage.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CreateMessage.

        An identification of the user triggering this message. You can put the users email address or your user key into this property.

        :param user: The user of this CreateMessage.
        :type user: str
        """

        self._user = user

    @property
    def version(self):
        """Gets the version of this CreateMessage.

        Versions can be used to distinguish messages from different versions of your software. The value of version can be a SemVer compliant string or any other  syntax that you are using as your version numbering scheme.

        :return: The version of this CreateMessage.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CreateMessage.

        Versions can be used to distinguish messages from different versions of your software. The value of version can be a SemVer compliant string or any other  syntax that you are using as your version numbering scheme.

        :param version: The version of this CreateMessage.
        :type version: str
        """

        self._version = version
