/*
 * elmah.io API
 * This is the public REST API for elmah.io. All of the integrations communicates with elmah.io through this API.<br/><br/>For additional help getting started with the API, visit the following help articles:<br/><ul><li>[Using the REST API](https://docs.elmah.io/using-the-rest-api/)</li><li>[Where is my API key?](https://docs.elmah.io/where-is-my-api-key/)</li><li>[Where is my log ID?](https://docs.elmah.io/where-is-my-log-id/)</li><li>[How to configure API key permissions](https://docs.elmah.io/how-to-configure-api-key-permissions/)</li></ul>
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Breadcrumb;
import org.openapitools.client.model.Item;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Message
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:31.892058-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Message {
  public static final String SERIALIZED_NAME_APPLICATION = "application";
  @SerializedName(SERIALIZED_NAME_APPLICATION)
  private String application;

  public static final String SERIALIZED_NAME_BREADCRUMBS = "breadcrumbs";
  @SerializedName(SERIALIZED_NAME_BREADCRUMBS)
  private List<Breadcrumb> breadcrumbs = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_COOKIES = "cookies";
  @SerializedName(SERIALIZED_NAME_COOKIES)
  private List<Item> cookies = new ArrayList<>();

  public static final String SERIALIZED_NAME_CORRELATION_ID = "correlationId";
  @SerializedName(SERIALIZED_NAME_CORRELATION_ID)
  private String correlationId;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private List<Item> data = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_TIME = "dateTime";
  @SerializedName(SERIALIZED_NAME_DATE_TIME)
  private OffsetDateTime dateTime;

  public static final String SERIALIZED_NAME_DETAIL = "detail";
  @SerializedName(SERIALIZED_NAME_DETAIL)
  private String detail;

  public static final String SERIALIZED_NAME_FORM = "form";
  @SerializedName(SERIALIZED_NAME_FORM)
  private List<Item> form = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_QUERY_STRING = "queryString";
  @SerializedName(SERIALIZED_NAME_QUERY_STRING)
  private List<Item> queryString = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVER_VARIABLES = "serverVariables";
  @SerializedName(SERIALIZED_NAME_SERVER_VARIABLES)
  private List<Item> serverVariables = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private String severity;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_STATUS_CODE = "statusCode";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private Integer statusCode;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TITLE_TEMPLATE = "titleTemplate";
  @SerializedName(SERIALIZED_NAME_TITLE_TEMPLATE)
  private String titleTemplate;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public Message() {
  }

  public Message application(String application) {
    this.application = application;
    return this;
  }

  /**
   * Used to identify which application logged this message. You can use this if you have multiple applications and services logging to the same log
   * @return application
   */
  @javax.annotation.Nullable
  public String getApplication() {
    return application;
  }

  public void setApplication(String application) {
    this.application = application;
  }


  public Message breadcrumbs(List<Breadcrumb> breadcrumbs) {
    this.breadcrumbs = breadcrumbs;
    return this;
  }

  public Message addBreadcrumbsItem(Breadcrumb breadcrumbsItem) {
    if (this.breadcrumbs == null) {
      this.breadcrumbs = new ArrayList<>();
    }
    this.breadcrumbs.add(breadcrumbsItem);
    return this;
  }

  /**
   * A list of breadcrumbs preceding this log message.
   * @return breadcrumbs
   */
  @javax.annotation.Nullable
  public List<Breadcrumb> getBreadcrumbs() {
    return breadcrumbs;
  }

  public void setBreadcrumbs(List<Breadcrumb> breadcrumbs) {
    this.breadcrumbs = breadcrumbs;
  }


  public Message category(String category) {
    this.category = category;
    return this;
  }

  /**
   * The log message category. Category can be a string of choice but typically contain a logging category set by a logging framework like NLog or Serilog.
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public Message code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Code can be used to include source code related to the log message. The code will typically span from a few lines before the line causing the log message  to a few lines after. For now, all lines above 21 will be removed. This makes room for showing 10 lines before the logging line, the logging line, and  10 lines after the logging line. Don&#39;t include a very large string in this property since that will quickly make the entire messages exceed the max limit  of 256 kb.
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public Message cookies(List<Item> cookies) {
    this.cookies = cookies;
    return this;
  }

  public Message addCookiesItem(Item cookiesItem) {
    if (this.cookies == null) {
      this.cookies = new ArrayList<>();
    }
    this.cookies.add(cookiesItem);
    return this;
  }

  /**
   * A key/value pair of cookies. This property only makes sense for logging messages related to web requests.
   * @return cookies
   */
  @javax.annotation.Nullable
  public List<Item> getCookies() {
    return cookies;
  }

  public void setCookies(List<Item> cookies) {
    this.cookies = cookies;
  }


  public Message correlationId(String correlationId) {
    this.correlationId = correlationId;
    return this;
  }

  /**
   * CorrelationId can be used to group similar log messages together into a single discoverable batch. A correlation ID could be a session ID from ASP.NET Core,  a unique string spanning multiple microsservices handling the same request, or similar.
   * @return correlationId
   */
  @javax.annotation.Nullable
  public String getCorrelationId() {
    return correlationId;
  }

  public void setCorrelationId(String correlationId) {
    this.correlationId = correlationId;
  }


  public Message data(List<Item> data) {
    this.data = data;
    return this;
  }

  public Message addDataItem(Item dataItem) {
    if (this.data == null) {
      this.data = new ArrayList<>();
    }
    this.data.add(dataItem);
    return this;
  }

  /**
   * A key/value pair of user-defined fields and their values. When logging an exception, the Data dictionary of  the exception is copied to this property. You can add additional key/value pairs, by modifying the Data  dictionary on the exception or by supplying additional key/values to this API.
   * @return data
   */
  @javax.annotation.Nullable
  public List<Item> getData() {
    return data;
  }

  public void setData(List<Item> data) {
    this.data = data;
  }


  public Message dateTime(OffsetDateTime dateTime) {
    this.dateTime = dateTime;
    return this;
  }

  /**
   * The date and time in UTC of the message. If you don&#39;t provide us with a value in dateTime, we will set the current date and time in UTC.
   * @return dateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateTime() {
    return dateTime;
  }

  public void setDateTime(OffsetDateTime dateTime) {
    this.dateTime = dateTime;
  }


  public Message detail(String detail) {
    this.detail = detail;
    return this;
  }

  /**
   * A longer description of the message. For errors this could be a stacktrace, but it&#39;s really up to you what to log in there.
   * @return detail
   */
  @javax.annotation.Nullable
  public String getDetail() {
    return detail;
  }

  public void setDetail(String detail) {
    this.detail = detail;
  }


  public Message form(List<Item> form) {
    this.form = form;
    return this;
  }

  public Message addFormItem(Item formItem) {
    if (this.form == null) {
      this.form = new ArrayList<>();
    }
    this.form.add(formItem);
    return this;
  }

  /**
   * A key/value pair of form fields and their values. This property makes sense if logging message related to users inputting data in a form.
   * @return form
   */
  @javax.annotation.Nullable
  public List<Item> getForm() {
    return form;
  }

  public void setForm(List<Item> form) {
    this.form = form;
  }


  public Message hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * The hostname of the server logging the message.
   * @return hostname
   */
  @javax.annotation.Nullable
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public Message id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of this message.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Message method(String method) {
    this.method = method;
    return this;
  }

  /**
   * If message relates to a HTTP request, you may send the HTTP method of that request. If you don&#39;t provide us with a method, we will try to find a key named REQUEST_METHOD in serverVariables.
   * @return method
   */
  @javax.annotation.Nullable
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }


  public Message queryString(List<Item> queryString) {
    this.queryString = queryString;
    return this;
  }

  public Message addQueryStringItem(Item queryStringItem) {
    if (this.queryString == null) {
      this.queryString = new ArrayList<>();
    }
    this.queryString.add(queryStringItem);
    return this;
  }

  /**
   * A key/value pair of query string parameters. This property makes sense if logging message related to a HTTP request.
   * @return queryString
   */
  @javax.annotation.Nullable
  public List<Item> getQueryString() {
    return queryString;
  }

  public void setQueryString(List<Item> queryString) {
    this.queryString = queryString;
  }


  public Message serverVariables(List<Item> serverVariables) {
    this.serverVariables = serverVariables;
    return this;
  }

  public Message addServerVariablesItem(Item serverVariablesItem) {
    if (this.serverVariables == null) {
      this.serverVariables = new ArrayList<>();
    }
    this.serverVariables.add(serverVariablesItem);
    return this;
  }

  /**
   * A key/value pair of server values. Server variables are typically related to handling requests in a webserver but could be used for other types of information as well.
   * @return serverVariables
   */
  @javax.annotation.Nullable
  public List<Item> getServerVariables() {
    return serverVariables;
  }

  public void setServerVariables(List<Item> serverVariables) {
    this.serverVariables = serverVariables;
  }


  public Message severity(String severity) {
    this.severity = severity;
    return this;
  }

  /**
   * An enum value representing the severity of this message. The following values are allowed: Verbose, Debug, Information, Warning, Error, Fatal
   * @return severity
   */
  @javax.annotation.Nullable
  public String getSeverity() {
    return severity;
  }

  public void setSeverity(String severity) {
    this.severity = severity;
  }


  public Message source(String source) {
    this.source = source;
    return this;
  }

  /**
   * The source of the code logging the message. This could be the assembly name.
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public Message statusCode(Integer statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  /**
   * If the message logged relates to a HTTP status code, you can put the code in this property. This would probably only be relevant for errors,  but could be used for logging successful status codes as well.
   * @return statusCode
   */
  @javax.annotation.Nullable
  public Integer getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(Integer statusCode) {
    this.statusCode = statusCode;
  }


  public Message title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The textual title or headline of the message to log.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Message titleTemplate(String titleTemplate) {
    this.titleTemplate = titleTemplate;
    return this;
  }

  /**
   * The title template of the message to log. This property can be used from logging frameworks that supports  structured logging like: \&quot;{user} says {quote}\&quot;. In the example, titleTemplate will be this string and title  will be \&quot;Gilfoyle says It&#39;s not magic. It&#39;s talent and sweat\&quot;.
   * @return titleTemplate
   */
  @javax.annotation.Nullable
  public String getTitleTemplate() {
    return titleTemplate;
  }

  public void setTitleTemplate(String titleTemplate) {
    this.titleTemplate = titleTemplate;
  }


  public Message type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of message. If logging an error, the type of the exception would go into type but you can put anything in there, that makes sense for your domain.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Message url(String url) {
    this.url = url;
    return this;
  }

  /**
   * If message relates to a HTTP request, you may send the URL of that request. If you don&#39;t provide us with an URL, we will try to find a key named URL in serverVariables.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public Message user(String user) {
    this.user = user;
    return this;
  }

  /**
   * An identification of the user triggering this message. You can put the users email address or your user key into this property.
   * @return user
   */
  @javax.annotation.Nullable
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }


  public Message version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Versions can be used to distinguish messages from different versions of your software. The value of version can be a SemVer compliant string or any other  syntax that you are using as your version numbering scheme.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Message message = (Message) o;
    return Objects.equals(this.application, message.application) &&
        Objects.equals(this.breadcrumbs, message.breadcrumbs) &&
        Objects.equals(this.category, message.category) &&
        Objects.equals(this.code, message.code) &&
        Objects.equals(this.cookies, message.cookies) &&
        Objects.equals(this.correlationId, message.correlationId) &&
        Objects.equals(this.data, message.data) &&
        Objects.equals(this.dateTime, message.dateTime) &&
        Objects.equals(this.detail, message.detail) &&
        Objects.equals(this.form, message.form) &&
        Objects.equals(this.hostname, message.hostname) &&
        Objects.equals(this.id, message.id) &&
        Objects.equals(this.method, message.method) &&
        Objects.equals(this.queryString, message.queryString) &&
        Objects.equals(this.serverVariables, message.serverVariables) &&
        Objects.equals(this.severity, message.severity) &&
        Objects.equals(this.source, message.source) &&
        Objects.equals(this.statusCode, message.statusCode) &&
        Objects.equals(this.title, message.title) &&
        Objects.equals(this.titleTemplate, message.titleTemplate) &&
        Objects.equals(this.type, message.type) &&
        Objects.equals(this.url, message.url) &&
        Objects.equals(this.user, message.user) &&
        Objects.equals(this.version, message.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(application, breadcrumbs, category, code, cookies, correlationId, data, dateTime, detail, form, hostname, id, method, queryString, serverVariables, severity, source, statusCode, title, titleTemplate, type, url, user, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Message {\n");
    sb.append("    application: ").append(toIndentedString(application)).append("\n");
    sb.append("    breadcrumbs: ").append(toIndentedString(breadcrumbs)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    cookies: ").append(toIndentedString(cookies)).append("\n");
    sb.append("    correlationId: ").append(toIndentedString(correlationId)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    form: ").append(toIndentedString(form)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    queryString: ").append(toIndentedString(queryString)).append("\n");
    sb.append("    serverVariables: ").append(toIndentedString(serverVariables)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    titleTemplate: ").append(toIndentedString(titleTemplate)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("application");
    openapiFields.add("breadcrumbs");
    openapiFields.add("category");
    openapiFields.add("code");
    openapiFields.add("cookies");
    openapiFields.add("correlationId");
    openapiFields.add("data");
    openapiFields.add("dateTime");
    openapiFields.add("detail");
    openapiFields.add("form");
    openapiFields.add("hostname");
    openapiFields.add("id");
    openapiFields.add("method");
    openapiFields.add("queryString");
    openapiFields.add("serverVariables");
    openapiFields.add("severity");
    openapiFields.add("source");
    openapiFields.add("statusCode");
    openapiFields.add("title");
    openapiFields.add("titleTemplate");
    openapiFields.add("type");
    openapiFields.add("url");
    openapiFields.add("user");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Message
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Message.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Message is not found in the empty JSON string", Message.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Message.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Message` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("application") != null && !jsonObj.get("application").isJsonNull()) && !jsonObj.get("application").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `application` to be a primitive type in the JSON string but got `%s`", jsonObj.get("application").toString()));
      }
      if (jsonObj.get("breadcrumbs") != null && !jsonObj.get("breadcrumbs").isJsonNull()) {
        JsonArray jsonArraybreadcrumbs = jsonObj.getAsJsonArray("breadcrumbs");
        if (jsonArraybreadcrumbs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("breadcrumbs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `breadcrumbs` to be an array in the JSON string but got `%s`", jsonObj.get("breadcrumbs").toString()));
          }

          // validate the optional field `breadcrumbs` (array)
          for (int i = 0; i < jsonArraybreadcrumbs.size(); i++) {
            Breadcrumb.validateJsonElement(jsonArraybreadcrumbs.get(i));
          };
        }
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (jsonObj.get("cookies") != null && !jsonObj.get("cookies").isJsonNull()) {
        JsonArray jsonArraycookies = jsonObj.getAsJsonArray("cookies");
        if (jsonArraycookies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cookies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cookies` to be an array in the JSON string but got `%s`", jsonObj.get("cookies").toString()));
          }

          // validate the optional field `cookies` (array)
          for (int i = 0; i < jsonArraycookies.size(); i++) {
            Item.validateJsonElement(jsonArraycookies.get(i));
          };
        }
      }
      if ((jsonObj.get("correlationId") != null && !jsonObj.get("correlationId").isJsonNull()) && !jsonObj.get("correlationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `correlationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("correlationId").toString()));
      }
      if (jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull()) {
        JsonArray jsonArraydata = jsonObj.getAsJsonArray("data");
        if (jsonArraydata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("data").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `data` to be an array in the JSON string but got `%s`", jsonObj.get("data").toString()));
          }

          // validate the optional field `data` (array)
          for (int i = 0; i < jsonArraydata.size(); i++) {
            Item.validateJsonElement(jsonArraydata.get(i));
          };
        }
      }
      if ((jsonObj.get("detail") != null && !jsonObj.get("detail").isJsonNull()) && !jsonObj.get("detail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detail").toString()));
      }
      if (jsonObj.get("form") != null && !jsonObj.get("form").isJsonNull()) {
        JsonArray jsonArrayform = jsonObj.getAsJsonArray("form");
        if (jsonArrayform != null) {
          // ensure the json data is an array
          if (!jsonObj.get("form").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `form` to be an array in the JSON string but got `%s`", jsonObj.get("form").toString()));
          }

          // validate the optional field `form` (array)
          for (int i = 0; i < jsonArrayform.size(); i++) {
            Item.validateJsonElement(jsonArrayform.get(i));
          };
        }
      }
      if ((jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if (jsonObj.get("queryString") != null && !jsonObj.get("queryString").isJsonNull()) {
        JsonArray jsonArrayqueryString = jsonObj.getAsJsonArray("queryString");
        if (jsonArrayqueryString != null) {
          // ensure the json data is an array
          if (!jsonObj.get("queryString").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `queryString` to be an array in the JSON string but got `%s`", jsonObj.get("queryString").toString()));
          }

          // validate the optional field `queryString` (array)
          for (int i = 0; i < jsonArrayqueryString.size(); i++) {
            Item.validateJsonElement(jsonArrayqueryString.get(i));
          };
        }
      }
      if (jsonObj.get("serverVariables") != null && !jsonObj.get("serverVariables").isJsonNull()) {
        JsonArray jsonArrayserverVariables = jsonObj.getAsJsonArray("serverVariables");
        if (jsonArrayserverVariables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("serverVariables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `serverVariables` to be an array in the JSON string but got `%s`", jsonObj.get("serverVariables").toString()));
          }

          // validate the optional field `serverVariables` (array)
          for (int i = 0; i < jsonArrayserverVariables.size(); i++) {
            Item.validateJsonElement(jsonArrayserverVariables.get(i));
          };
        }
      }
      if ((jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) && !jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("titleTemplate") != null && !jsonObj.get("titleTemplate").isJsonNull()) && !jsonObj.get("titleTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `titleTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("titleTemplate").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Message.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Message' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Message> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Message.class));

       return (TypeAdapter<T>) new TypeAdapter<Message>() {
           @Override
           public void write(JsonWriter out, Message value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Message read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Message given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Message
   * @throws IOException if the JSON string is invalid with respect to Message
   */
  public static Message fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Message.class);
  }

  /**
   * Convert an instance of Message to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

