/*
 * elmah.io API
 * This is the public REST API for elmah.io. All of the integrations communicates with elmah.io through this API.<br/><br/>For additional help getting started with the API, visit the following help articles:<br/><ul><li>[Using the REST API](https://docs.elmah.io/using-the-rest-api/)</li><li>[Where is my API key?](https://docs.elmah.io/where-is-my-api-key/)</li><li>[Where is my log ID?](https://docs.elmah.io/where-is-my-log-id/)</li><li>[How to configure API key permissions](https://docs.elmah.io/how-to-configure-api-key-permissions/)</li></ul>
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateHeartbeat;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HeartbeatsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HeartbeatsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HeartbeatsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for heartbeatsCreate
     * @param id The ID of the heartbeat check. (required)
     * @param logId The ID of the log containing the heartbeat check. (required)
     * @param createHeartbeat The details of the heartbeat. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Heartbeat was created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Model not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the heartbeats API without heartbeats enabled or trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified log or heartbeat was not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heartbeatsCreateCall(String id, String logId, CreateHeartbeat createHeartbeat, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createHeartbeat;

        // create path and map variables
        String localVarPath = "/v3/heartbeats/{logId}/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "logId" + "}", localVarApiClient.escapeString(logId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call heartbeatsCreateValidateBeforeCall(String id, String logId, CreateHeartbeat createHeartbeat, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling heartbeatsCreate(Async)");
        }

        // verify the required parameter 'logId' is set
        if (logId == null) {
            throw new ApiException("Missing the required parameter 'logId' when calling heartbeatsCreate(Async)");
        }

        return heartbeatsCreateCall(id, logId, createHeartbeat, _callback);

    }

    /**
     * Create a new heartbeat.
     * Required permission: &#x60;heartbeats_write&#x60;
     * @param id The ID of the heartbeat check. (required)
     * @param logId The ID of the log containing the heartbeat check. (required)
     * @param createHeartbeat The details of the heartbeat. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Heartbeat was created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Model not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the heartbeats API without heartbeats enabled or trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified log or heartbeat was not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public void heartbeatsCreate(String id, String logId, CreateHeartbeat createHeartbeat) throws ApiException {
        heartbeatsCreateWithHttpInfo(id, logId, createHeartbeat);
    }

    /**
     * Create a new heartbeat.
     * Required permission: &#x60;heartbeats_write&#x60;
     * @param id The ID of the heartbeat check. (required)
     * @param logId The ID of the log containing the heartbeat check. (required)
     * @param createHeartbeat The details of the heartbeat. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Heartbeat was created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Model not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the heartbeats API without heartbeats enabled or trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified log or heartbeat was not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> heartbeatsCreateWithHttpInfo(String id, String logId, CreateHeartbeat createHeartbeat) throws ApiException {
        okhttp3.Call localVarCall = heartbeatsCreateValidateBeforeCall(id, logId, createHeartbeat, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new heartbeat. (asynchronously)
     * Required permission: &#x60;heartbeats_write&#x60;
     * @param id The ID of the heartbeat check. (required)
     * @param logId The ID of the log containing the heartbeat check. (required)
     * @param createHeartbeat The details of the heartbeat. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Heartbeat was created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Model not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the heartbeats API without heartbeats enabled or trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified log or heartbeat was not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heartbeatsCreateAsync(String id, String logId, CreateHeartbeat createHeartbeat, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = heartbeatsCreateValidateBeforeCall(id, logId, createHeartbeat, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
