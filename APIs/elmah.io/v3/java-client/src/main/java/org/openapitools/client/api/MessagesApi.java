/*
 * elmah.io API
 * This is the public REST API for elmah.io. All of the integrations communicates with elmah.io through this API.<br/><br/>For additional help getting started with the API, visit the following help articles:<br/><ul><li>[Using the REST API](https://docs.elmah.io/using-the-rest-api/)</li><li>[Where is my API key?](https://docs.elmah.io/where-is-my-api-key/)</li><li>[Where is my log ID?](https://docs.elmah.io/where-is-my-log-id/)</li><li>[How to configure API key permissions](https://docs.elmah.io/how-to-configure-api-key-permissions/)</li></ul>
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateBulkMessageResult;
import org.openapitools.client.model.CreateMessage;
import org.openapitools.client.model.CreateMessageResult;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.MessagesResult;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Search;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MessagesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MessagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MessagesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for messagesCreate
     * @param logId The ID of the log which should contain the new message. (required)
     * @param createMessage The message object to create. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Message was not created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Message was successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Log not found. </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Message too large. Messages must not exceed 256 kb. As additional information, some fields are trimmed down when processed on the backend. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messagesCreateCall(String logId, CreateMessage createMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMessage;

        // create path and map variables
        String localVarPath = "/v3/messages/{logId}"
            .replace("{" + "logId" + "}", localVarApiClient.escapeString(logId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call messagesCreateValidateBeforeCall(String logId, CreateMessage createMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'logId' is set
        if (logId == null) {
            throw new ApiException("Missing the required parameter 'logId' when calling messagesCreate(Async)");
        }

        return messagesCreateCall(logId, createMessage, _callback);

    }

    /**
     * Create a new message.
     * Required permission: &#x60;messages_write&#x60;
     * @param logId The ID of the log which should contain the new message. (required)
     * @param createMessage The message object to create. (optional)
     * @return CreateMessageResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Message was not created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Message was successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Log not found. </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Message too large. Messages must not exceed 256 kb. As additional information, some fields are trimmed down when processed on the backend. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public CreateMessageResult messagesCreate(String logId, CreateMessage createMessage) throws ApiException {
        ApiResponse<CreateMessageResult> localVarResp = messagesCreateWithHttpInfo(logId, createMessage);
        return localVarResp.getData();
    }

    /**
     * Create a new message.
     * Required permission: &#x60;messages_write&#x60;
     * @param logId The ID of the log which should contain the new message. (required)
     * @param createMessage The message object to create. (optional)
     * @return ApiResponse&lt;CreateMessageResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Message was not created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Message was successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Log not found. </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Message too large. Messages must not exceed 256 kb. As additional information, some fields are trimmed down when processed on the backend. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateMessageResult> messagesCreateWithHttpInfo(String logId, CreateMessage createMessage) throws ApiException {
        okhttp3.Call localVarCall = messagesCreateValidateBeforeCall(logId, createMessage, null);
        Type localVarReturnType = new TypeToken<CreateMessageResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new message. (asynchronously)
     * Required permission: &#x60;messages_write&#x60;
     * @param logId The ID of the log which should contain the new message. (required)
     * @param createMessage The message object to create. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Message was not created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Message was successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Log not found. </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Message too large. Messages must not exceed 256 kb. As additional information, some fields are trimmed down when processed on the backend. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messagesCreateAsync(String logId, CreateMessage createMessage, final ApiCallback<CreateMessageResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = messagesCreateValidateBeforeCall(logId, createMessage, _callback);
        Type localVarReturnType = new TypeToken<CreateMessageResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for messagesCreateBulk
     * @param logId The ID of the log which should contain the new messages. (required)
     * @param createMessage The messages to create. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zero or more messages where successfully created. Check the response body for details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Log not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messagesCreateBulkCall(String logId, List<CreateMessage> createMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMessage;

        // create path and map variables
        String localVarPath = "/v3/messages/{logId}/_bulk"
            .replace("{" + "logId" + "}", localVarApiClient.escapeString(logId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call messagesCreateBulkValidateBeforeCall(String logId, List<CreateMessage> createMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'logId' is set
        if (logId == null) {
            throw new ApiException("Missing the required parameter 'logId' when calling messagesCreateBulk(Async)");
        }

        return messagesCreateBulkCall(logId, createMessage, _callback);

    }

    /**
     * Create one or more new messages.
     * Required permission: &#x60;messages_write&#x60;
     * @param logId The ID of the log which should contain the new messages. (required)
     * @param createMessage The messages to create. (optional)
     * @return List&lt;CreateBulkMessageResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zero or more messages where successfully created. Check the response body for details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Log not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public List<CreateBulkMessageResult> messagesCreateBulk(String logId, List<CreateMessage> createMessage) throws ApiException {
        ApiResponse<List<CreateBulkMessageResult>> localVarResp = messagesCreateBulkWithHttpInfo(logId, createMessage);
        return localVarResp.getData();
    }

    /**
     * Create one or more new messages.
     * Required permission: &#x60;messages_write&#x60;
     * @param logId The ID of the log which should contain the new messages. (required)
     * @param createMessage The messages to create. (optional)
     * @return ApiResponse&lt;List&lt;CreateBulkMessageResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zero or more messages where successfully created. Check the response body for details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Log not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CreateBulkMessageResult>> messagesCreateBulkWithHttpInfo(String logId, List<CreateMessage> createMessage) throws ApiException {
        okhttp3.Call localVarCall = messagesCreateBulkValidateBeforeCall(logId, createMessage, null);
        Type localVarReturnType = new TypeToken<List<CreateBulkMessageResult>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create one or more new messages. (asynchronously)
     * Required permission: &#x60;messages_write&#x60;
     * @param logId The ID of the log which should contain the new messages. (required)
     * @param createMessage The messages to create. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zero or more messages where successfully created. Check the response body for details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Log not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messagesCreateBulkAsync(String logId, List<CreateMessage> createMessage, final ApiCallback<List<CreateBulkMessageResult>> _callback) throws ApiException {

        okhttp3.Call localVarCall = messagesCreateBulkValidateBeforeCall(logId, createMessage, _callback);
        Type localVarReturnType = new TypeToken<List<CreateBulkMessageResult>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for messagesDelete
     * @param id The ID of the message to delete. (required)
     * @param logId The ID of the log containing the message. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Message where deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Log or message not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messagesDeleteCall(String id, String logId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/messages/{logId}/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "logId" + "}", localVarApiClient.escapeString(logId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call messagesDeleteValidateBeforeCall(String id, String logId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling messagesDelete(Async)");
        }

        // verify the required parameter 'logId' is set
        if (logId == null) {
            throw new ApiException("Missing the required parameter 'logId' when calling messagesDelete(Async)");
        }

        return messagesDeleteCall(id, logId, _callback);

    }

    /**
     * Delete a message by its ID.
     * Required permission: &#x60;messages_delete&#x60;
     * @param id The ID of the message to delete. (required)
     * @param logId The ID of the log containing the message. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Message where deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Log or message not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public void messagesDelete(String id, String logId) throws ApiException {
        messagesDeleteWithHttpInfo(id, logId);
    }

    /**
     * Delete a message by its ID.
     * Required permission: &#x60;messages_delete&#x60;
     * @param id The ID of the message to delete. (required)
     * @param logId The ID of the log containing the message. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Message where deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Log or message not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> messagesDeleteWithHttpInfo(String id, String logId) throws ApiException {
        okhttp3.Call localVarCall = messagesDeleteValidateBeforeCall(id, logId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a message by its ID. (asynchronously)
     * Required permission: &#x60;messages_delete&#x60;
     * @param id The ID of the message to delete. (required)
     * @param logId The ID of the log containing the message. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Message where deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Log or message not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messagesDeleteAsync(String id, String logId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = messagesDeleteValidateBeforeCall(id, logId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for messagesDeleteAll
     * @param logId The ID of the log containing the message. (required)
     * @param search A search object containing query, time filters etc. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Messages where deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Log not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messagesDeleteAllCall(String logId, Search search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = search;

        // create path and map variables
        String localVarPath = "/v3/messages/{logId}"
            .replace("{" + "logId" + "}", localVarApiClient.escapeString(logId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call messagesDeleteAllValidateBeforeCall(String logId, Search search, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'logId' is set
        if (logId == null) {
            throw new ApiException("Missing the required parameter 'logId' when calling messagesDeleteAll(Async)");
        }

        return messagesDeleteAllCall(logId, search, _callback);

    }

    /**
     * Deletes a list of messages by logid and query.
     * Required permission: &#x60;messages_delete&#x60;
     * @param logId The ID of the log containing the message. (required)
     * @param search A search object containing query, time filters etc. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Messages where deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Log not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public void messagesDeleteAll(String logId, Search search) throws ApiException {
        messagesDeleteAllWithHttpInfo(logId, search);
    }

    /**
     * Deletes a list of messages by logid and query.
     * Required permission: &#x60;messages_delete&#x60;
     * @param logId The ID of the log containing the message. (required)
     * @param search A search object containing query, time filters etc. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Messages where deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Log not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> messagesDeleteAllWithHttpInfo(String logId, Search search) throws ApiException {
        okhttp3.Call localVarCall = messagesDeleteAllValidateBeforeCall(logId, search, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a list of messages by logid and query. (asynchronously)
     * Required permission: &#x60;messages_delete&#x60;
     * @param logId The ID of the log containing the message. (required)
     * @param search A search object containing query, time filters etc. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Messages where deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Log not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messagesDeleteAllAsync(String logId, Search search, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = messagesDeleteAllValidateBeforeCall(logId, search, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for messagesFix
     * @param id The ID of the message to fix. (required)
     * @param logId The ID of the log containing the message. (required)
     * @param markAllAsFixed If set to true, all instances of the log message are set to fixed. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Message was fixed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Message not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messagesFixCall(String id, String logId, Boolean markAllAsFixed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/messages/{logId}/{id}/_fix"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "logId" + "}", localVarApiClient.escapeString(logId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (markAllAsFixed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("markAllAsFixed", markAllAsFixed));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call messagesFixValidateBeforeCall(String id, String logId, Boolean markAllAsFixed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling messagesFix(Async)");
        }

        // verify the required parameter 'logId' is set
        if (logId == null) {
            throw new ApiException("Missing the required parameter 'logId' when calling messagesFix(Async)");
        }

        return messagesFixCall(id, logId, markAllAsFixed, _callback);

    }

    /**
     * Fix a message by its ID.
     * Required permission: &#x60;messages_write&#x60;
     * @param id The ID of the message to fix. (required)
     * @param logId The ID of the log containing the message. (required)
     * @param markAllAsFixed If set to true, all instances of the log message are set to fixed. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Message was fixed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Message not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public void messagesFix(String id, String logId, Boolean markAllAsFixed) throws ApiException {
        messagesFixWithHttpInfo(id, logId, markAllAsFixed);
    }

    /**
     * Fix a message by its ID.
     * Required permission: &#x60;messages_write&#x60;
     * @param id The ID of the message to fix. (required)
     * @param logId The ID of the log containing the message. (required)
     * @param markAllAsFixed If set to true, all instances of the log message are set to fixed. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Message was fixed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Message not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> messagesFixWithHttpInfo(String id, String logId, Boolean markAllAsFixed) throws ApiException {
        okhttp3.Call localVarCall = messagesFixValidateBeforeCall(id, logId, markAllAsFixed, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Fix a message by its ID. (asynchronously)
     * Required permission: &#x60;messages_write&#x60;
     * @param id The ID of the message to fix. (required)
     * @param logId The ID of the log containing the message. (required)
     * @param markAllAsFixed If set to true, all instances of the log message are set to fixed. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Message was fixed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Message not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messagesFixAsync(String id, String logId, Boolean markAllAsFixed, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = messagesFixValidateBeforeCall(id, logId, markAllAsFixed, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for messagesFixAll
     * @param logId The ID of the log containing the messages. (required)
     * @param search A search object containing query, time filters etc. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Messages where marked as fixed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Log not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messagesFixAllCall(String logId, Search search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = search;

        // create path and map variables
        String localVarPath = "/v3/messages/{logId}/_fix"
            .replace("{" + "logId" + "}", localVarApiClient.escapeString(logId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call messagesFixAllValidateBeforeCall(String logId, Search search, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'logId' is set
        if (logId == null) {
            throw new ApiException("Missing the required parameter 'logId' when calling messagesFixAll(Async)");
        }

        return messagesFixAllCall(logId, search, _callback);

    }

    /**
     * Mark a list of messages as fixed by logid and query.
     * Required permission: &#x60;messages_write&#x60;
     * @param logId The ID of the log containing the messages. (required)
     * @param search A search object containing query, time filters etc. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Messages where marked as fixed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Log not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public void messagesFixAll(String logId, Search search) throws ApiException {
        messagesFixAllWithHttpInfo(logId, search);
    }

    /**
     * Mark a list of messages as fixed by logid and query.
     * Required permission: &#x60;messages_write&#x60;
     * @param logId The ID of the log containing the messages. (required)
     * @param search A search object containing query, time filters etc. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Messages where marked as fixed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Log not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> messagesFixAllWithHttpInfo(String logId, Search search) throws ApiException {
        okhttp3.Call localVarCall = messagesFixAllValidateBeforeCall(logId, search, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Mark a list of messages as fixed by logid and query. (asynchronously)
     * Required permission: &#x60;messages_write&#x60;
     * @param logId The ID of the log containing the messages. (required)
     * @param search A search object containing query, time filters etc. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Messages where marked as fixed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Log not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messagesFixAllAsync(String logId, Search search, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = messagesFixAllValidateBeforeCall(logId, search, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for messagesGet
     * @param id The ID of the message to fetch. (required)
     * @param logId The ID of the log containing the message. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Message found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Message not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messagesGetCall(String id, String logId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/messages/{logId}/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "logId" + "}", localVarApiClient.escapeString(logId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call messagesGetValidateBeforeCall(String id, String logId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling messagesGet(Async)");
        }

        // verify the required parameter 'logId' is set
        if (logId == null) {
            throw new ApiException("Missing the required parameter 'logId' when calling messagesGet(Async)");
        }

        return messagesGetCall(id, logId, _callback);

    }

    /**
     * Fetch a message by its ID.
     * Required permission: &#x60;messages_read&#x60;
     * @param id The ID of the message to fetch. (required)
     * @param logId The ID of the log containing the message. (required)
     * @return Message
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Message found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Message not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public Message messagesGet(String id, String logId) throws ApiException {
        ApiResponse<Message> localVarResp = messagesGetWithHttpInfo(id, logId);
        return localVarResp.getData();
    }

    /**
     * Fetch a message by its ID.
     * Required permission: &#x60;messages_read&#x60;
     * @param id The ID of the message to fetch. (required)
     * @param logId The ID of the log containing the message. (required)
     * @return ApiResponse&lt;Message&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Message found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Message not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Message> messagesGetWithHttpInfo(String id, String logId) throws ApiException {
        okhttp3.Call localVarCall = messagesGetValidateBeforeCall(id, logId, null);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a message by its ID. (asynchronously)
     * Required permission: &#x60;messages_read&#x60;
     * @param id The ID of the message to fetch. (required)
     * @param logId The ID of the log containing the message. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Message found. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Message not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messagesGetAsync(String id, String logId, final ApiCallback<Message> _callback) throws ApiException {

        okhttp3.Call localVarCall = messagesGetValidateBeforeCall(id, logId, _callback);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for messagesGetAll
     * @param logId The ID of the log containing the messages. (required)
     * @param pageIndex The page number of the result. (optional, default to 0)
     * @param pageSize The number of messages to load (max 100) or 15 if not set. (optional, default to 15)
     * @param query A full-text or Lucene query to limit the messages by. (optional)
     * @param from A start date and time to search from (not included). (optional)
     * @param to An end date and time to search to (not included). (optional)
     * @param includeHeaders Include headers like server variables and cookies in the result (slower). (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log found and may contain messages. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messagesGetAllCall(String logId, Integer pageIndex, Integer pageSize, String query, OffsetDateTime from, OffsetDateTime to, Boolean includeHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/messages/{logId}"
            .replace("{" + "logId" + "}", localVarApiClient.escapeString(logId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (includeHeaders != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeHeaders", includeHeaders));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call messagesGetAllValidateBeforeCall(String logId, Integer pageIndex, Integer pageSize, String query, OffsetDateTime from, OffsetDateTime to, Boolean includeHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'logId' is set
        if (logId == null) {
            throw new ApiException("Missing the required parameter 'logId' when calling messagesGetAll(Async)");
        }

        return messagesGetAllCall(logId, pageIndex, pageSize, query, from, to, includeHeaders, _callback);

    }

    /**
     * Fetch messages from a log.
     * Required permission: &#x60;messages_read&#x60;
     * @param logId The ID of the log containing the messages. (required)
     * @param pageIndex The page number of the result. (optional, default to 0)
     * @param pageSize The number of messages to load (max 100) or 15 if not set. (optional, default to 15)
     * @param query A full-text or Lucene query to limit the messages by. (optional)
     * @param from A start date and time to search from (not included). (optional)
     * @param to An end date and time to search to (not included). (optional)
     * @param includeHeaders Include headers like server variables and cookies in the result (slower). (optional, default to false)
     * @return MessagesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log found and may contain messages. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public MessagesResult messagesGetAll(String logId, Integer pageIndex, Integer pageSize, String query, OffsetDateTime from, OffsetDateTime to, Boolean includeHeaders) throws ApiException {
        ApiResponse<MessagesResult> localVarResp = messagesGetAllWithHttpInfo(logId, pageIndex, pageSize, query, from, to, includeHeaders);
        return localVarResp.getData();
    }

    /**
     * Fetch messages from a log.
     * Required permission: &#x60;messages_read&#x60;
     * @param logId The ID of the log containing the messages. (required)
     * @param pageIndex The page number of the result. (optional, default to 0)
     * @param pageSize The number of messages to load (max 100) or 15 if not set. (optional, default to 15)
     * @param query A full-text or Lucene query to limit the messages by. (optional)
     * @param from A start date and time to search from (not included). (optional)
     * @param to An end date and time to search to (not included). (optional)
     * @param includeHeaders Include headers like server variables and cookies in the result (slower). (optional, default to false)
     * @return ApiResponse&lt;MessagesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log found and may contain messages. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessagesResult> messagesGetAllWithHttpInfo(String logId, Integer pageIndex, Integer pageSize, String query, OffsetDateTime from, OffsetDateTime to, Boolean includeHeaders) throws ApiException {
        okhttp3.Call localVarCall = messagesGetAllValidateBeforeCall(logId, pageIndex, pageSize, query, from, to, includeHeaders, null);
        Type localVarReturnType = new TypeToken<MessagesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch messages from a log. (asynchronously)
     * Required permission: &#x60;messages_read&#x60;
     * @param logId The ID of the log containing the messages. (required)
     * @param pageIndex The page number of the result. (optional, default to 0)
     * @param pageSize The number of messages to load (max 100) or 15 if not set. (optional, default to 15)
     * @param query A full-text or Lucene query to limit the messages by. (optional)
     * @param from A start date and time to search from (not included). (optional)
     * @param to An end date and time to search to (not included). (optional)
     * @param includeHeaders Include headers like server variables and cookies in the result (slower). (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log found and may contain messages. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messagesGetAllAsync(String logId, Integer pageIndex, Integer pageSize, String query, OffsetDateTime from, OffsetDateTime to, Boolean includeHeaders, final ApiCallback<MessagesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = messagesGetAllValidateBeforeCall(logId, pageIndex, pageSize, query, from, to, includeHeaders, _callback);
        Type localVarReturnType = new TypeToken<MessagesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for messagesHide
     * @param id The ID of the message to hide. (required)
     * @param logId The ID of the log containing the message. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Message was hidden. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Message not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messagesHideCall(String id, String logId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/messages/{logId}/{id}/_hide"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "logId" + "}", localVarApiClient.escapeString(logId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call messagesHideValidateBeforeCall(String id, String logId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling messagesHide(Async)");
        }

        // verify the required parameter 'logId' is set
        if (logId == null) {
            throw new ApiException("Missing the required parameter 'logId' when calling messagesHide(Async)");
        }

        return messagesHideCall(id, logId, _callback);

    }

    /**
     * Hide a message by its ID.
     * Required permission: &#x60;messages_write&#x60;
     * @param id The ID of the message to hide. (required)
     * @param logId The ID of the log containing the message. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Message was hidden. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Message not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public void messagesHide(String id, String logId) throws ApiException {
        messagesHideWithHttpInfo(id, logId);
    }

    /**
     * Hide a message by its ID.
     * Required permission: &#x60;messages_write&#x60;
     * @param id The ID of the message to hide. (required)
     * @param logId The ID of the log containing the message. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Message was hidden. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Message not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> messagesHideWithHttpInfo(String id, String logId) throws ApiException {
        okhttp3.Call localVarCall = messagesHideValidateBeforeCall(id, logId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Hide a message by its ID. (asynchronously)
     * Required permission: &#x60;messages_write&#x60;
     * @param id The ID of the message to hide. (required)
     * @param logId The ID of the log containing the message. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Message was hidden. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Something wrong with the query parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> API key not valid or no access to resource. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Tried to call the logs API but the trial expired. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Message not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> A maximum of 500 requests per minute and 3600 requests per hour are permitted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call messagesHideAsync(String id, String logId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = messagesHideValidateBeforeCall(id, logId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
