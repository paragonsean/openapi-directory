/*
 * elmah.io API
 * This is the public REST API for elmah.io. All of the integrations communicates with elmah.io through this API.<br/><br/>For additional help getting started with the API, visit the following help articles:<br/><ul><li>[Using the REST API](https://docs.elmah.io/using-the-rest-api/)</li><li>[Where is my API key?](https://docs.elmah.io/where-is-my-api-key/)</li><li>[Where is my log ID?](https://docs.elmah.io/where-is-my-log-id/)</li><li>[How to configure API key permissions](https://docs.elmah.io/how-to-configure-api-key-permissions/)</li></ul>
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateBulkMessageResult;
import org.openapitools.client.model.CreateMessage;
import org.openapitools.client.model.CreateMessageResult;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.MessagesResult;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Search;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MessagesApi
 */
@Disabled
public class MessagesApiTest {

    private final MessagesApi api = new MessagesApi();

    /**
     * Create a new message.
     *
     * Required permission: &#x60;messages_write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void messagesCreateTest() throws ApiException {
        String logId = null;
        CreateMessage createMessage = null;
        CreateMessageResult response = api.messagesCreate(logId, createMessage);
        // TODO: test validations
    }

    /**
     * Create one or more new messages.
     *
     * Required permission: &#x60;messages_write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void messagesCreateBulkTest() throws ApiException {
        String logId = null;
        List<CreateMessage> createMessage = null;
        List<CreateBulkMessageResult> response = api.messagesCreateBulk(logId, createMessage);
        // TODO: test validations
    }

    /**
     * Delete a message by its ID.
     *
     * Required permission: &#x60;messages_delete&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void messagesDeleteTest() throws ApiException {
        String id = null;
        String logId = null;
        api.messagesDelete(id, logId);
        // TODO: test validations
    }

    /**
     * Deletes a list of messages by logid and query.
     *
     * Required permission: &#x60;messages_delete&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void messagesDeleteAllTest() throws ApiException {
        String logId = null;
        Search search = null;
        api.messagesDeleteAll(logId, search);
        // TODO: test validations
    }

    /**
     * Fix a message by its ID.
     *
     * Required permission: &#x60;messages_write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void messagesFixTest() throws ApiException {
        String id = null;
        String logId = null;
        Boolean markAllAsFixed = null;
        api.messagesFix(id, logId, markAllAsFixed);
        // TODO: test validations
    }

    /**
     * Mark a list of messages as fixed by logid and query.
     *
     * Required permission: &#x60;messages_write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void messagesFixAllTest() throws ApiException {
        String logId = null;
        Search search = null;
        api.messagesFixAll(logId, search);
        // TODO: test validations
    }

    /**
     * Fetch a message by its ID.
     *
     * Required permission: &#x60;messages_read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void messagesGetTest() throws ApiException {
        String id = null;
        String logId = null;
        Message response = api.messagesGet(id, logId);
        // TODO: test validations
    }

    /**
     * Fetch messages from a log.
     *
     * Required permission: &#x60;messages_read&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void messagesGetAllTest() throws ApiException {
        String logId = null;
        Integer pageIndex = null;
        Integer pageSize = null;
        String query = null;
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        Boolean includeHeaders = null;
        MessagesResult response = api.messagesGetAll(logId, pageIndex, pageSize, query, from, to, includeHeaders);
        // TODO: test validations
    }

    /**
     * Hide a message by its ID.
     *
     * Required permission: &#x60;messages_write&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void messagesHideTest() throws ApiException {
        String id = null;
        String logId = null;
        api.messagesHide(id, logId);
        // TODO: test validations
    }

}
