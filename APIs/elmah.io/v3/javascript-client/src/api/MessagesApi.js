/**
 * elmah.io API
 * This is the public REST API for elmah.io. All of the integrations communicates with elmah.io through this API.<br/><br/>For additional help getting started with the API, visit the following help articles:<br/><ul><li>[Using the REST API](https://docs.elmah.io/using-the-rest-api/)</li><li>[Where is my API key?](https://docs.elmah.io/where-is-my-api-key/)</li><li>[Where is my log ID?](https://docs.elmah.io/where-is-my-log-id/)</li><li>[How to configure API key permissions](https://docs.elmah.io/how-to-configure-api-key-permissions/)</li></ul>
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateBulkMessageResult from '../model/CreateBulkMessageResult';
import CreateMessage from '../model/CreateMessage';
import CreateMessageResult from '../model/CreateMessageResult';
import Message from '../model/Message';
import MessagesResult from '../model/MessagesResult';
import Search from '../model/Search';

/**
* Messages service.
* @module api/MessagesApi
* @version v3
*/
export default class MessagesApi {

    /**
    * Constructs a new MessagesApi. 
    * @alias module:api/MessagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the messagesCreate operation.
     * @callback module:api/MessagesApi~messagesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateMessageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new message.
     * Required permission: `messages_write`
     * @param {String} logId The ID of the log which should contain the new message.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMessage} [createMessage] The message object to create.
     * @param {module:api/MessagesApi~messagesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateMessageResult}
     */
    messagesCreate(logId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createMessage'];
      // verify the required parameter 'logId' is set
      if (logId === undefined || logId === null) {
        throw new Error("Missing the required parameter 'logId' when calling messagesCreate");
      }

      let pathParams = {
        'logId': logId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = CreateMessageResult;
      return this.apiClient.callApi(
        '/v3/messages/{logId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the messagesCreateBulk operation.
     * @callback module:api/MessagesApi~messagesCreateBulkCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CreateBulkMessageResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create one or more new messages.
     * Required permission: `messages_write`
     * @param {String} logId The ID of the log which should contain the new messages.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/CreateMessage>} [createMessage] The messages to create.
     * @param {module:api/MessagesApi~messagesCreateBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CreateBulkMessageResult>}
     */
    messagesCreateBulk(logId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createMessage'];
      // verify the required parameter 'logId' is set
      if (logId === undefined || logId === null) {
        throw new Error("Missing the required parameter 'logId' when calling messagesCreateBulk");
      }

      let pathParams = {
        'logId': logId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [CreateBulkMessageResult];
      return this.apiClient.callApi(
        '/v3/messages/{logId}/_bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the messagesDelete operation.
     * @callback module:api/MessagesApi~messagesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a message by its ID.
     * Required permission: `messages_delete`
     * @param {String} id The ID of the message to delete.
     * @param {String} logId The ID of the log containing the message.
     * @param {module:api/MessagesApi~messagesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    messagesDelete(id, logId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling messagesDelete");
      }
      // verify the required parameter 'logId' is set
      if (logId === undefined || logId === null) {
        throw new Error("Missing the required parameter 'logId' when calling messagesDelete");
      }

      let pathParams = {
        'id': id,
        'logId': logId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/messages/{logId}/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the messagesDeleteAll operation.
     * @callback module:api/MessagesApi~messagesDeleteAllCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a list of messages by logid and query.
     * Required permission: `messages_delete`
     * @param {String} logId The ID of the log containing the message.
     * @param {Object} opts Optional parameters
     * @param {module:model/Search} [search] A search object containing query, time filters etc.
     * @param {module:api/MessagesApi~messagesDeleteAllCallback} callback The callback function, accepting three arguments: error, data, response
     */
    messagesDeleteAll(logId, opts, callback) {
      opts = opts || {};
      let postBody = opts['search'];
      // verify the required parameter 'logId' is set
      if (logId === undefined || logId === null) {
        throw new Error("Missing the required parameter 'logId' when calling messagesDeleteAll");
      }

      let pathParams = {
        'logId': logId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/messages/{logId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the messagesFix operation.
     * @callback module:api/MessagesApi~messagesFixCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fix a message by its ID.
     * Required permission: `messages_write`
     * @param {String} id The ID of the message to fix.
     * @param {String} logId The ID of the log containing the message.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [markAllAsFixed = false)] If set to true, all instances of the log message are set to fixed.
     * @param {module:api/MessagesApi~messagesFixCallback} callback The callback function, accepting three arguments: error, data, response
     */
    messagesFix(id, logId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling messagesFix");
      }
      // verify the required parameter 'logId' is set
      if (logId === undefined || logId === null) {
        throw new Error("Missing the required parameter 'logId' when calling messagesFix");
      }

      let pathParams = {
        'id': id,
        'logId': logId
      };
      let queryParams = {
        'markAllAsFixed': opts['markAllAsFixed']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/messages/{logId}/{id}/_fix', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the messagesFixAll operation.
     * @callback module:api/MessagesApi~messagesFixAllCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark a list of messages as fixed by logid and query.
     * Required permission: `messages_write`
     * @param {String} logId The ID of the log containing the messages.
     * @param {Object} opts Optional parameters
     * @param {module:model/Search} [search] A search object containing query, time filters etc.
     * @param {module:api/MessagesApi~messagesFixAllCallback} callback The callback function, accepting three arguments: error, data, response
     */
    messagesFixAll(logId, opts, callback) {
      opts = opts || {};
      let postBody = opts['search'];
      // verify the required parameter 'logId' is set
      if (logId === undefined || logId === null) {
        throw new Error("Missing the required parameter 'logId' when calling messagesFixAll");
      }

      let pathParams = {
        'logId': logId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/messages/{logId}/_fix', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the messagesGet operation.
     * @callback module:api/MessagesApi~messagesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a message by its ID.
     * Required permission: `messages_read`
     * @param {String} id The ID of the message to fetch.
     * @param {String} logId The ID of the log containing the message.
     * @param {module:api/MessagesApi~messagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Message}
     */
    messagesGet(id, logId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling messagesGet");
      }
      // verify the required parameter 'logId' is set
      if (logId === undefined || logId === null) {
        throw new Error("Missing the required parameter 'logId' when calling messagesGet");
      }

      let pathParams = {
        'id': id,
        'logId': logId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = Message;
      return this.apiClient.callApi(
        '/v3/messages/{logId}/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the messagesGetAll operation.
     * @callback module:api/MessagesApi~messagesGetAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessagesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch messages from a log.
     * Required permission: `messages_read`
     * @param {String} logId The ID of the log containing the messages.
     * @param {Object} opts Optional parameters
     * @param {Number} [pageIndex = 0)] The page number of the result.
     * @param {Number} [pageSize = 15)] The number of messages to load (max 100) or 15 if not set.
     * @param {String} [query] A full-text or Lucene query to limit the messages by.
     * @param {Date} [from] A start date and time to search from (not included).
     * @param {Date} [to] An end date and time to search to (not included).
     * @param {Boolean} [includeHeaders = false)] Include headers like server variables and cookies in the result (slower).
     * @param {module:api/MessagesApi~messagesGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessagesResult}
     */
    messagesGetAll(logId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'logId' is set
      if (logId === undefined || logId === null) {
        throw new Error("Missing the required parameter 'logId' when calling messagesGetAll");
      }

      let pathParams = {
        'logId': logId
      };
      let queryParams = {
        'pageIndex': opts['pageIndex'],
        'pageSize': opts['pageSize'],
        'query': opts['query'],
        'from': opts['from'],
        'to': opts['to'],
        'includeHeaders': opts['includeHeaders']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = MessagesResult;
      return this.apiClient.callApi(
        '/v3/messages/{logId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the messagesHide operation.
     * @callback module:api/MessagesApi~messagesHideCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Hide a message by its ID.
     * Required permission: `messages_write`
     * @param {String} id The ID of the message to hide.
     * @param {String} logId The ID of the log containing the message.
     * @param {module:api/MessagesApi~messagesHideCallback} callback The callback function, accepting three arguments: error, data, response
     */
    messagesHide(id, logId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling messagesHide");
      }
      // verify the required parameter 'logId' is set
      if (logId === undefined || logId === null) {
        throw new Error("Missing the required parameter 'logId' when calling messagesHide");
      }

      let pathParams = {
        'id': id,
        'logId': logId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/messages/{logId}/{id}/_hide', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
