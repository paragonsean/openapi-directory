/**
 * elmah.io API
 * This is the public REST API for elmah.io. All of the integrations communicates with elmah.io through this API.<br/><br/>For additional help getting started with the API, visit the following help articles:<br/><ul><li>[Using the REST API](https://docs.elmah.io/using-the-rest-api/)</li><li>[Where is my API key?](https://docs.elmah.io/where-is-my-api-key/)</li><li>[Where is my log ID?](https://docs.elmah.io/where-is-my-log-id/)</li><li>[How to configure API key permissions](https://docs.elmah.io/how-to-configure-api-key-permissions/)</li></ul>
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateHeartbeat model module.
 * @module model/CreateHeartbeat
 * @version v3
 */
class CreateHeartbeat {
    /**
     * Constructs a new <code>CreateHeartbeat</code>.
     * @alias module:model/CreateHeartbeat
     */
    constructor() { 
        
        CreateHeartbeat.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateHeartbeat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateHeartbeat} obj Optional instance to populate.
     * @return {module:model/CreateHeartbeat} The populated <code>CreateHeartbeat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateHeartbeat();

            if (data.hasOwnProperty('application')) {
                obj['application'] = ApiClient.convertToType(data['application'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], 'String');
            }
            if (data.hasOwnProperty('took')) {
                obj['took'] = ApiClient.convertToType(data['took'], 'Number');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateHeartbeat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateHeartbeat</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['application'] && !(typeof data['application'] === 'string' || data['application'] instanceof String)) {
            throw new Error("Expected the field `application` to be a primitive type in the JSON string but got " + data['application']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['result'] && !(typeof data['result'] === 'string' || data['result'] instanceof String)) {
            throw new Error("Expected the field `result` to be a primitive type in the JSON string but got " + data['result']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * Optional string to identify which application logged this message. You can use this if you have multiple applications and services logging to the same log.  If not set, the application name \"Heartbeats\" will be set on all log messages generated from this heartbeat.
 * @member {String} application
 */
CreateHeartbeat.prototype['application'] = undefined;

/**
 * If result is \"Degraded\" or \"Unhealthy\" you can use this property to specify why.
 * @member {String} reason
 */
CreateHeartbeat.prototype['reason'] = undefined;

/**
 * The result of this heartbeat. Can be \"Healthy, \"Degraded\", or \"Unhealthy\". Defaults to \"Healthy\"
 * @member {String} result
 */
CreateHeartbeat.prototype['result'] = undefined;

/**
 * Optional long for specifying how many milliseconds it took to execute the task resulting in this heartbeat. This can be used to get a better overview  of how long a scheduled task or service is running or to figure out if the grace period should be increased.
 * @member {Number} took
 */
CreateHeartbeat.prototype['took'] = undefined;

/**
 * Optional string to identify which version of your application logged this message. If not specified, any errors, warnings, or information messages will get  the newest version number created through deployment tracking as with normal log messages.
 * @member {String} version
 */
CreateHeartbeat.prototype['version'] = undefined;






export default CreateHeartbeat;

