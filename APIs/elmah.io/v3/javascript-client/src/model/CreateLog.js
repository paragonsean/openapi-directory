/**
 * elmah.io API
 * This is the public REST API for elmah.io. All of the integrations communicates with elmah.io through this API.<br/><br/>For additional help getting started with the API, visit the following help articles:<br/><ul><li>[Using the REST API](https://docs.elmah.io/using-the-rest-api/)</li><li>[Where is my API key?](https://docs.elmah.io/where-is-my-api-key/)</li><li>[Where is my log ID?](https://docs.elmah.io/where-is-my-log-id/)</li><li>[How to configure API key permissions](https://docs.elmah.io/how-to-configure-api-key-permissions/)</li></ul>
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateLog model module.
 * @module model/CreateLog
 * @version v3
 */
class CreateLog {
    /**
     * Constructs a new <code>CreateLog</code>.
     * @alias module:model/CreateLog
     * @param name {String} Name of the new log.
     */
    constructor(name) { 
        
        CreateLog.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>CreateLog</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateLog} obj Optional instance to populate.
     * @return {module:model/CreateLog} The populated <code>CreateLog</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateLog();

            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('environmentName')) {
                obj['environmentName'] = ApiClient.convertToType(data['environmentName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateLog</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateLog</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateLog.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // ensure the json data is a string
        if (data['environmentName'] && !(typeof data['environmentName'] === 'string' || data['environmentName'] instanceof String)) {
            throw new Error("Expected the field `environmentName` to be a primitive type in the JSON string but got " + data['environmentName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

CreateLog.RequiredProperties = ["name"];

/**
 * Color of the log. The color must be one of the following (green on unknown value or missing):  green, lightgreen, lime, yellow, orange, deeporange, red, pink, purple, deeppurple, blue, lightblue
 * @member {String} color
 */
CreateLog.prototype['color'] = undefined;

/**
 * Set to true to disable the log on creation. Defaults to false. A log can be enabled/disabled  afterwards by calling the _disable and _enable endpoints.
 * @member {Boolean} disabled
 */
CreateLog.prototype['disabled'] = undefined;

/**
 * Environment name of the new log. Must match an environment name (case insensitive).  If a matching environment name was not found or the property is not set, the log  will appear under \"Other\" in the UI.
 * @member {String} environmentName
 */
CreateLog.prototype['environmentName'] = undefined;

/**
 * Name of the new log.
 * @member {String} name
 */
CreateLog.prototype['name'] = undefined;






export default CreateLog;

