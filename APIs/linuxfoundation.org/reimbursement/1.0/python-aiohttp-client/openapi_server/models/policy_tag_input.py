# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PolicyTagInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, ticket_id: str=None, txn_type: str=None, username: str=None):
        """PolicyTagInput - a model defined in OpenAPI

        :param email: The email of this PolicyTagInput.
        :param ticket_id: The ticket_id of this PolicyTagInput.
        :param txn_type: The txn_type of this PolicyTagInput.
        :param username: The username of this PolicyTagInput.
        """
        self.openapi_types = {
            'email': str,
            'ticket_id': str,
            'txn_type': str,
            'username': str
        }

        self.attribute_map = {
            'email': 'Email',
            'ticket_id': 'TicketID',
            'txn_type': 'TxnType',
            'username': 'Username'
        }

        self._email = email
        self._ticket_id = ticket_id
        self._txn_type = txn_type
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyTagInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The policy-tag-input of this PolicyTagInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this PolicyTagInput.

        email of the individual or beneficiary

        :return: The email of this PolicyTagInput.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PolicyTagInput.

        email of the individual or beneficiary

        :param email: The email of this PolicyTagInput.
        :type email: str
        """

        self._email = email

    @property
    def ticket_id(self):
        """Gets the ticket_id of this PolicyTagInput.

        Unique ID of the ticket - required for travel funds

        :return: The ticket_id of this PolicyTagInput.
        :rtype: str
        """
        return self._ticket_id

    @ticket_id.setter
    def ticket_id(self, ticket_id):
        """Sets the ticket_id of this PolicyTagInput.

        Unique ID of the ticket - required for travel funds

        :param ticket_id: The ticket_id of this PolicyTagInput.
        :type ticket_id: str
        """

        self._ticket_id = ticket_id

    @property
    def txn_type(self):
        """Gets the txn_type of this PolicyTagInput.

        Type of transaction

        :return: The txn_type of this PolicyTagInput.
        :rtype: str
        """
        return self._txn_type

    @txn_type.setter
    def txn_type(self, txn_type):
        """Sets the txn_type of this PolicyTagInput.

        Type of transaction

        :param txn_type: The txn_type of this PolicyTagInput.
        :type txn_type: str
        """

        self._txn_type = txn_type

    @property
    def username(self):
        """Gets the username of this PolicyTagInput.

        Unique username or lfId of the individual

        :return: The username of this PolicyTagInput.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this PolicyTagInput.

        Unique username or lfId of the individual

        :param username: The username of this PolicyTagInput.
        :type username: str
        """

        self._username = username
