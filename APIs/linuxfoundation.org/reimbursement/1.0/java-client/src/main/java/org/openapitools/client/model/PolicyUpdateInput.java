/*
 * Reimbursements API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Contact;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Reimbursement update information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:14.827040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PolicyUpdateInput {
  public static final String SERIALIZED_NAME_BENEFICIARIES = "Beneficiaries";
  @SerializedName(SERIALIZED_NAME_BENEFICIARIES)
  private List<Contact> beneficiaries = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORIES = "Categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<String> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "EntityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private String entityType;

  public static final String SERIALIZED_NAME_OWNER = "Owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private Contact owner;

  public static final String SERIALIZED_NAME_PROJECT_U_R_L = "ProjectURL";
  @SerializedName(SERIALIZED_NAME_PROJECT_U_R_L)
  private String projectURL;

  public PolicyUpdateInput() {
  }

  public PolicyUpdateInput beneficiaries(List<Contact> beneficiaries) {
    this.beneficiaries = beneficiaries;
    return this;
  }

  public PolicyUpdateInput addBeneficiariesItem(Contact beneficiariesItem) {
    if (this.beneficiaries == null) {
      this.beneficiaries = new ArrayList<>();
    }
    this.beneficiaries.add(beneficiariesItem);
    return this;
  }

  /**
   * Get beneficiaries
   * @return beneficiaries
   */
  @javax.annotation.Nullable
  public List<Contact> getBeneficiaries() {
    return beneficiaries;
  }

  public void setBeneficiaries(List<Contact> beneficiaries) {
    this.beneficiaries = beneficiaries;
  }


  public PolicyUpdateInput categories(List<String> categories) {
    this.categories = categories;
    return this;
  }

  public PolicyUpdateInput addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * Get categories
   * @return categories
   */
  @javax.annotation.Nonnull
  public List<String> getCategories() {
    return categories;
  }

  public void setCategories(List<String> categories) {
    this.categories = categories;
  }


  public PolicyUpdateInput entityType(String entityType) {
    this.entityType = entityType;
    return this;
  }

  /**
   * Get entityType
   * @return entityType
   */
  @javax.annotation.Nullable
  public String getEntityType() {
    return entityType;
  }

  public void setEntityType(String entityType) {
    this.entityType = entityType;
  }


  public PolicyUpdateInput owner(Contact owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nonnull
  public Contact getOwner() {
    return owner;
  }

  public void setOwner(Contact owner) {
    this.owner = owner;
  }


  public PolicyUpdateInput projectURL(String projectURL) {
    this.projectURL = projectURL;
    return this;
  }

  /**
   * Get projectURL
   * @return projectURL
   */
  @javax.annotation.Nonnull
  public String getProjectURL() {
    return projectURL;
  }

  public void setProjectURL(String projectURL) {
    this.projectURL = projectURL;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicyUpdateInput policyUpdateInput = (PolicyUpdateInput) o;
    return Objects.equals(this.beneficiaries, policyUpdateInput.beneficiaries) &&
        Objects.equals(this.categories, policyUpdateInput.categories) &&
        Objects.equals(this.entityType, policyUpdateInput.entityType) &&
        Objects.equals(this.owner, policyUpdateInput.owner) &&
        Objects.equals(this.projectURL, policyUpdateInput.projectURL);
  }

  @Override
  public int hashCode() {
    return Objects.hash(beneficiaries, categories, entityType, owner, projectURL);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyUpdateInput {\n");
    sb.append("    beneficiaries: ").append(toIndentedString(beneficiaries)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    projectURL: ").append(toIndentedString(projectURL)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Beneficiaries");
    openapiFields.add("Categories");
    openapiFields.add("EntityType");
    openapiFields.add("Owner");
    openapiFields.add("ProjectURL");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Categories");
    openapiRequiredFields.add("Owner");
    openapiRequiredFields.add("ProjectURL");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PolicyUpdateInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PolicyUpdateInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PolicyUpdateInput is not found in the empty JSON string", PolicyUpdateInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PolicyUpdateInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PolicyUpdateInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PolicyUpdateInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Beneficiaries") != null && !jsonObj.get("Beneficiaries").isJsonNull()) {
        JsonArray jsonArraybeneficiaries = jsonObj.getAsJsonArray("Beneficiaries");
        if (jsonArraybeneficiaries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Beneficiaries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Beneficiaries` to be an array in the JSON string but got `%s`", jsonObj.get("Beneficiaries").toString()));
          }

          // validate the optional field `Beneficiaries` (array)
          for (int i = 0; i < jsonArraybeneficiaries.size(); i++) {
            Contact.validateJsonElement(jsonArraybeneficiaries.get(i));
          };
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("Categories") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("Categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Categories` to be an array in the JSON string but got `%s`", jsonObj.get("Categories").toString()));
      }
      if ((jsonObj.get("EntityType") != null && !jsonObj.get("EntityType").isJsonNull()) && !jsonObj.get("EntityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EntityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EntityType").toString()));
      }
      // validate the required field `Owner`
      Contact.validateJsonElement(jsonObj.get("Owner"));
      if (!jsonObj.get("ProjectURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProjectURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProjectURL").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PolicyUpdateInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PolicyUpdateInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PolicyUpdateInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PolicyUpdateInput.class));

       return (TypeAdapter<T>) new TypeAdapter<PolicyUpdateInput>() {
           @Override
           public void write(JsonWriter out, PolicyUpdateInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PolicyUpdateInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PolicyUpdateInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PolicyUpdateInput
   * @throws IOException if the JSON string is invalid with respect to PolicyUpdateInput
   */
  public static PolicyUpdateInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PolicyUpdateInput.class);
  }

  /**
   * Convert an instance of PolicyUpdateInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

