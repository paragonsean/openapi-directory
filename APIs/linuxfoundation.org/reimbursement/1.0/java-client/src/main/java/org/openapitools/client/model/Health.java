/*
 * Reimbursements API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HealthStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Health
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:14.827040-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Health {
  public static final String SERIALIZED_NAME_BUILD_TIME_STAMP = "BuildTimeStamp";
  @SerializedName(SERIALIZED_NAME_BUILD_TIME_STAMP)
  private String buildTimeStamp;

  public static final String SERIALIZED_NAME_GITHASH = "Githash";
  @SerializedName(SERIALIZED_NAME_GITHASH)
  private String githash;

  public static final String SERIALIZED_NAME_HEALTHS = "Healths";
  @SerializedName(SERIALIZED_NAME_HEALTHS)
  private List<HealthStatus> healths = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TIME_STAMP = "TimeStamp";
  @SerializedName(SERIALIZED_NAME_TIME_STAMP)
  private String timeStamp;

  public Health() {
  }

  public Health buildTimeStamp(String buildTimeStamp) {
    this.buildTimeStamp = buildTimeStamp;
    return this;
  }

  /**
   * Time the service was built and deployed
   * @return buildTimeStamp
   */
  @javax.annotation.Nullable
  public String getBuildTimeStamp() {
    return buildTimeStamp;
  }

  public void setBuildTimeStamp(String buildTimeStamp) {
    this.buildTimeStamp = buildTimeStamp;
  }


  public Health githash(String githash) {
    this.githash = githash;
    return this;
  }

  /**
   * hash of the latest Git commit of the service at time of building
   * @return githash
   */
  @javax.annotation.Nullable
  public String getGithash() {
    return githash;
  }

  public void setGithash(String githash) {
    this.githash = githash;
  }


  public Health healths(List<HealthStatus> healths) {
    this.healths = healths;
    return this;
  }

  public Health addHealthsItem(HealthStatus healthsItem) {
    if (this.healths == null) {
      this.healths = new ArrayList<>();
    }
    this.healths.add(healthsItem);
    return this;
  }

  /**
   * Get healths
   * @return healths
   */
  @javax.annotation.Nullable
  public List<HealthStatus> getHealths() {
    return healths;
  }

  public void setHealths(List<HealthStatus> healths) {
    this.healths = healths;
  }


  public Health status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Confirmation that the service is doing well
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Health timeStamp(String timeStamp) {
    this.timeStamp = timeStamp;
    return this;
  }

  /**
   * Current server time
   * @return timeStamp
   */
  @javax.annotation.Nullable
  public String getTimeStamp() {
    return timeStamp;
  }

  public void setTimeStamp(String timeStamp) {
    this.timeStamp = timeStamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Health health = (Health) o;
    return Objects.equals(this.buildTimeStamp, health.buildTimeStamp) &&
        Objects.equals(this.githash, health.githash) &&
        Objects.equals(this.healths, health.healths) &&
        Objects.equals(this.status, health.status) &&
        Objects.equals(this.timeStamp, health.timeStamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buildTimeStamp, githash, healths, status, timeStamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Health {\n");
    sb.append("    buildTimeStamp: ").append(toIndentedString(buildTimeStamp)).append("\n");
    sb.append("    githash: ").append(toIndentedString(githash)).append("\n");
    sb.append("    healths: ").append(toIndentedString(healths)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timeStamp: ").append(toIndentedString(timeStamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BuildTimeStamp");
    openapiFields.add("Githash");
    openapiFields.add("Healths");
    openapiFields.add("Status");
    openapiFields.add("TimeStamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Health
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Health.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Health is not found in the empty JSON string", Health.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Health.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Health` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("BuildTimeStamp") != null && !jsonObj.get("BuildTimeStamp").isJsonNull()) && !jsonObj.get("BuildTimeStamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BuildTimeStamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BuildTimeStamp").toString()));
      }
      if ((jsonObj.get("Githash") != null && !jsonObj.get("Githash").isJsonNull()) && !jsonObj.get("Githash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Githash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Githash").toString()));
      }
      if (jsonObj.get("Healths") != null && !jsonObj.get("Healths").isJsonNull()) {
        JsonArray jsonArrayhealths = jsonObj.getAsJsonArray("Healths");
        if (jsonArrayhealths != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Healths").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Healths` to be an array in the JSON string but got `%s`", jsonObj.get("Healths").toString()));
          }

          // validate the optional field `Healths` (array)
          for (int i = 0; i < jsonArrayhealths.size(); i++) {
            HealthStatus.validateJsonElement(jsonArrayhealths.get(i));
          };
        }
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      if ((jsonObj.get("TimeStamp") != null && !jsonObj.get("TimeStamp").isJsonNull()) && !jsonObj.get("TimeStamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TimeStamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TimeStamp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Health.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Health' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Health> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Health.class));

       return (TypeAdapter<T>) new TypeAdapter<Health>() {
           @Override
           public void write(JsonWriter out, Health value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Health read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Health given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Health
   * @throws IOException if the JSON string is invalid with respect to Health
   */
  public static Health fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Health.class);
  }

  /**
   * Convert an instance of Health to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

