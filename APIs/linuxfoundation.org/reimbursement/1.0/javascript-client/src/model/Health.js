/**
 * Reimbursements API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HealthStatus from './HealthStatus';

/**
 * The Health model module.
 * @module model/Health
 * @version 1.0
 */
class Health {
    /**
     * Constructs a new <code>Health</code>.
     * @alias module:model/Health
     */
    constructor() { 
        
        Health.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Health</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Health} obj Optional instance to populate.
     * @return {module:model/Health} The populated <code>Health</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Health();

            if (data.hasOwnProperty('BuildTimeStamp')) {
                obj['BuildTimeStamp'] = ApiClient.convertToType(data['BuildTimeStamp'], 'String');
            }
            if (data.hasOwnProperty('Githash')) {
                obj['Githash'] = ApiClient.convertToType(data['Githash'], 'String');
            }
            if (data.hasOwnProperty('Healths')) {
                obj['Healths'] = ApiClient.convertToType(data['Healths'], [HealthStatus]);
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('TimeStamp')) {
                obj['TimeStamp'] = ApiClient.convertToType(data['TimeStamp'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Health</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Health</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['BuildTimeStamp'] && !(typeof data['BuildTimeStamp'] === 'string' || data['BuildTimeStamp'] instanceof String)) {
            throw new Error("Expected the field `BuildTimeStamp` to be a primitive type in the JSON string but got " + data['BuildTimeStamp']);
        }
        // ensure the json data is a string
        if (data['Githash'] && !(typeof data['Githash'] === 'string' || data['Githash'] instanceof String)) {
            throw new Error("Expected the field `Githash` to be a primitive type in the JSON string but got " + data['Githash']);
        }
        if (data['Healths']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Healths'])) {
                throw new Error("Expected the field `Healths` to be an array in the JSON data but got " + data['Healths']);
            }
            // validate the optional field `Healths` (array)
            for (const item of data['Healths']) {
                HealthStatus.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }
        // ensure the json data is a string
        if (data['TimeStamp'] && !(typeof data['TimeStamp'] === 'string' || data['TimeStamp'] instanceof String)) {
            throw new Error("Expected the field `TimeStamp` to be a primitive type in the JSON string but got " + data['TimeStamp']);
        }

        return true;
    }


}



/**
 * Time the service was built and deployed
 * @member {String} BuildTimeStamp
 */
Health.prototype['BuildTimeStamp'] = undefined;

/**
 * hash of the latest Git commit of the service at time of building
 * @member {String} Githash
 */
Health.prototype['Githash'] = undefined;

/**
 * @member {Array.<module:model/HealthStatus>} Healths
 */
Health.prototype['Healths'] = undefined;

/**
 * Confirmation that the service is doing well
 * @member {String} Status
 */
Health.prototype['Status'] = undefined;

/**
 * Current server time
 * @member {String} TimeStamp
 */
Health.prototype['TimeStamp'] = undefined;






export default Health;

