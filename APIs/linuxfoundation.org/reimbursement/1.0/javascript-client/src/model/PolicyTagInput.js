/**
 * Reimbursements API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PolicyTagInput model module.
 * @module model/PolicyTagInput
 * @version 1.0
 */
class PolicyTagInput {
    /**
     * Constructs a new <code>PolicyTagInput</code>.
     * Expensify policy tag information
     * @alias module:model/PolicyTagInput
     */
    constructor() { 
        
        PolicyTagInput.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PolicyTagInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PolicyTagInput} obj Optional instance to populate.
     * @return {module:model/PolicyTagInput} The populated <code>PolicyTagInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PolicyTagInput();

            if (data.hasOwnProperty('Email')) {
                obj['Email'] = ApiClient.convertToType(data['Email'], 'String');
            }
            if (data.hasOwnProperty('TicketID')) {
                obj['TicketID'] = ApiClient.convertToType(data['TicketID'], 'String');
            }
            if (data.hasOwnProperty('TxnType')) {
                obj['TxnType'] = ApiClient.convertToType(data['TxnType'], 'String');
            }
            if (data.hasOwnProperty('Username')) {
                obj['Username'] = ApiClient.convertToType(data['Username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PolicyTagInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PolicyTagInput</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Email'] && !(typeof data['Email'] === 'string' || data['Email'] instanceof String)) {
            throw new Error("Expected the field `Email` to be a primitive type in the JSON string but got " + data['Email']);
        }
        // ensure the json data is a string
        if (data['TicketID'] && !(typeof data['TicketID'] === 'string' || data['TicketID'] instanceof String)) {
            throw new Error("Expected the field `TicketID` to be a primitive type in the JSON string but got " + data['TicketID']);
        }
        // ensure the json data is a string
        if (data['TxnType'] && !(typeof data['TxnType'] === 'string' || data['TxnType'] instanceof String)) {
            throw new Error("Expected the field `TxnType` to be a primitive type in the JSON string but got " + data['TxnType']);
        }
        // ensure the json data is a string
        if (data['Username'] && !(typeof data['Username'] === 'string' || data['Username'] instanceof String)) {
            throw new Error("Expected the field `Username` to be a primitive type in the JSON string but got " + data['Username']);
        }

        return true;
    }


}



/**
 * email of the individual or beneficiary
 * @member {String} Email
 */
PolicyTagInput.prototype['Email'] = undefined;

/**
 * Unique ID of the ticket - required for travel funds
 * @member {String} TicketID
 */
PolicyTagInput.prototype['TicketID'] = undefined;

/**
 * Type of transaction
 * @member {String} TxnType
 */
PolicyTagInput.prototype['TxnType'] = undefined;

/**
 * Unique username or lfId of the individual
 * @member {String} Username
 */
PolicyTagInput.prototype['Username'] = undefined;






export default PolicyTagInput;

