/**
 * Reimbursements API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Contact from './Contact';
import PolicyCreateInput from './PolicyCreateInput';
import PolicyUpdateInput from './PolicyUpdateInput';

/**
 * The CreateReimbursementRequest model module.
 * @module model/CreateReimbursementRequest
 * @version 1.0
 */
class CreateReimbursementRequest {
    /**
     * Constructs a new <code>CreateReimbursementRequest</code>.
     * @alias module:model/CreateReimbursementRequest
     * @implements module:model/PolicyCreateInput
     * @implements module:model/PolicyUpdateInput
     * @param projectName {String} 
     * @param categories {Array.<String>} 
     * @param owner {module:model/Contact} 
     * @param projectURL {String} 
     */
    constructor(projectName, categories, owner, projectURL) { 
        PolicyCreateInput.initialize(this, projectName);PolicyUpdateInput.initialize(this, categories, owner, projectURL);
        CreateReimbursementRequest.initialize(this, projectName, categories, owner, projectURL);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, projectName, categories, owner, projectURL) { 
        obj['ProjectName'] = projectName;
        obj['Categories'] = categories;
        obj['Owner'] = owner;
        obj['ProjectURL'] = projectURL;
    }

    /**
     * Constructs a <code>CreateReimbursementRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateReimbursementRequest} obj Optional instance to populate.
     * @return {module:model/CreateReimbursementRequest} The populated <code>CreateReimbursementRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateReimbursementRequest();
            PolicyCreateInput.constructFromObject(data, obj);
            PolicyUpdateInput.constructFromObject(data, obj);

            if (data.hasOwnProperty('ProjectName')) {
                obj['ProjectName'] = ApiClient.convertToType(data['ProjectName'], 'String');
            }
            if (data.hasOwnProperty('Beneficiaries')) {
                obj['Beneficiaries'] = ApiClient.convertToType(data['Beneficiaries'], [Contact]);
            }
            if (data.hasOwnProperty('Categories')) {
                obj['Categories'] = ApiClient.convertToType(data['Categories'], ['String']);
            }
            if (data.hasOwnProperty('EntityType')) {
                obj['EntityType'] = ApiClient.convertToType(data['EntityType'], 'String');
            }
            if (data.hasOwnProperty('Owner')) {
                obj['Owner'] = Contact.constructFromObject(data['Owner']);
            }
            if (data.hasOwnProperty('ProjectURL')) {
                obj['ProjectURL'] = ApiClient.convertToType(data['ProjectURL'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateReimbursementRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateReimbursementRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateReimbursementRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ProjectName'] && !(typeof data['ProjectName'] === 'string' || data['ProjectName'] instanceof String)) {
            throw new Error("Expected the field `ProjectName` to be a primitive type in the JSON string but got " + data['ProjectName']);
        }
        if (data['Beneficiaries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Beneficiaries'])) {
                throw new Error("Expected the field `Beneficiaries` to be an array in the JSON data but got " + data['Beneficiaries']);
            }
            // validate the optional field `Beneficiaries` (array)
            for (const item of data['Beneficiaries']) {
                Contact.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Categories'])) {
            throw new Error("Expected the field `Categories` to be an array in the JSON data but got " + data['Categories']);
        }
        // ensure the json data is a string
        if (data['EntityType'] && !(typeof data['EntityType'] === 'string' || data['EntityType'] instanceof String)) {
            throw new Error("Expected the field `EntityType` to be a primitive type in the JSON string but got " + data['EntityType']);
        }
        // validate the optional field `Owner`
        if (data['Owner']) { // data not null
          Contact.validateJSON(data['Owner']);
        }
        // ensure the json data is a string
        if (data['ProjectURL'] && !(typeof data['ProjectURL'] === 'string' || data['ProjectURL'] instanceof String)) {
            throw new Error("Expected the field `ProjectURL` to be a primitive type in the JSON string but got " + data['ProjectURL']);
        }

        return true;
    }


}

CreateReimbursementRequest.RequiredProperties = ["ProjectName", "Categories", "Owner", "ProjectURL"];

/**
 * @member {String} ProjectName
 */
CreateReimbursementRequest.prototype['ProjectName'] = undefined;

/**
 * @member {Array.<module:model/Contact>} Beneficiaries
 */
CreateReimbursementRequest.prototype['Beneficiaries'] = undefined;

/**
 * @member {Array.<String>} Categories
 */
CreateReimbursementRequest.prototype['Categories'] = undefined;

/**
 * @member {String} EntityType
 */
CreateReimbursementRequest.prototype['EntityType'] = undefined;

/**
 * @member {module:model/Contact} Owner
 */
CreateReimbursementRequest.prototype['Owner'] = undefined;

/**
 * @member {String} ProjectURL
 */
CreateReimbursementRequest.prototype['ProjectURL'] = undefined;


// Implement PolicyCreateInput interface:
/**
 * @member {String} ProjectName
 */
PolicyCreateInput.prototype['ProjectName'] = undefined;
// Implement PolicyUpdateInput interface:
/**
 * @member {Array.<module:model/Contact>} Beneficiaries
 */
PolicyUpdateInput.prototype['Beneficiaries'] = undefined;
/**
 * @member {Array.<String>} Categories
 */
PolicyUpdateInput.prototype['Categories'] = undefined;
/**
 * @member {String} EntityType
 */
PolicyUpdateInput.prototype['EntityType'] = undefined;
/**
 * @member {module:model/Contact} Owner
 */
PolicyUpdateInput.prototype['Owner'] = undefined;
/**
 * @member {String} ProjectURL
 */
PolicyUpdateInput.prototype['ProjectURL'] = undefined;




export default CreateReimbursementRequest;

