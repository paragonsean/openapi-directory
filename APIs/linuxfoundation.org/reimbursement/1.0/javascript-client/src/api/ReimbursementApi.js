/**
 * Reimbursements API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateReimbursementRequest from '../model/CreateReimbursementRequest';
import ErrorResponse from '../model/ErrorResponse';
import PolicyUpdateInput from '../model/PolicyUpdateInput';

/**
* Reimbursement service.
* @module api/ReimbursementApi
* @version 1.0
*/
export default class ReimbursementApi {

    /**
    * Constructs a new ReimbursementApi. 
    * @alias module:api/ReimbursementApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createReimbursement operation.
     * @callback module:api/ReimbursementApi~createReimbursementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Reimbursement
     * Create a new Reimbursement policy
     * @param {String} projectId 
     * @param {module:model/CreateReimbursementRequest} body 
     * @param {module:api/ReimbursementApi~createReimbursementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createReimbursement(projectId, body, callback) {
      let postBody = body;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createReimbursement");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createReimbursement");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/reimbursement/{projectId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateReimbursement operation.
     * @callback module:api/ReimbursementApi~updateReimbursementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Reimbursement
     * Update an existing Reimbursement policy
     * @param {String} projectId 
     * @param {module:model/PolicyUpdateInput} body 
     * @param {module:api/ReimbursementApi~updateReimbursementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateReimbursement(projectId, body, callback) {
      let postBody = body;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateReimbursement");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateReimbursement");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/reimbursement/{projectId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
