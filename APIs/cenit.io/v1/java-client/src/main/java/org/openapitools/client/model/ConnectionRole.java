/*
 * Cenit IO - REST API Specification
 * Cenit IO is an Open Platform for Data and Business Integration (iPaaS) 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@cenit.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Connection;
import org.openapitools.client.model.Namespace;
import org.openapitools.client.model.Webhook;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConnectionRole
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:15.812775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectionRole {
  public static final String SERIALIZED_NAME_CONNECTION = "connection";
  @SerializedName(SERIALIZED_NAME_CONNECTION)
  private List<Connection> connection = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private Namespace namespace;

  public static final String SERIALIZED_NAME_WEBHOOK = "webhook";
  @SerializedName(SERIALIZED_NAME_WEBHOOK)
  private List<Webhook> webhook = new ArrayList<>();

  public ConnectionRole() {
  }

  public ConnectionRole connection(List<Connection> connection) {
    this.connection = connection;
    return this;
  }

  public ConnectionRole addConnectionItem(Connection connectionItem) {
    if (this.connection == null) {
      this.connection = new ArrayList<>();
    }
    this.connection.add(connectionItem);
    return this;
  }

  /**
   * Get connection
   * @return connection
   */
  @javax.annotation.Nullable
  public List<Connection> getConnection() {
    return connection;
  }

  public void setConnection(List<Connection> connection) {
    this.connection = connection;
  }


  public ConnectionRole id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ConnectionRole name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ConnectionRole namespace(Namespace namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * Get namespace
   * @return namespace
   */
  @javax.annotation.Nullable
  public Namespace getNamespace() {
    return namespace;
  }

  public void setNamespace(Namespace namespace) {
    this.namespace = namespace;
  }


  public ConnectionRole webhook(List<Webhook> webhook) {
    this.webhook = webhook;
    return this;
  }

  public ConnectionRole addWebhookItem(Webhook webhookItem) {
    if (this.webhook == null) {
      this.webhook = new ArrayList<>();
    }
    this.webhook.add(webhookItem);
    return this;
  }

  /**
   * Get webhook
   * @return webhook
   */
  @javax.annotation.Nullable
  public List<Webhook> getWebhook() {
    return webhook;
  }

  public void setWebhook(List<Webhook> webhook) {
    this.webhook = webhook;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectionRole connectionRole = (ConnectionRole) o;
    return Objects.equals(this.connection, connectionRole.connection) &&
        Objects.equals(this.id, connectionRole.id) &&
        Objects.equals(this.name, connectionRole.name) &&
        Objects.equals(this.namespace, connectionRole.namespace) &&
        Objects.equals(this.webhook, connectionRole.webhook);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connection, id, name, namespace, webhook);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectionRole {\n");
    sb.append("    connection: ").append(toIndentedString(connection)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    webhook: ").append(toIndentedString(webhook)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connection");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("namespace");
    openapiFields.add("webhook");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectionRole
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectionRole.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectionRole is not found in the empty JSON string", ConnectionRole.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectionRole.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectionRole` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("connection") != null && !jsonObj.get("connection").isJsonNull()) {
        JsonArray jsonArrayconnection = jsonObj.getAsJsonArray("connection");
        if (jsonArrayconnection != null) {
          // ensure the json data is an array
          if (!jsonObj.get("connection").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `connection` to be an array in the JSON string but got `%s`", jsonObj.get("connection").toString()));
          }

          // validate the optional field `connection` (array)
          for (int i = 0; i < jsonArrayconnection.size(); i++) {
            Connection.validateJsonElement(jsonArrayconnection.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `namespace`
      if (jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) {
        Namespace.validateJsonElement(jsonObj.get("namespace"));
      }
      if (jsonObj.get("webhook") != null && !jsonObj.get("webhook").isJsonNull()) {
        JsonArray jsonArraywebhook = jsonObj.getAsJsonArray("webhook");
        if (jsonArraywebhook != null) {
          // ensure the json data is an array
          if (!jsonObj.get("webhook").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `webhook` to be an array in the JSON string but got `%s`", jsonObj.get("webhook").toString()));
          }

          // validate the optional field `webhook` (array)
          for (int i = 0; i < jsonArraywebhook.size(); i++) {
            Webhook.validateJsonElement(jsonArraywebhook.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectionRole.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectionRole' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectionRole> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectionRole.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectionRole>() {
           @Override
           public void write(JsonWriter out, ConnectionRole value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectionRole read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectionRole given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectionRole
   * @throws IOException if the JSON string is invalid with respect to ConnectionRole
   */
  public static ConnectionRole fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectionRole.class);
  }

  /**
   * Convert an instance of ConnectionRole to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

