/*
 * Cenit IO - REST API Specification
 * Cenit IO is an Open Platform for Data and Business Integration (iPaaS) 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@cenit.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DataType;
import org.openapitools.client.model.Namespace;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Translator
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:15.812775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Translator {
  public static final String SERIALIZED_NAME_CUSTOM_DATA_TYPE = "custom_data_type";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DATA_TYPE)
  private DataType customDataType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private Namespace namespace;

  public static final String SERIALIZED_NAME_SOURCE_DATA_TYPE = "source_data_type";
  @SerializedName(SERIALIZED_NAME_SOURCE_DATA_TYPE)
  private DataType sourceDataType;

  /**
   * Gets or Sets style
   */
  @JsonAdapter(StyleEnum.Adapter.class)
  public enum StyleEnum {
    RUBY("Ruby"),
    
    LIQUID("Liquid"),
    
    XSLT("xslt");

    private String value;

    StyleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StyleEnum fromValue(String value) {
      for (StyleEnum b : StyleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StyleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StyleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StyleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StyleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StyleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STYLE = "style";
  @SerializedName(SERIALIZED_NAME_STYLE)
  private StyleEnum style;

  public static final String SERIALIZED_NAME_TARGET_DATA_TYPE = "target_data_type";
  @SerializedName(SERIALIZED_NAME_TARGET_DATA_TYPE)
  private DataType targetDataType;

  public static final String SERIALIZED_NAME_TRANSFORMATION = "transformation";
  @SerializedName(SERIALIZED_NAME_TRANSFORMATION)
  private String transformation;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    IMPORT("Import"),
    
    EXPORT("Export"),
    
    CONVERT("Convert"),
    
    UPDATE("Update");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public Translator() {
  }

  public Translator customDataType(DataType customDataType) {
    this.customDataType = customDataType;
    return this;
  }

  /**
   * Get customDataType
   * @return customDataType
   */
  @javax.annotation.Nullable
  public DataType getCustomDataType() {
    return customDataType;
  }

  public void setCustomDataType(DataType customDataType) {
    this.customDataType = customDataType;
  }


  public Translator id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Translator name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Translator namespace(Namespace namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * Get namespace
   * @return namespace
   */
  @javax.annotation.Nullable
  public Namespace getNamespace() {
    return namespace;
  }

  public void setNamespace(Namespace namespace) {
    this.namespace = namespace;
  }


  public Translator sourceDataType(DataType sourceDataType) {
    this.sourceDataType = sourceDataType;
    return this;
  }

  /**
   * Get sourceDataType
   * @return sourceDataType
   */
  @javax.annotation.Nullable
  public DataType getSourceDataType() {
    return sourceDataType;
  }

  public void setSourceDataType(DataType sourceDataType) {
    this.sourceDataType = sourceDataType;
  }


  public Translator style(StyleEnum style) {
    this.style = style;
    return this;
  }

  /**
   * Get style
   * @return style
   */
  @javax.annotation.Nullable
  public StyleEnum getStyle() {
    return style;
  }

  public void setStyle(StyleEnum style) {
    this.style = style;
  }


  public Translator targetDataType(DataType targetDataType) {
    this.targetDataType = targetDataType;
    return this;
  }

  /**
   * Get targetDataType
   * @return targetDataType
   */
  @javax.annotation.Nullable
  public DataType getTargetDataType() {
    return targetDataType;
  }

  public void setTargetDataType(DataType targetDataType) {
    this.targetDataType = targetDataType;
  }


  public Translator transformation(String transformation) {
    this.transformation = transformation;
    return this;
  }

  /**
   * Get transformation
   * @return transformation
   */
  @javax.annotation.Nullable
  public String getTransformation() {
    return transformation;
  }

  public void setTransformation(String transformation) {
    this.transformation = transformation;
  }


  public Translator type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Translator translator = (Translator) o;
    return Objects.equals(this.customDataType, translator.customDataType) &&
        Objects.equals(this.id, translator.id) &&
        Objects.equals(this.name, translator.name) &&
        Objects.equals(this.namespace, translator.namespace) &&
        Objects.equals(this.sourceDataType, translator.sourceDataType) &&
        Objects.equals(this.style, translator.style) &&
        Objects.equals(this.targetDataType, translator.targetDataType) &&
        Objects.equals(this.transformation, translator.transformation) &&
        Objects.equals(this.type, translator.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customDataType, id, name, namespace, sourceDataType, style, targetDataType, transformation, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Translator {\n");
    sb.append("    customDataType: ").append(toIndentedString(customDataType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    sourceDataType: ").append(toIndentedString(sourceDataType)).append("\n");
    sb.append("    style: ").append(toIndentedString(style)).append("\n");
    sb.append("    targetDataType: ").append(toIndentedString(targetDataType)).append("\n");
    sb.append("    transformation: ").append(toIndentedString(transformation)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("custom_data_type");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("namespace");
    openapiFields.add("source_data_type");
    openapiFields.add("style");
    openapiFields.add("target_data_type");
    openapiFields.add("transformation");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Translator
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Translator.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Translator is not found in the empty JSON string", Translator.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Translator.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Translator` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `custom_data_type`
      if (jsonObj.get("custom_data_type") != null && !jsonObj.get("custom_data_type").isJsonNull()) {
        DataType.validateJsonElement(jsonObj.get("custom_data_type"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `namespace`
      if (jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) {
        Namespace.validateJsonElement(jsonObj.get("namespace"));
      }
      // validate the optional field `source_data_type`
      if (jsonObj.get("source_data_type") != null && !jsonObj.get("source_data_type").isJsonNull()) {
        DataType.validateJsonElement(jsonObj.get("source_data_type"));
      }
      if ((jsonObj.get("style") != null && !jsonObj.get("style").isJsonNull()) && !jsonObj.get("style").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `style` to be a primitive type in the JSON string but got `%s`", jsonObj.get("style").toString()));
      }
      // validate the optional field `style`
      if (jsonObj.get("style") != null && !jsonObj.get("style").isJsonNull()) {
        StyleEnum.validateJsonElement(jsonObj.get("style"));
      }
      // validate the optional field `target_data_type`
      if (jsonObj.get("target_data_type") != null && !jsonObj.get("target_data_type").isJsonNull()) {
        DataType.validateJsonElement(jsonObj.get("target_data_type"));
      }
      if ((jsonObj.get("transformation") != null && !jsonObj.get("transformation").isJsonNull()) && !jsonObj.get("transformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transformation").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Translator.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Translator' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Translator> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Translator.class));

       return (TypeAdapter<T>) new TypeAdapter<Translator>() {
           @Override
           public void write(JsonWriter out, Translator value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Translator read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Translator given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Translator
   * @throws IOException if the JSON string is invalid with respect to Translator
   */
  public static Translator fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Translator.class);
  }

  /**
   * Convert an instance of Translator to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

