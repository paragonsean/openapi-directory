/*
 * Cenit IO - REST API Specification
 * Cenit IO is an Open Platform for Data and Business Integration (iPaaS) 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@cenit.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConnectionRole;
import org.openapitools.client.model.DataType;
import org.openapitools.client.model.Namespace;
import org.openapitools.client.model.Translator;
import org.openapitools.client.model.Webhook;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Flow
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:15.812775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Flow {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_CONNECTION_ROLE = "connection_role";
  @SerializedName(SERIALIZED_NAME_CONNECTION_ROLE)
  private ConnectionRole connectionRole;

  public static final String SERIALIZED_NAME_CUSTOM_DATA_TYPE = "custom_data_type";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DATA_TYPE)
  private DataType customDataType;

  public static final String SERIALIZED_NAME_EVENT = "event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private Object event;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private Namespace namespace;

  public static final String SERIALIZED_NAME_NOTIFY_REQUEST = "notify_request";
  @SerializedName(SERIALIZED_NAME_NOTIFY_REQUEST)
  private Boolean notifyRequest;

  public static final String SERIALIZED_NAME_NOTIFY_RESPONSE = "notify_response";
  @SerializedName(SERIALIZED_NAME_NOTIFY_RESPONSE)
  private Boolean notifyResponse;

  public static final String SERIALIZED_NAME_RESPONSE_TRANSLATOR = "response_translator";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TRANSLATOR)
  private Translator responseTranslator;

  public static final String SERIALIZED_NAME_TRANSLATOR = "translator";
  @SerializedName(SERIALIZED_NAME_TRANSLATOR)
  private Translator translator;

  public static final String SERIALIZED_NAME_WEBHOOK = "webhook";
  @SerializedName(SERIALIZED_NAME_WEBHOOK)
  private Webhook webhook;

  public Flow() {
  }

  public Flow active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Get active
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public Flow connectionRole(ConnectionRole connectionRole) {
    this.connectionRole = connectionRole;
    return this;
  }

  /**
   * Get connectionRole
   * @return connectionRole
   */
  @javax.annotation.Nullable
  public ConnectionRole getConnectionRole() {
    return connectionRole;
  }

  public void setConnectionRole(ConnectionRole connectionRole) {
    this.connectionRole = connectionRole;
  }


  public Flow customDataType(DataType customDataType) {
    this.customDataType = customDataType;
    return this;
  }

  /**
   * Get customDataType
   * @return customDataType
   */
  @javax.annotation.Nullable
  public DataType getCustomDataType() {
    return customDataType;
  }

  public void setCustomDataType(DataType customDataType) {
    this.customDataType = customDataType;
  }


  public Flow event(Object event) {
    this.event = event;
    return this;
  }

  /**
   * Get event
   * @return event
   */
  @javax.annotation.Nullable
  public Object getEvent() {
    return event;
  }

  public void setEvent(Object event) {
    this.event = event;
  }


  public Flow id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Flow name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Flow namespace(Namespace namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * Get namespace
   * @return namespace
   */
  @javax.annotation.Nullable
  public Namespace getNamespace() {
    return namespace;
  }

  public void setNamespace(Namespace namespace) {
    this.namespace = namespace;
  }


  public Flow notifyRequest(Boolean notifyRequest) {
    this.notifyRequest = notifyRequest;
    return this;
  }

  /**
   * Get notifyRequest
   * @return notifyRequest
   */
  @javax.annotation.Nullable
  public Boolean getNotifyRequest() {
    return notifyRequest;
  }

  public void setNotifyRequest(Boolean notifyRequest) {
    this.notifyRequest = notifyRequest;
  }


  public Flow notifyResponse(Boolean notifyResponse) {
    this.notifyResponse = notifyResponse;
    return this;
  }

  /**
   * Get notifyResponse
   * @return notifyResponse
   */
  @javax.annotation.Nullable
  public Boolean getNotifyResponse() {
    return notifyResponse;
  }

  public void setNotifyResponse(Boolean notifyResponse) {
    this.notifyResponse = notifyResponse;
  }


  public Flow responseTranslator(Translator responseTranslator) {
    this.responseTranslator = responseTranslator;
    return this;
  }

  /**
   * Get responseTranslator
   * @return responseTranslator
   */
  @javax.annotation.Nullable
  public Translator getResponseTranslator() {
    return responseTranslator;
  }

  public void setResponseTranslator(Translator responseTranslator) {
    this.responseTranslator = responseTranslator;
  }


  public Flow translator(Translator translator) {
    this.translator = translator;
    return this;
  }

  /**
   * Get translator
   * @return translator
   */
  @javax.annotation.Nullable
  public Translator getTranslator() {
    return translator;
  }

  public void setTranslator(Translator translator) {
    this.translator = translator;
  }


  public Flow webhook(Webhook webhook) {
    this.webhook = webhook;
    return this;
  }

  /**
   * Get webhook
   * @return webhook
   */
  @javax.annotation.Nullable
  public Webhook getWebhook() {
    return webhook;
  }

  public void setWebhook(Webhook webhook) {
    this.webhook = webhook;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Flow flow = (Flow) o;
    return Objects.equals(this.active, flow.active) &&
        Objects.equals(this.connectionRole, flow.connectionRole) &&
        Objects.equals(this.customDataType, flow.customDataType) &&
        Objects.equals(this.event, flow.event) &&
        Objects.equals(this.id, flow.id) &&
        Objects.equals(this.name, flow.name) &&
        Objects.equals(this.namespace, flow.namespace) &&
        Objects.equals(this.notifyRequest, flow.notifyRequest) &&
        Objects.equals(this.notifyResponse, flow.notifyResponse) &&
        Objects.equals(this.responseTranslator, flow.responseTranslator) &&
        Objects.equals(this.translator, flow.translator) &&
        Objects.equals(this.webhook, flow.webhook);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, connectionRole, customDataType, event, id, name, namespace, notifyRequest, notifyResponse, responseTranslator, translator, webhook);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Flow {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    connectionRole: ").append(toIndentedString(connectionRole)).append("\n");
    sb.append("    customDataType: ").append(toIndentedString(customDataType)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    notifyRequest: ").append(toIndentedString(notifyRequest)).append("\n");
    sb.append("    notifyResponse: ").append(toIndentedString(notifyResponse)).append("\n");
    sb.append("    responseTranslator: ").append(toIndentedString(responseTranslator)).append("\n");
    sb.append("    translator: ").append(toIndentedString(translator)).append("\n");
    sb.append("    webhook: ").append(toIndentedString(webhook)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("connection_role");
    openapiFields.add("custom_data_type");
    openapiFields.add("event");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("namespace");
    openapiFields.add("notify_request");
    openapiFields.add("notify_response");
    openapiFields.add("response_translator");
    openapiFields.add("translator");
    openapiFields.add("webhook");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Flow
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Flow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Flow is not found in the empty JSON string", Flow.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Flow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Flow` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `connection_role`
      if (jsonObj.get("connection_role") != null && !jsonObj.get("connection_role").isJsonNull()) {
        ConnectionRole.validateJsonElement(jsonObj.get("connection_role"));
      }
      // validate the optional field `custom_data_type`
      if (jsonObj.get("custom_data_type") != null && !jsonObj.get("custom_data_type").isJsonNull()) {
        DataType.validateJsonElement(jsonObj.get("custom_data_type"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `namespace`
      if (jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) {
        Namespace.validateJsonElement(jsonObj.get("namespace"));
      }
      // validate the optional field `response_translator`
      if (jsonObj.get("response_translator") != null && !jsonObj.get("response_translator").isJsonNull()) {
        Translator.validateJsonElement(jsonObj.get("response_translator"));
      }
      // validate the optional field `translator`
      if (jsonObj.get("translator") != null && !jsonObj.get("translator").isJsonNull()) {
        Translator.validateJsonElement(jsonObj.get("translator"));
      }
      // validate the optional field `webhook`
      if (jsonObj.get("webhook") != null && !jsonObj.get("webhook").isJsonNull()) {
        Webhook.validateJsonElement(jsonObj.get("webhook"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Flow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Flow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Flow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Flow.class));

       return (TypeAdapter<T>) new TypeAdapter<Flow>() {
           @Override
           public void write(JsonWriter out, Flow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Flow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Flow given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Flow
   * @throws IOException if the JSON string is invalid with respect to Flow
   */
  public static Flow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Flow.class);
  }

  /**
   * Convert an instance of Flow to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

