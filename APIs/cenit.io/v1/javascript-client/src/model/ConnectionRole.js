/**
 * Cenit IO - REST API Specification
 * Cenit IO is an Open Platform for Data and Business Integration (iPaaS) 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@cenit.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Connection from './Connection';
import Namespace from './Namespace';
import Webhook from './Webhook';

/**
 * The ConnectionRole model module.
 * @module model/ConnectionRole
 * @version v1
 */
class ConnectionRole {
    /**
     * Constructs a new <code>ConnectionRole</code>.
     * @alias module:model/ConnectionRole
     */
    constructor() { 
        
        ConnectionRole.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConnectionRole</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectionRole} obj Optional instance to populate.
     * @return {module:model/ConnectionRole} The populated <code>ConnectionRole</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectionRole();

            if (data.hasOwnProperty('connection')) {
                obj['connection'] = ApiClient.convertToType(data['connection'], [Connection]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = Namespace.constructFromObject(data['namespace']);
            }
            if (data.hasOwnProperty('webhook')) {
                obj['webhook'] = ApiClient.convertToType(data['webhook'], [Webhook]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectionRole</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectionRole</code>.
     */
    static validateJSON(data) {
        if (data['connection']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['connection'])) {
                throw new Error("Expected the field `connection` to be an array in the JSON data but got " + data['connection']);
            }
            // validate the optional field `connection` (array)
            for (const item of data['connection']) {
                Connection.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `namespace`
        if (data['namespace']) { // data not null
          Namespace.validateJSON(data['namespace']);
        }
        if (data['webhook']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['webhook'])) {
                throw new Error("Expected the field `webhook` to be an array in the JSON data but got " + data['webhook']);
            }
            // validate the optional field `webhook` (array)
            for (const item of data['webhook']) {
                Webhook.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/Connection>} connection
 */
ConnectionRole.prototype['connection'] = undefined;

/**
 * @member {String} id
 */
ConnectionRole.prototype['id'] = undefined;

/**
 * @member {String} name
 */
ConnectionRole.prototype['name'] = undefined;

/**
 * @member {module:model/Namespace} namespace
 */
ConnectionRole.prototype['namespace'] = undefined;

/**
 * @member {Array.<module:model/Webhook>} webhook
 */
ConnectionRole.prototype['webhook'] = undefined;






export default ConnectionRole;

