/**
 * Cenit IO - REST API Specification
 * Cenit IO is an Open Platform for Data and Business Integration (iPaaS) 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@cenit.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Namespace from './Namespace';

/**
 * The Schema model module.
 * @module model/Schema
 * @version v1
 */
class Schema {
    /**
     * Constructs a new <code>Schema</code>.
     * @alias module:model/Schema
     */
    constructor() { 
        
        Schema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Schema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Schema} obj Optional instance to populate.
     * @return {module:model/Schema} The populated <code>Schema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Schema();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = Namespace.constructFromObject(data['namespace']);
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = ApiClient.convertToType(data['schema'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Schema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Schema</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `namespace`
        if (data['namespace']) { // data not null
          Namespace.validateJSON(data['namespace']);
        }
        // ensure the json data is a string
        if (data['schema'] && !(typeof data['schema'] === 'string' || data['schema'] instanceof String)) {
            throw new Error("Expected the field `schema` to be a primitive type in the JSON string but got " + data['schema']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}



/**
 * @member {String} id
 */
Schema.prototype['id'] = undefined;

/**
 * @member {module:model/Namespace} namespace
 */
Schema.prototype['namespace'] = undefined;

/**
 * @member {String} schema
 */
Schema.prototype['schema'] = undefined;

/**
 * @member {String} uri
 */
Schema.prototype['uri'] = undefined;






export default Schema;

