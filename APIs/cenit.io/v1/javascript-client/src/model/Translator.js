/**
 * Cenit IO - REST API Specification
 * Cenit IO is an Open Platform for Data and Business Integration (iPaaS) 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@cenit.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataType from './DataType';
import Namespace from './Namespace';

/**
 * The Translator model module.
 * @module model/Translator
 * @version v1
 */
class Translator {
    /**
     * Constructs a new <code>Translator</code>.
     * @alias module:model/Translator
     */
    constructor() { 
        
        Translator.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Translator</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Translator} obj Optional instance to populate.
     * @return {module:model/Translator} The populated <code>Translator</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Translator();

            if (data.hasOwnProperty('custom_data_type')) {
                obj['custom_data_type'] = DataType.constructFromObject(data['custom_data_type']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = Namespace.constructFromObject(data['namespace']);
            }
            if (data.hasOwnProperty('source_data_type')) {
                obj['source_data_type'] = DataType.constructFromObject(data['source_data_type']);
            }
            if (data.hasOwnProperty('style')) {
                obj['style'] = ApiClient.convertToType(data['style'], 'String');
            }
            if (data.hasOwnProperty('target_data_type')) {
                obj['target_data_type'] = DataType.constructFromObject(data['target_data_type']);
            }
            if (data.hasOwnProperty('transformation')) {
                obj['transformation'] = ApiClient.convertToType(data['transformation'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Translator</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Translator</code>.
     */
    static validateJSON(data) {
        // validate the optional field `custom_data_type`
        if (data['custom_data_type']) { // data not null
          DataType.validateJSON(data['custom_data_type']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `namespace`
        if (data['namespace']) { // data not null
          Namespace.validateJSON(data['namespace']);
        }
        // validate the optional field `source_data_type`
        if (data['source_data_type']) { // data not null
          DataType.validateJSON(data['source_data_type']);
        }
        // ensure the json data is a string
        if (data['style'] && !(typeof data['style'] === 'string' || data['style'] instanceof String)) {
            throw new Error("Expected the field `style` to be a primitive type in the JSON string but got " + data['style']);
        }
        // validate the optional field `target_data_type`
        if (data['target_data_type']) { // data not null
          DataType.validateJSON(data['target_data_type']);
        }
        // ensure the json data is a string
        if (data['transformation'] && !(typeof data['transformation'] === 'string' || data['transformation'] instanceof String)) {
            throw new Error("Expected the field `transformation` to be a primitive type in the JSON string but got " + data['transformation']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/DataType} custom_data_type
 */
Translator.prototype['custom_data_type'] = undefined;

/**
 * @member {String} id
 */
Translator.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Translator.prototype['name'] = undefined;

/**
 * @member {module:model/Namespace} namespace
 */
Translator.prototype['namespace'] = undefined;

/**
 * @member {module:model/DataType} source_data_type
 */
Translator.prototype['source_data_type'] = undefined;

/**
 * @member {module:model/Translator.StyleEnum} style
 */
Translator.prototype['style'] = undefined;

/**
 * @member {module:model/DataType} target_data_type
 */
Translator.prototype['target_data_type'] = undefined;

/**
 * @member {String} transformation
 */
Translator.prototype['transformation'] = undefined;

/**
 * @member {module:model/Translator.TypeEnum} type
 */
Translator.prototype['type'] = undefined;





/**
 * Allowed values for the <code>style</code> property.
 * @enum {String}
 * @readonly
 */
Translator['StyleEnum'] = {

    /**
     * value: "Ruby"
     * @const
     */
    "Ruby": "Ruby",

    /**
     * value: "Liquid"
     * @const
     */
    "Liquid": "Liquid",

    /**
     * value: "xslt"
     * @const
     */
    "xslt": "xslt"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Translator['TypeEnum'] = {

    /**
     * value: "Import"
     * @const
     */
    "Import": "Import",

    /**
     * value: "Export"
     * @const
     */
    "Export": "Export",

    /**
     * value: "Convert"
     * @const
     */
    "Convert": "Convert",

    /**
     * value: "Update"
     * @const
     */
    "Update": "Update"
};



export default Translator;

