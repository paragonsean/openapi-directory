/**
 * Cenit IO - REST API Specification
 * Cenit IO is an Open Platform for Data and Business Integration (iPaaS) 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@cenit.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Observer from '../model/Observer';

/**
* DataEvent service.
* @module api/DataEventApi
* @version v1
*/
export default class DataEventApi {

    /**
    * Constructs a new DataEventApi. 
    * @alias module:api/DataEventApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the setupObserverGet operation.
     * @callback module:api/DataEventApi~setupObserverGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Observer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of events
     * Returns a list of events you've previously created. The events are returned in sorted order, with the most recent event appearing first.
     * @param {module:api/DataEventApi~setupObserverGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Observer>}
     */
    setupObserverGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-User-Access-Key', 'X-User-Access-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Observer];
      return this.apiClient.callApi(
        '/setup/observer/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupObserverIdDelete operation.
     * @callback module:api/DataEventApi~setupObserverIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an event
     * Deletes the specified event observer.
     * @param {String} id Observer ID
     * @param {module:api/DataEventApi~setupObserverIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setupObserverIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupObserverIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-User-Access-Key', 'X-User-Access-Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/setup/observer/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupObserverIdGet operation.
     * @callback module:api/DataEventApi~setupObserverIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Observer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an existing event
     * Retrieves the details of an existing event. You need only supply the unique event identifier that was returned upon event creation.
     * @param {String} id Observer ID
     * @param {module:api/DataEventApi~setupObserverIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Observer}
     */
    setupObserverIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupObserverIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-User-Access-Key', 'X-User-Access-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Observer;
      return this.apiClient.callApi(
        '/setup/observer/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupObserverPost operation.
     * @callback module:api/DataEventApi~setupObserverPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Observer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an event
     * Creates or updates the specified event observer. Any parameters not provided will be left unchanged.
     * @param {module:api/DataEventApi~setupObserverPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Observer}
     */
    setupObserverPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-User-Access-Key', 'X-User-Access-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Observer;
      return this.apiClient.callApi(
        '/setup/observer/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
