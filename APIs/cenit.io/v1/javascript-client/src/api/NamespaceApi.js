/**
 * Cenit IO - REST API Specification
 * Cenit IO is an Open Platform for Data and Business Integration (iPaaS) 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@cenit.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Namespace from '../model/Namespace';

/**
* Namespace service.
* @module api/NamespaceApi
* @version v1
*/
export default class NamespaceApi {

    /**
    * Constructs a new NamespaceApi. 
    * @alias module:api/NamespaceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the setupNamespaceGet operation.
     * @callback module:api/NamespaceApi~setupNamespaceGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Namespace>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of namespaces
     * Returns a list of namespaces you've previously created. The namespaces are returned in sorted order, with the most recent namespace appearing first.
     * @param {module:api/NamespaceApi~setupNamespaceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Namespace>}
     */
    setupNamespaceGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-User-Access-Key', 'X-User-Access-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Namespace];
      return this.apiClient.callApi(
        '/setup/namespace/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupNamespaceIdDelete operation.
     * @callback module:api/NamespaceApi~setupNamespaceIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a namespace
     * Deletes the specified namespace.
     * @param {String} id Namespace ID.
     * @param {module:api/NamespaceApi~setupNamespaceIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setupNamespaceIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupNamespaceIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-User-Access-Key', 'X-User-Access-Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/setup/namespace/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupNamespaceIdGet operation.
     * @callback module:api/NamespaceApi~setupNamespaceIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Namespace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an existing namespace
     * Retrieves the details of an existing namespace. You need only supply the unique webhook namespace that was returned upon namespace creation.
     * @param {String} id Namespace ID.
     * @param {module:api/NamespaceApi~setupNamespaceIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Namespace}
     */
    setupNamespaceIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupNamespaceIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-User-Access-Key', 'X-User-Access-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Namespace;
      return this.apiClient.callApi(
        '/setup/namespace/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupNamespacePost operation.
     * @callback module:api/NamespaceApi~setupNamespacePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Namespace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a namespace
     * Creates or updates the specified namespace. Any parameters not provided will be left unchanged.
     * @param {module:api/NamespaceApi~setupNamespacePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Namespace}
     */
    setupNamespacePost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-User-Access-Key', 'X-User-Access-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Namespace;
      return this.apiClient.callApi(
        '/setup/namespace/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
