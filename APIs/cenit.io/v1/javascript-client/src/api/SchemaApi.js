/**
 * Cenit IO - REST API Specification
 * Cenit IO is an Open Platform for Data and Business Integration (iPaaS) 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@cenit.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Schema from '../model/Schema';

/**
* Schema service.
* @module api/SchemaApi
* @version v1
*/
export default class SchemaApi {

    /**
    * Constructs a new SchemaApi. 
    * @alias module:api/SchemaApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the setupSchemaGet operation.
     * @callback module:api/SchemaApi~setupSchemaGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Schema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of schemas
     * Returns a list of schemas you've previously created. The schemas are returned in sorted order, with the most recent schema appearing first.
     * @param {module:api/SchemaApi~setupSchemaGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Schema>}
     */
    setupSchemaGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-User-Access-Key', 'X-User-Access-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Schema];
      return this.apiClient.callApi(
        '/setup/schema/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupSchemaIdDelete operation.
     * @callback module:api/SchemaApi~setupSchemaIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an schema.
     * Deletes the specified schema.
     * @param {String} id Schema ID
     * @param {module:api/SchemaApi~setupSchemaIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setupSchemaIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupSchemaIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-User-Access-Key', 'X-User-Access-Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/setup/schema/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupSchemaIdGet operation.
     * @callback module:api/SchemaApi~setupSchemaIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Schema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an existing schema
     * Retrieves the details of an existing schema. You need only supply the unique schema identifier that was returned upon schema creation.
     * @param {String} id Schema ID
     * @param {module:api/SchemaApi~setupSchemaIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Schema}
     */
    setupSchemaIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupSchemaIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-User-Access-Key', 'X-User-Access-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Schema;
      return this.apiClient.callApi(
        '/setup/schema/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupSchemaPost operation.
     * @callback module:api/SchemaApi~setupSchemaPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Schema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an schema
     * Creates or updates the specified schema. Any parameters not provided will be left unchanged.
     * @param {module:api/SchemaApi~setupSchemaPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Schema}
     */
    setupSchemaPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-User-Access-Key', 'X-User-Access-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Schema;
      return this.apiClient.callApi(
        '/setup/schema/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
