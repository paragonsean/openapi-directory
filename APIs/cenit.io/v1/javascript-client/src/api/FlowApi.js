/**
 * Cenit IO - REST API Specification
 * Cenit IO is an Open Platform for Data and Business Integration (iPaaS) 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@cenit.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Flow from '../model/Flow';

/**
* Flow service.
* @module api/FlowApi
* @version v1
*/
export default class FlowApi {

    /**
    * Constructs a new FlowApi. 
    * @alias module:api/FlowApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the setupFlowGet operation.
     * @callback module:api/FlowApi~setupFlowGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Flow>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of flows
     * Returns a list of flows you've previously created. The flows are returned in sorted order, with the most recent flow appearing first.
     * @param {module:api/FlowApi~setupFlowGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Flow>}
     */
    setupFlowGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-User-Access-Key', 'X-User-Access-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Flow];
      return this.apiClient.callApi(
        '/setup/flow/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupFlowIdDelete operation.
     * @callback module:api/FlowApi~setupFlowIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a flow.
     * Deletes the specified flow.
     * @param {String} id Flow ID
     * @param {module:api/FlowApi~setupFlowIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setupFlowIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupFlowIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-User-Access-Key', 'X-User-Access-Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/setup/flow/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupFlowIdGet operation.
     * @callback module:api/FlowApi~setupFlowIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Flow} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an existing flow
     * Retrieves the details of an existing flow. You need only supply the unique flow identifier that was returned upon flow creation.
     * @param {String} id Flow ID
     * @param {module:api/FlowApi~setupFlowIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Flow}
     */
    setupFlowIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupFlowIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-User-Access-Key', 'X-User-Access-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Flow;
      return this.apiClient.callApi(
        '/setup/flow/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupFlowPost operation.
     * @callback module:api/FlowApi~setupFlowPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Flow} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a flow
     * Creates or updates the specified flow. Any parameters not provided will be left unchanged.
     * @param {module:api/FlowApi~setupFlowPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Flow}
     */
    setupFlowPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-User-Access-Key', 'X-User-Access-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Flow;
      return this.apiClient.callApi(
        '/setup/flow/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
