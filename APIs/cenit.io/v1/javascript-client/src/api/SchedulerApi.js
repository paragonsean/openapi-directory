/**
 * Cenit IO - REST API Specification
 * Cenit IO is an Open Platform for Data and Business Integration (iPaaS) 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@cenit.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Scheduler from '../model/Scheduler';

/**
* Scheduler service.
* @module api/SchedulerApi
* @version v1
*/
export default class SchedulerApi {

    /**
    * Constructs a new SchedulerApi. 
    * @alias module:api/SchedulerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the setupSchedulerGet operation.
     * @callback module:api/SchedulerApi~setupSchedulerGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Scheduler>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of schedulers
     * Returns a list of schedulers you've previously created. The schedulers are returned in sorted order, with the most recent scheduler appearing first.
     * @param {module:api/SchedulerApi~setupSchedulerGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Scheduler>}
     */
    setupSchedulerGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-User-Access-Key', 'X-User-Access-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Scheduler];
      return this.apiClient.callApi(
        '/setup/scheduler/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupSchedulerIdDelete operation.
     * @callback module:api/SchedulerApi~setupSchedulerIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an schedule
     * Deletes the specified scheduler.
     * @param {String} id Scheduler ID
     * @param {module:api/SchedulerApi~setupSchedulerIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setupSchedulerIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupSchedulerIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-User-Access-Key', 'X-User-Access-Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/setup/scheduler/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupSchedulerIdGet operation.
     * @callback module:api/SchedulerApi~setupSchedulerIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Scheduler} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an existing schedule
     * Retrieves the details of an existing scheduler. You need only supply the unique scheduler identifier that was returned upon scheduler creation.
     * @param {String} id Scheduler ID
     * @param {module:api/SchedulerApi~setupSchedulerIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Scheduler}
     */
    setupSchedulerIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupSchedulerIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-User-Access-Key', 'X-User-Access-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Scheduler;
      return this.apiClient.callApi(
        '/setup/scheduler/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupSchedulerPost operation.
     * @callback module:api/SchedulerApi~setupSchedulerPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Scheduler} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an scheduler
     * Creates or updates the specified scheduler. Any parameters not provided will be left unchanged.
     * @param {module:api/SchedulerApi~setupSchedulerPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Scheduler}
     */
    setupSchedulerPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-User-Access-Key', 'X-User-Access-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Scheduler;
      return this.apiClient.callApi(
        '/setup/scheduler/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
