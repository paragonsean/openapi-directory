/**
 * Cenit IO - REST API Specification
 * Cenit IO is an Open Platform for Data and Business Integration (iPaaS) 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@cenit.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConnectionRole from '../model/ConnectionRole';

/**
* ConnectionRole service.
* @module api/ConnectionRoleApi
* @version v1
*/
export default class ConnectionRoleApi {

    /**
    * Constructs a new ConnectionRoleApi. 
    * @alias module:api/ConnectionRoleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the setupConnectionRoleGet operation.
     * @callback module:api/ConnectionRoleApi~setupConnectionRoleGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ConnectionRole>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of connection roles
     * Returns a list of connection roles you've previously created. The connection roles are returned in sorted order, with the most recent connection role appearing first.
     * @param {module:api/ConnectionRoleApi~setupConnectionRoleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ConnectionRole>}
     */
    setupConnectionRoleGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-User-Access-Key', 'X-User-Access-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ConnectionRole];
      return this.apiClient.callApi(
        '/setup/connection_role', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupConnectionRoleIdDelete operation.
     * @callback module:api/ConnectionRoleApi~setupConnectionRoleIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a connection role.
     * Deletes the specified connection role.
     * @param {String} id Connection role ID
     * @param {module:api/ConnectionRoleApi~setupConnectionRoleIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setupConnectionRoleIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupConnectionRoleIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-User-Access-Key', 'X-User-Access-Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/setup/connection_role/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupConnectionRoleIdGet operation.
     * @callback module:api/ConnectionRoleApi~setupConnectionRoleIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a connection role
     * Returns a connection role
     * @param {String} id Connection role ID
     * @param {module:api/ConnectionRoleApi~setupConnectionRoleIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionRole}
     */
    setupConnectionRoleIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupConnectionRoleIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-User-Access-Key', 'X-User-Access-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConnectionRole;
      return this.apiClient.callApi(
        '/setup/connection_role/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupConnectionRolePost operation.
     * @callback module:api/ConnectionRoleApi~setupConnectionRolePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a connection role
     * Creates or updates the specified connection role by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
     * @param {module:api/ConnectionRoleApi~setupConnectionRolePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionRole}
     */
    setupConnectionRolePost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-User-Access-Key', 'X-User-Access-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConnectionRole;
      return this.apiClient.callApi(
        '/setup/connection_role', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
