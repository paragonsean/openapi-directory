/**
 * Cenit IO - REST API Specification
 * Cenit IO is an Open Platform for Data and Business Integration (iPaaS) 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@cenit.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DataType from '../model/DataType';

/**
* DataType service.
* @module api/DataTypeApi
* @version v1
*/
export default class DataTypeApi {

    /**
    * Constructs a new DataTypeApi. 
    * @alias module:api/DataTypeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the setupDataTypeGet operation.
     * @callback module:api/DataTypeApi~setupDataTypeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DataType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of data types
     * Returns a list of data types you've previously created. The data types are returned in sorted order, with the most recent DataType appearing first.
     * @param {module:api/DataTypeApi~setupDataTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DataType>}
     */
    setupDataTypeGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-User-Access-Key', 'X-User-Access-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DataType];
      return this.apiClient.callApi(
        '/setup/data_type/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupDataTypeIdDelete operation.
     * @callback module:api/DataTypeApi~setupDataTypeIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a data type
     * Deletes the specified data type.
     * @param {String} id data type ID
     * @param {module:api/DataTypeApi~setupDataTypeIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setupDataTypeIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupDataTypeIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-User-Access-Key', 'X-User-Access-Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/setup/data_type/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupDataTypeIdGet operation.
     * @callback module:api/DataTypeApi~setupDataTypeIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a data type
     * Retrieves the details of an existing data type. You need only supply the unique data  type identifier that was returned upon DataType creation.
     * @param {String} id data type ID
     * @param {module:api/DataTypeApi~setupDataTypeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataType}
     */
    setupDataTypeIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupDataTypeIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-User-Access-Key', 'X-User-Access-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataType;
      return this.apiClient.callApi(
        '/setup/data_type/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setupDataTypePost operation.
     * @callback module:api/DataTypeApi~setupDataTypePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a data type
     * Creates or updates the specified data type by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
     * @param {module:api/DataTypeApi~setupDataTypePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataType}
     */
    setupDataTypePost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-User-Access-Key', 'X-User-Access-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataType;
      return this.apiClient.callApi(
        '/setup/data_type/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
