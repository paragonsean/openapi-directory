/**
 * Cenit IO - REST API Specification
 * Cenit IO is an Open Platform for Data and Business Integration (iPaaS) 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@cenit.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnection_role.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnection_role::OAIConnection_role(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnection_role::OAIConnection_role() {
    this->initializeModel();
}

OAIConnection_role::~OAIConnection_role() {}

void OAIConnection_role::initializeModel() {

    m_connection_isSet = false;
    m_connection_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_webhook_isSet = false;
    m_webhook_isValid = false;
}

void OAIConnection_role::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnection_role::fromJsonObject(QJsonObject json) {

    m_connection_isValid = ::OpenAPI::fromJsonValue(m_connection, json[QString("connection")]);
    m_connection_isSet = !json[QString("connection")].isNull() && m_connection_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;

    m_webhook_isValid = ::OpenAPI::fromJsonValue(m_webhook, json[QString("webhook")]);
    m_webhook_isSet = !json[QString("webhook")].isNull() && m_webhook_isValid;
}

QString OAIConnection_role::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnection_role::asJsonObject() const {
    QJsonObject obj;
    if (m_connection.size() > 0) {
        obj.insert(QString("connection"), ::OpenAPI::toJsonValue(m_connection));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_r_namespace.isSet()) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_webhook.size() > 0) {
        obj.insert(QString("webhook"), ::OpenAPI::toJsonValue(m_webhook));
    }
    return obj;
}

QList<OAIConnection> OAIConnection_role::getConnection() const {
    return m_connection;
}
void OAIConnection_role::setConnection(const QList<OAIConnection> &connection) {
    m_connection = connection;
    m_connection_isSet = true;
}

bool OAIConnection_role::is_connection_Set() const{
    return m_connection_isSet;
}

bool OAIConnection_role::is_connection_Valid() const{
    return m_connection_isValid;
}

QString OAIConnection_role::getId() const {
    return m_id;
}
void OAIConnection_role::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIConnection_role::is_id_Set() const{
    return m_id_isSet;
}

bool OAIConnection_role::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIConnection_role::getName() const {
    return m_name;
}
void OAIConnection_role::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConnection_role::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConnection_role::is_name_Valid() const{
    return m_name_isValid;
}

OAINamespace OAIConnection_role::getRNamespace() const {
    return m_r_namespace;
}
void OAIConnection_role::setRNamespace(const OAINamespace &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIConnection_role::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIConnection_role::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QList<OAIWebhook> OAIConnection_role::getWebhook() const {
    return m_webhook;
}
void OAIConnection_role::setWebhook(const QList<OAIWebhook> &webhook) {
    m_webhook = webhook;
    m_webhook_isSet = true;
}

bool OAIConnection_role::is_webhook_Set() const{
    return m_webhook_isSet;
}

bool OAIConnection_role::is_webhook_Valid() const{
    return m_webhook_isValid;
}

bool OAIConnection_role::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnection_role::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
