/**
 * Cenit IO - REST API Specification
 * Cenit IO is an Open Platform for Data and Business Integration (iPaaS) 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@cenit.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduler.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduler::OAIScheduler(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduler::OAIScheduler() {
    this->initializeModel();
}

OAIScheduler::~OAIScheduler() {}

void OAIScheduler::initializeModel() {

    m_activated_isSet = false;
    m_activated_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;
}

void OAIScheduler::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduler::fromJsonObject(QJsonObject json) {

    m_activated_isValid = ::OpenAPI::fromJsonValue(m_activated, json[QString("activated")]);
    m_activated_isSet = !json[QString("activated")].isNull() && m_activated_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("expression")]);
    m_expression_isSet = !json[QString("expression")].isNull() && m_expression_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;
}

QString OAIScheduler::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduler::asJsonObject() const {
    QJsonObject obj;
    if (m_activated_isSet) {
        obj.insert(QString("activated"), ::OpenAPI::toJsonValue(m_activated));
    }
    if (m_expression_isSet) {
        obj.insert(QString("expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_r_namespace.isSet()) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    return obj;
}

bool OAIScheduler::isActivated() const {
    return m_activated;
}
void OAIScheduler::setActivated(const bool &activated) {
    m_activated = activated;
    m_activated_isSet = true;
}

bool OAIScheduler::is_activated_Set() const{
    return m_activated_isSet;
}

bool OAIScheduler::is_activated_Valid() const{
    return m_activated_isValid;
}

QString OAIScheduler::getExpression() const {
    return m_expression;
}
void OAIScheduler::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIScheduler::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIScheduler::is_expression_Valid() const{
    return m_expression_isValid;
}

QString OAIScheduler::getId() const {
    return m_id;
}
void OAIScheduler::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIScheduler::is_id_Set() const{
    return m_id_isSet;
}

bool OAIScheduler::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIScheduler::getName() const {
    return m_name;
}
void OAIScheduler::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIScheduler::is_name_Set() const{
    return m_name_isSet;
}

bool OAIScheduler::is_name_Valid() const{
    return m_name_isValid;
}

OAINamespace OAIScheduler::getRNamespace() const {
    return m_r_namespace;
}
void OAIScheduler::setRNamespace(const OAINamespace &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIScheduler::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIScheduler::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

bool OAIScheduler::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduler::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
