/**
 * Cenit IO - REST API Specification
 * Cenit IO is an Open Platform for Data and Business Integration (iPaaS) 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@cenit.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIData_type.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIData_type::OAIData_type(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIData_type::OAIData_type() {
    this->initializeModel();
}

OAIData_type::~OAIData_type() {}

void OAIData_type::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_model_schema_isSet = false;
    m_model_schema_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_show_navigation_link_isSet = false;
    m_show_navigation_link_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIData_type::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIData_type::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_model_schema_isValid = ::OpenAPI::fromJsonValue(m_model_schema, json[QString("model_schema")]);
    m_model_schema_isSet = !json[QString("model_schema")].isNull() && m_model_schema_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;

    m_show_navigation_link_isValid = ::OpenAPI::fromJsonValue(m_show_navigation_link, json[QString("show_navigation_link")]);
    m_show_navigation_link_isSet = !json[QString("show_navigation_link")].isNull() && m_show_navigation_link_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIData_type::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIData_type::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_model_schema_isSet) {
        obj.insert(QString("model_schema"), ::OpenAPI::toJsonValue(m_model_schema));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_r_namespace.isSet()) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_show_navigation_link_isSet) {
        obj.insert(QString("show_navigation_link"), ::OpenAPI::toJsonValue(m_show_navigation_link));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIData_type::getId() const {
    return m_id;
}
void OAIData_type::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIData_type::is_id_Set() const{
    return m_id_isSet;
}

bool OAIData_type::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIData_type::getModelSchema() const {
    return m_model_schema;
}
void OAIData_type::setModelSchema(const QString &model_schema) {
    m_model_schema = model_schema;
    m_model_schema_isSet = true;
}

bool OAIData_type::is_model_schema_Set() const{
    return m_model_schema_isSet;
}

bool OAIData_type::is_model_schema_Valid() const{
    return m_model_schema_isValid;
}

QString OAIData_type::getName() const {
    return m_name;
}
void OAIData_type::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIData_type::is_name_Set() const{
    return m_name_isSet;
}

bool OAIData_type::is_name_Valid() const{
    return m_name_isValid;
}

OAINamespace OAIData_type::getRNamespace() const {
    return m_r_namespace;
}
void OAIData_type::setRNamespace(const OAINamespace &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIData_type::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIData_type::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QString OAIData_type::getShowNavigationLink() const {
    return m_show_navigation_link;
}
void OAIData_type::setShowNavigationLink(const QString &show_navigation_link) {
    m_show_navigation_link = show_navigation_link;
    m_show_navigation_link_isSet = true;
}

bool OAIData_type::is_show_navigation_link_Set() const{
    return m_show_navigation_link_isSet;
}

bool OAIData_type::is_show_navigation_link_Valid() const{
    return m_show_navigation_link_isValid;
}

QString OAIData_type::getSlug() const {
    return m_slug;
}
void OAIData_type::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIData_type::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIData_type::is_slug_Valid() const{
    return m_slug_isValid;
}

QString OAIData_type::getTitle() const {
    return m_title;
}
void OAIData_type::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIData_type::is_title_Set() const{
    return m_title_isSet;
}

bool OAIData_type::is_title_Valid() const{
    return m_title_isValid;
}

OAIObject OAIData_type::getType() const {
    return m_type;
}
void OAIData_type::setType(const OAIObject &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIData_type::is_type_Set() const{
    return m_type_isSet;
}

bool OAIData_type::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIData_type::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_navigation_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIData_type::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
