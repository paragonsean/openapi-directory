/**
 * Cenit IO - REST API Specification
 * Cenit IO is an Open Platform for Data and Business Integration (iPaaS) 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@cenit.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITranslator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITranslator::OAITranslator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITranslator::OAITranslator() {
    this->initializeModel();
}

OAITranslator::~OAITranslator() {}

void OAITranslator::initializeModel() {

    m_custom_data_type_isSet = false;
    m_custom_data_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_source_data_type_isSet = false;
    m_source_data_type_isValid = false;

    m_style_isSet = false;
    m_style_isValid = false;

    m_target_data_type_isSet = false;
    m_target_data_type_isValid = false;

    m_transformation_isSet = false;
    m_transformation_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITranslator::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITranslator::fromJsonObject(QJsonObject json) {

    m_custom_data_type_isValid = ::OpenAPI::fromJsonValue(m_custom_data_type, json[QString("custom_data_type")]);
    m_custom_data_type_isSet = !json[QString("custom_data_type")].isNull() && m_custom_data_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;

    m_source_data_type_isValid = ::OpenAPI::fromJsonValue(m_source_data_type, json[QString("source_data_type")]);
    m_source_data_type_isSet = !json[QString("source_data_type")].isNull() && m_source_data_type_isValid;

    m_style_isValid = ::OpenAPI::fromJsonValue(m_style, json[QString("style")]);
    m_style_isSet = !json[QString("style")].isNull() && m_style_isValid;

    m_target_data_type_isValid = ::OpenAPI::fromJsonValue(m_target_data_type, json[QString("target_data_type")]);
    m_target_data_type_isSet = !json[QString("target_data_type")].isNull() && m_target_data_type_isValid;

    m_transformation_isValid = ::OpenAPI::fromJsonValue(m_transformation, json[QString("transformation")]);
    m_transformation_isSet = !json[QString("transformation")].isNull() && m_transformation_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITranslator::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITranslator::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_data_type.isSet()) {
        obj.insert(QString("custom_data_type"), ::OpenAPI::toJsonValue(m_custom_data_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_r_namespace.isSet()) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_source_data_type.isSet()) {
        obj.insert(QString("source_data_type"), ::OpenAPI::toJsonValue(m_source_data_type));
    }
    if (m_style_isSet) {
        obj.insert(QString("style"), ::OpenAPI::toJsonValue(m_style));
    }
    if (m_target_data_type.isSet()) {
        obj.insert(QString("target_data_type"), ::OpenAPI::toJsonValue(m_target_data_type));
    }
    if (m_transformation_isSet) {
        obj.insert(QString("transformation"), ::OpenAPI::toJsonValue(m_transformation));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIData_type OAITranslator::getCustomDataType() const {
    return m_custom_data_type;
}
void OAITranslator::setCustomDataType(const OAIData_type &custom_data_type) {
    m_custom_data_type = custom_data_type;
    m_custom_data_type_isSet = true;
}

bool OAITranslator::is_custom_data_type_Set() const{
    return m_custom_data_type_isSet;
}

bool OAITranslator::is_custom_data_type_Valid() const{
    return m_custom_data_type_isValid;
}

QString OAITranslator::getId() const {
    return m_id;
}
void OAITranslator::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITranslator::is_id_Set() const{
    return m_id_isSet;
}

bool OAITranslator::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITranslator::getName() const {
    return m_name;
}
void OAITranslator::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITranslator::is_name_Set() const{
    return m_name_isSet;
}

bool OAITranslator::is_name_Valid() const{
    return m_name_isValid;
}

OAINamespace OAITranslator::getRNamespace() const {
    return m_r_namespace;
}
void OAITranslator::setRNamespace(const OAINamespace &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAITranslator::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAITranslator::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

OAIData_type OAITranslator::getSourceDataType() const {
    return m_source_data_type;
}
void OAITranslator::setSourceDataType(const OAIData_type &source_data_type) {
    m_source_data_type = source_data_type;
    m_source_data_type_isSet = true;
}

bool OAITranslator::is_source_data_type_Set() const{
    return m_source_data_type_isSet;
}

bool OAITranslator::is_source_data_type_Valid() const{
    return m_source_data_type_isValid;
}

QString OAITranslator::getStyle() const {
    return m_style;
}
void OAITranslator::setStyle(const QString &style) {
    m_style = style;
    m_style_isSet = true;
}

bool OAITranslator::is_style_Set() const{
    return m_style_isSet;
}

bool OAITranslator::is_style_Valid() const{
    return m_style_isValid;
}

OAIData_type OAITranslator::getTargetDataType() const {
    return m_target_data_type;
}
void OAITranslator::setTargetDataType(const OAIData_type &target_data_type) {
    m_target_data_type = target_data_type;
    m_target_data_type_isSet = true;
}

bool OAITranslator::is_target_data_type_Set() const{
    return m_target_data_type_isSet;
}

bool OAITranslator::is_target_data_type_Valid() const{
    return m_target_data_type_isValid;
}

QString OAITranslator::getTransformation() const {
    return m_transformation;
}
void OAITranslator::setTransformation(const QString &transformation) {
    m_transformation = transformation;
    m_transformation_isSet = true;
}

bool OAITranslator::is_transformation_Set() const{
    return m_transformation_isSet;
}

bool OAITranslator::is_transformation_Valid() const{
    return m_transformation_isValid;
}

QString OAITranslator::getType() const {
    return m_type;
}
void OAITranslator::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITranslator::is_type_Set() const{
    return m_type_isSet;
}

bool OAITranslator::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITranslator::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_data_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_data_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_data_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transformation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITranslator::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
