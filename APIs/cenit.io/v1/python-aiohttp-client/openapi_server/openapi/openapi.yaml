openapi: 3.0.1
info:
  contact:
    email: support@cenit.io
    name: Cenit IO Support
    url: https://cenit.io
  description: |
    Cenit IO is an Open Platform for Data and Business Integration (iPaaS)
  termsOfService: https://cenit-portal.herokuapp.com/terms_of_service
  title: Cenit IO - REST API Specification
  version: v1
  x-logo:
    url: https://cenit.io/images/logo.png
  x-origin:
  - format: swagger
    url: https://cenit-io.github.io/openapi/swagger.json
    version: "2.0"
  x-providerName: cenit.io
externalDocs:
  url: https://github.com/cenit-io/openapi
servers:
- url: https://cenit.io/api/v1
security:
- X-User-Access-Key: []
  X-User-Access-Token: []
tags:
- description: "The Cenit IO API is organized around REST. Cenit IO is an Open Platform\
    \ for Data \nand Business Integration (iPaaS) to process, storage and move data\
    \ in connection \nwith Cloud or On-Premise services. \n\nIt has been designed\
    \ to orchestrate data flows that may involve several kind of \nendpoints (APIs,\
    \ Datasets, EDI). It makes possible the automation of all operational \nprocesses\
    \ in a company, connecting between organization's on-premises infrastructure \n\
    and cloud provider services.\n"
  name: Introduction
- description: "When you sign up for an account, you are given your first API key.\n\
    You can generate additional API keys, and delete API keys (as you may\nneed to\
    \ rotate your keys in the future). You authenticate to Cenit IO API \nby providing\
    \ your endpoint API keys and token in the header parameters into \nrequest. You\
    \ can have multiple API keys and token active at one time for \nany endpoint.\n"
  name: Authentication
- description: "Connection are the representation of endpoint. \n"
  name: Connection
- description: "Define a group of webhooks that can apply to several connections.\
    \       \n"
  name: Connection Role
- description: "Allow that objects flow through the hub. The creation of new objects\
    \ \nand/or changes in existing objects will result in events. These events \n\
    ultimately result in calls being made to various Flows in your endpoints.\n"
  name: Data Event
- description: |
    Schedulers are events triggered on a certain moment and can be optionally recurrent.
  name: Scheduler
- description: |
    Define an HTTP Method and params.
  name: Webhook
- description: |
    A translator defines a logic for data manipulation. Data manipulation can occurs in the following scenarios:
      - Importing outside data into Cenit
      - Updating data already stored in Cenit
      - Converting data already stored in Cenit
      - Exporting data outside Cenit
  name: Translator
- description: "A flow defines how data is processed by the execution of one or more\
    \ actions, if \nthe data is coming in to Cenit or going out of Cenit. Data processing\
    \ involve:\n\n  ₋ An execution trigger to start the data processing\n  \n  ₋ Data\
    \ types\n  \n  ₋ Translators\n  \n  ₋ Connections & Webhooks\n"
  name: Flow
- description: |
    Define a data type is as simple as a JSON Schema http://json-schema.org
  name: Data Type
- description: "Define space of names to use across all the tenants    \n \n"
  name: Namespace
paths:
  /setup/connection:
    get:
      description: "Returns a list of connections you've previously created. The connections\
        \ are returned in sorted order, with the most recent connection appearing\
        \ first."
      operationId: setup_connection_get
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/connection'
                type: array
          description: OK
      summary: Returns a list of connections
      tags:
      - Connection
      x-openapi-router-controller: openapi_server.controllers.connection_controller
    post:
      description: Creates or updates the specified connection by setting the values
        of the parameters passed. Any parameters not provided will be left unchanged.
      operationId: setup_connection_post
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connection'
          description: OK
      summary: Create or update a connection
      tags:
      - Connection
      x-openapi-router-controller: openapi_server.controllers.connection_controller
  /setup/connection/{id}:
    delete:
      description: Permanently deletes a connection. It cannot be undone.
      operationId: setup_connection_id_delete
      parameters:
      - description: Connection ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: OK
        "404":
          content: {}
          description: Item not found
      summary: Delete a connection
      tags:
      - Connection
      x-openapi-router-controller: openapi_server.controllers.connection_controller
    get:
      description: Retrieves the details of an existing connection. You need only
        supply the unique connection identifier that was returned upon connection
        creation.
      operationId: setup_connection_id_get
      parameters:
      - description: Connection ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connection'
          description: OK
        "404":
          content: {}
          description: Item not found
      summary: Retrieve an existing connection
      tags:
      - Connection
      x-openapi-router-controller: openapi_server.controllers.connection_controller
  /setup/connection_role:
    get:
      description: "Returns a list of connection roles you've previously created.\
        \ The connection roles are returned in sorted order, with the most recent\
        \ connection role appearing first."
      operationId: setup_connection_role_get
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/connection_role'
                type: array
          description: OK
      summary: Returns a list of connection roles
      tags:
      - Connection Role
      x-openapi-router-controller: openapi_server.controllers.connection_role_controller
    post:
      description: Creates or updates the specified connection role by setting the
        values of the parameters passed. Any parameters not provided will be left
        unchanged.
      operationId: setup_connection_role_post
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connection_role'
          description: OK
      summary: Create or update a connection role
      tags:
      - Connection Role
      x-openapi-router-controller: openapi_server.controllers.connection_role_controller
  /setup/connection_role/{id}:
    delete:
      description: Deletes the specified connection role.
      operationId: setup_connection_role_id_delete
      parameters:
      - description: Connection role ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: OK
        "404":
          content: {}
          description: Item not found
      summary: Delete a connection role.
      tags:
      - Connection Role
      x-openapi-router-controller: openapi_server.controllers.connection_role_controller
    get:
      description: Returns a connection role
      operationId: setup_connection_role_id_get
      parameters:
      - description: Connection role ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connection_role'
          description: OK
        "404":
          content: {}
          description: Item not found
      summary: Return a connection role
      tags:
      - Connection Role
      x-openapi-router-controller: openapi_server.controllers.connection_role_controller
  /setup/data_type/:
    get:
      description: "Returns a list of data types you've previously created. The data\
        \ types are returned in sorted order, with the most recent DataType appearing\
        \ first."
      operationId: setup_data_type_get
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/data_type'
                type: array
          description: OK
      summary: Returns a list of data types
      tags:
      - Data Type
      x-openapi-router-controller: openapi_server.controllers.data_type_controller
    post:
      description: Creates or updates the specified data type by setting the values
        of the parameters passed. Any parameters not provided will be left unchanged.
      operationId: setup_data_type_post
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/data_type'
          description: OK
      summary: Create or update a data type
      tags:
      - Data Type
      x-openapi-router-controller: openapi_server.controllers.data_type_controller
  /setup/data_type/{id}:
    delete:
      description: Deletes the specified data type.
      operationId: setup_data_type_id_delete
      parameters:
      - description: data type ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: OK
        "404":
          content: {}
          description: Item not found
      summary: Delete a data type
      tags:
      - Data Type
      x-openapi-router-controller: openapi_server.controllers.data_type_controller
    get:
      description: Retrieves the details of an existing data type. You need only supply
        the unique data  type identifier that was returned upon DataType creation.
      operationId: setup_data_type_id_get
      parameters:
      - description: data type ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/data_type'
          description: OK
        "404":
          content: {}
          description: Item not found.
      summary: Retrieve a data type
      tags:
      - Data Type
      x-openapi-router-controller: openapi_server.controllers.data_type_controller
  /setup/flow/:
    get:
      description: "Returns a list of flows you've previously created. The flows are\
        \ returned in sorted order, with the most recent flow appearing first."
      operationId: setup_flow_get
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/flow'
                type: array
          description: OK
      summary: Returns a list of flows
      tags:
      - Flow
      x-openapi-router-controller: openapi_server.controllers.flow_controller
    post:
      description: Creates or updates the specified flow. Any parameters not provided
        will be left unchanged.
      operationId: setup_flow_post
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/flow'
          description: OK
      summary: Create or update a flow
      tags:
      - Flow
      x-openapi-router-controller: openapi_server.controllers.flow_controller
  /setup/flow/{id}:
    delete:
      description: Deletes the specified flow.
      operationId: setup_flow_id_delete
      parameters:
      - description: Flow ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: OK
        "404":
          content: {}
          description: Item not found
      summary: Delete a flow.
      tags:
      - Flow
      x-openapi-router-controller: openapi_server.controllers.flow_controller
    get:
      description: Retrieves the details of an existing flow. You need only supply
        the unique flow identifier that was returned upon flow creation.
      operationId: setup_flow_id_get
      parameters:
      - description: Flow ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/flow'
          description: OK
        "404":
          content: {}
          description: Item not found.
      summary: Retrieve an existing flow
      tags:
      - Flow
      x-openapi-router-controller: openapi_server.controllers.flow_controller
  /setup/namespace/:
    get:
      description: "Returns a list of namespaces you've previously created. The namespaces\
        \ are returned in sorted order, with the most recent namespace appearing first."
      operationId: setup_namespace_get
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/namespace'
                type: array
          description: OK
      summary: Returns a list of namespaces
      tags:
      - Namespace
      x-openapi-router-controller: openapi_server.controllers.namespace_controller
    post:
      description: Creates or updates the specified namespace. Any parameters not
        provided will be left unchanged.
      operationId: setup_namespace_post
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/namespace'
          description: OK
      summary: Create or update a namespace
      tags:
      - Namespace
      x-openapi-router-controller: openapi_server.controllers.namespace_controller
  /setup/namespace/{id}:
    delete:
      description: Deletes the specified namespace.
      operationId: setup_namespace_id_delete
      parameters:
      - description: Namespace ID.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: OK
        "404":
          content: {}
          description: Item not found
      summary: Delete a namespace
      tags:
      - Namespace
      x-openapi-router-controller: openapi_server.controllers.namespace_controller
    get:
      description: Retrieves the details of an existing namespace. You need only supply
        the unique webhook namespace that was returned upon namespace creation.
      operationId: setup_namespace_id_get
      parameters:
      - description: Namespace ID.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/namespace'
          description: OK
        "404":
          content: {}
          description: Item not found.
      summary: Retrieve an existing namespace
      tags:
      - Namespace
      x-openapi-router-controller: openapi_server.controllers.namespace_controller
  /setup/observer/:
    get:
      description: "Returns a list of events you've previously created. The events\
        \ are returned in sorted order, with the most recent event appearing first."
      operationId: setup_observer_get
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/observer'
                type: array
          description: OK
      summary: Returns a list of events
      tags:
      - Data Event
      x-openapi-router-controller: openapi_server.controllers.data_event_controller
    post:
      description: Creates or updates the specified event observer. Any parameters
        not provided will be left unchanged.
      operationId: setup_observer_post
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/observer'
          description: OK
      summary: Create or update an event
      tags:
      - Data Event
      x-openapi-router-controller: openapi_server.controllers.data_event_controller
  /setup/observer/{id}:
    delete:
      description: Deletes the specified event observer.
      operationId: setup_observer_id_delete
      parameters:
      - description: Observer ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: OK
        "404":
          content: {}
          description: Item not found
      summary: Delete an event
      tags:
      - Data Event
      x-openapi-router-controller: openapi_server.controllers.data_event_controller
    get:
      description: Retrieves the details of an existing event. You need only supply
        the unique event identifier that was returned upon event creation.
      operationId: setup_observer_id_get
      parameters:
      - description: Observer ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/observer'
          description: OK
        "404":
          content: {}
          description: Item not found.
      summary: Retrieve an existing event
      tags:
      - Data Event
      x-openapi-router-controller: openapi_server.controllers.data_event_controller
  /setup/scheduler/:
    get:
      description: "Returns a list of schedulers you've previously created. The schedulers\
        \ are returned in sorted order, with the most recent scheduler appearing first."
      operationId: setup_scheduler_get
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/scheduler'
                type: array
          description: OK
      summary: Returns a list of schedulers
      tags:
      - Scheduler
      x-openapi-router-controller: openapi_server.controllers.scheduler_controller
    post:
      description: Creates or updates the specified scheduler. Any parameters not
        provided will be left unchanged.
      operationId: setup_scheduler_post
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scheduler'
          description: OK
      summary: Create or update an scheduler
      tags:
      - Scheduler
      x-openapi-router-controller: openapi_server.controllers.scheduler_controller
  /setup/scheduler/{id}:
    delete:
      description: Deletes the specified scheduler.
      operationId: setup_scheduler_id_delete
      parameters:
      - description: Scheduler ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: OK
        "404":
          content: {}
          description: Item not found
      summary: Delete an schedule
      tags:
      - Scheduler
      x-openapi-router-controller: openapi_server.controllers.scheduler_controller
    get:
      description: Retrieves the details of an existing scheduler. You need only supply
        the unique scheduler identifier that was returned upon scheduler creation.
      operationId: setup_scheduler_id_get
      parameters:
      - description: Scheduler ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scheduler'
          description: OK
        "404":
          content: {}
          description: Item not found.
      summary: Retrieve an existing schedule
      tags:
      - Scheduler
      x-openapi-router-controller: openapi_server.controllers.scheduler_controller
  /setup/schema/:
    get:
      description: "Returns a list of schemas you've previously created. The schemas\
        \ are returned in sorted order, with the most recent schema appearing first."
      operationId: setup_schema_get
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/schema'
                type: array
          description: OK
      summary: Returns a list of schemas
      tags:
      - Schema
      x-openapi-router-controller: openapi_server.controllers.schema_controller
    post:
      description: Creates or updates the specified schema. Any parameters not provided
        will be left unchanged.
      operationId: setup_schema_post
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schema'
          description: OK
      summary: Create or update an schema
      tags:
      - Schema
      x-openapi-router-controller: openapi_server.controllers.schema_controller
  /setup/schema/{id}:
    delete:
      description: Deletes the specified schema.
      operationId: setup_schema_id_delete
      parameters:
      - description: Schema ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: OK
        "404":
          content: {}
          description: Item not found
      summary: Delete an schema.
      tags:
      - Schema
      x-openapi-router-controller: openapi_server.controllers.schema_controller
    get:
      description: Retrieves the details of an existing schema. You need only supply
        the unique schema identifier that was returned upon schema creation.
      operationId: setup_schema_id_get
      parameters:
      - description: Schema ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schema'
          description: OK
        "404":
          content: {}
          description: Item not found.
      summary: Retrieve an existing schema
      tags:
      - Schema
      x-openapi-router-controller: openapi_server.controllers.schema_controller
  /setup/translator/:
    get:
      description: "Returns a list of translators you've previously created. The translators\
        \ are returned in sorted order, with the most recent translator appearing\
        \ first."
      operationId: setup_translator_get
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/translator'
                type: array
          description: OK
      summary: Returns a list of translators
      tags:
      - Translator
      x-openapi-router-controller: openapi_server.controllers.translator_controller
    post:
      description: Creates or updates the specified translator. Any parameters not
        provided will be left unchanged.
      operationId: setup_translator_post
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/translator'
          description: OK
      summary: Create or update a translator
      tags:
      - Translator
      x-openapi-router-controller: openapi_server.controllers.translator_controller
  /setup/translator/{id}:
    delete:
      description: Deletes the specified translator.
      operationId: setup_translator_id_delete
      parameters:
      - description: Translator ID.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: OK
        "404":
          content: {}
          description: Item not found
      summary: Delete a translator
      tags:
      - Translator
      x-openapi-router-controller: openapi_server.controllers.translator_controller
    get:
      description: Retrieves the details of an existing translator. You need only
        supply the unique translator identifier that was returned upon translator
        creation.
      operationId: setup_translator_id_get
      parameters:
      - description: Translator ID.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/translator'
          description: OK
        "404":
          content: {}
          description: Item not found.
      summary: Retrieve an existing translator
      tags:
      - Translator
      x-openapi-router-controller: openapi_server.controllers.translator_controller
  /setup/webhook/:
    get:
      description: "Returns a list of webhooks you've previously created. The webhooks\
        \ are returned in sorted order, with the most recent webhook appearing first."
      operationId: setup_webhook_get
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/webhook'
                type: array
          description: OK
      summary: Returns a list of webhooks
      tags:
      - Webhook
      x-openapi-router-controller: openapi_server.controllers.webhook_controller
    post:
      description: Creates or updates the specified webhook. Any parameters not provided
        will be left unchanged.
      operationId: setup_webhook_post
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook'
          description: OK
      summary: Create or update a webhook
      tags:
      - Webhook
      x-openapi-router-controller: openapi_server.controllers.webhook_controller
  /setup/webhook/{id}:
    delete:
      description: Deletes the specified webhook.
      operationId: setup_webhook_id_delete
      parameters:
      - description: Webhook ID.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: OK
        "404":
          content: {}
          description: Item not found
      summary: Delete a webhook
      tags:
      - Webhook
      x-openapi-router-controller: openapi_server.controllers.webhook_controller
    get:
      description: Retrieves the details of an existing webhook. You need only supply
        the unique webhook identifier that was returned upon webhook creation.
      operationId: setup_webhook_id_get
      parameters:
      - description: Webhook ID.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook'
          description: OK
        "404":
          content: {}
          description: Item not found.
      summary: Retrieve an existing webhook
      tags:
      - Webhook
      x-openapi-router-controller: openapi_server.controllers.webhook_controller
components:
  schemas:
    connection:
      example:
        headers:
        - value: value
          key: key
        - value: value
          key: key
        name: name
        namespace:
          name: name
          id: id
          slug: slug
        id: id
        parameters:
        - value: value
          key: key
        - value: value
          key: key
        key: key
        url: url
        token: token
      properties:
        headers:
          items:
            $ref: '#/components/schemas/connection_headers_inner'
          title: headers
          type: array
        id:
          title: id
          type: string
        key:
          title: key
          type: string
        name:
          title: name
          type: string
        namespace:
          $ref: '#/components/schemas/namespace'
        parameters:
          items:
            $ref: '#/components/schemas/connection_headers_inner'
          title: parameters
          type: array
        token:
          title: token
          type: string
        url:
          title: url
          type: string
      title: connection
      type: object
    connection_role:
      example:
        webhook:
        - headers:
          - value: value
            key: key
          - value: value
            key: key
          path: path
          name: name
          namespace:
            name: name
            id: id
            slug: slug
          id: id
          parameters:
          - value: value
            key: key
          - value: value
            key: key
        - headers:
          - value: value
            key: key
          - value: value
            key: key
          path: path
          name: name
          namespace:
            name: name
            id: id
            slug: slug
          id: id
          parameters:
          - value: value
            key: key
          - value: value
            key: key
        name: name
        namespace:
          name: name
          id: id
          slug: slug
        connection:
        - headers:
          - value: value
            key: key
          - value: value
            key: key
          name: name
          namespace:
            name: name
            id: id
            slug: slug
          id: id
          parameters:
          - value: value
            key: key
          - value: value
            key: key
          key: key
          url: url
          token: token
        - headers:
          - value: value
            key: key
          - value: value
            key: key
          name: name
          namespace:
            name: name
            id: id
            slug: slug
          id: id
          parameters:
          - value: value
            key: key
          - value: value
            key: key
          key: key
          url: url
          token: token
        id: id
      properties:
        connection:
          items:
            $ref: '#/components/schemas/connection'
          title: connection
          type: array
        id:
          title: id
          type: string
        name:
          title: name
          type: string
        namespace:
          $ref: '#/components/schemas/namespace'
        webhook:
          items:
            $ref: '#/components/schemas/webhook'
          title: webhook
          type: array
      title: connection_role
      type: object
    data_type:
      example:
        show_navigation_link: show_navigation_link
        name: name
        namespace:
          name: name
          id: id
          slug: slug
        model_schema: model_schema
        id: id
        title: title
        type: "{}"
        slug: slug
      properties:
        id:
          title: id
          type: string
        model_schema:
          title: model_schema
          type: string
        name:
          title: name
          type: string
        namespace:
          $ref: '#/components/schemas/namespace'
        show_navigation_link:
          title: show_navigation_link
          type: string
        slug:
          title: slug
          type: string
        title:
          title: title
          type: string
        type:
          properties: {}
          title: type
          type: object
      title: data_type
      type: object
    flow:
      example:
        custom_data_type:
          show_navigation_link: show_navigation_link
          name: name
          namespace:
            name: name
            id: id
            slug: slug
          model_schema: model_schema
          id: id
          title: title
          type: "{}"
          slug: slug
        response_translator:
          custom_data_type:
            show_navigation_link: show_navigation_link
            name: name
            namespace:
              name: name
              id: id
              slug: slug
            model_schema: model_schema
            id: id
            title: title
            type: "{}"
            slug: slug
          target_data_type:
            show_navigation_link: show_navigation_link
            name: name
            namespace:
              name: name
              id: id
              slug: slug
            model_schema: model_schema
            id: id
            title: title
            type: "{}"
            slug: slug
          name: name
          namespace:
            name: name
            id: id
            slug: slug
          style: Ruby
          id: id
          transformation: transformation
          type: Import
          source_data_type:
            show_navigation_link: show_navigation_link
            name: name
            namespace:
              name: name
              id: id
              slug: slug
            model_schema: model_schema
            id: id
            title: title
            type: "{}"
            slug: slug
        webhook:
          headers:
          - value: value
            key: key
          - value: value
            key: key
          path: path
          name: name
          namespace:
            name: name
            id: id
            slug: slug
          id: id
          parameters:
          - value: value
            key: key
          - value: value
            key: key
        translator:
          custom_data_type:
            show_navigation_link: show_navigation_link
            name: name
            namespace:
              name: name
              id: id
              slug: slug
            model_schema: model_schema
            id: id
            title: title
            type: "{}"
            slug: slug
          target_data_type:
            show_navigation_link: show_navigation_link
            name: name
            namespace:
              name: name
              id: id
              slug: slug
            model_schema: model_schema
            id: id
            title: title
            type: "{}"
            slug: slug
          name: name
          namespace:
            name: name
            id: id
            slug: slug
          style: Ruby
          id: id
          transformation: transformation
          type: Import
          source_data_type:
            show_navigation_link: show_navigation_link
            name: name
            namespace:
              name: name
              id: id
              slug: slug
            model_schema: model_schema
            id: id
            title: title
            type: "{}"
            slug: slug
        name: name
        namespace:
          name: name
          id: id
          slug: slug
        notify_response: true
        active: true
        connection_role:
          webhook:
          - headers:
            - value: value
              key: key
            - value: value
              key: key
            path: path
            name: name
            namespace:
              name: name
              id: id
              slug: slug
            id: id
            parameters:
            - value: value
              key: key
            - value: value
              key: key
          - headers:
            - value: value
              key: key
            - value: value
              key: key
            path: path
            name: name
            namespace:
              name: name
              id: id
              slug: slug
            id: id
            parameters:
            - value: value
              key: key
            - value: value
              key: key
          name: name
          namespace:
            name: name
            id: id
            slug: slug
          connection:
          - headers:
            - value: value
              key: key
            - value: value
              key: key
            name: name
            namespace:
              name: name
              id: id
              slug: slug
            id: id
            parameters:
            - value: value
              key: key
            - value: value
              key: key
            key: key
            url: url
            token: token
          - headers:
            - value: value
              key: key
            - value: value
              key: key
            name: name
            namespace:
              name: name
              id: id
              slug: slug
            id: id
            parameters:
            - value: value
              key: key
            - value: value
              key: key
            key: key
            url: url
            token: token
          id: id
        id: id
        notify_request: true
        event: "{}"
      properties:
        active:
          title: active
          type: boolean
        connection_role:
          $ref: '#/components/schemas/connection_role'
        custom_data_type:
          $ref: '#/components/schemas/data_type'
        event:
          properties: {}
          title: event
          type: object
        id:
          title: id
          type: string
        name:
          title: name
          type: string
        namespace:
          $ref: '#/components/schemas/namespace'
        notify_request:
          title: notify_request
          type: boolean
        notify_response:
          title: notify_response
          type: boolean
        response_translator:
          $ref: '#/components/schemas/translator'
        translator:
          $ref: '#/components/schemas/translator'
        webhook:
          $ref: '#/components/schemas/webhook'
      title: flow
      type: object
    namespace:
      example:
        name: name
        id: id
        slug: slug
      properties:
        id:
          title: id
          type: string
        name:
          title: name
          type: string
        slug:
          title: slug
          type: string
      title: namespace
      type: object
    observer:
      example:
        data_type:
          show_navigation_link: show_navigation_link
          name: name
          namespace:
            name: name
            id: id
            slug: slug
          model_schema: model_schema
          id: id
          title: title
          type: "{}"
          slug: slug
        name: name
        namespace:
          name: name
          id: id
          slug: slug
        id: id
        triggers: triggers
        type: "{}"
      properties:
        data_type:
          $ref: '#/components/schemas/data_type'
        id:
          title: id
          type: string
        name:
          title: name
          type: string
        namespace:
          $ref: '#/components/schemas/namespace'
        triggers:
          title: triggers
          type: string
        type:
          properties: {}
          title: type
          type: object
      title: observer
      type: object
    scheduler:
      example:
        expression: expression
        name: name
        namespace:
          name: name
          id: id
          slug: slug
        id: id
        activated: true
      properties:
        activated:
          title: activated
          type: boolean
        expression:
          title: expression
          type: string
        id:
          title: id
          type: string
        name:
          title: name
          type: string
        namespace:
          $ref: '#/components/schemas/namespace'
      title: scheduler
      type: object
    schema:
      example:
        schema: schema
        namespace:
          name: name
          id: id
          slug: slug
        id: id
        uri: uri
      properties:
        id:
          title: id
          type: string
        namespace:
          $ref: '#/components/schemas/namespace'
        schema:
          title: schema
          type: string
        uri:
          title: uri
          type: string
      title: schema
      type: object
    translator:
      example:
        custom_data_type:
          show_navigation_link: show_navigation_link
          name: name
          namespace:
            name: name
            id: id
            slug: slug
          model_schema: model_schema
          id: id
          title: title
          type: "{}"
          slug: slug
        target_data_type:
          show_navigation_link: show_navigation_link
          name: name
          namespace:
            name: name
            id: id
            slug: slug
          model_schema: model_schema
          id: id
          title: title
          type: "{}"
          slug: slug
        name: name
        namespace:
          name: name
          id: id
          slug: slug
        style: Ruby
        id: id
        transformation: transformation
        type: Import
        source_data_type:
          show_navigation_link: show_navigation_link
          name: name
          namespace:
            name: name
            id: id
            slug: slug
          model_schema: model_schema
          id: id
          title: title
          type: "{}"
          slug: slug
      properties:
        custom_data_type:
          $ref: '#/components/schemas/data_type'
        id:
          title: id
          type: string
        name:
          title: name
          type: string
        namespace:
          $ref: '#/components/schemas/namespace'
        source_data_type:
          $ref: '#/components/schemas/data_type'
        style:
          enum:
          - Ruby
          - Liquid
          - xslt
          title: style
          type: string
        target_data_type:
          $ref: '#/components/schemas/data_type'
        transformation:
          title: transformation
          type: string
        type:
          enum:
          - Import
          - Export
          - Convert
          - Update
          title: type
          type: string
      title: translator
      type: object
    webhook:
      example:
        headers:
        - value: value
          key: key
        - value: value
          key: key
        path: path
        name: name
        namespace:
          name: name
          id: id
          slug: slug
        id: id
        parameters:
        - value: value
          key: key
        - value: value
          key: key
      properties:
        headers:
          items:
            $ref: '#/components/schemas/connection_headers_inner'
          title: headers
          type: array
        id:
          title: id
          type: string
        name:
          title: name
          type: string
        namespace:
          $ref: '#/components/schemas/namespace'
        parameters:
          items:
            $ref: '#/components/schemas/connection_headers_inner'
          title: parameters
          type: array
        path:
          title: path
          type: string
      title: webhook
      type: object
    connection_headers_inner:
      example:
        value: value
        key: key
      properties:
        key:
          title: key
          type: string
        value:
          title: value
          type: string
      title: connection_headers_inner
      type: object
  securitySchemes:
    X-User-Access-Key:
      in: header
      name: X-User-Access-Key
      type: apiKey
      x-apikeyInfoFunc: openapi_server.controllers.security_controller.info_from_X-User-Access-Key
    X-User-Access-Token:
      in: header
      name: X-User-Access-Token
      type: apiKey
      x-apikeyInfoFunc: openapi_server.controllers.security_controller.info_from_X-User-Access-Token
x-original-swagger-version: "2.0"
