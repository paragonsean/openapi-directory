# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_type import DataType
from openapi_server.models.namespace import Namespace
from openapi_server import util


class Observer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_type: DataType=None, id: str=None, name: str=None, namespace: Namespace=None, triggers: str=None, type: object=None):
        """Observer - a model defined in OpenAPI

        :param data_type: The data_type of this Observer.
        :param id: The id of this Observer.
        :param name: The name of this Observer.
        :param namespace: The namespace of this Observer.
        :param triggers: The triggers of this Observer.
        :param type: The type of this Observer.
        """
        self.openapi_types = {
            'data_type': DataType,
            'id': str,
            'name': str,
            'namespace': Namespace,
            'triggers': str,
            'type': object
        }

        self.attribute_map = {
            'data_type': 'data_type',
            'id': 'id',
            'name': 'name',
            'namespace': 'namespace',
            'triggers': 'triggers',
            'type': 'type'
        }

        self._data_type = data_type
        self._id = id
        self._name = name
        self._namespace = namespace
        self._triggers = triggers
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Observer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The observer of this Observer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_type(self):
        """Gets the data_type of this Observer.


        :return: The data_type of this Observer.
        :rtype: DataType
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this Observer.


        :param data_type: The data_type of this Observer.
        :type data_type: DataType
        """

        self._data_type = data_type

    @property
    def id(self):
        """Gets the id of this Observer.


        :return: The id of this Observer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Observer.


        :param id: The id of this Observer.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Observer.


        :return: The name of this Observer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Observer.


        :param name: The name of this Observer.
        :type name: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this Observer.


        :return: The namespace of this Observer.
        :rtype: Namespace
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this Observer.


        :param namespace: The namespace of this Observer.
        :type namespace: Namespace
        """

        self._namespace = namespace

    @property
    def triggers(self):
        """Gets the triggers of this Observer.


        :return: The triggers of this Observer.
        :rtype: str
        """
        return self._triggers

    @triggers.setter
    def triggers(self, triggers):
        """Sets the triggers of this Observer.


        :param triggers: The triggers of this Observer.
        :type triggers: str
        """

        self._triggers = triggers

    @property
    def type(self):
        """Gets the type of this Observer.


        :return: The type of this Observer.
        :rtype: object
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Observer.


        :param type: The type of this Observer.
        :type type: object
        """

        self._type = type
