# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_role import ConnectionRole
from openapi_server.models.data_type import DataType
from openapi_server.models.namespace import Namespace
from openapi_server.models.translator import Translator
from openapi_server.models.webhook import Webhook
from openapi_server import util


class Flow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, connection_role: ConnectionRole=None, custom_data_type: DataType=None, event: object=None, id: str=None, name: str=None, namespace: Namespace=None, notify_request: bool=None, notify_response: bool=None, response_translator: Translator=None, translator: Translator=None, webhook: Webhook=None):
        """Flow - a model defined in OpenAPI

        :param active: The active of this Flow.
        :param connection_role: The connection_role of this Flow.
        :param custom_data_type: The custom_data_type of this Flow.
        :param event: The event of this Flow.
        :param id: The id of this Flow.
        :param name: The name of this Flow.
        :param namespace: The namespace of this Flow.
        :param notify_request: The notify_request of this Flow.
        :param notify_response: The notify_response of this Flow.
        :param response_translator: The response_translator of this Flow.
        :param translator: The translator of this Flow.
        :param webhook: The webhook of this Flow.
        """
        self.openapi_types = {
            'active': bool,
            'connection_role': ConnectionRole,
            'custom_data_type': DataType,
            'event': object,
            'id': str,
            'name': str,
            'namespace': Namespace,
            'notify_request': bool,
            'notify_response': bool,
            'response_translator': Translator,
            'translator': Translator,
            'webhook': Webhook
        }

        self.attribute_map = {
            'active': 'active',
            'connection_role': 'connection_role',
            'custom_data_type': 'custom_data_type',
            'event': 'event',
            'id': 'id',
            'name': 'name',
            'namespace': 'namespace',
            'notify_request': 'notify_request',
            'notify_response': 'notify_response',
            'response_translator': 'response_translator',
            'translator': 'translator',
            'webhook': 'webhook'
        }

        self._active = active
        self._connection_role = connection_role
        self._custom_data_type = custom_data_type
        self._event = event
        self._id = id
        self._name = name
        self._namespace = namespace
        self._notify_request = notify_request
        self._notify_response = notify_response
        self._response_translator = response_translator
        self._translator = translator
        self._webhook = webhook

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Flow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The flow of this Flow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this Flow.


        :return: The active of this Flow.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Flow.


        :param active: The active of this Flow.
        :type active: bool
        """

        self._active = active

    @property
    def connection_role(self):
        """Gets the connection_role of this Flow.


        :return: The connection_role of this Flow.
        :rtype: ConnectionRole
        """
        return self._connection_role

    @connection_role.setter
    def connection_role(self, connection_role):
        """Sets the connection_role of this Flow.


        :param connection_role: The connection_role of this Flow.
        :type connection_role: ConnectionRole
        """

        self._connection_role = connection_role

    @property
    def custom_data_type(self):
        """Gets the custom_data_type of this Flow.


        :return: The custom_data_type of this Flow.
        :rtype: DataType
        """
        return self._custom_data_type

    @custom_data_type.setter
    def custom_data_type(self, custom_data_type):
        """Sets the custom_data_type of this Flow.


        :param custom_data_type: The custom_data_type of this Flow.
        :type custom_data_type: DataType
        """

        self._custom_data_type = custom_data_type

    @property
    def event(self):
        """Gets the event of this Flow.


        :return: The event of this Flow.
        :rtype: object
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this Flow.


        :param event: The event of this Flow.
        :type event: object
        """

        self._event = event

    @property
    def id(self):
        """Gets the id of this Flow.


        :return: The id of this Flow.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Flow.


        :param id: The id of this Flow.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Flow.


        :return: The name of this Flow.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Flow.


        :param name: The name of this Flow.
        :type name: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this Flow.


        :return: The namespace of this Flow.
        :rtype: Namespace
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this Flow.


        :param namespace: The namespace of this Flow.
        :type namespace: Namespace
        """

        self._namespace = namespace

    @property
    def notify_request(self):
        """Gets the notify_request of this Flow.


        :return: The notify_request of this Flow.
        :rtype: bool
        """
        return self._notify_request

    @notify_request.setter
    def notify_request(self, notify_request):
        """Sets the notify_request of this Flow.


        :param notify_request: The notify_request of this Flow.
        :type notify_request: bool
        """

        self._notify_request = notify_request

    @property
    def notify_response(self):
        """Gets the notify_response of this Flow.


        :return: The notify_response of this Flow.
        :rtype: bool
        """
        return self._notify_response

    @notify_response.setter
    def notify_response(self, notify_response):
        """Sets the notify_response of this Flow.


        :param notify_response: The notify_response of this Flow.
        :type notify_response: bool
        """

        self._notify_response = notify_response

    @property
    def response_translator(self):
        """Gets the response_translator of this Flow.


        :return: The response_translator of this Flow.
        :rtype: Translator
        """
        return self._response_translator

    @response_translator.setter
    def response_translator(self, response_translator):
        """Sets the response_translator of this Flow.


        :param response_translator: The response_translator of this Flow.
        :type response_translator: Translator
        """

        self._response_translator = response_translator

    @property
    def translator(self):
        """Gets the translator of this Flow.


        :return: The translator of this Flow.
        :rtype: Translator
        """
        return self._translator

    @translator.setter
    def translator(self, translator):
        """Sets the translator of this Flow.


        :param translator: The translator of this Flow.
        :type translator: Translator
        """

        self._translator = translator

    @property
    def webhook(self):
        """Gets the webhook of this Flow.


        :return: The webhook of this Flow.
        :rtype: Webhook
        """
        return self._webhook

    @webhook.setter
    def webhook(self, webhook):
        """Sets the webhook of this Flow.


        :param webhook: The webhook of this Flow.
        :type webhook: Webhook
        """

        self._webhook = webhook
