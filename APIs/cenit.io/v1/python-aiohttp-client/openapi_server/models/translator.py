# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_type import DataType
from openapi_server.models.namespace import Namespace
from openapi_server import util


class Translator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_data_type: DataType=None, id: str=None, name: str=None, namespace: Namespace=None, source_data_type: DataType=None, style: str=None, target_data_type: DataType=None, transformation: str=None, type: str=None):
        """Translator - a model defined in OpenAPI

        :param custom_data_type: The custom_data_type of this Translator.
        :param id: The id of this Translator.
        :param name: The name of this Translator.
        :param namespace: The namespace of this Translator.
        :param source_data_type: The source_data_type of this Translator.
        :param style: The style of this Translator.
        :param target_data_type: The target_data_type of this Translator.
        :param transformation: The transformation of this Translator.
        :param type: The type of this Translator.
        """
        self.openapi_types = {
            'custom_data_type': DataType,
            'id': str,
            'name': str,
            'namespace': Namespace,
            'source_data_type': DataType,
            'style': str,
            'target_data_type': DataType,
            'transformation': str,
            'type': str
        }

        self.attribute_map = {
            'custom_data_type': 'custom_data_type',
            'id': 'id',
            'name': 'name',
            'namespace': 'namespace',
            'source_data_type': 'source_data_type',
            'style': 'style',
            'target_data_type': 'target_data_type',
            'transformation': 'transformation',
            'type': 'type'
        }

        self._custom_data_type = custom_data_type
        self._id = id
        self._name = name
        self._namespace = namespace
        self._source_data_type = source_data_type
        self._style = style
        self._target_data_type = target_data_type
        self._transformation = transformation
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Translator':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The translator of this Translator.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_data_type(self):
        """Gets the custom_data_type of this Translator.


        :return: The custom_data_type of this Translator.
        :rtype: DataType
        """
        return self._custom_data_type

    @custom_data_type.setter
    def custom_data_type(self, custom_data_type):
        """Sets the custom_data_type of this Translator.


        :param custom_data_type: The custom_data_type of this Translator.
        :type custom_data_type: DataType
        """

        self._custom_data_type = custom_data_type

    @property
    def id(self):
        """Gets the id of this Translator.


        :return: The id of this Translator.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Translator.


        :param id: The id of this Translator.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Translator.


        :return: The name of this Translator.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Translator.


        :param name: The name of this Translator.
        :type name: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this Translator.


        :return: The namespace of this Translator.
        :rtype: Namespace
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this Translator.


        :param namespace: The namespace of this Translator.
        :type namespace: Namespace
        """

        self._namespace = namespace

    @property
    def source_data_type(self):
        """Gets the source_data_type of this Translator.


        :return: The source_data_type of this Translator.
        :rtype: DataType
        """
        return self._source_data_type

    @source_data_type.setter
    def source_data_type(self, source_data_type):
        """Sets the source_data_type of this Translator.


        :param source_data_type: The source_data_type of this Translator.
        :type source_data_type: DataType
        """

        self._source_data_type = source_data_type

    @property
    def style(self):
        """Gets the style of this Translator.


        :return: The style of this Translator.
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this Translator.


        :param style: The style of this Translator.
        :type style: str
        """
        allowed_values = ["Ruby", "Liquid", "xslt"]  # noqa: E501
        if style not in allowed_values:
            raise ValueError(
                "Invalid value for `style` ({0}), must be one of {1}"
                .format(style, allowed_values)
            )

        self._style = style

    @property
    def target_data_type(self):
        """Gets the target_data_type of this Translator.


        :return: The target_data_type of this Translator.
        :rtype: DataType
        """
        return self._target_data_type

    @target_data_type.setter
    def target_data_type(self, target_data_type):
        """Sets the target_data_type of this Translator.


        :param target_data_type: The target_data_type of this Translator.
        :type target_data_type: DataType
        """

        self._target_data_type = target_data_type

    @property
    def transformation(self):
        """Gets the transformation of this Translator.


        :return: The transformation of this Translator.
        :rtype: str
        """
        return self._transformation

    @transformation.setter
    def transformation(self, transformation):
        """Sets the transformation of this Translator.


        :param transformation: The transformation of this Translator.
        :type transformation: str
        """

        self._transformation = transformation

    @property
    def type(self):
        """Gets the type of this Translator.


        :return: The type of this Translator.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Translator.


        :param type: The type of this Translator.
        :type type: str
        """
        allowed_values = ["Import", "Export", "Convert", "Update"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
