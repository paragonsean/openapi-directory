# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.namespace import Namespace
from openapi_server import util


class Scheduler(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activated: bool=None, expression: str=None, id: str=None, name: str=None, namespace: Namespace=None):
        """Scheduler - a model defined in OpenAPI

        :param activated: The activated of this Scheduler.
        :param expression: The expression of this Scheduler.
        :param id: The id of this Scheduler.
        :param name: The name of this Scheduler.
        :param namespace: The namespace of this Scheduler.
        """
        self.openapi_types = {
            'activated': bool,
            'expression': str,
            'id': str,
            'name': str,
            'namespace': Namespace
        }

        self.attribute_map = {
            'activated': 'activated',
            'expression': 'expression',
            'id': 'id',
            'name': 'name',
            'namespace': 'namespace'
        }

        self._activated = activated
        self._expression = expression
        self._id = id
        self._name = name
        self._namespace = namespace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Scheduler':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The scheduler of this Scheduler.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activated(self):
        """Gets the activated of this Scheduler.


        :return: The activated of this Scheduler.
        :rtype: bool
        """
        return self._activated

    @activated.setter
    def activated(self, activated):
        """Sets the activated of this Scheduler.


        :param activated: The activated of this Scheduler.
        :type activated: bool
        """

        self._activated = activated

    @property
    def expression(self):
        """Gets the expression of this Scheduler.


        :return: The expression of this Scheduler.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this Scheduler.


        :param expression: The expression of this Scheduler.
        :type expression: str
        """

        self._expression = expression

    @property
    def id(self):
        """Gets the id of this Scheduler.


        :return: The id of this Scheduler.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Scheduler.


        :param id: The id of this Scheduler.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Scheduler.


        :return: The name of this Scheduler.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Scheduler.


        :param name: The name of this Scheduler.
        :type name: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this Scheduler.


        :return: The namespace of this Scheduler.
        :rtype: Namespace
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this Scheduler.


        :param namespace: The namespace of this Scheduler.
        :type namespace: Namespace
        """

        self._namespace = namespace
