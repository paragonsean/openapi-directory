# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection import Connection
from openapi_server.models.namespace import Namespace
from openapi_server.models.webhook import Webhook
from openapi_server import util


class ConnectionRole(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection: List[Connection]=None, id: str=None, name: str=None, namespace: Namespace=None, webhook: List[Webhook]=None):
        """ConnectionRole - a model defined in OpenAPI

        :param connection: The connection of this ConnectionRole.
        :param id: The id of this ConnectionRole.
        :param name: The name of this ConnectionRole.
        :param namespace: The namespace of this ConnectionRole.
        :param webhook: The webhook of this ConnectionRole.
        """
        self.openapi_types = {
            'connection': List[Connection],
            'id': str,
            'name': str,
            'namespace': Namespace,
            'webhook': List[Webhook]
        }

        self.attribute_map = {
            'connection': 'connection',
            'id': 'id',
            'name': 'name',
            'namespace': 'namespace',
            'webhook': 'webhook'
        }

        self._connection = connection
        self._id = id
        self._name = name
        self._namespace = namespace
        self._webhook = webhook

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionRole':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The connection_role of this ConnectionRole.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection(self):
        """Gets the connection of this ConnectionRole.


        :return: The connection of this ConnectionRole.
        :rtype: List[Connection]
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this ConnectionRole.


        :param connection: The connection of this ConnectionRole.
        :type connection: List[Connection]
        """

        self._connection = connection

    @property
    def id(self):
        """Gets the id of this ConnectionRole.


        :return: The id of this ConnectionRole.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConnectionRole.


        :param id: The id of this ConnectionRole.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ConnectionRole.


        :return: The name of this ConnectionRole.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConnectionRole.


        :param name: The name of this ConnectionRole.
        :type name: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this ConnectionRole.


        :return: The namespace of this ConnectionRole.
        :rtype: Namespace
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this ConnectionRole.


        :param namespace: The namespace of this ConnectionRole.
        :type namespace: Namespace
        """

        self._namespace = namespace

    @property
    def webhook(self):
        """Gets the webhook of this ConnectionRole.


        :return: The webhook of this ConnectionRole.
        :rtype: List[Webhook]
        """
        return self._webhook

    @webhook.setter
    def webhook(self, webhook):
        """Sets the webhook of this ConnectionRole.


        :param webhook: The webhook of this ConnectionRole.
        :type webhook: List[Webhook]
        """

        self._webhook = webhook
