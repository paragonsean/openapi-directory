# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_headers_inner import ConnectionHeadersInner
from openapi_server.models.namespace import Namespace
from openapi_server import util


class Connection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, headers: List[ConnectionHeadersInner]=None, id: str=None, key: str=None, name: str=None, namespace: Namespace=None, parameters: List[ConnectionHeadersInner]=None, token: str=None, url: str=None):
        """Connection - a model defined in OpenAPI

        :param headers: The headers of this Connection.
        :param id: The id of this Connection.
        :param key: The key of this Connection.
        :param name: The name of this Connection.
        :param namespace: The namespace of this Connection.
        :param parameters: The parameters of this Connection.
        :param token: The token of this Connection.
        :param url: The url of this Connection.
        """
        self.openapi_types = {
            'headers': List[ConnectionHeadersInner],
            'id': str,
            'key': str,
            'name': str,
            'namespace': Namespace,
            'parameters': List[ConnectionHeadersInner],
            'token': str,
            'url': str
        }

        self.attribute_map = {
            'headers': 'headers',
            'id': 'id',
            'key': 'key',
            'name': 'name',
            'namespace': 'namespace',
            'parameters': 'parameters',
            'token': 'token',
            'url': 'url'
        }

        self._headers = headers
        self._id = id
        self._key = key
        self._name = name
        self._namespace = namespace
        self._parameters = parameters
        self._token = token
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Connection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The connection of this Connection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def headers(self):
        """Gets the headers of this Connection.


        :return: The headers of this Connection.
        :rtype: List[ConnectionHeadersInner]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this Connection.


        :param headers: The headers of this Connection.
        :type headers: List[ConnectionHeadersInner]
        """

        self._headers = headers

    @property
    def id(self):
        """Gets the id of this Connection.


        :return: The id of this Connection.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Connection.


        :param id: The id of this Connection.
        :type id: str
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this Connection.


        :return: The key of this Connection.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Connection.


        :param key: The key of this Connection.
        :type key: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this Connection.


        :return: The name of this Connection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Connection.


        :param name: The name of this Connection.
        :type name: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this Connection.


        :return: The namespace of this Connection.
        :rtype: Namespace
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this Connection.


        :param namespace: The namespace of this Connection.
        :type namespace: Namespace
        """

        self._namespace = namespace

    @property
    def parameters(self):
        """Gets the parameters of this Connection.


        :return: The parameters of this Connection.
        :rtype: List[ConnectionHeadersInner]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Connection.


        :param parameters: The parameters of this Connection.
        :type parameters: List[ConnectionHeadersInner]
        """

        self._parameters = parameters

    @property
    def token(self):
        """Gets the token of this Connection.


        :return: The token of this Connection.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Connection.


        :param token: The token of this Connection.
        :type token: str
        """

        self._token = token

    @property
    def url(self):
        """Gets the url of this Connection.


        :return: The url of this Connection.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Connection.


        :param url: The url of this Connection.
        :type url: str
        """

        self._url = url
