/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.TransactionCategorizationRule;
import org.openapitools.client.model.TransactionCategorizationRuleRequest;
import org.openapitools.client.model.TransactionCategorizationRuleResponse;
import org.openapitools.client.model.TransactionCategoryRequest;
import org.openapitools.client.model.TransactionCategoryResponse;
import org.openapitools.client.model.TransactionCountResponse;
import org.openapitools.client.model.TransactionRequest;
import org.openapitools.client.model.TransactionResponse;
import org.openapitools.client.model.UpdateCategoryRequest;
import org.openapitools.client.model.YodleeError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransactionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createOrRunTransactionCategorizationRules
     * @param action To run rules, pass action&#x3D;run. Only value run is supported (optional)
     * @param ruleParam rules(JSON format) to categorize the transactions (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y806 : Invalid input&lt;br&gt;Y400 : Rule already exists. Rule should be unique in terms of combination of description and amount </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrRunTransactionCategorizationRulesCall(String action, String ruleParam, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/categories/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        if (ruleParam != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ruleParam", ruleParam));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrRunTransactionCategorizationRulesValidateBeforeCall(String action, String ruleParam, final ApiCallback _callback) throws ApiException {
        return createOrRunTransactionCategorizationRulesCall(action, ruleParam, _callback);

    }

    /**
     * Create or Run Transaction Categorization Rule
     * The Create or Run Transaction Categorization Rule endpoint is used to: &lt;br&gt;Create transaction categorization rules for both system and user-defined categories.&lt;br&gt;Run all the transaction categorization rules to categorize transactions by calling the endpoint with action&#x3D;run as the query parameter. &lt;br&gt;&lt;br&gt;The input body parameters to create transaction categorization rules follow:&lt;br&gt;     categoryId - This field is mandatory and numeric&lt;br&gt;     priority - This field is optional and numeric. Priority decides the order in which the rule gets applied on transactions.&lt;br&gt;     ruleClause - This field is mandatory and should contain at least one rule&lt;br&gt;     field - The value can be description or amount&lt;br&gt;&lt;br&gt;       If the field value is description then,&lt;br&gt;         1. operation - value can be stringEquals or stringContains&lt;br&gt;         2. value - value should be min of 3 and max of 50 characters&lt;br&gt;&lt;br&gt;       If the field value is amount then, &lt;br&gt;         1. operation - value can be numberEquals, numberLessThan, numberLessThanEquals, numberGreaterThan or numberGreaterThanEquals&lt;br&gt;         2. value - min value 0 and a max value of 99999999999.99 is allowed&lt;br&gt;The HTTP response code is 201 (Created Successfully).
     * @param action To run rules, pass action&#x3D;run. Only value run is supported (optional)
     * @param ruleParam rules(JSON format) to categorize the transactions (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y806 : Invalid input&lt;br&gt;Y400 : Rule already exists. Rule should be unique in terms of combination of description and amount </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void createOrRunTransactionCategorizationRules(String action, String ruleParam) throws ApiException {
        createOrRunTransactionCategorizationRulesWithHttpInfo(action, ruleParam);
    }

    /**
     * Create or Run Transaction Categorization Rule
     * The Create or Run Transaction Categorization Rule endpoint is used to: &lt;br&gt;Create transaction categorization rules for both system and user-defined categories.&lt;br&gt;Run all the transaction categorization rules to categorize transactions by calling the endpoint with action&#x3D;run as the query parameter. &lt;br&gt;&lt;br&gt;The input body parameters to create transaction categorization rules follow:&lt;br&gt;     categoryId - This field is mandatory and numeric&lt;br&gt;     priority - This field is optional and numeric. Priority decides the order in which the rule gets applied on transactions.&lt;br&gt;     ruleClause - This field is mandatory and should contain at least one rule&lt;br&gt;     field - The value can be description or amount&lt;br&gt;&lt;br&gt;       If the field value is description then,&lt;br&gt;         1. operation - value can be stringEquals or stringContains&lt;br&gt;         2. value - value should be min of 3 and max of 50 characters&lt;br&gt;&lt;br&gt;       If the field value is amount then, &lt;br&gt;         1. operation - value can be numberEquals, numberLessThan, numberLessThanEquals, numberGreaterThan or numberGreaterThanEquals&lt;br&gt;         2. value - min value 0 and a max value of 99999999999.99 is allowed&lt;br&gt;The HTTP response code is 201 (Created Successfully).
     * @param action To run rules, pass action&#x3D;run. Only value run is supported (optional)
     * @param ruleParam rules(JSON format) to categorize the transactions (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y806 : Invalid input&lt;br&gt;Y400 : Rule already exists. Rule should be unique in terms of combination of description and amount </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createOrRunTransactionCategorizationRulesWithHttpInfo(String action, String ruleParam) throws ApiException {
        okhttp3.Call localVarCall = createOrRunTransactionCategorizationRulesValidateBeforeCall(action, ruleParam, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or Run Transaction Categorization Rule (asynchronously)
     * The Create or Run Transaction Categorization Rule endpoint is used to: &lt;br&gt;Create transaction categorization rules for both system and user-defined categories.&lt;br&gt;Run all the transaction categorization rules to categorize transactions by calling the endpoint with action&#x3D;run as the query parameter. &lt;br&gt;&lt;br&gt;The input body parameters to create transaction categorization rules follow:&lt;br&gt;     categoryId - This field is mandatory and numeric&lt;br&gt;     priority - This field is optional and numeric. Priority decides the order in which the rule gets applied on transactions.&lt;br&gt;     ruleClause - This field is mandatory and should contain at least one rule&lt;br&gt;     field - The value can be description or amount&lt;br&gt;&lt;br&gt;       If the field value is description then,&lt;br&gt;         1. operation - value can be stringEquals or stringContains&lt;br&gt;         2. value - value should be min of 3 and max of 50 characters&lt;br&gt;&lt;br&gt;       If the field value is amount then, &lt;br&gt;         1. operation - value can be numberEquals, numberLessThan, numberLessThanEquals, numberGreaterThan or numberGreaterThanEquals&lt;br&gt;         2. value - min value 0 and a max value of 99999999999.99 is allowed&lt;br&gt;The HTTP response code is 201 (Created Successfully).
     * @param action To run rules, pass action&#x3D;run. Only value run is supported (optional)
     * @param ruleParam rules(JSON format) to categorize the transactions (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y806 : Invalid input&lt;br&gt;Y400 : Rule already exists. Rule should be unique in terms of combination of description and amount </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrRunTransactionCategorizationRulesAsync(String action, String ruleParam, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrRunTransactionCategorizationRulesValidateBeforeCall(action, ruleParam, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTransactionCategory
     * @param transactionCategoryRequest User Transaction Category in JSON format (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for categoryParam&lt;br&gt;Y800 : Invalid value for source&lt;br&gt;Y801 : Invalid length for categoryName. Min 1 and max 50 is required&lt;br&gt;Y803 : parentCategoryId required&lt;br&gt;Y811 : categoryName value already exists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTransactionCategoryCall(TransactionCategoryRequest transactionCategoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionCategoryRequest;

        // create path and map variables
        String localVarPath = "/transactions/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTransactionCategoryValidateBeforeCall(TransactionCategoryRequest transactionCategoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionCategoryRequest' is set
        if (transactionCategoryRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionCategoryRequest' when calling createTransactionCategory(Async)");
        }

        return createTransactionCategoryCall(transactionCategoryRequest, _callback);

    }

    /**
     * Create Category
     * The create transaction categories service is used to create user-defined categories for a system-defined category.&lt;br&gt;The parentCategoryId is the system-defined category id.This can be retrieved using get transaction categories service.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 201 (Created successfully).&lt;br&gt;
     * @param transactionCategoryRequest User Transaction Category in JSON format (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for categoryParam&lt;br&gt;Y800 : Invalid value for source&lt;br&gt;Y801 : Invalid length for categoryName. Min 1 and max 50 is required&lt;br&gt;Y803 : parentCategoryId required&lt;br&gt;Y811 : categoryName value already exists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void createTransactionCategory(TransactionCategoryRequest transactionCategoryRequest) throws ApiException {
        createTransactionCategoryWithHttpInfo(transactionCategoryRequest);
    }

    /**
     * Create Category
     * The create transaction categories service is used to create user-defined categories for a system-defined category.&lt;br&gt;The parentCategoryId is the system-defined category id.This can be retrieved using get transaction categories service.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 201 (Created successfully).&lt;br&gt;
     * @param transactionCategoryRequest User Transaction Category in JSON format (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for categoryParam&lt;br&gt;Y800 : Invalid value for source&lt;br&gt;Y801 : Invalid length for categoryName. Min 1 and max 50 is required&lt;br&gt;Y803 : parentCategoryId required&lt;br&gt;Y811 : categoryName value already exists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createTransactionCategoryWithHttpInfo(TransactionCategoryRequest transactionCategoryRequest) throws ApiException {
        okhttp3.Call localVarCall = createTransactionCategoryValidateBeforeCall(transactionCategoryRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Category (asynchronously)
     * The create transaction categories service is used to create user-defined categories for a system-defined category.&lt;br&gt;The parentCategoryId is the system-defined category id.This can be retrieved using get transaction categories service.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 201 (Created successfully).&lt;br&gt;
     * @param transactionCategoryRequest User Transaction Category in JSON format (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for categoryParam&lt;br&gt;Y800 : Invalid value for source&lt;br&gt;Y801 : Invalid length for categoryName. Min 1 and max 50 is required&lt;br&gt;Y803 : parentCategoryId required&lt;br&gt;Y811 : categoryName value already exists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTransactionCategoryAsync(TransactionCategoryRequest transactionCategoryRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTransactionCategoryValidateBeforeCall(transactionCategoryRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTransactionCategorizationRule
     * @param ruleId ruleId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for ruleId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTransactionCategorizationRuleCall(Long ruleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/categories/rules/{ruleId}"
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTransactionCategorizationRuleValidateBeforeCall(Long ruleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling deleteTransactionCategorizationRule(Async)");
        }

        return deleteTransactionCategorizationRuleCall(ruleId, _callback);

    }

    /**
     * Delete Transaction Categorization Rule
     * The delete transaction categorization rule service is used to delete the given user-defined transaction categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;This will delete all the corresponding rule clauses associated with the rule.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
     * @param ruleId ruleId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for ruleId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTransactionCategorizationRule(Long ruleId) throws ApiException {
        deleteTransactionCategorizationRuleWithHttpInfo(ruleId);
    }

    /**
     * Delete Transaction Categorization Rule
     * The delete transaction categorization rule service is used to delete the given user-defined transaction categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;This will delete all the corresponding rule clauses associated with the rule.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
     * @param ruleId ruleId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for ruleId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTransactionCategorizationRuleWithHttpInfo(Long ruleId) throws ApiException {
        okhttp3.Call localVarCall = deleteTransactionCategorizationRuleValidateBeforeCall(ruleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Transaction Categorization Rule (asynchronously)
     * The delete transaction categorization rule service is used to delete the given user-defined transaction categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;This will delete all the corresponding rule clauses associated with the rule.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
     * @param ruleId ruleId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for ruleId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTransactionCategorizationRuleAsync(Long ruleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTransactionCategorizationRuleValidateBeforeCall(ruleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTransactionCategory
     * @param categoryId categoryId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for categoryId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTransactionCategoryCall(Long categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/categories/{categoryId}"
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTransactionCategoryValidateBeforeCall(Long categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling deleteTransactionCategory(Async)");
        }

        return deleteTransactionCategoryCall(categoryId, _callback);

    }

    /**
     * Delete Category
     * The delete transaction categories service is used to delete the given user-defined category.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
     * @param categoryId categoryId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for categoryId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTransactionCategory(Long categoryId) throws ApiException {
        deleteTransactionCategoryWithHttpInfo(categoryId);
    }

    /**
     * Delete Category
     * The delete transaction categories service is used to delete the given user-defined category.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
     * @param categoryId categoryId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for categoryId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTransactionCategoryWithHttpInfo(Long categoryId) throws ApiException {
        okhttp3.Call localVarCall = deleteTransactionCategoryValidateBeforeCall(categoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Category (asynchronously)
     * The delete transaction categories service is used to delete the given user-defined category.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
     * @param categoryId categoryId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for categoryId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTransactionCategoryAsync(Long categoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTransactionCategoryValidateBeforeCall(categoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransactionCategories
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionCategoriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionCategoriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTransactionCategoriesCall(_callback);

    }

    /**
     * Get Transaction Category List
     * The categories service returns the list of available transaction categories.&lt;br&gt;High level category is returned in the response only if it is opted by the customer.&lt;br&gt;When invoked by passing the cobrand session or admin access token, this service returns the supported transaction categories at the cobrand level. &lt;br&gt;When invoked by passing the cobrand session and the user session or user access token, this service returns the transaction categories &lt;br&gt;along with user-defined categories.&lt;br&gt;Double quotes in the user-defined category name will be prefixed by backslashes (&amp;#92;) in the response, &lt;br&gt;e.g. Toys \&quot;R\&quot; Us.&lt;br/&gt;Source and id are the primary attributes of the category entity.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
     * @return TransactionCategoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public TransactionCategoryResponse getTransactionCategories() throws ApiException {
        ApiResponse<TransactionCategoryResponse> localVarResp = getTransactionCategoriesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Transaction Category List
     * The categories service returns the list of available transaction categories.&lt;br&gt;High level category is returned in the response only if it is opted by the customer.&lt;br&gt;When invoked by passing the cobrand session or admin access token, this service returns the supported transaction categories at the cobrand level. &lt;br&gt;When invoked by passing the cobrand session and the user session or user access token, this service returns the transaction categories &lt;br&gt;along with user-defined categories.&lt;br&gt;Double quotes in the user-defined category name will be prefixed by backslashes (&amp;#92;) in the response, &lt;br&gt;e.g. Toys \&quot;R\&quot; Us.&lt;br/&gt;Source and id are the primary attributes of the category entity.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
     * @return ApiResponse&lt;TransactionCategoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionCategoryResponse> getTransactionCategoriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTransactionCategoriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TransactionCategoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transaction Category List (asynchronously)
     * The categories service returns the list of available transaction categories.&lt;br&gt;High level category is returned in the response only if it is opted by the customer.&lt;br&gt;When invoked by passing the cobrand session or admin access token, this service returns the supported transaction categories at the cobrand level. &lt;br&gt;When invoked by passing the cobrand session and the user session or user access token, this service returns the transaction categories &lt;br&gt;along with user-defined categories.&lt;br&gt;Double quotes in the user-defined category name will be prefixed by backslashes (&amp;#92;) in the response, &lt;br&gt;e.g. Toys \&quot;R\&quot; Us.&lt;br/&gt;Source and id are the primary attributes of the category entity.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionCategoriesAsync(final ApiCallback<TransactionCategoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionCategoriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TransactionCategoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransactionCategorizationRules
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionCategorizationRulesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/categories/txnRules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionCategorizationRulesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTransactionCategorizationRulesCall(_callback);

    }

    /**
     * Get Transaction Categorization Rules
     * The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
     * @return TransactionCategorizationRuleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public TransactionCategorizationRuleResponse getTransactionCategorizationRules() throws ApiException {
        ApiResponse<TransactionCategorizationRuleResponse> localVarResp = getTransactionCategorizationRulesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Transaction Categorization Rules
     * The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
     * @return ApiResponse&lt;TransactionCategorizationRuleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionCategorizationRuleResponse> getTransactionCategorizationRulesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTransactionCategorizationRulesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TransactionCategorizationRuleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transaction Categorization Rules (asynchronously)
     * The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionCategorizationRulesAsync(final ApiCallback<TransactionCategorizationRuleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionCategorizationRulesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TransactionCategorizationRuleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransactionCategorizationRulesDeprecated
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getTransactionCategorizationRulesDeprecatedCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/categories/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionCategorizationRulesDeprecatedValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTransactionCategorizationRulesDeprecatedCall(_callback);

    }

    /**
     * Get Transaction Categorization Rules
     * The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
     * @return List&lt;TransactionCategorizationRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public List<TransactionCategorizationRule> getTransactionCategorizationRulesDeprecated() throws ApiException {
        ApiResponse<List<TransactionCategorizationRule>> localVarResp = getTransactionCategorizationRulesDeprecatedWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Transaction Categorization Rules
     * The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
     * @return ApiResponse&lt;List&lt;TransactionCategorizationRule&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<List<TransactionCategorizationRule>> getTransactionCategorizationRulesDeprecatedWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTransactionCategorizationRulesDeprecatedValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<TransactionCategorizationRule>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transaction Categorization Rules (asynchronously)
     * The get transaction categorization rule service is used to get all the categorization rules.&lt;br&gt;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getTransactionCategorizationRulesDeprecatedAsync(final ApiCallback<List<TransactionCategorizationRule>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionCategorizationRulesDeprecatedValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<TransactionCategorizationRule>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransactions
     * @param accountId Comma separated accountIds (optional)
     * @param baseType DEBIT/CREDIT (optional)
     * @param categoryId Comma separated categoryIds (optional)
     * @param categoryType Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)
     * @param container bank/creditCard/investment/insurance/loan (optional)
     * @param detailCategoryId Comma separated detailCategoryIds (optional)
     * @param fromDate Transaction from date(YYYY-MM-DD) (optional)
     * @param highLevelCategoryId Comma separated highLevelCategoryIds (optional)
     * @param keyword Transaction search text (optional)
     * @param skip skip (Min 0) (optional)
     * @param toDate Transaction end date (YYYY-MM-DD) (optional)
     * @param top top (Max 500) (optional)
     * @param type Transaction Type(SELL,SWEEP, etc.) for bank/creditCard/investment (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for baseType&lt;br&gt;Y800 : Invalid value for fromDate&lt;br&gt;Y800 : Invalid value for category&lt;br&gt;Y800 : Invalid value for toDate&lt;br&gt;Y800 : Invalid value for container&lt;br&gt;Y809 : Invalid date range&lt;br&gt;Y804 : Permitted values of top between 1 - 500&lt;br&gt;Y805 : Multiple containers not supported&lt;br&gt;Y800 : Invalid value for transaction type&lt;br&gt;Y824 : The maximum number of accountIds permitted is 100&lt;br&gt;Y824 : The maximum number of categoryIds permitted is 100&lt;br&gt;Y824 : The maximum number of highLevelCategoryIds permitted is 100&lt;br&gt;Y848 : detailCategoryId cannot be provided as input, as the detailedCategory feature is not enabled&lt;br&gt;Y823 : detailCategoryId is not for applicable containers other than bank and card&lt;br&gt;Y824 : The maximum number of detailCategoryIds permitted is 100&lt;br&gt;Y800 : Invalid value for detailCategoryId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionsCall(String accountId, String baseType, String categoryId, String categoryType, String container, String detailCategoryId, String fromDate, String highLevelCategoryId, String keyword, Integer skip, String toDate, Integer top, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        if (baseType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("baseType", baseType));
        }

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryId", categoryId));
        }

        if (categoryType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryType", categoryType));
        }

        if (container != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("container", container));
        }

        if (detailCategoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("detailCategoryId", detailCategoryId));
        }

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (highLevelCategoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("highLevelCategoryId", highLevelCategoryId));
        }

        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        if (top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("top", top));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionsValidateBeforeCall(String accountId, String baseType, String categoryId, String categoryType, String container, String detailCategoryId, String fromDate, String highLevelCategoryId, String keyword, Integer skip, String toDate, Integer top, String type, final ApiCallback _callback) throws ApiException {
        return getTransactionsCall(accountId, baseType, categoryId, categoryType, container, detailCategoryId, fromDate, highLevelCategoryId, keyword, skip, toDate, top, type, _callback);

    }

    /**
     * Get Transactions
     * The Transaction service is used to get a list of transactions for a user.&lt;br&gt;By default, this service returns the last 30 days of transactions from today&#39;s date.&lt;br&gt;The keyword parameter performs a contains search on the original, consumer, and simple description attributes, replace the special characters #, &amp;, and + with percent-encoding values %23, %26, and %2B respectively. Eg: for -Debit# , pass the input as -Debit%23.&lt;br&gt;Values for categoryId parameter can be fetched from get transaction category list service.&lt;br&gt; The categoryId is used to filter transactions based on system-defined category as well as user-defined category.&lt;br&gt;User-defined categoryIds should be provided in the filter with the prefix &#39;&#39;U&#39;&#39;. E.g. U10002&lt;br&gt;The skip and top parameters are used for pagination. In the skip and top parameters pass the number of records to be skipped and retrieved, respectively. The response header provides the links to retrieve the next and previous set of transactions.&lt;br&gt;Double quotes in the merchant name will be prefixed by backslashes (&amp;#92;) in the response, e.g. Toys \&quot;R\&quot; Us. &lt;br&gt;sourceId is a unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts. Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;&lt;li&gt; &lt;a href&#x3D;\&quot;https://developer.yodlee.com/docs/api/1.1/Transaction_Data_Enrichment\&quot;&gt;TDE&lt;/a&gt; is made available for bank and card accounts and for the US market only.The address field in the response is available only when the TDE key is turned on.&lt;li&gt;The pagination feature is available by default. If no values are passed in the skip and top parameters, the API will only return the first 500 transactions.&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
     * @param accountId Comma separated accountIds (optional)
     * @param baseType DEBIT/CREDIT (optional)
     * @param categoryId Comma separated categoryIds (optional)
     * @param categoryType Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)
     * @param container bank/creditCard/investment/insurance/loan (optional)
     * @param detailCategoryId Comma separated detailCategoryIds (optional)
     * @param fromDate Transaction from date(YYYY-MM-DD) (optional)
     * @param highLevelCategoryId Comma separated highLevelCategoryIds (optional)
     * @param keyword Transaction search text (optional)
     * @param skip skip (Min 0) (optional)
     * @param toDate Transaction end date (YYYY-MM-DD) (optional)
     * @param top top (Max 500) (optional)
     * @param type Transaction Type(SELL,SWEEP, etc.) for bank/creditCard/investment (optional)
     * @return TransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for baseType&lt;br&gt;Y800 : Invalid value for fromDate&lt;br&gt;Y800 : Invalid value for category&lt;br&gt;Y800 : Invalid value for toDate&lt;br&gt;Y800 : Invalid value for container&lt;br&gt;Y809 : Invalid date range&lt;br&gt;Y804 : Permitted values of top between 1 - 500&lt;br&gt;Y805 : Multiple containers not supported&lt;br&gt;Y800 : Invalid value for transaction type&lt;br&gt;Y824 : The maximum number of accountIds permitted is 100&lt;br&gt;Y824 : The maximum number of categoryIds permitted is 100&lt;br&gt;Y824 : The maximum number of highLevelCategoryIds permitted is 100&lt;br&gt;Y848 : detailCategoryId cannot be provided as input, as the detailedCategory feature is not enabled&lt;br&gt;Y823 : detailCategoryId is not for applicable containers other than bank and card&lt;br&gt;Y824 : The maximum number of detailCategoryIds permitted is 100&lt;br&gt;Y800 : Invalid value for detailCategoryId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public TransactionResponse getTransactions(String accountId, String baseType, String categoryId, String categoryType, String container, String detailCategoryId, String fromDate, String highLevelCategoryId, String keyword, Integer skip, String toDate, Integer top, String type) throws ApiException {
        ApiResponse<TransactionResponse> localVarResp = getTransactionsWithHttpInfo(accountId, baseType, categoryId, categoryType, container, detailCategoryId, fromDate, highLevelCategoryId, keyword, skip, toDate, top, type);
        return localVarResp.getData();
    }

    /**
     * Get Transactions
     * The Transaction service is used to get a list of transactions for a user.&lt;br&gt;By default, this service returns the last 30 days of transactions from today&#39;s date.&lt;br&gt;The keyword parameter performs a contains search on the original, consumer, and simple description attributes, replace the special characters #, &amp;, and + with percent-encoding values %23, %26, and %2B respectively. Eg: for -Debit# , pass the input as -Debit%23.&lt;br&gt;Values for categoryId parameter can be fetched from get transaction category list service.&lt;br&gt; The categoryId is used to filter transactions based on system-defined category as well as user-defined category.&lt;br&gt;User-defined categoryIds should be provided in the filter with the prefix &#39;&#39;U&#39;&#39;. E.g. U10002&lt;br&gt;The skip and top parameters are used for pagination. In the skip and top parameters pass the number of records to be skipped and retrieved, respectively. The response header provides the links to retrieve the next and previous set of transactions.&lt;br&gt;Double quotes in the merchant name will be prefixed by backslashes (&amp;#92;) in the response, e.g. Toys \&quot;R\&quot; Us. &lt;br&gt;sourceId is a unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts. Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;&lt;li&gt; &lt;a href&#x3D;\&quot;https://developer.yodlee.com/docs/api/1.1/Transaction_Data_Enrichment\&quot;&gt;TDE&lt;/a&gt; is made available for bank and card accounts and for the US market only.The address field in the response is available only when the TDE key is turned on.&lt;li&gt;The pagination feature is available by default. If no values are passed in the skip and top parameters, the API will only return the first 500 transactions.&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
     * @param accountId Comma separated accountIds (optional)
     * @param baseType DEBIT/CREDIT (optional)
     * @param categoryId Comma separated categoryIds (optional)
     * @param categoryType Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)
     * @param container bank/creditCard/investment/insurance/loan (optional)
     * @param detailCategoryId Comma separated detailCategoryIds (optional)
     * @param fromDate Transaction from date(YYYY-MM-DD) (optional)
     * @param highLevelCategoryId Comma separated highLevelCategoryIds (optional)
     * @param keyword Transaction search text (optional)
     * @param skip skip (Min 0) (optional)
     * @param toDate Transaction end date (YYYY-MM-DD) (optional)
     * @param top top (Max 500) (optional)
     * @param type Transaction Type(SELL,SWEEP, etc.) for bank/creditCard/investment (optional)
     * @return ApiResponse&lt;TransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for baseType&lt;br&gt;Y800 : Invalid value for fromDate&lt;br&gt;Y800 : Invalid value for category&lt;br&gt;Y800 : Invalid value for toDate&lt;br&gt;Y800 : Invalid value for container&lt;br&gt;Y809 : Invalid date range&lt;br&gt;Y804 : Permitted values of top between 1 - 500&lt;br&gt;Y805 : Multiple containers not supported&lt;br&gt;Y800 : Invalid value for transaction type&lt;br&gt;Y824 : The maximum number of accountIds permitted is 100&lt;br&gt;Y824 : The maximum number of categoryIds permitted is 100&lt;br&gt;Y824 : The maximum number of highLevelCategoryIds permitted is 100&lt;br&gt;Y848 : detailCategoryId cannot be provided as input, as the detailedCategory feature is not enabled&lt;br&gt;Y823 : detailCategoryId is not for applicable containers other than bank and card&lt;br&gt;Y824 : The maximum number of detailCategoryIds permitted is 100&lt;br&gt;Y800 : Invalid value for detailCategoryId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionResponse> getTransactionsWithHttpInfo(String accountId, String baseType, String categoryId, String categoryType, String container, String detailCategoryId, String fromDate, String highLevelCategoryId, String keyword, Integer skip, String toDate, Integer top, String type) throws ApiException {
        okhttp3.Call localVarCall = getTransactionsValidateBeforeCall(accountId, baseType, categoryId, categoryType, container, detailCategoryId, fromDate, highLevelCategoryId, keyword, skip, toDate, top, type, null);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transactions (asynchronously)
     * The Transaction service is used to get a list of transactions for a user.&lt;br&gt;By default, this service returns the last 30 days of transactions from today&#39;s date.&lt;br&gt;The keyword parameter performs a contains search on the original, consumer, and simple description attributes, replace the special characters #, &amp;, and + with percent-encoding values %23, %26, and %2B respectively. Eg: for -Debit# , pass the input as -Debit%23.&lt;br&gt;Values for categoryId parameter can be fetched from get transaction category list service.&lt;br&gt; The categoryId is used to filter transactions based on system-defined category as well as user-defined category.&lt;br&gt;User-defined categoryIds should be provided in the filter with the prefix &#39;&#39;U&#39;&#39;. E.g. U10002&lt;br&gt;The skip and top parameters are used for pagination. In the skip and top parameters pass the number of records to be skipped and retrieved, respectively. The response header provides the links to retrieve the next and previous set of transactions.&lt;br&gt;Double quotes in the merchant name will be prefixed by backslashes (&amp;#92;) in the response, e.g. Toys \&quot;R\&quot; Us. &lt;br&gt;sourceId is a unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts. Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;&lt;li&gt; &lt;a href&#x3D;\&quot;https://developer.yodlee.com/docs/api/1.1/Transaction_Data_Enrichment\&quot;&gt;TDE&lt;/a&gt; is made available for bank and card accounts and for the US market only.The address field in the response is available only when the TDE key is turned on.&lt;li&gt;The pagination feature is available by default. If no values are passed in the skip and top parameters, the API will only return the first 500 transactions.&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;br&gt;
     * @param accountId Comma separated accountIds (optional)
     * @param baseType DEBIT/CREDIT (optional)
     * @param categoryId Comma separated categoryIds (optional)
     * @param categoryType Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)
     * @param container bank/creditCard/investment/insurance/loan (optional)
     * @param detailCategoryId Comma separated detailCategoryIds (optional)
     * @param fromDate Transaction from date(YYYY-MM-DD) (optional)
     * @param highLevelCategoryId Comma separated highLevelCategoryIds (optional)
     * @param keyword Transaction search text (optional)
     * @param skip skip (Min 0) (optional)
     * @param toDate Transaction end date (YYYY-MM-DD) (optional)
     * @param top top (Max 500) (optional)
     * @param type Transaction Type(SELL,SWEEP, etc.) for bank/creditCard/investment (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for baseType&lt;br&gt;Y800 : Invalid value for fromDate&lt;br&gt;Y800 : Invalid value for category&lt;br&gt;Y800 : Invalid value for toDate&lt;br&gt;Y800 : Invalid value for container&lt;br&gt;Y809 : Invalid date range&lt;br&gt;Y804 : Permitted values of top between 1 - 500&lt;br&gt;Y805 : Multiple containers not supported&lt;br&gt;Y800 : Invalid value for transaction type&lt;br&gt;Y824 : The maximum number of accountIds permitted is 100&lt;br&gt;Y824 : The maximum number of categoryIds permitted is 100&lt;br&gt;Y824 : The maximum number of highLevelCategoryIds permitted is 100&lt;br&gt;Y848 : detailCategoryId cannot be provided as input, as the detailedCategory feature is not enabled&lt;br&gt;Y823 : detailCategoryId is not for applicable containers other than bank and card&lt;br&gt;Y824 : The maximum number of detailCategoryIds permitted is 100&lt;br&gt;Y800 : Invalid value for detailCategoryId </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionsAsync(String accountId, String baseType, String categoryId, String categoryType, String container, String detailCategoryId, String fromDate, String highLevelCategoryId, String keyword, Integer skip, String toDate, Integer top, String type, final ApiCallback<TransactionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionsValidateBeforeCall(accountId, baseType, categoryId, categoryType, container, detailCategoryId, fromDate, highLevelCategoryId, keyword, skip, toDate, top, type, _callback);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransactionsCount
     * @param accountId Comma separated accountIds  (optional)
     * @param baseType DEBIT/CREDIT (optional)
     * @param categoryId Comma separated categoryIds (optional)
     * @param categoryType Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)
     * @param container bank/creditCard/investment/insurance/loan (optional)
     * @param detailCategoryId Comma separated detailCategoryIds (optional)
     * @param fromDate Transaction from date(YYYY-MM-DD) (optional)
     * @param highLevelCategoryId Comma separated highLevelCategoryIds (optional)
     * @param keyword Transaction search text  (optional)
     * @param toDate Transaction end date (YYYY-MM-DD) (optional)
     * @param type Transaction Type(SELL,SWEEP, etc.) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for detailCategoryId&lt;br&gt;Y848 : detailCategoryId cannot be provided as input, as the detailedCategory feature is not enabled&lt;br&gt;Y823 : detailCategoryId is not applicable for containers other than bank and card&lt;br&gt;Y824 : The maximum number of detailCategoryIds permitted is 100&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionsCountCall(String accountId, String baseType, String categoryId, String categoryType, String container, String detailCategoryId, String fromDate, String highLevelCategoryId, String keyword, String toDate, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        if (baseType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("baseType", baseType));
        }

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryId", categoryId));
        }

        if (categoryType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryType", categoryType));
        }

        if (container != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("container", container));
        }

        if (detailCategoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("detailCategoryId", detailCategoryId));
        }

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (highLevelCategoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("highLevelCategoryId", highLevelCategoryId));
        }

        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionsCountValidateBeforeCall(String accountId, String baseType, String categoryId, String categoryType, String container, String detailCategoryId, String fromDate, String highLevelCategoryId, String keyword, String toDate, String type, final ApiCallback _callback) throws ApiException {
        return getTransactionsCountCall(accountId, baseType, categoryId, categoryType, container, detailCategoryId, fromDate, highLevelCategoryId, keyword, toDate, type, _callback);

    }

    /**
     * Get Transactions Count
     * The count service provides the total number of transactions for a specific user depending on the input parameters passed.&lt;br&gt;If you are implementing pagination for transactions, call this endpoint before calling GET /transactions to know the number of transactions that are returned for the input parameters passed.&lt;br&gt;The functionality of the input parameters remains the same as that of the GET /transactions endpoint.&lt;br&gt;
     * @param accountId Comma separated accountIds  (optional)
     * @param baseType DEBIT/CREDIT (optional)
     * @param categoryId Comma separated categoryIds (optional)
     * @param categoryType Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)
     * @param container bank/creditCard/investment/insurance/loan (optional)
     * @param detailCategoryId Comma separated detailCategoryIds (optional)
     * @param fromDate Transaction from date(YYYY-MM-DD) (optional)
     * @param highLevelCategoryId Comma separated highLevelCategoryIds (optional)
     * @param keyword Transaction search text  (optional)
     * @param toDate Transaction end date (YYYY-MM-DD) (optional)
     * @param type Transaction Type(SELL,SWEEP, etc.) (optional)
     * @return TransactionCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for detailCategoryId&lt;br&gt;Y848 : detailCategoryId cannot be provided as input, as the detailedCategory feature is not enabled&lt;br&gt;Y823 : detailCategoryId is not applicable for containers other than bank and card&lt;br&gt;Y824 : The maximum number of detailCategoryIds permitted is 100&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public TransactionCountResponse getTransactionsCount(String accountId, String baseType, String categoryId, String categoryType, String container, String detailCategoryId, String fromDate, String highLevelCategoryId, String keyword, String toDate, String type) throws ApiException {
        ApiResponse<TransactionCountResponse> localVarResp = getTransactionsCountWithHttpInfo(accountId, baseType, categoryId, categoryType, container, detailCategoryId, fromDate, highLevelCategoryId, keyword, toDate, type);
        return localVarResp.getData();
    }

    /**
     * Get Transactions Count
     * The count service provides the total number of transactions for a specific user depending on the input parameters passed.&lt;br&gt;If you are implementing pagination for transactions, call this endpoint before calling GET /transactions to know the number of transactions that are returned for the input parameters passed.&lt;br&gt;The functionality of the input parameters remains the same as that of the GET /transactions endpoint.&lt;br&gt;
     * @param accountId Comma separated accountIds  (optional)
     * @param baseType DEBIT/CREDIT (optional)
     * @param categoryId Comma separated categoryIds (optional)
     * @param categoryType Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)
     * @param container bank/creditCard/investment/insurance/loan (optional)
     * @param detailCategoryId Comma separated detailCategoryIds (optional)
     * @param fromDate Transaction from date(YYYY-MM-DD) (optional)
     * @param highLevelCategoryId Comma separated highLevelCategoryIds (optional)
     * @param keyword Transaction search text  (optional)
     * @param toDate Transaction end date (YYYY-MM-DD) (optional)
     * @param type Transaction Type(SELL,SWEEP, etc.) (optional)
     * @return ApiResponse&lt;TransactionCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for detailCategoryId&lt;br&gt;Y848 : detailCategoryId cannot be provided as input, as the detailedCategory feature is not enabled&lt;br&gt;Y823 : detailCategoryId is not applicable for containers other than bank and card&lt;br&gt;Y824 : The maximum number of detailCategoryIds permitted is 100&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionCountResponse> getTransactionsCountWithHttpInfo(String accountId, String baseType, String categoryId, String categoryType, String container, String detailCategoryId, String fromDate, String highLevelCategoryId, String keyword, String toDate, String type) throws ApiException {
        okhttp3.Call localVarCall = getTransactionsCountValidateBeforeCall(accountId, baseType, categoryId, categoryType, container, detailCategoryId, fromDate, highLevelCategoryId, keyword, toDate, type, null);
        Type localVarReturnType = new TypeToken<TransactionCountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transactions Count (asynchronously)
     * The count service provides the total number of transactions for a specific user depending on the input parameters passed.&lt;br&gt;If you are implementing pagination for transactions, call this endpoint before calling GET /transactions to know the number of transactions that are returned for the input parameters passed.&lt;br&gt;The functionality of the input parameters remains the same as that of the GET /transactions endpoint.&lt;br&gt;
     * @param accountId Comma separated accountIds  (optional)
     * @param baseType DEBIT/CREDIT (optional)
     * @param categoryId Comma separated categoryIds (optional)
     * @param categoryType Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION) (optional)
     * @param container bank/creditCard/investment/insurance/loan (optional)
     * @param detailCategoryId Comma separated detailCategoryIds (optional)
     * @param fromDate Transaction from date(YYYY-MM-DD) (optional)
     * @param highLevelCategoryId Comma separated highLevelCategoryIds (optional)
     * @param keyword Transaction search text  (optional)
     * @param toDate Transaction end date (YYYY-MM-DD) (optional)
     * @param type Transaction Type(SELL,SWEEP, etc.) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for detailCategoryId&lt;br&gt;Y848 : detailCategoryId cannot be provided as input, as the detailedCategory feature is not enabled&lt;br&gt;Y823 : detailCategoryId is not applicable for containers other than bank and card&lt;br&gt;Y824 : The maximum number of detailCategoryIds permitted is 100&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionsCountAsync(String accountId, String baseType, String categoryId, String categoryType, String container, String detailCategoryId, String fromDate, String highLevelCategoryId, String keyword, String toDate, String type, final ApiCallback<TransactionCountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionsCountValidateBeforeCall(accountId, baseType, categoryId, categoryType, container, detailCategoryId, fromDate, highLevelCategoryId, keyword, toDate, type, _callback);
        Type localVarReturnType = new TypeToken<TransactionCountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for runTransactionCategorizationRule
     * @param action  (required)
     * @param ruleId Unique id of the categorization rule (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Run Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for ruleId&lt;br&gt;Y400 : Categorization already in progress </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runTransactionCategorizationRuleCall(String action, Long ruleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/categories/rules/{ruleId}"
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call runTransactionCategorizationRuleValidateBeforeCall(String action, Long ruleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling runTransactionCategorizationRule(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling runTransactionCategorizationRule(Async)");
        }

        return runTransactionCategorizationRuleCall(action, ruleId, _callback);

    }

    /**
     * Run Transaction Categorization Rule
     * The run transaction categorization rule service is used to run a rule on transactions, to categorize the transactions.&lt;br&gt;The HTTP response code is 204 (Success with no content).&lt;br&gt;
     * @param action  (required)
     * @param ruleId Unique id of the categorization rule (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Run Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for ruleId&lt;br&gt;Y400 : Categorization already in progress </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void runTransactionCategorizationRule(String action, Long ruleId) throws ApiException {
        runTransactionCategorizationRuleWithHttpInfo(action, ruleId);
    }

    /**
     * Run Transaction Categorization Rule
     * The run transaction categorization rule service is used to run a rule on transactions, to categorize the transactions.&lt;br&gt;The HTTP response code is 204 (Success with no content).&lt;br&gt;
     * @param action  (required)
     * @param ruleId Unique id of the categorization rule (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Run Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for ruleId&lt;br&gt;Y400 : Categorization already in progress </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> runTransactionCategorizationRuleWithHttpInfo(String action, Long ruleId) throws ApiException {
        okhttp3.Call localVarCall = runTransactionCategorizationRuleValidateBeforeCall(action, ruleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Run Transaction Categorization Rule (asynchronously)
     * The run transaction categorization rule service is used to run a rule on transactions, to categorize the transactions.&lt;br&gt;The HTTP response code is 204 (Success with no content).&lt;br&gt;
     * @param action  (required)
     * @param ruleId Unique id of the categorization rule (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Run Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for ruleId&lt;br&gt;Y400 : Categorization already in progress </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runTransactionCategorizationRuleAsync(String action, Long ruleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = runTransactionCategorizationRuleValidateBeforeCall(action, ruleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTransaction
     * @param transactionId transactionId (required)
     * @param transactionRequest transactionRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Updated Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y812 : Required field -container missing in the transactionParam parameter input&lt;br&gt;Y800 : Invalid value for transactionId&lt;br&gt;Y800 : Invalid value for categoryId&lt;br&gt;Y868 : No action is allowed, as the data is being migrated to the Open Banking provider&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTransactionCall(Long transactionId, TransactionRequest transactionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionRequest;

        // create path and map variables
        String localVarPath = "/transactions/{transactionId}"
            .replace("{" + "transactionId" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTransactionValidateBeforeCall(Long transactionId, TransactionRequest transactionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling updateTransaction(Async)");
        }

        // verify the required parameter 'transactionRequest' is set
        if (transactionRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionRequest' when calling updateTransaction(Async)");
        }

        return updateTransactionCall(transactionId, transactionRequest, _callback);

    }

    /**
     * Update Transaction
     * The update transaction service is used to update the category,consumer description, memo for a transaction.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
     * @param transactionId transactionId (required)
     * @param transactionRequest transactionRequest (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Updated Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y812 : Required field -container missing in the transactionParam parameter input&lt;br&gt;Y800 : Invalid value for transactionId&lt;br&gt;Y800 : Invalid value for categoryId&lt;br&gt;Y868 : No action is allowed, as the data is being migrated to the Open Banking provider&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void updateTransaction(Long transactionId, TransactionRequest transactionRequest) throws ApiException {
        updateTransactionWithHttpInfo(transactionId, transactionRequest);
    }

    /**
     * Update Transaction
     * The update transaction service is used to update the category,consumer description, memo for a transaction.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
     * @param transactionId transactionId (required)
     * @param transactionRequest transactionRequest (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Updated Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y812 : Required field -container missing in the transactionParam parameter input&lt;br&gt;Y800 : Invalid value for transactionId&lt;br&gt;Y800 : Invalid value for categoryId&lt;br&gt;Y868 : No action is allowed, as the data is being migrated to the Open Banking provider&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateTransactionWithHttpInfo(Long transactionId, TransactionRequest transactionRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTransactionValidateBeforeCall(transactionId, transactionRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Transaction (asynchronously)
     * The update transaction service is used to update the category,consumer description, memo for a transaction.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
     * @param transactionId transactionId (required)
     * @param transactionRequest transactionRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Updated Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y812 : Required field -container missing in the transactionParam parameter input&lt;br&gt;Y800 : Invalid value for transactionId&lt;br&gt;Y800 : Invalid value for categoryId&lt;br&gt;Y868 : No action is allowed, as the data is being migrated to the Open Banking provider&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTransactionAsync(Long transactionId, TransactionRequest transactionRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTransactionValidateBeforeCall(transactionId, transactionRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTransactionCategorizationRule
     * @param ruleId ruleId (required)
     * @param transactionCategorizationRuleRequest transactionCategoriesRuleRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Updated Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for ruleId&lt;br&gt;Y806 : Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTransactionCategorizationRuleCall(Long ruleId, TransactionCategorizationRuleRequest transactionCategorizationRuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionCategorizationRuleRequest;

        // create path and map variables
        String localVarPath = "/transactions/categories/rules/{ruleId}"
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTransactionCategorizationRuleValidateBeforeCall(Long ruleId, TransactionCategorizationRuleRequest transactionCategorizationRuleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling updateTransactionCategorizationRule(Async)");
        }

        // verify the required parameter 'transactionCategorizationRuleRequest' is set
        if (transactionCategorizationRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionCategorizationRuleRequest' when calling updateTransactionCategorizationRule(Async)");
        }

        return updateTransactionCategorizationRuleCall(ruleId, transactionCategorizationRuleRequest, _callback);

    }

    /**
     * Update Transaction Categorization Rule
     * The update transaction categorization rule service is used to update a categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;ruleParam JSON input should be as explained in the create transaction categorization rule service.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
     * @param ruleId ruleId (required)
     * @param transactionCategorizationRuleRequest transactionCategoriesRuleRequest (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Updated Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for ruleId&lt;br&gt;Y806 : Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void updateTransactionCategorizationRule(Long ruleId, TransactionCategorizationRuleRequest transactionCategorizationRuleRequest) throws ApiException {
        updateTransactionCategorizationRuleWithHttpInfo(ruleId, transactionCategorizationRuleRequest);
    }

    /**
     * Update Transaction Categorization Rule
     * The update transaction categorization rule service is used to update a categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;ruleParam JSON input should be as explained in the create transaction categorization rule service.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
     * @param ruleId ruleId (required)
     * @param transactionCategorizationRuleRequest transactionCategoriesRuleRequest (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Updated Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for ruleId&lt;br&gt;Y806 : Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateTransactionCategorizationRuleWithHttpInfo(Long ruleId, TransactionCategorizationRuleRequest transactionCategorizationRuleRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTransactionCategorizationRuleValidateBeforeCall(ruleId, transactionCategorizationRuleRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Transaction Categorization Rule (asynchronously)
     * The update transaction categorization rule service is used to update a categorization rule for both system-defined category as well as user-defined category.&lt;br&gt;ruleParam JSON input should be as explained in the create transaction categorization rule service.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
     * @param ruleId ruleId (required)
     * @param transactionCategorizationRuleRequest transactionCategoriesRuleRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Updated Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for ruleId&lt;br&gt;Y806 : Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTransactionCategorizationRuleAsync(Long ruleId, TransactionCategorizationRuleRequest transactionCategorizationRuleRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTransactionCategorizationRuleValidateBeforeCall(ruleId, transactionCategorizationRuleRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTransactionCategory
     * @param updateCategoryRequest updateCategoryRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Updated Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for categoryParam&lt;br&gt;Y800 : Invalid value for source&lt;br&gt;Y801 : Invalid length for categoryName. Min 1 and max 50 is required&lt;br&gt;Y803 : id required&lt;br&gt;Y811 : categoryName value already exists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTransactionCategoryCall(UpdateCategoryRequest updateCategoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCategoryRequest;

        // create path and map variables
        String localVarPath = "/transactions/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTransactionCategoryValidateBeforeCall(UpdateCategoryRequest updateCategoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateCategoryRequest' is set
        if (updateCategoryRequest == null) {
            throw new ApiException("Missing the required parameter 'updateCategoryRequest' when calling updateTransactionCategory(Async)");
        }

        return updateTransactionCategoryCall(updateCategoryRequest, _callback);

    }

    /**
     * Update Category
     * The update transaction categories service is used to update the transaction category name&lt;br&gt;for a high level category, a system-defined category and a user-defined category.&lt;br&gt;The renamed category can be set back to the original name by passing an empty string for categoryName.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
     * @param updateCategoryRequest updateCategoryRequest (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Updated Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for categoryParam&lt;br&gt;Y800 : Invalid value for source&lt;br&gt;Y801 : Invalid length for categoryName. Min 1 and max 50 is required&lt;br&gt;Y803 : id required&lt;br&gt;Y811 : categoryName value already exists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void updateTransactionCategory(UpdateCategoryRequest updateCategoryRequest) throws ApiException {
        updateTransactionCategoryWithHttpInfo(updateCategoryRequest);
    }

    /**
     * Update Category
     * The update transaction categories service is used to update the transaction category name&lt;br&gt;for a high level category, a system-defined category and a user-defined category.&lt;br&gt;The renamed category can be set back to the original name by passing an empty string for categoryName.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
     * @param updateCategoryRequest updateCategoryRequest (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Updated Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for categoryParam&lt;br&gt;Y800 : Invalid value for source&lt;br&gt;Y801 : Invalid length for categoryName. Min 1 and max 50 is required&lt;br&gt;Y803 : id required&lt;br&gt;Y811 : categoryName value already exists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateTransactionCategoryWithHttpInfo(UpdateCategoryRequest updateCategoryRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTransactionCategoryValidateBeforeCall(updateCategoryRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Category (asynchronously)
     * The update transaction categories service is used to update the transaction category name&lt;br&gt;for a high level category, a system-defined category and a user-defined category.&lt;br&gt;The renamed category can be set back to the original name by passing an empty string for categoryName.&lt;br&gt;The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;
     * @param updateCategoryRequest updateCategoryRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Updated Successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for categoryParam&lt;br&gt;Y800 : Invalid value for source&lt;br&gt;Y801 : Invalid length for categoryName. Min 1 and max 50 is required&lt;br&gt;Y803 : id required&lt;br&gt;Y811 : categoryName value already exists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTransactionCategoryAsync(UpdateCategoryRequest updateCategoryRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTransactionCategoryValidateBeforeCall(updateCategoryRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
