/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.UpdateVerificationRequest;
import org.openapitools.client.model.VerificationRequest;
import org.openapitools.client.model.VerificationResponse;
import org.openapitools.client.model.VerificationStatusResponse;
import org.openapitools.client.model.YodleeError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VerificationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VerificationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VerificationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getVerificationStatus
     * @param accountId Comma separated accountId (optional)
     * @param providerAccountId Comma separated providerAccountId (optional)
     * @param verificationType verificationType (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y901 : Service not supported&lt;br&gt;Y813 : Either of accountId or providerAccountId should be provided&lt;br&gt;Y800 : Invalid value for accountId&lt;br&gt;Y800 : Invalid value for verification.verificationType&lt;br&gt;Y800 : Invalid value for providerAccountId&lt;br&gt;Y835 : Account(s) not eligible for Matching verification&lt;br&gt;Y836 : No verification initiated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVerificationStatusCall(String accountId, String providerAccountId, String verificationType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/verification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        if (providerAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("providerAccountId", providerAccountId));
        }

        if (verificationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("verificationType", verificationType));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVerificationStatusValidateBeforeCall(String accountId, String providerAccountId, String verificationType, final ApiCallback _callback) throws ApiException {
        return getVerificationStatusCall(accountId, providerAccountId, verificationType, _callback);

    }

    /**
     * Get Verification Status
     * The get verification status service is used to retrieve the verification status of all accounts for which the MS or CDV process has been initiated.&lt;br&gt;For the MS process, the account details object returns the aggregated information of the verified accounts. For the CDV process, the account details object returns the user provided account information.&lt;br&gt;
     * @param accountId Comma separated accountId (optional)
     * @param providerAccountId Comma separated providerAccountId (optional)
     * @param verificationType verificationType (optional)
     * @return VerificationStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y901 : Service not supported&lt;br&gt;Y813 : Either of accountId or providerAccountId should be provided&lt;br&gt;Y800 : Invalid value for accountId&lt;br&gt;Y800 : Invalid value for verification.verificationType&lt;br&gt;Y800 : Invalid value for providerAccountId&lt;br&gt;Y835 : Account(s) not eligible for Matching verification&lt;br&gt;Y836 : No verification initiated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public VerificationStatusResponse getVerificationStatus(String accountId, String providerAccountId, String verificationType) throws ApiException {
        ApiResponse<VerificationStatusResponse> localVarResp = getVerificationStatusWithHttpInfo(accountId, providerAccountId, verificationType);
        return localVarResp.getData();
    }

    /**
     * Get Verification Status
     * The get verification status service is used to retrieve the verification status of all accounts for which the MS or CDV process has been initiated.&lt;br&gt;For the MS process, the account details object returns the aggregated information of the verified accounts. For the CDV process, the account details object returns the user provided account information.&lt;br&gt;
     * @param accountId Comma separated accountId (optional)
     * @param providerAccountId Comma separated providerAccountId (optional)
     * @param verificationType verificationType (optional)
     * @return ApiResponse&lt;VerificationStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y901 : Service not supported&lt;br&gt;Y813 : Either of accountId or providerAccountId should be provided&lt;br&gt;Y800 : Invalid value for accountId&lt;br&gt;Y800 : Invalid value for verification.verificationType&lt;br&gt;Y800 : Invalid value for providerAccountId&lt;br&gt;Y835 : Account(s) not eligible for Matching verification&lt;br&gt;Y836 : No verification initiated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerificationStatusResponse> getVerificationStatusWithHttpInfo(String accountId, String providerAccountId, String verificationType) throws ApiException {
        okhttp3.Call localVarCall = getVerificationStatusValidateBeforeCall(accountId, providerAccountId, verificationType, null);
        Type localVarReturnType = new TypeToken<VerificationStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Verification Status (asynchronously)
     * The get verification status service is used to retrieve the verification status of all accounts for which the MS or CDV process has been initiated.&lt;br&gt;For the MS process, the account details object returns the aggregated information of the verified accounts. For the CDV process, the account details object returns the user provided account information.&lt;br&gt;
     * @param accountId Comma separated accountId (optional)
     * @param providerAccountId Comma separated providerAccountId (optional)
     * @param verificationType verificationType (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y901 : Service not supported&lt;br&gt;Y813 : Either of accountId or providerAccountId should be provided&lt;br&gt;Y800 : Invalid value for accountId&lt;br&gt;Y800 : Invalid value for verification.verificationType&lt;br&gt;Y800 : Invalid value for providerAccountId&lt;br&gt;Y835 : Account(s) not eligible for Matching verification&lt;br&gt;Y836 : No verification initiated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVerificationStatusAsync(String accountId, String providerAccountId, String verificationType, final ApiCallback<VerificationStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVerificationStatusValidateBeforeCall(accountId, providerAccountId, verificationType, _callback);
        Type localVarReturnType = new TypeToken<VerificationStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for initiateMatchingOrChallengeDepositeVerification
     * @param verificationRequest verification information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y901 : Service not supported&lt;br&gt;Y812 : Required field/value - verification.verificationType missing in the verificationParam&lt;br&gt;Y812 : Required field/value - accountNumber missing in the verificationParam&lt;br&gt;Y812 : Required field/value - accountType missing in the verificationParam&lt;br&gt;Y812 : Required field/value - bankTransferCode missing in the verificationParam&lt;br&gt;Y812 : Required field/value - bankTransferCode.id missing in the verificationParam&lt;br&gt;Y812 : Required field/value - bankTransferCode.type missing in the verificationParam&lt;br&gt;Y800 : Invalid value for verification.verificationType&lt;br&gt;Y800 : Invalid value for verificationParam&lt;br&gt;Y800 : Invalid value for bankTransferCode.type&lt;br&gt;Y800 : Invalid value for bankTransferCode.id&lt;br&gt;Y800 : Invalid value for accountType&lt;br&gt;Y800 : Invalid value for accountId&lt;br&gt;Y813 : Account details should be provided&lt;br&gt;Y801 : Invalid length for accountNumber&lt;br&gt;Y835 : Account(s) not eligible for Challenge Deposit verification&lt;br&gt;Y806 : Invalid Input&lt;br&gt;Y840 : Verification has been initiated already&lt;br&gt;Y837 : Account has been verified already </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initiateMatchingOrChallengeDepositeVerificationCall(VerificationRequest verificationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verificationRequest;

        // create path and map variables
        String localVarPath = "/verification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initiateMatchingOrChallengeDepositeVerificationValidateBeforeCall(VerificationRequest verificationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'verificationRequest' is set
        if (verificationRequest == null) {
            throw new ApiException("Missing the required parameter 'verificationRequest' when calling initiateMatchingOrChallengeDepositeVerification(Async)");
        }

        return initiateMatchingOrChallengeDepositeVerificationCall(verificationRequest, _callback);

    }

    /**
     * Initiaite Matching Service and Challenge Deposit
     * The post verification service is used to initiate the matching service (MS) and the challenge deposit account verification (CDV) process to verify account ownership.&lt;br&gt;The MS and CDV process can verify ownership of only bank accounts (i.e., checking and savings).&lt;br&gt;The MS verification can be initiated only for an already aggregated account or a providerAccount.&lt;br&gt;The prerequisite for the MS verification process is to request the ACCT_PROFILE dataset with the HOLDER_NAME attribute.&lt;br&gt;In the MS verification process, a string-match of the account holder name with the registered user name is performed instantaneously. You can contact the Yodlee CustomerCare to configure the full name or only the last name match.&lt;br&gt;Once the CDV process is initiated Yodlee will post the microtransaction (i.e., credit and debit) in the user&#39;s account. The CDV process takes 2 to 3 days to complete as it requires the user to provide the microtransaction details.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;The verificationId in the response can be used to track the verification request.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#39;s assistance to set up a dedicated environment.
     * @param verificationRequest verification information (required)
     * @return VerificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y901 : Service not supported&lt;br&gt;Y812 : Required field/value - verification.verificationType missing in the verificationParam&lt;br&gt;Y812 : Required field/value - accountNumber missing in the verificationParam&lt;br&gt;Y812 : Required field/value - accountType missing in the verificationParam&lt;br&gt;Y812 : Required field/value - bankTransferCode missing in the verificationParam&lt;br&gt;Y812 : Required field/value - bankTransferCode.id missing in the verificationParam&lt;br&gt;Y812 : Required field/value - bankTransferCode.type missing in the verificationParam&lt;br&gt;Y800 : Invalid value for verification.verificationType&lt;br&gt;Y800 : Invalid value for verificationParam&lt;br&gt;Y800 : Invalid value for bankTransferCode.type&lt;br&gt;Y800 : Invalid value for bankTransferCode.id&lt;br&gt;Y800 : Invalid value for accountType&lt;br&gt;Y800 : Invalid value for accountId&lt;br&gt;Y813 : Account details should be provided&lt;br&gt;Y801 : Invalid length for accountNumber&lt;br&gt;Y835 : Account(s) not eligible for Challenge Deposit verification&lt;br&gt;Y806 : Invalid Input&lt;br&gt;Y840 : Verification has been initiated already&lt;br&gt;Y837 : Account has been verified already </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public VerificationResponse initiateMatchingOrChallengeDepositeVerification(VerificationRequest verificationRequest) throws ApiException {
        ApiResponse<VerificationResponse> localVarResp = initiateMatchingOrChallengeDepositeVerificationWithHttpInfo(verificationRequest);
        return localVarResp.getData();
    }

    /**
     * Initiaite Matching Service and Challenge Deposit
     * The post verification service is used to initiate the matching service (MS) and the challenge deposit account verification (CDV) process to verify account ownership.&lt;br&gt;The MS and CDV process can verify ownership of only bank accounts (i.e., checking and savings).&lt;br&gt;The MS verification can be initiated only for an already aggregated account or a providerAccount.&lt;br&gt;The prerequisite for the MS verification process is to request the ACCT_PROFILE dataset with the HOLDER_NAME attribute.&lt;br&gt;In the MS verification process, a string-match of the account holder name with the registered user name is performed instantaneously. You can contact the Yodlee CustomerCare to configure the full name or only the last name match.&lt;br&gt;Once the CDV process is initiated Yodlee will post the microtransaction (i.e., credit and debit) in the user&#39;s account. The CDV process takes 2 to 3 days to complete as it requires the user to provide the microtransaction details.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;The verificationId in the response can be used to track the verification request.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#39;s assistance to set up a dedicated environment.
     * @param verificationRequest verification information (required)
     * @return ApiResponse&lt;VerificationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y901 : Service not supported&lt;br&gt;Y812 : Required field/value - verification.verificationType missing in the verificationParam&lt;br&gt;Y812 : Required field/value - accountNumber missing in the verificationParam&lt;br&gt;Y812 : Required field/value - accountType missing in the verificationParam&lt;br&gt;Y812 : Required field/value - bankTransferCode missing in the verificationParam&lt;br&gt;Y812 : Required field/value - bankTransferCode.id missing in the verificationParam&lt;br&gt;Y812 : Required field/value - bankTransferCode.type missing in the verificationParam&lt;br&gt;Y800 : Invalid value for verification.verificationType&lt;br&gt;Y800 : Invalid value for verificationParam&lt;br&gt;Y800 : Invalid value for bankTransferCode.type&lt;br&gt;Y800 : Invalid value for bankTransferCode.id&lt;br&gt;Y800 : Invalid value for accountType&lt;br&gt;Y800 : Invalid value for accountId&lt;br&gt;Y813 : Account details should be provided&lt;br&gt;Y801 : Invalid length for accountNumber&lt;br&gt;Y835 : Account(s) not eligible for Challenge Deposit verification&lt;br&gt;Y806 : Invalid Input&lt;br&gt;Y840 : Verification has been initiated already&lt;br&gt;Y837 : Account has been verified already </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerificationResponse> initiateMatchingOrChallengeDepositeVerificationWithHttpInfo(VerificationRequest verificationRequest) throws ApiException {
        okhttp3.Call localVarCall = initiateMatchingOrChallengeDepositeVerificationValidateBeforeCall(verificationRequest, null);
        Type localVarReturnType = new TypeToken<VerificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initiaite Matching Service and Challenge Deposit (asynchronously)
     * The post verification service is used to initiate the matching service (MS) and the challenge deposit account verification (CDV) process to verify account ownership.&lt;br&gt;The MS and CDV process can verify ownership of only bank accounts (i.e., checking and savings).&lt;br&gt;The MS verification can be initiated only for an already aggregated account or a providerAccount.&lt;br&gt;The prerequisite for the MS verification process is to request the ACCT_PROFILE dataset with the HOLDER_NAME attribute.&lt;br&gt;In the MS verification process, a string-match of the account holder name with the registered user name is performed instantaneously. You can contact the Yodlee CustomerCare to configure the full name or only the last name match.&lt;br&gt;Once the CDV process is initiated Yodlee will post the microtransaction (i.e., credit and debit) in the user&#39;s account. The CDV process takes 2 to 3 days to complete as it requires the user to provide the microtransaction details.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;The verificationId in the response can be used to track the verification request.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#39;s assistance to set up a dedicated environment.
     * @param verificationRequest verification information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y901 : Service not supported&lt;br&gt;Y812 : Required field/value - verification.verificationType missing in the verificationParam&lt;br&gt;Y812 : Required field/value - accountNumber missing in the verificationParam&lt;br&gt;Y812 : Required field/value - accountType missing in the verificationParam&lt;br&gt;Y812 : Required field/value - bankTransferCode missing in the verificationParam&lt;br&gt;Y812 : Required field/value - bankTransferCode.id missing in the verificationParam&lt;br&gt;Y812 : Required field/value - bankTransferCode.type missing in the verificationParam&lt;br&gt;Y800 : Invalid value for verification.verificationType&lt;br&gt;Y800 : Invalid value for verificationParam&lt;br&gt;Y800 : Invalid value for bankTransferCode.type&lt;br&gt;Y800 : Invalid value for bankTransferCode.id&lt;br&gt;Y800 : Invalid value for accountType&lt;br&gt;Y800 : Invalid value for accountId&lt;br&gt;Y813 : Account details should be provided&lt;br&gt;Y801 : Invalid length for accountNumber&lt;br&gt;Y835 : Account(s) not eligible for Challenge Deposit verification&lt;br&gt;Y806 : Invalid Input&lt;br&gt;Y840 : Verification has been initiated already&lt;br&gt;Y837 : Account has been verified already </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initiateMatchingOrChallengeDepositeVerificationAsync(VerificationRequest verificationRequest, final ApiCallback<VerificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = initiateMatchingOrChallengeDepositeVerificationValidateBeforeCall(verificationRequest, _callback);
        Type localVarReturnType = new TypeToken<VerificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyChallengeDeposit
     * @param updateVerificationRequest verification information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y901 : Service not supported&lt;br&gt;Y812 : Required field/value - verification.verificationType missing in the verificationParam&lt;br&gt;Y812 : Required field/value - amount.amount missing in the verificationParam&lt;br&gt;Y812 : Required field/value - baseType missing in the verificationParam&lt;br&gt;Y812 : Required field/value - currency missing in the verificationParam&lt;br&gt;Y812 : Required field/value - providerAccountId missing in the verificationParam&lt;br&gt;Y812 : Required field/value - accountId missing in the verificationParam&lt;br&gt;Y800 : Invalid value for verificationParam&lt;br&gt;Y800 : Invalid value for verification.verificationType&lt;br&gt;Y800 : Invalid value for baseType&lt;br&gt;Y800 : Invalid value for providerAccountId&lt;br&gt;Y800 : Invalid value for accountId&lt;br&gt;Y813 : Transaction should be provided&lt;br&gt;Y801 : Invalid length for accountNumber&lt;br&gt;Y801 : Invalid length for amount&lt;br&gt;Y835 : Account(s) not eligible for Challenge Deposit verification&lt;br&gt;Y806 : Invalid Input&lt;br&gt;Y840 : Verification has been initiated already&lt;br&gt;Y837 : Account has been verified already&lt;br&gt;Y838 : The currency code provided does not match with the currency of the transaction executed on the target account&lt;br&gt;Y846 : The number of financial transactions made on the target account does not match with the number of transactions entered by the user.&lt;br&gt;Y842 : Number of retries exceeded the maximum Challenge Deposit verification limit&lt;br&gt;Y844 : Financial Instructions were not executed successfully on the target account&lt;br&gt;Y845 : Verification time expired. Please try initiating challenge deposit again&lt;br&gt;Y868 : No action is allowed, as the data is being migrated to the Open Banking provider&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyChallengeDepositCall(UpdateVerificationRequest updateVerificationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateVerificationRequest;

        // create path and map variables
        String localVarPath = "/verification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyChallengeDepositValidateBeforeCall(UpdateVerificationRequest updateVerificationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateVerificationRequest' is set
        if (updateVerificationRequest == null) {
            throw new ApiException("Missing the required parameter 'updateVerificationRequest' when calling verifyChallengeDeposit(Async)");
        }

        return verifyChallengeDepositCall(updateVerificationRequest, _callback);

    }

    /**
     * Verify Challenge Deposit
     * The put verification service is used to complete the challenge deposit verification (CDV) process.&lt;br&gt;This service is used only by the customer of CDV flow.&lt;br&gt;In the CDV process, the user-provided microtransaction details (i.e., credit and debit) is matched against the microtransactions posted by Yodlee. For a successful verification of the account&#39;s ownership both the microtransaction details should match.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#39;s assistance to set up a dedicated environment.&lt;/li&gt;&lt;/ul&gt;
     * @param updateVerificationRequest verification information (required)
     * @return VerificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y901 : Service not supported&lt;br&gt;Y812 : Required field/value - verification.verificationType missing in the verificationParam&lt;br&gt;Y812 : Required field/value - amount.amount missing in the verificationParam&lt;br&gt;Y812 : Required field/value - baseType missing in the verificationParam&lt;br&gt;Y812 : Required field/value - currency missing in the verificationParam&lt;br&gt;Y812 : Required field/value - providerAccountId missing in the verificationParam&lt;br&gt;Y812 : Required field/value - accountId missing in the verificationParam&lt;br&gt;Y800 : Invalid value for verificationParam&lt;br&gt;Y800 : Invalid value for verification.verificationType&lt;br&gt;Y800 : Invalid value for baseType&lt;br&gt;Y800 : Invalid value for providerAccountId&lt;br&gt;Y800 : Invalid value for accountId&lt;br&gt;Y813 : Transaction should be provided&lt;br&gt;Y801 : Invalid length for accountNumber&lt;br&gt;Y801 : Invalid length for amount&lt;br&gt;Y835 : Account(s) not eligible for Challenge Deposit verification&lt;br&gt;Y806 : Invalid Input&lt;br&gt;Y840 : Verification has been initiated already&lt;br&gt;Y837 : Account has been verified already&lt;br&gt;Y838 : The currency code provided does not match with the currency of the transaction executed on the target account&lt;br&gt;Y846 : The number of financial transactions made on the target account does not match with the number of transactions entered by the user.&lt;br&gt;Y842 : Number of retries exceeded the maximum Challenge Deposit verification limit&lt;br&gt;Y844 : Financial Instructions were not executed successfully on the target account&lt;br&gt;Y845 : Verification time expired. Please try initiating challenge deposit again&lt;br&gt;Y868 : No action is allowed, as the data is being migrated to the Open Banking provider&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public VerificationResponse verifyChallengeDeposit(UpdateVerificationRequest updateVerificationRequest) throws ApiException {
        ApiResponse<VerificationResponse> localVarResp = verifyChallengeDepositWithHttpInfo(updateVerificationRequest);
        return localVarResp.getData();
    }

    /**
     * Verify Challenge Deposit
     * The put verification service is used to complete the challenge deposit verification (CDV) process.&lt;br&gt;This service is used only by the customer of CDV flow.&lt;br&gt;In the CDV process, the user-provided microtransaction details (i.e., credit and debit) is matched against the microtransactions posted by Yodlee. For a successful verification of the account&#39;s ownership both the microtransaction details should match.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#39;s assistance to set up a dedicated environment.&lt;/li&gt;&lt;/ul&gt;
     * @param updateVerificationRequest verification information (required)
     * @return ApiResponse&lt;VerificationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y901 : Service not supported&lt;br&gt;Y812 : Required field/value - verification.verificationType missing in the verificationParam&lt;br&gt;Y812 : Required field/value - amount.amount missing in the verificationParam&lt;br&gt;Y812 : Required field/value - baseType missing in the verificationParam&lt;br&gt;Y812 : Required field/value - currency missing in the verificationParam&lt;br&gt;Y812 : Required field/value - providerAccountId missing in the verificationParam&lt;br&gt;Y812 : Required field/value - accountId missing in the verificationParam&lt;br&gt;Y800 : Invalid value for verificationParam&lt;br&gt;Y800 : Invalid value for verification.verificationType&lt;br&gt;Y800 : Invalid value for baseType&lt;br&gt;Y800 : Invalid value for providerAccountId&lt;br&gt;Y800 : Invalid value for accountId&lt;br&gt;Y813 : Transaction should be provided&lt;br&gt;Y801 : Invalid length for accountNumber&lt;br&gt;Y801 : Invalid length for amount&lt;br&gt;Y835 : Account(s) not eligible for Challenge Deposit verification&lt;br&gt;Y806 : Invalid Input&lt;br&gt;Y840 : Verification has been initiated already&lt;br&gt;Y837 : Account has been verified already&lt;br&gt;Y838 : The currency code provided does not match with the currency of the transaction executed on the target account&lt;br&gt;Y846 : The number of financial transactions made on the target account does not match with the number of transactions entered by the user.&lt;br&gt;Y842 : Number of retries exceeded the maximum Challenge Deposit verification limit&lt;br&gt;Y844 : Financial Instructions were not executed successfully on the target account&lt;br&gt;Y845 : Verification time expired. Please try initiating challenge deposit again&lt;br&gt;Y868 : No action is allowed, as the data is being migrated to the Open Banking provider&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerificationResponse> verifyChallengeDepositWithHttpInfo(UpdateVerificationRequest updateVerificationRequest) throws ApiException {
        okhttp3.Call localVarCall = verifyChallengeDepositValidateBeforeCall(updateVerificationRequest, null);
        Type localVarReturnType = new TypeToken<VerificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify Challenge Deposit (asynchronously)
     * The put verification service is used to complete the challenge deposit verification (CDV) process.&lt;br&gt;This service is used only by the customer of CDV flow.&lt;br&gt;In the CDV process, the user-provided microtransaction details (i.e., credit and debit) is matched against the microtransactions posted by Yodlee. For a successful verification of the account&#39;s ownership both the microtransaction details should match.&lt;br&gt;The CDV process is currently supported only in the United States.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;&lt;li&gt;This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team&#39;s assistance to set up a dedicated environment.&lt;/li&gt;&lt;/ul&gt;
     * @param updateVerificationRequest verification information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y901 : Service not supported&lt;br&gt;Y812 : Required field/value - verification.verificationType missing in the verificationParam&lt;br&gt;Y812 : Required field/value - amount.amount missing in the verificationParam&lt;br&gt;Y812 : Required field/value - baseType missing in the verificationParam&lt;br&gt;Y812 : Required field/value - currency missing in the verificationParam&lt;br&gt;Y812 : Required field/value - providerAccountId missing in the verificationParam&lt;br&gt;Y812 : Required field/value - accountId missing in the verificationParam&lt;br&gt;Y800 : Invalid value for verificationParam&lt;br&gt;Y800 : Invalid value for verification.verificationType&lt;br&gt;Y800 : Invalid value for baseType&lt;br&gt;Y800 : Invalid value for providerAccountId&lt;br&gt;Y800 : Invalid value for accountId&lt;br&gt;Y813 : Transaction should be provided&lt;br&gt;Y801 : Invalid length for accountNumber&lt;br&gt;Y801 : Invalid length for amount&lt;br&gt;Y835 : Account(s) not eligible for Challenge Deposit verification&lt;br&gt;Y806 : Invalid Input&lt;br&gt;Y840 : Verification has been initiated already&lt;br&gt;Y837 : Account has been verified already&lt;br&gt;Y838 : The currency code provided does not match with the currency of the transaction executed on the target account&lt;br&gt;Y846 : The number of financial transactions made on the target account does not match with the number of transactions entered by the user.&lt;br&gt;Y842 : Number of retries exceeded the maximum Challenge Deposit verification limit&lt;br&gt;Y844 : Financial Instructions were not executed successfully on the target account&lt;br&gt;Y845 : Verification time expired. Please try initiating challenge deposit again&lt;br&gt;Y868 : No action is allowed, as the data is being migrated to the Open Banking provider&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyChallengeDepositAsync(UpdateVerificationRequest updateVerificationRequest, final ApiCallback<VerificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyChallengeDepositValidateBeforeCall(updateVerificationRequest, _callback);
        Type localVarReturnType = new TypeToken<VerificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
