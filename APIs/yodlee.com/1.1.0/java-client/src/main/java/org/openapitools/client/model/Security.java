/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StockExchangeDetail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Security
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.041142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Security {
  public static final String SERIALIZED_NAME_ACCRUAL_METHOD = "accrualMethod";
  @SerializedName(SERIALIZED_NAME_ACCRUAL_METHOD)
  private String accrualMethod;

  public static final String SERIALIZED_NAME_AGENCY_FACTOR = "agencyFactor";
  @SerializedName(SERIALIZED_NAME_AGENCY_FACTOR)
  private Double agencyFactor;

  public static final String SERIALIZED_NAME_CALL_DATE = "callDate";
  @SerializedName(SERIALIZED_NAME_CALL_DATE)
  private String callDate;

  public static final String SERIALIZED_NAME_CALL_PRICE = "callPrice";
  @SerializedName(SERIALIZED_NAME_CALL_PRICE)
  private Double callPrice;

  public static final String SERIALIZED_NAME_CDSC_FUND_FLAG = "cdscFundFlag";
  @SerializedName(SERIALIZED_NAME_CDSC_FUND_FLAG)
  private Boolean cdscFundFlag;

  public static final String SERIALIZED_NAME_CLOSED_FLAG = "closedFlag";
  @SerializedName(SERIALIZED_NAME_CLOSED_FLAG)
  private Boolean closedFlag;

  public static final String SERIALIZED_NAME_CUSIP = "cusip";
  @SerializedName(SERIALIZED_NAME_CUSIP)
  private String cusip;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FEDERAL_TAXABLE = "federalTaxable";
  @SerializedName(SERIALIZED_NAME_FEDERAL_TAXABLE)
  private Boolean federalTaxable;

  public static final String SERIALIZED_NAME_FIRM_ELIGIBLE = "firmEligible";
  @SerializedName(SERIALIZED_NAME_FIRM_ELIGIBLE)
  private String firmEligible;

  public static final String SERIALIZED_NAME_FIRST_COUPON_DATE = "firstCouponDate";
  @SerializedName(SERIALIZED_NAME_FIRST_COUPON_DATE)
  private String firstCouponDate;

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private Integer frequency;

  public static final String SERIALIZED_NAME_FUND_FAMILY = "fundFamily";
  @SerializedName(SERIALIZED_NAME_FUND_FAMILY)
  private String fundFamily;

  public static final String SERIALIZED_NAME_GICS_SECTOR = "gicsSector";
  @SerializedName(SERIALIZED_NAME_GICS_SECTOR)
  private String gicsSector;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_INCOME_CURRENCY = "incomeCurrency";
  @SerializedName(SERIALIZED_NAME_INCOME_CURRENCY)
  private String incomeCurrency;

  public static final String SERIALIZED_NAME_INTEREST_RATE = "interestRate";
  @SerializedName(SERIALIZED_NAME_INTEREST_RATE)
  private Double interestRate;

  public static final String SERIALIZED_NAME_IS_DUMMY_SECURITY = "isDummySecurity";
  @SerializedName(SERIALIZED_NAME_IS_DUMMY_SECURITY)
  private Boolean isDummySecurity;

  public static final String SERIALIZED_NAME_IS_ENVESTNET_DUMMY_SECURITY = "isEnvestnetDummySecurity";
  @SerializedName(SERIALIZED_NAME_IS_ENVESTNET_DUMMY_SECURITY)
  private Boolean isEnvestnetDummySecurity;

  public static final String SERIALIZED_NAME_IS_SYNTHETIC_SECURITY = "isSyntheticSecurity";
  @SerializedName(SERIALIZED_NAME_IS_SYNTHETIC_SECURITY)
  private Boolean isSyntheticSecurity;

  public static final String SERIALIZED_NAME_ISIN = "isin";
  @SerializedName(SERIALIZED_NAME_ISIN)
  private String isin;

  public static final String SERIALIZED_NAME_ISSUE_DATE = "issueDate";
  @SerializedName(SERIALIZED_NAME_ISSUE_DATE)
  private String issueDate;

  public static final String SERIALIZED_NAME_ISSUE_TYPE_MULTIPLIER = "issueTypeMultiplier";
  @SerializedName(SERIALIZED_NAME_ISSUE_TYPE_MULTIPLIER)
  private Double issueTypeMultiplier;

  public static final String SERIALIZED_NAME_LAST_COUPON_DATE = "lastCouponDate";
  @SerializedName(SERIALIZED_NAME_LAST_COUPON_DATE)
  private String lastCouponDate;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_DATE = "lastModifiedDate";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_DATE)
  private String lastModifiedDate;

  public static final String SERIALIZED_NAME_MATURITY_DATE = "maturityDate";
  @SerializedName(SERIALIZED_NAME_MATURITY_DATE)
  private String maturityDate;

  public static final String SERIALIZED_NAME_MINIMUM_PURCHASE = "minimumPurchase";
  @SerializedName(SERIALIZED_NAME_MINIMUM_PURCHASE)
  private Integer minimumPurchase;

  public static final String SERIALIZED_NAME_MOODY_RATING = "moodyRating";
  @SerializedName(SERIALIZED_NAME_MOODY_RATING)
  private String moodyRating;

  public static final String SERIALIZED_NAME_S_AND_P_RATING = "sAndPRating";
  @SerializedName(SERIALIZED_NAME_S_AND_P_RATING)
  private String sAndPRating;

  public static final String SERIALIZED_NAME_SECTOR = "sector";
  @SerializedName(SERIALIZED_NAME_SECTOR)
  private String sector;

  public static final String SERIALIZED_NAME_SEDOL = "sedol";
  @SerializedName(SERIALIZED_NAME_SEDOL)
  private String sedol;

  public static final String SERIALIZED_NAME_SHARE_CLASS = "shareClass";
  @SerializedName(SERIALIZED_NAME_SHARE_CLASS)
  private String shareClass;

  public static final String SERIALIZED_NAME_STATE_TAXABLE = "stateTaxable";
  @SerializedName(SERIALIZED_NAME_STATE_TAXABLE)
  private Boolean stateTaxable;

  public static final String SERIALIZED_NAME_STOCK_EXCHANGE_DETAILS = "stockExchangeDetails";
  @SerializedName(SERIALIZED_NAME_STOCK_EXCHANGE_DETAILS)
  private List<StockExchangeDetail> stockExchangeDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_STYLE = "style";
  @SerializedName(SERIALIZED_NAME_STYLE)
  private String style;

  public static final String SERIALIZED_NAME_SUB_SECTOR = "subSector";
  @SerializedName(SERIALIZED_NAME_SUB_SECTOR)
  private String subSector;

  public static final String SERIALIZED_NAME_TRADE_CURRENCY_CODE = "tradeCurrencyCode";
  @SerializedName(SERIALIZED_NAME_TRADE_CURRENCY_CODE)
  private String tradeCurrencyCode;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Security() {
  }

  public Security(
     String accrualMethod, 
     Double agencyFactor, 
     String callDate, 
     Double callPrice, 
     Boolean cdscFundFlag, 
     Boolean closedFlag, 
     String cusip, 
     String description, 
     Boolean federalTaxable, 
     String firmEligible, 
     String firstCouponDate, 
     Integer frequency, 
     String fundFamily, 
     String gicsSector, 
     Long id, 
     String incomeCurrency, 
     Double interestRate, 
     Boolean isDummySecurity, 
     Boolean isEnvestnetDummySecurity, 
     Boolean isSyntheticSecurity, 
     String isin, 
     String issueDate, 
     Double issueTypeMultiplier, 
     String lastCouponDate, 
     String lastModifiedDate, 
     String maturityDate, 
     Integer minimumPurchase, 
     String moodyRating, 
     String sAndPRating, 
     String sector, 
     String sedol, 
     String shareClass, 
     Boolean stateTaxable, 
     List<StockExchangeDetail> stockExchangeDetails, 
     String style, 
     String subSector, 
     String tradeCurrencyCode, 
     String type
  ) {
    this();
    this.accrualMethod = accrualMethod;
    this.agencyFactor = agencyFactor;
    this.callDate = callDate;
    this.callPrice = callPrice;
    this.cdscFundFlag = cdscFundFlag;
    this.closedFlag = closedFlag;
    this.cusip = cusip;
    this.description = description;
    this.federalTaxable = federalTaxable;
    this.firmEligible = firmEligible;
    this.firstCouponDate = firstCouponDate;
    this.frequency = frequency;
    this.fundFamily = fundFamily;
    this.gicsSector = gicsSector;
    this.id = id;
    this.incomeCurrency = incomeCurrency;
    this.interestRate = interestRate;
    this.isDummySecurity = isDummySecurity;
    this.isEnvestnetDummySecurity = isEnvestnetDummySecurity;
    this.isSyntheticSecurity = isSyntheticSecurity;
    this.isin = isin;
    this.issueDate = issueDate;
    this.issueTypeMultiplier = issueTypeMultiplier;
    this.lastCouponDate = lastCouponDate;
    this.lastModifiedDate = lastModifiedDate;
    this.maturityDate = maturityDate;
    this.minimumPurchase = minimumPurchase;
    this.moodyRating = moodyRating;
    this.sAndPRating = sAndPRating;
    this.sector = sector;
    this.sedol = sedol;
    this.shareClass = shareClass;
    this.stateTaxable = stateTaxable;
    this.stockExchangeDetails = stockExchangeDetails;
    this.style = style;
    this.subSector = subSector;
    this.tradeCurrencyCode = tradeCurrencyCode;
    this.type = type;
  }

  /**
   * The method in which interest is accrued or earned.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return accrualMethod
   */
  @javax.annotation.Nullable
  public String getAccrualMethod() {
    return accrualMethod;
  }



  /**
   * Agency factor of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return agencyFactor
   */
  @javax.annotation.Nullable
  public Double getAgencyFactor() {
    return agencyFactor;
  }



  /**
   * Next call date of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return callDate
   */
  @javax.annotation.Nullable
  public String getCallDate() {
    return callDate;
  }



  /**
   * Next call price of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return callPrice
   */
  @javax.annotation.Nullable
  public Double getCallPrice() {
    return callPrice;
  }



  /**
   * cdsc fund flag of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return cdscFundFlag
   */
  @javax.annotation.Nullable
  public Boolean getCdscFundFlag() {
    return cdscFundFlag;
  }



  /**
   * &lt;b&gt;true&lt;/b&gt;:Closed for all investors , &lt;b&gt;false&lt;/b&gt;: Open to all investors.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return closedFlag
   */
  @javax.annotation.Nullable
  public Boolean getClosedFlag() {
    return closedFlag;
  }



  /**
   * A CUSIP is a nine-character alphanumeric code that identifies a North American financial security for the purposes of facilitating clearing and settlement of trades.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return cusip
   */
  @javax.annotation.Nullable
  public String getCusip() {
    return cusip;
  }



  /**
   * The description (name) of the security. For example, Cisco Systems.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * Flag indicating federal taxable.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return federalTaxable
   */
  @javax.annotation.Nullable
  public Boolean getFederalTaxable() {
    return federalTaxable;
  }



  /**
   * &lt;b&gt;1&lt;/b&gt;- indicates Eligible,&lt;b&gt;0&lt;/b&gt;- indicates firm is not eligible.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return firmEligible
   */
  @javax.annotation.Nullable
  public String getFirmEligible() {
    return firmEligible;
  }



  /**
   * First coupon date of security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return firstCouponDate
   */
  @javax.annotation.Nullable
  public String getFirstCouponDate() {
    return firstCouponDate;
  }



  /**
   * Coupon Frequency.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return frequency
   */
  @javax.annotation.Nullable
  public Integer getFrequency() {
    return frequency;
  }



  /**
   * Mutual Fund Family Name.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return fundFamily
   */
  @javax.annotation.Nullable
  public String getFundFamily() {
    return fundFamily;
  }



  /**
   * GICS Sector is a categorization the S&amp;P assigns to all publically traded companies. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return gicsSector
   */
  @javax.annotation.Nullable
  public String getGicsSector() {
    return gicsSector;
  }



  /**
   * The unique identifier of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }



  /**
   * ISO 4217 currency code indicating income currency of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return incomeCurrency
   */
  @javax.annotation.Nullable
  public String getIncomeCurrency() {
    return incomeCurrency;
  }



  /**
   * The rate of interest paid annually, expressed as a percentage of the bond&#39;s par or face value.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return interestRate
   */
  @javax.annotation.Nullable
  public Double getInterestRate() {
    return interestRate;
  }



  /**
   * Indicates whether the security is a dummy security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return isDummySecurity
   */
  @javax.annotation.Nullable
  public Boolean getIsDummySecurity() {
    return isDummySecurity;
  }



  /**
   * Flag indicating a dummy security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return isEnvestnetDummySecurity
   */
  @javax.annotation.Nullable
  public Boolean getIsEnvestnetDummySecurity() {
    return isEnvestnetDummySecurity;
  }



  /**
   * Indicates whether the security is a simulated security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return isSyntheticSecurity
   */
  @javax.annotation.Nullable
  public Boolean getIsSyntheticSecurity() {
    return isSyntheticSecurity;
  }



  /**
   * The International Securities Identification Number (ISIN) is used worldwide to identify specific securities. It is equivalent to CUSIP for international markets.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return isin
   */
  @javax.annotation.Nullable
  public String getIsin() {
    return isin;
  }



  /**
   * Issue date of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return issueDate
   */
  @javax.annotation.Nullable
  public String getIssueDate() {
    return issueDate;
  }



  /**
   * Price units corresponding to the security style. This is used to derive actual price of the security from market value.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return issueTypeMultiplier
   */
  @javax.annotation.Nullable
  public Double getIssueTypeMultiplier() {
    return issueTypeMultiplier;
  }



  /**
   * Last coupon date of security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return lastCouponDate
   */
  @javax.annotation.Nullable
  public String getLastCouponDate() {
    return lastCouponDate;
  }



  /**
   * The last updated date of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return lastModifiedDate
   */
  @javax.annotation.Nullable
  public String getLastModifiedDate() {
    return lastModifiedDate;
  }



  /**
   * Maturity date of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return maturityDate
   */
  @javax.annotation.Nullable
  public String getMaturityDate() {
    return maturityDate;
  }



  /**
   * Minimum purchase of security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return minimumPurchase
   */
  @javax.annotation.Nullable
  public Integer getMinimumPurchase() {
    return minimumPurchase;
  }



  /**
   * Unique identifier for Moody rating on Envestnet platform.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return moodyRating
   */
  @javax.annotation.Nullable
  public String getMoodyRating() {
    return moodyRating;
  }



  /**
   * Unique identifier for S&amp;P rating on Envestnet platform.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return sAndPRating
   */
  @javax.annotation.Nullable
  public String getsAndPRating() {
    return sAndPRating;
  }



  /**
   * Identifier of the sector to which the security belongs to.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return sector
   */
  @javax.annotation.Nullable
  public String getSector() {
    return sector;
  }



  /**
   * The Stock Exchange Daily Official List (SEDOL) is a set of security identifiers used in the United Kingdom and Ireland for clearing purposes.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The SEDOL field is only applicable to the trade related transactions.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return sedol
   */
  @javax.annotation.Nullable
  public String getSedol() {
    return sedol;
  }



  /**
   * Share class of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return shareClass
   */
  @javax.annotation.Nullable
  public String getShareClass() {
    return shareClass;
  }



  /**
   * The state in which the security is taxed.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return stateTaxable
   */
  @javax.annotation.Nullable
  public Boolean getStateTaxable() {
    return stateTaxable;
  }



  /**
   * Securities exchange provide the securities information at the corresponding exchanges. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return stockExchangeDetails
   */
  @javax.annotation.Nullable
  public List<StockExchangeDetail> getStockExchangeDetails() {
    return stockExchangeDetails;
  }



  /**
   * Classification of the style for the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return style
   */
  @javax.annotation.Nullable
  public String getStyle() {
    return style;
  }



  /**
   * GICS sector ID to which the security belongs to.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return subSector
   */
  @javax.annotation.Nullable
  public String getSubSector() {
    return subSector;
  }



  /**
   * ISO 4217 currency code indicating trading currency of the security.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return tradeCurrencyCode
   */
  @javax.annotation.Nullable
  public String getTradeCurrencyCode() {
    return tradeCurrencyCode;
  }



  /**
   * Indicates the type of security like stocks, mutual fund, etc. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Security security = (Security) o;
    return Objects.equals(this.accrualMethod, security.accrualMethod) &&
        Objects.equals(this.agencyFactor, security.agencyFactor) &&
        Objects.equals(this.callDate, security.callDate) &&
        Objects.equals(this.callPrice, security.callPrice) &&
        Objects.equals(this.cdscFundFlag, security.cdscFundFlag) &&
        Objects.equals(this.closedFlag, security.closedFlag) &&
        Objects.equals(this.cusip, security.cusip) &&
        Objects.equals(this.description, security.description) &&
        Objects.equals(this.federalTaxable, security.federalTaxable) &&
        Objects.equals(this.firmEligible, security.firmEligible) &&
        Objects.equals(this.firstCouponDate, security.firstCouponDate) &&
        Objects.equals(this.frequency, security.frequency) &&
        Objects.equals(this.fundFamily, security.fundFamily) &&
        Objects.equals(this.gicsSector, security.gicsSector) &&
        Objects.equals(this.id, security.id) &&
        Objects.equals(this.incomeCurrency, security.incomeCurrency) &&
        Objects.equals(this.interestRate, security.interestRate) &&
        Objects.equals(this.isDummySecurity, security.isDummySecurity) &&
        Objects.equals(this.isEnvestnetDummySecurity, security.isEnvestnetDummySecurity) &&
        Objects.equals(this.isSyntheticSecurity, security.isSyntheticSecurity) &&
        Objects.equals(this.isin, security.isin) &&
        Objects.equals(this.issueDate, security.issueDate) &&
        Objects.equals(this.issueTypeMultiplier, security.issueTypeMultiplier) &&
        Objects.equals(this.lastCouponDate, security.lastCouponDate) &&
        Objects.equals(this.lastModifiedDate, security.lastModifiedDate) &&
        Objects.equals(this.maturityDate, security.maturityDate) &&
        Objects.equals(this.minimumPurchase, security.minimumPurchase) &&
        Objects.equals(this.moodyRating, security.moodyRating) &&
        Objects.equals(this.sAndPRating, security.sAndPRating) &&
        Objects.equals(this.sector, security.sector) &&
        Objects.equals(this.sedol, security.sedol) &&
        Objects.equals(this.shareClass, security.shareClass) &&
        Objects.equals(this.stateTaxable, security.stateTaxable) &&
        Objects.equals(this.stockExchangeDetails, security.stockExchangeDetails) &&
        Objects.equals(this.style, security.style) &&
        Objects.equals(this.subSector, security.subSector) &&
        Objects.equals(this.tradeCurrencyCode, security.tradeCurrencyCode) &&
        Objects.equals(this.type, security.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accrualMethod, agencyFactor, callDate, callPrice, cdscFundFlag, closedFlag, cusip, description, federalTaxable, firmEligible, firstCouponDate, frequency, fundFamily, gicsSector, id, incomeCurrency, interestRate, isDummySecurity, isEnvestnetDummySecurity, isSyntheticSecurity, isin, issueDate, issueTypeMultiplier, lastCouponDate, lastModifiedDate, maturityDate, minimumPurchase, moodyRating, sAndPRating, sector, sedol, shareClass, stateTaxable, stockExchangeDetails, style, subSector, tradeCurrencyCode, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Security {\n");
    sb.append("    accrualMethod: ").append(toIndentedString(accrualMethod)).append("\n");
    sb.append("    agencyFactor: ").append(toIndentedString(agencyFactor)).append("\n");
    sb.append("    callDate: ").append(toIndentedString(callDate)).append("\n");
    sb.append("    callPrice: ").append(toIndentedString(callPrice)).append("\n");
    sb.append("    cdscFundFlag: ").append(toIndentedString(cdscFundFlag)).append("\n");
    sb.append("    closedFlag: ").append(toIndentedString(closedFlag)).append("\n");
    sb.append("    cusip: ").append(toIndentedString(cusip)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    federalTaxable: ").append(toIndentedString(federalTaxable)).append("\n");
    sb.append("    firmEligible: ").append(toIndentedString(firmEligible)).append("\n");
    sb.append("    firstCouponDate: ").append(toIndentedString(firstCouponDate)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    fundFamily: ").append(toIndentedString(fundFamily)).append("\n");
    sb.append("    gicsSector: ").append(toIndentedString(gicsSector)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    incomeCurrency: ").append(toIndentedString(incomeCurrency)).append("\n");
    sb.append("    interestRate: ").append(toIndentedString(interestRate)).append("\n");
    sb.append("    isDummySecurity: ").append(toIndentedString(isDummySecurity)).append("\n");
    sb.append("    isEnvestnetDummySecurity: ").append(toIndentedString(isEnvestnetDummySecurity)).append("\n");
    sb.append("    isSyntheticSecurity: ").append(toIndentedString(isSyntheticSecurity)).append("\n");
    sb.append("    isin: ").append(toIndentedString(isin)).append("\n");
    sb.append("    issueDate: ").append(toIndentedString(issueDate)).append("\n");
    sb.append("    issueTypeMultiplier: ").append(toIndentedString(issueTypeMultiplier)).append("\n");
    sb.append("    lastCouponDate: ").append(toIndentedString(lastCouponDate)).append("\n");
    sb.append("    lastModifiedDate: ").append(toIndentedString(lastModifiedDate)).append("\n");
    sb.append("    maturityDate: ").append(toIndentedString(maturityDate)).append("\n");
    sb.append("    minimumPurchase: ").append(toIndentedString(minimumPurchase)).append("\n");
    sb.append("    moodyRating: ").append(toIndentedString(moodyRating)).append("\n");
    sb.append("    sAndPRating: ").append(toIndentedString(sAndPRating)).append("\n");
    sb.append("    sector: ").append(toIndentedString(sector)).append("\n");
    sb.append("    sedol: ").append(toIndentedString(sedol)).append("\n");
    sb.append("    shareClass: ").append(toIndentedString(shareClass)).append("\n");
    sb.append("    stateTaxable: ").append(toIndentedString(stateTaxable)).append("\n");
    sb.append("    stockExchangeDetails: ").append(toIndentedString(stockExchangeDetails)).append("\n");
    sb.append("    style: ").append(toIndentedString(style)).append("\n");
    sb.append("    subSector: ").append(toIndentedString(subSector)).append("\n");
    sb.append("    tradeCurrencyCode: ").append(toIndentedString(tradeCurrencyCode)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accrualMethod");
    openapiFields.add("agencyFactor");
    openapiFields.add("callDate");
    openapiFields.add("callPrice");
    openapiFields.add("cdscFundFlag");
    openapiFields.add("closedFlag");
    openapiFields.add("cusip");
    openapiFields.add("description");
    openapiFields.add("federalTaxable");
    openapiFields.add("firmEligible");
    openapiFields.add("firstCouponDate");
    openapiFields.add("frequency");
    openapiFields.add("fundFamily");
    openapiFields.add("gicsSector");
    openapiFields.add("id");
    openapiFields.add("incomeCurrency");
    openapiFields.add("interestRate");
    openapiFields.add("isDummySecurity");
    openapiFields.add("isEnvestnetDummySecurity");
    openapiFields.add("isSyntheticSecurity");
    openapiFields.add("isin");
    openapiFields.add("issueDate");
    openapiFields.add("issueTypeMultiplier");
    openapiFields.add("lastCouponDate");
    openapiFields.add("lastModifiedDate");
    openapiFields.add("maturityDate");
    openapiFields.add("minimumPurchase");
    openapiFields.add("moodyRating");
    openapiFields.add("sAndPRating");
    openapiFields.add("sector");
    openapiFields.add("sedol");
    openapiFields.add("shareClass");
    openapiFields.add("stateTaxable");
    openapiFields.add("stockExchangeDetails");
    openapiFields.add("style");
    openapiFields.add("subSector");
    openapiFields.add("tradeCurrencyCode");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Security
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Security.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Security is not found in the empty JSON string", Security.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Security.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Security` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accrualMethod") != null && !jsonObj.get("accrualMethod").isJsonNull()) && !jsonObj.get("accrualMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accrualMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accrualMethod").toString()));
      }
      if ((jsonObj.get("callDate") != null && !jsonObj.get("callDate").isJsonNull()) && !jsonObj.get("callDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callDate").toString()));
      }
      if ((jsonObj.get("cusip") != null && !jsonObj.get("cusip").isJsonNull()) && !jsonObj.get("cusip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cusip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cusip").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("firmEligible") != null && !jsonObj.get("firmEligible").isJsonNull()) && !jsonObj.get("firmEligible").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firmEligible` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firmEligible").toString()));
      }
      if ((jsonObj.get("firstCouponDate") != null && !jsonObj.get("firstCouponDate").isJsonNull()) && !jsonObj.get("firstCouponDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstCouponDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstCouponDate").toString()));
      }
      if ((jsonObj.get("fundFamily") != null && !jsonObj.get("fundFamily").isJsonNull()) && !jsonObj.get("fundFamily").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fundFamily` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fundFamily").toString()));
      }
      if ((jsonObj.get("gicsSector") != null && !jsonObj.get("gicsSector").isJsonNull()) && !jsonObj.get("gicsSector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gicsSector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gicsSector").toString()));
      }
      if ((jsonObj.get("incomeCurrency") != null && !jsonObj.get("incomeCurrency").isJsonNull()) && !jsonObj.get("incomeCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `incomeCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("incomeCurrency").toString()));
      }
      if ((jsonObj.get("isin") != null && !jsonObj.get("isin").isJsonNull()) && !jsonObj.get("isin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isin").toString()));
      }
      if ((jsonObj.get("issueDate") != null && !jsonObj.get("issueDate").isJsonNull()) && !jsonObj.get("issueDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issueDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issueDate").toString()));
      }
      if ((jsonObj.get("lastCouponDate") != null && !jsonObj.get("lastCouponDate").isJsonNull()) && !jsonObj.get("lastCouponDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastCouponDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastCouponDate").toString()));
      }
      if ((jsonObj.get("lastModifiedDate") != null && !jsonObj.get("lastModifiedDate").isJsonNull()) && !jsonObj.get("lastModifiedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModifiedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModifiedDate").toString()));
      }
      if ((jsonObj.get("maturityDate") != null && !jsonObj.get("maturityDate").isJsonNull()) && !jsonObj.get("maturityDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maturityDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maturityDate").toString()));
      }
      if ((jsonObj.get("moodyRating") != null && !jsonObj.get("moodyRating").isJsonNull()) && !jsonObj.get("moodyRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moodyRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moodyRating").toString()));
      }
      if ((jsonObj.get("sAndPRating") != null && !jsonObj.get("sAndPRating").isJsonNull()) && !jsonObj.get("sAndPRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sAndPRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sAndPRating").toString()));
      }
      if ((jsonObj.get("sector") != null && !jsonObj.get("sector").isJsonNull()) && !jsonObj.get("sector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sector").toString()));
      }
      if ((jsonObj.get("sedol") != null && !jsonObj.get("sedol").isJsonNull()) && !jsonObj.get("sedol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sedol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sedol").toString()));
      }
      if ((jsonObj.get("shareClass") != null && !jsonObj.get("shareClass").isJsonNull()) && !jsonObj.get("shareClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareClass").toString()));
      }
      if (jsonObj.get("stockExchangeDetails") != null && !jsonObj.get("stockExchangeDetails").isJsonNull()) {
        JsonArray jsonArraystockExchangeDetails = jsonObj.getAsJsonArray("stockExchangeDetails");
        if (jsonArraystockExchangeDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stockExchangeDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stockExchangeDetails` to be an array in the JSON string but got `%s`", jsonObj.get("stockExchangeDetails").toString()));
          }

          // validate the optional field `stockExchangeDetails` (array)
          for (int i = 0; i < jsonArraystockExchangeDetails.size(); i++) {
            StockExchangeDetail.validateJsonElement(jsonArraystockExchangeDetails.get(i));
          };
        }
      }
      if ((jsonObj.get("style") != null && !jsonObj.get("style").isJsonNull()) && !jsonObj.get("style").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `style` to be a primitive type in the JSON string but got `%s`", jsonObj.get("style").toString()));
      }
      if ((jsonObj.get("subSector") != null && !jsonObj.get("subSector").isJsonNull()) && !jsonObj.get("subSector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subSector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subSector").toString()));
      }
      if ((jsonObj.get("tradeCurrencyCode") != null && !jsonObj.get("tradeCurrencyCode").isJsonNull()) && !jsonObj.get("tradeCurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tradeCurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tradeCurrencyCode").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Security.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Security' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Security> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Security.class));

       return (TypeAdapter<T>) new TypeAdapter<Security>() {
           @Override
           public void write(JsonWriter out, Security value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Security read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Security given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Security
   * @throws IOException if the JSON string is invalid with respect to Security
   */
  public static Security fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Security.class);
  }

  /**
   * Convert an instance of Security to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

