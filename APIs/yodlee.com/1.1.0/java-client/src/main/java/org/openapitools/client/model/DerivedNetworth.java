/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DerivedNetworthHistoricalBalance;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DerivedNetworth
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.041142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DerivedNetworth {
  public static final String SERIALIZED_NAME_ASSET = "asset";
  @SerializedName(SERIALIZED_NAME_ASSET)
  private Money asset;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_HISTORICAL_BALANCES = "historicalBalances";
  @SerializedName(SERIALIZED_NAME_HISTORICAL_BALANCES)
  private List<DerivedNetworthHistoricalBalance> historicalBalances = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIABILITY = "liability";
  @SerializedName(SERIALIZED_NAME_LIABILITY)
  private Money liability;

  public static final String SERIALIZED_NAME_NETWORTH = "networth";
  @SerializedName(SERIALIZED_NAME_NETWORTH)
  private Money networth;

  public DerivedNetworth() {
  }

  public DerivedNetworth(
     String date, 
     List<DerivedNetworthHistoricalBalance> historicalBalances
  ) {
    this();
    this.date = date;
    this.historicalBalances = historicalBalances;
  }

  public DerivedNetworth asset(Money asset) {
    this.asset = asset;
    return this;
  }

  /**
   * Get asset
   * @return asset
   */
  @javax.annotation.Nullable
  public Money getAsset() {
    return asset;
  }

  public void setAsset(Money asset) {
    this.asset = asset;
  }


  /**
   * The date as of when the networth information is provided.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, creditcard, investment, insurance, realEstate, loan&lt;br&gt;
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }



  /**
   * Balances of the accounts over the period of time.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, creditcard, investment, insurance, realEstate, loan&lt;br&gt;
   * @return historicalBalances
   */
  @javax.annotation.Nullable
  public List<DerivedNetworthHistoricalBalance> getHistoricalBalances() {
    return historicalBalances;
  }



  public DerivedNetworth liability(Money liability) {
    this.liability = liability;
    return this;
  }

  /**
   * Get liability
   * @return liability
   */
  @javax.annotation.Nullable
  public Money getLiability() {
    return liability;
  }

  public void setLiability(Money liability) {
    this.liability = liability;
  }


  public DerivedNetworth networth(Money networth) {
    this.networth = networth;
    return this;
  }

  /**
   * Get networth
   * @return networth
   */
  @javax.annotation.Nullable
  public Money getNetworth() {
    return networth;
  }

  public void setNetworth(Money networth) {
    this.networth = networth;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DerivedNetworth derivedNetworth = (DerivedNetworth) o;
    return Objects.equals(this.asset, derivedNetworth.asset) &&
        Objects.equals(this.date, derivedNetworth.date) &&
        Objects.equals(this.historicalBalances, derivedNetworth.historicalBalances) &&
        Objects.equals(this.liability, derivedNetworth.liability) &&
        Objects.equals(this.networth, derivedNetworth.networth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asset, date, historicalBalances, liability, networth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DerivedNetworth {\n");
    sb.append("    asset: ").append(toIndentedString(asset)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    historicalBalances: ").append(toIndentedString(historicalBalances)).append("\n");
    sb.append("    liability: ").append(toIndentedString(liability)).append("\n");
    sb.append("    networth: ").append(toIndentedString(networth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asset");
    openapiFields.add("date");
    openapiFields.add("historicalBalances");
    openapiFields.add("liability");
    openapiFields.add("networth");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DerivedNetworth
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DerivedNetworth.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DerivedNetworth is not found in the empty JSON string", DerivedNetworth.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DerivedNetworth.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DerivedNetworth` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `asset`
      if (jsonObj.get("asset") != null && !jsonObj.get("asset").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("asset"));
      }
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if (jsonObj.get("historicalBalances") != null && !jsonObj.get("historicalBalances").isJsonNull()) {
        JsonArray jsonArrayhistoricalBalances = jsonObj.getAsJsonArray("historicalBalances");
        if (jsonArrayhistoricalBalances != null) {
          // ensure the json data is an array
          if (!jsonObj.get("historicalBalances").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `historicalBalances` to be an array in the JSON string but got `%s`", jsonObj.get("historicalBalances").toString()));
          }

          // validate the optional field `historicalBalances` (array)
          for (int i = 0; i < jsonArrayhistoricalBalances.size(); i++) {
            DerivedNetworthHistoricalBalance.validateJsonElement(jsonArrayhistoricalBalances.get(i));
          };
        }
      }
      // validate the optional field `liability`
      if (jsonObj.get("liability") != null && !jsonObj.get("liability").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("liability"));
      }
      // validate the optional field `networth`
      if (jsonObj.get("networth") != null && !jsonObj.get("networth").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("networth"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DerivedNetworth.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DerivedNetworth' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DerivedNetworth> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DerivedNetworth.class));

       return (TypeAdapter<T>) new TypeAdapter<DerivedNetworth>() {
           @Override
           public void write(JsonWriter out, DerivedNetworth value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DerivedNetworth read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DerivedNetworth given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DerivedNetworth
   * @throws IOException if the JSON string is invalid with respect to DerivedNetworth
   */
  public static DerivedNetworth fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DerivedNetworth.class);
  }

  /**
   * Convert an instance of DerivedNetworth to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

