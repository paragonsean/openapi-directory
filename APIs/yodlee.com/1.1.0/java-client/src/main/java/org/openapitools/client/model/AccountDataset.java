/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountDataset
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.041142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountDataset {
  /**
   * The status of last update attempted for the dataset. &lt;br&gt;&lt;br&gt;&lt;b&gt;Account Type&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET accounts&lt;/li&gt;&lt;li&gt;GET accounts/{accountId}&lt;/li&gt;&lt;li&gt;GET providerAccounts&lt;/li&gt;&lt;li&gt;POST providerAccounts&lt;/li&gt;&lt;li&gt;PUT providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
   */
  @JsonAdapter(AdditionalStatusEnum.Adapter.class)
  public enum AdditionalStatusEnum {
    LOGIN_IN_PROGRESS("LOGIN_IN_PROGRESS"),
    
    DATA_RETRIEVAL_IN_PROGRESS("DATA_RETRIEVAL_IN_PROGRESS"),
    
    ACCT_SUMMARY_RECEIVED("ACCT_SUMMARY_RECEIVED"),
    
    AVAILABLE_DATA_RETRIEVED("AVAILABLE_DATA_RETRIEVED"),
    
    PARTIAL_DATA_RETRIEVED("PARTIAL_DATA_RETRIEVED"),
    
    DATA_RETRIEVAL_FAILED("DATA_RETRIEVAL_FAILED"),
    
    DATA_NOT_AVAILABLE("DATA_NOT_AVAILABLE"),
    
    ACCOUNT_LOCKED("ACCOUNT_LOCKED"),
    
    ADDL_AUTHENTICATION_REQUIRED("ADDL_AUTHENTICATION_REQUIRED"),
    
    BETA_SITE_DEV_IN_PROGRESS("BETA_SITE_DEV_IN_PROGRESS"),
    
    CREDENTIALS_UPDATE_NEEDED("CREDENTIALS_UPDATE_NEEDED"),
    
    INCORRECT_CREDENTIALS("INCORRECT_CREDENTIALS"),
    
    PROPERTY_VALUE_NOT_AVAILABLE("PROPERTY_VALUE_NOT_AVAILABLE"),
    
    INVALID_ADDL_INFO_PROVIDED("INVALID_ADDL_INFO_PROVIDED"),
    
    REQUEST_TIME_OUT("REQUEST_TIME_OUT"),
    
    SITE_BLOCKING_ERROR("SITE_BLOCKING_ERROR"),
    
    UNEXPECTED_SITE_ERROR("UNEXPECTED_SITE_ERROR"),
    
    SITE_NOT_SUPPORTED("SITE_NOT_SUPPORTED"),
    
    SITE_UNAVAILABLE("SITE_UNAVAILABLE"),
    
    TECH_ERROR("TECH_ERROR"),
    
    USER_ACTION_NEEDED_AT_SITE("USER_ACTION_NEEDED_AT_SITE"),
    
    SITE_SESSION_INVALIDATED("SITE_SESSION_INVALIDATED"),
    
    NEW_AUTHENTICATION_REQUIRED("NEW_AUTHENTICATION_REQUIRED"),
    
    DATASET_NOT_SUPPORTED("DATASET_NOT_SUPPORTED"),
    
    ENROLLMENT_REQUIRED_FOR_DATASET("ENROLLMENT_REQUIRED_FOR_DATASET"),
    
    CONSENT_REQUIRED("CONSENT_REQUIRED"),
    
    CONSENT_EXPIRED("CONSENT_EXPIRED"),
    
    CONSENT_REVOKED("CONSENT_REVOKED"),
    
    INCORRECT_OAUTH_TOKEN("INCORRECT_OAUTH_TOKEN"),
    
    MIGRATION_IN_PROGRESS("MIGRATION_IN_PROGRESS");

    private String value;

    AdditionalStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdditionalStatusEnum fromValue(String value) {
      for (AdditionalStatusEnum b : AdditionalStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AdditionalStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdditionalStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdditionalStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdditionalStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AdditionalStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ADDITIONAL_STATUS = "additionalStatus";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_STATUS)
  private AdditionalStatusEnum additionalStatus;

  public static final String SERIALIZED_NAME_LAST_UPDATE_ATTEMPT = "lastUpdateAttempt";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_ATTEMPT)
  private String lastUpdateAttempt;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private String lastUpdated;

  /**
   * The name of the dataset requested from the provider site&lt;br&gt;&lt;br&gt;&lt;b&gt;Account Type&lt;/b&gt;: Manual&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET accounts&lt;/li&gt;&lt;li&gt;GET accounts/{accountId}&lt;/li&gt;&lt;li&gt;GET providerAccounts&lt;/li&gt;&lt;li&gt;POST providerAccounts&lt;/li&gt;&lt;li&gt;PUT providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
   */
  @JsonAdapter(NameEnum.Adapter.class)
  public enum NameEnum {
    BASIC_AGG_DATA("BASIC_AGG_DATA"),
    
    ADVANCE_AGG_DATA("ADVANCE_AGG_DATA"),
    
    ACCT_PROFILE("ACCT_PROFILE"),
    
    DOCUMENT("DOCUMENT");

    private String value;

    NameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NameEnum fromValue(String value) {
      for (NameEnum b : NameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private NameEnum name;

  public static final String SERIALIZED_NAME_NEXT_UPDATE_SCHEDULED = "nextUpdateScheduled";
  @SerializedName(SERIALIZED_NAME_NEXT_UPDATE_SCHEDULED)
  private String nextUpdateScheduled;

  /**
   * Indicate whether the dataset is eligible for update or not.&lt;br&gt;&lt;br&gt;&lt;b&gt;Account Type&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET accounts&lt;/li&gt;&lt;li&gt;GET accounts/{accountId}&lt;/li&gt;&lt;li&gt;GET providerAccounts&lt;/li&gt;&lt;li&gt;POST providerAccounts&lt;/li&gt;&lt;li&gt;PUT providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
   */
  @JsonAdapter(UpdateEligibilityEnum.Adapter.class)
  public enum UpdateEligibilityEnum {
    ALLOW_UPDATE("ALLOW_UPDATE"),
    
    ALLOW_UPDATE_WITH_CREDENTIALS("ALLOW_UPDATE_WITH_CREDENTIALS"),
    
    DISALLOW_UPDATE("DISALLOW_UPDATE");

    private String value;

    UpdateEligibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UpdateEligibilityEnum fromValue(String value) {
      for (UpdateEligibilityEnum b : UpdateEligibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UpdateEligibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UpdateEligibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UpdateEligibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UpdateEligibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UpdateEligibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UPDATE_ELIGIBILITY = "updateEligibility";
  @SerializedName(SERIALIZED_NAME_UPDATE_ELIGIBILITY)
  private UpdateEligibilityEnum updateEligibility;

  public AccountDataset() {
  }

  public AccountDataset(
     AdditionalStatusEnum additionalStatus, 
     String lastUpdateAttempt, 
     String lastUpdated, 
     String nextUpdateScheduled, 
     UpdateEligibilityEnum updateEligibility
  ) {
    this();
    this.additionalStatus = additionalStatus;
    this.lastUpdateAttempt = lastUpdateAttempt;
    this.lastUpdated = lastUpdated;
    this.nextUpdateScheduled = nextUpdateScheduled;
    this.updateEligibility = updateEligibility;
  }

  /**
   * The status of last update attempted for the dataset. &lt;br&gt;&lt;br&gt;&lt;b&gt;Account Type&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET accounts&lt;/li&gt;&lt;li&gt;GET accounts/{accountId}&lt;/li&gt;&lt;li&gt;GET providerAccounts&lt;/li&gt;&lt;li&gt;POST providerAccounts&lt;/li&gt;&lt;li&gt;PUT providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
   * @return additionalStatus
   */
  @javax.annotation.Nullable
  public AdditionalStatusEnum getAdditionalStatus() {
    return additionalStatus;
  }



  /**
   * Indicate when the last attempt was performed to update the dataset for the given provider account&lt;br&gt;&lt;br&gt;&lt;b&gt;Account Type&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET accounts&lt;/li&gt;&lt;li&gt;GET accounts/{accountId}&lt;/li&gt;&lt;li&gt;GET providerAccounts&lt;/li&gt;&lt;li&gt;POST providerAccounts&lt;/li&gt;&lt;li&gt;PUT providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;/ul&gt;
   * @return lastUpdateAttempt
   */
  @javax.annotation.Nullable
  public String getLastUpdateAttempt() {
    return lastUpdateAttempt;
  }



  /**
   * Indicate when the dataset is last updated successfully for the given provider account.&lt;br&gt;&lt;br&gt;&lt;b&gt;Account Type&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET accounts&lt;/li&gt;&lt;li&gt;GET accounts/{accountId}&lt;/li&gt;&lt;li&gt;GET providerAccounts&lt;/li&gt;&lt;li&gt;POST providerAccounts&lt;/li&gt;&lt;li&gt;PUT providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;/ul&gt;
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public String getLastUpdated() {
    return lastUpdated;
  }



  public AccountDataset name(NameEnum name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the dataset requested from the provider site&lt;br&gt;&lt;br&gt;&lt;b&gt;Account Type&lt;/b&gt;: Manual&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET accounts&lt;/li&gt;&lt;li&gt;GET accounts/{accountId}&lt;/li&gt;&lt;li&gt;GET providerAccounts&lt;/li&gt;&lt;li&gt;POST providerAccounts&lt;/li&gt;&lt;li&gt;PUT providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
   * @return name
   */
  @javax.annotation.Nullable
  public NameEnum getName() {
    return name;
  }

  public void setName(NameEnum name) {
    this.name = name;
  }


  /**
   * Indicates when the next attempt to update the dataset is scheduled.&lt;br&gt;&lt;br&gt;&lt;b&gt;Account Type&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET accounts&lt;/li&gt;&lt;li&gt;GET accounts/{accountId}&lt;/li&gt;&lt;li&gt;GET providerAccounts&lt;/li&gt;&lt;li&gt;POST providerAccounts&lt;/li&gt;&lt;li&gt;PUT providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;/ul&gt;
   * @return nextUpdateScheduled
   */
  @javax.annotation.Nullable
  public String getNextUpdateScheduled() {
    return nextUpdateScheduled;
  }



  /**
   * Indicate whether the dataset is eligible for update or not.&lt;br&gt;&lt;br&gt;&lt;b&gt;Account Type&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET accounts&lt;/li&gt;&lt;li&gt;GET accounts/{accountId}&lt;/li&gt;&lt;li&gt;GET providerAccounts&lt;/li&gt;&lt;li&gt;POST providerAccounts&lt;/li&gt;&lt;li&gt;PUT providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
   * @return updateEligibility
   */
  @javax.annotation.Nullable
  public UpdateEligibilityEnum getUpdateEligibility() {
    return updateEligibility;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountDataset accountDataset = (AccountDataset) o;
    return Objects.equals(this.additionalStatus, accountDataset.additionalStatus) &&
        Objects.equals(this.lastUpdateAttempt, accountDataset.lastUpdateAttempt) &&
        Objects.equals(this.lastUpdated, accountDataset.lastUpdated) &&
        Objects.equals(this.name, accountDataset.name) &&
        Objects.equals(this.nextUpdateScheduled, accountDataset.nextUpdateScheduled) &&
        Objects.equals(this.updateEligibility, accountDataset.updateEligibility);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalStatus, lastUpdateAttempt, lastUpdated, name, nextUpdateScheduled, updateEligibility);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountDataset {\n");
    sb.append("    additionalStatus: ").append(toIndentedString(additionalStatus)).append("\n");
    sb.append("    lastUpdateAttempt: ").append(toIndentedString(lastUpdateAttempt)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nextUpdateScheduled: ").append(toIndentedString(nextUpdateScheduled)).append("\n");
    sb.append("    updateEligibility: ").append(toIndentedString(updateEligibility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalStatus");
    openapiFields.add("lastUpdateAttempt");
    openapiFields.add("lastUpdated");
    openapiFields.add("name");
    openapiFields.add("nextUpdateScheduled");
    openapiFields.add("updateEligibility");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountDataset
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountDataset.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountDataset is not found in the empty JSON string", AccountDataset.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountDataset.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountDataset` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additionalStatus") != null && !jsonObj.get("additionalStatus").isJsonNull()) && !jsonObj.get("additionalStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalStatus").toString()));
      }
      // validate the optional field `additionalStatus`
      if (jsonObj.get("additionalStatus") != null && !jsonObj.get("additionalStatus").isJsonNull()) {
        AdditionalStatusEnum.validateJsonElement(jsonObj.get("additionalStatus"));
      }
      if ((jsonObj.get("lastUpdateAttempt") != null && !jsonObj.get("lastUpdateAttempt").isJsonNull()) && !jsonObj.get("lastUpdateAttempt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUpdateAttempt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUpdateAttempt").toString()));
      }
      if ((jsonObj.get("lastUpdated") != null && !jsonObj.get("lastUpdated").isJsonNull()) && !jsonObj.get("lastUpdated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUpdated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUpdated").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        NameEnum.validateJsonElement(jsonObj.get("name"));
      }
      if ((jsonObj.get("nextUpdateScheduled") != null && !jsonObj.get("nextUpdateScheduled").isJsonNull()) && !jsonObj.get("nextUpdateScheduled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextUpdateScheduled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextUpdateScheduled").toString()));
      }
      if ((jsonObj.get("updateEligibility") != null && !jsonObj.get("updateEligibility").isJsonNull()) && !jsonObj.get("updateEligibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateEligibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateEligibility").toString()));
      }
      // validate the optional field `updateEligibility`
      if (jsonObj.get("updateEligibility") != null && !jsonObj.get("updateEligibility").isJsonNull()) {
        UpdateEligibilityEnum.validateJsonElement(jsonObj.get("updateEligibility"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountDataset.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountDataset' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountDataset> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountDataset.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountDataset>() {
           @Override
           public void write(JsonWriter out, AccountDataset value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountDataset read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountDataset given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountDataset
   * @throws IOException if the JSON string is invalid with respect to AccountDataset
   */
  public static AccountDataset fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountDataset.class);
  }

  /**
   * Convert an instance of AccountDataset to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

