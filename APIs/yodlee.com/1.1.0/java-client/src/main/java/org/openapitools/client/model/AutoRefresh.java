/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AutoRefresh
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.041142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AutoRefresh {
  /**
   * Indicates the reason for the status.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET accounts&lt;/li&gt;&lt;li&gt;GET accounts/{accountId}&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
   */
  @JsonAdapter(AdditionalStatusEnum.Adapter.class)
  public enum AdditionalStatusEnum {
    SCHEDULED("SCHEDULED"),
    
    TEMP_ERROR("TEMP_ERROR"),
    
    SITE_BLOCKING("SITE_BLOCKING"),
    
    SITE_NOT_SUPPORTED("SITE_NOT_SUPPORTED"),
    
    REAL_TIME_MFA_REQUIRED("REAL_TIME_MFA_REQUIRED"),
    
    USER_ACTION_REQUIRED("USER_ACTION_REQUIRED"),
    
    UNSUBSCRIBED("UNSUBSCRIBED"),
    
    MANUAL_ACCOUNT("MANUAL_ACCOUNT");

    private String value;

    AdditionalStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdditionalStatusEnum fromValue(String value) {
      for (AdditionalStatusEnum b : AdditionalStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AdditionalStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdditionalStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdditionalStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdditionalStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AdditionalStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ADDITIONAL_STATUS = "additionalStatus";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_STATUS)
  private AdditionalStatusEnum additionalStatus;

  public static final String SERIALIZED_NAME_AS_OF_DATE = "asOfDate";
  @SerializedName(SERIALIZED_NAME_AS_OF_DATE)
  private String asOfDate;

  /**
   * Indicates whether auto refresh is enabled or disabled.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET accounts&lt;/li&gt;&lt;li&gt;GET accounts/{accountId}&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ENABLED("ENABLED"),
    
    DISABLED("DISABLED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public AutoRefresh() {
  }

  public AutoRefresh(
     AdditionalStatusEnum additionalStatus, 
     String asOfDate, 
     StatusEnum status
  ) {
    this();
    this.additionalStatus = additionalStatus;
    this.asOfDate = asOfDate;
    this.status = status;
  }

  /**
   * Indicates the reason for the status.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET accounts&lt;/li&gt;&lt;li&gt;GET accounts/{accountId}&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
   * @return additionalStatus
   */
  @javax.annotation.Nullable
  public AdditionalStatusEnum getAdditionalStatus() {
    return additionalStatus;
  }



  /**
   * Date on which the auto refresh status is determined.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET accounts&lt;/li&gt;&lt;li&gt;GET accounts/{accountId}&lt;/li&gt;&lt;/ul&gt;
   * @return asOfDate
   */
  @javax.annotation.Nullable
  public String getAsOfDate() {
    return asOfDate;
  }



  /**
   * Indicates whether auto refresh is enabled or disabled.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET accounts&lt;/li&gt;&lt;li&gt;GET accounts/{accountId}&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutoRefresh autoRefresh = (AutoRefresh) o;
    return Objects.equals(this.additionalStatus, autoRefresh.additionalStatus) &&
        Objects.equals(this.asOfDate, autoRefresh.asOfDate) &&
        Objects.equals(this.status, autoRefresh.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalStatus, asOfDate, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutoRefresh {\n");
    sb.append("    additionalStatus: ").append(toIndentedString(additionalStatus)).append("\n");
    sb.append("    asOfDate: ").append(toIndentedString(asOfDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalStatus");
    openapiFields.add("asOfDate");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AutoRefresh
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutoRefresh.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutoRefresh is not found in the empty JSON string", AutoRefresh.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutoRefresh.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutoRefresh` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additionalStatus") != null && !jsonObj.get("additionalStatus").isJsonNull()) && !jsonObj.get("additionalStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalStatus").toString()));
      }
      // validate the optional field `additionalStatus`
      if (jsonObj.get("additionalStatus") != null && !jsonObj.get("additionalStatus").isJsonNull()) {
        AdditionalStatusEnum.validateJsonElement(jsonObj.get("additionalStatus"));
      }
      if ((jsonObj.get("asOfDate") != null && !jsonObj.get("asOfDate").isJsonNull()) && !jsonObj.get("asOfDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asOfDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asOfDate").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutoRefresh.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutoRefresh' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutoRefresh> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutoRefresh.class));

       return (TypeAdapter<T>) new TypeAdapter<AutoRefresh>() {
           @Override
           public void write(JsonWriter out, AutoRefresh value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutoRefresh read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AutoRefresh given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AutoRefresh
   * @throws IOException if the JSON string is invalid with respect to AutoRefresh
   */
  public static AutoRefresh fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutoRefresh.class);
  }

  /**
   * Convert an instance of AutoRefresh to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

