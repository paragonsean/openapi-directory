/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CobrandLoginRequest;
import org.openapitools.client.model.CobrandLoginResponse;
import org.openapitools.client.model.CobrandNotificationResponse;
import org.openapitools.client.model.CobrandPublicKeyResponse;
import org.openapitools.client.model.CreateCobrandNotificationEventRequest;
import org.openapitools.client.model.UpdateCobrandNotificationEventRequest;
import org.openapitools.client.model.YodleeError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CobrandApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CobrandApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CobrandApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cobrandLogin
     * @param cobrandLoginRequest cobrandLoginRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for cobrandParam </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Y003 : Account is locked, contact Yodlee customer care&lt;br&gt;Y001 : User name and password required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cobrandLoginCall(CobrandLoginRequest cobrandLoginRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cobrandLoginRequest;

        // create path and map variables
        String localVarPath = "/cobrand/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cobrandLoginValidateBeforeCall(CobrandLoginRequest cobrandLoginRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cobrandLoginRequest' is set
        if (cobrandLoginRequest == null) {
            throw new ApiException("Missing the required parameter 'cobrandLoginRequest' when calling cobrandLogin(Async)");
        }

        return cobrandLoginCall(cobrandLoginRequest, _callback);

    }

    /**
     * Cobrand Login
     * The cobrand login service authenticates a cobrand.&lt;br&gt;Cobrand session in the response includes the cobrand session token (cobSession) &lt;br&gt;which is used in subsequent API calls like registering or signing in the user. &lt;br&gt;The idle timeout for a cobrand session is 2 hours and the absolute timeout is 24 hours. This service can be &lt;br&gt;invoked to create a new cobrand session token. &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; This endpoint is deprecated for customers using the API Key-based authentication and is applicable only to customers who use the SAML-based authentication.&lt;br&gt;The content type has to be passed as application/json for the body parameter. &lt;br&gt;
     * @param cobrandLoginRequest cobrandLoginRequest (required)
     * @return CobrandLoginResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for cobrandParam </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Y003 : Account is locked, contact Yodlee customer care&lt;br&gt;Y001 : User name and password required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public CobrandLoginResponse cobrandLogin(CobrandLoginRequest cobrandLoginRequest) throws ApiException {
        ApiResponse<CobrandLoginResponse> localVarResp = cobrandLoginWithHttpInfo(cobrandLoginRequest);
        return localVarResp.getData();
    }

    /**
     * Cobrand Login
     * The cobrand login service authenticates a cobrand.&lt;br&gt;Cobrand session in the response includes the cobrand session token (cobSession) &lt;br&gt;which is used in subsequent API calls like registering or signing in the user. &lt;br&gt;The idle timeout for a cobrand session is 2 hours and the absolute timeout is 24 hours. This service can be &lt;br&gt;invoked to create a new cobrand session token. &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; This endpoint is deprecated for customers using the API Key-based authentication and is applicable only to customers who use the SAML-based authentication.&lt;br&gt;The content type has to be passed as application/json for the body parameter. &lt;br&gt;
     * @param cobrandLoginRequest cobrandLoginRequest (required)
     * @return ApiResponse&lt;CobrandLoginResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for cobrandParam </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Y003 : Account is locked, contact Yodlee customer care&lt;br&gt;Y001 : User name and password required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CobrandLoginResponse> cobrandLoginWithHttpInfo(CobrandLoginRequest cobrandLoginRequest) throws ApiException {
        okhttp3.Call localVarCall = cobrandLoginValidateBeforeCall(cobrandLoginRequest, null);
        Type localVarReturnType = new TypeToken<CobrandLoginResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cobrand Login (asynchronously)
     * The cobrand login service authenticates a cobrand.&lt;br&gt;Cobrand session in the response includes the cobrand session token (cobSession) &lt;br&gt;which is used in subsequent API calls like registering or signing in the user. &lt;br&gt;The idle timeout for a cobrand session is 2 hours and the absolute timeout is 24 hours. This service can be &lt;br&gt;invoked to create a new cobrand session token. &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; This endpoint is deprecated for customers using the API Key-based authentication and is applicable only to customers who use the SAML-based authentication.&lt;br&gt;The content type has to be passed as application/json for the body parameter. &lt;br&gt;
     * @param cobrandLoginRequest cobrandLoginRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for cobrandParam </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Y003 : Account is locked, contact Yodlee customer care&lt;br&gt;Y001 : User name and password required </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cobrandLoginAsync(CobrandLoginRequest cobrandLoginRequest, final ApiCallback<CobrandLoginResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cobrandLoginValidateBeforeCall(cobrandLoginRequest, _callback);
        Type localVarReturnType = new TypeToken<CobrandLoginResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cobrandLogout
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Logout successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cobrandLogoutCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cobrand/logout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cobrandLogoutValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return cobrandLogoutCall(_callback);

    }

    /**
     * Cobrand Logout
     * The cobrand logout service is used to log out the cobrand.&lt;br&gt;This service does not return a response. The HTTP response code is 204 (Success with no content).&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; This endpoint is deprecated for customers using the API Key-based authentication and is applicable only to customers who use the SAML-based authentication.&lt;br&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Logout successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void cobrandLogout() throws ApiException {
        cobrandLogoutWithHttpInfo();
    }

    /**
     * Cobrand Logout
     * The cobrand logout service is used to log out the cobrand.&lt;br&gt;This service does not return a response. The HTTP response code is 204 (Success with no content).&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; This endpoint is deprecated for customers using the API Key-based authentication and is applicable only to customers who use the SAML-based authentication.&lt;br&gt;
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Logout successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cobrandLogoutWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = cobrandLogoutValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cobrand Logout (asynchronously)
     * The cobrand logout service is used to log out the cobrand.&lt;br&gt;This service does not return a response. The HTTP response code is 204 (Success with no content).&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; This endpoint is deprecated for customers using the API Key-based authentication and is applicable only to customers who use the SAML-based authentication.&lt;br&gt;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Logout successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cobrandLogoutAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cobrandLogoutValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSubscriptionEvent
     * @param eventName eventName (required)
     * @param createCobrandNotificationEventRequest eventRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y803 : eventName required&lt;br&gt;Y803 : callbackUrl required&lt;br&gt;Y800 : Invalid value for callbackUrl </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createSubscriptionEventCall(String eventName, CreateCobrandNotificationEventRequest createCobrandNotificationEventRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCobrandNotificationEventRequest;

        // create path and map variables
        String localVarPath = "/cobrand/config/notifications/events/{eventName}"
            .replace("{" + "eventName" + "}", localVarApiClient.escapeString(eventName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSubscriptionEventValidateBeforeCall(String eventName, CreateCobrandNotificationEventRequest createCobrandNotificationEventRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventName' is set
        if (eventName == null) {
            throw new ApiException("Missing the required parameter 'eventName' when calling createSubscriptionEvent(Async)");
        }

        // verify the required parameter 'createCobrandNotificationEventRequest' is set
        if (createCobrandNotificationEventRequest == null) {
            throw new ApiException("Missing the required parameter 'createCobrandNotificationEventRequest' when calling createSubscriptionEvent(Async)");
        }

        return createSubscriptionEventCall(eventName, createCobrandNotificationEventRequest, _callback);

    }

    /**
     * Subscribe Event
     * &lt;b&gt;Refer POST /configs/notifications/events/{eventName}.&lt;/b&gt;&lt;br&gt;The subscribe events service is used to subscribe to an event for receiving notifications.&lt;br&gt;The callback URL, where the notification will be posted should be provided to this service.&lt;br&gt;If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.&lt;br&gt;Customers can subscribe to REFRESH,DATA_UPDATES and AUTO_REFRESH_UPDATES event.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes&lt;/b&gt;:&lt;br&gt;This service is not available in developer sandbox/test environment and will be made available for testing in your dedicated environment, once the contract is signed.&lt;br&gt;The content type has to be passed as application/json for the body parameter.&lt;br&gt;
     * @param eventName eventName (required)
     * @param createCobrandNotificationEventRequest eventRequest (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y803 : eventName required&lt;br&gt;Y803 : callbackUrl required&lt;br&gt;Y800 : Invalid value for callbackUrl </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void createSubscriptionEvent(String eventName, CreateCobrandNotificationEventRequest createCobrandNotificationEventRequest) throws ApiException {
        createSubscriptionEventWithHttpInfo(eventName, createCobrandNotificationEventRequest);
    }

    /**
     * Subscribe Event
     * &lt;b&gt;Refer POST /configs/notifications/events/{eventName}.&lt;/b&gt;&lt;br&gt;The subscribe events service is used to subscribe to an event for receiving notifications.&lt;br&gt;The callback URL, where the notification will be posted should be provided to this service.&lt;br&gt;If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.&lt;br&gt;Customers can subscribe to REFRESH,DATA_UPDATES and AUTO_REFRESH_UPDATES event.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes&lt;/b&gt;:&lt;br&gt;This service is not available in developer sandbox/test environment and will be made available for testing in your dedicated environment, once the contract is signed.&lt;br&gt;The content type has to be passed as application/json for the body parameter.&lt;br&gt;
     * @param eventName eventName (required)
     * @param createCobrandNotificationEventRequest eventRequest (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y803 : eventName required&lt;br&gt;Y803 : callbackUrl required&lt;br&gt;Y800 : Invalid value for callbackUrl </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> createSubscriptionEventWithHttpInfo(String eventName, CreateCobrandNotificationEventRequest createCobrandNotificationEventRequest) throws ApiException {
        okhttp3.Call localVarCall = createSubscriptionEventValidateBeforeCall(eventName, createCobrandNotificationEventRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Subscribe Event (asynchronously)
     * &lt;b&gt;Refer POST /configs/notifications/events/{eventName}.&lt;/b&gt;&lt;br&gt;The subscribe events service is used to subscribe to an event for receiving notifications.&lt;br&gt;The callback URL, where the notification will be posted should be provided to this service.&lt;br&gt;If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.&lt;br&gt;Customers can subscribe to REFRESH,DATA_UPDATES and AUTO_REFRESH_UPDATES event.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes&lt;/b&gt;:&lt;br&gt;This service is not available in developer sandbox/test environment and will be made available for testing in your dedicated environment, once the contract is signed.&lt;br&gt;The content type has to be passed as application/json for the body parameter.&lt;br&gt;
     * @param eventName eventName (required)
     * @param createCobrandNotificationEventRequest eventRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y803 : eventName required&lt;br&gt;Y803 : callbackUrl required&lt;br&gt;Y800 : Invalid value for callbackUrl </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createSubscriptionEventAsync(String eventName, CreateCobrandNotificationEventRequest createCobrandNotificationEventRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSubscriptionEventValidateBeforeCall(eventName, createCobrandNotificationEventRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSubscribedEvent
     * @param eventName eventName (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y803 : eventName required </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteSubscribedEventCall(String eventName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cobrand/config/notifications/events/{eventName}"
            .replace("{" + "eventName" + "}", localVarApiClient.escapeString(eventName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSubscribedEventValidateBeforeCall(String eventName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventName' is set
        if (eventName == null) {
            throw new ApiException("Missing the required parameter 'eventName' when calling deleteSubscribedEvent(Async)");
        }

        return deleteSubscribedEventCall(eventName, _callback);

    }

    /**
     * Delete Subscription
     * &lt;b&gt;Refer DELETE /configs/notifications/events/{eventName}.&lt;/b&gt;&lt;br&gt;The delete events service is used to unsubscribe from an events service.&lt;br&gt;
     * @param eventName eventName (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y803 : eventName required </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteSubscribedEvent(String eventName) throws ApiException {
        deleteSubscribedEventWithHttpInfo(eventName);
    }

    /**
     * Delete Subscription
     * &lt;b&gt;Refer DELETE /configs/notifications/events/{eventName}.&lt;/b&gt;&lt;br&gt;The delete events service is used to unsubscribe from an events service.&lt;br&gt;
     * @param eventName eventName (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y803 : eventName required </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteSubscribedEventWithHttpInfo(String eventName) throws ApiException {
        okhttp3.Call localVarCall = deleteSubscribedEventValidateBeforeCall(eventName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Subscription (asynchronously)
     * &lt;b&gt;Refer DELETE /configs/notifications/events/{eventName}.&lt;/b&gt;&lt;br&gt;The delete events service is used to unsubscribe from an events service.&lt;br&gt;
     * @param eventName eventName (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y803 : eventName required </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteSubscribedEventAsync(String eventName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSubscribedEventValidateBeforeCall(eventName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPublicKey
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPublicKeyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cobrand/publicKey";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublicKeyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getPublicKeyCall(_callback);

    }

    /**
     * Get Public Key
     * &lt;b&gt;Refer GET /configs/publicKey.&lt;/b&gt;&lt;br&gt;The get public key service provides the customer the public key that should be used to encrypt the user credentials before sending it to Yodlee.&lt;br&gt;This endpoint is useful only for PKI enabled.&lt;br&gt;
     * @return CobrandPublicKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CobrandPublicKeyResponse getPublicKey() throws ApiException {
        ApiResponse<CobrandPublicKeyResponse> localVarResp = getPublicKeyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Public Key
     * &lt;b&gt;Refer GET /configs/publicKey.&lt;/b&gt;&lt;br&gt;The get public key service provides the customer the public key that should be used to encrypt the user credentials before sending it to Yodlee.&lt;br&gt;This endpoint is useful only for PKI enabled.&lt;br&gt;
     * @return ApiResponse&lt;CobrandPublicKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CobrandPublicKeyResponse> getPublicKeyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getPublicKeyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CobrandPublicKeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Public Key (asynchronously)
     * &lt;b&gt;Refer GET /configs/publicKey.&lt;/b&gt;&lt;br&gt;The get public key service provides the customer the public key that should be used to encrypt the user credentials before sending it to Yodlee.&lt;br&gt;This endpoint is useful only for PKI enabled.&lt;br&gt;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPublicKeyAsync(final ApiCallback<CobrandPublicKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublicKeyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CobrandPublicKeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSubscribedEvents
     * @param eventName eventName (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getSubscribedEventsCall(String eventName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cobrand/config/notifications/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eventName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventName", eventName));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubscribedEventsValidateBeforeCall(String eventName, final ApiCallback _callback) throws ApiException {
        return getSubscribedEventsCall(eventName, _callback);

    }

    /**
     * Get Subscribed Events
     * &lt;b&gt;Refer GET /configs/notifications/events.&lt;/b&gt;&lt;br&gt;The get events service provides the list of events for which consumers subscribed &lt;br&gt;to receive notifications. &lt;br&gt;
     * @param eventName eventName (optional)
     * @return CobrandNotificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CobrandNotificationResponse getSubscribedEvents(String eventName) throws ApiException {
        ApiResponse<CobrandNotificationResponse> localVarResp = getSubscribedEventsWithHttpInfo(eventName);
        return localVarResp.getData();
    }

    /**
     * Get Subscribed Events
     * &lt;b&gt;Refer GET /configs/notifications/events.&lt;/b&gt;&lt;br&gt;The get events service provides the list of events for which consumers subscribed &lt;br&gt;to receive notifications. &lt;br&gt;
     * @param eventName eventName (optional)
     * @return ApiResponse&lt;CobrandNotificationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CobrandNotificationResponse> getSubscribedEventsWithHttpInfo(String eventName) throws ApiException {
        okhttp3.Call localVarCall = getSubscribedEventsValidateBeforeCall(eventName, null);
        Type localVarReturnType = new TypeToken<CobrandNotificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Subscribed Events (asynchronously)
     * &lt;b&gt;Refer GET /configs/notifications/events.&lt;/b&gt;&lt;br&gt;The get events service provides the list of events for which consumers subscribed &lt;br&gt;to receive notifications. &lt;br&gt;
     * @param eventName eventName (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getSubscribedEventsAsync(String eventName, final ApiCallback<CobrandNotificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubscribedEventsValidateBeforeCall(eventName, _callback);
        Type localVarReturnType = new TypeToken<CobrandNotificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSubscribedEvent
     * @param eventName eventName (required)
     * @param updateCobrandNotificationEventRequest eventRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y803 : eventName required&lt;br&gt;Y803 : callbackUrl required&lt;br&gt;Y800 : Invalid value for callbackUrl </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateSubscribedEventCall(String eventName, UpdateCobrandNotificationEventRequest updateCobrandNotificationEventRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCobrandNotificationEventRequest;

        // create path and map variables
        String localVarPath = "/cobrand/config/notifications/events/{eventName}"
            .replace("{" + "eventName" + "}", localVarApiClient.escapeString(eventName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSubscribedEventValidateBeforeCall(String eventName, UpdateCobrandNotificationEventRequest updateCobrandNotificationEventRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventName' is set
        if (eventName == null) {
            throw new ApiException("Missing the required parameter 'eventName' when calling updateSubscribedEvent(Async)");
        }

        // verify the required parameter 'updateCobrandNotificationEventRequest' is set
        if (updateCobrandNotificationEventRequest == null) {
            throw new ApiException("Missing the required parameter 'updateCobrandNotificationEventRequest' when calling updateSubscribedEvent(Async)");
        }

        return updateSubscribedEventCall(eventName, updateCobrandNotificationEventRequest, _callback);

    }

    /**
     * Update Subscription
     * &lt;b&gt;Refer PUT /configs/notifications/events/{eventName}.&lt;/b&gt;&lt;br&gt;The update events service is used to update the callback URL.&lt;br&gt;If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; The content type has to be passed as application/json for the body parameter. &lt;br&gt;
     * @param eventName eventName (required)
     * @param updateCobrandNotificationEventRequest eventRequest (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y803 : eventName required&lt;br&gt;Y803 : callbackUrl required&lt;br&gt;Y800 : Invalid value for callbackUrl </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void updateSubscribedEvent(String eventName, UpdateCobrandNotificationEventRequest updateCobrandNotificationEventRequest) throws ApiException {
        updateSubscribedEventWithHttpInfo(eventName, updateCobrandNotificationEventRequest);
    }

    /**
     * Update Subscription
     * &lt;b&gt;Refer PUT /configs/notifications/events/{eventName}.&lt;/b&gt;&lt;br&gt;The update events service is used to update the callback URL.&lt;br&gt;If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; The content type has to be passed as application/json for the body parameter. &lt;br&gt;
     * @param eventName eventName (required)
     * @param updateCobrandNotificationEventRequest eventRequest (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y803 : eventName required&lt;br&gt;Y803 : callbackUrl required&lt;br&gt;Y800 : Invalid value for callbackUrl </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> updateSubscribedEventWithHttpInfo(String eventName, UpdateCobrandNotificationEventRequest updateCobrandNotificationEventRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSubscribedEventValidateBeforeCall(eventName, updateCobrandNotificationEventRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Subscription (asynchronously)
     * &lt;b&gt;Refer PUT /configs/notifications/events/{eventName}.&lt;/b&gt;&lt;br&gt;The update events service is used to update the callback URL.&lt;br&gt;If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; The content type has to be passed as application/json for the body parameter. &lt;br&gt;
     * @param eventName eventName (required)
     * @param updateCobrandNotificationEventRequest eventRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y803 : eventName required&lt;br&gt;Y803 : callbackUrl required&lt;br&gt;Y800 : Invalid value for callbackUrl </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateSubscribedEventAsync(String eventName, UpdateCobrandNotificationEventRequest updateCobrandNotificationEventRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSubscribedEventValidateBeforeCall(eventName, updateCobrandNotificationEventRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
