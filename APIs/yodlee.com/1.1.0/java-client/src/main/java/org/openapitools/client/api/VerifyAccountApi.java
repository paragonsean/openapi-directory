/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.VerifyAccountRequest;
import org.openapitools.client.model.VerifyAccountResponse;
import org.openapitools.client.model.YodleeError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VerifyAccountApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VerifyAccountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VerifyAccountApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for initiateAccountVerification
     * @param providerAccountId providerAccountId (required)
     * @param verifyAccountRequest verificationParam (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for container&lt;br&gt;Y800 : Invalid value for accountId&lt;br&gt;Y800 : Invalid value for amount&lt;br&gt;Y800 : Invalid value for dateVariance&lt;br&gt;Y801 : Invalid length for keyword&lt;br&gt;Y804 : Permitted values of dateVariance between 1 - 7&lt;br&gt;Y806 : Invalid input&lt;br&gt;Y807 : Resource not found&lt;br&gt;Y809 : Invalid date range&lt;br&gt;Y812 : Required field/value - transactionCriteria missing in the input&lt;br&gt;Y812 : Required field/value - amount missing in the transactionCriteria&lt;br&gt;Y812 : Required field/value - amount date in the transactionCriteria&lt;br&gt;Y812 : Required field/value - baseType missing in the transactionCriteria&lt;br&gt;Y823 : Transaction not applicable for container &lt;br&gt;Y824 : The maximum number of transactionCriteria permitted is 5&lt;br&gt;Y857 : Transactions are not refreshed in the past 24 hours&lt;br&gt;Y858 : Only active accounts can be verified&lt;br&gt;Y901 : Service not supported&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initiateAccountVerificationCall(String providerAccountId, VerifyAccountRequest verifyAccountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyAccountRequest;

        // create path and map variables
        String localVarPath = "/verifyAccount/{providerAccountId}"
            .replace("{" + "providerAccountId" + "}", localVarApiClient.escapeString(providerAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initiateAccountVerificationValidateBeforeCall(String providerAccountId, VerifyAccountRequest verifyAccountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'providerAccountId' is set
        if (providerAccountId == null) {
            throw new ApiException("Missing the required parameter 'providerAccountId' when calling initiateAccountVerification(Async)");
        }

        // verify the required parameter 'verifyAccountRequest' is set
        if (verifyAccountRequest == null) {
            throw new ApiException("Missing the required parameter 'verifyAccountRequest' when calling initiateAccountVerification(Async)");
        }

        return initiateAccountVerificationCall(providerAccountId, verifyAccountRequest, _callback);

    }

    /**
     * Verify Accounts Using Transactions
     * The verify account service is used to verify the account&#39;s ownership by  matching the transaction details with the accounts aggregated for the user.&lt;br&gt;&lt;ul&gt;&lt;li&gt;If a match is identified, the service returns details of all the accounts along with the matched transaction&#39;s details.&lt;li&gt;If no transaction match is found, an empty response will be returned.&lt;li&gt;A maximum of 5 transactionCriteria can be passed in a request.&lt;li&gt;The baseType, date, and amount parameters should mandatorily be passed.&lt;li&gt;The optional dateVariance parameter cannot be more than 7 days. For example, +7, -4, or +/-2.&lt;li&gt;Pass the container or accountId parameters for better performance.&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;&lt;/ul&gt;
     * @param providerAccountId providerAccountId (required)
     * @param verifyAccountRequest verificationParam (required)
     * @return VerifyAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for container&lt;br&gt;Y800 : Invalid value for accountId&lt;br&gt;Y800 : Invalid value for amount&lt;br&gt;Y800 : Invalid value for dateVariance&lt;br&gt;Y801 : Invalid length for keyword&lt;br&gt;Y804 : Permitted values of dateVariance between 1 - 7&lt;br&gt;Y806 : Invalid input&lt;br&gt;Y807 : Resource not found&lt;br&gt;Y809 : Invalid date range&lt;br&gt;Y812 : Required field/value - transactionCriteria missing in the input&lt;br&gt;Y812 : Required field/value - amount missing in the transactionCriteria&lt;br&gt;Y812 : Required field/value - amount date in the transactionCriteria&lt;br&gt;Y812 : Required field/value - baseType missing in the transactionCriteria&lt;br&gt;Y823 : Transaction not applicable for container &lt;br&gt;Y824 : The maximum number of transactionCriteria permitted is 5&lt;br&gt;Y857 : Transactions are not refreshed in the past 24 hours&lt;br&gt;Y858 : Only active accounts can be verified&lt;br&gt;Y901 : Service not supported&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public VerifyAccountResponse initiateAccountVerification(String providerAccountId, VerifyAccountRequest verifyAccountRequest) throws ApiException {
        ApiResponse<VerifyAccountResponse> localVarResp = initiateAccountVerificationWithHttpInfo(providerAccountId, verifyAccountRequest);
        return localVarResp.getData();
    }

    /**
     * Verify Accounts Using Transactions
     * The verify account service is used to verify the account&#39;s ownership by  matching the transaction details with the accounts aggregated for the user.&lt;br&gt;&lt;ul&gt;&lt;li&gt;If a match is identified, the service returns details of all the accounts along with the matched transaction&#39;s details.&lt;li&gt;If no transaction match is found, an empty response will be returned.&lt;li&gt;A maximum of 5 transactionCriteria can be passed in a request.&lt;li&gt;The baseType, date, and amount parameters should mandatorily be passed.&lt;li&gt;The optional dateVariance parameter cannot be more than 7 days. For example, +7, -4, or +/-2.&lt;li&gt;Pass the container or accountId parameters for better performance.&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;&lt;/ul&gt;
     * @param providerAccountId providerAccountId (required)
     * @param verifyAccountRequest verificationParam (required)
     * @return ApiResponse&lt;VerifyAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for container&lt;br&gt;Y800 : Invalid value for accountId&lt;br&gt;Y800 : Invalid value for amount&lt;br&gt;Y800 : Invalid value for dateVariance&lt;br&gt;Y801 : Invalid length for keyword&lt;br&gt;Y804 : Permitted values of dateVariance between 1 - 7&lt;br&gt;Y806 : Invalid input&lt;br&gt;Y807 : Resource not found&lt;br&gt;Y809 : Invalid date range&lt;br&gt;Y812 : Required field/value - transactionCriteria missing in the input&lt;br&gt;Y812 : Required field/value - amount missing in the transactionCriteria&lt;br&gt;Y812 : Required field/value - amount date in the transactionCriteria&lt;br&gt;Y812 : Required field/value - baseType missing in the transactionCriteria&lt;br&gt;Y823 : Transaction not applicable for container &lt;br&gt;Y824 : The maximum number of transactionCriteria permitted is 5&lt;br&gt;Y857 : Transactions are not refreshed in the past 24 hours&lt;br&gt;Y858 : Only active accounts can be verified&lt;br&gt;Y901 : Service not supported&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyAccountResponse> initiateAccountVerificationWithHttpInfo(String providerAccountId, VerifyAccountRequest verifyAccountRequest) throws ApiException {
        okhttp3.Call localVarCall = initiateAccountVerificationValidateBeforeCall(providerAccountId, verifyAccountRequest, null);
        Type localVarReturnType = new TypeToken<VerifyAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify Accounts Using Transactions (asynchronously)
     * The verify account service is used to verify the account&#39;s ownership by  matching the transaction details with the accounts aggregated for the user.&lt;br&gt;&lt;ul&gt;&lt;li&gt;If a match is identified, the service returns details of all the accounts along with the matched transaction&#39;s details.&lt;li&gt;If no transaction match is found, an empty response will be returned.&lt;li&gt;A maximum of 5 transactionCriteria can be passed in a request.&lt;li&gt;The baseType, date, and amount parameters should mandatorily be passed.&lt;li&gt;The optional dateVariance parameter cannot be more than 7 days. For example, +7, -4, or +/-2.&lt;li&gt;Pass the container or accountId parameters for better performance.&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;&lt;/ul&gt;
     * @param providerAccountId providerAccountId (required)
     * @param verifyAccountRequest verificationParam (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for container&lt;br&gt;Y800 : Invalid value for accountId&lt;br&gt;Y800 : Invalid value for amount&lt;br&gt;Y800 : Invalid value for dateVariance&lt;br&gt;Y801 : Invalid length for keyword&lt;br&gt;Y804 : Permitted values of dateVariance between 1 - 7&lt;br&gt;Y806 : Invalid input&lt;br&gt;Y807 : Resource not found&lt;br&gt;Y809 : Invalid date range&lt;br&gt;Y812 : Required field/value - transactionCriteria missing in the input&lt;br&gt;Y812 : Required field/value - amount missing in the transactionCriteria&lt;br&gt;Y812 : Required field/value - amount date in the transactionCriteria&lt;br&gt;Y812 : Required field/value - baseType missing in the transactionCriteria&lt;br&gt;Y823 : Transaction not applicable for container &lt;br&gt;Y824 : The maximum number of transactionCriteria permitted is 5&lt;br&gt;Y857 : Transactions are not refreshed in the past 24 hours&lt;br&gt;Y858 : Only active accounts can be verified&lt;br&gt;Y901 : Service not supported&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initiateAccountVerificationAsync(String providerAccountId, VerifyAccountRequest verifyAccountRequest, final ApiCallback<VerifyAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = initiateAccountVerificationValidateBeforeCall(providerAccountId, verifyAccountRequest, _callback);
        Type localVarReturnType = new TypeToken<VerifyAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
