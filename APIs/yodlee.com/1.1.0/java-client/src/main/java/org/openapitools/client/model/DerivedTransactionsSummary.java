/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DerivedCategorySummary;
import org.openapitools.client.model.DerivedTransactionsLinks;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DerivedTransactionsSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.041142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DerivedTransactionsSummary {
  public static final String SERIALIZED_NAME_CATEGORY_SUMMARY = "categorySummary";
  @SerializedName(SERIALIZED_NAME_CATEGORY_SUMMARY)
  private List<DerivedCategorySummary> categorySummary = new ArrayList<>();

  /**
   * Type of categories provided by transactions/categories service.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, bank, investment&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
   */
  @JsonAdapter(CategoryTypeEnum.Adapter.class)
  public enum CategoryTypeEnum {
    TRANSFER("TRANSFER"),
    
    DEFERRED_COMPENSATION("DEFERRED_COMPENSATION"),
    
    UNCATEGORIZE("UNCATEGORIZE"),
    
    INCOME("INCOME"),
    
    EXPENSE("EXPENSE");

    private String value;

    CategoryTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryTypeEnum fromValue(String value) {
      for (CategoryTypeEnum b : CategoryTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY_TYPE = "categoryType";
  @SerializedName(SERIALIZED_NAME_CATEGORY_TYPE)
  private CategoryTypeEnum categoryType;

  public static final String SERIALIZED_NAME_CREDIT_TOTAL = "creditTotal";
  @SerializedName(SERIALIZED_NAME_CREDIT_TOTAL)
  private Money creditTotal;

  public static final String SERIALIZED_NAME_DEBIT_TOTAL = "debitTotal";
  @SerializedName(SERIALIZED_NAME_DEBIT_TOTAL)
  private Money debitTotal;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private DerivedTransactionsLinks links;

  public DerivedTransactionsSummary() {
  }

  public DerivedTransactionsSummary(
     List<DerivedCategorySummary> categorySummary, 
     CategoryTypeEnum categoryType
  ) {
    this();
    this.categorySummary = categorySummary;
    this.categoryType = categoryType;
  }

  /**
   * Summary of transaction amouts at category level.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, bank, investment&lt;br&gt;
   * @return categorySummary
   */
  @javax.annotation.Nullable
  public List<DerivedCategorySummary> getCategorySummary() {
    return categorySummary;
  }



  /**
   * Type of categories provided by transactions/categories service.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, bank, investment&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
   * @return categoryType
   */
  @javax.annotation.Nullable
  public CategoryTypeEnum getCategoryType() {
    return categoryType;
  }



  public DerivedTransactionsSummary creditTotal(Money creditTotal) {
    this.creditTotal = creditTotal;
    return this;
  }

  /**
   * Get creditTotal
   * @return creditTotal
   */
  @javax.annotation.Nullable
  public Money getCreditTotal() {
    return creditTotal;
  }

  public void setCreditTotal(Money creditTotal) {
    this.creditTotal = creditTotal;
  }


  public DerivedTransactionsSummary debitTotal(Money debitTotal) {
    this.debitTotal = debitTotal;
    return this;
  }

  /**
   * Get debitTotal
   * @return debitTotal
   */
  @javax.annotation.Nullable
  public Money getDebitTotal() {
    return debitTotal;
  }

  public void setDebitTotal(Money debitTotal) {
    this.debitTotal = debitTotal;
  }


  public DerivedTransactionsSummary links(DerivedTransactionsLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public DerivedTransactionsLinks getLinks() {
    return links;
  }

  public void setLinks(DerivedTransactionsLinks links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DerivedTransactionsSummary derivedTransactionsSummary = (DerivedTransactionsSummary) o;
    return Objects.equals(this.categorySummary, derivedTransactionsSummary.categorySummary) &&
        Objects.equals(this.categoryType, derivedTransactionsSummary.categoryType) &&
        Objects.equals(this.creditTotal, derivedTransactionsSummary.creditTotal) &&
        Objects.equals(this.debitTotal, derivedTransactionsSummary.debitTotal) &&
        Objects.equals(this.links, derivedTransactionsSummary.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categorySummary, categoryType, creditTotal, debitTotal, links);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DerivedTransactionsSummary {\n");
    sb.append("    categorySummary: ").append(toIndentedString(categorySummary)).append("\n");
    sb.append("    categoryType: ").append(toIndentedString(categoryType)).append("\n");
    sb.append("    creditTotal: ").append(toIndentedString(creditTotal)).append("\n");
    sb.append("    debitTotal: ").append(toIndentedString(debitTotal)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categorySummary");
    openapiFields.add("categoryType");
    openapiFields.add("creditTotal");
    openapiFields.add("debitTotal");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DerivedTransactionsSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DerivedTransactionsSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DerivedTransactionsSummary is not found in the empty JSON string", DerivedTransactionsSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DerivedTransactionsSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DerivedTransactionsSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("categorySummary") != null && !jsonObj.get("categorySummary").isJsonNull()) {
        JsonArray jsonArraycategorySummary = jsonObj.getAsJsonArray("categorySummary");
        if (jsonArraycategorySummary != null) {
          // ensure the json data is an array
          if (!jsonObj.get("categorySummary").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `categorySummary` to be an array in the JSON string but got `%s`", jsonObj.get("categorySummary").toString()));
          }

          // validate the optional field `categorySummary` (array)
          for (int i = 0; i < jsonArraycategorySummary.size(); i++) {
            DerivedCategorySummary.validateJsonElement(jsonArraycategorySummary.get(i));
          };
        }
      }
      if ((jsonObj.get("categoryType") != null && !jsonObj.get("categoryType").isJsonNull()) && !jsonObj.get("categoryType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryType").toString()));
      }
      // validate the optional field `categoryType`
      if (jsonObj.get("categoryType") != null && !jsonObj.get("categoryType").isJsonNull()) {
        CategoryTypeEnum.validateJsonElement(jsonObj.get("categoryType"));
      }
      // validate the optional field `creditTotal`
      if (jsonObj.get("creditTotal") != null && !jsonObj.get("creditTotal").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("creditTotal"));
      }
      // validate the optional field `debitTotal`
      if (jsonObj.get("debitTotal") != null && !jsonObj.get("debitTotal").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("debitTotal"));
      }
      // validate the optional field `links`
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        DerivedTransactionsLinks.validateJsonElement(jsonObj.get("links"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DerivedTransactionsSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DerivedTransactionsSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DerivedTransactionsSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DerivedTransactionsSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<DerivedTransactionsSummary>() {
           @Override
           public void write(JsonWriter out, DerivedTransactionsSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DerivedTransactionsSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DerivedTransactionsSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DerivedTransactionsSummary
   * @throws IOException if the JSON string is invalid with respect to DerivedTransactionsSummary
   */
  public static DerivedTransactionsSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DerivedTransactionsSummary.class);
  }

  /**
   * Convert an instance of DerivedTransactionsSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

