/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TransactionDays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContainerAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.041142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContainerAttributes {
  public static final String SERIALIZED_NAME_B_A_N_K = "BANK";
  @SerializedName(SERIALIZED_NAME_B_A_N_K)
  private TransactionDays BANK;

  public static final String SERIALIZED_NAME_C_R_E_D_I_T_C_A_R_D = "CREDITCARD";
  @SerializedName(SERIALIZED_NAME_C_R_E_D_I_T_C_A_R_D)
  private TransactionDays CREDITCARD;

  public static final String SERIALIZED_NAME_I_N_S_U_R_A_N_C_E = "INSURANCE";
  @SerializedName(SERIALIZED_NAME_I_N_S_U_R_A_N_C_E)
  private TransactionDays INSURANCE;

  public static final String SERIALIZED_NAME_I_N_V_E_S_T_M_E_N_T = "INVESTMENT";
  @SerializedName(SERIALIZED_NAME_I_N_V_E_S_T_M_E_N_T)
  private TransactionDays INVESTMENT;

  public static final String SERIALIZED_NAME_L_O_A_N = "LOAN";
  @SerializedName(SERIALIZED_NAME_L_O_A_N)
  private TransactionDays LOAN;

  public ContainerAttributes() {
  }

  public ContainerAttributes BANK(TransactionDays BANK) {
    this.BANK = BANK;
    return this;
  }

  /**
   * Get BANK
   * @return BANK
   */
  @javax.annotation.Nullable
  public TransactionDays getBANK() {
    return BANK;
  }

  public void setBANK(TransactionDays BANK) {
    this.BANK = BANK;
  }


  public ContainerAttributes CREDITCARD(TransactionDays CREDITCARD) {
    this.CREDITCARD = CREDITCARD;
    return this;
  }

  /**
   * Get CREDITCARD
   * @return CREDITCARD
   */
  @javax.annotation.Nullable
  public TransactionDays getCREDITCARD() {
    return CREDITCARD;
  }

  public void setCREDITCARD(TransactionDays CREDITCARD) {
    this.CREDITCARD = CREDITCARD;
  }


  public ContainerAttributes INSURANCE(TransactionDays INSURANCE) {
    this.INSURANCE = INSURANCE;
    return this;
  }

  /**
   * Get INSURANCE
   * @return INSURANCE
   */
  @javax.annotation.Nullable
  public TransactionDays getINSURANCE() {
    return INSURANCE;
  }

  public void setINSURANCE(TransactionDays INSURANCE) {
    this.INSURANCE = INSURANCE;
  }


  public ContainerAttributes INVESTMENT(TransactionDays INVESTMENT) {
    this.INVESTMENT = INVESTMENT;
    return this;
  }

  /**
   * Get INVESTMENT
   * @return INVESTMENT
   */
  @javax.annotation.Nullable
  public TransactionDays getINVESTMENT() {
    return INVESTMENT;
  }

  public void setINVESTMENT(TransactionDays INVESTMENT) {
    this.INVESTMENT = INVESTMENT;
  }


  public ContainerAttributes LOAN(TransactionDays LOAN) {
    this.LOAN = LOAN;
    return this;
  }

  /**
   * Get LOAN
   * @return LOAN
   */
  @javax.annotation.Nullable
  public TransactionDays getLOAN() {
    return LOAN;
  }

  public void setLOAN(TransactionDays LOAN) {
    this.LOAN = LOAN;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerAttributes containerAttributes = (ContainerAttributes) o;
    return Objects.equals(this.BANK, containerAttributes.BANK) &&
        Objects.equals(this.CREDITCARD, containerAttributes.CREDITCARD) &&
        Objects.equals(this.INSURANCE, containerAttributes.INSURANCE) &&
        Objects.equals(this.INVESTMENT, containerAttributes.INVESTMENT) &&
        Objects.equals(this.LOAN, containerAttributes.LOAN);
  }

  @Override
  public int hashCode() {
    return Objects.hash(BANK, CREDITCARD, INSURANCE, INVESTMENT, LOAN);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerAttributes {\n");
    sb.append("    BANK: ").append(toIndentedString(BANK)).append("\n");
    sb.append("    CREDITCARD: ").append(toIndentedString(CREDITCARD)).append("\n");
    sb.append("    INSURANCE: ").append(toIndentedString(INSURANCE)).append("\n");
    sb.append("    INVESTMENT: ").append(toIndentedString(INVESTMENT)).append("\n");
    sb.append("    LOAN: ").append(toIndentedString(LOAN)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BANK");
    openapiFields.add("CREDITCARD");
    openapiFields.add("INSURANCE");
    openapiFields.add("INVESTMENT");
    openapiFields.add("LOAN");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContainerAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContainerAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContainerAttributes is not found in the empty JSON string", ContainerAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContainerAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContainerAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BANK`
      if (jsonObj.get("BANK") != null && !jsonObj.get("BANK").isJsonNull()) {
        TransactionDays.validateJsonElement(jsonObj.get("BANK"));
      }
      // validate the optional field `CREDITCARD`
      if (jsonObj.get("CREDITCARD") != null && !jsonObj.get("CREDITCARD").isJsonNull()) {
        TransactionDays.validateJsonElement(jsonObj.get("CREDITCARD"));
      }
      // validate the optional field `INSURANCE`
      if (jsonObj.get("INSURANCE") != null && !jsonObj.get("INSURANCE").isJsonNull()) {
        TransactionDays.validateJsonElement(jsonObj.get("INSURANCE"));
      }
      // validate the optional field `INVESTMENT`
      if (jsonObj.get("INVESTMENT") != null && !jsonObj.get("INVESTMENT").isJsonNull()) {
        TransactionDays.validateJsonElement(jsonObj.get("INVESTMENT"));
      }
      // validate the optional field `LOAN`
      if (jsonObj.get("LOAN") != null && !jsonObj.get("LOAN").isJsonNull()) {
        TransactionDays.validateJsonElement(jsonObj.get("LOAN"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContainerAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContainerAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContainerAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContainerAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<ContainerAttributes>() {
           @Override
           public void write(JsonWriter out, ContainerAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContainerAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContainerAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContainerAttributes
   * @throws IOException if the JSON string is invalid with respect to ContainerAttributes
   */
  public static ContainerAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContainerAttributes.class);
  }

  /**
   * Convert an instance of ContainerAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

