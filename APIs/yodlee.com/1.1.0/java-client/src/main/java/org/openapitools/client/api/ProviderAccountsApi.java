/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ProviderAccountDetailResponse;
import org.openapitools.client.model.ProviderAccountPreferencesRequest;
import org.openapitools.client.model.ProviderAccountRequest;
import org.openapitools.client.model.ProviderAccountResponse;
import org.openapitools.client.model.ProviderAccountUserProfileResponse;
import org.openapitools.client.model.UpdatedProviderAccountResponse;
import org.openapitools.client.model.YodleeError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProviderAccountsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProviderAccountsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProviderAccountsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteProviderAccount
     * @param providerAccountId providerAccountId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for providerAccountId&lt;br&gt;Y868 : No action is allowed, as the data is being migrated to the Open Banking provider&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProviderAccountCall(Long providerAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providerAccounts/{providerAccountId}"
            .replace("{" + "providerAccountId" + "}", localVarApiClient.escapeString(providerAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProviderAccountValidateBeforeCall(Long providerAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'providerAccountId' is set
        if (providerAccountId == null) {
            throw new ApiException("Missing the required parameter 'providerAccountId' when calling deleteProviderAccount(Async)");
        }

        return deleteProviderAccountCall(providerAccountId, _callback);

    }

    /**
     * Delete Provider Account
     * The delete provider account service is used to delete a provider account from the Yodlee system. This service also deletes the accounts that are created in the Yodlee system for that provider account. &lt;br&gt;This service does not return a response. The HTTP response code is 204 (Success with no content).&lt;br&gt;
     * @param providerAccountId providerAccountId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for providerAccountId&lt;br&gt;Y868 : No action is allowed, as the data is being migrated to the Open Banking provider&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProviderAccount(Long providerAccountId) throws ApiException {
        deleteProviderAccountWithHttpInfo(providerAccountId);
    }

    /**
     * Delete Provider Account
     * The delete provider account service is used to delete a provider account from the Yodlee system. This service also deletes the accounts that are created in the Yodlee system for that provider account. &lt;br&gt;This service does not return a response. The HTTP response code is 204 (Success with no content).&lt;br&gt;
     * @param providerAccountId providerAccountId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for providerAccountId&lt;br&gt;Y868 : No action is allowed, as the data is being migrated to the Open Banking provider&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProviderAccountWithHttpInfo(Long providerAccountId) throws ApiException {
        okhttp3.Call localVarCall = deleteProviderAccountValidateBeforeCall(providerAccountId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Provider Account (asynchronously)
     * The delete provider account service is used to delete a provider account from the Yodlee system. This service also deletes the accounts that are created in the Yodlee system for that provider account. &lt;br&gt;This service does not return a response. The HTTP response code is 204 (Success with no content).&lt;br&gt;
     * @param providerAccountId providerAccountId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for providerAccountId&lt;br&gt;Y868 : No action is allowed, as the data is being migrated to the Open Banking provider&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProviderAccountAsync(Long providerAccountId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProviderAccountValidateBeforeCall(providerAccountId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for editCredentialsOrRefreshProviderAccount
     * @param providerAccountIds comma separated providerAccountIds (required)
     * @param providerAccountRequest loginForm or field entity (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y805 : Multiple providerAccountId not supported for updating credentials&lt;br&gt;Y800 : Invalid value for credentialsParam&lt;br&gt;Y400 : id and value in credentialsParam are mandatory&lt;br&gt;Y806 : Invalid input&lt;br&gt;Y823 : Credentials are not applicable for real estate aggregated / manual accounts&lt;br&gt;Y868 : No action is allowed, as the data is being migrated to the Open Banking provider&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editCredentialsOrRefreshProviderAccountCall(String providerAccountIds, ProviderAccountRequest providerAccountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = providerAccountRequest;

        // create path and map variables
        String localVarPath = "/providerAccounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (providerAccountIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("providerAccountIds", providerAccountIds));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editCredentialsOrRefreshProviderAccountValidateBeforeCall(String providerAccountIds, ProviderAccountRequest providerAccountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'providerAccountIds' is set
        if (providerAccountIds == null) {
            throw new ApiException("Missing the required parameter 'providerAccountIds' when calling editCredentialsOrRefreshProviderAccount(Async)");
        }

        return editCredentialsOrRefreshProviderAccountCall(providerAccountIds, providerAccountRequest, _callback);

    }

    /**
     * Update Account
     * The update account API is used to:&lt;br&gt; &lt;ul&gt;&lt;li&gt;Retrieve the latest information for accounts that belong to one providerAccount from the provider site. You must allow at least 15 min between requests.&lt;li&gt;Retrieve the latest information of all the eligible accounts that belong to the user.&lt;li&gt;Data to be retrieved from the provider site can be overridden using datasetName or dataset. If you do pass datasetName, all the datasets that are implicitly configured for the dataset will be retrieved. This action is allowed for single provider account refresh flows only.&lt;li&gt;Check the status of the providerAccount before invoking this API. Do not call this API to trigger any action on a providerAccount when an action is already in progress for the providerAccount.&lt;li&gt;If the customer has subscribed to the REFRESH event notification and invoked this API, relevant notifications will be sent to the customer.&lt;li&gt;A dataset may depend on another dataset for retrieval, so the response will include the requested and dependent datasets.&lt;li&gt;Check all the dataset additional statuses returned in the response because the provider account status is drawn from the dataset additional statuses.&lt;li&gt;Updating preferences using this API will trigger refreshes.&lt;li&gt; The content type has to be passed as application/json for the body parameter.&lt;/ul&gt;&lt;br&gt;-----------------------------------------------------------------------------------------------------------------------------------------&lt;br&gt;&lt;br&gt;&lt;b&gt;Update All Eligible Accounts - Notes:&lt;/b&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;This API will trigger a refresh for all the eligible provider accounts(both OB and credential-based accounts).&lt;li&gt;This API will not refresh closed, inactive, or UAR accounts, or accounts with refreshes in-progress or recently refreshed non-OB accounts.&lt;li&gt;No parameters should be passed to this API to trigger this action.&lt;li&gt;Do not call this API often. Our recommendation is to call this only at the time the user logs in to your app because it can hamper other API calls performance.&lt;li&gt;The response only contains information for accounts that were refreshed. If no accounts are eligible for refresh, no response is returned.&lt;/ul&gt;
     * @param providerAccountIds comma separated providerAccountIds (required)
     * @param providerAccountRequest loginForm or field entity (optional)
     * @return UpdatedProviderAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y805 : Multiple providerAccountId not supported for updating credentials&lt;br&gt;Y800 : Invalid value for credentialsParam&lt;br&gt;Y400 : id and value in credentialsParam are mandatory&lt;br&gt;Y806 : Invalid input&lt;br&gt;Y823 : Credentials are not applicable for real estate aggregated / manual accounts&lt;br&gt;Y868 : No action is allowed, as the data is being migrated to the Open Banking provider&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public UpdatedProviderAccountResponse editCredentialsOrRefreshProviderAccount(String providerAccountIds, ProviderAccountRequest providerAccountRequest) throws ApiException {
        ApiResponse<UpdatedProviderAccountResponse> localVarResp = editCredentialsOrRefreshProviderAccountWithHttpInfo(providerAccountIds, providerAccountRequest);
        return localVarResp.getData();
    }

    /**
     * Update Account
     * The update account API is used to:&lt;br&gt; &lt;ul&gt;&lt;li&gt;Retrieve the latest information for accounts that belong to one providerAccount from the provider site. You must allow at least 15 min between requests.&lt;li&gt;Retrieve the latest information of all the eligible accounts that belong to the user.&lt;li&gt;Data to be retrieved from the provider site can be overridden using datasetName or dataset. If you do pass datasetName, all the datasets that are implicitly configured for the dataset will be retrieved. This action is allowed for single provider account refresh flows only.&lt;li&gt;Check the status of the providerAccount before invoking this API. Do not call this API to trigger any action on a providerAccount when an action is already in progress for the providerAccount.&lt;li&gt;If the customer has subscribed to the REFRESH event notification and invoked this API, relevant notifications will be sent to the customer.&lt;li&gt;A dataset may depend on another dataset for retrieval, so the response will include the requested and dependent datasets.&lt;li&gt;Check all the dataset additional statuses returned in the response because the provider account status is drawn from the dataset additional statuses.&lt;li&gt;Updating preferences using this API will trigger refreshes.&lt;li&gt; The content type has to be passed as application/json for the body parameter.&lt;/ul&gt;&lt;br&gt;-----------------------------------------------------------------------------------------------------------------------------------------&lt;br&gt;&lt;br&gt;&lt;b&gt;Update All Eligible Accounts - Notes:&lt;/b&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;This API will trigger a refresh for all the eligible provider accounts(both OB and credential-based accounts).&lt;li&gt;This API will not refresh closed, inactive, or UAR accounts, or accounts with refreshes in-progress or recently refreshed non-OB accounts.&lt;li&gt;No parameters should be passed to this API to trigger this action.&lt;li&gt;Do not call this API often. Our recommendation is to call this only at the time the user logs in to your app because it can hamper other API calls performance.&lt;li&gt;The response only contains information for accounts that were refreshed. If no accounts are eligible for refresh, no response is returned.&lt;/ul&gt;
     * @param providerAccountIds comma separated providerAccountIds (required)
     * @param providerAccountRequest loginForm or field entity (optional)
     * @return ApiResponse&lt;UpdatedProviderAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y805 : Multiple providerAccountId not supported for updating credentials&lt;br&gt;Y800 : Invalid value for credentialsParam&lt;br&gt;Y400 : id and value in credentialsParam are mandatory&lt;br&gt;Y806 : Invalid input&lt;br&gt;Y823 : Credentials are not applicable for real estate aggregated / manual accounts&lt;br&gt;Y868 : No action is allowed, as the data is being migrated to the Open Banking provider&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdatedProviderAccountResponse> editCredentialsOrRefreshProviderAccountWithHttpInfo(String providerAccountIds, ProviderAccountRequest providerAccountRequest) throws ApiException {
        okhttp3.Call localVarCall = editCredentialsOrRefreshProviderAccountValidateBeforeCall(providerAccountIds, providerAccountRequest, null);
        Type localVarReturnType = new TypeToken<UpdatedProviderAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Account (asynchronously)
     * The update account API is used to:&lt;br&gt; &lt;ul&gt;&lt;li&gt;Retrieve the latest information for accounts that belong to one providerAccount from the provider site. You must allow at least 15 min between requests.&lt;li&gt;Retrieve the latest information of all the eligible accounts that belong to the user.&lt;li&gt;Data to be retrieved from the provider site can be overridden using datasetName or dataset. If you do pass datasetName, all the datasets that are implicitly configured for the dataset will be retrieved. This action is allowed for single provider account refresh flows only.&lt;li&gt;Check the status of the providerAccount before invoking this API. Do not call this API to trigger any action on a providerAccount when an action is already in progress for the providerAccount.&lt;li&gt;If the customer has subscribed to the REFRESH event notification and invoked this API, relevant notifications will be sent to the customer.&lt;li&gt;A dataset may depend on another dataset for retrieval, so the response will include the requested and dependent datasets.&lt;li&gt;Check all the dataset additional statuses returned in the response because the provider account status is drawn from the dataset additional statuses.&lt;li&gt;Updating preferences using this API will trigger refreshes.&lt;li&gt; The content type has to be passed as application/json for the body parameter.&lt;/ul&gt;&lt;br&gt;-----------------------------------------------------------------------------------------------------------------------------------------&lt;br&gt;&lt;br&gt;&lt;b&gt;Update All Eligible Accounts - Notes:&lt;/b&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;This API will trigger a refresh for all the eligible provider accounts(both OB and credential-based accounts).&lt;li&gt;This API will not refresh closed, inactive, or UAR accounts, or accounts with refreshes in-progress or recently refreshed non-OB accounts.&lt;li&gt;No parameters should be passed to this API to trigger this action.&lt;li&gt;Do not call this API often. Our recommendation is to call this only at the time the user logs in to your app because it can hamper other API calls performance.&lt;li&gt;The response only contains information for accounts that were refreshed. If no accounts are eligible for refresh, no response is returned.&lt;/ul&gt;
     * @param providerAccountIds comma separated providerAccountIds (required)
     * @param providerAccountRequest loginForm or field entity (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y805 : Multiple providerAccountId not supported for updating credentials&lt;br&gt;Y800 : Invalid value for credentialsParam&lt;br&gt;Y400 : id and value in credentialsParam are mandatory&lt;br&gt;Y806 : Invalid input&lt;br&gt;Y823 : Credentials are not applicable for real estate aggregated / manual accounts&lt;br&gt;Y868 : No action is allowed, as the data is being migrated to the Open Banking provider&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editCredentialsOrRefreshProviderAccountAsync(String providerAccountIds, ProviderAccountRequest providerAccountRequest, final ApiCallback<UpdatedProviderAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = editCredentialsOrRefreshProviderAccountValidateBeforeCall(providerAccountIds, providerAccountRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdatedProviderAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllProviderAccounts
     * @param include include (optional)
     * @param providerIds Comma separated providerIds. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllProviderAccountsCall(String include, String providerIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providerAccounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        if (providerIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("providerIds", providerIds));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllProviderAccountsValidateBeforeCall(String include, String providerIds, final ApiCallback _callback) throws ApiException {
        return getAllProviderAccountsCall(include, providerIds, _callback);

    }

    /**
     * Get Provider Accounts
     * The get provider accounts service is used to return all the provider accounts added by the user. &lt;br&gt;This includes the failed and successfully added provider accounts.&lt;br&gt;
     * @param include include (optional)
     * @param providerIds Comma separated providerIds. (optional)
     * @return ProviderAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProviderAccountResponse getAllProviderAccounts(String include, String providerIds) throws ApiException {
        ApiResponse<ProviderAccountResponse> localVarResp = getAllProviderAccountsWithHttpInfo(include, providerIds);
        return localVarResp.getData();
    }

    /**
     * Get Provider Accounts
     * The get provider accounts service is used to return all the provider accounts added by the user. &lt;br&gt;This includes the failed and successfully added provider accounts.&lt;br&gt;
     * @param include include (optional)
     * @param providerIds Comma separated providerIds. (optional)
     * @return ApiResponse&lt;ProviderAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProviderAccountResponse> getAllProviderAccountsWithHttpInfo(String include, String providerIds) throws ApiException {
        okhttp3.Call localVarCall = getAllProviderAccountsValidateBeforeCall(include, providerIds, null);
        Type localVarReturnType = new TypeToken<ProviderAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Provider Accounts (asynchronously)
     * The get provider accounts service is used to return all the provider accounts added by the user. &lt;br&gt;This includes the failed and successfully added provider accounts.&lt;br&gt;
     * @param include include (optional)
     * @param providerIds Comma separated providerIds. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllProviderAccountsAsync(String include, String providerIds, final ApiCallback<ProviderAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllProviderAccountsValidateBeforeCall(include, providerIds, _callback);
        Type localVarReturnType = new TypeToken<ProviderAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProviderAccount
     * @param providerAccountId providerAccountId (required)
     * @param include include credentials,questions (optional)
     * @param requestId The unique identifier for the request that returns contextual data (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for providerAccountId&lt;br&gt;Y816 : questions can only be requested for questionAndAnswer Supported Sites </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProviderAccountCall(Long providerAccountId, String include, String requestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providerAccounts/{providerAccountId}"
            .replace("{" + "providerAccountId" + "}", localVarApiClient.escapeString(providerAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        if (requestId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("requestId", requestId));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProviderAccountValidateBeforeCall(Long providerAccountId, String include, String requestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'providerAccountId' is set
        if (providerAccountId == null) {
            throw new ApiException("Missing the required parameter 'providerAccountId' when calling getProviderAccount(Async)");
        }

        return getProviderAccountCall(providerAccountId, include, requestId, _callback);

    }

    /**
     * Get Provider Account Details
     * The get provider account details service is used to learn the status of adding accounts and updating accounts.&lt;br&gt;This service has to be called continuously to know the progress level of the triggered process. This service also provides the MFA information requested by the provider site.&lt;br&gt;When &lt;i&gt;include &#x3D; credentials&lt;/i&gt;, questions is passed as input, the service returns the credentials (non-password values) and questions stored in the Yodlee system for that provider account. &lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;The password and answer fields are not returned in the response.&lt;/li&gt;
     * @param providerAccountId providerAccountId (required)
     * @param include include credentials,questions (optional)
     * @param requestId The unique identifier for the request that returns contextual data (optional)
     * @return ProviderAccountDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for providerAccountId&lt;br&gt;Y816 : questions can only be requested for questionAndAnswer Supported Sites </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProviderAccountDetailResponse getProviderAccount(Long providerAccountId, String include, String requestId) throws ApiException {
        ApiResponse<ProviderAccountDetailResponse> localVarResp = getProviderAccountWithHttpInfo(providerAccountId, include, requestId);
        return localVarResp.getData();
    }

    /**
     * Get Provider Account Details
     * The get provider account details service is used to learn the status of adding accounts and updating accounts.&lt;br&gt;This service has to be called continuously to know the progress level of the triggered process. This service also provides the MFA information requested by the provider site.&lt;br&gt;When &lt;i&gt;include &#x3D; credentials&lt;/i&gt;, questions is passed as input, the service returns the credentials (non-password values) and questions stored in the Yodlee system for that provider account. &lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;The password and answer fields are not returned in the response.&lt;/li&gt;
     * @param providerAccountId providerAccountId (required)
     * @param include include credentials,questions (optional)
     * @param requestId The unique identifier for the request that returns contextual data (optional)
     * @return ApiResponse&lt;ProviderAccountDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for providerAccountId&lt;br&gt;Y816 : questions can only be requested for questionAndAnswer Supported Sites </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProviderAccountDetailResponse> getProviderAccountWithHttpInfo(Long providerAccountId, String include, String requestId) throws ApiException {
        okhttp3.Call localVarCall = getProviderAccountValidateBeforeCall(providerAccountId, include, requestId, null);
        Type localVarReturnType = new TypeToken<ProviderAccountDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Provider Account Details (asynchronously)
     * The get provider account details service is used to learn the status of adding accounts and updating accounts.&lt;br&gt;This service has to be called continuously to know the progress level of the triggered process. This service also provides the MFA information requested by the provider site.&lt;br&gt;When &lt;i&gt;include &#x3D; credentials&lt;/i&gt;, questions is passed as input, the service returns the credentials (non-password values) and questions stored in the Yodlee system for that provider account. &lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;The password and answer fields are not returned in the response.&lt;/li&gt;
     * @param providerAccountId providerAccountId (required)
     * @param include include credentials,questions (optional)
     * @param requestId The unique identifier for the request that returns contextual data (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for providerAccountId&lt;br&gt;Y816 : questions can only be requested for questionAndAnswer Supported Sites </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProviderAccountAsync(Long providerAccountId, String include, String requestId, final ApiCallback<ProviderAccountDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProviderAccountValidateBeforeCall(providerAccountId, include, requestId, _callback);
        Type localVarReturnType = new TypeToken<ProviderAccountDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProviderAccountProfiles
     * @param providerAccountId Comma separated providerAccountIds. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProviderAccountProfilesCall(String providerAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providerAccounts/profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (providerAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("providerAccountId", providerAccountId));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProviderAccountProfilesValidateBeforeCall(String providerAccountId, final ApiCallback _callback) throws ApiException {
        return getProviderAccountProfilesCall(providerAccountId, _callback);

    }

    /**
     * Get User Profile Details
     * The get provider accounts profile service is used to return the user profile details that are associated to the provider account. &lt;br&gt;
     * @param providerAccountId Comma separated providerAccountIds. (optional)
     * @return ProviderAccountUserProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProviderAccountUserProfileResponse getProviderAccountProfiles(String providerAccountId) throws ApiException {
        ApiResponse<ProviderAccountUserProfileResponse> localVarResp = getProviderAccountProfilesWithHttpInfo(providerAccountId);
        return localVarResp.getData();
    }

    /**
     * Get User Profile Details
     * The get provider accounts profile service is used to return the user profile details that are associated to the provider account. &lt;br&gt;
     * @param providerAccountId Comma separated providerAccountIds. (optional)
     * @return ApiResponse&lt;ProviderAccountUserProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProviderAccountUserProfileResponse> getProviderAccountProfilesWithHttpInfo(String providerAccountId) throws ApiException {
        okhttp3.Call localVarCall = getProviderAccountProfilesValidateBeforeCall(providerAccountId, null);
        Type localVarReturnType = new TypeToken<ProviderAccountUserProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User Profile Details (asynchronously)
     * The get provider accounts profile service is used to return the user profile details that are associated to the provider account. &lt;br&gt;
     * @param providerAccountId Comma separated providerAccountIds. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProviderAccountProfilesAsync(String providerAccountId, final ApiCallback<ProviderAccountUserProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProviderAccountProfilesValidateBeforeCall(providerAccountId, _callback);
        Type localVarReturnType = new TypeToken<ProviderAccountUserProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePreferences
     * @param providerAccountId providerAccountId (required)
     * @param providerAccountPreferencesRequest preferences (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for preferences&lt;br&gt;Y800 : Invalid value for preferences.isDataExtractsEnabled&lt;br&gt;Y800 : Invalid value for preferences.isAutoRefreshEnabled&lt;br&gt;Y807 : Resource not found&lt;br&gt;Y830 : Data extracts feature has to be enabled to set preferences.isDataExtractsEnabled as true&lt;br&gt;Y830 : Auto refresh feature has to be enabled to set preferences.isAutoRefreshEnabled as true&lt;br&gt;Y868 : No action is allowed, as the data is being migrated to the Open Banking provider&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePreferencesCall(Long providerAccountId, ProviderAccountPreferencesRequest providerAccountPreferencesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = providerAccountPreferencesRequest;

        // create path and map variables
        String localVarPath = "/providerAccounts/{providerAccountId}/preferences"
            .replace("{" + "providerAccountId" + "}", localVarApiClient.escapeString(providerAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePreferencesValidateBeforeCall(Long providerAccountId, ProviderAccountPreferencesRequest providerAccountPreferencesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'providerAccountId' is set
        if (providerAccountId == null) {
            throw new ApiException("Missing the required parameter 'providerAccountId' when calling updatePreferences(Async)");
        }

        // verify the required parameter 'providerAccountPreferencesRequest' is set
        if (providerAccountPreferencesRequest == null) {
            throw new ApiException("Missing the required parameter 'providerAccountPreferencesRequest' when calling updatePreferences(Async)");
        }

        return updatePreferencesCall(providerAccountId, providerAccountPreferencesRequest, _callback);

    }

    /**
     * Update Preferences
     * This endpoint is used to update preferences like data extracts and auto refreshes without triggering refresh for the providerAccount.&lt;br&gt;Setting isDataExtractsEnabled to false will not trigger data extracts notification and dataExtracts/events will not reflect any data change that is happening for the providerAccount.&lt;br&gt;Modified data will not be provided in the dataExtracts/userData endpoint.&lt;br&gt;Setting isAutoRefreshEnabled to false will not trigger auto refreshes for the provider account.&lt;br&gt;
     * @param providerAccountId providerAccountId (required)
     * @param providerAccountPreferencesRequest preferences (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for preferences&lt;br&gt;Y800 : Invalid value for preferences.isDataExtractsEnabled&lt;br&gt;Y800 : Invalid value for preferences.isAutoRefreshEnabled&lt;br&gt;Y807 : Resource not found&lt;br&gt;Y830 : Data extracts feature has to be enabled to set preferences.isDataExtractsEnabled as true&lt;br&gt;Y830 : Auto refresh feature has to be enabled to set preferences.isAutoRefreshEnabled as true&lt;br&gt;Y868 : No action is allowed, as the data is being migrated to the Open Banking provider&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void updatePreferences(Long providerAccountId, ProviderAccountPreferencesRequest providerAccountPreferencesRequest) throws ApiException {
        updatePreferencesWithHttpInfo(providerAccountId, providerAccountPreferencesRequest);
    }

    /**
     * Update Preferences
     * This endpoint is used to update preferences like data extracts and auto refreshes without triggering refresh for the providerAccount.&lt;br&gt;Setting isDataExtractsEnabled to false will not trigger data extracts notification and dataExtracts/events will not reflect any data change that is happening for the providerAccount.&lt;br&gt;Modified data will not be provided in the dataExtracts/userData endpoint.&lt;br&gt;Setting isAutoRefreshEnabled to false will not trigger auto refreshes for the provider account.&lt;br&gt;
     * @param providerAccountId providerAccountId (required)
     * @param providerAccountPreferencesRequest preferences (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for preferences&lt;br&gt;Y800 : Invalid value for preferences.isDataExtractsEnabled&lt;br&gt;Y800 : Invalid value for preferences.isAutoRefreshEnabled&lt;br&gt;Y807 : Resource not found&lt;br&gt;Y830 : Data extracts feature has to be enabled to set preferences.isDataExtractsEnabled as true&lt;br&gt;Y830 : Auto refresh feature has to be enabled to set preferences.isAutoRefreshEnabled as true&lt;br&gt;Y868 : No action is allowed, as the data is being migrated to the Open Banking provider&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updatePreferencesWithHttpInfo(Long providerAccountId, ProviderAccountPreferencesRequest providerAccountPreferencesRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePreferencesValidateBeforeCall(providerAccountId, providerAccountPreferencesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Preferences (asynchronously)
     * This endpoint is used to update preferences like data extracts and auto refreshes without triggering refresh for the providerAccount.&lt;br&gt;Setting isDataExtractsEnabled to false will not trigger data extracts notification and dataExtracts/events will not reflect any data change that is happening for the providerAccount.&lt;br&gt;Modified data will not be provided in the dataExtracts/userData endpoint.&lt;br&gt;Setting isAutoRefreshEnabled to false will not trigger auto refreshes for the provider account.&lt;br&gt;
     * @param providerAccountId providerAccountId (required)
     * @param providerAccountPreferencesRequest preferences (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for preferences&lt;br&gt;Y800 : Invalid value for preferences.isDataExtractsEnabled&lt;br&gt;Y800 : Invalid value for preferences.isAutoRefreshEnabled&lt;br&gt;Y807 : Resource not found&lt;br&gt;Y830 : Data extracts feature has to be enabled to set preferences.isDataExtractsEnabled as true&lt;br&gt;Y830 : Auto refresh feature has to be enabled to set preferences.isAutoRefreshEnabled as true&lt;br&gt;Y868 : No action is allowed, as the data is being migrated to the Open Banking provider&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePreferencesAsync(Long providerAccountId, ProviderAccountPreferencesRequest providerAccountPreferencesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePreferencesValidateBeforeCall(providerAccountId, providerAccountPreferencesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
