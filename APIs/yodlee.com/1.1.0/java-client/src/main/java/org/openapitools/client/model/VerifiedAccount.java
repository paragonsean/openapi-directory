/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccountHolder;
import org.openapitools.client.model.BankTransferCode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VerifiedAccount
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.041142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VerifiedAccount {
  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "accountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "accountType";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private String accountType;

  public static final String SERIALIZED_NAME_BANK_TRANSFER_CODE = "bankTransferCode";
  @SerializedName(SERIALIZED_NAME_BANK_TRANSFER_CODE)
  private List<BankTransferCode> bankTransferCode = new ArrayList<>();

  public static final String SERIALIZED_NAME_FULL_ACCOUNT_NUMBER = "fullAccountNumber";
  @SerializedName(SERIALIZED_NAME_FULL_ACCOUNT_NUMBER)
  private String fullAccountNumber;

  public static final String SERIALIZED_NAME_HOLDER = "holder";
  @SerializedName(SERIALIZED_NAME_HOLDER)
  private List<AccountHolder> holder = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_PROVIDER_ACCOUNT_ID = "providerAccountId";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ACCOUNT_ID)
  private Long providerAccountId;

  public static final String SERIALIZED_NAME_PROVIDER_NAME = "providerName";
  @SerializedName(SERIALIZED_NAME_PROVIDER_NAME)
  private String providerName;

  public VerifiedAccount() {
  }

  public VerifiedAccount(
     String accountNumber, 
     String accountType, 
     List<BankTransferCode> bankTransferCode, 
     Long providerAccountId, 
     String providerName
  ) {
    this();
    this.accountNumber = accountNumber;
    this.accountType = accountType;
    this.bankTransferCode = bankTransferCode;
    this.providerAccountId = providerAccountId;
    this.providerName = providerName;
  }

  /**
   * The account number as it appears on the site. (The POST accounts service response return this field as number)&lt;br&gt;&lt;b&gt;Additional Details&lt;/b&gt;:&lt;b&gt; Bank/ Loan/ Insurance/ Investment&lt;/b&gt;:&lt;br&gt; The account number for the bank account as it appears at the site.&lt;br&gt;&lt;b&gt;Credit Card&lt;/b&gt;: The account number of the card account as it appears at the site,&lt;br&gt;i.e., the card number.The account number can be full or partial based on how it is displayed in the account summary page of the site.In most cases, the site does not display the full account number in the account summary page and additional navigation is required to aggregate it.&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: All Containers&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Both &lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;br&gt;&lt;ul&gt;&lt;li&gt;GET accounts&lt;/li&gt;&lt;li&gt;GET accounts/{accountId}&lt;/li&gt;&lt;li&gt;POST accounts&lt;/li&gt;&lt;/ul&gt;
   * @return accountNumber
   */
  @javax.annotation.Nullable
  public String getAccountNumber() {
    return accountNumber;
  }



  /**
   * The type of account that is aggregated, i.e., savings, checking, credit card, charge, HELOC, etc. The account type is derived based on the attributes of the account. &lt;br&gt;&lt;b&gt;Valid Values:&lt;/b&gt;&lt;br&gt;&lt;b&gt;Aggregated Account Type&lt;/b&gt;&lt;br&gt;&lt;b&gt;bank&lt;/b&gt;&lt;ul&gt;&lt;li&gt;CHECKING&lt;/li&gt;&lt;li&gt;SAVINGS&lt;/li&gt;&lt;li&gt;CD&lt;/li&gt;&lt;li&gt;PPF&lt;/li&gt;&lt;li&gt;RECURRING_DEPOSIT&lt;/li&gt;&lt;li&gt;FSA&lt;/li&gt;&lt;li&gt;MONEY_MARKET&lt;/li&gt;&lt;li&gt;IRA&lt;/li&gt;&lt;li&gt;PREPAID&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;creditCard&lt;/b&gt;&lt;ul&gt;&lt;li&gt;OTHER&lt;/li&gt;&lt;li&gt;CREDIT&lt;/li&gt;&lt;li&gt;STORE&lt;/li&gt;&lt;li&gt;CHARGE&lt;/li&gt;&lt;li&gt;OTHER&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;investment (SN 1.0)&lt;/b&gt;&lt;ul&gt;&lt;li&gt;BROKERAGE_MARGIN&lt;/li&gt;&lt;li&gt;HSA&lt;/li&gt;&lt;li&gt;IRA&lt;/li&gt;&lt;li&gt;BROKERAGE_CASH&lt;/li&gt;&lt;li&gt;401K&lt;/li&gt;&lt;li&gt;403B&lt;/li&gt;&lt;li&gt;TRUST&lt;/li&gt;&lt;li&gt;ANNUITY&lt;/li&gt;&lt;li&gt;SIMPLE&lt;/li&gt;&lt;li&gt;CUSTODIAL&lt;/li&gt;&lt;li&gt;BROKERAGE_CASH_OPTION&lt;/li&gt;&lt;li&gt;BROKERAGE_MARGIN_OPTION&lt;/li&gt;&lt;li&gt;INDIVIDUAL&lt;/li&gt;&lt;li&gt;CORPORATE&lt;/li&gt;&lt;li&gt;JTTIC&lt;/li&gt;&lt;li&gt;JTWROS&lt;/li&gt;&lt;li&gt;COMMUNITY_PROPERTY&lt;/li&gt;&lt;li&gt;JOINT_BY_ENTIRETY&lt;/li&gt;&lt;li&gt;CONSERVATORSHIP&lt;/li&gt;&lt;li&gt;ROTH&lt;/li&gt;&lt;li&gt;ROTH_CONVERSION&lt;/li&gt;&lt;li&gt;ROLLOVER&lt;/li&gt;&lt;li&gt;EDUCATIONAL&lt;/li&gt;&lt;li&gt;529_PLAN&lt;/li&gt;&lt;li&gt;457_DEFERRED_COMPENSATION&lt;/li&gt;&lt;li&gt;401A&lt;/li&gt;&lt;li&gt;PSP&lt;/li&gt;&lt;li&gt;MPP&lt;/li&gt;&lt;li&gt;STOCK_BASKET&lt;/li&gt;&lt;li&gt;LIVING_TRUST&lt;/li&gt;&lt;li&gt;REVOCABLE_TRUST&lt;/li&gt;&lt;li&gt;IRREVOCABLE_TRUST&lt;/li&gt;&lt;li&gt;CHARITABLE_REMAINDER&lt;/li&gt;&lt;li&gt;CHARITABLE_LEAD&lt;/li&gt;&lt;li&gt;CHARITABLE_GIFT_ACCOUNT&lt;/li&gt;&lt;li&gt;SEP&lt;/li&gt;&lt;li&gt;UTMA&lt;/li&gt;&lt;li&gt;UGMA&lt;/li&gt;&lt;li&gt;ESOPP&lt;/li&gt;&lt;li&gt;ADMINISTRATOR&lt;/li&gt;&lt;li&gt;EXECUTOR&lt;/li&gt;&lt;li&gt;PARTNERSHIP&lt;/li&gt;&lt;li&gt;SOLE_PROPRIETORSHIP&lt;/li&gt;&lt;li&gt;CHURCH&lt;/li&gt;&lt;li&gt;INVESTMENT_CLUB&lt;/li&gt;&lt;li&gt;RESTRICTED_STOCK_AWARD&lt;/li&gt;&lt;li&gt;CMA&lt;/li&gt;&lt;li&gt;EMPLOYEE_STOCK_PURCHASE_PLAN&lt;/li&gt;&lt;li&gt;PERFORMANCE_PLAN&lt;/li&gt;&lt;li&gt;BROKERAGE_LINK_ACCOUNT&lt;/li&gt;&lt;li&gt;MONEY_MARKET&lt;/li&gt;&lt;li&gt;SUPER_ANNUATION&lt;/li&gt;&lt;li&gt;REGISTERED_RETIREMENT_SAVINGS_PLAN&lt;/li&gt;&lt;li&gt;SPOUSAL_RETIREMENT_SAVINGS_PLAN&lt;/li&gt;&lt;li&gt;DEFERRED_PROFIT_SHARING_PLAN&lt;/li&gt;&lt;li&gt;NON_REGISTERED_SAVINGS_PLAN&lt;/li&gt;&lt;li&gt;REGISTERED_EDUCATION_SAVINGS_PLAN&lt;/li&gt;&lt;li&gt;GROUP_RETIREMENT_SAVINGS_PLAN&lt;/li&gt;&lt;li&gt;LOCKED_IN_RETIREMENT_SAVINGS_PLAN&lt;/li&gt;&lt;li&gt;RESTRICTED_LOCKED_IN_SAVINGS_PLAN&lt;/li&gt;&lt;li&gt;LOCKED_IN_RETIREMENT_ACCOUNT&lt;/li&gt;&lt;li&gt;REGISTERED_PENSION_PLAN&lt;/li&gt;&lt;li&gt;TAX_FREE_SAVINGS_ACCOUNT&lt;/li&gt;&lt;li&gt;LIFE_INCOME_FUND&lt;/li&gt;&lt;li&gt;REGISTERED_RETIREMENT_INCOME_FUND&lt;/li&gt;&lt;li&gt;SPOUSAL_RETIREMENT_INCOME_FUND&lt;/li&gt;&lt;li&gt;LOCKED_IN_REGISTERED_INVESTMENT_FUND&lt;/li&gt;&lt;li&gt;PRESCRIBED_REGISTERED_RETIREMENT_INCOME_FUND&lt;/li&gt;&lt;li&gt;GUARANTEED_INVESTMENT_CERTIFICATES&lt;/li&gt;&lt;li&gt;REGISTERED_DISABILITY_SAVINGS_PLAN&lt;/li&gt;&lt;li&gt;OTHER&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;investment (SN 2.0)&lt;/b&gt;&lt;ul&gt;&lt;li&gt;BROKERAGE_CASH&lt;/li&gt;&lt;li&gt;BROKERAGE_MARGIN&lt;/li&gt;&lt;li&gt;INDIVIDUAL_RETIREMENT_ACCOUNT_IRA&lt;/li&gt;&lt;li&gt;EMPLOYEE_RETIREMENT_ACCOUNT_401K&lt;/li&gt;&lt;li&gt;EMPLOYEE_RETIREMENT_SAVINGS_PLAN_403B&lt;/li&gt;&lt;li&gt;TRUST&lt;/li&gt;&lt;li&gt;ANNUITY&lt;/li&gt;&lt;li&gt;SIMPLE_IRA&lt;/li&gt;&lt;li&gt;CUSTODIAL_ACCOUNT&lt;/li&gt;&lt;li&gt;BROKERAGE_CASH_OPTION&lt;/li&gt;&lt;li&gt;BROKERAGE_MARGIN_OPTION&lt;/li&gt;&lt;li&gt;INDIVIDUAL&lt;/li&gt;&lt;li&gt;CORPORATE_INVESTMENT_ACCOUNT&lt;/li&gt;&lt;li&gt;JOINT_TENANTS_TENANCY_IN_COMMON_JTIC&lt;/li&gt;&lt;li&gt;JOINT_TENANTS_WITH_RIGHTS_OF_SURVIVORSHIP_JTWROS&lt;/li&gt;&lt;li&gt;JOINT_TENANTS_COMMUNITY_PROPERTY&lt;/li&gt;&lt;li&gt;JOINT_TENANTS_TENANTS_BY_ENTIRETY&lt;/li&gt;&lt;li&gt;CONSERVATOR&lt;/li&gt;&lt;li&gt;ROTH_IRA&lt;/li&gt;&lt;li&gt;ROTH_CONVERSION&lt;/li&gt;&lt;li&gt;ROLLOVER_IRA&lt;/li&gt;&lt;li&gt;EDUCATIONAL&lt;/li&gt;&lt;li&gt;EDUCATIONAL_SAVINGS_PLAN_529&lt;/li&gt;&lt;li&gt;DEFERRED_COMPENSATION_PLAN_457&lt;/li&gt;&lt;li&gt;MONEY_PURCHASE_RETIREMENT_PLAN_401A&lt;/li&gt;&lt;li&gt;PROFIT_SHARING_PLAN&lt;/li&gt;&lt;li&gt;MONEY_PURCHASE_PLAN&lt;/li&gt;&lt;li&gt;STOCK_BASKET_ACCOUNT&lt;/li&gt;&lt;li&gt;LIVING_TRUST&lt;/li&gt;&lt;li&gt;REVOCABLE_TRUST&lt;/li&gt;&lt;li&gt;IRREVOCABLE_TRUST&lt;/li&gt;&lt;li&gt;CHARITABLE_REMAINDER_TRUST&lt;/li&gt;&lt;li&gt;CHARITABLE_LEAD_TRUST&lt;/li&gt;&lt;li&gt;CHARITABLE_GIFT_ACCOUNT&lt;/li&gt;&lt;li&gt;SEP_IRA&lt;/li&gt;&lt;li&gt;UNIFORM_TRANSFER_TO_MINORS_ACT_UTMA&lt;/li&gt;&lt;li&gt;UNIFORM_GIFT_TO_MINORS_ACT_UGMA&lt;/li&gt;&lt;li&gt;EMPLOYEE_STOCK_OWNERSHIP_PLAN_ESOP&lt;/li&gt;&lt;li&gt;ADMINISTRATOR&lt;/li&gt;&lt;li&gt;EXECUTOR&lt;/li&gt;&lt;li&gt;PARTNERSHIP&lt;/li&gt;&lt;li&gt;PROPRIETORSHIP&lt;/li&gt;&lt;li&gt;CHURCH_ACCOUNT&lt;/li&gt;&lt;li&gt;INVESTMENT_CLUB&lt;/li&gt;&lt;li&gt;RESTRICTED_STOCK_AWARD&lt;/li&gt;&lt;li&gt;CASH_MANAGEMENT_ACCOUNT&lt;/li&gt;&lt;li&gt;EMPLOYEE_STOCK_PURCHASE_PLAN_ESPP&lt;/li&gt;&lt;li&gt;PERFORMANCE_PLAN&lt;/li&gt;&lt;li&gt;BROKERAGE_LINK_ACCOUNT&lt;/li&gt;&lt;li&gt;MONEY_MARKET_ACCOUNT&lt;/li&gt;&lt;li&gt;SUPERANNUATION&lt;/li&gt;&lt;li&gt;REGISTERED_RETIREMENT_SAVINGS_PLAN_RRSP&lt;/li&gt;&lt;li&gt;SPOUSAL_RETIREMENT_SAVINGS_PLAN_SRSP&lt;/li&gt;&lt;li&gt;DEFERRED_PROFIT_SHARING_PLAN_DPSP&lt;/li&gt;&lt;li&gt;NON_REGISTERED_SAVINGS_PLAN_NRSP&lt;/li&gt;&lt;li&gt;REGISTERED_EDUCATION_SAVINGS_PLAN_RESP&lt;/li&gt;&lt;li&gt;GROUP_RETIREMENT_SAVINGS_PLAN_GRSP&lt;/li&gt;&lt;li&gt;LOCKED_IN_RETIREMENT_SAVINGS_PLAN_LRSP&lt;/li&gt;&lt;li&gt;RESTRICTED_LOCKED_IN_SAVINGS_PLAN_RLSP&lt;/li&gt;&lt;li&gt;LOCKED_IN_RETIREMENT_ACCOUNT_LIRA&lt;/li&gt;&lt;li&gt;REGISTERED_PENSION_PLAN_RPP&lt;/li&gt;&lt;li&gt;TAX_FREE_SAVINGS_ACCOUNT_TFSA&lt;/li&gt;&lt;li&gt;LIFE_INCOME_FUND_LIF&lt;/li&gt;&lt;li&gt;REGISTERED_RETIREMENT_INCOME_FUND_RIF&lt;/li&gt;&lt;li&gt;SPOUSAL_RETIREMENT_INCOME_FUND_SRIF&lt;/li&gt;&lt;li&gt;LOCKED_IN_REGISTERED_INVESTMENT_FUND_LRIF&lt;/li&gt;&lt;li&gt;PRESCRIBED_REGISTERED_RETIREMENT_INCOME_FUND_PRIF&lt;/li&gt;&lt;li&gt;GUARANTEED_INVESTMENT_CERTIFICATES_GIC&lt;/li&gt;&lt;li&gt;REGISTERED_DISABILITY_SAVINGS_PLAN_RDSP&lt;/li&gt;&lt;li&gt;DEFINED_CONTRIBUTION_PLAN&lt;/li&gt;&lt;li&gt;DEFINED_BENEFIT_PLAN&lt;/li&gt;&lt;li&gt;EMPLOYEE_STOCK_OPTION_PLAN&lt;/li&gt;&lt;li&gt;NONQUALIFIED_DEFERRED_COMPENSATION_PLAN_409A&lt;/li&gt;&lt;li&gt;KEOGH_PLAN&lt;/li&gt;&lt;li&gt;EMPLOYEE_RETIREMENT_ACCOUNT_ROTH_401K&lt;/li&gt;&lt;li&gt;DEFERRED_CONTINGENT_CAPITAL_PLAN_DCCP&lt;/li&gt;&lt;li&gt;EMPLOYEE_BENEFIT_PLAN&lt;/li&gt;&lt;li&gt;EMPLOYEE_SAVINGS_PLAN&lt;/li&gt;&lt;li&gt;HEALTH_SAVINGS_ACCOUNT_HSA&lt;/li&gt;&lt;li&gt;COVERDELL_EDUCATION_SAVINGS_ACCOUNT_ESA&lt;/li&gt;&lt;li&gt;TESTAMENTARY_TRUST&lt;/li&gt;&lt;li&gt;ESTATE&lt;/li&gt;&lt;li&gt;GRANTOR_RETAINED_ANNUITY_TRUST_GRAT&lt;/li&gt;&lt;li&gt;ADVISORY_ACCOUNT&lt;/li&gt;&lt;li&gt;NON_PROFIT_ORGANIZATION_501C&lt;/li&gt;&lt;li&gt;HEALTH_REIMBURSEMENT_ARRANGEMENT_HRA&lt;/li&gt;&lt;li&gt;INDIVIDUAL_SAVINGS_ACCOUNT_ISA&lt;/li&gt;&lt;li&gt;CASH_ISA&lt;/li&gt;&lt;li&gt;STOCKS_AND_SHARES_ISA&lt;/li&gt;&lt;li&gt;INNOVATIVE_FINANCE_ISA&lt;/li&gt;&lt;li&gt;JUNIOR_ISA&lt;/li&gt;&lt;li&gt;EMPLOYEES_PROVIDENT_FUND_ORGANIZATION_EPFO&lt;/li&gt;&lt;li&gt;PUBLIC_PROVIDENT_FUND_PPF&lt;/li&gt;&lt;li&gt;EMPLOYEES_PENSION_SCHEME_EPS&lt;/li&gt;&lt;li&gt;NATIONAL_PENSION_SYSTEM_NPS&lt;/li&gt;&lt;li&gt;INDEXED_ANNUITY&lt;/li&gt;&lt;li&gt;ANNUITIZED_ANNUITY&lt;/li&gt;&lt;li&gt;VARIABLE_ANNUITY&lt;/li&gt;&lt;li&gt;ROTH_403B&lt;/li&gt;&lt;li&gt;SPOUSAL_IRA&lt;/li&gt;&lt;li&gt;SPOUSAL_ROTH_IRA&lt;/li&gt;&lt;li&gt;SARSEP_IRA&lt;/li&gt;&lt;li&gt;SUBSTANTIALLY_EQUAL_PERIODIC_PAYMENTS_SEPP&lt;/li&gt;&lt;li&gt;OFFSHORE_TRUST&lt;/li&gt;&lt;li&gt;IRREVOCABLE_LIFE_INSURANCE_TRUST&lt;/li&gt;&lt;li&gt;INTERNATIONAL_TRUST&lt;/li&gt;&lt;li&gt;LIFE_INTEREST_TRUST&lt;/li&gt;&lt;li&gt;EMPLOYEE_BENEFIT_TRUST&lt;/li&gt;&lt;li&gt;PRECIOUS_METAL_ACCOUNT&lt;/li&gt;&lt;li&gt;INVESTMENT_LOAN_ACCOUNT&lt;/li&gt;&lt;li&gt;GRANTOR_RETAINED_INCOME_TRUST&lt;/li&gt;&lt;li&gt;PENSION_PLAN&lt;/li&gt;&lt;li&gt;OTHER&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;loan&lt;/b&gt;&lt;ul&gt;&lt;li&gt;MORTGAGE&lt;/li&gt;&lt;li&gt;INSTALLMENT_LOAN&lt;/li&gt;&lt;li&gt;PERSONAL_LOAN&lt;/li&gt;&lt;li&gt;HOME_EQUITY_LINE_OF_CREDIT&lt;/li&gt;&lt;li&gt;LINE_OF_CREDIT&lt;/li&gt;&lt;li&gt;AUTO_LOAN&lt;/li&gt;&lt;li&gt;STUDENT_LOAN&lt;/li&gt;&lt;li&gt;HOME_LOAN&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;insurance&lt;/b&gt;&lt;ul&gt;&lt;li&gt;AUTO_INSURANCE&lt;/li&gt;&lt;li&gt;HEALTH_INSURANCE&lt;/li&gt;&lt;li&gt;HOME_INSURANCE&lt;/li&gt;&lt;li&gt;LIFE_INSURANCE&lt;/li&gt;&lt;li&gt;ANNUITY&lt;/li&gt;&lt;li&gt;TRAVEL_INSURANCE&lt;/li&gt;&lt;li&gt;INSURANCE&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;realEstate&lt;/b&gt;&lt;ul&gt; &lt;li&gt;REAL_ESTATE&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;reward&lt;/b&gt;&lt;ul&gt;&lt;li&gt;REWARD_POINTS&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Manual Account Type&lt;/b&gt;&lt;br&gt;&lt;b&gt;bank&lt;/b&gt;&lt;ul&gt;&lt;li&gt;CHECKING&lt;/li&gt;&lt;li&gt;SAVINGS&lt;/li&gt;&lt;li&gt;CD&lt;/li&gt;&lt;li&gt;PREPAID&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;credit&lt;/b&gt;&lt;ul&gt;  &lt;li&gt;CREDIT&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;loan&lt;/b&gt;&lt;ul&gt;  &lt;li&gt;PERSONAL_LOAN&lt;/li&gt;&lt;li&gt;HOME_LOAN&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;insurance&lt;/b&gt;&lt;ul&gt;&lt;li&gt;INSURANCE&lt;/li&gt;&lt;li&gt;ANNUITY&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;investment&lt;/b&gt;&lt;ul&gt;&lt;li&gt;BROKERAGE_CASH&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Both &lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: All containers&lt;br&gt;&lt;/ul&gt;
   * @return accountType
   */
  @javax.annotation.Nullable
  public String getAccountType() {
    return accountType;
  }



  /**
   * Bank and branch identification information.&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Aggregated&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank, investment, loan&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;br&gt;&lt;ul&gt;&lt;/ul&gt;
   * @return bankTransferCode
   */
  @javax.annotation.Nullable
  public List<BankTransferCode> getBankTransferCode() {
    return bankTransferCode;
  }



  public VerifiedAccount fullAccountNumber(String fullAccountNumber) {
    this.fullAccountNumber = fullAccountNumber;
    return this;
  }

  /**
   * Get fullAccountNumber
   * @return fullAccountNumber
   */
  @javax.annotation.Nullable
  public String getFullAccountNumber() {
    return fullAccountNumber;
  }

  public void setFullAccountNumber(String fullAccountNumber) {
    this.fullAccountNumber = fullAccountNumber;
  }


  public VerifiedAccount holder(List<AccountHolder> holder) {
    this.holder = holder;
    return this;
  }

  public VerifiedAccount addHolderItem(AccountHolder holderItem) {
    if (this.holder == null) {
      this.holder = new ArrayList<>();
    }
    this.holder.add(holderItem);
    return this;
  }

  /**
   * Get holder
   * @return holder
   */
  @javax.annotation.Nullable
  public List<AccountHolder> getHolder() {
    return holder;
  }

  public void setHolder(List<AccountHolder> holder) {
    this.holder = holder;
  }


  public VerifiedAccount id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  /**
   * The primary key of the provider account resource.&lt;br&gt;&lt;br&gt;&lt;b&gt;Aggregated / Manual&lt;/b&gt;: Both &lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: All containers&lt;br&gt;
   * @return providerAccountId
   */
  @javax.annotation.Nullable
  public Long getProviderAccountId() {
    return providerAccountId;
  }



  /**
   * &lt;b&gt;Applicable containers&lt;/b&gt;: reward, bank, creditCard, investment, loan, insurance, realEstate,  otherLiabilities&lt;br&gt;
   * @return providerName
   */
  @javax.annotation.Nullable
  public String getProviderName() {
    return providerName;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerifiedAccount verifiedAccount = (VerifiedAccount) o;
    return Objects.equals(this.accountNumber, verifiedAccount.accountNumber) &&
        Objects.equals(this.accountType, verifiedAccount.accountType) &&
        Objects.equals(this.bankTransferCode, verifiedAccount.bankTransferCode) &&
        Objects.equals(this.fullAccountNumber, verifiedAccount.fullAccountNumber) &&
        Objects.equals(this.holder, verifiedAccount.holder) &&
        Objects.equals(this.id, verifiedAccount.id) &&
        Objects.equals(this.providerAccountId, verifiedAccount.providerAccountId) &&
        Objects.equals(this.providerName, verifiedAccount.providerName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountNumber, accountType, bankTransferCode, fullAccountNumber, holder, id, providerAccountId, providerName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerifiedAccount {\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    bankTransferCode: ").append(toIndentedString(bankTransferCode)).append("\n");
    sb.append("    fullAccountNumber: ").append(toIndentedString(fullAccountNumber)).append("\n");
    sb.append("    holder: ").append(toIndentedString(holder)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    providerAccountId: ").append(toIndentedString(providerAccountId)).append("\n");
    sb.append("    providerName: ").append(toIndentedString(providerName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountNumber");
    openapiFields.add("accountType");
    openapiFields.add("bankTransferCode");
    openapiFields.add("fullAccountNumber");
    openapiFields.add("holder");
    openapiFields.add("id");
    openapiFields.add("providerAccountId");
    openapiFields.add("providerName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VerifiedAccount
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VerifiedAccount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VerifiedAccount is not found in the empty JSON string", VerifiedAccount.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VerifiedAccount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VerifiedAccount` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountNumber") != null && !jsonObj.get("accountNumber").isJsonNull()) && !jsonObj.get("accountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountNumber").toString()));
      }
      if ((jsonObj.get("accountType") != null && !jsonObj.get("accountType").isJsonNull()) && !jsonObj.get("accountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountType").toString()));
      }
      if (jsonObj.get("bankTransferCode") != null && !jsonObj.get("bankTransferCode").isJsonNull()) {
        JsonArray jsonArraybankTransferCode = jsonObj.getAsJsonArray("bankTransferCode");
        if (jsonArraybankTransferCode != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bankTransferCode").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bankTransferCode` to be an array in the JSON string but got `%s`", jsonObj.get("bankTransferCode").toString()));
          }

          // validate the optional field `bankTransferCode` (array)
          for (int i = 0; i < jsonArraybankTransferCode.size(); i++) {
            BankTransferCode.validateJsonElement(jsonArraybankTransferCode.get(i));
          };
        }
      }
      if ((jsonObj.get("fullAccountNumber") != null && !jsonObj.get("fullAccountNumber").isJsonNull()) && !jsonObj.get("fullAccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullAccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullAccountNumber").toString()));
      }
      if (jsonObj.get("holder") != null && !jsonObj.get("holder").isJsonNull()) {
        JsonArray jsonArrayholder = jsonObj.getAsJsonArray("holder");
        if (jsonArrayholder != null) {
          // ensure the json data is an array
          if (!jsonObj.get("holder").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `holder` to be an array in the JSON string but got `%s`", jsonObj.get("holder").toString()));
          }

          // validate the optional field `holder` (array)
          for (int i = 0; i < jsonArrayholder.size(); i++) {
            AccountHolder.validateJsonElement(jsonArrayholder.get(i));
          };
        }
      }
      if ((jsonObj.get("providerName") != null && !jsonObj.get("providerName").isJsonNull()) && !jsonObj.get("providerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VerifiedAccount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VerifiedAccount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VerifiedAccount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VerifiedAccount.class));

       return (TypeAdapter<T>) new TypeAdapter<VerifiedAccount>() {
           @Override
           public void write(JsonWriter out, VerifiedAccount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VerifiedAccount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VerifiedAccount given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VerifiedAccount
   * @throws IOException if the JSON string is invalid with respect to VerifiedAccount
   */
  public static VerifiedAccount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VerifiedAccount.class);
  }

  /**
   * Convert an instance of VerifiedAccount to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

