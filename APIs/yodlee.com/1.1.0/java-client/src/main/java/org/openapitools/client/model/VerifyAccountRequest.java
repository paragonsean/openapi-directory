/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VerifyTransactionCriteria;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VerifyAccountRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.041142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VerifyAccountRequest {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private Long accountId;

  /**
   * Gets or Sets container
   */
  @JsonAdapter(ContainerEnum.Adapter.class)
  public enum ContainerEnum {
    BANK("bank"),
    
    CREDIT_CARD("creditCard"),
    
    INVESTMENT("investment"),
    
    INSURANCE("insurance"),
    
    LOAN("loan"),
    
    REWARD("reward"),
    
    REAL_ESTATE("realEstate"),
    
    OTHER_ASSETS("otherAssets"),
    
    OTHER_LIABILITIES("otherLiabilities");

    private String value;

    ContainerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContainerEnum fromValue(String value) {
      for (ContainerEnum b : ContainerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContainerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContainerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContainerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContainerEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContainerEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTAINER = "container";
  @SerializedName(SERIALIZED_NAME_CONTAINER)
  private ContainerEnum container;

  public static final String SERIALIZED_NAME_TRANSACTION_CRITERIA = "transactionCriteria";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_CRITERIA)
  private List<VerifyTransactionCriteria> transactionCriteria = new ArrayList<>();

  public VerifyAccountRequest() {
  }

  public VerifyAccountRequest accountId(Long accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public Long getAccountId() {
    return accountId;
  }

  public void setAccountId(Long accountId) {
    this.accountId = accountId;
  }


  public VerifyAccountRequest container(ContainerEnum container) {
    this.container = container;
    return this;
  }

  /**
   * Get container
   * @return container
   */
  @javax.annotation.Nullable
  public ContainerEnum getContainer() {
    return container;
  }

  public void setContainer(ContainerEnum container) {
    this.container = container;
  }


  public VerifyAccountRequest transactionCriteria(List<VerifyTransactionCriteria> transactionCriteria) {
    this.transactionCriteria = transactionCriteria;
    return this;
  }

  public VerifyAccountRequest addTransactionCriteriaItem(VerifyTransactionCriteria transactionCriteriaItem) {
    if (this.transactionCriteria == null) {
      this.transactionCriteria = new ArrayList<>();
    }
    this.transactionCriteria.add(transactionCriteriaItem);
    return this;
  }

  /**
   * Get transactionCriteria
   * @return transactionCriteria
   */
  @javax.annotation.Nonnull
  public List<VerifyTransactionCriteria> getTransactionCriteria() {
    return transactionCriteria;
  }

  public void setTransactionCriteria(List<VerifyTransactionCriteria> transactionCriteria) {
    this.transactionCriteria = transactionCriteria;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerifyAccountRequest verifyAccountRequest = (VerifyAccountRequest) o;
    return Objects.equals(this.accountId, verifyAccountRequest.accountId) &&
        Objects.equals(this.container, verifyAccountRequest.container) &&
        Objects.equals(this.transactionCriteria, verifyAccountRequest.transactionCriteria);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, container, transactionCriteria);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerifyAccountRequest {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    transactionCriteria: ").append(toIndentedString(transactionCriteria)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("container");
    openapiFields.add("transactionCriteria");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("transactionCriteria");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VerifyAccountRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VerifyAccountRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VerifyAccountRequest is not found in the empty JSON string", VerifyAccountRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VerifyAccountRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VerifyAccountRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VerifyAccountRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("container") != null && !jsonObj.get("container").isJsonNull()) && !jsonObj.get("container").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `container` to be a primitive type in the JSON string but got `%s`", jsonObj.get("container").toString()));
      }
      // validate the optional field `container`
      if (jsonObj.get("container") != null && !jsonObj.get("container").isJsonNull()) {
        ContainerEnum.validateJsonElement(jsonObj.get("container"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("transactionCriteria").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionCriteria` to be an array in the JSON string but got `%s`", jsonObj.get("transactionCriteria").toString()));
      }

      JsonArray jsonArraytransactionCriteria = jsonObj.getAsJsonArray("transactionCriteria");
      // validate the required field `transactionCriteria` (array)
      for (int i = 0; i < jsonArraytransactionCriteria.size(); i++) {
        VerifyTransactionCriteria.validateJsonElement(jsonArraytransactionCriteria.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VerifyAccountRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VerifyAccountRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VerifyAccountRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VerifyAccountRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<VerifyAccountRequest>() {
           @Override
           public void write(JsonWriter out, VerifyAccountRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VerifyAccountRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VerifyAccountRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VerifyAccountRequest
   * @throws IOException if the JSON string is invalid with respect to VerifyAccountRequest
   */
  public static VerifyAccountRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VerifyAccountRequest.class);
  }

  /**
   * Convert an instance of VerifyAccountRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

