/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProviderAccountPreferences
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.041142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProviderAccountPreferences {
  public static final String SERIALIZED_NAME_IS_AUTO_REFRESH_ENABLED = "isAutoRefreshEnabled";
  @SerializedName(SERIALIZED_NAME_IS_AUTO_REFRESH_ENABLED)
  private Boolean isAutoRefreshEnabled;

  public static final String SERIALIZED_NAME_IS_DATA_EXTRACTS_ENABLED = "isDataExtractsEnabled";
  @SerializedName(SERIALIZED_NAME_IS_DATA_EXTRACTS_ENABLED)
  private Boolean isDataExtractsEnabled;

  public static final String SERIALIZED_NAME_LINKED_PROVIDER_ACCOUNT_ID = "linkedProviderAccountId";
  @SerializedName(SERIALIZED_NAME_LINKED_PROVIDER_ACCOUNT_ID)
  private Long linkedProviderAccountId;

  public ProviderAccountPreferences() {
  }

  public ProviderAccountPreferences isAutoRefreshEnabled(Boolean isAutoRefreshEnabled) {
    this.isAutoRefreshEnabled = isAutoRefreshEnabled;
    return this;
  }

  /**
   * Indicates if auto-refreshes have to be triggered for the provider account.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts?include&#x3D;preferences&lt;/li&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}?include&#x3D;preferences&lt;/li&gt;&lt;/ul&gt;
   * @return isAutoRefreshEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsAutoRefreshEnabled() {
    return isAutoRefreshEnabled;
  }

  public void setIsAutoRefreshEnabled(Boolean isAutoRefreshEnabled) {
    this.isAutoRefreshEnabled = isAutoRefreshEnabled;
  }


  public ProviderAccountPreferences isDataExtractsEnabled(Boolean isDataExtractsEnabled) {
    this.isDataExtractsEnabled = isDataExtractsEnabled;
    return this;
  }

  /**
   * Indicates if the updates to the provider account should be part of the data extracts event notification or the data extract data retrieval service.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts?include&#x3D;preferences&lt;/li&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}?include&#x3D;preferences&lt;/li&gt;&lt;/ul&gt;
   * @return isDataExtractsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsDataExtractsEnabled() {
    return isDataExtractsEnabled;
  }

  public void setIsDataExtractsEnabled(Boolean isDataExtractsEnabled) {
    this.isDataExtractsEnabled = isDataExtractsEnabled;
  }


  public ProviderAccountPreferences linkedProviderAccountId(Long linkedProviderAccountId) {
    this.linkedProviderAccountId = linkedProviderAccountId;
    return this;
  }

  /**
   * LinkedproviderAccountd is a providerAccountId linked by the user to the primary provider account. &lt;br&gt;LinkedProviderAccountId and the providerAccountId belongs to the same institution.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST Provider Account&lt;/li&gt;&lt;li&gt;PUT Provider Account&lt;/li&gt;&lt;li&gt;GET Provider Accounts&lt;/li&gt;&lt;/ul&gt;
   * @return linkedProviderAccountId
   */
  @javax.annotation.Nullable
  public Long getLinkedProviderAccountId() {
    return linkedProviderAccountId;
  }

  public void setLinkedProviderAccountId(Long linkedProviderAccountId) {
    this.linkedProviderAccountId = linkedProviderAccountId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProviderAccountPreferences providerAccountPreferences = (ProviderAccountPreferences) o;
    return Objects.equals(this.isAutoRefreshEnabled, providerAccountPreferences.isAutoRefreshEnabled) &&
        Objects.equals(this.isDataExtractsEnabled, providerAccountPreferences.isDataExtractsEnabled) &&
        Objects.equals(this.linkedProviderAccountId, providerAccountPreferences.linkedProviderAccountId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isAutoRefreshEnabled, isDataExtractsEnabled, linkedProviderAccountId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProviderAccountPreferences {\n");
    sb.append("    isAutoRefreshEnabled: ").append(toIndentedString(isAutoRefreshEnabled)).append("\n");
    sb.append("    isDataExtractsEnabled: ").append(toIndentedString(isDataExtractsEnabled)).append("\n");
    sb.append("    linkedProviderAccountId: ").append(toIndentedString(linkedProviderAccountId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isAutoRefreshEnabled");
    openapiFields.add("isDataExtractsEnabled");
    openapiFields.add("linkedProviderAccountId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProviderAccountPreferences
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProviderAccountPreferences.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProviderAccountPreferences is not found in the empty JSON string", ProviderAccountPreferences.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProviderAccountPreferences.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProviderAccountPreferences` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProviderAccountPreferences.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProviderAccountPreferences' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProviderAccountPreferences> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProviderAccountPreferences.class));

       return (TypeAdapter<T>) new TypeAdapter<ProviderAccountPreferences>() {
           @Override
           public void write(JsonWriter out, ProviderAccountPreferences value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProviderAccountPreferences read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProviderAccountPreferences given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProviderAccountPreferences
   * @throws IOException if the JSON string is invalid with respect to ProviderAccountPreferences
   */
  public static ProviderAccountPreferences fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProviderAccountPreferences.class);
  }

  /**
   * Convert an instance of ProviderAccountPreferences to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

