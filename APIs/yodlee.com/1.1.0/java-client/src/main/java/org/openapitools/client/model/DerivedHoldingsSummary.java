/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DerivedHolding;
import org.openapitools.client.model.DerivedHoldingsAccount;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DerivedHoldingsSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.041142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DerivedHoldingsSummary {
  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private List<DerivedHoldingsAccount> account = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLASSIFICATION_TYPE = "classificationType";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION_TYPE)
  private String classificationType;

  public static final String SERIALIZED_NAME_CLASSIFICATION_VALUE = "classificationValue";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION_VALUE)
  private String classificationValue;

  public static final String SERIALIZED_NAME_HOLDING = "holding";
  @SerializedName(SERIALIZED_NAME_HOLDING)
  private List<DerivedHolding> holding = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Money value;

  public DerivedHoldingsSummary() {
  }

  public DerivedHoldingsSummary(
     List<DerivedHoldingsAccount> account, 
     String classificationType, 
     String classificationValue, 
     List<DerivedHolding> holding
  ) {
    this();
    this.account = account;
    this.classificationType = classificationType;
    this.classificationValue = classificationValue;
    this.holding = holding;
  }

  /**
   * Accounts that contribute to the classification. &lt;br&gt;&lt;b&gt;Required Feature Enablement&lt;/b&gt;: Asset classification feature.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return account
   */
  @javax.annotation.Nullable
  public List<DerivedHoldingsAccount> getAccount() {
    return account;
  }



  /**
   * The classification type of the security. The supported asset classification type and the values are provided in the /holdings/assetClassificationList.&lt;br&gt;&lt;b&gt;Required Feature Enablement&lt;/b&gt;: Asset classification feature.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return classificationType
   */
  @javax.annotation.Nullable
  public String getClassificationType() {
    return classificationType;
  }



  /**
   * The classification value that corresponds to the classification type of the holding. The supported asset classification type and the values are provided in the /holdings/assetClassificationList.&lt;br&gt;&lt;b&gt;Required Feature Enablement&lt;/b&gt;: Asset classification feature.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return classificationValue
   */
  @javax.annotation.Nullable
  public String getClassificationValue() {
    return classificationValue;
  }



  /**
   * Securities that belong to the asset classification type and contributed to the summary value.&lt;br&gt;&lt;b&gt;Required Feature Enablement&lt;/b&gt;: Asset classification feature.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: investment, insurance&lt;br&gt;
   * @return holding
   */
  @javax.annotation.Nullable
  public List<DerivedHolding> getHolding() {
    return holding;
  }



  public DerivedHoldingsSummary value(Money value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public Money getValue() {
    return value;
  }

  public void setValue(Money value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DerivedHoldingsSummary derivedHoldingsSummary = (DerivedHoldingsSummary) o;
    return Objects.equals(this.account, derivedHoldingsSummary.account) &&
        Objects.equals(this.classificationType, derivedHoldingsSummary.classificationType) &&
        Objects.equals(this.classificationValue, derivedHoldingsSummary.classificationValue) &&
        Objects.equals(this.holding, derivedHoldingsSummary.holding) &&
        Objects.equals(this.value, derivedHoldingsSummary.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, classificationType, classificationValue, holding, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DerivedHoldingsSummary {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    classificationType: ").append(toIndentedString(classificationType)).append("\n");
    sb.append("    classificationValue: ").append(toIndentedString(classificationValue)).append("\n");
    sb.append("    holding: ").append(toIndentedString(holding)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account");
    openapiFields.add("classificationType");
    openapiFields.add("classificationValue");
    openapiFields.add("holding");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DerivedHoldingsSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DerivedHoldingsSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DerivedHoldingsSummary is not found in the empty JSON string", DerivedHoldingsSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DerivedHoldingsSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DerivedHoldingsSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) {
        JsonArray jsonArrayaccount = jsonObj.getAsJsonArray("account");
        if (jsonArrayaccount != null) {
          // ensure the json data is an array
          if (!jsonObj.get("account").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `account` to be an array in the JSON string but got `%s`", jsonObj.get("account").toString()));
          }

          // validate the optional field `account` (array)
          for (int i = 0; i < jsonArrayaccount.size(); i++) {
            DerivedHoldingsAccount.validateJsonElement(jsonArrayaccount.get(i));
          };
        }
      }
      if ((jsonObj.get("classificationType") != null && !jsonObj.get("classificationType").isJsonNull()) && !jsonObj.get("classificationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `classificationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("classificationType").toString()));
      }
      if ((jsonObj.get("classificationValue") != null && !jsonObj.get("classificationValue").isJsonNull()) && !jsonObj.get("classificationValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `classificationValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("classificationValue").toString()));
      }
      if (jsonObj.get("holding") != null && !jsonObj.get("holding").isJsonNull()) {
        JsonArray jsonArrayholding = jsonObj.getAsJsonArray("holding");
        if (jsonArrayholding != null) {
          // ensure the json data is an array
          if (!jsonObj.get("holding").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `holding` to be an array in the JSON string but got `%s`", jsonObj.get("holding").toString()));
          }

          // validate the optional field `holding` (array)
          for (int i = 0; i < jsonArrayholding.size(); i++) {
            DerivedHolding.validateJsonElement(jsonArrayholding.get(i));
          };
        }
      }
      // validate the optional field `value`
      if (jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("value"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DerivedHoldingsSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DerivedHoldingsSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DerivedHoldingsSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DerivedHoldingsSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<DerivedHoldingsSummary>() {
           @Override
           public void write(JsonWriter out, DerivedHoldingsSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DerivedHoldingsSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DerivedHoldingsSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DerivedHoldingsSummary
   * @throws IOException if the JSON string is invalid with respect to DerivedHoldingsSummary
   */
  public static DerivedHoldingsSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DerivedHoldingsSummary.class);
  }

  /**
   * Convert an instance of DerivedHoldingsSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

