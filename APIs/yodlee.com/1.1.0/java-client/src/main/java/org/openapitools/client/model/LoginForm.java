/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Row;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LoginForm
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.041142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LoginForm {
  public static final String SERIALIZED_NAME_FORGET_PASSWORD_U_R_L = "forgetPasswordURL";
  @SerializedName(SERIALIZED_NAME_FORGET_PASSWORD_U_R_L)
  private String forgetPasswordURL;

  /**
   * The type of the forms for which the user information is required.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
   */
  @JsonAdapter(FormTypeEnum.Adapter.class)
  public enum FormTypeEnum {
    LOGIN("login"),
    
    QUESTION_AND_ANSWER("questionAndAnswer"),
    
    TOKEN("token"),
    
    IMAGE("image");

    private String value;

    FormTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormTypeEnum fromValue(String value) {
      for (FormTypeEnum b : FormTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORM_TYPE = "formType";
  @SerializedName(SERIALIZED_NAME_FORM_TYPE)
  private FormTypeEnum formType;

  public static final String SERIALIZED_NAME_HELP = "help";
  @SerializedName(SERIALIZED_NAME_HELP)
  private String help;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_LOGIN_HELP = "loginHelp";
  @SerializedName(SERIALIZED_NAME_LOGIN_HELP)
  private String loginHelp;

  public static final String SERIALIZED_NAME_MFA_INFO_TEXT = "mfaInfoText";
  @SerializedName(SERIALIZED_NAME_MFA_INFO_TEXT)
  private String mfaInfoText;

  public static final String SERIALIZED_NAME_MFA_INFO_TITLE = "mfaInfoTitle";
  @SerializedName(SERIALIZED_NAME_MFA_INFO_TITLE)
  private String mfaInfoTitle;

  public static final String SERIALIZED_NAME_MFA_TIMEOUT = "mfaTimeout";
  @SerializedName(SERIALIZED_NAME_MFA_TIMEOUT)
  private Long mfaTimeout;

  public static final String SERIALIZED_NAME_ROW = "row";
  @SerializedName(SERIALIZED_NAME_ROW)
  private List<Row> row = new ArrayList<>();

  public LoginForm() {
  }

  public LoginForm(
     String help, 
     String loginHelp, 
     String mfaInfoText, 
     String mfaInfoTitle, 
     Long mfaTimeout
  ) {
    this();
    this.help = help;
    this.loginHelp = loginHelp;
    this.mfaInfoText = mfaInfoText;
    this.mfaInfoTitle = mfaInfoTitle;
    this.mfaTimeout = mfaTimeout;
  }

  public LoginForm forgetPasswordURL(String forgetPasswordURL) {
    this.forgetPasswordURL = forgetPasswordURL;
    return this;
  }

  /**
   * The forget password URL of the provider site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;
   * @return forgetPasswordURL
   */
  @javax.annotation.Nullable
  public String getForgetPasswordURL() {
    return forgetPasswordURL;
  }

  public void setForgetPasswordURL(String forgetPasswordURL) {
    this.forgetPasswordURL = forgetPasswordURL;
  }


  public LoginForm formType(FormTypeEnum formType) {
    this.formType = formType;
    return this;
  }

  /**
   * The type of the forms for which the user information is required.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
   * @return formType
   */
  @javax.annotation.Nullable
  public FormTypeEnum getFormType() {
    return formType;
  }

  public void setFormType(FormTypeEnum formType) {
    this.formType = formType;
  }


  /**
   * The help that can be displayed to the customer in the login form.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;
   * @return help
   */
  @javax.annotation.Nullable
  public String getHelp() {
    return help;
  }



  public LoginForm id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * The identifier of the login form.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  /**
   * The help that can be displayed to the customer in the login form.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;
   * @return loginHelp
   */
  @javax.annotation.Nullable
  public String getLoginHelp() {
    return loginHelp;
  }



  /**
   * The text displayed in the provider site while requesting the user&#39;s MFA information. This field is applicable for MFA form types only. &lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;/ul&gt;
   * @return mfaInfoText
   */
  @javax.annotation.Nullable
  public String getMfaInfoText() {
    return mfaInfoText;
  }



  /**
   * The title for the MFA information demanded from the user.This is the title displayed in the provider site.This field is applicable for MFA form types only. &lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;/ul&gt;
   * @return mfaInfoTitle
   */
  @javax.annotation.Nullable
  public String getMfaInfoTitle() {
    return mfaInfoTitle;
  }



  /**
   * The amount of time before which the user is expected to provide MFA information. This field is applicable for MFA form types only. This would be an useful information that could be displayed to the users. &lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;
   * @return mfaTimeout
   */
  @javax.annotation.Nullable
  public Long getMfaTimeout() {
    return mfaTimeout;
  }



  public LoginForm row(List<Row> row) {
    this.row = row;
    return this;
  }

  public LoginForm addRowItem(Row rowItem) {
    if (this.row == null) {
      this.row = new ArrayList<>();
    }
    this.row.add(rowItem);
    return this;
  }

  /**
   * This indicates one row in the form. The row will have one label. But it may have single or multiple fields.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providerAccounts/{providerAccountId}&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;
   * @return row
   */
  @javax.annotation.Nullable
  public List<Row> getRow() {
    return row;
  }

  public void setRow(List<Row> row) {
    this.row = row;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoginForm loginForm = (LoginForm) o;
    return Objects.equals(this.forgetPasswordURL, loginForm.forgetPasswordURL) &&
        Objects.equals(this.formType, loginForm.formType) &&
        Objects.equals(this.help, loginForm.help) &&
        Objects.equals(this.id, loginForm.id) &&
        Objects.equals(this.loginHelp, loginForm.loginHelp) &&
        Objects.equals(this.mfaInfoText, loginForm.mfaInfoText) &&
        Objects.equals(this.mfaInfoTitle, loginForm.mfaInfoTitle) &&
        Objects.equals(this.mfaTimeout, loginForm.mfaTimeout) &&
        Objects.equals(this.row, loginForm.row);
  }

  @Override
  public int hashCode() {
    return Objects.hash(forgetPasswordURL, formType, help, id, loginHelp, mfaInfoText, mfaInfoTitle, mfaTimeout, row);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoginForm {\n");
    sb.append("    forgetPasswordURL: ").append(toIndentedString(forgetPasswordURL)).append("\n");
    sb.append("    formType: ").append(toIndentedString(formType)).append("\n");
    sb.append("    help: ").append(toIndentedString(help)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    loginHelp: ").append(toIndentedString(loginHelp)).append("\n");
    sb.append("    mfaInfoText: ").append(toIndentedString(mfaInfoText)).append("\n");
    sb.append("    mfaInfoTitle: ").append(toIndentedString(mfaInfoTitle)).append("\n");
    sb.append("    mfaTimeout: ").append(toIndentedString(mfaTimeout)).append("\n");
    sb.append("    row: ").append(toIndentedString(row)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("forgetPasswordURL");
    openapiFields.add("formType");
    openapiFields.add("help");
    openapiFields.add("id");
    openapiFields.add("loginHelp");
    openapiFields.add("mfaInfoText");
    openapiFields.add("mfaInfoTitle");
    openapiFields.add("mfaTimeout");
    openapiFields.add("row");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LoginForm
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoginForm.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoginForm is not found in the empty JSON string", LoginForm.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoginForm.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoginForm` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("forgetPasswordURL") != null && !jsonObj.get("forgetPasswordURL").isJsonNull()) && !jsonObj.get("forgetPasswordURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forgetPasswordURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forgetPasswordURL").toString()));
      }
      if ((jsonObj.get("formType") != null && !jsonObj.get("formType").isJsonNull()) && !jsonObj.get("formType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formType").toString()));
      }
      // validate the optional field `formType`
      if (jsonObj.get("formType") != null && !jsonObj.get("formType").isJsonNull()) {
        FormTypeEnum.validateJsonElement(jsonObj.get("formType"));
      }
      if ((jsonObj.get("help") != null && !jsonObj.get("help").isJsonNull()) && !jsonObj.get("help").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `help` to be a primitive type in the JSON string but got `%s`", jsonObj.get("help").toString()));
      }
      if ((jsonObj.get("loginHelp") != null && !jsonObj.get("loginHelp").isJsonNull()) && !jsonObj.get("loginHelp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loginHelp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loginHelp").toString()));
      }
      if ((jsonObj.get("mfaInfoText") != null && !jsonObj.get("mfaInfoText").isJsonNull()) && !jsonObj.get("mfaInfoText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mfaInfoText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mfaInfoText").toString()));
      }
      if ((jsonObj.get("mfaInfoTitle") != null && !jsonObj.get("mfaInfoTitle").isJsonNull()) && !jsonObj.get("mfaInfoTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mfaInfoTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mfaInfoTitle").toString()));
      }
      if (jsonObj.get("row") != null && !jsonObj.get("row").isJsonNull()) {
        JsonArray jsonArrayrow = jsonObj.getAsJsonArray("row");
        if (jsonArrayrow != null) {
          // ensure the json data is an array
          if (!jsonObj.get("row").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `row` to be an array in the JSON string but got `%s`", jsonObj.get("row").toString()));
          }

          // validate the optional field `row` (array)
          for (int i = 0; i < jsonArrayrow.size(); i++) {
            Row.validateJsonElement(jsonArrayrow.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoginForm.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoginForm' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoginForm> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoginForm.class));

       return (TypeAdapter<T>) new TypeAdapter<LoginForm>() {
           @Override
           public void write(JsonWriter out, LoginForm value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoginForm read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LoginForm given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoginForm
   * @throws IOException if the JSON string is invalid with respect to LoginForm
   */
  public static LoginForm fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoginForm.class);
  }

  /**
   * Convert an instance of LoginForm to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

