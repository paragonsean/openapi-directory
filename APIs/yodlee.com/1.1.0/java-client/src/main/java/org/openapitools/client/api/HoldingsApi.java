/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.HoldingAssetClassificationListResponse;
import org.openapitools.client.model.HoldingResponse;
import org.openapitools.client.model.HoldingSecuritiesResponse;
import org.openapitools.client.model.HoldingTypeListResponse;
import org.openapitools.client.model.YodleeError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HoldingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HoldingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HoldingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAssetClassificationList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetClassificationListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/holdings/assetClassificationList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetClassificationListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAssetClassificationListCall(_callback);

    }

    /**
     * Get Asset Classification List
     * The get asset classifications list service is used to get the supported asset classifications. &lt;br&gt;The response includes different classification types like assetClass, country, sector, style, etc. and the values corresponding to each type.&lt;br&gt;
     * @return HoldingAssetClassificationListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public HoldingAssetClassificationListResponse getAssetClassificationList() throws ApiException {
        ApiResponse<HoldingAssetClassificationListResponse> localVarResp = getAssetClassificationListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Asset Classification List
     * The get asset classifications list service is used to get the supported asset classifications. &lt;br&gt;The response includes different classification types like assetClass, country, sector, style, etc. and the values corresponding to each type.&lt;br&gt;
     * @return ApiResponse&lt;HoldingAssetClassificationListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HoldingAssetClassificationListResponse> getAssetClassificationListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAssetClassificationListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<HoldingAssetClassificationListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Asset Classification List (asynchronously)
     * The get asset classifications list service is used to get the supported asset classifications. &lt;br&gt;The response includes different classification types like assetClass, country, sector, style, etc. and the values corresponding to each type.&lt;br&gt;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssetClassificationListAsync(final ApiCallback<HoldingAssetClassificationListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetClassificationListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<HoldingAssetClassificationListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHoldingTypeList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHoldingTypeListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/holdings/holdingTypeList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHoldingTypeListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getHoldingTypeListCall(_callback);

    }

    /**
     * Get Holding Type List
     * The get holding types list service is used to get the supported holding types.&lt;br&gt;The response includes different holding types such as future, moneyMarketFund, stock, etc. and it returns the supported holding types &lt;br&gt;
     * @return HoldingTypeListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public HoldingTypeListResponse getHoldingTypeList() throws ApiException {
        ApiResponse<HoldingTypeListResponse> localVarResp = getHoldingTypeListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Holding Type List
     * The get holding types list service is used to get the supported holding types.&lt;br&gt;The response includes different holding types such as future, moneyMarketFund, stock, etc. and it returns the supported holding types &lt;br&gt;
     * @return ApiResponse&lt;HoldingTypeListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HoldingTypeListResponse> getHoldingTypeListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getHoldingTypeListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<HoldingTypeListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Holding Type List (asynchronously)
     * The get holding types list service is used to get the supported holding types.&lt;br&gt;The response includes different holding types such as future, moneyMarketFund, stock, etc. and it returns the supported holding types &lt;br&gt;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHoldingTypeListAsync(final ApiCallback<HoldingTypeListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHoldingTypeListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<HoldingTypeListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHoldings
     * @param accountId Comma separated accountId (optional)
     * @param assetClassificationClassificationType e.g. Country, Sector, etc. (optional)
     * @param classificationValue e.g. US (optional)
     * @param include assetClassification (optional)
     * @param providerAccountId providerAccountId (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for accountId&lt;br&gt;Y800 : Invalid value for providerAccountId&lt;br&gt;Y800 : Invalid value for include&lt;br&gt;Y800 : Invalid value for classificationType&lt;br&gt;Y800 : Invalid value for classificationValue&lt;br&gt;Y800 : Invalid value for include&lt;br&gt;Y400 : classificationType mismatch&lt;br&gt;Y400 : classificationValue mismatch&lt;br&gt;Y824 : The maximum number of accountIds permitted is 100 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHoldingsCall(String accountId, String assetClassificationClassificationType, String classificationValue, String include, String providerAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/holdings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        if (assetClassificationClassificationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assetClassification.classificationType", assetClassificationClassificationType));
        }

        if (classificationValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("classificationValue", classificationValue));
        }

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        if (providerAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("providerAccountId", providerAccountId));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHoldingsValidateBeforeCall(String accountId, String assetClassificationClassificationType, String classificationValue, String include, String providerAccountId, final ApiCallback _callback) throws ApiException {
        return getHoldingsCall(accountId, assetClassificationClassificationType, classificationValue, include, providerAccountId, _callback);

    }

    /**
     * Get Holdings
     * The get holdings service is used to get the list of holdings of a user.&lt;br&gt;Supported holding types can be employeeStockOption, moneyMarketFund, bond, etc. and is obtained using get holding type list service. &lt;br&gt;Asset classifications for the holdings need to be requested through the \&quot;include\&quot; parameter.&lt;br&gt;Asset classification information for holdings are not available by default, as it is a premium feature.&lt;br&gt;
     * @param accountId Comma separated accountId (optional)
     * @param assetClassificationClassificationType e.g. Country, Sector, etc. (optional)
     * @param classificationValue e.g. US (optional)
     * @param include assetClassification (optional)
     * @param providerAccountId providerAccountId (optional)
     * @return HoldingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for accountId&lt;br&gt;Y800 : Invalid value for providerAccountId&lt;br&gt;Y800 : Invalid value for include&lt;br&gt;Y800 : Invalid value for classificationType&lt;br&gt;Y800 : Invalid value for classificationValue&lt;br&gt;Y800 : Invalid value for include&lt;br&gt;Y400 : classificationType mismatch&lt;br&gt;Y400 : classificationValue mismatch&lt;br&gt;Y824 : The maximum number of accountIds permitted is 100 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public HoldingResponse getHoldings(String accountId, String assetClassificationClassificationType, String classificationValue, String include, String providerAccountId) throws ApiException {
        ApiResponse<HoldingResponse> localVarResp = getHoldingsWithHttpInfo(accountId, assetClassificationClassificationType, classificationValue, include, providerAccountId);
        return localVarResp.getData();
    }

    /**
     * Get Holdings
     * The get holdings service is used to get the list of holdings of a user.&lt;br&gt;Supported holding types can be employeeStockOption, moneyMarketFund, bond, etc. and is obtained using get holding type list service. &lt;br&gt;Asset classifications for the holdings need to be requested through the \&quot;include\&quot; parameter.&lt;br&gt;Asset classification information for holdings are not available by default, as it is a premium feature.&lt;br&gt;
     * @param accountId Comma separated accountId (optional)
     * @param assetClassificationClassificationType e.g. Country, Sector, etc. (optional)
     * @param classificationValue e.g. US (optional)
     * @param include assetClassification (optional)
     * @param providerAccountId providerAccountId (optional)
     * @return ApiResponse&lt;HoldingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for accountId&lt;br&gt;Y800 : Invalid value for providerAccountId&lt;br&gt;Y800 : Invalid value for include&lt;br&gt;Y800 : Invalid value for classificationType&lt;br&gt;Y800 : Invalid value for classificationValue&lt;br&gt;Y800 : Invalid value for include&lt;br&gt;Y400 : classificationType mismatch&lt;br&gt;Y400 : classificationValue mismatch&lt;br&gt;Y824 : The maximum number of accountIds permitted is 100 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HoldingResponse> getHoldingsWithHttpInfo(String accountId, String assetClassificationClassificationType, String classificationValue, String include, String providerAccountId) throws ApiException {
        okhttp3.Call localVarCall = getHoldingsValidateBeforeCall(accountId, assetClassificationClassificationType, classificationValue, include, providerAccountId, null);
        Type localVarReturnType = new TypeToken<HoldingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Holdings (asynchronously)
     * The get holdings service is used to get the list of holdings of a user.&lt;br&gt;Supported holding types can be employeeStockOption, moneyMarketFund, bond, etc. and is obtained using get holding type list service. &lt;br&gt;Asset classifications for the holdings need to be requested through the \&quot;include\&quot; parameter.&lt;br&gt;Asset classification information for holdings are not available by default, as it is a premium feature.&lt;br&gt;
     * @param accountId Comma separated accountId (optional)
     * @param assetClassificationClassificationType e.g. Country, Sector, etc. (optional)
     * @param classificationValue e.g. US (optional)
     * @param include assetClassification (optional)
     * @param providerAccountId providerAccountId (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for accountId&lt;br&gt;Y800 : Invalid value for providerAccountId&lt;br&gt;Y800 : Invalid value for include&lt;br&gt;Y800 : Invalid value for classificationType&lt;br&gt;Y800 : Invalid value for classificationValue&lt;br&gt;Y800 : Invalid value for include&lt;br&gt;Y400 : classificationType mismatch&lt;br&gt;Y400 : classificationValue mismatch&lt;br&gt;Y824 : The maximum number of accountIds permitted is 100 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHoldingsAsync(String accountId, String assetClassificationClassificationType, String classificationValue, String include, String providerAccountId, final ApiCallback<HoldingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHoldingsValidateBeforeCall(accountId, assetClassificationClassificationType, classificationValue, include, providerAccountId, _callback);
        Type localVarReturnType = new TypeToken<HoldingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSecurities
     * @param holdingId Comma separated holdingId (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for holdingId&lt;br&gt;Y824 : The maximum number of holdingIds permitted is 100 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSecuritiesCall(String holdingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/holdings/securities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (holdingId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("holdingId", holdingId));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSecuritiesValidateBeforeCall(String holdingId, final ApiCallback _callback) throws ApiException {
        return getSecuritiesCall(holdingId, _callback);

    }

    /**
     * Get Security Details
     * The get security details service is used to get all the security information for the holdings&lt;br&gt;
     * @param holdingId Comma separated holdingId (optional)
     * @return HoldingSecuritiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for holdingId&lt;br&gt;Y824 : The maximum number of holdingIds permitted is 100 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public HoldingSecuritiesResponse getSecurities(String holdingId) throws ApiException {
        ApiResponse<HoldingSecuritiesResponse> localVarResp = getSecuritiesWithHttpInfo(holdingId);
        return localVarResp.getData();
    }

    /**
     * Get Security Details
     * The get security details service is used to get all the security information for the holdings&lt;br&gt;
     * @param holdingId Comma separated holdingId (optional)
     * @return ApiResponse&lt;HoldingSecuritiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for holdingId&lt;br&gt;Y824 : The maximum number of holdingIds permitted is 100 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HoldingSecuritiesResponse> getSecuritiesWithHttpInfo(String holdingId) throws ApiException {
        okhttp3.Call localVarCall = getSecuritiesValidateBeforeCall(holdingId, null);
        Type localVarReturnType = new TypeToken<HoldingSecuritiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Security Details (asynchronously)
     * The get security details service is used to get all the security information for the holdings&lt;br&gt;
     * @param holdingId Comma separated holdingId (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for holdingId&lt;br&gt;Y824 : The maximum number of holdingIds permitted is 100 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSecuritiesAsync(String holdingId, final ApiCallback<HoldingSecuritiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSecuritiesValidateBeforeCall(holdingId, _callback);
        Type localVarReturnType = new TypeToken<HoldingSecuritiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
