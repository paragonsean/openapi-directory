/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Transaction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VerifyTransactionCriteria
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.041142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VerifyTransactionCriteria {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  /**
   * Indicates if the transaction appears as a debit or a credit transaction in the account. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
   */
  @JsonAdapter(BaseTypeEnum.Adapter.class)
  public enum BaseTypeEnum {
    CREDIT("CREDIT"),
    
    DEBIT("DEBIT");

    private String value;

    BaseTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BaseTypeEnum fromValue(String value) {
      for (BaseTypeEnum b : BaseTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BaseTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BaseTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BaseTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BaseTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BaseTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BASE_TYPE = "baseType";
  @SerializedName(SERIALIZED_NAME_BASE_TYPE)
  private BaseTypeEnum baseType;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_DATE_VARIANCE = "dateVariance";
  @SerializedName(SERIALIZED_NAME_DATE_VARIANCE)
  private String dateVariance;

  public static final String SERIALIZED_NAME_KEYWORD = "keyword";
  @SerializedName(SERIALIZED_NAME_KEYWORD)
  private String keyword;

  /**
   * Indicates if the criteria is matched or not. &lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
   */
  @JsonAdapter(MatchedEnum.Adapter.class)
  public enum MatchedEnum {
    COMPLETE("COMPLETE"),
    
    NONE("NONE");

    private String value;

    MatchedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MatchedEnum fromValue(String value) {
      for (MatchedEnum b : MatchedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MatchedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MatchedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MatchedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MatchedEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MatchedEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MATCHED = "matched";
  @SerializedName(SERIALIZED_NAME_MATCHED)
  private MatchedEnum matched;

  public static final String SERIALIZED_NAME_VERIFIED_TRANSACTION = "verifiedTransaction";
  @SerializedName(SERIALIZED_NAME_VERIFIED_TRANSACTION)
  private List<Transaction> verifiedTransaction = new ArrayList<>();

  public VerifyTransactionCriteria() {
  }

  public VerifyTransactionCriteria(
     MatchedEnum matched, 
     List<Transaction> verifiedTransaction
  ) {
    this();
    this.matched = matched;
    this.verifiedTransaction = verifiedTransaction;
  }

  public VerifyTransactionCriteria amount(Double amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nonnull
  public Double getAmount() {
    return amount;
  }

  public void setAmount(Double amount) {
    this.amount = amount;
  }


  public VerifyTransactionCriteria baseType(BaseTypeEnum baseType) {
    this.baseType = baseType;
    return this;
  }

  /**
   * Indicates if the transaction appears as a debit or a credit transaction in the account. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: bank,creditCard,investment,insurance,loan&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
   * @return baseType
   */
  @javax.annotation.Nullable
  public BaseTypeEnum getBaseType() {
    return baseType;
  }

  public void setBaseType(BaseTypeEnum baseType) {
    this.baseType = baseType;
  }


  public VerifyTransactionCriteria date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nonnull
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public VerifyTransactionCriteria dateVariance(String dateVariance) {
    this.dateVariance = dateVariance;
    return this;
  }

  /**
   * Get dateVariance
   * @return dateVariance
   */
  @javax.annotation.Nullable
  public String getDateVariance() {
    return dateVariance;
  }

  public void setDateVariance(String dateVariance) {
    this.dateVariance = dateVariance;
  }


  public VerifyTransactionCriteria keyword(String keyword) {
    this.keyword = keyword;
    return this;
  }

  /**
   * Get keyword
   * @return keyword
   */
  @javax.annotation.Nullable
  public String getKeyword() {
    return keyword;
  }

  public void setKeyword(String keyword) {
    this.keyword = keyword;
  }


  /**
   * Indicates if the criteria is matched or not. &lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
   * @return matched
   */
  @javax.annotation.Nullable
  public MatchedEnum getMatched() {
    return matched;
  }



  /**
   * Get verifiedTransaction
   * @return verifiedTransaction
   */
  @javax.annotation.Nullable
  public List<Transaction> getVerifiedTransaction() {
    return verifiedTransaction;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerifyTransactionCriteria verifyTransactionCriteria = (VerifyTransactionCriteria) o;
    return Objects.equals(this.amount, verifyTransactionCriteria.amount) &&
        Objects.equals(this.baseType, verifyTransactionCriteria.baseType) &&
        Objects.equals(this.date, verifyTransactionCriteria.date) &&
        Objects.equals(this.dateVariance, verifyTransactionCriteria.dateVariance) &&
        Objects.equals(this.keyword, verifyTransactionCriteria.keyword) &&
        Objects.equals(this.matched, verifyTransactionCriteria.matched) &&
        Objects.equals(this.verifiedTransaction, verifyTransactionCriteria.verifiedTransaction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, baseType, date, dateVariance, keyword, matched, verifiedTransaction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerifyTransactionCriteria {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    baseType: ").append(toIndentedString(baseType)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    dateVariance: ").append(toIndentedString(dateVariance)).append("\n");
    sb.append("    keyword: ").append(toIndentedString(keyword)).append("\n");
    sb.append("    matched: ").append(toIndentedString(matched)).append("\n");
    sb.append("    verifiedTransaction: ").append(toIndentedString(verifiedTransaction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("baseType");
    openapiFields.add("date");
    openapiFields.add("dateVariance");
    openapiFields.add("keyword");
    openapiFields.add("matched");
    openapiFields.add("verifiedTransaction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("date");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VerifyTransactionCriteria
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VerifyTransactionCriteria.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VerifyTransactionCriteria is not found in the empty JSON string", VerifyTransactionCriteria.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VerifyTransactionCriteria.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VerifyTransactionCriteria` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VerifyTransactionCriteria.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("baseType") != null && !jsonObj.get("baseType").isJsonNull()) && !jsonObj.get("baseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseType").toString()));
      }
      // validate the optional field `baseType`
      if (jsonObj.get("baseType") != null && !jsonObj.get("baseType").isJsonNull()) {
        BaseTypeEnum.validateJsonElement(jsonObj.get("baseType"));
      }
      if (!jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if ((jsonObj.get("dateVariance") != null && !jsonObj.get("dateVariance").isJsonNull()) && !jsonObj.get("dateVariance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateVariance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateVariance").toString()));
      }
      if ((jsonObj.get("keyword") != null && !jsonObj.get("keyword").isJsonNull()) && !jsonObj.get("keyword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyword").toString()));
      }
      if ((jsonObj.get("matched") != null && !jsonObj.get("matched").isJsonNull()) && !jsonObj.get("matched").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matched` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matched").toString()));
      }
      // validate the optional field `matched`
      if (jsonObj.get("matched") != null && !jsonObj.get("matched").isJsonNull()) {
        MatchedEnum.validateJsonElement(jsonObj.get("matched"));
      }
      if (jsonObj.get("verifiedTransaction") != null && !jsonObj.get("verifiedTransaction").isJsonNull()) {
        JsonArray jsonArrayverifiedTransaction = jsonObj.getAsJsonArray("verifiedTransaction");
        if (jsonArrayverifiedTransaction != null) {
          // ensure the json data is an array
          if (!jsonObj.get("verifiedTransaction").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `verifiedTransaction` to be an array in the JSON string but got `%s`", jsonObj.get("verifiedTransaction").toString()));
          }

          // validate the optional field `verifiedTransaction` (array)
          for (int i = 0; i < jsonArrayverifiedTransaction.size(); i++) {
            Transaction.validateJsonElement(jsonArrayverifiedTransaction.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VerifyTransactionCriteria.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VerifyTransactionCriteria' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VerifyTransactionCriteria> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VerifyTransactionCriteria.class));

       return (TypeAdapter<T>) new TypeAdapter<VerifyTransactionCriteria>() {
           @Override
           public void write(JsonWriter out, VerifyTransactionCriteria value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VerifyTransactionCriteria read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VerifyTransactionCriteria given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VerifyTransactionCriteria
   * @throws IOException if the JSON string is invalid with respect to VerifyTransactionCriteria
   */
  public static VerifyTransactionCriteria fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VerifyTransactionCriteria.class);
  }

  /**
   * Convert an instance of VerifyTransactionCriteria to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

