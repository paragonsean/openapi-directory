/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.StatementResponse;
import org.openapitools.client.model.YodleeError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StatementsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StatementsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StatementsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getStatements
     * @param accountId accountId (optional)
     * @param container creditCard/loan/insurance (optional)
     * @param fromDate from date for statement retrieval (YYYY-MM-DD) (optional)
     * @param isLatest isLatest (true/false) (optional)
     * @param status ACTIVE,TO_BE_CLOSED,CLOSED (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for accountId&lt;br&gt;Y800 : Invalid value for status&lt;br&gt;Y805 : Multiple containers not supported&lt;br&gt;Y800 : Invalid value for container&lt;br&gt;Y800 : Invalid value for isLatest&lt;br&gt;Y800 : Invalid value for fromDate&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatementsCall(String accountId, String container, String fromDate, String isLatest, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        if (container != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("container", container));
        }

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (isLatest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isLatest", isLatest));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatementsValidateBeforeCall(String accountId, String container, String fromDate, String isLatest, String status, final ApiCallback _callback) throws ApiException {
        return getStatementsCall(accountId, container, fromDate, isLatest, status, _callback);

    }

    /**
     * Get Statements
     * The statements service is used to get the list of statement related information. &lt;br&gt;By default, all the latest statements of active and to be closed accounts are retrieved for the user. &lt;br&gt;Certain sites do not have both a statement date and a due date. When a fromDate is passed as an input, all the statements that have the due date on or after the passed date are retrieved. &lt;br&gt;For sites that do not have the due date, statements that have the statement date on or after the passed date are retrieved. &lt;br&gt;The default value of \&quot;isLatest\&quot; is true. To retrieve historical statements isLatest needs to be set to false.&lt;br&gt;
     * @param accountId accountId (optional)
     * @param container creditCard/loan/insurance (optional)
     * @param fromDate from date for statement retrieval (YYYY-MM-DD) (optional)
     * @param isLatest isLatest (true/false) (optional)
     * @param status ACTIVE,TO_BE_CLOSED,CLOSED (optional)
     * @return StatementResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for accountId&lt;br&gt;Y800 : Invalid value for status&lt;br&gt;Y805 : Multiple containers not supported&lt;br&gt;Y800 : Invalid value for container&lt;br&gt;Y800 : Invalid value for isLatest&lt;br&gt;Y800 : Invalid value for fromDate&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public StatementResponse getStatements(String accountId, String container, String fromDate, String isLatest, String status) throws ApiException {
        ApiResponse<StatementResponse> localVarResp = getStatementsWithHttpInfo(accountId, container, fromDate, isLatest, status);
        return localVarResp.getData();
    }

    /**
     * Get Statements
     * The statements service is used to get the list of statement related information. &lt;br&gt;By default, all the latest statements of active and to be closed accounts are retrieved for the user. &lt;br&gt;Certain sites do not have both a statement date and a due date. When a fromDate is passed as an input, all the statements that have the due date on or after the passed date are retrieved. &lt;br&gt;For sites that do not have the due date, statements that have the statement date on or after the passed date are retrieved. &lt;br&gt;The default value of \&quot;isLatest\&quot; is true. To retrieve historical statements isLatest needs to be set to false.&lt;br&gt;
     * @param accountId accountId (optional)
     * @param container creditCard/loan/insurance (optional)
     * @param fromDate from date for statement retrieval (YYYY-MM-DD) (optional)
     * @param isLatest isLatest (true/false) (optional)
     * @param status ACTIVE,TO_BE_CLOSED,CLOSED (optional)
     * @return ApiResponse&lt;StatementResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for accountId&lt;br&gt;Y800 : Invalid value for status&lt;br&gt;Y805 : Multiple containers not supported&lt;br&gt;Y800 : Invalid value for container&lt;br&gt;Y800 : Invalid value for isLatest&lt;br&gt;Y800 : Invalid value for fromDate&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StatementResponse> getStatementsWithHttpInfo(String accountId, String container, String fromDate, String isLatest, String status) throws ApiException {
        okhttp3.Call localVarCall = getStatementsValidateBeforeCall(accountId, container, fromDate, isLatest, status, null);
        Type localVarReturnType = new TypeToken<StatementResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Statements (asynchronously)
     * The statements service is used to get the list of statement related information. &lt;br&gt;By default, all the latest statements of active and to be closed accounts are retrieved for the user. &lt;br&gt;Certain sites do not have both a statement date and a due date. When a fromDate is passed as an input, all the statements that have the due date on or after the passed date are retrieved. &lt;br&gt;For sites that do not have the due date, statements that have the statement date on or after the passed date are retrieved. &lt;br&gt;The default value of \&quot;isLatest\&quot; is true. To retrieve historical statements isLatest needs to be set to false.&lt;br&gt;
     * @param accountId accountId (optional)
     * @param container creditCard/loan/insurance (optional)
     * @param fromDate from date for statement retrieval (YYYY-MM-DD) (optional)
     * @param isLatest isLatest (true/false) (optional)
     * @param status ACTIVE,TO_BE_CLOSED,CLOSED (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for accountId&lt;br&gt;Y800 : Invalid value for status&lt;br&gt;Y805 : Multiple containers not supported&lt;br&gt;Y800 : Invalid value for container&lt;br&gt;Y800 : Invalid value for isLatest&lt;br&gt;Y800 : Invalid value for fromDate&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatementsAsync(String accountId, String container, String fromDate, String isLatest, String status, final ApiCallback<StatementResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatementsValidateBeforeCall(accountId, container, fromDate, isLatest, status, _callback);
        Type localVarReturnType = new TypeToken<StatementResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
