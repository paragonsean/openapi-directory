/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DataExtractsAccount;
import org.openapitools.client.model.DataExtractsHolding;
import org.openapitools.client.model.DataExtractsProviderAccount;
import org.openapitools.client.model.DataExtractsTransaction;
import org.openapitools.client.model.DataExtractsUser;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DataExtractsUserData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.041142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataExtractsUserData {
  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private List<DataExtractsAccount> account = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOLDING = "holding";
  @SerializedName(SERIALIZED_NAME_HOLDING)
  private List<DataExtractsHolding> holding = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVIDER_ACCOUNT = "providerAccount";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ACCOUNT)
  private List<DataExtractsProviderAccount> providerAccount = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_TRANSACTIONS_COUNT = "totalTransactionsCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_TRANSACTIONS_COUNT)
  private Long totalTransactionsCount;

  public static final String SERIALIZED_NAME_TRANSACTION = "transaction";
  @SerializedName(SERIALIZED_NAME_TRANSACTION)
  private List<DataExtractsTransaction> transaction = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private DataExtractsUser user;

  public DataExtractsUserData() {
  }

  public DataExtractsUserData(
     List<DataExtractsAccount> account, 
     List<DataExtractsHolding> holding, 
     List<DataExtractsProviderAccount> providerAccount, 
     Long totalTransactionsCount, 
     List<DataExtractsTransaction> transaction
  ) {
    this();
    this.account = account;
    this.holding = holding;
    this.providerAccount = providerAccount;
    this.totalTransactionsCount = totalTransactionsCount;
    this.transaction = transaction;
  }

  /**
   * Get account
   * @return account
   */
  @javax.annotation.Nullable
  public List<DataExtractsAccount> getAccount() {
    return account;
  }



  /**
   * Get holding
   * @return holding
   */
  @javax.annotation.Nullable
  public List<DataExtractsHolding> getHolding() {
    return holding;
  }



  /**
   * Get providerAccount
   * @return providerAccount
   */
  @javax.annotation.Nullable
  public List<DataExtractsProviderAccount> getProviderAccount() {
    return providerAccount;
  }



  /**
   * Get totalTransactionsCount
   * @return totalTransactionsCount
   */
  @javax.annotation.Nullable
  public Long getTotalTransactionsCount() {
    return totalTransactionsCount;
  }



  /**
   * Get transaction
   * @return transaction
   */
  @javax.annotation.Nullable
  public List<DataExtractsTransaction> getTransaction() {
    return transaction;
  }



  public DataExtractsUserData user(DataExtractsUser user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public DataExtractsUser getUser() {
    return user;
  }

  public void setUser(DataExtractsUser user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataExtractsUserData dataExtractsUserData = (DataExtractsUserData) o;
    return Objects.equals(this.account, dataExtractsUserData.account) &&
        Objects.equals(this.holding, dataExtractsUserData.holding) &&
        Objects.equals(this.providerAccount, dataExtractsUserData.providerAccount) &&
        Objects.equals(this.totalTransactionsCount, dataExtractsUserData.totalTransactionsCount) &&
        Objects.equals(this.transaction, dataExtractsUserData.transaction) &&
        Objects.equals(this.user, dataExtractsUserData.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, holding, providerAccount, totalTransactionsCount, transaction, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataExtractsUserData {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    holding: ").append(toIndentedString(holding)).append("\n");
    sb.append("    providerAccount: ").append(toIndentedString(providerAccount)).append("\n");
    sb.append("    totalTransactionsCount: ").append(toIndentedString(totalTransactionsCount)).append("\n");
    sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account");
    openapiFields.add("holding");
    openapiFields.add("providerAccount");
    openapiFields.add("totalTransactionsCount");
    openapiFields.add("transaction");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataExtractsUserData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataExtractsUserData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataExtractsUserData is not found in the empty JSON string", DataExtractsUserData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataExtractsUserData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataExtractsUserData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) {
        JsonArray jsonArrayaccount = jsonObj.getAsJsonArray("account");
        if (jsonArrayaccount != null) {
          // ensure the json data is an array
          if (!jsonObj.get("account").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `account` to be an array in the JSON string but got `%s`", jsonObj.get("account").toString()));
          }

          // validate the optional field `account` (array)
          for (int i = 0; i < jsonArrayaccount.size(); i++) {
            DataExtractsAccount.validateJsonElement(jsonArrayaccount.get(i));
          };
        }
      }
      if (jsonObj.get("holding") != null && !jsonObj.get("holding").isJsonNull()) {
        JsonArray jsonArrayholding = jsonObj.getAsJsonArray("holding");
        if (jsonArrayholding != null) {
          // ensure the json data is an array
          if (!jsonObj.get("holding").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `holding` to be an array in the JSON string but got `%s`", jsonObj.get("holding").toString()));
          }

          // validate the optional field `holding` (array)
          for (int i = 0; i < jsonArrayholding.size(); i++) {
            DataExtractsHolding.validateJsonElement(jsonArrayholding.get(i));
          };
        }
      }
      if (jsonObj.get("providerAccount") != null && !jsonObj.get("providerAccount").isJsonNull()) {
        JsonArray jsonArrayproviderAccount = jsonObj.getAsJsonArray("providerAccount");
        if (jsonArrayproviderAccount != null) {
          // ensure the json data is an array
          if (!jsonObj.get("providerAccount").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `providerAccount` to be an array in the JSON string but got `%s`", jsonObj.get("providerAccount").toString()));
          }

          // validate the optional field `providerAccount` (array)
          for (int i = 0; i < jsonArrayproviderAccount.size(); i++) {
            DataExtractsProviderAccount.validateJsonElement(jsonArrayproviderAccount.get(i));
          };
        }
      }
      if (jsonObj.get("transaction") != null && !jsonObj.get("transaction").isJsonNull()) {
        JsonArray jsonArraytransaction = jsonObj.getAsJsonArray("transaction");
        if (jsonArraytransaction != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transaction").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transaction` to be an array in the JSON string but got `%s`", jsonObj.get("transaction").toString()));
          }

          // validate the optional field `transaction` (array)
          for (int i = 0; i < jsonArraytransaction.size(); i++) {
            DataExtractsTransaction.validateJsonElement(jsonArraytransaction.get(i));
          };
        }
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        DataExtractsUser.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataExtractsUserData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataExtractsUserData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataExtractsUserData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataExtractsUserData.class));

       return (TypeAdapter<T>) new TypeAdapter<DataExtractsUserData>() {
           @Override
           public void write(JsonWriter out, DataExtractsUserData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataExtractsUserData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataExtractsUserData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataExtractsUserData
   * @throws IOException if the JSON string is invalid with respect to DataExtractsUserData
   */
  public static DataExtractsUserData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataExtractsUserData.class);
  }

  /**
   * Convert an instance of DataExtractsUserData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

