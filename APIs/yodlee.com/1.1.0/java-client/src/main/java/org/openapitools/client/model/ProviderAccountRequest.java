/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Field;
import org.openapitools.client.model.ProviderAccountPreferences;
import org.openapitools.client.model.ProvidersDataset;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProviderAccountRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.041142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProviderAccountRequest {
  /**
   * Gets or Sets aggregationSource
   */
  @JsonAdapter(AggregationSourceEnum.Adapter.class)
  public enum AggregationSourceEnum {
    SYSTEM("SYSTEM"),
    
    USER("USER");

    private String value;

    AggregationSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AggregationSourceEnum fromValue(String value) {
      for (AggregationSourceEnum b : AggregationSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AggregationSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AggregationSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AggregationSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AggregationSourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AggregationSourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AGGREGATION_SOURCE = "aggregationSource";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_SOURCE)
  private AggregationSourceEnum aggregationSource;

  public static final String SERIALIZED_NAME_CONSENT_ID = "consentId";
  @SerializedName(SERIALIZED_NAME_CONSENT_ID)
  private Long consentId;

  public static final String SERIALIZED_NAME_DATASET = "dataset";
  @SerializedName(SERIALIZED_NAME_DATASET)
  private List<ProvidersDataset> dataset = new ArrayList<>();

  /**
   * Gets or Sets datasetName
   */
  @JsonAdapter(DatasetNameEnum.Adapter.class)
  public enum DatasetNameEnum {
    BASIC_AGG_DATA("BASIC_AGG_DATA"),
    
    ADVANCE_AGG_DATA("ADVANCE_AGG_DATA"),
    
    ACCT_PROFILE("ACCT_PROFILE"),
    
    DOCUMENT("DOCUMENT");

    private String value;

    DatasetNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DatasetNameEnum fromValue(String value) {
      for (DatasetNameEnum b : DatasetNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DatasetNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DatasetNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DatasetNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DatasetNameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DatasetNameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATASET_NAME = "datasetName";
  @SerializedName(SERIALIZED_NAME_DATASET_NAME)
  private List<DatasetNameEnum> datasetName = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIELD = "field";
  @SerializedName(SERIALIZED_NAME_FIELD)
  private List<Field> field = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREFERENCES = "preferences";
  @SerializedName(SERIALIZED_NAME_PREFERENCES)
  private ProviderAccountPreferences preferences;

  public ProviderAccountRequest() {
  }

  public ProviderAccountRequest aggregationSource(AggregationSourceEnum aggregationSource) {
    this.aggregationSource = aggregationSource;
    return this;
  }

  /**
   * Get aggregationSource
   * @return aggregationSource
   */
  @javax.annotation.Nullable
  public AggregationSourceEnum getAggregationSource() {
    return aggregationSource;
  }

  public void setAggregationSource(AggregationSourceEnum aggregationSource) {
    this.aggregationSource = aggregationSource;
  }


  public ProviderAccountRequest consentId(Long consentId) {
    this.consentId = consentId;
    return this;
  }

  /**
   * Consent Id generated for the request through POST Consent.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST Provider Account&lt;/li&gt;&lt;li&gt;PUT Provider Account&lt;/li&gt;&lt;/ul&gt;
   * @return consentId
   */
  @javax.annotation.Nullable
  public Long getConsentId() {
    return consentId;
  }

  public void setConsentId(Long consentId) {
    this.consentId = consentId;
  }


  public ProviderAccountRequest dataset(List<ProvidersDataset> dataset) {
    this.dataset = dataset;
    return this;
  }

  public ProviderAccountRequest addDatasetItem(ProvidersDataset datasetItem) {
    if (this.dataset == null) {
      this.dataset = new ArrayList<>();
    }
    this.dataset.add(datasetItem);
    return this;
  }

  /**
   * Get dataset
   * @return dataset
   */
  @javax.annotation.Nullable
  public List<ProvidersDataset> getDataset() {
    return dataset;
  }

  public void setDataset(List<ProvidersDataset> dataset) {
    this.dataset = dataset;
  }


  public ProviderAccountRequest datasetName(List<DatasetNameEnum> datasetName) {
    this.datasetName = datasetName;
    return this;
  }

  public ProviderAccountRequest addDatasetNameItem(DatasetNameEnum datasetNameItem) {
    if (this.datasetName == null) {
      this.datasetName = new ArrayList<>();
    }
    this.datasetName.add(datasetNameItem);
    return this;
  }

  /**
   * Get datasetName
   * @return datasetName
   */
  @javax.annotation.Nullable
  public List<DatasetNameEnum> getDatasetName() {
    return datasetName;
  }

  public void setDatasetName(List<DatasetNameEnum> datasetName) {
    this.datasetName = datasetName;
  }


  public ProviderAccountRequest field(List<Field> field) {
    this.field = field;
    return this;
  }

  public ProviderAccountRequest addFieldItem(Field fieldItem) {
    if (this.field == null) {
      this.field = new ArrayList<>();
    }
    this.field.add(fieldItem);
    return this;
  }

  /**
   * Get field
   * @return field
   */
  @javax.annotation.Nonnull
  public List<Field> getField() {
    return field;
  }

  public void setField(List<Field> field) {
    this.field = field;
  }


  public ProviderAccountRequest preferences(ProviderAccountPreferences preferences) {
    this.preferences = preferences;
    return this;
  }

  /**
   * Get preferences
   * @return preferences
   */
  @javax.annotation.Nullable
  public ProviderAccountPreferences getPreferences() {
    return preferences;
  }

  public void setPreferences(ProviderAccountPreferences preferences) {
    this.preferences = preferences;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProviderAccountRequest providerAccountRequest = (ProviderAccountRequest) o;
    return Objects.equals(this.aggregationSource, providerAccountRequest.aggregationSource) &&
        Objects.equals(this.consentId, providerAccountRequest.consentId) &&
        Objects.equals(this.dataset, providerAccountRequest.dataset) &&
        Objects.equals(this.datasetName, providerAccountRequest.datasetName) &&
        Objects.equals(this.field, providerAccountRequest.field) &&
        Objects.equals(this.preferences, providerAccountRequest.preferences);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregationSource, consentId, dataset, datasetName, field, preferences);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProviderAccountRequest {\n");
    sb.append("    aggregationSource: ").append(toIndentedString(aggregationSource)).append("\n");
    sb.append("    consentId: ").append(toIndentedString(consentId)).append("\n");
    sb.append("    dataset: ").append(toIndentedString(dataset)).append("\n");
    sb.append("    datasetName: ").append(toIndentedString(datasetName)).append("\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    preferences: ").append(toIndentedString(preferences)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregationSource");
    openapiFields.add("consentId");
    openapiFields.add("dataset");
    openapiFields.add("datasetName");
    openapiFields.add("field");
    openapiFields.add("preferences");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("field");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProviderAccountRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProviderAccountRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProviderAccountRequest is not found in the empty JSON string", ProviderAccountRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProviderAccountRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProviderAccountRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProviderAccountRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aggregationSource") != null && !jsonObj.get("aggregationSource").isJsonNull()) && !jsonObj.get("aggregationSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregationSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregationSource").toString()));
      }
      // validate the optional field `aggregationSource`
      if (jsonObj.get("aggregationSource") != null && !jsonObj.get("aggregationSource").isJsonNull()) {
        AggregationSourceEnum.validateJsonElement(jsonObj.get("aggregationSource"));
      }
      if (jsonObj.get("dataset") != null && !jsonObj.get("dataset").isJsonNull()) {
        JsonArray jsonArraydataset = jsonObj.getAsJsonArray("dataset");
        if (jsonArraydataset != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dataset").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dataset` to be an array in the JSON string but got `%s`", jsonObj.get("dataset").toString()));
          }

          // validate the optional field `dataset` (array)
          for (int i = 0; i < jsonArraydataset.size(); i++) {
            ProvidersDataset.validateJsonElement(jsonArraydataset.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("datasetName") != null && !jsonObj.get("datasetName").isJsonNull() && !jsonObj.get("datasetName").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasetName` to be an array in the JSON string but got `%s`", jsonObj.get("datasetName").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("field").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `field` to be an array in the JSON string but got `%s`", jsonObj.get("field").toString()));
      }

      JsonArray jsonArrayfield = jsonObj.getAsJsonArray("field");
      // validate the required field `field` (array)
      for (int i = 0; i < jsonArrayfield.size(); i++) {
        Field.validateJsonElement(jsonArrayfield.get(i));
      };
      // validate the optional field `preferences`
      if (jsonObj.get("preferences") != null && !jsonObj.get("preferences").isJsonNull()) {
        ProviderAccountPreferences.validateJsonElement(jsonObj.get("preferences"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProviderAccountRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProviderAccountRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProviderAccountRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProviderAccountRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ProviderAccountRequest>() {
           @Override
           public void write(JsonWriter out, ProviderAccountRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProviderAccountRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProviderAccountRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProviderAccountRequest
   * @throws IOException if the JSON string is invalid with respect to ProviderAccountRequest
   */
  public static ProviderAccountRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProviderAccountRequest.class);
  }

  /**
   * Convert an instance of ProviderAccountRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

