/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DerivedCategorySummaryDetails;
import org.openapitools.client.model.DerivedTransactionsLinks;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DerivedCategorySummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.041142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DerivedCategorySummary {
  public static final String SERIALIZED_NAME_CATEGORY_ID = "categoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private Long categoryId;

  public static final String SERIALIZED_NAME_CATEGORY_NAME = "categoryName";
  @SerializedName(SERIALIZED_NAME_CATEGORY_NAME)
  private String categoryName;

  public static final String SERIALIZED_NAME_CREDIT_TOTAL = "creditTotal";
  @SerializedName(SERIALIZED_NAME_CREDIT_TOTAL)
  private Money creditTotal;

  public static final String SERIALIZED_NAME_DEBIT_TOTAL = "debitTotal";
  @SerializedName(SERIALIZED_NAME_DEBIT_TOTAL)
  private Money debitTotal;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private List<DerivedCategorySummaryDetails> details = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private DerivedTransactionsLinks links;

  public DerivedCategorySummary() {
  }

  public DerivedCategorySummary(
     Long categoryId, 
     String categoryName, 
     List<DerivedCategorySummaryDetails> details
  ) {
    this();
    this.categoryId = categoryId;
    this.categoryName = categoryName;
    this.details = details;
  }

  /**
   * Id of the category. This information is provided by transactions/categories service.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, bank, investment&lt;br&gt;
   * @return categoryId
   */
  @javax.annotation.Nullable
  public Long getCategoryId() {
    return categoryId;
  }



  /**
   * The name of the category.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, bank, investment&lt;br&gt;
   * @return categoryName
   */
  @javax.annotation.Nullable
  public String getCategoryName() {
    return categoryName;
  }



  public DerivedCategorySummary creditTotal(Money creditTotal) {
    this.creditTotal = creditTotal;
    return this;
  }

  /**
   * Get creditTotal
   * @return creditTotal
   */
  @javax.annotation.Nullable
  public Money getCreditTotal() {
    return creditTotal;
  }

  public void setCreditTotal(Money creditTotal) {
    this.creditTotal = creditTotal;
  }


  public DerivedCategorySummary debitTotal(Money debitTotal) {
    this.debitTotal = debitTotal;
    return this;
  }

  /**
   * Get debitTotal
   * @return debitTotal
   */
  @javax.annotation.Nullable
  public Money getDebitTotal() {
    return debitTotal;
  }

  public void setDebitTotal(Money debitTotal) {
    this.debitTotal = debitTotal;
  }


  /**
   * Credit and debit summary per date.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, bank, investment&lt;br&gt;
   * @return details
   */
  @javax.annotation.Nullable
  public List<DerivedCategorySummaryDetails> getDetails() {
    return details;
  }



  public DerivedCategorySummary links(DerivedTransactionsLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public DerivedTransactionsLinks getLinks() {
    return links;
  }

  public void setLinks(DerivedTransactionsLinks links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DerivedCategorySummary derivedCategorySummary = (DerivedCategorySummary) o;
    return Objects.equals(this.categoryId, derivedCategorySummary.categoryId) &&
        Objects.equals(this.categoryName, derivedCategorySummary.categoryName) &&
        Objects.equals(this.creditTotal, derivedCategorySummary.creditTotal) &&
        Objects.equals(this.debitTotal, derivedCategorySummary.debitTotal) &&
        Objects.equals(this.details, derivedCategorySummary.details) &&
        Objects.equals(this.links, derivedCategorySummary.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryId, categoryName, creditTotal, debitTotal, details, links);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DerivedCategorySummary {\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    categoryName: ").append(toIndentedString(categoryName)).append("\n");
    sb.append("    creditTotal: ").append(toIndentedString(creditTotal)).append("\n");
    sb.append("    debitTotal: ").append(toIndentedString(debitTotal)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoryId");
    openapiFields.add("categoryName");
    openapiFields.add("creditTotal");
    openapiFields.add("debitTotal");
    openapiFields.add("details");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DerivedCategorySummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DerivedCategorySummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DerivedCategorySummary is not found in the empty JSON string", DerivedCategorySummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DerivedCategorySummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DerivedCategorySummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("categoryName") != null && !jsonObj.get("categoryName").isJsonNull()) && !jsonObj.get("categoryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryName").toString()));
      }
      // validate the optional field `creditTotal`
      if (jsonObj.get("creditTotal") != null && !jsonObj.get("creditTotal").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("creditTotal"));
      }
      // validate the optional field `debitTotal`
      if (jsonObj.get("debitTotal") != null && !jsonObj.get("debitTotal").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("debitTotal"));
      }
      if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) {
        JsonArray jsonArraydetails = jsonObj.getAsJsonArray("details");
        if (jsonArraydetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("details").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `details` to be an array in the JSON string but got `%s`", jsonObj.get("details").toString()));
          }

          // validate the optional field `details` (array)
          for (int i = 0; i < jsonArraydetails.size(); i++) {
            DerivedCategorySummaryDetails.validateJsonElement(jsonArraydetails.get(i));
          };
        }
      }
      // validate the optional field `links`
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        DerivedTransactionsLinks.validateJsonElement(jsonObj.get("links"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DerivedCategorySummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DerivedCategorySummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DerivedCategorySummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DerivedCategorySummary.class));

       return (TypeAdapter<T>) new TypeAdapter<DerivedCategorySummary>() {
           @Override
           public void write(JsonWriter out, DerivedCategorySummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DerivedCategorySummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DerivedCategorySummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DerivedCategorySummary
   * @throws IOException if the JSON string is invalid with respect to DerivedCategorySummary
   */
  public static DerivedCategorySummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DerivedCategorySummary.class);
  }

  /**
   * Convert an instance of DerivedCategorySummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

