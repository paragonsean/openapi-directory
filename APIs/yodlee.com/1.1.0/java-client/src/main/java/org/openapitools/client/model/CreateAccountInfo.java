/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AccountAddress;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAccountInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.041142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAccountInfo {
  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "accountName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "accountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "accountType";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private String accountType;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private AccountAddress address;

  public static final String SERIALIZED_NAME_AMOUNT_DUE = "amountDue";
  @SerializedName(SERIALIZED_NAME_AMOUNT_DUE)
  private Money amountDue;

  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private Money balance;

  public static final String SERIALIZED_NAME_DUE_DATE = "dueDate";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private String dueDate;

  /**
   * Gets or Sets frequency
   */
  @JsonAdapter(FrequencyEnum.Adapter.class)
  public enum FrequencyEnum {
    DAILY("DAILY"),
    
    ONE_TIME("ONE_TIME"),
    
    WEEKLY("WEEKLY"),
    
    EVERY_2_WEEKS("EVERY_2_WEEKS"),
    
    SEMI_MONTHLY("SEMI_MONTHLY"),
    
    MONTHLY("MONTHLY"),
    
    QUARTERLY("QUARTERLY"),
    
    SEMI_ANNUALLY("SEMI_ANNUALLY"),
    
    ANNUALLY("ANNUALLY"),
    
    EVERY_2_MONTHS("EVERY_2_MONTHS"),
    
    EBILL("EBILL"),
    
    FIRST_DAY_MONTHLY("FIRST_DAY_MONTHLY"),
    
    LAST_DAY_MONTHLY("LAST_DAY_MONTHLY"),
    
    EVERY_4_WEEKS("EVERY_4_WEEKS"),
    
    UNKNOWN("UNKNOWN"),
    
    OTHER("OTHER");

    private String value;

    FrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FrequencyEnum fromValue(String value) {
      for (FrequencyEnum b : FrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FrequencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FrequencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private FrequencyEnum frequency;

  public static final String SERIALIZED_NAME_HOME_VALUE = "homeValue";
  @SerializedName(SERIALIZED_NAME_HOME_VALUE)
  private Money homeValue;

  public static final String SERIALIZED_NAME_INCLUDE_IN_NET_WORTH = "includeInNetWorth";
  @SerializedName(SERIALIZED_NAME_INCLUDE_IN_NET_WORTH)
  private String includeInNetWorth;

  public static final String SERIALIZED_NAME_MEMO = "memo";
  @SerializedName(SERIALIZED_NAME_MEMO)
  private String memo;

  public static final String SERIALIZED_NAME_NICKNAME = "nickname";
  @SerializedName(SERIALIZED_NAME_NICKNAME)
  private String nickname;

  /**
   * Gets or Sets valuationType
   */
  @JsonAdapter(ValuationTypeEnum.Adapter.class)
  public enum ValuationTypeEnum {
    SYSTEM("SYSTEM"),
    
    MANUAL("MANUAL");

    private String value;

    ValuationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValuationTypeEnum fromValue(String value) {
      for (ValuationTypeEnum b : ValuationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ValuationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValuationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValuationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ValuationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ValuationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VALUATION_TYPE = "valuationType";
  @SerializedName(SERIALIZED_NAME_VALUATION_TYPE)
  private ValuationTypeEnum valuationType;

  public CreateAccountInfo() {
  }

  public CreateAccountInfo accountName(String accountName) {
    this.accountName = accountName;
    return this;
  }

  /**
   * Get accountName
   * @return accountName
   */
  @javax.annotation.Nonnull
  public String getAccountName() {
    return accountName;
  }

  public void setAccountName(String accountName) {
    this.accountName = accountName;
  }


  public CreateAccountInfo accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

  /**
   * Get accountNumber
   * @return accountNumber
   */
  @javax.annotation.Nullable
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public CreateAccountInfo accountType(String accountType) {
    this.accountType = accountType;
    return this;
  }

  /**
   * Get accountType
   * @return accountType
   */
  @javax.annotation.Nonnull
  public String getAccountType() {
    return accountType;
  }

  public void setAccountType(String accountType) {
    this.accountType = accountType;
  }


  public CreateAccountInfo address(AccountAddress address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public AccountAddress getAddress() {
    return address;
  }

  public void setAddress(AccountAddress address) {
    this.address = address;
  }


  public CreateAccountInfo amountDue(Money amountDue) {
    this.amountDue = amountDue;
    return this;
  }

  /**
   * Get amountDue
   * @return amountDue
   */
  @javax.annotation.Nullable
  public Money getAmountDue() {
    return amountDue;
  }

  public void setAmountDue(Money amountDue) {
    this.amountDue = amountDue;
  }


  public CreateAccountInfo balance(Money balance) {
    this.balance = balance;
    return this;
  }

  /**
   * Get balance
   * @return balance
   */
  @javax.annotation.Nullable
  public Money getBalance() {
    return balance;
  }

  public void setBalance(Money balance) {
    this.balance = balance;
  }


  public CreateAccountInfo dueDate(String dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * Get dueDate
   * @return dueDate
   */
  @javax.annotation.Nullable
  public String getDueDate() {
    return dueDate;
  }

  public void setDueDate(String dueDate) {
    this.dueDate = dueDate;
  }


  public CreateAccountInfo frequency(FrequencyEnum frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * Get frequency
   * @return frequency
   */
  @javax.annotation.Nullable
  public FrequencyEnum getFrequency() {
    return frequency;
  }

  public void setFrequency(FrequencyEnum frequency) {
    this.frequency = frequency;
  }


  public CreateAccountInfo homeValue(Money homeValue) {
    this.homeValue = homeValue;
    return this;
  }

  /**
   * Get homeValue
   * @return homeValue
   */
  @javax.annotation.Nullable
  public Money getHomeValue() {
    return homeValue;
  }

  public void setHomeValue(Money homeValue) {
    this.homeValue = homeValue;
  }


  public CreateAccountInfo includeInNetWorth(String includeInNetWorth) {
    this.includeInNetWorth = includeInNetWorth;
    return this;
  }

  /**
   * Get includeInNetWorth
   * @return includeInNetWorth
   */
  @javax.annotation.Nullable
  public String getIncludeInNetWorth() {
    return includeInNetWorth;
  }

  public void setIncludeInNetWorth(String includeInNetWorth) {
    this.includeInNetWorth = includeInNetWorth;
  }


  public CreateAccountInfo memo(String memo) {
    this.memo = memo;
    return this;
  }

  /**
   * Get memo
   * @return memo
   */
  @javax.annotation.Nullable
  public String getMemo() {
    return memo;
  }

  public void setMemo(String memo) {
    this.memo = memo;
  }


  public CreateAccountInfo nickname(String nickname) {
    this.nickname = nickname;
    return this;
  }

  /**
   * Get nickname
   * @return nickname
   */
  @javax.annotation.Nullable
  public String getNickname() {
    return nickname;
  }

  public void setNickname(String nickname) {
    this.nickname = nickname;
  }


  public CreateAccountInfo valuationType(ValuationTypeEnum valuationType) {
    this.valuationType = valuationType;
    return this;
  }

  /**
   * Get valuationType
   * @return valuationType
   */
  @javax.annotation.Nullable
  public ValuationTypeEnum getValuationType() {
    return valuationType;
  }

  public void setValuationType(ValuationTypeEnum valuationType) {
    this.valuationType = valuationType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAccountInfo createAccountInfo = (CreateAccountInfo) o;
    return Objects.equals(this.accountName, createAccountInfo.accountName) &&
        Objects.equals(this.accountNumber, createAccountInfo.accountNumber) &&
        Objects.equals(this.accountType, createAccountInfo.accountType) &&
        Objects.equals(this.address, createAccountInfo.address) &&
        Objects.equals(this.amountDue, createAccountInfo.amountDue) &&
        Objects.equals(this.balance, createAccountInfo.balance) &&
        Objects.equals(this.dueDate, createAccountInfo.dueDate) &&
        Objects.equals(this.frequency, createAccountInfo.frequency) &&
        Objects.equals(this.homeValue, createAccountInfo.homeValue) &&
        Objects.equals(this.includeInNetWorth, createAccountInfo.includeInNetWorth) &&
        Objects.equals(this.memo, createAccountInfo.memo) &&
        Objects.equals(this.nickname, createAccountInfo.nickname) &&
        Objects.equals(this.valuationType, createAccountInfo.valuationType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountName, accountNumber, accountType, address, amountDue, balance, dueDate, frequency, homeValue, includeInNetWorth, memo, nickname, valuationType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAccountInfo {\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    amountDue: ").append(toIndentedString(amountDue)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    homeValue: ").append(toIndentedString(homeValue)).append("\n");
    sb.append("    includeInNetWorth: ").append(toIndentedString(includeInNetWorth)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    nickname: ").append(toIndentedString(nickname)).append("\n");
    sb.append("    valuationType: ").append(toIndentedString(valuationType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountName");
    openapiFields.add("accountNumber");
    openapiFields.add("accountType");
    openapiFields.add("address");
    openapiFields.add("amountDue");
    openapiFields.add("balance");
    openapiFields.add("dueDate");
    openapiFields.add("frequency");
    openapiFields.add("homeValue");
    openapiFields.add("includeInNetWorth");
    openapiFields.add("memo");
    openapiFields.add("nickname");
    openapiFields.add("valuationType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountName");
    openapiRequiredFields.add("accountType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAccountInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAccountInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAccountInfo is not found in the empty JSON string", CreateAccountInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAccountInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAccountInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAccountInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("accountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountName").toString()));
      }
      if ((jsonObj.get("accountNumber") != null && !jsonObj.get("accountNumber").isJsonNull()) && !jsonObj.get("accountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountNumber").toString()));
      }
      if (!jsonObj.get("accountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountType").toString()));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        AccountAddress.validateJsonElement(jsonObj.get("address"));
      }
      // validate the optional field `amountDue`
      if (jsonObj.get("amountDue") != null && !jsonObj.get("amountDue").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("amountDue"));
      }
      // validate the optional field `balance`
      if (jsonObj.get("balance") != null && !jsonObj.get("balance").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("balance"));
      }
      if ((jsonObj.get("dueDate") != null && !jsonObj.get("dueDate").isJsonNull()) && !jsonObj.get("dueDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dueDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dueDate").toString()));
      }
      if ((jsonObj.get("frequency") != null && !jsonObj.get("frequency").isJsonNull()) && !jsonObj.get("frequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frequency").toString()));
      }
      // validate the optional field `frequency`
      if (jsonObj.get("frequency") != null && !jsonObj.get("frequency").isJsonNull()) {
        FrequencyEnum.validateJsonElement(jsonObj.get("frequency"));
      }
      // validate the optional field `homeValue`
      if (jsonObj.get("homeValue") != null && !jsonObj.get("homeValue").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("homeValue"));
      }
      if ((jsonObj.get("includeInNetWorth") != null && !jsonObj.get("includeInNetWorth").isJsonNull()) && !jsonObj.get("includeInNetWorth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `includeInNetWorth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("includeInNetWorth").toString()));
      }
      if ((jsonObj.get("memo") != null && !jsonObj.get("memo").isJsonNull()) && !jsonObj.get("memo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memo").toString()));
      }
      if ((jsonObj.get("nickname") != null && !jsonObj.get("nickname").isJsonNull()) && !jsonObj.get("nickname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nickname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nickname").toString()));
      }
      if ((jsonObj.get("valuationType") != null && !jsonObj.get("valuationType").isJsonNull()) && !jsonObj.get("valuationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valuationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valuationType").toString()));
      }
      // validate the optional field `valuationType`
      if (jsonObj.get("valuationType") != null && !jsonObj.get("valuationType").isJsonNull()) {
        ValuationTypeEnum.validateJsonElement(jsonObj.get("valuationType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAccountInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAccountInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAccountInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAccountInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAccountInfo>() {
           @Override
           public void write(JsonWriter out, CreateAccountInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAccountInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAccountInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAccountInfo
   * @throws IOException if the JSON string is invalid with respect to CreateAccountInfo
   */
  public static CreateAccountInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAccountInfo.class);
  }

  /**
   * Convert an instance of CreateAccountInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

