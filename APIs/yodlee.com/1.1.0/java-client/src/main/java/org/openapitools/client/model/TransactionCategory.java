/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DetailCategory;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TransactionCategory
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.041142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransactionCategory {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  /**
   * Category Classification.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;:  creditCard, investment, insurance, loan&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
   */
  @JsonAdapter(ClassificationEnum.Adapter.class)
  public enum ClassificationEnum {
    PERSONAL("PERSONAL"),
    
    BUSINESS("BUSINESS");

    private String value;

    ClassificationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClassificationEnum fromValue(String value) {
      for (ClassificationEnum b : ClassificationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClassificationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClassificationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClassificationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClassificationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ClassificationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLASSIFICATION = "classification";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION)
  private ClassificationEnum classification;

  public static final String SERIALIZED_NAME_DEFAULT_CATEGORY_NAME = "defaultCategoryName";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CATEGORY_NAME)
  private String defaultCategoryName;

  public static final String SERIALIZED_NAME_DEFAULT_HIGH_LEVEL_CATEGORY_NAME = "defaultHighLevelCategoryName";
  @SerializedName(SERIALIZED_NAME_DEFAULT_HIGH_LEVEL_CATEGORY_NAME)
  private String defaultHighLevelCategoryName;

  public static final String SERIALIZED_NAME_DETAIL_CATEGORY = "detailCategory";
  @SerializedName(SERIALIZED_NAME_DETAIL_CATEGORY)
  private List<DetailCategory> detailCategory = new ArrayList<>();

  public static final String SERIALIZED_NAME_HIGH_LEVEL_CATEGORY_ID = "highLevelCategoryId";
  @SerializedName(SERIALIZED_NAME_HIGH_LEVEL_CATEGORY_ID)
  private Long highLevelCategoryId;

  public static final String SERIALIZED_NAME_HIGH_LEVEL_CATEGORY_NAME = "highLevelCategoryName";
  @SerializedName(SERIALIZED_NAME_HIGH_LEVEL_CATEGORY_NAME)
  private String highLevelCategoryName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  /**
   * Source used to identify whether the transaction category is user defined category or system created category.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;:  creditCard, investment, insurance, loan&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
   */
  @JsonAdapter(SourceEnum.Adapter.class)
  public enum SourceEnum {
    SYSTEM("SYSTEM"),
    
    USER("USER");

    private String value;

    SourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceEnum fromValue(String value) {
      for (SourceEnum b : SourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private SourceEnum source;

  /**
   * Transaction categories and high-level categories are further mapped to five transaction category types. Customers, based on their needs can either use the transaction categories, the high-level categories, or the transaction category types. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;:  creditCard, investment, insurance, loan&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TRANSFER("TRANSFER"),
    
    DEFERRED_COMPENSATION("DEFERRED_COMPENSATION"),
    
    UNCATEGORIZE("UNCATEGORIZE"),
    
    INCOME("INCOME"),
    
    EXPENSE("EXPENSE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public TransactionCategory() {
  }

  public TransactionCategory(
     String category, 
     ClassificationEnum classification, 
     String defaultCategoryName, 
     String defaultHighLevelCategoryName, 
     List<DetailCategory> detailCategory, 
     Long highLevelCategoryId, 
     String highLevelCategoryName, 
     Long id, 
     SourceEnum source, 
     TypeEnum type
  ) {
    this();
    this.category = category;
    this.classification = classification;
    this.defaultCategoryName = defaultCategoryName;
    this.defaultHighLevelCategoryName = defaultHighLevelCategoryName;
    this.detailCategory = detailCategory;
    this.highLevelCategoryId = highLevelCategoryId;
    this.highLevelCategoryName = highLevelCategoryName;
    this.id = id;
    this.source = source;
    this.type = type;
  }

  /**
   * The name of the category.&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: Transaction categorization is one of the core features offered by Yodlee and the categories are assigned to the transactions by the system. Transactions can be clubbed together by the category that is assigned to them.  &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;:  creditCard, investment, insurance, loan&lt;br&gt;
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }



  /**
   * Category Classification.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;:  creditCard, investment, insurance, loan&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
   * @return classification
   */
  @javax.annotation.Nullable
  public ClassificationEnum getClassification() {
    return classification;
  }



  /**
   * A attribute which will always hold the first value(initial name) of Yodlee defined category attribute.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, investment, insurance, loan&lt;br&gt;
   * @return defaultCategoryName
   */
  @javax.annotation.Nullable
  public String getDefaultCategoryName() {
    return defaultCategoryName;
  }



  /**
   * A attribute which will always hold the first value(initial name) of Yodlee defined highLevelCategoryName attribute.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: creditCard, investment, insurance, loan&lt;br&gt;
   * @return defaultHighLevelCategoryName
   */
  @javax.annotation.Nullable
  public String getDefaultHighLevelCategoryName() {
    return defaultHighLevelCategoryName;
  }



  /**
   * Entity that provides detail category attributes&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;:  creditCard, investment, insurance, loan&lt;br&gt;
   * @return detailCategory
   */
  @javax.annotation.Nullable
  public List<DetailCategory> getDetailCategory() {
    return detailCategory;
  }



  /**
   * The unique identifier of the high level category.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;:  creditCard, investment, insurance, loan&lt;br&gt;
   * @return highLevelCategoryId
   */
  @javax.annotation.Nullable
  public Long getHighLevelCategoryId() {
    return highLevelCategoryId;
  }



  /**
   * The name of the high level category. A group of similar transaction categories are clubbed together to form a high-level category.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;:  creditCard, investment, insurance, loan&lt;br&gt;
   * @return highLevelCategoryName
   */
  @javax.annotation.Nullable
  public String getHighLevelCategoryName() {
    return highLevelCategoryName;
  }



  /**
   * Unique identifier of the category.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;:  creditCard, investment, insurance, loan&lt;br&gt;
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }



  /**
   * Source used to identify whether the transaction category is user defined category or system created category.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;:  creditCard, investment, insurance, loan&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
   * @return source
   */
  @javax.annotation.Nullable
  public SourceEnum getSource() {
    return source;
  }



  /**
   * Transaction categories and high-level categories are further mapped to five transaction category types. Customers, based on their needs can either use the transaction categories, the high-level categories, or the transaction category types. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;:  creditCard, investment, insurance, loan&lt;br&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionCategory transactionCategory = (TransactionCategory) o;
    return Objects.equals(this.category, transactionCategory.category) &&
        Objects.equals(this.classification, transactionCategory.classification) &&
        Objects.equals(this.defaultCategoryName, transactionCategory.defaultCategoryName) &&
        Objects.equals(this.defaultHighLevelCategoryName, transactionCategory.defaultHighLevelCategoryName) &&
        Objects.equals(this.detailCategory, transactionCategory.detailCategory) &&
        Objects.equals(this.highLevelCategoryId, transactionCategory.highLevelCategoryId) &&
        Objects.equals(this.highLevelCategoryName, transactionCategory.highLevelCategoryName) &&
        Objects.equals(this.id, transactionCategory.id) &&
        Objects.equals(this.source, transactionCategory.source) &&
        Objects.equals(this.type, transactionCategory.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, classification, defaultCategoryName, defaultHighLevelCategoryName, detailCategory, highLevelCategoryId, highLevelCategoryName, id, source, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionCategory {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    classification: ").append(toIndentedString(classification)).append("\n");
    sb.append("    defaultCategoryName: ").append(toIndentedString(defaultCategoryName)).append("\n");
    sb.append("    defaultHighLevelCategoryName: ").append(toIndentedString(defaultHighLevelCategoryName)).append("\n");
    sb.append("    detailCategory: ").append(toIndentedString(detailCategory)).append("\n");
    sb.append("    highLevelCategoryId: ").append(toIndentedString(highLevelCategoryId)).append("\n");
    sb.append("    highLevelCategoryName: ").append(toIndentedString(highLevelCategoryName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("classification");
    openapiFields.add("defaultCategoryName");
    openapiFields.add("defaultHighLevelCategoryName");
    openapiFields.add("detailCategory");
    openapiFields.add("highLevelCategoryId");
    openapiFields.add("highLevelCategoryName");
    openapiFields.add("id");
    openapiFields.add("source");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransactionCategory
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionCategory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionCategory is not found in the empty JSON string", TransactionCategory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransactionCategory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionCategory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("classification") != null && !jsonObj.get("classification").isJsonNull()) && !jsonObj.get("classification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `classification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("classification").toString()));
      }
      // validate the optional field `classification`
      if (jsonObj.get("classification") != null && !jsonObj.get("classification").isJsonNull()) {
        ClassificationEnum.validateJsonElement(jsonObj.get("classification"));
      }
      if ((jsonObj.get("defaultCategoryName") != null && !jsonObj.get("defaultCategoryName").isJsonNull()) && !jsonObj.get("defaultCategoryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultCategoryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultCategoryName").toString()));
      }
      if ((jsonObj.get("defaultHighLevelCategoryName") != null && !jsonObj.get("defaultHighLevelCategoryName").isJsonNull()) && !jsonObj.get("defaultHighLevelCategoryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultHighLevelCategoryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultHighLevelCategoryName").toString()));
      }
      if (jsonObj.get("detailCategory") != null && !jsonObj.get("detailCategory").isJsonNull()) {
        JsonArray jsonArraydetailCategory = jsonObj.getAsJsonArray("detailCategory");
        if (jsonArraydetailCategory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("detailCategory").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `detailCategory` to be an array in the JSON string but got `%s`", jsonObj.get("detailCategory").toString()));
          }

          // validate the optional field `detailCategory` (array)
          for (int i = 0; i < jsonArraydetailCategory.size(); i++) {
            DetailCategory.validateJsonElement(jsonArraydetailCategory.get(i));
          };
        }
      }
      if ((jsonObj.get("highLevelCategoryName") != null && !jsonObj.get("highLevelCategoryName").isJsonNull()) && !jsonObj.get("highLevelCategoryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `highLevelCategoryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("highLevelCategoryName").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        SourceEnum.validateJsonElement(jsonObj.get("source"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionCategory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionCategory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionCategory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionCategory.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionCategory>() {
           @Override
           public void write(JsonWriter out, TransactionCategory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionCategory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransactionCategory given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransactionCategory
   * @throws IOException if the JSON string is invalid with respect to TransactionCategory
   */
  public static TransactionCategory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionCategory.class);
  }

  /**
   * Convert an instance of TransactionCategory to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

