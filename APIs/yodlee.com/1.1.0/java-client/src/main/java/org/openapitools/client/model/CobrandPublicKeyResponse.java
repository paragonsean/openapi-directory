/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CobrandPublicKeyResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.041142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CobrandPublicKeyResponse {
  public static final String SERIALIZED_NAME_KEY_ALIAS = "keyAlias";
  @SerializedName(SERIALIZED_NAME_KEY_ALIAS)
  private String keyAlias;

  public static final String SERIALIZED_NAME_KEY_AS_PEM_STRING = "keyAsPemString";
  @SerializedName(SERIALIZED_NAME_KEY_AS_PEM_STRING)
  private String keyAsPemString;

  public CobrandPublicKeyResponse() {
  }

  public CobrandPublicKeyResponse(
     String keyAlias, 
     String keyAsPemString
  ) {
    this();
    this.keyAlias = keyAlias;
    this.keyAsPemString = keyAsPemString;
  }

  /**
   * The key name used for encryption.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET cobrand/publicKey&lt;/li&gt;&lt;/ul&gt;
   * @return keyAlias
   */
  @javax.annotation.Nullable
  public String getKeyAlias() {
    return keyAlias;
  }



  /**
   * Public key that the customer should be using to encrypt the credentials and answers before sending to the add &amp; update providerAccounts APIs.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET cobrand/publicKey&lt;/li&gt;&lt;/ul&gt;
   * @return keyAsPemString
   */
  @javax.annotation.Nullable
  public String getKeyAsPemString() {
    return keyAsPemString;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CobrandPublicKeyResponse cobrandPublicKeyResponse = (CobrandPublicKeyResponse) o;
    return Objects.equals(this.keyAlias, cobrandPublicKeyResponse.keyAlias) &&
        Objects.equals(this.keyAsPemString, cobrandPublicKeyResponse.keyAsPemString);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keyAlias, keyAsPemString);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CobrandPublicKeyResponse {\n");
    sb.append("    keyAlias: ").append(toIndentedString(keyAlias)).append("\n");
    sb.append("    keyAsPemString: ").append(toIndentedString(keyAsPemString)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("keyAlias");
    openapiFields.add("keyAsPemString");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CobrandPublicKeyResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CobrandPublicKeyResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CobrandPublicKeyResponse is not found in the empty JSON string", CobrandPublicKeyResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CobrandPublicKeyResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CobrandPublicKeyResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("keyAlias") != null && !jsonObj.get("keyAlias").isJsonNull()) && !jsonObj.get("keyAlias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyAlias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyAlias").toString()));
      }
      if ((jsonObj.get("keyAsPemString") != null && !jsonObj.get("keyAsPemString").isJsonNull()) && !jsonObj.get("keyAsPemString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyAsPemString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyAsPemString").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CobrandPublicKeyResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CobrandPublicKeyResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CobrandPublicKeyResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CobrandPublicKeyResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CobrandPublicKeyResponse>() {
           @Override
           public void write(JsonWriter out, CobrandPublicKeyResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CobrandPublicKeyResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CobrandPublicKeyResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CobrandPublicKeyResponse
   * @throws IOException if the JSON string is invalid with respect to CobrandPublicKeyResponse
   */
  public static CobrandPublicKeyResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CobrandPublicKeyResponse.class);
  }

  /**
   * Convert an instance of CobrandPublicKeyResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

