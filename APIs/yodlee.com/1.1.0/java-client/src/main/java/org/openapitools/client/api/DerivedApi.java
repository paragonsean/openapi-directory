/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DerivedHoldingSummaryResponse;
import org.openapitools.client.model.DerivedNetworthResponse;
import org.openapitools.client.model.DerivedTransactionSummaryResponse;
import org.openapitools.client.model.YodleeError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DerivedApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DerivedApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DerivedApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getHoldingSummary
     * @param accountIds Comma separated accountIds (optional)
     * @param classificationType e.g. Country, Sector, etc. (optional)
     * @param include details (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for classificationType&lt;br&gt;Y814 : Exchange rate not available for currency&lt;br&gt;Y824 : The maximum number of accountIds permitted is 100&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHoldingSummaryCall(String accountIds, String classificationType, String include, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/derived/holdingSummary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountIds", accountIds));
        }

        if (classificationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("classificationType", classificationType));
        }

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHoldingSummaryValidateBeforeCall(String accountIds, String classificationType, String include, final ApiCallback _callback) throws ApiException {
        return getHoldingSummaryCall(accountIds, classificationType, include, _callback);

    }

    /**
     * Get Holding Summary
     * The get holding summary service is used to get the summary of asset classifications for the user.&lt;br&gt;By default, accounts with status as ACTIVE and TO BE CLOSED will be considered.&lt;br&gt;If the include parameter value is passed as details then a summary with holdings and account information is returned.&lt;br&gt;
     * @param accountIds Comma separated accountIds (optional)
     * @param classificationType e.g. Country, Sector, etc. (optional)
     * @param include details (optional)
     * @return DerivedHoldingSummaryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for classificationType&lt;br&gt;Y814 : Exchange rate not available for currency&lt;br&gt;Y824 : The maximum number of accountIds permitted is 100&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DerivedHoldingSummaryResponse getHoldingSummary(String accountIds, String classificationType, String include) throws ApiException {
        ApiResponse<DerivedHoldingSummaryResponse> localVarResp = getHoldingSummaryWithHttpInfo(accountIds, classificationType, include);
        return localVarResp.getData();
    }

    /**
     * Get Holding Summary
     * The get holding summary service is used to get the summary of asset classifications for the user.&lt;br&gt;By default, accounts with status as ACTIVE and TO BE CLOSED will be considered.&lt;br&gt;If the include parameter value is passed as details then a summary with holdings and account information is returned.&lt;br&gt;
     * @param accountIds Comma separated accountIds (optional)
     * @param classificationType e.g. Country, Sector, etc. (optional)
     * @param include details (optional)
     * @return ApiResponse&lt;DerivedHoldingSummaryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for classificationType&lt;br&gt;Y814 : Exchange rate not available for currency&lt;br&gt;Y824 : The maximum number of accountIds permitted is 100&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DerivedHoldingSummaryResponse> getHoldingSummaryWithHttpInfo(String accountIds, String classificationType, String include) throws ApiException {
        okhttp3.Call localVarCall = getHoldingSummaryValidateBeforeCall(accountIds, classificationType, include, null);
        Type localVarReturnType = new TypeToken<DerivedHoldingSummaryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Holding Summary (asynchronously)
     * The get holding summary service is used to get the summary of asset classifications for the user.&lt;br&gt;By default, accounts with status as ACTIVE and TO BE CLOSED will be considered.&lt;br&gt;If the include parameter value is passed as details then a summary with holdings and account information is returned.&lt;br&gt;
     * @param accountIds Comma separated accountIds (optional)
     * @param classificationType e.g. Country, Sector, etc. (optional)
     * @param include details (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for classificationType&lt;br&gt;Y814 : Exchange rate not available for currency&lt;br&gt;Y824 : The maximum number of accountIds permitted is 100&lt;br&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHoldingSummaryAsync(String accountIds, String classificationType, String include, final ApiCallback<DerivedHoldingSummaryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHoldingSummaryValidateBeforeCall(accountIds, classificationType, include, _callback);
        Type localVarReturnType = new TypeToken<DerivedHoldingSummaryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworth
     * @param accountIds comma separated accountIds (optional)
     * @param container bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities (optional)
     * @param fromDate from date for balance retrieval (YYYY-MM-DD) (optional)
     * @param include details (optional)
     * @param interval D-daily, W-weekly or M-monthly (optional)
     * @param skip skip (Min 0) (optional)
     * @param toDate toDate for balance retrieval (YYYY-MM-DD) (optional)
     * @param top top (Max 500) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for accountIds&lt;br&gt;Y800 : Invalid value for fromDate&lt;br&gt;Y800 : Invalid value for toDate&lt;br&gt;Y809 : Invalid date range&lt;br&gt;Y800 : Invalid value for interval&lt;br&gt;Y802 : Future date not allowed&lt;br&gt;Y814 : Exchange rate not available for currency&lt;br&gt;Y800 : Invalid value for container </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworthCall(String accountIds, String container, String fromDate, String include, String interval, Integer skip, String toDate, Integer top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/derived/networth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountIds", accountIds));
        }

        if (container != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("container", container));
        }

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        if (top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("top", top));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworthValidateBeforeCall(String accountIds, String container, String fromDate, String include, String interval, Integer skip, String toDate, Integer top, final ApiCallback _callback) throws ApiException {
        return getNetworthCall(accountIds, container, fromDate, include, interval, skip, toDate, top, _callback);

    }

    /**
     * Get Networth Summary
     * The get networth service is used to get the networth for the user.&lt;br&gt;If the include parameter value is passed as details then networth with historical balances is returned. &lt;br&gt;
     * @param accountIds comma separated accountIds (optional)
     * @param container bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities (optional)
     * @param fromDate from date for balance retrieval (YYYY-MM-DD) (optional)
     * @param include details (optional)
     * @param interval D-daily, W-weekly or M-monthly (optional)
     * @param skip skip (Min 0) (optional)
     * @param toDate toDate for balance retrieval (YYYY-MM-DD) (optional)
     * @param top top (Max 500) (optional)
     * @return DerivedNetworthResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for accountIds&lt;br&gt;Y800 : Invalid value for fromDate&lt;br&gt;Y800 : Invalid value for toDate&lt;br&gt;Y809 : Invalid date range&lt;br&gt;Y800 : Invalid value for interval&lt;br&gt;Y802 : Future date not allowed&lt;br&gt;Y814 : Exchange rate not available for currency&lt;br&gt;Y800 : Invalid value for container </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DerivedNetworthResponse getNetworth(String accountIds, String container, String fromDate, String include, String interval, Integer skip, String toDate, Integer top) throws ApiException {
        ApiResponse<DerivedNetworthResponse> localVarResp = getNetworthWithHttpInfo(accountIds, container, fromDate, include, interval, skip, toDate, top);
        return localVarResp.getData();
    }

    /**
     * Get Networth Summary
     * The get networth service is used to get the networth for the user.&lt;br&gt;If the include parameter value is passed as details then networth with historical balances is returned. &lt;br&gt;
     * @param accountIds comma separated accountIds (optional)
     * @param container bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities (optional)
     * @param fromDate from date for balance retrieval (YYYY-MM-DD) (optional)
     * @param include details (optional)
     * @param interval D-daily, W-weekly or M-monthly (optional)
     * @param skip skip (Min 0) (optional)
     * @param toDate toDate for balance retrieval (YYYY-MM-DD) (optional)
     * @param top top (Max 500) (optional)
     * @return ApiResponse&lt;DerivedNetworthResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for accountIds&lt;br&gt;Y800 : Invalid value for fromDate&lt;br&gt;Y800 : Invalid value for toDate&lt;br&gt;Y809 : Invalid date range&lt;br&gt;Y800 : Invalid value for interval&lt;br&gt;Y802 : Future date not allowed&lt;br&gt;Y814 : Exchange rate not available for currency&lt;br&gt;Y800 : Invalid value for container </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DerivedNetworthResponse> getNetworthWithHttpInfo(String accountIds, String container, String fromDate, String include, String interval, Integer skip, String toDate, Integer top) throws ApiException {
        okhttp3.Call localVarCall = getNetworthValidateBeforeCall(accountIds, container, fromDate, include, interval, skip, toDate, top, null);
        Type localVarReturnType = new TypeToken<DerivedNetworthResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Networth Summary (asynchronously)
     * The get networth service is used to get the networth for the user.&lt;br&gt;If the include parameter value is passed as details then networth with historical balances is returned. &lt;br&gt;
     * @param accountIds comma separated accountIds (optional)
     * @param container bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities (optional)
     * @param fromDate from date for balance retrieval (YYYY-MM-DD) (optional)
     * @param include details (optional)
     * @param interval D-daily, W-weekly or M-monthly (optional)
     * @param skip skip (Min 0) (optional)
     * @param toDate toDate for balance retrieval (YYYY-MM-DD) (optional)
     * @param top top (Max 500) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for accountIds&lt;br&gt;Y800 : Invalid value for fromDate&lt;br&gt;Y800 : Invalid value for toDate&lt;br&gt;Y809 : Invalid date range&lt;br&gt;Y800 : Invalid value for interval&lt;br&gt;Y802 : Future date not allowed&lt;br&gt;Y814 : Exchange rate not available for currency&lt;br&gt;Y800 : Invalid value for container </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworthAsync(String accountIds, String container, String fromDate, String include, String interval, Integer skip, String toDate, Integer top, final ApiCallback<DerivedNetworthResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworthValidateBeforeCall(accountIds, container, fromDate, include, interval, skip, toDate, top, _callback);
        Type localVarReturnType = new TypeToken<DerivedNetworthResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransactionSummary
     * @param groupBy CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY (required)
     * @param accountId comma separated account Ids (optional)
     * @param categoryId comma separated categoryIds (optional)
     * @param categoryType INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION (optional)
     * @param fromDate YYYY-MM-DD format (optional)
     * @param include details (optional)
     * @param includeUserCategory TRUE/FALSE (optional)
     * @param interval D-daily, W-weekly, M-mothly or Y-yearly (optional)
     * @param toDate YYYY-MM-DD format (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y010 : Invalid session&lt;br&gt;Y800 : Invalid value for accountId&lt;br&gt;Y800 : Invalid value for groupBy&lt;br&gt;Y803 : groupBy required&lt;br&gt;Y803 : categoryType required&lt;br&gt;Y800 : Invalid value for categoryId&lt;br&gt;Y800 : Invalid value for fromDate&lt;br&gt;Y800 : Invalid value for toDate&lt;br&gt;Y800 : Invalid value for fromDate or toDate&lt;br&gt;Y814 : Exchange rate not available for currency&lt;br&gt;Y815 : Cannot apply filter on categoryId if groupBy value is CATEGORY_TYPE&lt;br&gt;Y816 : User-defined category details can only be requested for one system categoryId with groupBy&#x3D;&#39;CATEGORY&#39;&lt;br&gt;Y824 : The maximum number of accountIds permitted is 100&lt;br&gt;Y824 : The maximum number of categoryIds permitted is 100&lt;br&gt;Y824 : The maximum number of categoryTypes permitted is 100 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionSummaryCall(String groupBy, String accountId, String categoryId, String categoryType, String fromDate, String include, Boolean includeUserCategory, String interval, String toDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/derived/transactionSummary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryId", categoryId));
        }

        if (categoryType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryType", categoryType));
        }

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (groupBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupBy", groupBy));
        }

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        if (includeUserCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeUserCategory", includeUserCategory));
        }

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionSummaryValidateBeforeCall(String groupBy, String accountId, String categoryId, String categoryType, String fromDate, String include, Boolean includeUserCategory, String interval, String toDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupBy' is set
        if (groupBy == null) {
            throw new ApiException("Missing the required parameter 'groupBy' when calling getTransactionSummary(Async)");
        }

        return getTransactionSummaryCall(groupBy, accountId, categoryId, categoryType, fromDate, include, includeUserCategory, interval, toDate, _callback);

    }

    /**
     * Get Transaction Summary
     * The transaction summary service provides the summary values of transactions for the given date range by category type, high-level categories, or system-defined categories.&lt;br&gt;&lt;br&gt;Yodlee has the transaction data stored for a day, month, year and week per category as per the availability of user&#39;s data. If the include parameter value is passed as details, then summary details will be returned depending on the interval passed-monthly is the default.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ol&gt; &lt;li&gt; Details can be requested for only one system-defined category&lt;li&gt;Passing categoryType is mandatory except when the groupBy value is CATEGORY_TYPE&lt;li&gt;Dates will not be respected for monthly, yearly, and weekly details&lt;li&gt;When monthly details are requested, only the fromDate and toDate month will be respected&lt;li&gt;When yearly details are requested, only the fromDate and toDate year will be respected&lt;li&gt;For weekly data points, details will be provided for every Sunday date available within the fromDate and toDate&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter&lt;/li&gt;&lt;/ol&gt;
     * @param groupBy CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY (required)
     * @param accountId comma separated account Ids (optional)
     * @param categoryId comma separated categoryIds (optional)
     * @param categoryType INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION (optional)
     * @param fromDate YYYY-MM-DD format (optional)
     * @param include details (optional)
     * @param includeUserCategory TRUE/FALSE (optional)
     * @param interval D-daily, W-weekly, M-mothly or Y-yearly (optional)
     * @param toDate YYYY-MM-DD format (optional)
     * @return DerivedTransactionSummaryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y010 : Invalid session&lt;br&gt;Y800 : Invalid value for accountId&lt;br&gt;Y800 : Invalid value for groupBy&lt;br&gt;Y803 : groupBy required&lt;br&gt;Y803 : categoryType required&lt;br&gt;Y800 : Invalid value for categoryId&lt;br&gt;Y800 : Invalid value for fromDate&lt;br&gt;Y800 : Invalid value for toDate&lt;br&gt;Y800 : Invalid value for fromDate or toDate&lt;br&gt;Y814 : Exchange rate not available for currency&lt;br&gt;Y815 : Cannot apply filter on categoryId if groupBy value is CATEGORY_TYPE&lt;br&gt;Y816 : User-defined category details can only be requested for one system categoryId with groupBy&#x3D;&#39;CATEGORY&#39;&lt;br&gt;Y824 : The maximum number of accountIds permitted is 100&lt;br&gt;Y824 : The maximum number of categoryIds permitted is 100&lt;br&gt;Y824 : The maximum number of categoryTypes permitted is 100 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DerivedTransactionSummaryResponse getTransactionSummary(String groupBy, String accountId, String categoryId, String categoryType, String fromDate, String include, Boolean includeUserCategory, String interval, String toDate) throws ApiException {
        ApiResponse<DerivedTransactionSummaryResponse> localVarResp = getTransactionSummaryWithHttpInfo(groupBy, accountId, categoryId, categoryType, fromDate, include, includeUserCategory, interval, toDate);
        return localVarResp.getData();
    }

    /**
     * Get Transaction Summary
     * The transaction summary service provides the summary values of transactions for the given date range by category type, high-level categories, or system-defined categories.&lt;br&gt;&lt;br&gt;Yodlee has the transaction data stored for a day, month, year and week per category as per the availability of user&#39;s data. If the include parameter value is passed as details, then summary details will be returned depending on the interval passed-monthly is the default.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ol&gt; &lt;li&gt; Details can be requested for only one system-defined category&lt;li&gt;Passing categoryType is mandatory except when the groupBy value is CATEGORY_TYPE&lt;li&gt;Dates will not be respected for monthly, yearly, and weekly details&lt;li&gt;When monthly details are requested, only the fromDate and toDate month will be respected&lt;li&gt;When yearly details are requested, only the fromDate and toDate year will be respected&lt;li&gt;For weekly data points, details will be provided for every Sunday date available within the fromDate and toDate&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter&lt;/li&gt;&lt;/ol&gt;
     * @param groupBy CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY (required)
     * @param accountId comma separated account Ids (optional)
     * @param categoryId comma separated categoryIds (optional)
     * @param categoryType INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION (optional)
     * @param fromDate YYYY-MM-DD format (optional)
     * @param include details (optional)
     * @param includeUserCategory TRUE/FALSE (optional)
     * @param interval D-daily, W-weekly, M-mothly or Y-yearly (optional)
     * @param toDate YYYY-MM-DD format (optional)
     * @return ApiResponse&lt;DerivedTransactionSummaryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y010 : Invalid session&lt;br&gt;Y800 : Invalid value for accountId&lt;br&gt;Y800 : Invalid value for groupBy&lt;br&gt;Y803 : groupBy required&lt;br&gt;Y803 : categoryType required&lt;br&gt;Y800 : Invalid value for categoryId&lt;br&gt;Y800 : Invalid value for fromDate&lt;br&gt;Y800 : Invalid value for toDate&lt;br&gt;Y800 : Invalid value for fromDate or toDate&lt;br&gt;Y814 : Exchange rate not available for currency&lt;br&gt;Y815 : Cannot apply filter on categoryId if groupBy value is CATEGORY_TYPE&lt;br&gt;Y816 : User-defined category details can only be requested for one system categoryId with groupBy&#x3D;&#39;CATEGORY&#39;&lt;br&gt;Y824 : The maximum number of accountIds permitted is 100&lt;br&gt;Y824 : The maximum number of categoryIds permitted is 100&lt;br&gt;Y824 : The maximum number of categoryTypes permitted is 100 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DerivedTransactionSummaryResponse> getTransactionSummaryWithHttpInfo(String groupBy, String accountId, String categoryId, String categoryType, String fromDate, String include, Boolean includeUserCategory, String interval, String toDate) throws ApiException {
        okhttp3.Call localVarCall = getTransactionSummaryValidateBeforeCall(groupBy, accountId, categoryId, categoryType, fromDate, include, includeUserCategory, interval, toDate, null);
        Type localVarReturnType = new TypeToken<DerivedTransactionSummaryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transaction Summary (asynchronously)
     * The transaction summary service provides the summary values of transactions for the given date range by category type, high-level categories, or system-defined categories.&lt;br&gt;&lt;br&gt;Yodlee has the transaction data stored for a day, month, year and week per category as per the availability of user&#39;s data. If the include parameter value is passed as details, then summary details will be returned depending on the interval passed-monthly is the default.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;ol&gt; &lt;li&gt; Details can be requested for only one system-defined category&lt;li&gt;Passing categoryType is mandatory except when the groupBy value is CATEGORY_TYPE&lt;li&gt;Dates will not be respected for monthly, yearly, and weekly details&lt;li&gt;When monthly details are requested, only the fromDate and toDate month will be respected&lt;li&gt;When yearly details are requested, only the fromDate and toDate year will be respected&lt;li&gt;For weekly data points, details will be provided for every Sunday date available within the fromDate and toDate&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter&lt;/li&gt;&lt;/ol&gt;
     * @param groupBy CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY (required)
     * @param accountId comma separated account Ids (optional)
     * @param categoryId comma separated categoryIds (optional)
     * @param categoryType INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION (optional)
     * @param fromDate YYYY-MM-DD format (optional)
     * @param include details (optional)
     * @param includeUserCategory TRUE/FALSE (optional)
     * @param interval D-daily, W-weekly, M-mothly or Y-yearly (optional)
     * @param toDate YYYY-MM-DD format (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y010 : Invalid session&lt;br&gt;Y800 : Invalid value for accountId&lt;br&gt;Y800 : Invalid value for groupBy&lt;br&gt;Y803 : groupBy required&lt;br&gt;Y803 : categoryType required&lt;br&gt;Y800 : Invalid value for categoryId&lt;br&gt;Y800 : Invalid value for fromDate&lt;br&gt;Y800 : Invalid value for toDate&lt;br&gt;Y800 : Invalid value for fromDate or toDate&lt;br&gt;Y814 : Exchange rate not available for currency&lt;br&gt;Y815 : Cannot apply filter on categoryId if groupBy value is CATEGORY_TYPE&lt;br&gt;Y816 : User-defined category details can only be requested for one system categoryId with groupBy&#x3D;&#39;CATEGORY&#39;&lt;br&gt;Y824 : The maximum number of accountIds permitted is 100&lt;br&gt;Y824 : The maximum number of categoryIds permitted is 100&lt;br&gt;Y824 : The maximum number of categoryTypes permitted is 100 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionSummaryAsync(String groupBy, String accountId, String categoryId, String categoryType, String fromDate, String include, Boolean includeUserCategory, String interval, String toDate, final ApiCallback<DerivedTransactionSummaryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionSummaryValidateBeforeCall(groupBy, accountId, categoryId, categoryType, fromDate, include, includeUserCategory, interval, toDate, _callback);
        Type localVarReturnType = new TypeToken<DerivedTransactionSummaryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
