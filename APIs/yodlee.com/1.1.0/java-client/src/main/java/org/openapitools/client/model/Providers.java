/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Capability;
import org.openapitools.client.model.ProvidersDataset;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Providers
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.041142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Providers {
  /**
   * Indicates the priority for which the service is invoked.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
   */
  @JsonAdapter(PRIORITYEnum.Adapter.class)
  public enum PRIORITYEnum {
    POPULAR("POPULAR"),
    
    SUGGESTED("SUGGESTED"),
    
    COBRAND("COBRAND"),
    
    SEARCH("SEARCH"),
    
    ALL("ALL");

    private String value;

    PRIORITYEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PRIORITYEnum fromValue(String value) {
      for (PRIORITYEnum b : PRIORITYEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PRIORITYEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PRIORITYEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PRIORITYEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PRIORITYEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PRIORITYEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_P_R_I_O_R_I_T_Y = "PRIORITY";
  @SerializedName(SERIALIZED_NAME_P_R_I_O_R_I_T_Y)
  private PRIORITYEnum PRIORITY;

  /**
   * Gets or Sets accountType
   */
  @JsonAdapter(AccountTypeEnum.Adapter.class)
  public enum AccountTypeEnum {
    CURRENT("CURRENT"),
    
    BROKERAGE_CASH("BROKERAGE_CASH");

    private String value;

    AccountTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccountTypeEnum fromValue(String value) {
      for (AccountTypeEnum b : AccountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccountTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccountTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccountTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccountTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccountTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "accountType";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private List<AccountTypeEnum> accountType = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASSOCIATED_PROVIDER_IDS = "associatedProviderIds";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_PROVIDER_IDS)
  private List<Long> associatedProviderIds = new ArrayList<>();

  /**
   * Gets or Sets authParameter
   */
  @JsonAdapter(AuthParameterEnum.Adapter.class)
  public enum AuthParameterEnum {
    AUTHORIZATION_CODE("authorizationCode"),
    
    ID_TOKEN("idToken"),
    
    AUTH_RESPONSE("authResponse");

    private String value;

    AuthParameterEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthParameterEnum fromValue(String value) {
      for (AuthParameterEnum b : AuthParameterEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthParameterEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthParameterEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthParameterEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthParameterEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthParameterEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTH_PARAMETER = "authParameter";
  @SerializedName(SERIALIZED_NAME_AUTH_PARAMETER)
  private List<AuthParameterEnum> authParameter = new ArrayList<>();

  /**
   * The authentication type enabled at the provider site. &lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
   */
  @JsonAdapter(AuthTypeEnum.Adapter.class)
  public enum AuthTypeEnum {
    OAUTH("OAUTH"),
    
    CREDENTIALS("CREDENTIALS"),
    
    MFA_CREDENTIALS("MFA_CREDENTIALS");

    private String value;

    AuthTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthTypeEnum fromValue(String value) {
      for (AuthTypeEnum b : AuthTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTH_TYPE = "authType";
  @SerializedName(SERIALIZED_NAME_AUTH_TYPE)
  private AuthTypeEnum authType;

  public static final String SERIALIZED_NAME_BASE_URL = "baseUrl";
  @SerializedName(SERIALIZED_NAME_BASE_URL)
  private String baseUrl;

  public static final String SERIALIZED_NAME_CAPABILITY = "capability";
  @SerializedName(SERIALIZED_NAME_CAPABILITY)
  private List<Capability> capability = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNTRY_I_S_O_CODE = "countryISOCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_I_S_O_CODE)
  private String countryISOCode;

  public static final String SERIALIZED_NAME_DATASET = "dataset";
  @SerializedName(SERIALIZED_NAME_DATASET)
  private List<ProvidersDataset> dataset = new ArrayList<>();

  public static final String SERIALIZED_NAME_FAVICON = "favicon";
  @SerializedName(SERIALIZED_NAME_FAVICON)
  private String favicon;

  public static final String SERIALIZED_NAME_FORGET_PASSWORD_URL = "forgetPasswordUrl";
  @SerializedName(SERIALIZED_NAME_FORGET_PASSWORD_URL)
  private String forgetPasswordUrl;

  public static final String SERIALIZED_NAME_HELP = "help";
  @SerializedName(SERIALIZED_NAME_HELP)
  private String help;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_IS_ADDED_BY_USER = "isAddedByUser";
  @SerializedName(SERIALIZED_NAME_IS_ADDED_BY_USER)
  private String isAddedByUser;

  public static final String SERIALIZED_NAME_IS_AUTO_REFRESH_ENABLED = "isAutoRefreshEnabled";
  @SerializedName(SERIALIZED_NAME_IS_AUTO_REFRESH_ENABLED)
  private Boolean isAutoRefreshEnabled;

  public static final String SERIALIZED_NAME_IS_CONSENT_REQUIRED = "isConsentRequired";
  @SerializedName(SERIALIZED_NAME_IS_CONSENT_REQUIRED)
  private Boolean isConsentRequired;

  public static final String SERIALIZED_NAME_LANGUAGE_I_S_O_CODE = "languageISOCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_I_S_O_CODE)
  private String languageISOCode;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private String lastModified;

  public static final String SERIALIZED_NAME_LOGIN_HELP = "loginHelp";
  @SerializedName(SERIALIZED_NAME_LOGIN_HELP)
  private String loginHelp;

  public static final String SERIALIZED_NAME_LOGIN_URL = "loginUrl";
  @SerializedName(SERIALIZED_NAME_LOGIN_URL)
  private String loginUrl;

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private String logo;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRIMARY_LANGUAGE_I_S_O_CODE = "primaryLanguageISOCode";
  @SerializedName(SERIALIZED_NAME_PRIMARY_LANGUAGE_I_S_O_CODE)
  private String primaryLanguageISOCode;

  /**
   * Determines if the provider is supported for the cobrand (customer), is in the beta stage, etc. &lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    SUPPORTED("Supported"),
    
    BETA("Beta"),
    
    UNSUPPORTED("Unsupported");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public Providers() {
  }

  public Providers(
     PRIORITYEnum PRIORITY, 
     List<AccountTypeEnum> accountType, 
     List<Long> associatedProviderIds, 
     List<AuthParameterEnum> authParameter, 
     AuthTypeEnum authType, 
     String baseUrl, 
     List<Capability> capability, 
     String countryISOCode, 
     List<ProvidersDataset> dataset, 
     String favicon, 
     String forgetPasswordUrl, 
     String help, 
     Long id, 
     String isAddedByUser, 
     Boolean isAutoRefreshEnabled, 
     Boolean isConsentRequired, 
     String languageISOCode, 
     String lastModified, 
     String loginHelp, 
     String loginUrl, 
     String logo, 
     String name, 
     String primaryLanguageISOCode, 
     StatusEnum status
  ) {
    this();
    this.PRIORITY = PRIORITY;
    this.accountType = accountType;
    this.associatedProviderIds = associatedProviderIds;
    this.authParameter = authParameter;
    this.authType = authType;
    this.baseUrl = baseUrl;
    this.capability = capability;
    this.countryISOCode = countryISOCode;
    this.dataset = dataset;
    this.favicon = favicon;
    this.forgetPasswordUrl = forgetPasswordUrl;
    this.help = help;
    this.id = id;
    this.isAddedByUser = isAddedByUser;
    this.isAutoRefreshEnabled = isAutoRefreshEnabled;
    this.isConsentRequired = isConsentRequired;
    this.languageISOCode = languageISOCode;
    this.lastModified = lastModified;
    this.loginHelp = loginHelp;
    this.loginUrl = loginUrl;
    this.logo = logo;
    this.name = name;
    this.primaryLanguageISOCode = primaryLanguageISOCode;
    this.status = status;
  }

  /**
   * Indicates the priority for which the service is invoked.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
   * @return PRIORITY
   */
  @javax.annotation.Nullable
  public PRIORITYEnum getPRIORITY() {
    return PRIORITY;
  }



  /**
   * AccountType supported by the provider, eg: Brokerage Cash, Current&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
   * @return accountType
   */
  @javax.annotation.Nullable
  public List<AccountTypeEnum> getAccountType() {
    return accountType;
  }



  /**
   * The screen-scraping providers that are associated to the Open Banking provider ID.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;: All Containers&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;/ul&gt;
   * @return associatedProviderIds
   */
  @javax.annotation.Nullable
  public List<Long> getAssociatedProviderIds() {
    return associatedProviderIds;
  }



  /**
   * AuthParameter appears in the response only in case of token-based aggregation sites.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
   * @return authParameter
   */
  @javax.annotation.Nullable
  public List<AuthParameterEnum> getAuthParameter() {
    return authParameter;
  }



  /**
   * The authentication type enabled at the provider site. &lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Applicable Values&lt;/b&gt;&lt;br&gt;
   * @return authType
   */
  @javax.annotation.Nullable
  public AuthTypeEnum getAuthType() {
    return authType;
  }



  /**
   * The base URL of the provider&#39;s site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
   * @return baseUrl
   */
  @javax.annotation.Nullable
  public String getBaseUrl() {
    return baseUrl;
  }



  /**
   * Capability of the site&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;b&gt;Note : &lt;/b&gt; capability has been deprecated
   * @return capability
   */
  @javax.annotation.Nullable
  public List<Capability> getCapability() {
    return capability;
  }



  /**
   * Country to which the provider belongs.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
   * @return countryISOCode
   */
  @javax.annotation.Nullable
  public String getCountryISOCode() {
    return countryISOCode;
  }



  /**
   * Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
   * @return dataset
   */
  @javax.annotation.Nullable
  public List<ProvidersDataset> getDataset() {
    return dataset;
  }



  /**
   * Favicon link of the provider.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
   * @return favicon
   */
  @javax.annotation.Nullable
  public String getFavicon() {
    return favicon;
  }



  /**
   * The forget password URL of the provider site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
   * @return forgetPasswordUrl
   */
  @javax.annotation.Nullable
  public String getForgetPasswordUrl() {
    return forgetPasswordUrl;
  }



  /**
   * Text to guide user through linking an account that belongs to the site&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
   * @return help
   */
  @javax.annotation.Nullable
  public String getHelp() {
    return help;
  }



  /**
   * Unique identifier for the provider site(e.g., financial institution sites, biller sites, lender sites, etc.).&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }



  /**
   * Indicates that the site has been added by the user at least once.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
   * @return isAddedByUser
   */
  @javax.annotation.Nullable
  public String getIsAddedByUser() {
    return isAddedByUser;
  }



  /**
   * Indicates if a provider site is auto-refreshed.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
   * @return isAutoRefreshEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsAutoRefreshEnabled() {
    return isAutoRefreshEnabled;
  }



  /**
   * Indicates if a provider site requires consent.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
   * @return isConsentRequired
   */
  @javax.annotation.Nullable
  public Boolean getIsConsentRequired() {
    return isConsentRequired;
  }



  /**
   * The language in which the provider details are provided. For example, a site supports two languages English and French. English being the primary language, the provider response will be provided in French depending on the user&#39;s locale. The language follows the two letter ISO code.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
   * @return languageISOCode
   */
  @javax.annotation.Nullable
  public String getLanguageISOCode() {
    return languageISOCode;
  }



  /**
   * Determines when the provider information was updated by Yodlee. If the customer caches the data, the cache is recommended to be refreshed based on this field.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
   * @return lastModified
   */
  @javax.annotation.Nullable
  public String getLastModified() {
    return lastModified;
  }



  /**
   * Help text to guide the user to choose the correct provider site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
   * @return loginHelp
   */
  @javax.annotation.Nullable
  public String getLoginHelp() {
    return loginHelp;
  }



  /**
   * The login URL of the provider&#39;s site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
   * @return loginUrl
   */
  @javax.annotation.Nullable
  public String getLoginUrl() {
    return loginUrl;
  }



  /**
   * The logo link of the provider institution. The link will return the logo in the PNG format.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
   * @return logo
   */
  @javax.annotation.Nullable
  public String getLogo() {
    return logo;
  }



  /**
   * The name of a provider site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * The primary language of the site.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
   * @return primaryLanguageISOCode
   */
  @javax.annotation.Nullable
  public String getPrimaryLanguageISOCode() {
    return primaryLanguageISOCode;
  }



  /**
   * Determines if the provider is supported for the cobrand (customer), is in the beta stage, etc. &lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;GET providers/{providerId}&lt;/li&gt;&lt;li&gt;GET providers&lt;/li&gt;&lt;/ul&gt;
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Providers providers = (Providers) o;
    return Objects.equals(this.PRIORITY, providers.PRIORITY) &&
        Objects.equals(this.accountType, providers.accountType) &&
        Objects.equals(this.associatedProviderIds, providers.associatedProviderIds) &&
        Objects.equals(this.authParameter, providers.authParameter) &&
        Objects.equals(this.authType, providers.authType) &&
        Objects.equals(this.baseUrl, providers.baseUrl) &&
        Objects.equals(this.capability, providers.capability) &&
        Objects.equals(this.countryISOCode, providers.countryISOCode) &&
        Objects.equals(this.dataset, providers.dataset) &&
        Objects.equals(this.favicon, providers.favicon) &&
        Objects.equals(this.forgetPasswordUrl, providers.forgetPasswordUrl) &&
        Objects.equals(this.help, providers.help) &&
        Objects.equals(this.id, providers.id) &&
        Objects.equals(this.isAddedByUser, providers.isAddedByUser) &&
        Objects.equals(this.isAutoRefreshEnabled, providers.isAutoRefreshEnabled) &&
        Objects.equals(this.isConsentRequired, providers.isConsentRequired) &&
        Objects.equals(this.languageISOCode, providers.languageISOCode) &&
        Objects.equals(this.lastModified, providers.lastModified) &&
        Objects.equals(this.loginHelp, providers.loginHelp) &&
        Objects.equals(this.loginUrl, providers.loginUrl) &&
        Objects.equals(this.logo, providers.logo) &&
        Objects.equals(this.name, providers.name) &&
        Objects.equals(this.primaryLanguageISOCode, providers.primaryLanguageISOCode) &&
        Objects.equals(this.status, providers.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(PRIORITY, accountType, associatedProviderIds, authParameter, authType, baseUrl, capability, countryISOCode, dataset, favicon, forgetPasswordUrl, help, id, isAddedByUser, isAutoRefreshEnabled, isConsentRequired, languageISOCode, lastModified, loginHelp, loginUrl, logo, name, primaryLanguageISOCode, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Providers {\n");
    sb.append("    PRIORITY: ").append(toIndentedString(PRIORITY)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    associatedProviderIds: ").append(toIndentedString(associatedProviderIds)).append("\n");
    sb.append("    authParameter: ").append(toIndentedString(authParameter)).append("\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    baseUrl: ").append(toIndentedString(baseUrl)).append("\n");
    sb.append("    capability: ").append(toIndentedString(capability)).append("\n");
    sb.append("    countryISOCode: ").append(toIndentedString(countryISOCode)).append("\n");
    sb.append("    dataset: ").append(toIndentedString(dataset)).append("\n");
    sb.append("    favicon: ").append(toIndentedString(favicon)).append("\n");
    sb.append("    forgetPasswordUrl: ").append(toIndentedString(forgetPasswordUrl)).append("\n");
    sb.append("    help: ").append(toIndentedString(help)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isAddedByUser: ").append(toIndentedString(isAddedByUser)).append("\n");
    sb.append("    isAutoRefreshEnabled: ").append(toIndentedString(isAutoRefreshEnabled)).append("\n");
    sb.append("    isConsentRequired: ").append(toIndentedString(isConsentRequired)).append("\n");
    sb.append("    languageISOCode: ").append(toIndentedString(languageISOCode)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    loginHelp: ").append(toIndentedString(loginHelp)).append("\n");
    sb.append("    loginUrl: ").append(toIndentedString(loginUrl)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    primaryLanguageISOCode: ").append(toIndentedString(primaryLanguageISOCode)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PRIORITY");
    openapiFields.add("accountType");
    openapiFields.add("associatedProviderIds");
    openapiFields.add("authParameter");
    openapiFields.add("authType");
    openapiFields.add("baseUrl");
    openapiFields.add("capability");
    openapiFields.add("countryISOCode");
    openapiFields.add("dataset");
    openapiFields.add("favicon");
    openapiFields.add("forgetPasswordUrl");
    openapiFields.add("help");
    openapiFields.add("id");
    openapiFields.add("isAddedByUser");
    openapiFields.add("isAutoRefreshEnabled");
    openapiFields.add("isConsentRequired");
    openapiFields.add("languageISOCode");
    openapiFields.add("lastModified");
    openapiFields.add("loginHelp");
    openapiFields.add("loginUrl");
    openapiFields.add("logo");
    openapiFields.add("name");
    openapiFields.add("primaryLanguageISOCode");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Providers
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Providers.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Providers is not found in the empty JSON string", Providers.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Providers.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Providers` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("PRIORITY") != null && !jsonObj.get("PRIORITY").isJsonNull()) && !jsonObj.get("PRIORITY").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PRIORITY` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PRIORITY").toString()));
      }
      // validate the optional field `PRIORITY`
      if (jsonObj.get("PRIORITY") != null && !jsonObj.get("PRIORITY").isJsonNull()) {
        PRIORITYEnum.validateJsonElement(jsonObj.get("PRIORITY"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("accountType") != null && !jsonObj.get("accountType").isJsonNull() && !jsonObj.get("accountType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountType` to be an array in the JSON string but got `%s`", jsonObj.get("accountType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("associatedProviderIds") != null && !jsonObj.get("associatedProviderIds").isJsonNull() && !jsonObj.get("associatedProviderIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `associatedProviderIds` to be an array in the JSON string but got `%s`", jsonObj.get("associatedProviderIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("authParameter") != null && !jsonObj.get("authParameter").isJsonNull() && !jsonObj.get("authParameter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `authParameter` to be an array in the JSON string but got `%s`", jsonObj.get("authParameter").toString()));
      }
      if ((jsonObj.get("authType") != null && !jsonObj.get("authType").isJsonNull()) && !jsonObj.get("authType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authType").toString()));
      }
      // validate the optional field `authType`
      if (jsonObj.get("authType") != null && !jsonObj.get("authType").isJsonNull()) {
        AuthTypeEnum.validateJsonElement(jsonObj.get("authType"));
      }
      if ((jsonObj.get("baseUrl") != null && !jsonObj.get("baseUrl").isJsonNull()) && !jsonObj.get("baseUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseUrl").toString()));
      }
      if (jsonObj.get("capability") != null && !jsonObj.get("capability").isJsonNull()) {
        JsonArray jsonArraycapability = jsonObj.getAsJsonArray("capability");
        if (jsonArraycapability != null) {
          // ensure the json data is an array
          if (!jsonObj.get("capability").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `capability` to be an array in the JSON string but got `%s`", jsonObj.get("capability").toString()));
          }

          // validate the optional field `capability` (array)
          for (int i = 0; i < jsonArraycapability.size(); i++) {
            Capability.validateJsonElement(jsonArraycapability.get(i));
          };
        }
      }
      if ((jsonObj.get("countryISOCode") != null && !jsonObj.get("countryISOCode").isJsonNull()) && !jsonObj.get("countryISOCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryISOCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryISOCode").toString()));
      }
      if (jsonObj.get("dataset") != null && !jsonObj.get("dataset").isJsonNull()) {
        JsonArray jsonArraydataset = jsonObj.getAsJsonArray("dataset");
        if (jsonArraydataset != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dataset").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dataset` to be an array in the JSON string but got `%s`", jsonObj.get("dataset").toString()));
          }

          // validate the optional field `dataset` (array)
          for (int i = 0; i < jsonArraydataset.size(); i++) {
            ProvidersDataset.validateJsonElement(jsonArraydataset.get(i));
          };
        }
      }
      if ((jsonObj.get("favicon") != null && !jsonObj.get("favicon").isJsonNull()) && !jsonObj.get("favicon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `favicon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("favicon").toString()));
      }
      if ((jsonObj.get("forgetPasswordUrl") != null && !jsonObj.get("forgetPasswordUrl").isJsonNull()) && !jsonObj.get("forgetPasswordUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forgetPasswordUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forgetPasswordUrl").toString()));
      }
      if ((jsonObj.get("help") != null && !jsonObj.get("help").isJsonNull()) && !jsonObj.get("help").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `help` to be a primitive type in the JSON string but got `%s`", jsonObj.get("help").toString()));
      }
      if ((jsonObj.get("isAddedByUser") != null && !jsonObj.get("isAddedByUser").isJsonNull()) && !jsonObj.get("isAddedByUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isAddedByUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isAddedByUser").toString()));
      }
      if ((jsonObj.get("languageISOCode") != null && !jsonObj.get("languageISOCode").isJsonNull()) && !jsonObj.get("languageISOCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageISOCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageISOCode").toString()));
      }
      if ((jsonObj.get("lastModified") != null && !jsonObj.get("lastModified").isJsonNull()) && !jsonObj.get("lastModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModified").toString()));
      }
      if ((jsonObj.get("loginHelp") != null && !jsonObj.get("loginHelp").isJsonNull()) && !jsonObj.get("loginHelp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loginHelp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loginHelp").toString()));
      }
      if ((jsonObj.get("loginUrl") != null && !jsonObj.get("loginUrl").isJsonNull()) && !jsonObj.get("loginUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loginUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loginUrl").toString()));
      }
      if ((jsonObj.get("logo") != null && !jsonObj.get("logo").isJsonNull()) && !jsonObj.get("logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("primaryLanguageISOCode") != null && !jsonObj.get("primaryLanguageISOCode").isJsonNull()) && !jsonObj.get("primaryLanguageISOCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryLanguageISOCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryLanguageISOCode").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Providers.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Providers' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Providers> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Providers.class));

       return (TypeAdapter<T>) new TypeAdapter<Providers>() {
           @Override
           public void write(JsonWriter out, Providers value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Providers read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Providers given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Providers
   * @throws IOException if the JSON string is invalid with respect to Providers
   */
  public static Providers fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Providers.class);
  }

  /**
   * Convert an instance of Providers to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

