/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RuleClause;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TransactionCategorizationRule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.041142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransactionCategorizationRule {
  public static final String SERIALIZED_NAME_CATEGORY_LEVEL_ID = "categoryLevelId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_LEVEL_ID)
  private Integer categoryLevelId;

  public static final String SERIALIZED_NAME_MEM_ID = "memId";
  @SerializedName(SERIALIZED_NAME_MEM_ID)
  private Long memId;

  public static final String SERIALIZED_NAME_RULE_CLAUSES = "ruleClauses";
  @SerializedName(SERIALIZED_NAME_RULE_CLAUSES)
  private List<RuleClause> ruleClauses = new ArrayList<>();

  public static final String SERIALIZED_NAME_RULE_PRIORITY = "rulePriority";
  @SerializedName(SERIALIZED_NAME_RULE_PRIORITY)
  private Integer rulePriority;

  public static final String SERIALIZED_NAME_TRANSACTION_CATEGORISATION_ID = "transactionCategorisationId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_CATEGORISATION_ID)
  private Long transactionCategorisationId;

  public static final String SERIALIZED_NAME_USER_DEFINED_RULE_ID = "userDefinedRuleId";
  @SerializedName(SERIALIZED_NAME_USER_DEFINED_RULE_ID)
  private Long userDefinedRuleId;

  public TransactionCategorizationRule() {
  }

  public TransactionCategorizationRule(
     Integer categoryLevelId, 
     Long memId, 
     List<RuleClause> ruleClauses, 
     Integer rulePriority, 
     Long transactionCategorisationId, 
     Long userDefinedRuleId
  ) {
    this();
    this.categoryLevelId = categoryLevelId;
    this.memId = memId;
    this.ruleClauses = ruleClauses;
    this.rulePriority = rulePriority;
    this.transactionCategorisationId = transactionCategorisationId;
    this.userDefinedRuleId = userDefinedRuleId;
  }

  /**
   * The level of the category for which the rule is created.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;:  creditCard, insurance, loan&lt;br&gt;
   * @return categoryLevelId
   */
  @javax.annotation.Nullable
  public Integer getCategoryLevelId() {
    return categoryLevelId;
  }



  /**
   * Unique identifier of the user.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;:  creditCard, investment, insurance, loan&lt;br&gt;
   * @return memId
   */
  @javax.annotation.Nullable
  public Long getMemId() {
    return memId;
  }



  /**
   * Details of rules. &lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;:  creditCard, investment, insurance, loan&lt;br&gt;
   * @return ruleClauses
   */
  @javax.annotation.Nullable
  public List<RuleClause> getRuleClauses() {
    return ruleClauses;
  }



  /**
   * The order in which the rules get executed on transactions.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;:  creditCard, investment, insurance, loan&lt;br&gt;
   * @return rulePriority
   */
  @javax.annotation.Nullable
  public Integer getRulePriority() {
    return rulePriority;
  }



  /**
   * Category id that is assigned to the transaction when the transaction matches the rule clause. This is the id field of the transaction category resource.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;:  creditCard, investment, insurance, loan&lt;br&gt;
   * @return transactionCategorisationId
   */
  @javax.annotation.Nullable
  public Long getTransactionCategorisationId() {
    return transactionCategorisationId;
  }



  /**
   * Unique identifier generated for every rule the user creates.&lt;br&gt;&lt;br&gt;&lt;b&gt;Applicable containers&lt;/b&gt;:  creditCard, investment, insurance, loan&lt;br&gt;
   * @return userDefinedRuleId
   */
  @javax.annotation.Nullable
  public Long getUserDefinedRuleId() {
    return userDefinedRuleId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionCategorizationRule transactionCategorizationRule = (TransactionCategorizationRule) o;
    return Objects.equals(this.categoryLevelId, transactionCategorizationRule.categoryLevelId) &&
        Objects.equals(this.memId, transactionCategorizationRule.memId) &&
        Objects.equals(this.ruleClauses, transactionCategorizationRule.ruleClauses) &&
        Objects.equals(this.rulePriority, transactionCategorizationRule.rulePriority) &&
        Objects.equals(this.transactionCategorisationId, transactionCategorizationRule.transactionCategorisationId) &&
        Objects.equals(this.userDefinedRuleId, transactionCategorizationRule.userDefinedRuleId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryLevelId, memId, ruleClauses, rulePriority, transactionCategorisationId, userDefinedRuleId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionCategorizationRule {\n");
    sb.append("    categoryLevelId: ").append(toIndentedString(categoryLevelId)).append("\n");
    sb.append("    memId: ").append(toIndentedString(memId)).append("\n");
    sb.append("    ruleClauses: ").append(toIndentedString(ruleClauses)).append("\n");
    sb.append("    rulePriority: ").append(toIndentedString(rulePriority)).append("\n");
    sb.append("    transactionCategorisationId: ").append(toIndentedString(transactionCategorisationId)).append("\n");
    sb.append("    userDefinedRuleId: ").append(toIndentedString(userDefinedRuleId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoryLevelId");
    openapiFields.add("memId");
    openapiFields.add("ruleClauses");
    openapiFields.add("rulePriority");
    openapiFields.add("transactionCategorisationId");
    openapiFields.add("userDefinedRuleId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransactionCategorizationRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionCategorizationRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionCategorizationRule is not found in the empty JSON string", TransactionCategorizationRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransactionCategorizationRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionCategorizationRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("ruleClauses") != null && !jsonObj.get("ruleClauses").isJsonNull()) {
        JsonArray jsonArrayruleClauses = jsonObj.getAsJsonArray("ruleClauses");
        if (jsonArrayruleClauses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ruleClauses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ruleClauses` to be an array in the JSON string but got `%s`", jsonObj.get("ruleClauses").toString()));
          }

          // validate the optional field `ruleClauses` (array)
          for (int i = 0; i < jsonArrayruleClauses.size(); i++) {
            RuleClause.validateJsonElement(jsonArrayruleClauses.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionCategorizationRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionCategorizationRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionCategorizationRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionCategorizationRule.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionCategorizationRule>() {
           @Override
           public void write(JsonWriter out, TransactionCategorizationRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionCategorizationRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransactionCategorizationRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransactionCategorizationRule
   * @throws IOException if the JSON string is invalid with respect to TransactionCategorizationRule
   */
  public static TransactionCategorizationRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionCategorizationRule.class);
  }

  /**
   * Convert an instance of TransactionCategorizationRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

