/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DataExtractsEventResponse;
import org.openapitools.client.model.DataExtractsUserDataResponse;
import org.openapitools.client.model.YodleeError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataExtractsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataExtractsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataExtractsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getDataExtractsEvents
     * @param eventName Event Name (required)
     * @param fromDate From DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param toDate To DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for fromDate.fromDate cannot be greater than current time&lt;br&gt;Y800 : Invalid value for toDate.toDate cannot be greater than current time&lt;br&gt;Y800 : Invalid value for fromDate or toDate.fromDate and toDate cannot be older than 7 days&lt;br&gt;Y800 : Invalid value for fromDate.fromDate cannot be greater than toDate. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataExtractsEventsCall(String eventName, String fromDate, String toDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dataExtracts/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eventName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventName", eventName));
        }

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataExtractsEventsValidateBeforeCall(String eventName, String fromDate, String toDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventName' is set
        if (eventName == null) {
            throw new ApiException("Missing the required parameter 'eventName' when calling getDataExtractsEvents(Async)");
        }

        // verify the required parameter 'fromDate' is set
        if (fromDate == null) {
            throw new ApiException("Missing the required parameter 'fromDate' when calling getDataExtractsEvents(Async)");
        }

        // verify the required parameter 'toDate' is set
        if (toDate == null) {
            throw new ApiException("Missing the required parameter 'toDate' when calling getDataExtractsEvents(Async)");
        }

        return getDataExtractsEventsCall(eventName, fromDate, toDate, _callback);

    }

    /**
     * Get Events
     * The get extracts events service is used to learn about occurrences of data extract related events. This service currently supports only the DATA_UPDATES event.&lt;br&gt;Passing the event name as DATA_UPDATES provides information about users for whom data has been modified in the system for the specified time range. To learn more, please refer to the &lt;a href&#x3D;\&quot;https://developer.yodlee.com/docs/api/1.1/DataExtracts\&quot;&gt;dataExtracts&lt;/a&gt; page.&lt;br&gt;You can retrieve data in increments of no more than 60 minutes over the period of the last 7 days from today&#39;s date.&lt;br&gt;This service is only invoked with either admin access token or a cobrand session.&lt;br&gt;
     * @param eventName Event Name (required)
     * @param fromDate From DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param toDate To DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @return DataExtractsEventResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for fromDate.fromDate cannot be greater than current time&lt;br&gt;Y800 : Invalid value for toDate.toDate cannot be greater than current time&lt;br&gt;Y800 : Invalid value for fromDate or toDate.fromDate and toDate cannot be older than 7 days&lt;br&gt;Y800 : Invalid value for fromDate.fromDate cannot be greater than toDate. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DataExtractsEventResponse getDataExtractsEvents(String eventName, String fromDate, String toDate) throws ApiException {
        ApiResponse<DataExtractsEventResponse> localVarResp = getDataExtractsEventsWithHttpInfo(eventName, fromDate, toDate);
        return localVarResp.getData();
    }

    /**
     * Get Events
     * The get extracts events service is used to learn about occurrences of data extract related events. This service currently supports only the DATA_UPDATES event.&lt;br&gt;Passing the event name as DATA_UPDATES provides information about users for whom data has been modified in the system for the specified time range. To learn more, please refer to the &lt;a href&#x3D;\&quot;https://developer.yodlee.com/docs/api/1.1/DataExtracts\&quot;&gt;dataExtracts&lt;/a&gt; page.&lt;br&gt;You can retrieve data in increments of no more than 60 minutes over the period of the last 7 days from today&#39;s date.&lt;br&gt;This service is only invoked with either admin access token or a cobrand session.&lt;br&gt;
     * @param eventName Event Name (required)
     * @param fromDate From DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param toDate To DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @return ApiResponse&lt;DataExtractsEventResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for fromDate.fromDate cannot be greater than current time&lt;br&gt;Y800 : Invalid value for toDate.toDate cannot be greater than current time&lt;br&gt;Y800 : Invalid value for fromDate or toDate.fromDate and toDate cannot be older than 7 days&lt;br&gt;Y800 : Invalid value for fromDate.fromDate cannot be greater than toDate. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataExtractsEventResponse> getDataExtractsEventsWithHttpInfo(String eventName, String fromDate, String toDate) throws ApiException {
        okhttp3.Call localVarCall = getDataExtractsEventsValidateBeforeCall(eventName, fromDate, toDate, null);
        Type localVarReturnType = new TypeToken<DataExtractsEventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Events (asynchronously)
     * The get extracts events service is used to learn about occurrences of data extract related events. This service currently supports only the DATA_UPDATES event.&lt;br&gt;Passing the event name as DATA_UPDATES provides information about users for whom data has been modified in the system for the specified time range. To learn more, please refer to the &lt;a href&#x3D;\&quot;https://developer.yodlee.com/docs/api/1.1/DataExtracts\&quot;&gt;dataExtracts&lt;/a&gt; page.&lt;br&gt;You can retrieve data in increments of no more than 60 minutes over the period of the last 7 days from today&#39;s date.&lt;br&gt;This service is only invoked with either admin access token or a cobrand session.&lt;br&gt;
     * @param eventName Event Name (required)
     * @param fromDate From DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param toDate To DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for fromDate.fromDate cannot be greater than current time&lt;br&gt;Y800 : Invalid value for toDate.toDate cannot be greater than current time&lt;br&gt;Y800 : Invalid value for fromDate or toDate.fromDate and toDate cannot be older than 7 days&lt;br&gt;Y800 : Invalid value for fromDate.fromDate cannot be greater than toDate. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataExtractsEventsAsync(String eventName, String fromDate, String toDate, final ApiCallback<DataExtractsEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataExtractsEventsValidateBeforeCall(eventName, fromDate, toDate, _callback);
        Type localVarReturnType = new TypeToken<DataExtractsEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDataExtractsUserData
     * @param fromDate From DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param loginName Login Name (required)
     * @param toDate To DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for eventName&lt;br&gt;Y821 : Data update event not supported&lt;br&gt;Y800 : Invalid value for fromDate.fromDate cannot be greater than current time&lt;br&gt;Y800 : Invalid value for toDate.toDate cannot be greater than current time&lt;br&gt;.Y800 : Invalid value for fromDate or toDate.fromDate and toDate cannot be older than 7 days&lt;br&gt;Y800 : Invalid value for fromDate.fromDate can not be greater than toDate&lt;br&gt;Y800 : Invalid value for loginName </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataExtractsUserDataCall(String fromDate, String loginName, String toDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dataExtracts/userData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (loginName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loginName", loginName));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataExtractsUserDataValidateBeforeCall(String fromDate, String loginName, String toDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fromDate' is set
        if (fromDate == null) {
            throw new ApiException("Missing the required parameter 'fromDate' when calling getDataExtractsUserData(Async)");
        }

        // verify the required parameter 'loginName' is set
        if (loginName == null) {
            throw new ApiException("Missing the required parameter 'loginName' when calling getDataExtractsUserData(Async)");
        }

        // verify the required parameter 'toDate' is set
        if (toDate == null) {
            throw new ApiException("Missing the required parameter 'toDate' when calling getDataExtractsUserData(Async)");
        }

        return getDataExtractsUserDataCall(fromDate, loginName, toDate, _callback);

    }

    /**
     * Get userData
     * The get user data service is used to get a user&#39;s modified data for a particular period of time for accounts, transactions, holdings, and provider account information.&lt;br&gt;The time difference between fromDate and toDate fields cannot be more than 60 minutes.&lt;br&gt;By default, pagination is available for the transaction entity in this API. In the first response, the API will retrieve 500 transactions along with other data. The response header will provide a link to retrieve the next set of transactions.&lt;br&gt;In the response body of the first API response, totalTransactionsCount indicates the total number of transactions the API will retrieve for the user.&lt;br&gt;This service is only invoked with either admin access token or a cobrand session.&lt;br/&gt;Refer to &lt;a href&#x3D;\&quot;https://developer.yodlee.com/docs/api/1.1/DataExtracts\&quot;&gt;dataExtracts&lt;/a&gt; page for more information.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
     * @param fromDate From DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param loginName Login Name (required)
     * @param toDate To DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @return DataExtractsUserDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for eventName&lt;br&gt;Y821 : Data update event not supported&lt;br&gt;Y800 : Invalid value for fromDate.fromDate cannot be greater than current time&lt;br&gt;Y800 : Invalid value for toDate.toDate cannot be greater than current time&lt;br&gt;.Y800 : Invalid value for fromDate or toDate.fromDate and toDate cannot be older than 7 days&lt;br&gt;Y800 : Invalid value for fromDate.fromDate can not be greater than toDate&lt;br&gt;Y800 : Invalid value for loginName </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DataExtractsUserDataResponse getDataExtractsUserData(String fromDate, String loginName, String toDate) throws ApiException {
        ApiResponse<DataExtractsUserDataResponse> localVarResp = getDataExtractsUserDataWithHttpInfo(fromDate, loginName, toDate);
        return localVarResp.getData();
    }

    /**
     * Get userData
     * The get user data service is used to get a user&#39;s modified data for a particular period of time for accounts, transactions, holdings, and provider account information.&lt;br&gt;The time difference between fromDate and toDate fields cannot be more than 60 minutes.&lt;br&gt;By default, pagination is available for the transaction entity in this API. In the first response, the API will retrieve 500 transactions along with other data. The response header will provide a link to retrieve the next set of transactions.&lt;br&gt;In the response body of the first API response, totalTransactionsCount indicates the total number of transactions the API will retrieve for the user.&lt;br&gt;This service is only invoked with either admin access token or a cobrand session.&lt;br/&gt;Refer to &lt;a href&#x3D;\&quot;https://developer.yodlee.com/docs/api/1.1/DataExtracts\&quot;&gt;dataExtracts&lt;/a&gt; page for more information.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
     * @param fromDate From DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param loginName Login Name (required)
     * @param toDate To DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @return ApiResponse&lt;DataExtractsUserDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for eventName&lt;br&gt;Y821 : Data update event not supported&lt;br&gt;Y800 : Invalid value for fromDate.fromDate cannot be greater than current time&lt;br&gt;Y800 : Invalid value for toDate.toDate cannot be greater than current time&lt;br&gt;.Y800 : Invalid value for fromDate or toDate.fromDate and toDate cannot be older than 7 days&lt;br&gt;Y800 : Invalid value for fromDate.fromDate can not be greater than toDate&lt;br&gt;Y800 : Invalid value for loginName </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataExtractsUserDataResponse> getDataExtractsUserDataWithHttpInfo(String fromDate, String loginName, String toDate) throws ApiException {
        okhttp3.Call localVarCall = getDataExtractsUserDataValidateBeforeCall(fromDate, loginName, toDate, null);
        Type localVarReturnType = new TypeToken<DataExtractsUserDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get userData (asynchronously)
     * The get user data service is used to get a user&#39;s modified data for a particular period of time for accounts, transactions, holdings, and provider account information.&lt;br&gt;The time difference between fromDate and toDate fields cannot be more than 60 minutes.&lt;br&gt;By default, pagination is available for the transaction entity in this API. In the first response, the API will retrieve 500 transactions along with other data. The response header will provide a link to retrieve the next set of transactions.&lt;br&gt;In the response body of the first API response, totalTransactionsCount indicates the total number of transactions the API will retrieve for the user.&lt;br&gt;This service is only invoked with either admin access token or a cobrand session.&lt;br/&gt;Refer to &lt;a href&#x3D;\&quot;https://developer.yodlee.com/docs/api/1.1/DataExtracts\&quot;&gt;dataExtracts&lt;/a&gt; page for more information.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;This service supports the localization feature and accepts locale as a header parameter.&lt;/li&gt;
     * @param fromDate From DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param loginName Login Name (required)
     * @param toDate To DateTime (YYYY-MM-DDThh:mm:ssZ) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Y800 : Invalid value for eventName&lt;br&gt;Y821 : Data update event not supported&lt;br&gt;Y800 : Invalid value for fromDate.fromDate cannot be greater than current time&lt;br&gt;Y800 : Invalid value for toDate.toDate cannot be greater than current time&lt;br&gt;.Y800 : Invalid value for fromDate or toDate.fromDate and toDate cannot be older than 7 days&lt;br&gt;Y800 : Invalid value for fromDate.fromDate can not be greater than toDate&lt;br&gt;Y800 : Invalid value for loginName </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataExtractsUserDataAsync(String fromDate, String loginName, String toDate, final ApiCallback<DataExtractsUserDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataExtractsUserDataValidateBeforeCall(fromDate, loginName, toDate, _callback);
        Type localVarReturnType = new TypeToken<DataExtractsUserDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
