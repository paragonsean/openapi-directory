/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Cobrand
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.041142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Cobrand {
  public static final String SERIALIZED_NAME_COBRAND_LOGIN = "cobrandLogin";
  @SerializedName(SERIALIZED_NAME_COBRAND_LOGIN)
  private String cobrandLogin;

  public static final String SERIALIZED_NAME_COBRAND_PASSWORD = "cobrandPassword";
  @SerializedName(SERIALIZED_NAME_COBRAND_PASSWORD)
  private String cobrandPassword;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public Cobrand() {
  }

  public Cobrand cobrandLogin(String cobrandLogin) {
    this.cobrandLogin = cobrandLogin;
    return this;
  }

  /**
   * Get cobrandLogin
   * @return cobrandLogin
   */
  @javax.annotation.Nonnull
  public String getCobrandLogin() {
    return cobrandLogin;
  }

  public void setCobrandLogin(String cobrandLogin) {
    this.cobrandLogin = cobrandLogin;
  }


  public Cobrand cobrandPassword(String cobrandPassword) {
    this.cobrandPassword = cobrandPassword;
    return this;
  }

  /**
   * Get cobrandPassword
   * @return cobrandPassword
   */
  @javax.annotation.Nonnull
  public String getCobrandPassword() {
    return cobrandPassword;
  }

  public void setCobrandPassword(String cobrandPassword) {
    this.cobrandPassword = cobrandPassword;
  }


  public Cobrand locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * The customer&#39;s locale that will be considered for the localization functionality.&lt;br&gt;&lt;br&gt;&lt;b&gt;Endpoints&lt;/b&gt;:&lt;ul&gt;&lt;li&gt;POST cobrand/login&lt;/li&gt;&lt;/ul&gt;
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cobrand cobrand = (Cobrand) o;
    return Objects.equals(this.cobrandLogin, cobrand.cobrandLogin) &&
        Objects.equals(this.cobrandPassword, cobrand.cobrandPassword) &&
        Objects.equals(this.locale, cobrand.locale);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cobrandLogin, cobrandPassword, locale);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Cobrand {\n");
    sb.append("    cobrandLogin: ").append(toIndentedString(cobrandLogin)).append("\n");
    sb.append("    cobrandPassword: ").append(toIndentedString(cobrandPassword)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cobrandLogin");
    openapiFields.add("cobrandPassword");
    openapiFields.add("locale");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cobrandLogin");
    openapiRequiredFields.add("cobrandPassword");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Cobrand
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Cobrand.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Cobrand is not found in the empty JSON string", Cobrand.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Cobrand.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Cobrand` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Cobrand.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("cobrandLogin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cobrandLogin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cobrandLogin").toString()));
      }
      if (!jsonObj.get("cobrandPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cobrandPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cobrandPassword").toString()));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Cobrand.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Cobrand' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Cobrand> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Cobrand.class));

       return (TypeAdapter<T>) new TypeAdapter<Cobrand>() {
           @Override
           public void write(JsonWriter out, Cobrand value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Cobrand read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Cobrand given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Cobrand
   * @throws IOException if the JSON string is invalid with respect to Cobrand
   */
  public static Cobrand fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Cobrand.class);
  }

  /**
   * Convert an instance of Cobrand to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

