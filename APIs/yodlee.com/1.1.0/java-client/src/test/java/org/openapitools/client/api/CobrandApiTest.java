/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CobrandLoginRequest;
import org.openapitools.client.model.CobrandLoginResponse;
import org.openapitools.client.model.CobrandNotificationResponse;
import org.openapitools.client.model.CobrandPublicKeyResponse;
import org.openapitools.client.model.CreateCobrandNotificationEventRequest;
import org.openapitools.client.model.UpdateCobrandNotificationEventRequest;
import org.openapitools.client.model.YodleeError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CobrandApi
 */
@Disabled
public class CobrandApiTest {

    private final CobrandApi api = new CobrandApi();

    /**
     * Cobrand Login
     *
     * The cobrand login service authenticates a cobrand.&lt;br&gt;Cobrand session in the response includes the cobrand session token (cobSession) &lt;br&gt;which is used in subsequent API calls like registering or signing in the user. &lt;br&gt;The idle timeout for a cobrand session is 2 hours and the absolute timeout is 24 hours. This service can be &lt;br&gt;invoked to create a new cobrand session token. &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; This endpoint is deprecated for customers using the API Key-based authentication and is applicable only to customers who use the SAML-based authentication.&lt;br&gt;The content type has to be passed as application/json for the body parameter. &lt;br&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cobrandLoginTest() throws ApiException {
        CobrandLoginRequest cobrandLoginRequest = null;
        CobrandLoginResponse response = api.cobrandLogin(cobrandLoginRequest);
        // TODO: test validations
    }

    /**
     * Cobrand Logout
     *
     * The cobrand logout service is used to log out the cobrand.&lt;br&gt;This service does not return a response. The HTTP response code is 204 (Success with no content).&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; This endpoint is deprecated for customers using the API Key-based authentication and is applicable only to customers who use the SAML-based authentication.&lt;br&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cobrandLogoutTest() throws ApiException {
        api.cobrandLogout();
        // TODO: test validations
    }

    /**
     * Subscribe Event
     *
     * &lt;b&gt;Refer POST /configs/notifications/events/{eventName}.&lt;/b&gt;&lt;br&gt;The subscribe events service is used to subscribe to an event for receiving notifications.&lt;br&gt;The callback URL, where the notification will be posted should be provided to this service.&lt;br&gt;If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.&lt;br&gt;Customers can subscribe to REFRESH,DATA_UPDATES and AUTO_REFRESH_UPDATES event.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes&lt;/b&gt;:&lt;br&gt;This service is not available in developer sandbox/test environment and will be made available for testing in your dedicated environment, once the contract is signed.&lt;br&gt;The content type has to be passed as application/json for the body parameter.&lt;br&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSubscriptionEventTest() throws ApiException {
        String eventName = null;
        CreateCobrandNotificationEventRequest createCobrandNotificationEventRequest = null;
        api.createSubscriptionEvent(eventName, createCobrandNotificationEventRequest);
        // TODO: test validations
    }

    /**
     * Delete Subscription
     *
     * &lt;b&gt;Refer DELETE /configs/notifications/events/{eventName}.&lt;/b&gt;&lt;br&gt;The delete events service is used to unsubscribe from an events service.&lt;br&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSubscribedEventTest() throws ApiException {
        String eventName = null;
        api.deleteSubscribedEvent(eventName);
        // TODO: test validations
    }

    /**
     * Get Public Key
     *
     * &lt;b&gt;Refer GET /configs/publicKey.&lt;/b&gt;&lt;br&gt;The get public key service provides the customer the public key that should be used to encrypt the user credentials before sending it to Yodlee.&lt;br&gt;This endpoint is useful only for PKI enabled.&lt;br&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublicKeyTest() throws ApiException {
        CobrandPublicKeyResponse response = api.getPublicKey();
        // TODO: test validations
    }

    /**
     * Get Subscribed Events
     *
     * &lt;b&gt;Refer GET /configs/notifications/events.&lt;/b&gt;&lt;br&gt;The get events service provides the list of events for which consumers subscribed &lt;br&gt;to receive notifications. &lt;br&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubscribedEventsTest() throws ApiException {
        String eventName = null;
        CobrandNotificationResponse response = api.getSubscribedEvents(eventName);
        // TODO: test validations
    }

    /**
     * Update Subscription
     *
     * &lt;b&gt;Refer PUT /configs/notifications/events/{eventName}.&lt;/b&gt;&lt;br&gt;The update events service is used to update the callback URL.&lt;br&gt;If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; The content type has to be passed as application/json for the body parameter. &lt;br&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubscribedEventTest() throws ApiException {
        String eventName = null;
        UpdateCobrandNotificationEventRequest updateCobrandNotificationEventRequest = null;
        api.updateSubscribedEvent(eventName, updateCobrandNotificationEventRequest);
        // TODO: test validations
    }

}
