/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.UpdateUserRequest;
import org.openapitools.client.model.UserAccessTokensResponse;
import org.openapitools.client.model.UserDetailResponse;
import org.openapitools.client.model.UserRequest;
import org.openapitools.client.model.UserResponse;
import org.openapitools.client.model.YodleeError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Disabled
public class UserApiTest {

    private final UserApi api = new UserApi();

    /**
     * Get Access Tokens
     *
     * The Get Access Tokens service is used to retrieve the access tokens for the application id(s) provided.&lt;br&gt;URL in the response can be used to launch the application for which token is requested.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;This endpoint is deprecated for customers using the API Key-based authentication and is applicable only to customers who use the SAML-based authentication.&lt;br&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccessTokensTest() throws ApiException {
        String appIds = null;
        UserAccessTokensResponse response = api.getAccessTokens(appIds);
        // TODO: test validations
    }

    /**
     * Get User Details
     *
     * The get user details service is used to get the user profile information and the application preferences set at the time of user registration.&lt;br&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        UserDetailResponse response = api.getUser();
        // TODO: test validations
    }

    /**
     * Register User
     *
     * The register user service is used to register a user in Yodlee.&lt;br&gt;The loginName cannot include spaces and must be between 3 and 150 characters.&lt;br&gt;locale passed must be one of the supported locales for the customer. &lt;br&gt;Currency provided in the input will be respected in the derived services and the amount fields in the response will be provided in the preferred currency.&lt;br&gt;userParam is accepted as a body parameter. &lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;The content type has to be passed as application/json for the body parameter.&lt;/li&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerUserTest() throws ApiException {
        UserRequest userRequest = null;
        UserResponse response = api.registerUser(userRequest);
        // TODO: test validations
    }

    /**
     * Saml Login
     *
     * The SAML login service is used to authenticate system users with a SAML response.&lt;br&gt;A new user will be created with the input provided if that user isn&#39;t already in the system.&lt;br&gt;For existing users, the system will make updates based on changes or new information.&lt;br&gt;When authentication is successful, a user session token is returned.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;The content type has to be passed as application/x-www-form-urlencoded. &lt;li&gt;issuer, source and samlResponse should be passed as body parameters.&lt;/li&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void samlLoginTest() throws ApiException {
        String issuer = null;
        String samlResponse = null;
        String source = null;
        UserResponse response = api.samlLogin(issuer, samlResponse, source);
        // TODO: test validations
    }

    /**
     * Delete User
     *
     * The delete user service is used to delete or unregister a user from Yodlee. &lt;br&gt;Once deleted, the information related to the users cannot be retrieved. &lt;br&gt;The HTTP response code is 204 (Success without content)&lt;br&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unregisterTest() throws ApiException {
        api.unregister();
        // TODO: test validations
    }

    /**
     * Update User Details
     *
     * The update user details service is used to update user details like name, address, currency preference, etc.&lt;br&gt;Currency provided in the input will be respected in the &lt;a href&#x3D;\&quot;https://developer.yodlee.com/api-reference#tag/Derived\&quot;&gt;derived&lt;/a&gt; services and the amount fields in the response will be provided in the preferred currency.&lt;br&gt;The HTTP response code is 204 (Success without content). &lt;br&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        UpdateUserRequest updateUserRequest = null;
        api.updateUser(updateUserRequest);
        // TODO: test validations
    }

    /**
     * User Logout
     *
     * &lt;b&gt;Deprecated&lt;/b&gt;: This endpoint is deprecated for API Key-based authentication. The user logout service allows the user to log out of the application.&lt;br&gt;The service does not return a response body. The HTTP response code is 204 (Success with no content).&lt;br&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userLogoutTest() throws ApiException {
        api.userLogout();
        // TODO: test validations
    }

}
