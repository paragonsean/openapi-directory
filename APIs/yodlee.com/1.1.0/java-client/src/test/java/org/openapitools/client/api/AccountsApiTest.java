/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccountHistoricalBalancesResponse;
import org.openapitools.client.model.AccountResponse;
import org.openapitools.client.model.CreateAccountRequest;
import org.openapitools.client.model.CreatedAccountResponse;
import org.openapitools.client.model.EvaluateAddressRequest;
import org.openapitools.client.model.EvaluateAddressResponse;
import org.openapitools.client.model.UpdateAccountRequest;
import org.openapitools.client.model.YodleeError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsApi
 */
@Disabled
public class AccountsApiTest {

    private final AccountsApi api = new AccountsApi();

    /**
     * Add Manual Account
     *
     * The add account service is used to add manual accounts.&lt;br&gt;The response of add account service includes the account name , account number and Yodlee generated account id.&lt;br&gt;All manual accounts added will be included as part of networth calculation by default.&lt;br&gt;Add manual account support is available for bank, card, investment, insurance and loan container only.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;A real estate account addition is only supported for SYSTEM and MANUAL valuation type.&lt;/li&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createManualAccountTest() throws ApiException {
        CreateAccountRequest createAccountRequest = null;
        CreatedAccountResponse response = api.createManualAccount(createAccountRequest);
        // TODO: test validations
    }

    /**
     * Delete Account
     *
     * The delete account service allows an account to be deleted.&lt;br&gt;This service does not return a response. The HTTP response code is 204 (Success with no content).&lt;br&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAccountTest() throws ApiException {
        Long accountId = null;
        api.deleteAccount(accountId);
        // TODO: test validations
    }

    /**
     * Evaluate Address
     *
     * Use this service to validate the address before adding the real estate account.&lt;br&gt;If the address is valid, the service will return the complete address information.&lt;br&gt;The response will contain multiple addresses if the user-provided input matches with multiple entries in the vendor database.&lt;br&gt;In the case of multiple matches, the user can select the appropriate address from the list and then invoke the add account service with the complete address.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;Yodlee recommends to use this service before adding the real estate account to avoid failures.&lt;/li&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void evaluateAddressTest() throws ApiException {
        EvaluateAddressRequest evaluateAddressRequest = null;
        EvaluateAddressResponse response = api.evaluateAddress(evaluateAddressRequest);
        // TODO: test validations
    }

    /**
     * Get Account Details
     *
     * The get account details service provides detailed information of an account.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt;fullAccountNumber is deprecated and is replaced with fullAccountNumberList in include parameter and response.&lt;/li&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountTest() throws ApiException {
        Long accountId = null;
        String include = null;
        AccountResponse response = api.getAccount(accountId, include);
        // TODO: test validations
    }

    /**
     * Get Accounts
     *
     * The get accounts service provides information about accounts added by the user.&lt;br&gt;By default, this service returns information for active and to be closed accounts.&lt;br&gt;If requestId is provided, the accounts that are updated in the context of the requestId will be provided in the response.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;br&gt;&lt;li&gt;fullAccountNumber is deprecated and is replaced with fullAccountNumberList in include parameter and response.&lt;/li&gt;&lt;li&gt;fullAccountNumberList, PII (Personal Identifiable Information) and holder details are not available by default, as it is a premium feature that needs security approval. This will not be available for testing in Sandbox environment.&lt;/li&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllAccountsTest() throws ApiException {
        String accountId = null;
        String container = null;
        String include = null;
        String providerAccountId = null;
        String requestId = null;
        String status = null;
        AccountResponse response = api.getAllAccounts(accountId, container, include, providerAccountId, requestId, status);
        // TODO: test validations
    }

    /**
     * Get Historical Balances
     *
     * The historical balances service is used to retrieve the historical balances for an account or a user.&lt;br&gt;Historical balances are daily (D), weekly (W), and monthly (M). &lt;br&gt;The interval input should be passed as D, W, and M to retrieve the desired historical balances. The default interval is daily (D). &lt;br&gt;When no account id is provided, historical balances of the accounts that are active, to be closed, and closed are provided in the response. &lt;br&gt;If the fromDate and toDate are not passed, the last 90 days of data will be provided. &lt;br&gt;The fromDate and toDate should be passed in the YYYY-MM-DD format. &lt;br&gt;The date field in the response denotes the date for which the balance is requested.&lt;br&gt;includeCF needs to be sent as true if the customer wants to return carried forward balances for a date when the data is not available. &lt;br&gt;asofDate field in the response denotes the date as of which the balance was updated for that account.&lt;br&gt;When there is no balance available for a requested date and if includeCF is sent as true, the previous date for which the balance is available is provided in the response. &lt;br&gt;When there is no previous balance available, no data will be sent.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHistoricalBalancesTest() throws ApiException {
        String accountId = null;
        String fromDate = null;
        Boolean includeCF = null;
        String interval = null;
        Integer skip = null;
        String toDate = null;
        Integer top = null;
        AccountHistoricalBalancesResponse response = api.getHistoricalBalances(accountId, fromDate, includeCF, interval, skip, toDate, top);
        // TODO: test validations
    }

    /**
     * Update Account
     *
     * The update account service is used to update manual and aggregated accounts.&lt;br&gt;The HTTP response code is 204 (Success without content).&lt;br&gt;Update manual account support is available for bank, card, investment, insurance, loan, otherAssets, otherLiabilities and realEstate containers only.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt; A real estate account update is only supported for SYSTEM and MANUAL valuation type.&lt;/li&gt;&lt;li&gt; Attribute &lt;b&gt;isEbillEnrolled&lt;/b&gt; is deprecated as it is applicable for bill accounts only.&lt;/li&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAccountTest() throws ApiException {
        Long accountId = null;
        UpdateAccountRequest updateAccountRequest = null;
        api.updateAccount(accountId, updateAccountRequest);
        // TODO: test validations
    }

}
