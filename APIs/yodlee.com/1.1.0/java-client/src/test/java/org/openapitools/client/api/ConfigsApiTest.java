/*
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConfigsNotificationResponse;
import org.openapitools.client.model.ConfigsPublicKeyResponse;
import org.openapitools.client.model.CreateConfigsNotificationEventRequest;
import org.openapitools.client.model.UpdateConfigsNotificationEventRequest;
import org.openapitools.client.model.YodleeError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConfigsApi
 */
@Disabled
public class ConfigsApiTest {

    private final ConfigsApi api = new ConfigsApi();

    /**
     * Subscribe For Notification Event
     *
     * The subscribe events service is used to subscribe to an event for receiving notifications.&lt;br&gt;The callback URL, where the notification will be posted should be provided to this service.&lt;br&gt;If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.&lt;br&gt;Customers can subscribe to REFRESH,DATA_UPDATES and AUTO_REFRESH_UPDATES event.&lt;br&gt;&lt;br&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;li&gt;This service is not available in developer sandbox/test environment and will be made available for testing in your dedicated environment, once the contract is signed.&lt;li&gt;The content type has to be passed as application/json for the body parameter.&lt;/li&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSubscriptionNotificationEventTest() throws ApiException {
        String eventName = null;
        CreateConfigsNotificationEventRequest createConfigsNotificationEventRequest = null;
        api.createSubscriptionNotificationEvent(eventName, createConfigsNotificationEventRequest);
        // TODO: test validations
    }

    /**
     * Delete Notification Subscription
     *
     * The delete events service is used to unsubscribe from an events service.&lt;br&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSubscribedNotificationEventTest() throws ApiException {
        String eventName = null;
        api.deleteSubscribedNotificationEvent(eventName);
        // TODO: test validations
    }

    /**
     * Get Public Key
     *
     * The get public key service provides the public key that should be used to encrypt user credentials while invoking POST /providerAccounts and PUT /providerAccounts endpoints.&lt;br&gt;This service will only work if the PKI (public key infrastructure) feature is enabled for the customer.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;li&gt; The key in the response is a string in PEM format.&lt;/li&gt;&lt;li&gt;This endpoint is not available in the Sandbox environment and it is useful only if the PKI feature is enabled.&lt;/li&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublicEncryptionKeyTest() throws ApiException {
        ConfigsPublicKeyResponse response = api.getPublicEncryptionKey();
        // TODO: test validations
    }

    /**
     * Get Subscribed Notification Events
     *
     * The get events service provides the list of events for which consumers subscribed to receive notifications. &lt;br&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubscribedNotificationEventsTest() throws ApiException {
        String eventName = null;
        ConfigsNotificationResponse response = api.getSubscribedNotificationEvents(eventName);
        // TODO: test validations
    }

    /**
     * Update Notification Subscription
     *
     * The update events service is used to update the callback URL.&lt;br&gt;If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; &lt;li&gt;The content type has to be passed as application/json for the body parameter. &lt;br&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubscribedNotificationEventTest() throws ApiException {
        String eventName = null;
        UpdateConfigsNotificationEventRequest updateConfigsNotificationEventRequest = null;
        api.updateSubscribedNotificationEvent(eventName, updateConfigsNotificationEventRequest);
        // TODO: test validations
    }

}
