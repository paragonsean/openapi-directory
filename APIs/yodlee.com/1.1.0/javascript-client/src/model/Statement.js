/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Money from './Money';

/**
 * The Statement model module.
 * @module model/Statement
 * @version 1.1.0
 */
class Statement {
    /**
     * Constructs a new <code>Statement</code>.
     * @alias module:model/Statement
     */
    constructor() { 
        
        Statement.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Statement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Statement} obj Optional instance to populate.
     * @return {module:model/Statement} The populated <code>Statement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Statement();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'Number');
            }
            if (data.hasOwnProperty('amountDue')) {
                obj['amountDue'] = Money.constructFromObject(data['amountDue']);
            }
            if (data.hasOwnProperty('apr')) {
                obj['apr'] = ApiClient.convertToType(data['apr'], 'Number');
            }
            if (data.hasOwnProperty('billingPeriodEnd')) {
                obj['billingPeriodEnd'] = ApiClient.convertToType(data['billingPeriodEnd'], 'String');
            }
            if (data.hasOwnProperty('billingPeriodStart')) {
                obj['billingPeriodStart'] = ApiClient.convertToType(data['billingPeriodStart'], 'String');
            }
            if (data.hasOwnProperty('cashAdvance')) {
                obj['cashAdvance'] = Money.constructFromObject(data['cashAdvance']);
            }
            if (data.hasOwnProperty('cashApr')) {
                obj['cashApr'] = ApiClient.convertToType(data['cashApr'], 'Number');
            }
            if (data.hasOwnProperty('dueDate')) {
                obj['dueDate'] = ApiClient.convertToType(data['dueDate'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('interestAmount')) {
                obj['interestAmount'] = Money.constructFromObject(data['interestAmount']);
            }
            if (data.hasOwnProperty('isLatest')) {
                obj['isLatest'] = ApiClient.convertToType(data['isLatest'], 'Boolean');
            }
            if (data.hasOwnProperty('lastPaymentAmount')) {
                obj['lastPaymentAmount'] = Money.constructFromObject(data['lastPaymentAmount']);
            }
            if (data.hasOwnProperty('lastPaymentDate')) {
                obj['lastPaymentDate'] = ApiClient.convertToType(data['lastPaymentDate'], 'String');
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'String');
            }
            if (data.hasOwnProperty('loanBalance')) {
                obj['loanBalance'] = Money.constructFromObject(data['loanBalance']);
            }
            if (data.hasOwnProperty('minimumPayment')) {
                obj['minimumPayment'] = Money.constructFromObject(data['minimumPayment']);
            }
            if (data.hasOwnProperty('newCharges')) {
                obj['newCharges'] = Money.constructFromObject(data['newCharges']);
            }
            if (data.hasOwnProperty('principalAmount')) {
                obj['principalAmount'] = Money.constructFromObject(data['principalAmount']);
            }
            if (data.hasOwnProperty('statementDate')) {
                obj['statementDate'] = ApiClient.convertToType(data['statementDate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Statement</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Statement</code>.
     */
    static validateJSON(data) {
        // validate the optional field `amountDue`
        if (data['amountDue']) { // data not null
          Money.validateJSON(data['amountDue']);
        }
        // ensure the json data is a string
        if (data['billingPeriodEnd'] && !(typeof data['billingPeriodEnd'] === 'string' || data['billingPeriodEnd'] instanceof String)) {
            throw new Error("Expected the field `billingPeriodEnd` to be a primitive type in the JSON string but got " + data['billingPeriodEnd']);
        }
        // ensure the json data is a string
        if (data['billingPeriodStart'] && !(typeof data['billingPeriodStart'] === 'string' || data['billingPeriodStart'] instanceof String)) {
            throw new Error("Expected the field `billingPeriodStart` to be a primitive type in the JSON string but got " + data['billingPeriodStart']);
        }
        // validate the optional field `cashAdvance`
        if (data['cashAdvance']) { // data not null
          Money.validateJSON(data['cashAdvance']);
        }
        // ensure the json data is a string
        if (data['dueDate'] && !(typeof data['dueDate'] === 'string' || data['dueDate'] instanceof String)) {
            throw new Error("Expected the field `dueDate` to be a primitive type in the JSON string but got " + data['dueDate']);
        }
        // validate the optional field `interestAmount`
        if (data['interestAmount']) { // data not null
          Money.validateJSON(data['interestAmount']);
        }
        // validate the optional field `lastPaymentAmount`
        if (data['lastPaymentAmount']) { // data not null
          Money.validateJSON(data['lastPaymentAmount']);
        }
        // ensure the json data is a string
        if (data['lastPaymentDate'] && !(typeof data['lastPaymentDate'] === 'string' || data['lastPaymentDate'] instanceof String)) {
            throw new Error("Expected the field `lastPaymentDate` to be a primitive type in the JSON string but got " + data['lastPaymentDate']);
        }
        // ensure the json data is a string
        if (data['lastUpdated'] && !(typeof data['lastUpdated'] === 'string' || data['lastUpdated'] instanceof String)) {
            throw new Error("Expected the field `lastUpdated` to be a primitive type in the JSON string but got " + data['lastUpdated']);
        }
        // validate the optional field `loanBalance`
        if (data['loanBalance']) { // data not null
          Money.validateJSON(data['loanBalance']);
        }
        // validate the optional field `minimumPayment`
        if (data['minimumPayment']) { // data not null
          Money.validateJSON(data['minimumPayment']);
        }
        // validate the optional field `newCharges`
        if (data['newCharges']) { // data not null
          Money.validateJSON(data['newCharges']);
        }
        // validate the optional field `principalAmount`
        if (data['principalAmount']) { // data not null
          Money.validateJSON(data['principalAmount']);
        }
        // ensure the json data is a string
        if (data['statementDate'] && !(typeof data['statementDate'] === 'string' || data['statementDate'] instanceof String)) {
            throw new Error("Expected the field `statementDate` to be a primitive type in the JSON string but got " + data['statementDate']);
        }

        return true;
    }


}



/**
 * Account to which the statement belongs to.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>
 * @member {Number} accountId
 */
Statement.prototype['accountId'] = undefined;

/**
 * @member {module:model/Money} amountDue
 */
Statement.prototype['amountDue'] = undefined;

/**
 * The APR applied to the balance on the credit card account, as available in the statement.<br><b>Note:</b> In case of variable APR, the APR available on the statement might differ from the APR available at the account-level.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>
 * @member {Number} apr
 */
Statement.prototype['apr'] = undefined;

/**
 * The end date of the statement period.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>
 * @member {String} billingPeriodEnd
 */
Statement.prototype['billingPeriodEnd'] = undefined;

/**
 * The start date of the statement period.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>
 * @member {String} billingPeriodStart
 */
Statement.prototype['billingPeriodStart'] = undefined;

/**
 * @member {module:model/Money} cashAdvance
 */
Statement.prototype['cashAdvance'] = undefined;

/**
 * The APR applicable to cash withdrawals on the credit card account.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>
 * @member {Number} cashApr
 */
Statement.prototype['cashApr'] = undefined;

/**
 * The date by when the minimum payment is due to be paid.<br><b>Note:</b> The due date that appears in the statement may differ from the due date at the account-level.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>
 * @member {String} dueDate
 */
Statement.prototype['dueDate'] = undefined;

/**
 * Unique identifier for the statement.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>
 * @member {Number} id
 */
Statement.prototype['id'] = undefined;

/**
 * @member {module:model/Money} interestAmount
 */
Statement.prototype['interestAmount'] = undefined;

/**
 * The field is set to true if the statement is the latest generated statement.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>
 * @member {Boolean} isLatest
 */
Statement.prototype['isLatest'] = undefined;

/**
 * @member {module:model/Money} lastPaymentAmount
 */
Statement.prototype['lastPaymentAmount'] = undefined;

/**
 * The date on which the last payment was done during the billing cycle.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>
 * @member {String} lastPaymentDate
 */
Statement.prototype['lastPaymentDate'] = undefined;

/**
 * The date when the account was last updated by Yodlee.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>
 * @member {String} lastUpdated
 */
Statement.prototype['lastUpdated'] = undefined;

/**
 * @member {module:model/Money} loanBalance
 */
Statement.prototype['loanBalance'] = undefined;

/**
 * @member {module:model/Money} minimumPayment
 */
Statement.prototype['minimumPayment'] = undefined;

/**
 * @member {module:model/Money} newCharges
 */
Statement.prototype['newCharges'] = undefined;

/**
 * @member {module:model/Money} principalAmount
 */
Statement.prototype['principalAmount'] = undefined;

/**
 * The date on which the statement is generated.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>
 * @member {String} statementDate
 */
Statement.prototype['statementDate'] = undefined;






export default Statement;

