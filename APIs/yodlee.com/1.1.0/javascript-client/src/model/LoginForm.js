/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Row from './Row';

/**
 * The LoginForm model module.
 * @module model/LoginForm
 * @version 1.1.0
 */
class LoginForm {
    /**
     * Constructs a new <code>LoginForm</code>.
     * @alias module:model/LoginForm
     */
    constructor() { 
        
        LoginForm.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LoginForm</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoginForm} obj Optional instance to populate.
     * @return {module:model/LoginForm} The populated <code>LoginForm</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoginForm();

            if (data.hasOwnProperty('forgetPasswordURL')) {
                obj['forgetPasswordURL'] = ApiClient.convertToType(data['forgetPasswordURL'], 'String');
            }
            if (data.hasOwnProperty('formType')) {
                obj['formType'] = ApiClient.convertToType(data['formType'], 'String');
            }
            if (data.hasOwnProperty('help')) {
                obj['help'] = ApiClient.convertToType(data['help'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('loginHelp')) {
                obj['loginHelp'] = ApiClient.convertToType(data['loginHelp'], 'String');
            }
            if (data.hasOwnProperty('mfaInfoText')) {
                obj['mfaInfoText'] = ApiClient.convertToType(data['mfaInfoText'], 'String');
            }
            if (data.hasOwnProperty('mfaInfoTitle')) {
                obj['mfaInfoTitle'] = ApiClient.convertToType(data['mfaInfoTitle'], 'String');
            }
            if (data.hasOwnProperty('mfaTimeout')) {
                obj['mfaTimeout'] = ApiClient.convertToType(data['mfaTimeout'], 'Number');
            }
            if (data.hasOwnProperty('row')) {
                obj['row'] = ApiClient.convertToType(data['row'], [Row]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoginForm</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoginForm</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['forgetPasswordURL'] && !(typeof data['forgetPasswordURL'] === 'string' || data['forgetPasswordURL'] instanceof String)) {
            throw new Error("Expected the field `forgetPasswordURL` to be a primitive type in the JSON string but got " + data['forgetPasswordURL']);
        }
        // ensure the json data is a string
        if (data['formType'] && !(typeof data['formType'] === 'string' || data['formType'] instanceof String)) {
            throw new Error("Expected the field `formType` to be a primitive type in the JSON string but got " + data['formType']);
        }
        // ensure the json data is a string
        if (data['help'] && !(typeof data['help'] === 'string' || data['help'] instanceof String)) {
            throw new Error("Expected the field `help` to be a primitive type in the JSON string but got " + data['help']);
        }
        // ensure the json data is a string
        if (data['loginHelp'] && !(typeof data['loginHelp'] === 'string' || data['loginHelp'] instanceof String)) {
            throw new Error("Expected the field `loginHelp` to be a primitive type in the JSON string but got " + data['loginHelp']);
        }
        // ensure the json data is a string
        if (data['mfaInfoText'] && !(typeof data['mfaInfoText'] === 'string' || data['mfaInfoText'] instanceof String)) {
            throw new Error("Expected the field `mfaInfoText` to be a primitive type in the JSON string but got " + data['mfaInfoText']);
        }
        // ensure the json data is a string
        if (data['mfaInfoTitle'] && !(typeof data['mfaInfoTitle'] === 'string' || data['mfaInfoTitle'] instanceof String)) {
            throw new Error("Expected the field `mfaInfoTitle` to be a primitive type in the JSON string but got " + data['mfaInfoTitle']);
        }
        if (data['row']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['row'])) {
                throw new Error("Expected the field `row` to be an array in the JSON data but got " + data['row']);
            }
            // validate the optional field `row` (array)
            for (const item of data['row']) {
                Row.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The forget password URL of the provider site.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
 * @member {String} forgetPasswordURL
 */
LoginForm.prototype['forgetPasswordURL'] = undefined;

/**
 * The type of the forms for which the user information is required.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul><b>Applicable Values</b><br>
 * @member {module:model/LoginForm.FormTypeEnum} formType
 */
LoginForm.prototype['formType'] = undefined;

/**
 * The help that can be displayed to the customer in the login form.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
 * @member {String} help
 */
LoginForm.prototype['help'] = undefined;

/**
 * The identifier of the login form.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
 * @member {Number} id
 */
LoginForm.prototype['id'] = undefined;

/**
 * The help that can be displayed to the customer in the login form.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
 * @member {String} loginHelp
 */
LoginForm.prototype['loginHelp'] = undefined;

/**
 * The text displayed in the provider site while requesting the user's MFA information. This field is applicable for MFA form types only. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li></ul>
 * @member {String} mfaInfoText
 */
LoginForm.prototype['mfaInfoText'] = undefined;

/**
 * The title for the MFA information demanded from the user.This is the title displayed in the provider site.This field is applicable for MFA form types only. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li></ul>
 * @member {String} mfaInfoTitle
 */
LoginForm.prototype['mfaInfoTitle'] = undefined;

/**
 * The amount of time before which the user is expected to provide MFA information. This field is applicable for MFA form types only. This would be an useful information that could be displayed to the users. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
 * @member {Number} mfaTimeout
 */
LoginForm.prototype['mfaTimeout'] = undefined;

/**
 * This indicates one row in the form. The row will have one label. But it may have single or multiple fields.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
 * @member {Array.<module:model/Row>} row
 */
LoginForm.prototype['row'] = undefined;





/**
 * Allowed values for the <code>formType</code> property.
 * @enum {String}
 * @readonly
 */
LoginForm['FormTypeEnum'] = {

    /**
     * value: "login"
     * @const
     */
    "login": "login",

    /**
     * value: "questionAndAnswer"
     * @const
     */
    "questionAndAnswer": "questionAndAnswer",

    /**
     * value: "token"
     * @const
     */
    "token": "token",

    /**
     * value: "image"
     * @const
     */
    "image": "image"
};



export default LoginForm;

