/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Money from './Money';

/**
 * The HistoricalBalance model module.
 * @module model/HistoricalBalance
 * @version 1.1.0
 */
class HistoricalBalance {
    /**
     * Constructs a new <code>HistoricalBalance</code>.
     * @alias module:model/HistoricalBalance
     */
    constructor() { 
        
        HistoricalBalance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HistoricalBalance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HistoricalBalance} obj Optional instance to populate.
     * @return {module:model/HistoricalBalance} The populated <code>HistoricalBalance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HistoricalBalance();

            if (data.hasOwnProperty('asOfDate')) {
                obj['asOfDate'] = ApiClient.convertToType(data['asOfDate'], 'String');
            }
            if (data.hasOwnProperty('balance')) {
                obj['balance'] = Money.constructFromObject(data['balance']);
            }
            if (data.hasOwnProperty('dataSourceType')) {
                obj['dataSourceType'] = ApiClient.convertToType(data['dataSourceType'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'String');
            }
            if (data.hasOwnProperty('isAsset')) {
                obj['isAsset'] = ApiClient.convertToType(data['isAsset'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HistoricalBalance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HistoricalBalance</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['asOfDate'] && !(typeof data['asOfDate'] === 'string' || data['asOfDate'] instanceof String)) {
            throw new Error("Expected the field `asOfDate` to be a primitive type in the JSON string but got " + data['asOfDate']);
        }
        // validate the optional field `balance`
        if (data['balance']) { // data not null
          Money.validateJSON(data['balance']);
        }
        // ensure the json data is a string
        if (data['dataSourceType'] && !(typeof data['dataSourceType'] === 'string' || data['dataSourceType'] instanceof String)) {
            throw new Error("Expected the field `dataSourceType` to be a primitive type in the JSON string but got " + data['dataSourceType']);
        }
        // ensure the json data is a string
        if (data['date'] && !(typeof data['date'] === 'string' || data['date'] instanceof String)) {
            throw new Error("Expected the field `date` to be a primitive type in the JSON string but got " + data['date']);
        }

        return true;
    }


}



/**
 * Date as of when the balance is last updated due to the auto account updates or user triggered updates. This balance will be carry forward for the days where there is no balance available in the system. <br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li></ul>
 * @member {String} asOfDate
 */
HistoricalBalance.prototype['asOfDate'] = undefined;

/**
 * @member {module:model/Money} balance
 */
HistoricalBalance.prototype['balance'] = undefined;

/**
 * The source of balance information.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li></ul><b>Applicable Values</b><br>
 * @member {module:model/HistoricalBalance.DataSourceTypeEnum} dataSourceType
 */
HistoricalBalance.prototype['dataSourceType'] = undefined;

/**
 * Date for which the account balance was provided.  This balance could be a carryforward, calculated or a scraped balance.<br><b>Additional Details</b>:<br><b>Scraped</b>: Balance shown in the provider site. This balance gets stored in Yodlee system during system/user account updates.<br><b>CarryForward</b>: Balance carried forward from the scraped balance to the days for which the balance was not available in the system. Balance may not be available for all the days in the system due to MFA information required, error in the site, credential changes, etc.<br><b>calculated</b>: Balances that gets calculated for the days that are prior to the account added date.  <br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li><li>GET derived/networth</li></ul>
 * @member {String} date
 */
HistoricalBalance.prototype['date'] = undefined;

/**
 * Indicates whether the balance is an asset or liability.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li></ul>
 * @member {Boolean} isAsset
 */
HistoricalBalance.prototype['isAsset'] = undefined;





/**
 * Allowed values for the <code>dataSourceType</code> property.
 * @enum {String}
 * @readonly
 */
HistoricalBalance['DataSourceTypeEnum'] = {

    /**
     * value: "S"
     * @const
     */
    "S": "S",

    /**
     * value: "C"
     * @const
     */
    "C": "C",

    /**
     * value: "CF"
     * @const
     */
    "CF": "CF"
};



export default HistoricalBalance;

