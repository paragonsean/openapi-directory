/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DetailCategory from './DetailCategory';

/**
 * The TransactionCategory model module.
 * @module model/TransactionCategory
 * @version 1.1.0
 */
class TransactionCategory {
    /**
     * Constructs a new <code>TransactionCategory</code>.
     * @alias module:model/TransactionCategory
     */
    constructor() { 
        
        TransactionCategory.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TransactionCategory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionCategory} obj Optional instance to populate.
     * @return {module:model/TransactionCategory} The populated <code>TransactionCategory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionCategory();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('classification')) {
                obj['classification'] = ApiClient.convertToType(data['classification'], 'String');
            }
            if (data.hasOwnProperty('defaultCategoryName')) {
                obj['defaultCategoryName'] = ApiClient.convertToType(data['defaultCategoryName'], 'String');
            }
            if (data.hasOwnProperty('defaultHighLevelCategoryName')) {
                obj['defaultHighLevelCategoryName'] = ApiClient.convertToType(data['defaultHighLevelCategoryName'], 'String');
            }
            if (data.hasOwnProperty('detailCategory')) {
                obj['detailCategory'] = ApiClient.convertToType(data['detailCategory'], [DetailCategory]);
            }
            if (data.hasOwnProperty('highLevelCategoryId')) {
                obj['highLevelCategoryId'] = ApiClient.convertToType(data['highLevelCategoryId'], 'Number');
            }
            if (data.hasOwnProperty('highLevelCategoryName')) {
                obj['highLevelCategoryName'] = ApiClient.convertToType(data['highLevelCategoryName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionCategory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionCategory</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['classification'] && !(typeof data['classification'] === 'string' || data['classification'] instanceof String)) {
            throw new Error("Expected the field `classification` to be a primitive type in the JSON string but got " + data['classification']);
        }
        // ensure the json data is a string
        if (data['defaultCategoryName'] && !(typeof data['defaultCategoryName'] === 'string' || data['defaultCategoryName'] instanceof String)) {
            throw new Error("Expected the field `defaultCategoryName` to be a primitive type in the JSON string but got " + data['defaultCategoryName']);
        }
        // ensure the json data is a string
        if (data['defaultHighLevelCategoryName'] && !(typeof data['defaultHighLevelCategoryName'] === 'string' || data['defaultHighLevelCategoryName'] instanceof String)) {
            throw new Error("Expected the field `defaultHighLevelCategoryName` to be a primitive type in the JSON string but got " + data['defaultHighLevelCategoryName']);
        }
        if (data['detailCategory']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['detailCategory'])) {
                throw new Error("Expected the field `detailCategory` to be an array in the JSON data but got " + data['detailCategory']);
            }
            // validate the optional field `detailCategory` (array)
            for (const item of data['detailCategory']) {
                DetailCategory.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['highLevelCategoryName'] && !(typeof data['highLevelCategoryName'] === 'string' || data['highLevelCategoryName'] instanceof String)) {
            throw new Error("Expected the field `highLevelCategoryName` to be a primitive type in the JSON string but got " + data['highLevelCategoryName']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The name of the category.<br><b>Note</b>: Transaction categorization is one of the core features offered by Yodlee and the categories are assigned to the transactions by the system. Transactions can be clubbed together by the category that is assigned to them.  <br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>
 * @member {String} category
 */
TransactionCategory.prototype['category'] = undefined;

/**
 * Category Classification.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>
 * @member {module:model/TransactionCategory.ClassificationEnum} classification
 */
TransactionCategory.prototype['classification'] = undefined;

/**
 * A attribute which will always hold the first value(initial name) of Yodlee defined category attribute.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>
 * @member {String} defaultCategoryName
 */
TransactionCategory.prototype['defaultCategoryName'] = undefined;

/**
 * A attribute which will always hold the first value(initial name) of Yodlee defined highLevelCategoryName attribute.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>
 * @member {String} defaultHighLevelCategoryName
 */
TransactionCategory.prototype['defaultHighLevelCategoryName'] = undefined;

/**
 * Entity that provides detail category attributes<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>
 * @member {Array.<module:model/DetailCategory>} detailCategory
 */
TransactionCategory.prototype['detailCategory'] = undefined;

/**
 * The unique identifier of the high level category.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>
 * @member {Number} highLevelCategoryId
 */
TransactionCategory.prototype['highLevelCategoryId'] = undefined;

/**
 * The name of the high level category. A group of similar transaction categories are clubbed together to form a high-level category.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>
 * @member {String} highLevelCategoryName
 */
TransactionCategory.prototype['highLevelCategoryName'] = undefined;

/**
 * Unique identifier of the category.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>
 * @member {Number} id
 */
TransactionCategory.prototype['id'] = undefined;

/**
 * Source used to identify whether the transaction category is user defined category or system created category.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>
 * @member {module:model/TransactionCategory.SourceEnum} source
 */
TransactionCategory.prototype['source'] = undefined;

/**
 * Transaction categories and high-level categories are further mapped to five transaction category types. Customers, based on their needs can either use the transaction categories, the high-level categories, or the transaction category types. <br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>
 * @member {module:model/TransactionCategory.TypeEnum} type
 */
TransactionCategory.prototype['type'] = undefined;





/**
 * Allowed values for the <code>classification</code> property.
 * @enum {String}
 * @readonly
 */
TransactionCategory['ClassificationEnum'] = {

    /**
     * value: "PERSONAL"
     * @const
     */
    "PERSONAL": "PERSONAL",

    /**
     * value: "BUSINESS"
     * @const
     */
    "BUSINESS": "BUSINESS"
};


/**
 * Allowed values for the <code>source</code> property.
 * @enum {String}
 * @readonly
 */
TransactionCategory['SourceEnum'] = {

    /**
     * value: "SYSTEM"
     * @const
     */
    "SYSTEM": "SYSTEM",

    /**
     * value: "USER"
     * @const
     */
    "USER": "USER"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
TransactionCategory['TypeEnum'] = {

    /**
     * value: "TRANSFER"
     * @const
     */
    "TRANSFER": "TRANSFER",

    /**
     * value: "DEFERRED_COMPENSATION"
     * @const
     */
    "DEFERRED_COMPENSATION": "DEFERRED_COMPENSATION",

    /**
     * value: "UNCATEGORIZE"
     * @const
     */
    "UNCATEGORIZE": "UNCATEGORIZE",

    /**
     * value: "INCOME"
     * @const
     */
    "INCOME": "INCOME",

    /**
     * value: "EXPENSE"
     * @const
     */
    "EXPENSE": "EXPENSE"
};



export default TransactionCategory;

