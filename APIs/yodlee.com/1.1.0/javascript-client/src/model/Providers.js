/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Capability from './Capability';
import ProvidersDataset from './ProvidersDataset';

/**
 * The Providers model module.
 * @module model/Providers
 * @version 1.1.0
 */
class Providers {
    /**
     * Constructs a new <code>Providers</code>.
     * @alias module:model/Providers
     */
    constructor() { 
        
        Providers.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Providers</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Providers} obj Optional instance to populate.
     * @return {module:model/Providers} The populated <code>Providers</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Providers();

            if (data.hasOwnProperty('PRIORITY')) {
                obj['PRIORITY'] = ApiClient.convertToType(data['PRIORITY'], 'String');
            }
            if (data.hasOwnProperty('accountType')) {
                obj['accountType'] = ApiClient.convertToType(data['accountType'], ['String']);
            }
            if (data.hasOwnProperty('associatedProviderIds')) {
                obj['associatedProviderIds'] = ApiClient.convertToType(data['associatedProviderIds'], ['Number']);
            }
            if (data.hasOwnProperty('authParameter')) {
                obj['authParameter'] = ApiClient.convertToType(data['authParameter'], ['String']);
            }
            if (data.hasOwnProperty('authType')) {
                obj['authType'] = ApiClient.convertToType(data['authType'], 'String');
            }
            if (data.hasOwnProperty('baseUrl')) {
                obj['baseUrl'] = ApiClient.convertToType(data['baseUrl'], 'String');
            }
            if (data.hasOwnProperty('capability')) {
                obj['capability'] = ApiClient.convertToType(data['capability'], [Capability]);
            }
            if (data.hasOwnProperty('countryISOCode')) {
                obj['countryISOCode'] = ApiClient.convertToType(data['countryISOCode'], 'String');
            }
            if (data.hasOwnProperty('dataset')) {
                obj['dataset'] = ApiClient.convertToType(data['dataset'], [ProvidersDataset]);
            }
            if (data.hasOwnProperty('favicon')) {
                obj['favicon'] = ApiClient.convertToType(data['favicon'], 'String');
            }
            if (data.hasOwnProperty('forgetPasswordUrl')) {
                obj['forgetPasswordUrl'] = ApiClient.convertToType(data['forgetPasswordUrl'], 'String');
            }
            if (data.hasOwnProperty('help')) {
                obj['help'] = ApiClient.convertToType(data['help'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('isAddedByUser')) {
                obj['isAddedByUser'] = ApiClient.convertToType(data['isAddedByUser'], 'String');
            }
            if (data.hasOwnProperty('isAutoRefreshEnabled')) {
                obj['isAutoRefreshEnabled'] = ApiClient.convertToType(data['isAutoRefreshEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('isConsentRequired')) {
                obj['isConsentRequired'] = ApiClient.convertToType(data['isConsentRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('languageISOCode')) {
                obj['languageISOCode'] = ApiClient.convertToType(data['languageISOCode'], 'String');
            }
            if (data.hasOwnProperty('lastModified')) {
                obj['lastModified'] = ApiClient.convertToType(data['lastModified'], 'String');
            }
            if (data.hasOwnProperty('loginHelp')) {
                obj['loginHelp'] = ApiClient.convertToType(data['loginHelp'], 'String');
            }
            if (data.hasOwnProperty('loginUrl')) {
                obj['loginUrl'] = ApiClient.convertToType(data['loginUrl'], 'String');
            }
            if (data.hasOwnProperty('logo')) {
                obj['logo'] = ApiClient.convertToType(data['logo'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('primaryLanguageISOCode')) {
                obj['primaryLanguageISOCode'] = ApiClient.convertToType(data['primaryLanguageISOCode'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Providers</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Providers</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['PRIORITY'] && !(typeof data['PRIORITY'] === 'string' || data['PRIORITY'] instanceof String)) {
            throw new Error("Expected the field `PRIORITY` to be a primitive type in the JSON string but got " + data['PRIORITY']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['accountType'])) {
            throw new Error("Expected the field `accountType` to be an array in the JSON data but got " + data['accountType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['associatedProviderIds'])) {
            throw new Error("Expected the field `associatedProviderIds` to be an array in the JSON data but got " + data['associatedProviderIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['authParameter'])) {
            throw new Error("Expected the field `authParameter` to be an array in the JSON data but got " + data['authParameter']);
        }
        // ensure the json data is a string
        if (data['authType'] && !(typeof data['authType'] === 'string' || data['authType'] instanceof String)) {
            throw new Error("Expected the field `authType` to be a primitive type in the JSON string but got " + data['authType']);
        }
        // ensure the json data is a string
        if (data['baseUrl'] && !(typeof data['baseUrl'] === 'string' || data['baseUrl'] instanceof String)) {
            throw new Error("Expected the field `baseUrl` to be a primitive type in the JSON string but got " + data['baseUrl']);
        }
        if (data['capability']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['capability'])) {
                throw new Error("Expected the field `capability` to be an array in the JSON data but got " + data['capability']);
            }
            // validate the optional field `capability` (array)
            for (const item of data['capability']) {
                Capability.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['countryISOCode'] && !(typeof data['countryISOCode'] === 'string' || data['countryISOCode'] instanceof String)) {
            throw new Error("Expected the field `countryISOCode` to be a primitive type in the JSON string but got " + data['countryISOCode']);
        }
        if (data['dataset']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dataset'])) {
                throw new Error("Expected the field `dataset` to be an array in the JSON data but got " + data['dataset']);
            }
            // validate the optional field `dataset` (array)
            for (const item of data['dataset']) {
                ProvidersDataset.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['favicon'] && !(typeof data['favicon'] === 'string' || data['favicon'] instanceof String)) {
            throw new Error("Expected the field `favicon` to be a primitive type in the JSON string but got " + data['favicon']);
        }
        // ensure the json data is a string
        if (data['forgetPasswordUrl'] && !(typeof data['forgetPasswordUrl'] === 'string' || data['forgetPasswordUrl'] instanceof String)) {
            throw new Error("Expected the field `forgetPasswordUrl` to be a primitive type in the JSON string but got " + data['forgetPasswordUrl']);
        }
        // ensure the json data is a string
        if (data['help'] && !(typeof data['help'] === 'string' || data['help'] instanceof String)) {
            throw new Error("Expected the field `help` to be a primitive type in the JSON string but got " + data['help']);
        }
        // ensure the json data is a string
        if (data['isAddedByUser'] && !(typeof data['isAddedByUser'] === 'string' || data['isAddedByUser'] instanceof String)) {
            throw new Error("Expected the field `isAddedByUser` to be a primitive type in the JSON string but got " + data['isAddedByUser']);
        }
        // ensure the json data is a string
        if (data['languageISOCode'] && !(typeof data['languageISOCode'] === 'string' || data['languageISOCode'] instanceof String)) {
            throw new Error("Expected the field `languageISOCode` to be a primitive type in the JSON string but got " + data['languageISOCode']);
        }
        // ensure the json data is a string
        if (data['lastModified'] && !(typeof data['lastModified'] === 'string' || data['lastModified'] instanceof String)) {
            throw new Error("Expected the field `lastModified` to be a primitive type in the JSON string but got " + data['lastModified']);
        }
        // ensure the json data is a string
        if (data['loginHelp'] && !(typeof data['loginHelp'] === 'string' || data['loginHelp'] instanceof String)) {
            throw new Error("Expected the field `loginHelp` to be a primitive type in the JSON string but got " + data['loginHelp']);
        }
        // ensure the json data is a string
        if (data['loginUrl'] && !(typeof data['loginUrl'] === 'string' || data['loginUrl'] instanceof String)) {
            throw new Error("Expected the field `loginUrl` to be a primitive type in the JSON string but got " + data['loginUrl']);
        }
        // ensure the json data is a string
        if (data['logo'] && !(typeof data['logo'] === 'string' || data['logo'] instanceof String)) {
            throw new Error("Expected the field `logo` to be a primitive type in the JSON string but got " + data['logo']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['primaryLanguageISOCode'] && !(typeof data['primaryLanguageISOCode'] === 'string' || data['primaryLanguageISOCode'] instanceof String)) {
            throw new Error("Expected the field `primaryLanguageISOCode` to be a primitive type in the JSON string but got " + data['primaryLanguageISOCode']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * Indicates the priority for which the service is invoked.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul><b>Applicable Values</b><br>
 * @member {module:model/Providers.PRIORITYEnum} PRIORITY
 */
Providers.prototype['PRIORITY'] = undefined;

/**
 * AccountType supported by the provider, eg: Brokerage Cash, Current<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
 * @member {Array.<module:model/Providers.AccountTypeEnum>} accountType
 */
Providers.prototype['accountType'] = undefined;

/**
 * The screen-scraping providers that are associated to the Open Banking provider ID.<br><br><b>Applicable containers</b>: All Containers<br><b>Endpoints</b>:<ul><li>GET providers</li><li>GET providers/{providerId}</li></ul>
 * @member {Array.<Number>} associatedProviderIds
 */
Providers.prototype['associatedProviderIds'] = undefined;

/**
 * AuthParameter appears in the response only in case of token-based aggregation sites.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
 * @member {Array.<module:model/Providers.AuthParameterEnum>} authParameter
 */
Providers.prototype['authParameter'] = undefined;

/**
 * The authentication type enabled at the provider site. <br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul><b>Applicable Values</b><br>
 * @member {module:model/Providers.AuthTypeEnum} authType
 */
Providers.prototype['authType'] = undefined;

/**
 * The base URL of the provider's site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
 * @member {String} baseUrl
 */
Providers.prototype['baseUrl'] = undefined;

/**
 * Capability of the site<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul><br><b>Note : </b> capability has been deprecated
 * @member {Array.<module:model/Capability>} capability
 */
Providers.prototype['capability'] = undefined;

/**
 * Country to which the provider belongs.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
 * @member {String} countryISOCode
 */
Providers.prototype['countryISOCode'] = undefined;

/**
 * Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
 * @member {Array.<module:model/ProvidersDataset>} dataset
 */
Providers.prototype['dataset'] = undefined;

/**
 * Favicon link of the provider.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
 * @member {String} favicon
 */
Providers.prototype['favicon'] = undefined;

/**
 * The forget password URL of the provider site.<br><br><b>Endpoints</b>:<ul><li>GET providers</li></ul>
 * @member {String} forgetPasswordUrl
 */
Providers.prototype['forgetPasswordUrl'] = undefined;

/**
 * Text to guide user through linking an account that belongs to the site<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
 * @member {String} help
 */
Providers.prototype['help'] = undefined;

/**
 * Unique identifier for the provider site(e.g., financial institution sites, biller sites, lender sites, etc.).<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
 * @member {Number} id
 */
Providers.prototype['id'] = undefined;

/**
 * Indicates that the site has been added by the user at least once.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
 * @member {String} isAddedByUser
 */
Providers.prototype['isAddedByUser'] = undefined;

/**
 * Indicates if a provider site is auto-refreshed.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
 * @member {Boolean} isAutoRefreshEnabled
 */
Providers.prototype['isAutoRefreshEnabled'] = undefined;

/**
 * Indicates if a provider site requires consent.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
 * @member {Boolean} isConsentRequired
 */
Providers.prototype['isConsentRequired'] = undefined;

/**
 * The language in which the provider details are provided. For example, a site supports two languages English and French. English being the primary language, the provider response will be provided in French depending on the user's locale. The language follows the two letter ISO code.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
 * @member {String} languageISOCode
 */
Providers.prototype['languageISOCode'] = undefined;

/**
 * Determines when the provider information was updated by Yodlee. If the customer caches the data, the cache is recommended to be refreshed based on this field.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
 * @member {String} lastModified
 */
Providers.prototype['lastModified'] = undefined;

/**
 * Help text to guide the user to choose the correct provider site.<br><br><b>Endpoints</b>:<ul><li>GET providers</li></ul>
 * @member {String} loginHelp
 */
Providers.prototype['loginHelp'] = undefined;

/**
 * The login URL of the provider's site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
 * @member {String} loginUrl
 */
Providers.prototype['loginUrl'] = undefined;

/**
 * The logo link of the provider institution. The link will return the logo in the PNG format.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
 * @member {String} logo
 */
Providers.prototype['logo'] = undefined;

/**
 * The name of a provider site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
 * @member {String} name
 */
Providers.prototype['name'] = undefined;

/**
 * The primary language of the site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
 * @member {String} primaryLanguageISOCode
 */
Providers.prototype['primaryLanguageISOCode'] = undefined;

/**
 * Determines if the provider is supported for the cobrand (customer), is in the beta stage, etc. <br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
 * @member {module:model/Providers.StatusEnum} status
 */
Providers.prototype['status'] = undefined;





/**
 * Allowed values for the <code>PRIORITY</code> property.
 * @enum {String}
 * @readonly
 */
Providers['PRIORITYEnum'] = {

    /**
     * value: "POPULAR"
     * @const
     */
    "POPULAR": "POPULAR",

    /**
     * value: "SUGGESTED"
     * @const
     */
    "SUGGESTED": "SUGGESTED",

    /**
     * value: "COBRAND"
     * @const
     */
    "COBRAND": "COBRAND",

    /**
     * value: "SEARCH"
     * @const
     */
    "SEARCH": "SEARCH",

    /**
     * value: "ALL"
     * @const
     */
    "ALL": "ALL"
};


/**
 * Allowed values for the <code>accountType</code> property.
 * @enum {String}
 * @readonly
 */
Providers['AccountTypeEnum'] = {

    /**
     * value: "CURRENT"
     * @const
     */
    "CURRENT": "CURRENT",

    /**
     * value: "BROKERAGE_CASH"
     * @const
     */
    "BROKERAGE_CASH": "BROKERAGE_CASH"
};


/**
 * Allowed values for the <code>authParameter</code> property.
 * @enum {String}
 * @readonly
 */
Providers['AuthParameterEnum'] = {

    /**
     * value: "authorizationCode"
     * @const
     */
    "authorizationCode": "authorizationCode",

    /**
     * value: "idToken"
     * @const
     */
    "idToken": "idToken",

    /**
     * value: "authResponse"
     * @const
     */
    "authResponse": "authResponse"
};


/**
 * Allowed values for the <code>authType</code> property.
 * @enum {String}
 * @readonly
 */
Providers['AuthTypeEnum'] = {

    /**
     * value: "OAUTH"
     * @const
     */
    "OAUTH": "OAUTH",

    /**
     * value: "CREDENTIALS"
     * @const
     */
    "CREDENTIALS": "CREDENTIALS",

    /**
     * value: "MFA_CREDENTIALS"
     * @const
     */
    "MFA_CREDENTIALS": "MFA_CREDENTIALS"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Providers['StatusEnum'] = {

    /**
     * value: "Supported"
     * @const
     */
    "Supported": "Supported",

    /**
     * value: "Beta"
     * @const
     */
    "Beta": "Beta",

    /**
     * value: "Unsupported"
     * @const
     */
    "Unsupported": "Unsupported"
};



export default Providers;

