/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssetClassification from './AssetClassification';
import Money from './Money';

/**
 * The Holding model module.
 * @module model/Holding
 * @version 1.1.0
 */
class Holding {
    /**
     * Constructs a new <code>Holding</code>.
     * @alias module:model/Holding
     */
    constructor() { 
        
        Holding.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Holding</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Holding} obj Optional instance to populate.
     * @return {module:model/Holding} The populated <code>Holding</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Holding();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'Number');
            }
            if (data.hasOwnProperty('accruedIncome')) {
                obj['accruedIncome'] = Money.constructFromObject(data['accruedIncome']);
            }
            if (data.hasOwnProperty('accruedInterest')) {
                obj['accruedInterest'] = Money.constructFromObject(data['accruedInterest']);
            }
            if (data.hasOwnProperty('assetClassification')) {
                obj['assetClassification'] = ApiClient.convertToType(data['assetClassification'], [AssetClassification]);
            }
            if (data.hasOwnProperty('contractQuantity')) {
                obj['contractQuantity'] = ApiClient.convertToType(data['contractQuantity'], 'Number');
            }
            if (data.hasOwnProperty('costBasis')) {
                obj['costBasis'] = Money.constructFromObject(data['costBasis']);
            }
            if (data.hasOwnProperty('couponRate')) {
                obj['couponRate'] = ApiClient.convertToType(data['couponRate'], 'Number');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'String');
            }
            if (data.hasOwnProperty('cusipNumber')) {
                obj['cusipNumber'] = ApiClient.convertToType(data['cusipNumber'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('enrichedDescription')) {
                obj['enrichedDescription'] = ApiClient.convertToType(data['enrichedDescription'], 'String');
            }
            if (data.hasOwnProperty('exercisedQuantity')) {
                obj['exercisedQuantity'] = ApiClient.convertToType(data['exercisedQuantity'], 'Number');
            }
            if (data.hasOwnProperty('expirationDate')) {
                obj['expirationDate'] = ApiClient.convertToType(data['expirationDate'], 'String');
            }
            if (data.hasOwnProperty('grantDate')) {
                obj['grantDate'] = ApiClient.convertToType(data['grantDate'], 'String');
            }
            if (data.hasOwnProperty('holdingType')) {
                obj['holdingType'] = ApiClient.convertToType(data['holdingType'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('interestRate')) {
                obj['interestRate'] = ApiClient.convertToType(data['interestRate'], 'Number');
            }
            if (data.hasOwnProperty('isShort')) {
                obj['isShort'] = ApiClient.convertToType(data['isShort'], 'Boolean');
            }
            if (data.hasOwnProperty('isin')) {
                obj['isin'] = ApiClient.convertToType(data['isin'], 'String');
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'String');
            }
            if (data.hasOwnProperty('matchStatus')) {
                obj['matchStatus'] = ApiClient.convertToType(data['matchStatus'], 'String');
            }
            if (data.hasOwnProperty('maturityDate')) {
                obj['maturityDate'] = ApiClient.convertToType(data['maturityDate'], 'String');
            }
            if (data.hasOwnProperty('optionType')) {
                obj['optionType'] = ApiClient.convertToType(data['optionType'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = Money.constructFromObject(data['price']);
            }
            if (data.hasOwnProperty('providerAccountId')) {
                obj['providerAccountId'] = ApiClient.convertToType(data['providerAccountId'], 'Number');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('securityStyle')) {
                obj['securityStyle'] = ApiClient.convertToType(data['securityStyle'], 'String');
            }
            if (data.hasOwnProperty('securityType')) {
                obj['securityType'] = ApiClient.convertToType(data['securityType'], 'String');
            }
            if (data.hasOwnProperty('sedol')) {
                obj['sedol'] = ApiClient.convertToType(data['sedol'], 'String');
            }
            if (data.hasOwnProperty('spread')) {
                obj['spread'] = Money.constructFromObject(data['spread']);
            }
            if (data.hasOwnProperty('strikePrice')) {
                obj['strikePrice'] = Money.constructFromObject(data['strikePrice']);
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
            if (data.hasOwnProperty('term')) {
                obj['term'] = ApiClient.convertToType(data['term'], 'String');
            }
            if (data.hasOwnProperty('unvestedQuantity')) {
                obj['unvestedQuantity'] = ApiClient.convertToType(data['unvestedQuantity'], 'Number');
            }
            if (data.hasOwnProperty('unvestedValue')) {
                obj['unvestedValue'] = Money.constructFromObject(data['unvestedValue']);
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = Money.constructFromObject(data['value']);
            }
            if (data.hasOwnProperty('vestedQuantity')) {
                obj['vestedQuantity'] = ApiClient.convertToType(data['vestedQuantity'], 'Number');
            }
            if (data.hasOwnProperty('vestedSharesExercisable')) {
                obj['vestedSharesExercisable'] = ApiClient.convertToType(data['vestedSharesExercisable'], 'Number');
            }
            if (data.hasOwnProperty('vestedValue')) {
                obj['vestedValue'] = Money.constructFromObject(data['vestedValue']);
            }
            if (data.hasOwnProperty('vestingDate')) {
                obj['vestingDate'] = ApiClient.convertToType(data['vestingDate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Holding</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Holding</code>.
     */
    static validateJSON(data) {
        // validate the optional field `accruedIncome`
        if (data['accruedIncome']) { // data not null
          Money.validateJSON(data['accruedIncome']);
        }
        // validate the optional field `accruedInterest`
        if (data['accruedInterest']) { // data not null
          Money.validateJSON(data['accruedInterest']);
        }
        if (data['assetClassification']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['assetClassification'])) {
                throw new Error("Expected the field `assetClassification` to be an array in the JSON data but got " + data['assetClassification']);
            }
            // validate the optional field `assetClassification` (array)
            for (const item of data['assetClassification']) {
                AssetClassification.validateJSON(item);
            };
        }
        // validate the optional field `costBasis`
        if (data['costBasis']) { // data not null
          Money.validateJSON(data['costBasis']);
        }
        // ensure the json data is a string
        if (data['createdDate'] && !(typeof data['createdDate'] === 'string' || data['createdDate'] instanceof String)) {
            throw new Error("Expected the field `createdDate` to be a primitive type in the JSON string but got " + data['createdDate']);
        }
        // ensure the json data is a string
        if (data['cusipNumber'] && !(typeof data['cusipNumber'] === 'string' || data['cusipNumber'] instanceof String)) {
            throw new Error("Expected the field `cusipNumber` to be a primitive type in the JSON string but got " + data['cusipNumber']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['enrichedDescription'] && !(typeof data['enrichedDescription'] === 'string' || data['enrichedDescription'] instanceof String)) {
            throw new Error("Expected the field `enrichedDescription` to be a primitive type in the JSON string but got " + data['enrichedDescription']);
        }
        // ensure the json data is a string
        if (data['expirationDate'] && !(typeof data['expirationDate'] === 'string' || data['expirationDate'] instanceof String)) {
            throw new Error("Expected the field `expirationDate` to be a primitive type in the JSON string but got " + data['expirationDate']);
        }
        // ensure the json data is a string
        if (data['grantDate'] && !(typeof data['grantDate'] === 'string' || data['grantDate'] instanceof String)) {
            throw new Error("Expected the field `grantDate` to be a primitive type in the JSON string but got " + data['grantDate']);
        }
        // ensure the json data is a string
        if (data['holdingType'] && !(typeof data['holdingType'] === 'string' || data['holdingType'] instanceof String)) {
            throw new Error("Expected the field `holdingType` to be a primitive type in the JSON string but got " + data['holdingType']);
        }
        // ensure the json data is a string
        if (data['isin'] && !(typeof data['isin'] === 'string' || data['isin'] instanceof String)) {
            throw new Error("Expected the field `isin` to be a primitive type in the JSON string but got " + data['isin']);
        }
        // ensure the json data is a string
        if (data['lastUpdated'] && !(typeof data['lastUpdated'] === 'string' || data['lastUpdated'] instanceof String)) {
            throw new Error("Expected the field `lastUpdated` to be a primitive type in the JSON string but got " + data['lastUpdated']);
        }
        // ensure the json data is a string
        if (data['matchStatus'] && !(typeof data['matchStatus'] === 'string' || data['matchStatus'] instanceof String)) {
            throw new Error("Expected the field `matchStatus` to be a primitive type in the JSON string but got " + data['matchStatus']);
        }
        // ensure the json data is a string
        if (data['maturityDate'] && !(typeof data['maturityDate'] === 'string' || data['maturityDate'] instanceof String)) {
            throw new Error("Expected the field `maturityDate` to be a primitive type in the JSON string but got " + data['maturityDate']);
        }
        // ensure the json data is a string
        if (data['optionType'] && !(typeof data['optionType'] === 'string' || data['optionType'] instanceof String)) {
            throw new Error("Expected the field `optionType` to be a primitive type in the JSON string but got " + data['optionType']);
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          Money.validateJSON(data['price']);
        }
        // ensure the json data is a string
        if (data['securityStyle'] && !(typeof data['securityStyle'] === 'string' || data['securityStyle'] instanceof String)) {
            throw new Error("Expected the field `securityStyle` to be a primitive type in the JSON string but got " + data['securityStyle']);
        }
        // ensure the json data is a string
        if (data['securityType'] && !(typeof data['securityType'] === 'string' || data['securityType'] instanceof String)) {
            throw new Error("Expected the field `securityType` to be a primitive type in the JSON string but got " + data['securityType']);
        }
        // ensure the json data is a string
        if (data['sedol'] && !(typeof data['sedol'] === 'string' || data['sedol'] instanceof String)) {
            throw new Error("Expected the field `sedol` to be a primitive type in the JSON string but got " + data['sedol']);
        }
        // validate the optional field `spread`
        if (data['spread']) { // data not null
          Money.validateJSON(data['spread']);
        }
        // validate the optional field `strikePrice`
        if (data['strikePrice']) { // data not null
          Money.validateJSON(data['strikePrice']);
        }
        // ensure the json data is a string
        if (data['symbol'] && !(typeof data['symbol'] === 'string' || data['symbol'] instanceof String)) {
            throw new Error("Expected the field `symbol` to be a primitive type in the JSON string but got " + data['symbol']);
        }
        // ensure the json data is a string
        if (data['term'] && !(typeof data['term'] === 'string' || data['term'] instanceof String)) {
            throw new Error("Expected the field `term` to be a primitive type in the JSON string but got " + data['term']);
        }
        // validate the optional field `unvestedValue`
        if (data['unvestedValue']) { // data not null
          Money.validateJSON(data['unvestedValue']);
        }
        // validate the optional field `value`
        if (data['value']) { // data not null
          Money.validateJSON(data['value']);
        }
        // validate the optional field `vestedValue`
        if (data['vestedValue']) { // data not null
          Money.validateJSON(data['vestedValue']);
        }
        // ensure the json data is a string
        if (data['vestingDate'] && !(typeof data['vestingDate'] === 'string' || data['vestingDate'] instanceof String)) {
            throw new Error("Expected the field `vestingDate` to be a primitive type in the JSON string but got " + data['vestingDate']);
        }

        return true;
    }


}



/**
 * Unique identifier of the account to which the security is linked.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {Number} accountId
 */
Holding.prototype['accountId'] = undefined;

/**
 * @member {module:model/Money} accruedIncome
 */
Holding.prototype['accruedIncome'] = undefined;

/**
 * @member {module:model/Money} accruedInterest
 */
Holding.prototype['accruedInterest'] = undefined;

/**
 * Asset classification applied to the holding. <br><br><b>Applicable containers</b>: investment<br>
 * @member {Array.<module:model/AssetClassification>} assetClassification
 */
Holding.prototype['assetClassification'] = undefined;

/**
 * The quantity of tradeable units in a contract.<br><b>Note</b>: The contract quantity field is only applicable to commodity and currency.<br><br><b>Applicable containers</b>: investment<br>
 * @member {Number} contractQuantity
 */
Holding.prototype['contractQuantity'] = undefined;

/**
 * @member {module:model/Money} costBasis
 */
Holding.prototype['costBasis'] = undefined;

/**
 * The stated interest rate for a bond.<br><br><b>Applicable containers</b>: investment<br>
 * @member {Number} couponRate
 */
Holding.prototype['couponRate'] = undefined;

/**
 * The date on which the holding is created in the Yodlee system.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {String} createdDate
 */
Holding.prototype['createdDate'] = undefined;

/**
 * The CUSIP (Committee on Uniform Securities Identification Procedures) identifies most the financial instruments in the United States and Canada.<br><br><b>Applicable containers</b>: investment<br>
 * @member {String} cusipNumber
 */
Holding.prototype['cusipNumber'] = undefined;

/**
 * The description (name) for the holding (E.g., Cisco Systems)<br>For insurance container, the field is only applicable for insurance annuity and variable life insurance types. <br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {String} description
 */
Holding.prototype['description'] = undefined;

/**
 * The enrichedDescription is the security description of the normalized holding<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {String} enrichedDescription
 */
Holding.prototype['enrichedDescription'] = undefined;

/**
 * The quantity of the employee stock options that are already exercised or bought by the employee.<br><b>Note</b>: Once the employee stock options is exercised, they are either converted to cash value or equity positions depending on the FI. The exercised quantity field is only applicable to employee stock options.<br><br><b>Applicable containers</b>: investment<br>
 * @member {Number} exercisedQuantity
 */
Holding.prototype['exercisedQuantity'] = undefined;

/**
 * The date on which an option, right or warrant expires.<br><b>Note</b>: The expiration date field is only applicable to options and employee stock options.<br><br><b>Applicable containers</b>: investment<br>
 * @member {String} expirationDate
 */
Holding.prototype['expirationDate'] = undefined;

/**
 * The date on which equity awards like ESOP, RSU, etc., are issued or granted.<br><b>Note</b>: The grant date field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>
 * @member {String} grantDate
 */
Holding.prototype['grantDate'] = undefined;

/**
 * Type of holding<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {module:model/Holding.HoldingTypeEnum} holdingType
 */
Holding.prototype['holdingType'] = undefined;

/**
 * Unique identifier for the security added in the system. This is the primary key of the holding resource.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {Number} id
 */
Holding.prototype['id'] = undefined;

/**
 * The interest rate on a CD.<br><b>Note</b>: The interest rate field is only applicable to CD.<br><br><b>Applicable containers</b>: investment<br>
 * @member {Number} interestRate
 */
Holding.prototype['interestRate'] = undefined;

/**
 * Indicates that the holding is a short trading.<br><br><b>Applicable containers</b>: investment<br>
 * @member {Boolean} isShort
 */
Holding.prototype['isShort'] = undefined;

/**
 * The ISIN (International Securities Identification Number) is used worldwide to identify specific securities. It is equivalent to CUSIP for international markets.<br><br><b>Note</b>: The ISIN field is only applicable to the trade related transactions<br><br><b>Applicable containers</b>: investment<br>
 * @member {String} isin
 */
Holding.prototype['isin'] = undefined;

/**
 * The date when the information was last updated in the system.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {String} lastUpdated
 */
Holding.prototype['lastUpdated'] = undefined;

/**
 * Indicates the security match status id of the investment option identified during security normalization.<br><br><b>Applicable containers</b>: investment<br>
 * @member {String} matchStatus
 */
Holding.prototype['matchStatus'] = undefined;

/**
 * The stated maturity date of a bond or CD.<br><br><b>Applicable containers</b>: investment<br>
 * @member {String} maturityDate
 */
Holding.prototype['maturityDate'] = undefined;

/**
 * The type of the option position (i.e., put or call).<br><b>Note</b>: The option type field is only applicable to options.<br><br><b>Applicable containers</b>: investment<br><b>Applicable Values</b><br>
 * @member {module:model/Holding.OptionTypeEnum} optionType
 */
Holding.prototype['optionType'] = undefined;

/**
 * @member {module:model/Money} price
 */
Holding.prototype['price'] = undefined;

/**
 * Unique identifier for the user's association with the provider.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {Number} providerAccountId
 */
Holding.prototype['providerAccountId'] = undefined;

/**
 * The quantity held for the holding.<br><b>Note</b>: Only for bonds the quantity field indicates the normalized quantity and not the quantity aggregated from the site. The quantity field is only applicable to restricted stock units/awards, performance units, currency, and commodity.<br>For insurance container, the field is only applicable for insurance annuity and variable life insurance types.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {Number} quantity
 */
Holding.prototype['quantity'] = undefined;

/**
 * Indicates the security style of holding identified through the security service.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {String} securityStyle
 */
Holding.prototype['securityStyle'] = undefined;

/**
 * Indicates the security type of holding identified through the security service.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {String} securityType
 */
Holding.prototype['securityType'] = undefined;

/**
 * The SEDOL (Stock Exchange Daily Official List) is a set of security identifiers used in the United Kingdom and Ireland for clearing purposes.<br><b>Note</b>: The SEDOL field is only applicable to the trade related transactions<br><br><b>Applicable containers</b>: investment<br>
 * @member {String} sedol
 */
Holding.prototype['sedol'] = undefined;

/**
 * @member {module:model/Money} spread
 */
Holding.prototype['spread'] = undefined;

/**
 * @member {module:model/Money} strikePrice
 */
Holding.prototype['strikePrice'] = undefined;

/**
 * The symbol of the security.<br><br><b>Applicable containers</b>: investment<br>
 * @member {String} symbol
 */
Holding.prototype['symbol'] = undefined;

/**
 * The fixed duration for which the bond or CD is issued.<br><b>Note</b>: The term field is only applicable to CD.<br><br><b>Applicable containers</b>: investment<br>
 * @member {String} term
 */
Holding.prototype['term'] = undefined;

/**
 * Indicates the number of unvested quantity or units.<br><b>Note</b>: The unvested quantity field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>
 * @member {Number} unvestedQuantity
 */
Holding.prototype['unvestedQuantity'] = undefined;

/**
 * @member {module:model/Money} unvestedValue
 */
Holding.prototype['unvestedValue'] = undefined;

/**
 * @member {module:model/Money} value
 */
Holding.prototype['value'] = undefined;

/**
 * The quantity of units or shares that are already vested on a vest date.<br><b>Note</b>: The vested quantity field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>
 * @member {Number} vestedQuantity
 */
Holding.prototype['vestedQuantity'] = undefined;

/**
 * The number of vested shares that can be exercised by the employee. It is usually equal to the vested quantity.<br><b>Note</b>: The vested shares exercisable field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>
 * @member {Number} vestedSharesExercisable
 */
Holding.prototype['vestedSharesExercisable'] = undefined;

/**
 * @member {module:model/Money} vestedValue
 */
Holding.prototype['vestedValue'] = undefined;

/**
 * The date on which a RSU, RSA, or an employee stock options become vested.<br><b>Note</b>: The vesting date field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>
 * @member {String} vestingDate
 */
Holding.prototype['vestingDate'] = undefined;





/**
 * Allowed values for the <code>holdingType</code> property.
 * @enum {String}
 * @readonly
 */
Holding['HoldingTypeEnum'] = {

    /**
     * value: "stock"
     * @const
     */
    "stock": "stock",

    /**
     * value: "mutualFund"
     * @const
     */
    "mutualFund": "mutualFund",

    /**
     * value: "bond"
     * @const
     */
    "bond": "bond",

    /**
     * value: "CD"
     * @const
     */
    "CD": "CD",

    /**
     * value: "option"
     * @const
     */
    "option": "option",

    /**
     * value: "moneyMarketFund"
     * @const
     */
    "moneyMarketFund": "moneyMarketFund",

    /**
     * value: "other"
     * @const
     */
    "other": "other",

    /**
     * value: "remic"
     * @const
     */
    "remic": "remic",

    /**
     * value: "future"
     * @const
     */
    "future": "future",

    /**
     * value: "commodity"
     * @const
     */
    "commodity": "commodity",

    /**
     * value: "currency"
     * @const
     */
    "currency": "currency",

    /**
     * value: "unitInvestmentTrust"
     * @const
     */
    "unitInvestmentTrust": "unitInvestmentTrust",

    /**
     * value: "employeeStockOption"
     * @const
     */
    "employeeStockOption": "employeeStockOption",

    /**
     * value: "insuranceAnnuity"
     * @const
     */
    "insuranceAnnuity": "insuranceAnnuity",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "preferredStock"
     * @const
     */
    "preferredStock": "preferredStock",

    /**
     * value: "ETF"
     * @const
     */
    "ETF": "ETF",

    /**
     * value: "warrants"
     * @const
     */
    "warrants": "warrants",

    /**
     * value: "ETN"
     * @const
     */
    "ETN": "ETN"
};


/**
 * Allowed values for the <code>optionType</code> property.
 * @enum {String}
 * @readonly
 */
Holding['OptionTypeEnum'] = {

    /**
     * value: "put"
     * @const
     */
    "put": "put",

    /**
     * value: "call"
     * @const
     */
    "call": "call",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};



export default Holding;

