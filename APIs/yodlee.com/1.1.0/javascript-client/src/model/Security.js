/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StockExchangeDetail from './StockExchangeDetail';

/**
 * The Security model module.
 * @module model/Security
 * @version 1.1.0
 */
class Security {
    /**
     * Constructs a new <code>Security</code>.
     * @alias module:model/Security
     */
    constructor() { 
        
        Security.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Security</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Security} obj Optional instance to populate.
     * @return {module:model/Security} The populated <code>Security</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Security();

            if (data.hasOwnProperty('accrualMethod')) {
                obj['accrualMethod'] = ApiClient.convertToType(data['accrualMethod'], 'String');
            }
            if (data.hasOwnProperty('agencyFactor')) {
                obj['agencyFactor'] = ApiClient.convertToType(data['agencyFactor'], 'Number');
            }
            if (data.hasOwnProperty('callDate')) {
                obj['callDate'] = ApiClient.convertToType(data['callDate'], 'String');
            }
            if (data.hasOwnProperty('callPrice')) {
                obj['callPrice'] = ApiClient.convertToType(data['callPrice'], 'Number');
            }
            if (data.hasOwnProperty('cdscFundFlag')) {
                obj['cdscFundFlag'] = ApiClient.convertToType(data['cdscFundFlag'], 'Boolean');
            }
            if (data.hasOwnProperty('closedFlag')) {
                obj['closedFlag'] = ApiClient.convertToType(data['closedFlag'], 'Boolean');
            }
            if (data.hasOwnProperty('cusip')) {
                obj['cusip'] = ApiClient.convertToType(data['cusip'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('federalTaxable')) {
                obj['federalTaxable'] = ApiClient.convertToType(data['federalTaxable'], 'Boolean');
            }
            if (data.hasOwnProperty('firmEligible')) {
                obj['firmEligible'] = ApiClient.convertToType(data['firmEligible'], 'String');
            }
            if (data.hasOwnProperty('firstCouponDate')) {
                obj['firstCouponDate'] = ApiClient.convertToType(data['firstCouponDate'], 'String');
            }
            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = ApiClient.convertToType(data['frequency'], 'Number');
            }
            if (data.hasOwnProperty('fundFamily')) {
                obj['fundFamily'] = ApiClient.convertToType(data['fundFamily'], 'String');
            }
            if (data.hasOwnProperty('gicsSector')) {
                obj['gicsSector'] = ApiClient.convertToType(data['gicsSector'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('incomeCurrency')) {
                obj['incomeCurrency'] = ApiClient.convertToType(data['incomeCurrency'], 'String');
            }
            if (data.hasOwnProperty('interestRate')) {
                obj['interestRate'] = ApiClient.convertToType(data['interestRate'], 'Number');
            }
            if (data.hasOwnProperty('isDummySecurity')) {
                obj['isDummySecurity'] = ApiClient.convertToType(data['isDummySecurity'], 'Boolean');
            }
            if (data.hasOwnProperty('isEnvestnetDummySecurity')) {
                obj['isEnvestnetDummySecurity'] = ApiClient.convertToType(data['isEnvestnetDummySecurity'], 'Boolean');
            }
            if (data.hasOwnProperty('isSyntheticSecurity')) {
                obj['isSyntheticSecurity'] = ApiClient.convertToType(data['isSyntheticSecurity'], 'Boolean');
            }
            if (data.hasOwnProperty('isin')) {
                obj['isin'] = ApiClient.convertToType(data['isin'], 'String');
            }
            if (data.hasOwnProperty('issueDate')) {
                obj['issueDate'] = ApiClient.convertToType(data['issueDate'], 'String');
            }
            if (data.hasOwnProperty('issueTypeMultiplier')) {
                obj['issueTypeMultiplier'] = ApiClient.convertToType(data['issueTypeMultiplier'], 'Number');
            }
            if (data.hasOwnProperty('lastCouponDate')) {
                obj['lastCouponDate'] = ApiClient.convertToType(data['lastCouponDate'], 'String');
            }
            if (data.hasOwnProperty('lastModifiedDate')) {
                obj['lastModifiedDate'] = ApiClient.convertToType(data['lastModifiedDate'], 'String');
            }
            if (data.hasOwnProperty('maturityDate')) {
                obj['maturityDate'] = ApiClient.convertToType(data['maturityDate'], 'String');
            }
            if (data.hasOwnProperty('minimumPurchase')) {
                obj['minimumPurchase'] = ApiClient.convertToType(data['minimumPurchase'], 'Number');
            }
            if (data.hasOwnProperty('moodyRating')) {
                obj['moodyRating'] = ApiClient.convertToType(data['moodyRating'], 'String');
            }
            if (data.hasOwnProperty('sAndPRating')) {
                obj['sAndPRating'] = ApiClient.convertToType(data['sAndPRating'], 'String');
            }
            if (data.hasOwnProperty('sector')) {
                obj['sector'] = ApiClient.convertToType(data['sector'], 'String');
            }
            if (data.hasOwnProperty('sedol')) {
                obj['sedol'] = ApiClient.convertToType(data['sedol'], 'String');
            }
            if (data.hasOwnProperty('shareClass')) {
                obj['shareClass'] = ApiClient.convertToType(data['shareClass'], 'String');
            }
            if (data.hasOwnProperty('stateTaxable')) {
                obj['stateTaxable'] = ApiClient.convertToType(data['stateTaxable'], 'Boolean');
            }
            if (data.hasOwnProperty('stockExchangeDetails')) {
                obj['stockExchangeDetails'] = ApiClient.convertToType(data['stockExchangeDetails'], [StockExchangeDetail]);
            }
            if (data.hasOwnProperty('style')) {
                obj['style'] = ApiClient.convertToType(data['style'], 'String');
            }
            if (data.hasOwnProperty('subSector')) {
                obj['subSector'] = ApiClient.convertToType(data['subSector'], 'String');
            }
            if (data.hasOwnProperty('tradeCurrencyCode')) {
                obj['tradeCurrencyCode'] = ApiClient.convertToType(data['tradeCurrencyCode'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Security</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Security</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accrualMethod'] && !(typeof data['accrualMethod'] === 'string' || data['accrualMethod'] instanceof String)) {
            throw new Error("Expected the field `accrualMethod` to be a primitive type in the JSON string but got " + data['accrualMethod']);
        }
        // ensure the json data is a string
        if (data['callDate'] && !(typeof data['callDate'] === 'string' || data['callDate'] instanceof String)) {
            throw new Error("Expected the field `callDate` to be a primitive type in the JSON string but got " + data['callDate']);
        }
        // ensure the json data is a string
        if (data['cusip'] && !(typeof data['cusip'] === 'string' || data['cusip'] instanceof String)) {
            throw new Error("Expected the field `cusip` to be a primitive type in the JSON string but got " + data['cusip']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['firmEligible'] && !(typeof data['firmEligible'] === 'string' || data['firmEligible'] instanceof String)) {
            throw new Error("Expected the field `firmEligible` to be a primitive type in the JSON string but got " + data['firmEligible']);
        }
        // ensure the json data is a string
        if (data['firstCouponDate'] && !(typeof data['firstCouponDate'] === 'string' || data['firstCouponDate'] instanceof String)) {
            throw new Error("Expected the field `firstCouponDate` to be a primitive type in the JSON string but got " + data['firstCouponDate']);
        }
        // ensure the json data is a string
        if (data['fundFamily'] && !(typeof data['fundFamily'] === 'string' || data['fundFamily'] instanceof String)) {
            throw new Error("Expected the field `fundFamily` to be a primitive type in the JSON string but got " + data['fundFamily']);
        }
        // ensure the json data is a string
        if (data['gicsSector'] && !(typeof data['gicsSector'] === 'string' || data['gicsSector'] instanceof String)) {
            throw new Error("Expected the field `gicsSector` to be a primitive type in the JSON string but got " + data['gicsSector']);
        }
        // ensure the json data is a string
        if (data['incomeCurrency'] && !(typeof data['incomeCurrency'] === 'string' || data['incomeCurrency'] instanceof String)) {
            throw new Error("Expected the field `incomeCurrency` to be a primitive type in the JSON string but got " + data['incomeCurrency']);
        }
        // ensure the json data is a string
        if (data['isin'] && !(typeof data['isin'] === 'string' || data['isin'] instanceof String)) {
            throw new Error("Expected the field `isin` to be a primitive type in the JSON string but got " + data['isin']);
        }
        // ensure the json data is a string
        if (data['issueDate'] && !(typeof data['issueDate'] === 'string' || data['issueDate'] instanceof String)) {
            throw new Error("Expected the field `issueDate` to be a primitive type in the JSON string but got " + data['issueDate']);
        }
        // ensure the json data is a string
        if (data['lastCouponDate'] && !(typeof data['lastCouponDate'] === 'string' || data['lastCouponDate'] instanceof String)) {
            throw new Error("Expected the field `lastCouponDate` to be a primitive type in the JSON string but got " + data['lastCouponDate']);
        }
        // ensure the json data is a string
        if (data['lastModifiedDate'] && !(typeof data['lastModifiedDate'] === 'string' || data['lastModifiedDate'] instanceof String)) {
            throw new Error("Expected the field `lastModifiedDate` to be a primitive type in the JSON string but got " + data['lastModifiedDate']);
        }
        // ensure the json data is a string
        if (data['maturityDate'] && !(typeof data['maturityDate'] === 'string' || data['maturityDate'] instanceof String)) {
            throw new Error("Expected the field `maturityDate` to be a primitive type in the JSON string but got " + data['maturityDate']);
        }
        // ensure the json data is a string
        if (data['moodyRating'] && !(typeof data['moodyRating'] === 'string' || data['moodyRating'] instanceof String)) {
            throw new Error("Expected the field `moodyRating` to be a primitive type in the JSON string but got " + data['moodyRating']);
        }
        // ensure the json data is a string
        if (data['sAndPRating'] && !(typeof data['sAndPRating'] === 'string' || data['sAndPRating'] instanceof String)) {
            throw new Error("Expected the field `sAndPRating` to be a primitive type in the JSON string but got " + data['sAndPRating']);
        }
        // ensure the json data is a string
        if (data['sector'] && !(typeof data['sector'] === 'string' || data['sector'] instanceof String)) {
            throw new Error("Expected the field `sector` to be a primitive type in the JSON string but got " + data['sector']);
        }
        // ensure the json data is a string
        if (data['sedol'] && !(typeof data['sedol'] === 'string' || data['sedol'] instanceof String)) {
            throw new Error("Expected the field `sedol` to be a primitive type in the JSON string but got " + data['sedol']);
        }
        // ensure the json data is a string
        if (data['shareClass'] && !(typeof data['shareClass'] === 'string' || data['shareClass'] instanceof String)) {
            throw new Error("Expected the field `shareClass` to be a primitive type in the JSON string but got " + data['shareClass']);
        }
        if (data['stockExchangeDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['stockExchangeDetails'])) {
                throw new Error("Expected the field `stockExchangeDetails` to be an array in the JSON data but got " + data['stockExchangeDetails']);
            }
            // validate the optional field `stockExchangeDetails` (array)
            for (const item of data['stockExchangeDetails']) {
                StockExchangeDetail.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['style'] && !(typeof data['style'] === 'string' || data['style'] instanceof String)) {
            throw new Error("Expected the field `style` to be a primitive type in the JSON string but got " + data['style']);
        }
        // ensure the json data is a string
        if (data['subSector'] && !(typeof data['subSector'] === 'string' || data['subSector'] instanceof String)) {
            throw new Error("Expected the field `subSector` to be a primitive type in the JSON string but got " + data['subSector']);
        }
        // ensure the json data is a string
        if (data['tradeCurrencyCode'] && !(typeof data['tradeCurrencyCode'] === 'string' || data['tradeCurrencyCode'] instanceof String)) {
            throw new Error("Expected the field `tradeCurrencyCode` to be a primitive type in the JSON string but got " + data['tradeCurrencyCode']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The method in which interest is accrued or earned.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {String} accrualMethod
 */
Security.prototype['accrualMethod'] = undefined;

/**
 * Agency factor of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {Number} agencyFactor
 */
Security.prototype['agencyFactor'] = undefined;

/**
 * Next call date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {String} callDate
 */
Security.prototype['callDate'] = undefined;

/**
 * Next call price of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {Number} callPrice
 */
Security.prototype['callPrice'] = undefined;

/**
 * cdsc fund flag of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {Boolean} cdscFundFlag
 */
Security.prototype['cdscFundFlag'] = undefined;

/**
 * <b>true</b>:Closed for all investors , <b>false</b>: Open to all investors.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {Boolean} closedFlag
 */
Security.prototype['closedFlag'] = undefined;

/**
 * A CUSIP is a nine-character alphanumeric code that identifies a North American financial security for the purposes of facilitating clearing and settlement of trades.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {String} cusip
 */
Security.prototype['cusip'] = undefined;

/**
 * The description (name) of the security. For example, Cisco Systems.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {String} description
 */
Security.prototype['description'] = undefined;

/**
 * Flag indicating federal taxable.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {Boolean} federalTaxable
 */
Security.prototype['federalTaxable'] = undefined;

/**
 * <b>1</b>- indicates Eligible,<b>0</b>- indicates firm is not eligible.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {String} firmEligible
 */
Security.prototype['firmEligible'] = undefined;

/**
 * First coupon date of security.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {String} firstCouponDate
 */
Security.prototype['firstCouponDate'] = undefined;

/**
 * Coupon Frequency.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {Number} frequency
 */
Security.prototype['frequency'] = undefined;

/**
 * Mutual Fund Family Name.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {String} fundFamily
 */
Security.prototype['fundFamily'] = undefined;

/**
 * GICS Sector is a categorization the S&P assigns to all publically traded companies. <br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {String} gicsSector
 */
Security.prototype['gicsSector'] = undefined;

/**
 * The unique identifier of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {Number} id
 */
Security.prototype['id'] = undefined;

/**
 * ISO 4217 currency code indicating income currency of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {String} incomeCurrency
 */
Security.prototype['incomeCurrency'] = undefined;

/**
 * The rate of interest paid annually, expressed as a percentage of the bond's par or face value.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {Number} interestRate
 */
Security.prototype['interestRate'] = undefined;

/**
 * Indicates whether the security is a dummy security.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {Boolean} isDummySecurity
 */
Security.prototype['isDummySecurity'] = undefined;

/**
 * Flag indicating a dummy security.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {Boolean} isEnvestnetDummySecurity
 */
Security.prototype['isEnvestnetDummySecurity'] = undefined;

/**
 * Indicates whether the security is a simulated security.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {Boolean} isSyntheticSecurity
 */
Security.prototype['isSyntheticSecurity'] = undefined;

/**
 * The International Securities Identification Number (ISIN) is used worldwide to identify specific securities. It is equivalent to CUSIP for international markets.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {String} isin
 */
Security.prototype['isin'] = undefined;

/**
 * Issue date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {String} issueDate
 */
Security.prototype['issueDate'] = undefined;

/**
 * Price units corresponding to the security style. This is used to derive actual price of the security from market value.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {Number} issueTypeMultiplier
 */
Security.prototype['issueTypeMultiplier'] = undefined;

/**
 * Last coupon date of security.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {String} lastCouponDate
 */
Security.prototype['lastCouponDate'] = undefined;

/**
 * The last updated date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {String} lastModifiedDate
 */
Security.prototype['lastModifiedDate'] = undefined;

/**
 * Maturity date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {String} maturityDate
 */
Security.prototype['maturityDate'] = undefined;

/**
 * Minimum purchase of security.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {Number} minimumPurchase
 */
Security.prototype['minimumPurchase'] = undefined;

/**
 * Unique identifier for Moody rating on Envestnet platform.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {String} moodyRating
 */
Security.prototype['moodyRating'] = undefined;

/**
 * Unique identifier for S&P rating on Envestnet platform.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {String} sAndPRating
 */
Security.prototype['sAndPRating'] = undefined;

/**
 * Identifier of the sector to which the security belongs to.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {String} sector
 */
Security.prototype['sector'] = undefined;

/**
 * The Stock Exchange Daily Official List (SEDOL) is a set of security identifiers used in the United Kingdom and Ireland for clearing purposes.<br><b>Note</b>: The SEDOL field is only applicable to the trade related transactions.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {String} sedol
 */
Security.prototype['sedol'] = undefined;

/**
 * Share class of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {String} shareClass
 */
Security.prototype['shareClass'] = undefined;

/**
 * The state in which the security is taxed.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {Boolean} stateTaxable
 */
Security.prototype['stateTaxable'] = undefined;

/**
 * Securities exchange provide the securities information at the corresponding exchanges. <br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {Array.<module:model/StockExchangeDetail>} stockExchangeDetails
 */
Security.prototype['stockExchangeDetails'] = undefined;

/**
 * Classification of the style for the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {String} style
 */
Security.prototype['style'] = undefined;

/**
 * GICS sector ID to which the security belongs to.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {String} subSector
 */
Security.prototype['subSector'] = undefined;

/**
 * ISO 4217 currency code indicating trading currency of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {String} tradeCurrencyCode
 */
Security.prototype['tradeCurrencyCode'] = undefined;

/**
 * Indicates the type of security like stocks, mutual fund, etc. <br><br><b>Applicable containers</b>: investment, insurance<br>
 * @member {String} type
 */
Security.prototype['type'] = undefined;






export default Security;

