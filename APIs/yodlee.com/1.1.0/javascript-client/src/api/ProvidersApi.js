/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProviderDetailResponse from '../model/ProviderDetailResponse';
import ProviderResponse from '../model/ProviderResponse';
import ProvidersCountResponse from '../model/ProvidersCountResponse';
import YodleeError from '../model/YodleeError';

/**
* Providers service.
* @module api/ProvidersApi
* @version 1.1.0
*/
export default class ProvidersApi {

    /**
    * Constructs a new ProvidersApi. 
    * @alias module:api/ProvidersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAllProviders operation.
     * @callback module:api/ProvidersApi~getAllProvidersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProviderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Providers
     * The get provider service is used to get all the providers that are enabled, search a provider service by name or routing number and get popular sites of a region. <br>Searching for a provider using a routing number is applicable only to the USA and Canada regions.<br>The valid values for priority are: <br>   1. cobrand: Returns providers enabled for the cobrand (Default priority)<br>   2. popular: Returns providers popular among users of the customer<br><br>Only the datasets, attributes, and containers that are enabled for the customer will be returned in the response.<br>Input for the dataset$filter should adhere to the following expression:<br><dataset.name>[<attribute.name>.container[<container> OR <container>] OR <attribute.name>.container[<container>]] <br>OR <dataset.name>[<attribute.name> OR <attribute.name>]<br><b>dataset$filter value examples:</b><br>ACCT_PROFILE[FULL_ACCT_NUMBER.container[bank OR investment OR creditCard]]<br>ACCT_PROFILE[FULL_ACCT_NUMBER.container[bank]]<br>BASIC_AGG_DATA[ACCOUNT_DETAILS.container[bank OR investment] OR HOLDINGS.container[bank]] OR ACCT_PROFILE[FULL_ACCT_NUMBER.container[bank]]<br>BASIC_AGG_DATA<br>BASIC_AGG_DATA OR ACCT_PROFILE<br>BASIC_AGG_DATA [ ACCOUNT_DETAILS OR HOLDINGS ]<br>BASIC_AGG_DATA [ ACCOUNT_DETAILS] OR DOCUMENT <br>BASIC_AGG_DATA [ BASIC_ACCOUNT_INFO OR ACCOUNT_DETAILS ] <br><br>The fullAcountNumberFields is specified to filter the providers that have paymentAccountNumber or unmaskedAccountNumber support in the FULL_ACCT_NUMBER dataset attribute.<br><b>Examples for usage of fullAccountNumberFields </b><br>dataset$filter=ACCT_PROFILE[ FULL_ACCT_NUMBER.container [ bank ]] &amp; fullAccountNumberFields=paymentAccountNumber<br>dataset$filter=ACCT_PROFILE[ FULL_ACCT_NUMBER.container [ bank ]] &amp; fullAccountNumberFields=unmaskedAccountNumber<br>dataset$filter=ACCT_PROFILE[ FULL_ACCT_NUMBER.container [ bank ]] &amp; fullAccountNumberFields=unmaskedAccountNumber,paymentAccountNumber<br><br>The skip and top parameters are used for pagination. In the skip and top parameters, pass the number of records to be skipped and retrieved, respectively.<br>The response header provides the links to retrieve the next and previous set of transactions.<br><br><b>Note:</b> <ol><li>In a product flow involving user interaction, Yodlee recommends invoking this service with filters.<li>Without filters, the service may perform slowly as it takes a few minutes to return data in the response.<li>The AuthParameter appears in the response only in case of token-based aggregation sites.<li>The pagination feature only applies when the priority parameter is set as cobrand. If no values are provided in the skip and top parameters, the API will only return the first 500 records.<li>This service supports the localization feature and accepts locale as a header parameter.<li>The capability has been deprecated in query parameter and response.</li></ol>
     * @param {Object} opts Optional parameters
     * @param {String} [capability] CHALLENGE_DEPOSIT_VERIFICATION - capability search is deprecated
     * @param {String} [datasetfilter] Expression to filter the providers by dataset(s) or dataset attribute(s). The default value will be the dataset or dataset attributes configured as default for the customer.
     * @param {String} [fullAccountNumberFields] Specify to filter the providers with values paymentAccountNumber,unmaskedAccountNumber.
     * @param {Number} [institutionId] Institution Id for Single site selection
     * @param {String} [name] Name in minimum 1 character or routing number.
     * @param {String} [priority] Search priority
     * @param {String} [providerId] Max 5 Comma seperated Provider Ids
     * @param {Number} [skip] skip (Min 0) - This is not applicable along with 'name' parameter.
     * @param {Number} [top] top (Max 500) - This is not applicable along with 'name' parameter.
     * @param {module:api/ProvidersApi~getAllProvidersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProviderResponse}
     */
    getAllProviders(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'capability': opts['capability'],
        'dataset$filter': opts['datasetfilter'],
        'fullAccountNumberFields': opts['fullAccountNumberFields'],
        'institutionId': opts['institutionId'],
        'name': opts['name'],
        'priority': opts['priority'],
        'providerId': opts['providerId'],
        'skip': opts['skip'],
        'top': opts['top']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ProviderResponse;
      return this.apiClient.callApi(
        '/providers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProvider operation.
     * @callback module:api/ProvidersApi~getProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProviderDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Provider Details
     * The get provider detail service is used to get detailed information including the login form for a provider.<br>The response is a provider object that includes information such as name of the provider, <br>provider's base URL, a list of containers supported by the provider, the login form details of the provider, etc.<br>Only enabled datasets, attributes and containers gets returned in the response.<br><br><b>Note:</b><li>This service supports the localization feature and accepts locale as a header parameter.<li>The capability has been deprecated in the response.
     * @param {Number} providerId providerId
     * @param {module:api/ProvidersApi~getProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProviderDetailResponse}
     */
    getProvider(providerId, callback) {
      let postBody = null;
      // verify the required parameter 'providerId' is set
      if (providerId === undefined || providerId === null) {
        throw new Error("Missing the required parameter 'providerId' when calling getProvider");
      }

      let pathParams = {
        'providerId': providerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ProviderDetailResponse;
      return this.apiClient.callApi(
        '/providers/{providerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProvidersCount operation.
     * @callback module:api/ProvidersApi~getProvidersCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProvidersCountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Providers Count
     * The count service provides the total number of providers that get returned in the GET /providers depending on the input parameters passed.<br>If you are implementing pagination for providers, call this endpoint before calling GET /providers to know the number of providers that are returned for the input parameters passed.<br>The functionality of the input parameters remains the same as that of the GET /providers endpoint<br><br><b>Note:</b> <li>The capability has been deprecated in the query parameter.</li>
     * @param {Object} opts Optional parameters
     * @param {String} [capability] CHALLENGE_DEPOSIT_VERIFICATION - capability search is deprecated
     * @param {String} [datasetfilter] Expression to filter the providers by dataset(s) or dataset attribute(s). The default value will be the dataset or dataset attributes configured as default for the customer.
     * @param {String} [fullAccountNumberFields] Specify to filter the providers with values paymentAccountNumber,unmaskedAccountNumber.
     * @param {String} [name] Name in minimum 1 character or routing number.
     * @param {String} [priority] Search priority
     * @param {module:api/ProvidersApi~getProvidersCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProvidersCountResponse}
     */
    getProvidersCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'capability': opts['capability'],
        'dataset$filter': opts['datasetfilter'],
        'fullAccountNumberFields': opts['fullAccountNumberFields'],
        'name': opts['name'],
        'priority': opts['priority']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ProvidersCountResponse;
      return this.apiClient.callApi(
        '/providers/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
