/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProviderAccountDetailResponse from '../model/ProviderAccountDetailResponse';
import ProviderAccountPreferencesRequest from '../model/ProviderAccountPreferencesRequest';
import ProviderAccountRequest from '../model/ProviderAccountRequest';
import ProviderAccountResponse from '../model/ProviderAccountResponse';
import ProviderAccountUserProfileResponse from '../model/ProviderAccountUserProfileResponse';
import UpdatedProviderAccountResponse from '../model/UpdatedProviderAccountResponse';
import YodleeError from '../model/YodleeError';

/**
* ProviderAccounts service.
* @module api/ProviderAccountsApi
* @version 1.1.0
*/
export default class ProviderAccountsApi {

    /**
    * Constructs a new ProviderAccountsApi. 
    * @alias module:api/ProviderAccountsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteProviderAccount operation.
     * @callback module:api/ProviderAccountsApi~deleteProviderAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Provider Account
     * The delete provider account service is used to delete a provider account from the Yodlee system. This service also deletes the accounts that are created in the Yodlee system for that provider account. <br>This service does not return a response. The HTTP response code is 204 (Success with no content).<br>
     * @param {Number} providerAccountId providerAccountId
     * @param {module:api/ProviderAccountsApi~deleteProviderAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProviderAccount(providerAccountId, callback) {
      let postBody = null;
      // verify the required parameter 'providerAccountId' is set
      if (providerAccountId === undefined || providerAccountId === null) {
        throw new Error("Missing the required parameter 'providerAccountId' when calling deleteProviderAccount");
      }

      let pathParams = {
        'providerAccountId': providerAccountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/providerAccounts/{providerAccountId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editCredentialsOrRefreshProviderAccount operation.
     * @callback module:api/ProviderAccountsApi~editCredentialsOrRefreshProviderAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatedProviderAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Account
     * The update account API is used to:<br> <ul><li>Retrieve the latest information for accounts that belong to one providerAccount from the provider site. You must allow at least 15 min between requests.<li>Retrieve the latest information of all the eligible accounts that belong to the user.<li>Data to be retrieved from the provider site can be overridden using datasetName or dataset. If you do pass datasetName, all the datasets that are implicitly configured for the dataset will be retrieved. This action is allowed for single provider account refresh flows only.<li>Check the status of the providerAccount before invoking this API. Do not call this API to trigger any action on a providerAccount when an action is already in progress for the providerAccount.<li>If the customer has subscribed to the REFRESH event notification and invoked this API, relevant notifications will be sent to the customer.<li>A dataset may depend on another dataset for retrieval, so the response will include the requested and dependent datasets.<li>Check all the dataset additional statuses returned in the response because the provider account status is drawn from the dataset additional statuses.<li>Updating preferences using this API will trigger refreshes.<li> The content type has to be passed as application/json for the body parameter.</ul><br>-----------------------------------------------------------------------------------------------------------------------------------------<br><br><b>Update All Eligible Accounts - Notes:</b><br><ul><li>This API will trigger a refresh for all the eligible provider accounts(both OB and credential-based accounts).<li>This API will not refresh closed, inactive, or UAR accounts, or accounts with refreshes in-progress or recently refreshed non-OB accounts.<li>No parameters should be passed to this API to trigger this action.<li>Do not call this API often. Our recommendation is to call this only at the time the user logs in to your app because it can hamper other API calls performance.<li>The response only contains information for accounts that were refreshed. If no accounts are eligible for refresh, no response is returned.</ul>
     * @param {String} providerAccountIds comma separated providerAccountIds
     * @param {Object} opts Optional parameters
     * @param {module:model/ProviderAccountRequest} [providerAccountRequest] loginForm or field entity
     * @param {module:api/ProviderAccountsApi~editCredentialsOrRefreshProviderAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatedProviderAccountResponse}
     */
    editCredentialsOrRefreshProviderAccount(providerAccountIds, opts, callback) {
      opts = opts || {};
      let postBody = opts['providerAccountRequest'];
      // verify the required parameter 'providerAccountIds' is set
      if (providerAccountIds === undefined || providerAccountIds === null) {
        throw new Error("Missing the required parameter 'providerAccountIds' when calling editCredentialsOrRefreshProviderAccount");
      }

      let pathParams = {
      };
      let queryParams = {
        'providerAccountIds': providerAccountIds
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = UpdatedProviderAccountResponse;
      return this.apiClient.callApi(
        '/providerAccounts', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllProviderAccounts operation.
     * @callback module:api/ProviderAccountsApi~getAllProviderAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProviderAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Provider Accounts
     * The get provider accounts service is used to return all the provider accounts added by the user. <br>This includes the failed and successfully added provider accounts.<br>
     * @param {Object} opts Optional parameters
     * @param {String} [include] include
     * @param {String} [providerIds] Comma separated providerIds.
     * @param {module:api/ProviderAccountsApi~getAllProviderAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProviderAccountResponse}
     */
    getAllProviderAccounts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'include': opts['include'],
        'providerIds': opts['providerIds']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ProviderAccountResponse;
      return this.apiClient.callApi(
        '/providerAccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProviderAccount operation.
     * @callback module:api/ProviderAccountsApi~getProviderAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProviderAccountDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Provider Account Details
     * The get provider account details service is used to learn the status of adding accounts and updating accounts.<br>This service has to be called continuously to know the progress level of the triggered process. This service also provides the MFA information requested by the provider site.<br>When <i>include = credentials</i>, questions is passed as input, the service returns the credentials (non-password values) and questions stored in the Yodlee system for that provider account. <br><br><b>Note:</b> <li>The password and answer fields are not returned in the response.</li>
     * @param {Number} providerAccountId providerAccountId
     * @param {Object} opts Optional parameters
     * @param {String} [include] include credentials,questions
     * @param {String} [requestId] The unique identifier for the request that returns contextual data
     * @param {module:api/ProviderAccountsApi~getProviderAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProviderAccountDetailResponse}
     */
    getProviderAccount(providerAccountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'providerAccountId' is set
      if (providerAccountId === undefined || providerAccountId === null) {
        throw new Error("Missing the required parameter 'providerAccountId' when calling getProviderAccount");
      }

      let pathParams = {
        'providerAccountId': providerAccountId
      };
      let queryParams = {
        'include': opts['include'],
        'requestId': opts['requestId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ProviderAccountDetailResponse;
      return this.apiClient.callApi(
        '/providerAccounts/{providerAccountId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProviderAccountProfiles operation.
     * @callback module:api/ProviderAccountsApi~getProviderAccountProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProviderAccountUserProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User Profile Details
     * The get provider accounts profile service is used to return the user profile details that are associated to the provider account. <br>
     * @param {Object} opts Optional parameters
     * @param {String} [providerAccountId] Comma separated providerAccountIds.
     * @param {module:api/ProviderAccountsApi~getProviderAccountProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProviderAccountUserProfileResponse}
     */
    getProviderAccountProfiles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'providerAccountId': opts['providerAccountId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ProviderAccountUserProfileResponse;
      return this.apiClient.callApi(
        '/providerAccounts/profile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePreferences operation.
     * @callback module:api/ProviderAccountsApi~updatePreferencesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Preferences
     * This endpoint is used to update preferences like data extracts and auto refreshes without triggering refresh for the providerAccount.<br>Setting isDataExtractsEnabled to false will not trigger data extracts notification and dataExtracts/events will not reflect any data change that is happening for the providerAccount.<br>Modified data will not be provided in the dataExtracts/userData endpoint.<br>Setting isAutoRefreshEnabled to false will not trigger auto refreshes for the provider account.<br>
     * @param {Number} providerAccountId providerAccountId
     * @param {module:model/ProviderAccountPreferencesRequest} providerAccountPreferencesRequest preferences
     * @param {module:api/ProviderAccountsApi~updatePreferencesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updatePreferences(providerAccountId, providerAccountPreferencesRequest, callback) {
      let postBody = providerAccountPreferencesRequest;
      // verify the required parameter 'providerAccountId' is set
      if (providerAccountId === undefined || providerAccountId === null) {
        throw new Error("Missing the required parameter 'providerAccountId' when calling updatePreferences");
      }
      // verify the required parameter 'providerAccountPreferencesRequest' is set
      if (providerAccountPreferencesRequest === undefined || providerAccountPreferencesRequest === null) {
        throw new Error("Missing the required parameter 'providerAccountPreferencesRequest' when calling updatePreferences");
      }

      let pathParams = {
        'providerAccountId': providerAccountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/providerAccounts/{providerAccountId}/preferences', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
