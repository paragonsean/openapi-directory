/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountHistoricalBalancesResponse from '../model/AccountHistoricalBalancesResponse';
import AccountResponse from '../model/AccountResponse';
import CreateAccountRequest from '../model/CreateAccountRequest';
import CreatedAccountResponse from '../model/CreatedAccountResponse';
import EvaluateAddressRequest from '../model/EvaluateAddressRequest';
import EvaluateAddressResponse from '../model/EvaluateAddressResponse';
import UpdateAccountRequest from '../model/UpdateAccountRequest';
import YodleeError from '../model/YodleeError';

/**
* Accounts service.
* @module api/AccountsApi
* @version 1.1.0
*/
export default class AccountsApi {

    /**
    * Constructs a new AccountsApi. 
    * @alias module:api/AccountsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createManualAccount operation.
     * @callback module:api/AccountsApi~createManualAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatedAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Manual Account
     * The add account service is used to add manual accounts.<br>The response of add account service includes the account name , account number and Yodlee generated account id.<br>All manual accounts added will be included as part of networth calculation by default.<br>Add manual account support is available for bank, card, investment, insurance and loan container only.<br><br><b>Note:</b> <li>A real estate account addition is only supported for SYSTEM and MANUAL valuation type.</li>
     * @param {module:model/CreateAccountRequest} createAccountRequest accountParam
     * @param {module:api/AccountsApi~createManualAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatedAccountResponse}
     */
    createManualAccount(createAccountRequest, callback) {
      let postBody = createAccountRequest;
      // verify the required parameter 'createAccountRequest' is set
      if (createAccountRequest === undefined || createAccountRequest === null) {
        throw new Error("Missing the required parameter 'createAccountRequest' when calling createManualAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = CreatedAccountResponse;
      return this.apiClient.callApi(
        '/accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccount operation.
     * @callback module:api/AccountsApi~deleteAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Account
     * The delete account service allows an account to be deleted.<br>This service does not return a response. The HTTP response code is 204 (Success with no content).<br>
     * @param {Number} accountId accountId
     * @param {module:api/AccountsApi~deleteAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAccount(accountId, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling deleteAccount");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/accounts/{accountId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the evaluateAddress operation.
     * @callback module:api/AccountsApi~evaluateAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EvaluateAddressResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Evaluate Address
     * Use this service to validate the address before adding the real estate account.<br>If the address is valid, the service will return the complete address information.<br>The response will contain multiple addresses if the user-provided input matches with multiple entries in the vendor database.<br>In the case of multiple matches, the user can select the appropriate address from the list and then invoke the add account service with the complete address.<br><br><b>Note:</b> <li>Yodlee recommends to use this service before adding the real estate account to avoid failures.</li>
     * @param {module:model/EvaluateAddressRequest} evaluateAddressRequest addressParam
     * @param {module:api/AccountsApi~evaluateAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EvaluateAddressResponse}
     */
    evaluateAddress(evaluateAddressRequest, callback) {
      let postBody = evaluateAddressRequest;
      // verify the required parameter 'evaluateAddressRequest' is set
      if (evaluateAddressRequest === undefined || evaluateAddressRequest === null) {
        throw new Error("Missing the required parameter 'evaluateAddressRequest' when calling evaluateAddress");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = EvaluateAddressResponse;
      return this.apiClient.callApi(
        '/accounts/evaluateAddress', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccount operation.
     * @callback module:api/AccountsApi~getAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Account Details
     * The get account details service provides detailed information of an account.<br><br><b>Note:</b><li>fullAccountNumber is deprecated and is replaced with fullAccountNumberList in include parameter and response.</li>
     * @param {Number} accountId accountId
     * @param {Object} opts Optional parameters
     * @param {String} [include] profile, holder, fullAccountNumber, fullAccountNumberList, paymentProfile, autoRefresh<br><b>Note:</b>fullAccountNumber is deprecated and is replaced with fullAccountNumberList in include parameter and response.
     * @param {module:api/AccountsApi~getAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountResponse}
     */
    getAccount(accountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getAccount");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = AccountResponse;
      return this.apiClient.callApi(
        '/accounts/{accountId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllAccounts operation.
     * @callback module:api/AccountsApi~getAllAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Accounts
     * The get accounts service provides information about accounts added by the user.<br>By default, this service returns information for active and to be closed accounts.<br>If requestId is provided, the accounts that are updated in the context of the requestId will be provided in the response.<br><br><b>Note:</b><br><li>fullAccountNumber is deprecated and is replaced with fullAccountNumberList in include parameter and response.</li><li>fullAccountNumberList, PII (Personal Identifiable Information) and holder details are not available by default, as it is a premium feature that needs security approval. This will not be available for testing in Sandbox environment.</li>
     * @param {Object} opts Optional parameters
     * @param {String} [accountId] Comma separated accountIds.
     * @param {String} [container] bank/creditCard/investment/insurance/loan/reward/realEstate/otherAssets/otherLiabilities
     * @param {String} [include] profile, holder, fullAccountNumber, fullAccountNumberList, paymentProfile, autoRefresh<br><b>Note:</b>fullAccountNumber is deprecated and is replaced with fullAccountNumberList in include parameter and response.
     * @param {String} [providerAccountId] Comma separated providerAccountIds.
     * @param {String} [requestId] The unique identifier that returns contextual data
     * @param {String} [status] ACTIVE,INACTIVE,TO_BE_CLOSED,CLOSED
     * @param {module:api/AccountsApi~getAllAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountResponse}
     */
    getAllAccounts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'accountId': opts['accountId'],
        'container': opts['container'],
        'include': opts['include'],
        'providerAccountId': opts['providerAccountId'],
        'requestId': opts['requestId'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = AccountResponse;
      return this.apiClient.callApi(
        '/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHistoricalBalances operation.
     * @callback module:api/AccountsApi~getHistoricalBalancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountHistoricalBalancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Historical Balances
     * The historical balances service is used to retrieve the historical balances for an account or a user.<br>Historical balances are daily (D), weekly (W), and monthly (M). <br>The interval input should be passed as D, W, and M to retrieve the desired historical balances. The default interval is daily (D). <br>When no account id is provided, historical balances of the accounts that are active, to be closed, and closed are provided in the response. <br>If the fromDate and toDate are not passed, the last 90 days of data will be provided. <br>The fromDate and toDate should be passed in the YYYY-MM-DD format. <br>The date field in the response denotes the date for which the balance is requested.<br>includeCF needs to be sent as true if the customer wants to return carried forward balances for a date when the data is not available. <br>asofDate field in the response denotes the date as of which the balance was updated for that account.<br>When there is no balance available for a requested date and if includeCF is sent as true, the previous date for which the balance is available is provided in the response. <br>When there is no previous balance available, no data will be sent.
     * @param {Object} opts Optional parameters
     * @param {String} [accountId] accountId
     * @param {String} [fromDate] from date for balance retrieval (YYYY-MM-DD)
     * @param {Boolean} [includeCF] Consider carry forward logic for missing balances
     * @param {String} [interval] D-daily, W-weekly or M-monthly
     * @param {Number} [skip] skip (Min 0)
     * @param {String} [toDate] toDate for balance retrieval (YYYY-MM-DD)
     * @param {Number} [top] top (Max 500)
     * @param {module:api/AccountsApi~getHistoricalBalancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountHistoricalBalancesResponse}
     */
    getHistoricalBalances(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'accountId': opts['accountId'],
        'fromDate': opts['fromDate'],
        'includeCF': opts['includeCF'],
        'interval': opts['interval'],
        'skip': opts['skip'],
        'toDate': opts['toDate'],
        'top': opts['top']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = AccountHistoricalBalancesResponse;
      return this.apiClient.callApi(
        '/accounts/historicalBalances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccount operation.
     * @callback module:api/AccountsApi~updateAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Account
     * The update account service is used to update manual and aggregated accounts.<br>The HTTP response code is 204 (Success without content).<br>Update manual account support is available for bank, card, investment, insurance, loan, otherAssets, otherLiabilities and realEstate containers only.<br><br><b>Note:</b><li> A real estate account update is only supported for SYSTEM and MANUAL valuation type.</li><li> Attribute <b>isEbillEnrolled</b> is deprecated as it is applicable for bill accounts only.</li>
     * @param {Number} accountId accountId
     * @param {module:model/UpdateAccountRequest} updateAccountRequest accountRequest
     * @param {module:api/AccountsApi~updateAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateAccount(accountId, updateAccountRequest, callback) {
      let postBody = updateAccountRequest;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling updateAccount");
      }
      // verify the required parameter 'updateAccountRequest' is set
      if (updateAccountRequest === undefined || updateAccountRequest === null) {
        throw new Error("Missing the required parameter 'updateAccountRequest' when calling updateAccount");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/accounts/{accountId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
