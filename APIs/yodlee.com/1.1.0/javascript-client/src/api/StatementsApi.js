/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import StatementResponse from '../model/StatementResponse';
import YodleeError from '../model/YodleeError';

/**
* Statements service.
* @module api/StatementsApi
* @version 1.1.0
*/
export default class StatementsApi {

    /**
    * Constructs a new StatementsApi. 
    * @alias module:api/StatementsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getStatements operation.
     * @callback module:api/StatementsApi~getStatementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Statements
     * The statements service is used to get the list of statement related information. <br>By default, all the latest statements of active and to be closed accounts are retrieved for the user. <br>Certain sites do not have both a statement date and a due date. When a fromDate is passed as an input, all the statements that have the due date on or after the passed date are retrieved. <br>For sites that do not have the due date, statements that have the statement date on or after the passed date are retrieved. <br>The default value of \"isLatest\" is true. To retrieve historical statements isLatest needs to be set to false.<br>
     * @param {Object} opts Optional parameters
     * @param {String} [accountId] accountId
     * @param {String} [container] creditCard/loan/insurance
     * @param {String} [fromDate] from date for statement retrieval (YYYY-MM-DD)
     * @param {String} [isLatest] isLatest (true/false)
     * @param {String} [status] ACTIVE,TO_BE_CLOSED,CLOSED
     * @param {module:api/StatementsApi~getStatementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatementResponse}
     */
    getStatements(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'accountId': opts['accountId'],
        'container': opts['container'],
        'fromDate': opts['fromDate'],
        'isLatest': opts['isLatest'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = StatementResponse;
      return this.apiClient.callApi(
        '/statements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
