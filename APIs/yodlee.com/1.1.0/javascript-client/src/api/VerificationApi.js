/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UpdateVerificationRequest from '../model/UpdateVerificationRequest';
import VerificationRequest from '../model/VerificationRequest';
import VerificationResponse from '../model/VerificationResponse';
import VerificationStatusResponse from '../model/VerificationStatusResponse';
import YodleeError from '../model/YodleeError';

/**
* Verification service.
* @module api/VerificationApi
* @version 1.1.0
*/
export default class VerificationApi {

    /**
    * Constructs a new VerificationApi. 
    * @alias module:api/VerificationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getVerificationStatus operation.
     * @callback module:api/VerificationApi~getVerificationStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerificationStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Verification Status
     * The get verification status service is used to retrieve the verification status of all accounts for which the MS or CDV process has been initiated.<br>For the MS process, the account details object returns the aggregated information of the verified accounts. For the CDV process, the account details object returns the user provided account information.<br>
     * @param {Object} opts Optional parameters
     * @param {String} [accountId] Comma separated accountId
     * @param {String} [providerAccountId] Comma separated providerAccountId
     * @param {String} [verificationType] verificationType
     * @param {module:api/VerificationApi~getVerificationStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerificationStatusResponse}
     */
    getVerificationStatus(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'accountId': opts['accountId'],
        'providerAccountId': opts['providerAccountId'],
        'verificationType': opts['verificationType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = VerificationStatusResponse;
      return this.apiClient.callApi(
        '/verification', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the initiateMatchingOrChallengeDepositeVerification operation.
     * @callback module:api/VerificationApi~initiateMatchingOrChallengeDepositeVerificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerificationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiaite Matching Service and Challenge Deposit
     * The post verification service is used to initiate the matching service (MS) and the challenge deposit account verification (CDV) process to verify account ownership.<br>The MS and CDV process can verify ownership of only bank accounts (i.e., checking and savings).<br>The MS verification can be initiated only for an already aggregated account or a providerAccount.<br>The prerequisite for the MS verification process is to request the ACCT_PROFILE dataset with the HOLDER_NAME attribute.<br>In the MS verification process, a string-match of the account holder name with the registered user name is performed instantaneously. You can contact the Yodlee CustomerCare to configure the full name or only the last name match.<br>Once the CDV process is initiated Yodlee will post the microtransaction (i.e., credit and debit) in the user's account. The CDV process takes 2 to 3 days to complete as it requires the user to provide the microtransaction details.<br>The CDV process is currently supported only in the United States.<br>The verificationId in the response can be used to track the verification request.<br><br><b>Notes:</b><li>This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team's assistance to set up a dedicated environment.
     * @param {module:model/VerificationRequest} verificationRequest verification information
     * @param {module:api/VerificationApi~initiateMatchingOrChallengeDepositeVerificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerificationResponse}
     */
    initiateMatchingOrChallengeDepositeVerification(verificationRequest, callback) {
      let postBody = verificationRequest;
      // verify the required parameter 'verificationRequest' is set
      if (verificationRequest === undefined || verificationRequest === null) {
        throw new Error("Missing the required parameter 'verificationRequest' when calling initiateMatchingOrChallengeDepositeVerification");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = VerificationResponse;
      return this.apiClient.callApi(
        '/verification', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyChallengeDeposit operation.
     * @callback module:api/VerificationApi~verifyChallengeDepositCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerificationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify Challenge Deposit
     * The put verification service is used to complete the challenge deposit verification (CDV) process.<br>This service is used only by the customer of CDV flow.<br>In the CDV process, the user-provided microtransaction details (i.e., credit and debit) is matched against the microtransactions posted by Yodlee. For a successful verification of the account's ownership both the microtransaction details should match.<br>The CDV process is currently supported only in the United States.<br><br><b>Notes:</b><ul><li>This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team's assistance to set up a dedicated environment.</li></ul>
     * @param {module:model/UpdateVerificationRequest} updateVerificationRequest verification information
     * @param {module:api/VerificationApi~verifyChallengeDepositCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerificationResponse}
     */
    verifyChallengeDeposit(updateVerificationRequest, callback) {
      let postBody = updateVerificationRequest;
      // verify the required parameter 'updateVerificationRequest' is set
      if (updateVerificationRequest === undefined || updateVerificationRequest === null) {
        throw new Error("Missing the required parameter 'updateVerificationRequest' when calling verifyChallengeDeposit");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = VerificationResponse;
      return this.apiClient.callApi(
        '/verification', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
