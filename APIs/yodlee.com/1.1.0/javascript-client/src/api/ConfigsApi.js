/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConfigsNotificationResponse from '../model/ConfigsNotificationResponse';
import ConfigsPublicKeyResponse from '../model/ConfigsPublicKeyResponse';
import CreateConfigsNotificationEventRequest from '../model/CreateConfigsNotificationEventRequest';
import UpdateConfigsNotificationEventRequest from '../model/UpdateConfigsNotificationEventRequest';
import YodleeError from '../model/YodleeError';

/**
* Configs service.
* @module api/ConfigsApi
* @version 1.1.0
*/
export default class ConfigsApi {

    /**
    * Constructs a new ConfigsApi. 
    * @alias module:api/ConfigsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSubscriptionNotificationEvent operation.
     * @callback module:api/ConfigsApi~createSubscriptionNotificationEventCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe For Notification Event
     * The subscribe events service is used to subscribe to an event for receiving notifications.<br>The callback URL, where the notification will be posted should be provided to this service.<br>If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.<br>Customers can subscribe to REFRESH,DATA_UPDATES and AUTO_REFRESH_UPDATES event.<br><br><b>Notes:</b><li>This service is not available in developer sandbox/test environment and will be made available for testing in your dedicated environment, once the contract is signed.<li>The content type has to be passed as application/json for the body parameter.</li>
     * @param {module:model/String} eventName eventName
     * @param {module:model/CreateConfigsNotificationEventRequest} createConfigsNotificationEventRequest eventRequest
     * @param {module:api/ConfigsApi~createSubscriptionNotificationEventCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createSubscriptionNotificationEvent(eventName, createConfigsNotificationEventRequest, callback) {
      let postBody = createConfigsNotificationEventRequest;
      // verify the required parameter 'eventName' is set
      if (eventName === undefined || eventName === null) {
        throw new Error("Missing the required parameter 'eventName' when calling createSubscriptionNotificationEvent");
      }
      // verify the required parameter 'createConfigsNotificationEventRequest' is set
      if (createConfigsNotificationEventRequest === undefined || createConfigsNotificationEventRequest === null) {
        throw new Error("Missing the required parameter 'createConfigsNotificationEventRequest' when calling createSubscriptionNotificationEvent");
      }

      let pathParams = {
        'eventName': eventName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/configs/notifications/events/{eventName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSubscribedNotificationEvent operation.
     * @callback module:api/ConfigsApi~deleteSubscribedNotificationEventCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Notification Subscription
     * The delete events service is used to unsubscribe from an events service.<br>
     * @param {module:model/String} eventName eventName
     * @param {module:api/ConfigsApi~deleteSubscribedNotificationEventCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSubscribedNotificationEvent(eventName, callback) {
      let postBody = null;
      // verify the required parameter 'eventName' is set
      if (eventName === undefined || eventName === null) {
        throw new Error("Missing the required parameter 'eventName' when calling deleteSubscribedNotificationEvent");
      }

      let pathParams = {
        'eventName': eventName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/configs/notifications/events/{eventName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicEncryptionKey operation.
     * @callback module:api/ConfigsApi~getPublicEncryptionKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigsPublicKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Public Key
     * The get public key service provides the public key that should be used to encrypt user credentials while invoking POST /providerAccounts and PUT /providerAccounts endpoints.<br>This service will only work if the PKI (public key infrastructure) feature is enabled for the customer.<br><br><b>Note:</b><li> The key in the response is a string in PEM format.</li><li>This endpoint is not available in the Sandbox environment and it is useful only if the PKI feature is enabled.</li>
     * @param {module:api/ConfigsApi~getPublicEncryptionKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigsPublicKeyResponse}
     */
    getPublicEncryptionKey(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ConfigsPublicKeyResponse;
      return this.apiClient.callApi(
        '/configs/publicKey', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubscribedNotificationEvents operation.
     * @callback module:api/ConfigsApi~getSubscribedNotificationEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigsNotificationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Subscribed Notification Events
     * The get events service provides the list of events for which consumers subscribed to receive notifications. <br>
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [eventName] eventName
     * @param {module:api/ConfigsApi~getSubscribedNotificationEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigsNotificationResponse}
     */
    getSubscribedNotificationEvents(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'eventName': opts['eventName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ConfigsNotificationResponse;
      return this.apiClient.callApi(
        '/configs/notifications/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSubscribedNotificationEvent operation.
     * @callback module:api/ConfigsApi~updateSubscribedNotificationEventCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Notification Subscription
     * The update events service is used to update the callback URL.<br>If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.<br><br><b>Note:</b> <li>The content type has to be passed as application/json for the body parameter. <br>
     * @param {module:model/String} eventName eventName
     * @param {module:model/UpdateConfigsNotificationEventRequest} updateConfigsNotificationEventRequest eventRequest
     * @param {module:api/ConfigsApi~updateSubscribedNotificationEventCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateSubscribedNotificationEvent(eventName, updateConfigsNotificationEventRequest, callback) {
      let postBody = updateConfigsNotificationEventRequest;
      // verify the required parameter 'eventName' is set
      if (eventName === undefined || eventName === null) {
        throw new Error("Missing the required parameter 'eventName' when calling updateSubscribedNotificationEvent");
      }
      // verify the required parameter 'updateConfigsNotificationEventRequest' is set
      if (updateConfigsNotificationEventRequest === undefined || updateConfigsNotificationEventRequest === null) {
        throw new Error("Missing the required parameter 'updateConfigsNotificationEventRequest' when calling updateSubscribedNotificationEvent");
      }

      let pathParams = {
        'eventName': eventName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/configs/notifications/events/{eventName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
