# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FieldOperation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _field: str=None, operation: str=None, value: object=None):
        """FieldOperation - a model defined in OpenAPI

        :param _field: The _field of this FieldOperation.
        :param operation: The operation of this FieldOperation.
        :param value: The value of this FieldOperation.
        """
        self.openapi_types = {
            '_field': str,
            'operation': str,
            'value': object
        }

        self.attribute_map = {
            '_field': 'field',
            'operation': 'operation',
            'value': 'value'
        }

        self.__field = _field
        self._operation = operation
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FieldOperation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FieldOperation of this FieldOperation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _field(self):
        """Gets the _field of this FieldOperation.

        Field for which the clause is created.<br><br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan<br><b>Applicable Values</b>:<ul><li>amount</li><li>description</li></ul><b>Applicable Values</b><br>

        :return: The _field of this FieldOperation.
        :rtype: str
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this FieldOperation.

        Field for which the clause is created.<br><br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan<br><b>Applicable Values</b>:<ul><li>amount</li><li>description</li></ul><b>Applicable Values</b><br>

        :param _field: The _field of this FieldOperation.
        :type _field: str
        """
        allowed_values = ["amount", "description"]  # noqa: E501
        if _field not in allowed_values:
            raise ValueError(
                "Invalid value for `_field` ({0}), must be one of {1}"
                .format(_field, allowed_values)
            )

        self.__field = _field

    @property
    def operation(self):
        """Gets the operation of this FieldOperation.

        Operation for which the clause is created.<br><br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan<br><b>Applicable values (depends on the value of field)</b>:<ul><li>field is <b>description</b> -> operation can be<ol><li>stringEquals</li><li>stringContains</li></ol></li><li>field is <b>amount</b> -> operation can be<ol><li>numberEquals</li><li>numberLessThan</li><li>numberLessThanEquals</li><li>numberGreaterThan</li><li>numberGreaterThanEquals</li></ol></li></ul><b>Applicable Values</b><br>

        :return: The operation of this FieldOperation.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this FieldOperation.

        Operation for which the clause is created.<br><br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan<br><b>Applicable values (depends on the value of field)</b>:<ul><li>field is <b>description</b> -> operation can be<ol><li>stringEquals</li><li>stringContains</li></ol></li><li>field is <b>amount</b> -> operation can be<ol><li>numberEquals</li><li>numberLessThan</li><li>numberLessThanEquals</li><li>numberGreaterThan</li><li>numberGreaterThanEquals</li></ol></li></ul><b>Applicable Values</b><br>

        :param operation: The operation of this FieldOperation.
        :type operation: str
        """
        allowed_values = ["numberEquals", "numberLessThan", "numberLessThanEquals", "numberGreaterThan", "numberGreaterThanEquals", "stringEquals", "stringContains"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def value(self):
        """Gets the value of this FieldOperation.

        The value would be the amount value in case of amount based rule clause or the string value in case of description based rule clause.<br><br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan<br><b>Applicable Values</b>:<ul><li>field is <b>description</b> -> value should be <b>min of 3 and max of 50 characters</b></li><li>field is <b>amount</b> -> value should be <b> min value of 0 and a max value of 99999999999.99</b></li></ul>

        :return: The value of this FieldOperation.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FieldOperation.

        The value would be the amount value in case of amount based rule clause or the string value in case of description based rule clause.<br><br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan<br><b>Applicable Values</b>:<ul><li>field is <b>description</b> -> value should be <b>min of 3 and max of 50 characters</b></li><li>field is <b>amount</b> -> value should be <b> min value of 0 and a max value of 99999999999.99</b></li></ul>

        :param value: The value of this FieldOperation.
        :type value: object
        """

        self._value = value
