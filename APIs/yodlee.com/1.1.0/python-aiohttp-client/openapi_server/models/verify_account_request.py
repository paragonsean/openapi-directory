# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.verify_transaction_criteria import VerifyTransactionCriteria
from openapi_server import util


class VerifyAccountRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: int=None, container: str=None, transaction_criteria: List[VerifyTransactionCriteria]=None):
        """VerifyAccountRequest - a model defined in OpenAPI

        :param account_id: The account_id of this VerifyAccountRequest.
        :param container: The container of this VerifyAccountRequest.
        :param transaction_criteria: The transaction_criteria of this VerifyAccountRequest.
        """
        self.openapi_types = {
            'account_id': int,
            'container': str,
            'transaction_criteria': List[VerifyTransactionCriteria]
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'container': 'container',
            'transaction_criteria': 'transactionCriteria'
        }

        self._account_id = account_id
        self._container = container
        self._transaction_criteria = transaction_criteria

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerifyAccountRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VerifyAccountRequest of this VerifyAccountRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this VerifyAccountRequest.


        :return: The account_id of this VerifyAccountRequest.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this VerifyAccountRequest.


        :param account_id: The account_id of this VerifyAccountRequest.
        :type account_id: int
        """

        self._account_id = account_id

    @property
    def container(self):
        """Gets the container of this VerifyAccountRequest.


        :return: The container of this VerifyAccountRequest.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this VerifyAccountRequest.


        :param container: The container of this VerifyAccountRequest.
        :type container: str
        """
        allowed_values = ["bank", "creditCard", "investment", "insurance", "loan", "reward", "realEstate", "otherAssets", "otherLiabilities"]  # noqa: E501
        if container not in allowed_values:
            raise ValueError(
                "Invalid value for `container` ({0}), must be one of {1}"
                .format(container, allowed_values)
            )

        self._container = container

    @property
    def transaction_criteria(self):
        """Gets the transaction_criteria of this VerifyAccountRequest.


        :return: The transaction_criteria of this VerifyAccountRequest.
        :rtype: List[VerifyTransactionCriteria]
        """
        return self._transaction_criteria

    @transaction_criteria.setter
    def transaction_criteria(self, transaction_criteria):
        """Sets the transaction_criteria of this VerifyAccountRequest.


        :param transaction_criteria: The transaction_criteria of this VerifyAccountRequest.
        :type transaction_criteria: List[VerifyTransactionCriteria]
        """
        if transaction_criteria is None:
            raise ValueError("Invalid value for `transaction_criteria`, must not be `None`")

        self._transaction_criteria = transaction_criteria
