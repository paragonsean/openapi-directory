# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class VerificationTransaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: Money=None, base_type: str=None):
        """VerificationTransaction - a model defined in OpenAPI

        :param amount: The amount of this VerificationTransaction.
        :param base_type: The base_type of this VerificationTransaction.
        """
        self.openapi_types = {
            'amount': Money,
            'base_type': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'base_type': 'baseType'
        }

        self._amount = amount
        self._base_type = base_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerificationTransaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VerificationTransaction of this VerificationTransaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this VerificationTransaction.


        :return: The amount of this VerificationTransaction.
        :rtype: Money
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this VerificationTransaction.


        :param amount: The amount of this VerificationTransaction.
        :type amount: Money
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def base_type(self):
        """Gets the base_type of this VerificationTransaction.


        :return: The base_type of this VerificationTransaction.
        :rtype: str
        """
        return self._base_type

    @base_type.setter
    def base_type(self, base_type):
        """Sets the base_type of this VerificationTransaction.


        :param base_type: The base_type of this VerificationTransaction.
        :type base_type: str
        """
        allowed_values = ["CREDIT", "DEBIT"]  # noqa: E501
        if base_type not in allowed_values:
            raise ValueError(
                "Invalid value for `base_type` ({0}), must be one of {1}"
                .format(base_type, allowed_values)
            )

        self._base_type = base_type
