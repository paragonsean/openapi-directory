# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.name import Name
from openapi_server.models.user_response_preferences import UserResponsePreferences
from openapi_server.models.user_session import UserSession
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, login_name: str=None, name: Name=None, preferences: UserResponsePreferences=None, role_type: str=None, session: UserSession=None):
        """User - a model defined in OpenAPI

        :param id: The id of this User.
        :param login_name: The login_name of this User.
        :param name: The name of this User.
        :param preferences: The preferences of this User.
        :param role_type: The role_type of this User.
        :param session: The session of this User.
        """
        self.openapi_types = {
            'id': int,
            'login_name': str,
            'name': Name,
            'preferences': UserResponsePreferences,
            'role_type': str,
            'session': UserSession
        }

        self.attribute_map = {
            'id': 'id',
            'login_name': 'loginName',
            'name': 'name',
            'preferences': 'preferences',
            'role_type': 'roleType',
            'session': 'session'
        }

        self._id = id
        self._login_name = login_name
        self._name = name
        self._preferences = preferences
        self._role_type = role_type
        self._session = session

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this User.

        The unique identifier of a consumer/user in Yodlee system for whom the API services would be accessed for.<br><br><b>Endpoints</b>:<ul><li>POST user/samlLogin</li><li>POST user/register</li><li>GET user</li></ul>

        :return: The id of this User.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        The unique identifier of a consumer/user in Yodlee system for whom the API services would be accessed for.<br><br><b>Endpoints</b>:<ul><li>POST user/samlLogin</li><li>POST user/register</li><li>GET user</li></ul>

        :param id: The id of this User.
        :type id: int
        """

        self._id = id

    @property
    def login_name(self):
        """Gets the login_name of this User.

        The login name of the user used for authentication.<br><br><b>Endpoints</b>:<ul><li>POST user/register</li><li>GET user</li></ul>

        :return: The login_name of this User.
        :rtype: str
        """
        return self._login_name

    @login_name.setter
    def login_name(self, login_name):
        """Sets the login_name of this User.

        The login name of the user used for authentication.<br><br><b>Endpoints</b>:<ul><li>POST user/register</li><li>GET user</li></ul>

        :param login_name: The login_name of this User.
        :type login_name: str
        """

        self._login_name = login_name

    @property
    def name(self):
        """Gets the name of this User.


        :return: The name of this User.
        :rtype: Name
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.


        :param name: The name of this User.
        :type name: Name
        """

        self._name = name

    @property
    def preferences(self):
        """Gets the preferences of this User.


        :return: The preferences of this User.
        :rtype: UserResponsePreferences
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences):
        """Sets the preferences of this User.


        :param preferences: The preferences of this User.
        :type preferences: UserResponsePreferences
        """

        self._preferences = preferences

    @property
    def role_type(self):
        """Gets the role_type of this User.


        :return: The role_type of this User.
        :rtype: str
        """
        return self._role_type

    @role_type.setter
    def role_type(self, role_type):
        """Sets the role_type of this User.


        :param role_type: The role_type of this User.
        :type role_type: str
        """
        allowed_values = ["INDIVIDUAL"]  # noqa: E501
        if role_type not in allowed_values:
            raise ValueError(
                "Invalid value for `role_type` ({0}), must be one of {1}"
                .format(role_type, allowed_values)
            )

        self._role_type = role_type

    @property
    def session(self):
        """Gets the session of this User.


        :return: The session of this User.
        :rtype: UserSession
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this User.


        :param session: The session of this User.
        :type session: UserSession
        """

        self._session = session
