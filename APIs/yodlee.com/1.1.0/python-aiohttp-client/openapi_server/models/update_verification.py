# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.verification_account import VerificationAccount
from openapi_server.models.verification_transaction import VerificationTransaction
from openapi_server import util


class UpdateVerification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: VerificationAccount=None, account_id: int=None, provider_account_id: int=None, reason: str=None, transaction: List[VerificationTransaction]=None, verification_date: str=None, verification_id: int=None, verification_status: str=None, verification_type: str=None):
        """UpdateVerification - a model defined in OpenAPI

        :param account: The account of this UpdateVerification.
        :param account_id: The account_id of this UpdateVerification.
        :param provider_account_id: The provider_account_id of this UpdateVerification.
        :param reason: The reason of this UpdateVerification.
        :param transaction: The transaction of this UpdateVerification.
        :param verification_date: The verification_date of this UpdateVerification.
        :param verification_id: The verification_id of this UpdateVerification.
        :param verification_status: The verification_status of this UpdateVerification.
        :param verification_type: The verification_type of this UpdateVerification.
        """
        self.openapi_types = {
            'account': VerificationAccount,
            'account_id': int,
            'provider_account_id': int,
            'reason': str,
            'transaction': List[VerificationTransaction],
            'verification_date': str,
            'verification_id': int,
            'verification_status': str,
            'verification_type': str
        }

        self.attribute_map = {
            'account': 'account',
            'account_id': 'accountId',
            'provider_account_id': 'providerAccountId',
            'reason': 'reason',
            'transaction': 'transaction',
            'verification_date': 'verificationDate',
            'verification_id': 'verificationId',
            'verification_status': 'verificationStatus',
            'verification_type': 'verificationType'
        }

        self._account = account
        self._account_id = account_id
        self._provider_account_id = provider_account_id
        self._reason = reason
        self._transaction = transaction
        self._verification_date = verification_date
        self._verification_id = verification_id
        self._verification_status = verification_status
        self._verification_type = verification_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateVerification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateVerification of this UpdateVerification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this UpdateVerification.


        :return: The account of this UpdateVerification.
        :rtype: VerificationAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this UpdateVerification.


        :param account: The account of this UpdateVerification.
        :type account: VerificationAccount
        """

        self._account = account

    @property
    def account_id(self):
        """Gets the account_id of this UpdateVerification.

        Unique identifier for the account.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>

        :return: The account_id of this UpdateVerification.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this UpdateVerification.

        Unique identifier for the account.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>

        :param account_id: The account_id of this UpdateVerification.
        :type account_id: int
        """

        self._account_id = account_id

    @property
    def provider_account_id(self):
        """Gets the provider_account_id of this UpdateVerification.

        Unique identifier for the provider account.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>

        :return: The provider_account_id of this UpdateVerification.
        :rtype: int
        """
        return self._provider_account_id

    @provider_account_id.setter
    def provider_account_id(self, provider_account_id):
        """Sets the provider_account_id of this UpdateVerification.

        Unique identifier for the provider account.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>

        :param provider_account_id: The provider_account_id of this UpdateVerification.
        :type provider_account_id: int
        """

        self._provider_account_id = provider_account_id

    @property
    def reason(self):
        """Gets the reason of this UpdateVerification.

        The reason the account verification failed.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>

        :return: The reason of this UpdateVerification.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this UpdateVerification.

        The reason the account verification failed.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>

        :param reason: The reason of this UpdateVerification.
        :type reason: str
        """
        allowed_values = ["DATA_NOT_AVAILABLE", "ACCOUNT_HOLDER_MISMATCH", "FULL_ACCOUNT_NUMBER_AND_BANK_TRANSFER_CODE_NOT_AVAILABLE", "FULL_ACCOUNT_NUMBER_NOT_AVAILABLE", "BANK_TRANSFER_CODE_NOT_AVAILABLE", "EXPIRED", "DATA_MISMATCH", "INSTRUCTION_GENERATION_ERROR"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason

    @property
    def transaction(self):
        """Gets the transaction of this UpdateVerification.


        :return: The transaction of this UpdateVerification.
        :rtype: List[VerificationTransaction]
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this UpdateVerification.


        :param transaction: The transaction of this UpdateVerification.
        :type transaction: List[VerificationTransaction]
        """
        if transaction is None:
            raise ValueError("Invalid value for `transaction`, must not be `None`")

        self._transaction = transaction

    @property
    def verification_date(self):
        """Gets the verification_date of this UpdateVerification.

        The date of the account verification.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>

        :return: The verification_date of this UpdateVerification.
        :rtype: str
        """
        return self._verification_date

    @verification_date.setter
    def verification_date(self, verification_date):
        """Sets the verification_date of this UpdateVerification.

        The date of the account verification.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>

        :param verification_date: The verification_date of this UpdateVerification.
        :type verification_date: str
        """

        self._verification_date = verification_date

    @property
    def verification_id(self):
        """Gets the verification_id of this UpdateVerification.

        Unique identifier for the verification request.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>

        :return: The verification_id of this UpdateVerification.
        :rtype: int
        """
        return self._verification_id

    @verification_id.setter
    def verification_id(self, verification_id):
        """Sets the verification_id of this UpdateVerification.

        Unique identifier for the verification request.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>

        :param verification_id: The verification_id of this UpdateVerification.
        :type verification_id: int
        """

        self._verification_id = verification_id

    @property
    def verification_status(self):
        """Gets the verification_status of this UpdateVerification.

        The status of the account verification.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul><br><b>Applicable Values</b>

        :return: The verification_status of this UpdateVerification.
        :rtype: str
        """
        return self._verification_status

    @verification_status.setter
    def verification_status(self, verification_status):
        """Sets the verification_status of this UpdateVerification.

        The status of the account verification.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul><br><b>Applicable Values</b>

        :param verification_status: The verification_status of this UpdateVerification.
        :type verification_status: str
        """
        allowed_values = ["INITIATED", "DEPOSITED", "SUCCESS", "FAILED"]  # noqa: E501
        if verification_status not in allowed_values:
            raise ValueError(
                "Invalid value for `verification_status` ({0}), must be one of {1}"
                .format(verification_status, allowed_values)
            )

        self._verification_status = verification_status

    @property
    def verification_type(self):
        """Gets the verification_type of this UpdateVerification.

        The account verification type.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul><br><b>Applicable Values</b>

        :return: The verification_type of this UpdateVerification.
        :rtype: str
        """
        return self._verification_type

    @verification_type.setter
    def verification_type(self, verification_type):
        """Sets the verification_type of this UpdateVerification.

        The account verification type.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul><br><b>Applicable Values</b>

        :param verification_type: The verification_type of this UpdateVerification.
        :type verification_type: str
        """
        allowed_values = ["MATCHING", "CHALLENGE_DEPOSIT"]  # noqa: E501
        if verification_type not in allowed_values:
            raise ValueError(
                "Invalid value for `verification_type` ({0}), must be one of {1}"
                .format(verification_type, allowed_values)
            )

        self._verification_type = verification_type
