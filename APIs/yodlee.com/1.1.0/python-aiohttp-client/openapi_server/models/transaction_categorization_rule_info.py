# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_operation import FieldOperation
from openapi_server import util


class TransactionCategorizationRuleInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_id: int=None, priority: int=None, rule_clause: List[FieldOperation]=None, source: str=None):
        """TransactionCategorizationRuleInfo - a model defined in OpenAPI

        :param category_id: The category_id of this TransactionCategorizationRuleInfo.
        :param priority: The priority of this TransactionCategorizationRuleInfo.
        :param rule_clause: The rule_clause of this TransactionCategorizationRuleInfo.
        :param source: The source of this TransactionCategorizationRuleInfo.
        """
        self.openapi_types = {
            'category_id': int,
            'priority': int,
            'rule_clause': List[FieldOperation],
            'source': str
        }

        self.attribute_map = {
            'category_id': 'categoryId',
            'priority': 'priority',
            'rule_clause': 'ruleClause',
            'source': 'source'
        }

        self._category_id = category_id
        self._priority = priority
        self._rule_clause = rule_clause
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactionCategorizationRuleInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransactionCategorizationRuleInfo of this TransactionCategorizationRuleInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_id(self):
        """Gets the category_id of this TransactionCategorizationRuleInfo.


        :return: The category_id of this TransactionCategorizationRuleInfo.
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this TransactionCategorizationRuleInfo.


        :param category_id: The category_id of this TransactionCategorizationRuleInfo.
        :type category_id: int
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")

        self._category_id = category_id

    @property
    def priority(self):
        """Gets the priority of this TransactionCategorizationRuleInfo.


        :return: The priority of this TransactionCategorizationRuleInfo.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this TransactionCategorizationRuleInfo.


        :param priority: The priority of this TransactionCategorizationRuleInfo.
        :type priority: int
        """

        self._priority = priority

    @property
    def rule_clause(self):
        """Gets the rule_clause of this TransactionCategorizationRuleInfo.


        :return: The rule_clause of this TransactionCategorizationRuleInfo.
        :rtype: List[FieldOperation]
        """
        return self._rule_clause

    @rule_clause.setter
    def rule_clause(self, rule_clause):
        """Sets the rule_clause of this TransactionCategorizationRuleInfo.


        :param rule_clause: The rule_clause of this TransactionCategorizationRuleInfo.
        :type rule_clause: List[FieldOperation]
        """
        if rule_clause is None:
            raise ValueError("Invalid value for `rule_clause`, must not be `None`")

        self._rule_clause = rule_clause

    @property
    def source(self):
        """Gets the source of this TransactionCategorizationRuleInfo.


        :return: The source of this TransactionCategorizationRuleInfo.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this TransactionCategorizationRuleInfo.


        :param source: The source of this TransactionCategorizationRuleInfo.
        :type source: str
        """
        allowed_values = ["SYSTEM", "USER"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"
                .format(source, allowed_values)
            )

        self._source = source
