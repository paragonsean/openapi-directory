# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.derived_category_summary import DerivedCategorySummary
from openapi_server.models.derived_transactions_links import DerivedTransactionsLinks
from openapi_server.models.money import Money
from openapi_server import util


class DerivedTransactionsSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_summary: List[DerivedCategorySummary]=None, category_type: str=None, credit_total: Money=None, debit_total: Money=None, links: DerivedTransactionsLinks=None):
        """DerivedTransactionsSummary - a model defined in OpenAPI

        :param category_summary: The category_summary of this DerivedTransactionsSummary.
        :param category_type: The category_type of this DerivedTransactionsSummary.
        :param credit_total: The credit_total of this DerivedTransactionsSummary.
        :param debit_total: The debit_total of this DerivedTransactionsSummary.
        :param links: The links of this DerivedTransactionsSummary.
        """
        self.openapi_types = {
            'category_summary': List[DerivedCategorySummary],
            'category_type': str,
            'credit_total': Money,
            'debit_total': Money,
            'links': DerivedTransactionsLinks
        }

        self.attribute_map = {
            'category_summary': 'categorySummary',
            'category_type': 'categoryType',
            'credit_total': 'creditTotal',
            'debit_total': 'debitTotal',
            'links': 'links'
        }

        self._category_summary = category_summary
        self._category_type = category_type
        self._credit_total = credit_total
        self._debit_total = debit_total
        self._links = links

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DerivedTransactionsSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DerivedTransactionsSummary of this DerivedTransactionsSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_summary(self):
        """Gets the category_summary of this DerivedTransactionsSummary.

        Summary of transaction amouts at category level.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>

        :return: The category_summary of this DerivedTransactionsSummary.
        :rtype: List[DerivedCategorySummary]
        """
        return self._category_summary

    @category_summary.setter
    def category_summary(self, category_summary):
        """Sets the category_summary of this DerivedTransactionsSummary.

        Summary of transaction amouts at category level.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>

        :param category_summary: The category_summary of this DerivedTransactionsSummary.
        :type category_summary: List[DerivedCategorySummary]
        """

        self._category_summary = category_summary

    @property
    def category_type(self):
        """Gets the category_type of this DerivedTransactionsSummary.

        Type of categories provided by transactions/categories service.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br><b>Applicable Values</b><br>

        :return: The category_type of this DerivedTransactionsSummary.
        :rtype: str
        """
        return self._category_type

    @category_type.setter
    def category_type(self, category_type):
        """Sets the category_type of this DerivedTransactionsSummary.

        Type of categories provided by transactions/categories service.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br><b>Applicable Values</b><br>

        :param category_type: The category_type of this DerivedTransactionsSummary.
        :type category_type: str
        """
        allowed_values = ["TRANSFER", "DEFERRED_COMPENSATION", "UNCATEGORIZE", "INCOME", "EXPENSE"]  # noqa: E501
        if category_type not in allowed_values:
            raise ValueError(
                "Invalid value for `category_type` ({0}), must be one of {1}"
                .format(category_type, allowed_values)
            )

        self._category_type = category_type

    @property
    def credit_total(self):
        """Gets the credit_total of this DerivedTransactionsSummary.


        :return: The credit_total of this DerivedTransactionsSummary.
        :rtype: Money
        """
        return self._credit_total

    @credit_total.setter
    def credit_total(self, credit_total):
        """Sets the credit_total of this DerivedTransactionsSummary.


        :param credit_total: The credit_total of this DerivedTransactionsSummary.
        :type credit_total: Money
        """

        self._credit_total = credit_total

    @property
    def debit_total(self):
        """Gets the debit_total of this DerivedTransactionsSummary.


        :return: The debit_total of this DerivedTransactionsSummary.
        :rtype: Money
        """
        return self._debit_total

    @debit_total.setter
    def debit_total(self, debit_total):
        """Sets the debit_total of this DerivedTransactionsSummary.


        :param debit_total: The debit_total of this DerivedTransactionsSummary.
        :type debit_total: Money
        """

        self._debit_total = debit_total

    @property
    def links(self):
        """Gets the links of this DerivedTransactionsSummary.


        :return: The links of this DerivedTransactionsSummary.
        :rtype: DerivedTransactionsLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DerivedTransactionsSummary.


        :param links: The links of this DerivedTransactionsSummary.
        :type links: DerivedTransactionsLinks
        """

        self._links = links
