# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class CoverageAmount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cover: Money=None, limit_type: str=None, met: Money=None, type: str=None, unit_type: str=None):
        """CoverageAmount - a model defined in OpenAPI

        :param cover: The cover of this CoverageAmount.
        :param limit_type: The limit_type of this CoverageAmount.
        :param met: The met of this CoverageAmount.
        :param type: The type of this CoverageAmount.
        :param unit_type: The unit_type of this CoverageAmount.
        """
        self.openapi_types = {
            'cover': Money,
            'limit_type': str,
            'met': Money,
            'type': str,
            'unit_type': str
        }

        self.attribute_map = {
            'cover': 'cover',
            'limit_type': 'limitType',
            'met': 'met',
            'type': 'type',
            'unit_type': 'unitType'
        }

        self._cover = cover
        self._limit_type = limit_type
        self._met = met
        self._type = type
        self._unit_type = unit_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CoverageAmount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CoverageAmount of this CoverageAmount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cover(self):
        """Gets the cover of this CoverageAmount.


        :return: The cover of this CoverageAmount.
        :rtype: Money
        """
        return self._cover

    @cover.setter
    def cover(self, cover):
        """Sets the cover of this CoverageAmount.


        :param cover: The cover of this CoverageAmount.
        :type cover: Money
        """

        self._cover = cover

    @property
    def limit_type(self):
        """Gets the limit_type of this CoverageAmount.

        The type of coverage limit indicates if the coverage is in-network or out-of-network.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values:</b><br>

        :return: The limit_type of this CoverageAmount.
        :rtype: str
        """
        return self._limit_type

    @limit_type.setter
    def limit_type(self, limit_type):
        """Sets the limit_type of this CoverageAmount.

        The type of coverage limit indicates if the coverage is in-network or out-of-network.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values:</b><br>

        :param limit_type: The limit_type of this CoverageAmount.
        :type limit_type: str
        """
        allowed_values = ["IN_NETWORK", "OUT_NETWORK"]  # noqa: E501
        if limit_type not in allowed_values:
            raise ValueError(
                "Invalid value for `limit_type` ({0}), must be one of {1}"
                .format(limit_type, allowed_values)
            )

        self._limit_type = limit_type

    @property
    def met(self):
        """Gets the met of this CoverageAmount.


        :return: The met of this CoverageAmount.
        :rtype: Money
        """
        return self._met

    @met.setter
    def met(self, met):
        """Sets the met of this CoverageAmount.


        :param met: The met of this CoverageAmount.
        :type met: Money
        """

        self._met = met

    @property
    def type(self):
        """Gets the type of this CoverageAmount.

        The type of coverage provided to an individual or an entity.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values:</b><br>

        :return: The type of this CoverageAmount.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CoverageAmount.

        The type of coverage provided to an individual or an entity.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values:</b><br>

        :param type: The type of this CoverageAmount.
        :type type: str
        """
        allowed_values = ["DEDUCTIBLE", "OUT_OF_POCKET", "ANNUAL_BENEFIT", "MAX_BENEFIT", "COVERAGE_AMOUNT", "MONTHLY_BENEFIT", "OTHER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def unit_type(self):
        """Gets the unit_type of this CoverageAmount.

        The type of coverage unit indicates if the coverage is for an individual or a family.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values:</b><br>

        :return: The unit_type of this CoverageAmount.
        :rtype: str
        """
        return self._unit_type

    @unit_type.setter
    def unit_type(self, unit_type):
        """Sets the unit_type of this CoverageAmount.

        The type of coverage unit indicates if the coverage is for an individual or a family.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values:</b><br>

        :param unit_type: The unit_type of this CoverageAmount.
        :type unit_type: str
        """
        allowed_values = ["PER_FAMILY", "PER_MEMBER"]  # noqa: E501
        if unit_type not in allowed_values:
            raise ValueError(
                "Invalid value for `unit_type` ({0}), must be one of {1}"
                .format(unit_type, allowed_values)
            )

        self._unit_type = unit_type
