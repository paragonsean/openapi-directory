# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Cobrand(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cobrand_login: str=None, cobrand_password: str=None, locale: str=None):
        """Cobrand - a model defined in OpenAPI

        :param cobrand_login: The cobrand_login of this Cobrand.
        :param cobrand_password: The cobrand_password of this Cobrand.
        :param locale: The locale of this Cobrand.
        """
        self.openapi_types = {
            'cobrand_login': str,
            'cobrand_password': str,
            'locale': str
        }

        self.attribute_map = {
            'cobrand_login': 'cobrandLogin',
            'cobrand_password': 'cobrandPassword',
            'locale': 'locale'
        }

        self._cobrand_login = cobrand_login
        self._cobrand_password = cobrand_password
        self._locale = locale

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Cobrand':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Cobrand of this Cobrand.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cobrand_login(self):
        """Gets the cobrand_login of this Cobrand.


        :return: The cobrand_login of this Cobrand.
        :rtype: str
        """
        return self._cobrand_login

    @cobrand_login.setter
    def cobrand_login(self, cobrand_login):
        """Sets the cobrand_login of this Cobrand.


        :param cobrand_login: The cobrand_login of this Cobrand.
        :type cobrand_login: str
        """
        if cobrand_login is None:
            raise ValueError("Invalid value for `cobrand_login`, must not be `None`")
        if cobrand_login is not None and len(cobrand_login) > 2147483647:
            raise ValueError("Invalid value for `cobrand_login`, length must be less than or equal to `2147483647`")
        if cobrand_login is not None and len(cobrand_login) < 1:
            raise ValueError("Invalid value for `cobrand_login`, length must be greater than or equal to `1`")

        self._cobrand_login = cobrand_login

    @property
    def cobrand_password(self):
        """Gets the cobrand_password of this Cobrand.


        :return: The cobrand_password of this Cobrand.
        :rtype: str
        """
        return self._cobrand_password

    @cobrand_password.setter
    def cobrand_password(self, cobrand_password):
        """Sets the cobrand_password of this Cobrand.


        :param cobrand_password: The cobrand_password of this Cobrand.
        :type cobrand_password: str
        """
        if cobrand_password is None:
            raise ValueError("Invalid value for `cobrand_password`, must not be `None`")
        if cobrand_password is not None and len(cobrand_password) > 2147483647:
            raise ValueError("Invalid value for `cobrand_password`, length must be less than or equal to `2147483647`")
        if cobrand_password is not None and len(cobrand_password) < 1:
            raise ValueError("Invalid value for `cobrand_password`, length must be greater than or equal to `1`")

        self._cobrand_password = cobrand_password

    @property
    def locale(self):
        """Gets the locale of this Cobrand.

        The customer's locale that will be considered for the localization functionality.<br><br><b>Endpoints</b>:<ul><li>POST cobrand/login</li></ul>

        :return: The locale of this Cobrand.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this Cobrand.

        The customer's locale that will be considered for the localization functionality.<br><br><b>Endpoints</b>:<ul><li>POST cobrand/login</li></ul>

        :param locale: The locale of this Cobrand.
        :type locale: str
        """
        if locale is not None and not re.search(r'[a-z]{2}_[A-Z]{2}', locale):
            raise ValueError("Invalid value for `locale`, must be a follow pattern or equal to `/[a-z]{2}_[A-Z]{2}/`")

        self._locale = locale
