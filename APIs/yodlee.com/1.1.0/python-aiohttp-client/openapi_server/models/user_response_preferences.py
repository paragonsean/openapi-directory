# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserResponsePreferences(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: str=None, date_format: str=None, locale: str=None, time_zone: str=None):
        """UserResponsePreferences - a model defined in OpenAPI

        :param currency: The currency of this UserResponsePreferences.
        :param date_format: The date_format of this UserResponsePreferences.
        :param locale: The locale of this UserResponsePreferences.
        :param time_zone: The time_zone of this UserResponsePreferences.
        """
        self.openapi_types = {
            'currency': str,
            'date_format': str,
            'locale': str,
            'time_zone': str
        }

        self.attribute_map = {
            'currency': 'currency',
            'date_format': 'dateFormat',
            'locale': 'locale',
            'time_zone': 'timeZone'
        }

        self._currency = currency
        self._date_format = date_format
        self._locale = locale
        self._time_zone = time_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserResponsePreferences':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserResponsePreferences of this UserResponsePreferences.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this UserResponsePreferences.

        The currency of the user. This currency will be respected while providing the response for derived API services.<br><b>Applicable Values</b><br>

        :return: The currency of this UserResponsePreferences.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this UserResponsePreferences.

        The currency of the user. This currency will be respected while providing the response for derived API services.<br><b>Applicable Values</b><br>

        :param currency: The currency of this UserResponsePreferences.
        :type currency: str
        """
        allowed_values = ["AUD", "BRL", "CAD", "EUR", "GBP", "HKD", "IDR", "INR", "JPY", "NZD", "SGD", "USD", "ZAR", "CNY", "VND", "MYR", "CHF"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def date_format(self):
        """Gets the date_format of this UserResponsePreferences.

        The dateformat of the user.This attribute is just a place holder and has no impact on any other API services.

        :return: The date_format of this UserResponsePreferences.
        :rtype: str
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this UserResponsePreferences.

        The dateformat of the user.This attribute is just a place holder and has no impact on any other API services.

        :param date_format: The date_format of this UserResponsePreferences.
        :type date_format: str
        """
        if date_format is not None and len(date_format) > 2147483647:
            raise ValueError("Invalid value for `date_format`, length must be less than or equal to `2147483647`")
        if date_format is not None and len(date_format) < 1:
            raise ValueError("Invalid value for `date_format`, length must be greater than or equal to `1`")

        self._date_format = date_format

    @property
    def locale(self):
        """Gets the locale of this UserResponsePreferences.

        The locale of the user. This locale will be considered for localization features like providing the provider information in the supported locale or providing category names in the transaction related services.<br><b>Applicable Values</b><br>

        :return: The locale of this UserResponsePreferences.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this UserResponsePreferences.

        The locale of the user. This locale will be considered for localization features like providing the provider information in the supported locale or providing category names in the transaction related services.<br><b>Applicable Values</b><br>

        :param locale: The locale of this UserResponsePreferences.
        :type locale: str
        """
        allowed_values = ["en_US", "en_ES", "fr_CA", "zh_CN"]  # noqa: E501
        if locale not in allowed_values:
            raise ValueError(
                "Invalid value for `locale` ({0}), must be one of {1}"
                .format(locale, allowed_values)
            )

        self._locale = locale

    @property
    def time_zone(self):
        """Gets the time_zone of this UserResponsePreferences.

        The timezone of the user. This attribute is just a place holder and has no impact on any other API services.

        :return: The time_zone of this UserResponsePreferences.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this UserResponsePreferences.

        The timezone of the user. This attribute is just a place holder and has no impact on any other API services.

        :param time_zone: The time_zone of this UserResponsePreferences.
        :type time_zone: str
        """
        if time_zone is not None and len(time_zone) > 2147483647:
            raise ValueError("Invalid value for `time_zone`, length must be less than or equal to `2147483647`")
        if time_zone is not None and len(time_zone) < 1:
            raise ValueError("Invalid value for `time_zone`, length must be greater than or equal to `1`")

        self._time_zone = time_zone
