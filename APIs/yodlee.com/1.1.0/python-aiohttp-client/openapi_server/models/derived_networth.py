# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.derived_networth_historical_balance import DerivedNetworthHistoricalBalance
from openapi_server.models.money import Money
from openapi_server import util


class DerivedNetworth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset: Money=None, _date: str=None, historical_balances: List[DerivedNetworthHistoricalBalance]=None, liability: Money=None, networth: Money=None):
        """DerivedNetworth - a model defined in OpenAPI

        :param asset: The asset of this DerivedNetworth.
        :param _date: The _date of this DerivedNetworth.
        :param historical_balances: The historical_balances of this DerivedNetworth.
        :param liability: The liability of this DerivedNetworth.
        :param networth: The networth of this DerivedNetworth.
        """
        self.openapi_types = {
            'asset': Money,
            '_date': str,
            'historical_balances': List[DerivedNetworthHistoricalBalance],
            'liability': Money,
            'networth': Money
        }

        self.attribute_map = {
            'asset': 'asset',
            '_date': 'date',
            'historical_balances': 'historicalBalances',
            'liability': 'liability',
            'networth': 'networth'
        }

        self._asset = asset
        self.__date = _date
        self._historical_balances = historical_balances
        self._liability = liability
        self._networth = networth

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DerivedNetworth':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DerivedNetworth of this DerivedNetworth.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset(self):
        """Gets the asset of this DerivedNetworth.


        :return: The asset of this DerivedNetworth.
        :rtype: Money
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this DerivedNetworth.


        :param asset: The asset of this DerivedNetworth.
        :type asset: Money
        """

        self._asset = asset

    @property
    def _date(self):
        """Gets the _date of this DerivedNetworth.

        The date as of when the networth information is provided.<br><br><b>Applicable containers</b>: bank, creditcard, investment, insurance, realEstate, loan<br>

        :return: The _date of this DerivedNetworth.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this DerivedNetworth.

        The date as of when the networth information is provided.<br><br><b>Applicable containers</b>: bank, creditcard, investment, insurance, realEstate, loan<br>

        :param _date: The _date of this DerivedNetworth.
        :type _date: str
        """

        self.__date = _date

    @property
    def historical_balances(self):
        """Gets the historical_balances of this DerivedNetworth.

        Balances of the accounts over the period of time.<br><br><b>Applicable containers</b>: bank, creditcard, investment, insurance, realEstate, loan<br>

        :return: The historical_balances of this DerivedNetworth.
        :rtype: List[DerivedNetworthHistoricalBalance]
        """
        return self._historical_balances

    @historical_balances.setter
    def historical_balances(self, historical_balances):
        """Sets the historical_balances of this DerivedNetworth.

        Balances of the accounts over the period of time.<br><br><b>Applicable containers</b>: bank, creditcard, investment, insurance, realEstate, loan<br>

        :param historical_balances: The historical_balances of this DerivedNetworth.
        :type historical_balances: List[DerivedNetworthHistoricalBalance]
        """

        self._historical_balances = historical_balances

    @property
    def liability(self):
        """Gets the liability of this DerivedNetworth.


        :return: The liability of this DerivedNetworth.
        :rtype: Money
        """
        return self._liability

    @liability.setter
    def liability(self, liability):
        """Sets the liability of this DerivedNetworth.


        :param liability: The liability of this DerivedNetworth.
        :type liability: Money
        """

        self._liability = liability

    @property
    def networth(self):
        """Gets the networth of this DerivedNetworth.


        :return: The networth of this DerivedNetworth.
        :rtype: Money
        """
        return self._networth

    @networth.setter
    def networth(self, networth):
        """Sets the networth of this DerivedNetworth.


        :param networth: The networth of this DerivedNetworth.
        :type networth: Money
        """

        self._networth = networth
