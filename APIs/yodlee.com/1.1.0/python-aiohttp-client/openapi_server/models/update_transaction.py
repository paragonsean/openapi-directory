# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.description import Description
from openapi_server import util


class UpdateTransaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_id: int=None, category_source: str=None, container: str=None, description: Description=None, memo: str=None):
        """UpdateTransaction - a model defined in OpenAPI

        :param category_id: The category_id of this UpdateTransaction.
        :param category_source: The category_source of this UpdateTransaction.
        :param container: The container of this UpdateTransaction.
        :param description: The description of this UpdateTransaction.
        :param memo: The memo of this UpdateTransaction.
        """
        self.openapi_types = {
            'category_id': int,
            'category_source': str,
            'container': str,
            'description': Description,
            'memo': str
        }

        self.attribute_map = {
            'category_id': 'categoryId',
            'category_source': 'categorySource',
            'container': 'container',
            'description': 'description',
            'memo': 'memo'
        }

        self._category_id = category_id
        self._category_source = category_source
        self._container = container
        self._description = description
        self._memo = memo

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateTransaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateTransaction of this UpdateTransaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_id(self):
        """Gets the category_id of this UpdateTransaction.


        :return: The category_id of this UpdateTransaction.
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this UpdateTransaction.


        :param category_id: The category_id of this UpdateTransaction.
        :type category_id: int
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")

        self._category_id = category_id

    @property
    def category_source(self):
        """Gets the category_source of this UpdateTransaction.


        :return: The category_source of this UpdateTransaction.
        :rtype: str
        """
        return self._category_source

    @category_source.setter
    def category_source(self, category_source):
        """Sets the category_source of this UpdateTransaction.


        :param category_source: The category_source of this UpdateTransaction.
        :type category_source: str
        """
        allowed_values = ["SYSTEM", "USER"]  # noqa: E501
        if category_source not in allowed_values:
            raise ValueError(
                "Invalid value for `category_source` ({0}), must be one of {1}"
                .format(category_source, allowed_values)
            )

        self._category_source = category_source

    @property
    def container(self):
        """Gets the container of this UpdateTransaction.


        :return: The container of this UpdateTransaction.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this UpdateTransaction.


        :param container: The container of this UpdateTransaction.
        :type container: str
        """
        allowed_values = ["bank", "creditCard", "investment", "insurance", "loan", "reward", "realEstate", "otherAssets", "otherLiabilities"]  # noqa: E501
        if container not in allowed_values:
            raise ValueError(
                "Invalid value for `container` ({0}), must be one of {1}"
                .format(container, allowed_values)
            )

        self._container = container

    @property
    def description(self):
        """Gets the description of this UpdateTransaction.


        :return: The description of this UpdateTransaction.
        :rtype: Description
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateTransaction.


        :param description: The description of this UpdateTransaction.
        :type description: Description
        """

        self._description = description

    @property
    def memo(self):
        """Gets the memo of this UpdateTransaction.


        :return: The memo of this UpdateTransaction.
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this UpdateTransaction.


        :param memo: The memo of this UpdateTransaction.
        :type memo: str
        """

        self._memo = memo
