# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asset_classification import AssetClassification
from openapi_server.models.money import Money
from openapi_server import util


class Holding(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: int=None, accrued_income: Money=None, accrued_interest: Money=None, asset_classification: List[AssetClassification]=None, contract_quantity: float=None, cost_basis: Money=None, coupon_rate: float=None, created_date: str=None, cusip_number: str=None, description: str=None, enriched_description: str=None, exercised_quantity: float=None, expiration_date: str=None, grant_date: str=None, holding_type: str=None, id: int=None, interest_rate: float=None, is_short: bool=None, isin: str=None, last_updated: str=None, match_status: str=None, maturity_date: str=None, option_type: str=None, price: Money=None, provider_account_id: int=None, quantity: float=None, security_style: str=None, security_type: str=None, sedol: str=None, spread: Money=None, strike_price: Money=None, symbol: str=None, term: str=None, unvested_quantity: float=None, unvested_value: Money=None, value: Money=None, vested_quantity: float=None, vested_shares_exercisable: float=None, vested_value: Money=None, vesting_date: str=None):
        """Holding - a model defined in OpenAPI

        :param account_id: The account_id of this Holding.
        :param accrued_income: The accrued_income of this Holding.
        :param accrued_interest: The accrued_interest of this Holding.
        :param asset_classification: The asset_classification of this Holding.
        :param contract_quantity: The contract_quantity of this Holding.
        :param cost_basis: The cost_basis of this Holding.
        :param coupon_rate: The coupon_rate of this Holding.
        :param created_date: The created_date of this Holding.
        :param cusip_number: The cusip_number of this Holding.
        :param description: The description of this Holding.
        :param enriched_description: The enriched_description of this Holding.
        :param exercised_quantity: The exercised_quantity of this Holding.
        :param expiration_date: The expiration_date of this Holding.
        :param grant_date: The grant_date of this Holding.
        :param holding_type: The holding_type of this Holding.
        :param id: The id of this Holding.
        :param interest_rate: The interest_rate of this Holding.
        :param is_short: The is_short of this Holding.
        :param isin: The isin of this Holding.
        :param last_updated: The last_updated of this Holding.
        :param match_status: The match_status of this Holding.
        :param maturity_date: The maturity_date of this Holding.
        :param option_type: The option_type of this Holding.
        :param price: The price of this Holding.
        :param provider_account_id: The provider_account_id of this Holding.
        :param quantity: The quantity of this Holding.
        :param security_style: The security_style of this Holding.
        :param security_type: The security_type of this Holding.
        :param sedol: The sedol of this Holding.
        :param spread: The spread of this Holding.
        :param strike_price: The strike_price of this Holding.
        :param symbol: The symbol of this Holding.
        :param term: The term of this Holding.
        :param unvested_quantity: The unvested_quantity of this Holding.
        :param unvested_value: The unvested_value of this Holding.
        :param value: The value of this Holding.
        :param vested_quantity: The vested_quantity of this Holding.
        :param vested_shares_exercisable: The vested_shares_exercisable of this Holding.
        :param vested_value: The vested_value of this Holding.
        :param vesting_date: The vesting_date of this Holding.
        """
        self.openapi_types = {
            'account_id': int,
            'accrued_income': Money,
            'accrued_interest': Money,
            'asset_classification': List[AssetClassification],
            'contract_quantity': float,
            'cost_basis': Money,
            'coupon_rate': float,
            'created_date': str,
            'cusip_number': str,
            'description': str,
            'enriched_description': str,
            'exercised_quantity': float,
            'expiration_date': str,
            'grant_date': str,
            'holding_type': str,
            'id': int,
            'interest_rate': float,
            'is_short': bool,
            'isin': str,
            'last_updated': str,
            'match_status': str,
            'maturity_date': str,
            'option_type': str,
            'price': Money,
            'provider_account_id': int,
            'quantity': float,
            'security_style': str,
            'security_type': str,
            'sedol': str,
            'spread': Money,
            'strike_price': Money,
            'symbol': str,
            'term': str,
            'unvested_quantity': float,
            'unvested_value': Money,
            'value': Money,
            'vested_quantity': float,
            'vested_shares_exercisable': float,
            'vested_value': Money,
            'vesting_date': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'accrued_income': 'accruedIncome',
            'accrued_interest': 'accruedInterest',
            'asset_classification': 'assetClassification',
            'contract_quantity': 'contractQuantity',
            'cost_basis': 'costBasis',
            'coupon_rate': 'couponRate',
            'created_date': 'createdDate',
            'cusip_number': 'cusipNumber',
            'description': 'description',
            'enriched_description': 'enrichedDescription',
            'exercised_quantity': 'exercisedQuantity',
            'expiration_date': 'expirationDate',
            'grant_date': 'grantDate',
            'holding_type': 'holdingType',
            'id': 'id',
            'interest_rate': 'interestRate',
            'is_short': 'isShort',
            'isin': 'isin',
            'last_updated': 'lastUpdated',
            'match_status': 'matchStatus',
            'maturity_date': 'maturityDate',
            'option_type': 'optionType',
            'price': 'price',
            'provider_account_id': 'providerAccountId',
            'quantity': 'quantity',
            'security_style': 'securityStyle',
            'security_type': 'securityType',
            'sedol': 'sedol',
            'spread': 'spread',
            'strike_price': 'strikePrice',
            'symbol': 'symbol',
            'term': 'term',
            'unvested_quantity': 'unvestedQuantity',
            'unvested_value': 'unvestedValue',
            'value': 'value',
            'vested_quantity': 'vestedQuantity',
            'vested_shares_exercisable': 'vestedSharesExercisable',
            'vested_value': 'vestedValue',
            'vesting_date': 'vestingDate'
        }

        self._account_id = account_id
        self._accrued_income = accrued_income
        self._accrued_interest = accrued_interest
        self._asset_classification = asset_classification
        self._contract_quantity = contract_quantity
        self._cost_basis = cost_basis
        self._coupon_rate = coupon_rate
        self._created_date = created_date
        self._cusip_number = cusip_number
        self._description = description
        self._enriched_description = enriched_description
        self._exercised_quantity = exercised_quantity
        self._expiration_date = expiration_date
        self._grant_date = grant_date
        self._holding_type = holding_type
        self._id = id
        self._interest_rate = interest_rate
        self._is_short = is_short
        self._isin = isin
        self._last_updated = last_updated
        self._match_status = match_status
        self._maturity_date = maturity_date
        self._option_type = option_type
        self._price = price
        self._provider_account_id = provider_account_id
        self._quantity = quantity
        self._security_style = security_style
        self._security_type = security_type
        self._sedol = sedol
        self._spread = spread
        self._strike_price = strike_price
        self._symbol = symbol
        self._term = term
        self._unvested_quantity = unvested_quantity
        self._unvested_value = unvested_value
        self._value = value
        self._vested_quantity = vested_quantity
        self._vested_shares_exercisable = vested_shares_exercisable
        self._vested_value = vested_value
        self._vesting_date = vesting_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Holding':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Holding of this Holding.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Holding.

        Unique identifier of the account to which the security is linked.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The account_id of this Holding.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Holding.

        Unique identifier of the account to which the security is linked.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param account_id: The account_id of this Holding.
        :type account_id: int
        """

        self._account_id = account_id

    @property
    def accrued_income(self):
        """Gets the accrued_income of this Holding.


        :return: The accrued_income of this Holding.
        :rtype: Money
        """
        return self._accrued_income

    @accrued_income.setter
    def accrued_income(self, accrued_income):
        """Sets the accrued_income of this Holding.


        :param accrued_income: The accrued_income of this Holding.
        :type accrued_income: Money
        """

        self._accrued_income = accrued_income

    @property
    def accrued_interest(self):
        """Gets the accrued_interest of this Holding.


        :return: The accrued_interest of this Holding.
        :rtype: Money
        """
        return self._accrued_interest

    @accrued_interest.setter
    def accrued_interest(self, accrued_interest):
        """Sets the accrued_interest of this Holding.


        :param accrued_interest: The accrued_interest of this Holding.
        :type accrued_interest: Money
        """

        self._accrued_interest = accrued_interest

    @property
    def asset_classification(self):
        """Gets the asset_classification of this Holding.

        Asset classification applied to the holding. <br><br><b>Applicable containers</b>: investment<br>

        :return: The asset_classification of this Holding.
        :rtype: List[AssetClassification]
        """
        return self._asset_classification

    @asset_classification.setter
    def asset_classification(self, asset_classification):
        """Sets the asset_classification of this Holding.

        Asset classification applied to the holding. <br><br><b>Applicable containers</b>: investment<br>

        :param asset_classification: The asset_classification of this Holding.
        :type asset_classification: List[AssetClassification]
        """

        self._asset_classification = asset_classification

    @property
    def contract_quantity(self):
        """Gets the contract_quantity of this Holding.

        The quantity of tradeable units in a contract.<br><b>Note</b>: The contract quantity field is only applicable to commodity and currency.<br><br><b>Applicable containers</b>: investment<br>

        :return: The contract_quantity of this Holding.
        :rtype: float
        """
        return self._contract_quantity

    @contract_quantity.setter
    def contract_quantity(self, contract_quantity):
        """Sets the contract_quantity of this Holding.

        The quantity of tradeable units in a contract.<br><b>Note</b>: The contract quantity field is only applicable to commodity and currency.<br><br><b>Applicable containers</b>: investment<br>

        :param contract_quantity: The contract_quantity of this Holding.
        :type contract_quantity: float
        """

        self._contract_quantity = contract_quantity

    @property
    def cost_basis(self):
        """Gets the cost_basis of this Holding.


        :return: The cost_basis of this Holding.
        :rtype: Money
        """
        return self._cost_basis

    @cost_basis.setter
    def cost_basis(self, cost_basis):
        """Sets the cost_basis of this Holding.


        :param cost_basis: The cost_basis of this Holding.
        :type cost_basis: Money
        """

        self._cost_basis = cost_basis

    @property
    def coupon_rate(self):
        """Gets the coupon_rate of this Holding.

        The stated interest rate for a bond.<br><br><b>Applicable containers</b>: investment<br>

        :return: The coupon_rate of this Holding.
        :rtype: float
        """
        return self._coupon_rate

    @coupon_rate.setter
    def coupon_rate(self, coupon_rate):
        """Sets the coupon_rate of this Holding.

        The stated interest rate for a bond.<br><br><b>Applicable containers</b>: investment<br>

        :param coupon_rate: The coupon_rate of this Holding.
        :type coupon_rate: float
        """

        self._coupon_rate = coupon_rate

    @property
    def created_date(self):
        """Gets the created_date of this Holding.

        The date on which the holding is created in the Yodlee system.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The created_date of this Holding.
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Holding.

        The date on which the holding is created in the Yodlee system.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param created_date: The created_date of this Holding.
        :type created_date: str
        """

        self._created_date = created_date

    @property
    def cusip_number(self):
        """Gets the cusip_number of this Holding.

        The CUSIP (Committee on Uniform Securities Identification Procedures) identifies most the financial instruments in the United States and Canada.<br><br><b>Applicable containers</b>: investment<br>

        :return: The cusip_number of this Holding.
        :rtype: str
        """
        return self._cusip_number

    @cusip_number.setter
    def cusip_number(self, cusip_number):
        """Sets the cusip_number of this Holding.

        The CUSIP (Committee on Uniform Securities Identification Procedures) identifies most the financial instruments in the United States and Canada.<br><br><b>Applicable containers</b>: investment<br>

        :param cusip_number: The cusip_number of this Holding.
        :type cusip_number: str
        """

        self._cusip_number = cusip_number

    @property
    def description(self):
        """Gets the description of this Holding.

        The description (name) for the holding (E.g., Cisco Systems)<br>For insurance container, the field is only applicable for insurance annuity and variable life insurance types. <br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The description of this Holding.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Holding.

        The description (name) for the holding (E.g., Cisco Systems)<br>For insurance container, the field is only applicable for insurance annuity and variable life insurance types. <br><br><b>Applicable containers</b>: investment, insurance<br>

        :param description: The description of this Holding.
        :type description: str
        """

        self._description = description

    @property
    def enriched_description(self):
        """Gets the enriched_description of this Holding.

        The enrichedDescription is the security description of the normalized holding<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The enriched_description of this Holding.
        :rtype: str
        """
        return self._enriched_description

    @enriched_description.setter
    def enriched_description(self, enriched_description):
        """Sets the enriched_description of this Holding.

        The enrichedDescription is the security description of the normalized holding<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param enriched_description: The enriched_description of this Holding.
        :type enriched_description: str
        """

        self._enriched_description = enriched_description

    @property
    def exercised_quantity(self):
        """Gets the exercised_quantity of this Holding.

        The quantity of the employee stock options that are already exercised or bought by the employee.<br><b>Note</b>: Once the employee stock options is exercised, they are either converted to cash value or equity positions depending on the FI. The exercised quantity field is only applicable to employee stock options.<br><br><b>Applicable containers</b>: investment<br>

        :return: The exercised_quantity of this Holding.
        :rtype: float
        """
        return self._exercised_quantity

    @exercised_quantity.setter
    def exercised_quantity(self, exercised_quantity):
        """Sets the exercised_quantity of this Holding.

        The quantity of the employee stock options that are already exercised or bought by the employee.<br><b>Note</b>: Once the employee stock options is exercised, they are either converted to cash value or equity positions depending on the FI. The exercised quantity field is only applicable to employee stock options.<br><br><b>Applicable containers</b>: investment<br>

        :param exercised_quantity: The exercised_quantity of this Holding.
        :type exercised_quantity: float
        """

        self._exercised_quantity = exercised_quantity

    @property
    def expiration_date(self):
        """Gets the expiration_date of this Holding.

        The date on which an option, right or warrant expires.<br><b>Note</b>: The expiration date field is only applicable to options and employee stock options.<br><br><b>Applicable containers</b>: investment<br>

        :return: The expiration_date of this Holding.
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this Holding.

        The date on which an option, right or warrant expires.<br><b>Note</b>: The expiration date field is only applicable to options and employee stock options.<br><br><b>Applicable containers</b>: investment<br>

        :param expiration_date: The expiration_date of this Holding.
        :type expiration_date: str
        """

        self._expiration_date = expiration_date

    @property
    def grant_date(self):
        """Gets the grant_date of this Holding.

        The date on which equity awards like ESOP, RSU, etc., are issued or granted.<br><b>Note</b>: The grant date field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>

        :return: The grant_date of this Holding.
        :rtype: str
        """
        return self._grant_date

    @grant_date.setter
    def grant_date(self, grant_date):
        """Sets the grant_date of this Holding.

        The date on which equity awards like ESOP, RSU, etc., are issued or granted.<br><b>Note</b>: The grant date field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>

        :param grant_date: The grant_date of this Holding.
        :type grant_date: str
        """

        self._grant_date = grant_date

    @property
    def holding_type(self):
        """Gets the holding_type of this Holding.

        Type of holding<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The holding_type of this Holding.
        :rtype: str
        """
        return self._holding_type

    @holding_type.setter
    def holding_type(self, holding_type):
        """Sets the holding_type of this Holding.

        Type of holding<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param holding_type: The holding_type of this Holding.
        :type holding_type: str
        """
        allowed_values = ["stock", "mutualFund", "bond", "CD", "option", "moneyMarketFund", "other", "remic", "future", "commodity", "currency", "unitInvestmentTrust", "employeeStockOption", "insuranceAnnuity", "unknown", "preferredStock", "ETF", "warrants", "ETN"]  # noqa: E501
        if holding_type not in allowed_values:
            raise ValueError(
                "Invalid value for `holding_type` ({0}), must be one of {1}"
                .format(holding_type, allowed_values)
            )

        self._holding_type = holding_type

    @property
    def id(self):
        """Gets the id of this Holding.

        Unique identifier for the security added in the system. This is the primary key of the holding resource.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The id of this Holding.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Holding.

        Unique identifier for the security added in the system. This is the primary key of the holding resource.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param id: The id of this Holding.
        :type id: int
        """

        self._id = id

    @property
    def interest_rate(self):
        """Gets the interest_rate of this Holding.

        The interest rate on a CD.<br><b>Note</b>: The interest rate field is only applicable to CD.<br><br><b>Applicable containers</b>: investment<br>

        :return: The interest_rate of this Holding.
        :rtype: float
        """
        return self._interest_rate

    @interest_rate.setter
    def interest_rate(self, interest_rate):
        """Sets the interest_rate of this Holding.

        The interest rate on a CD.<br><b>Note</b>: The interest rate field is only applicable to CD.<br><br><b>Applicable containers</b>: investment<br>

        :param interest_rate: The interest_rate of this Holding.
        :type interest_rate: float
        """

        self._interest_rate = interest_rate

    @property
    def is_short(self):
        """Gets the is_short of this Holding.

        Indicates that the holding is a short trading.<br><br><b>Applicable containers</b>: investment<br>

        :return: The is_short of this Holding.
        :rtype: bool
        """
        return self._is_short

    @is_short.setter
    def is_short(self, is_short):
        """Sets the is_short of this Holding.

        Indicates that the holding is a short trading.<br><br><b>Applicable containers</b>: investment<br>

        :param is_short: The is_short of this Holding.
        :type is_short: bool
        """

        self._is_short = is_short

    @property
    def isin(self):
        """Gets the isin of this Holding.

        The ISIN (International Securities Identification Number) is used worldwide to identify specific securities. It is equivalent to CUSIP for international markets.<br><br><b>Note</b>: The ISIN field is only applicable to the trade related transactions<br><br><b>Applicable containers</b>: investment<br>

        :return: The isin of this Holding.
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this Holding.

        The ISIN (International Securities Identification Number) is used worldwide to identify specific securities. It is equivalent to CUSIP for international markets.<br><br><b>Note</b>: The ISIN field is only applicable to the trade related transactions<br><br><b>Applicable containers</b>: investment<br>

        :param isin: The isin of this Holding.
        :type isin: str
        """

        self._isin = isin

    @property
    def last_updated(self):
        """Gets the last_updated of this Holding.

        The date when the information was last updated in the system.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The last_updated of this Holding.
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Holding.

        The date when the information was last updated in the system.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param last_updated: The last_updated of this Holding.
        :type last_updated: str
        """

        self._last_updated = last_updated

    @property
    def match_status(self):
        """Gets the match_status of this Holding.

        Indicates the security match status id of the investment option identified during security normalization.<br><br><b>Applicable containers</b>: investment<br>

        :return: The match_status of this Holding.
        :rtype: str
        """
        return self._match_status

    @match_status.setter
    def match_status(self, match_status):
        """Sets the match_status of this Holding.

        Indicates the security match status id of the investment option identified during security normalization.<br><br><b>Applicable containers</b>: investment<br>

        :param match_status: The match_status of this Holding.
        :type match_status: str
        """

        self._match_status = match_status

    @property
    def maturity_date(self):
        """Gets the maturity_date of this Holding.

        The stated maturity date of a bond or CD.<br><br><b>Applicable containers</b>: investment<br>

        :return: The maturity_date of this Holding.
        :rtype: str
        """
        return self._maturity_date

    @maturity_date.setter
    def maturity_date(self, maturity_date):
        """Sets the maturity_date of this Holding.

        The stated maturity date of a bond or CD.<br><br><b>Applicable containers</b>: investment<br>

        :param maturity_date: The maturity_date of this Holding.
        :type maturity_date: str
        """

        self._maturity_date = maturity_date

    @property
    def option_type(self):
        """Gets the option_type of this Holding.

        The type of the option position (i.e., put or call).<br><b>Note</b>: The option type field is only applicable to options.<br><br><b>Applicable containers</b>: investment<br><b>Applicable Values</b><br>

        :return: The option_type of this Holding.
        :rtype: str
        """
        return self._option_type

    @option_type.setter
    def option_type(self, option_type):
        """Sets the option_type of this Holding.

        The type of the option position (i.e., put or call).<br><b>Note</b>: The option type field is only applicable to options.<br><br><b>Applicable containers</b>: investment<br><b>Applicable Values</b><br>

        :param option_type: The option_type of this Holding.
        :type option_type: str
        """
        allowed_values = ["put", "call", "unknown", "other"]  # noqa: E501
        if option_type not in allowed_values:
            raise ValueError(
                "Invalid value for `option_type` ({0}), must be one of {1}"
                .format(option_type, allowed_values)
            )

        self._option_type = option_type

    @property
    def price(self):
        """Gets the price of this Holding.


        :return: The price of this Holding.
        :rtype: Money
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Holding.


        :param price: The price of this Holding.
        :type price: Money
        """

        self._price = price

    @property
    def provider_account_id(self):
        """Gets the provider_account_id of this Holding.

        Unique identifier for the user's association with the provider.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The provider_account_id of this Holding.
        :rtype: int
        """
        return self._provider_account_id

    @provider_account_id.setter
    def provider_account_id(self, provider_account_id):
        """Sets the provider_account_id of this Holding.

        Unique identifier for the user's association with the provider.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param provider_account_id: The provider_account_id of this Holding.
        :type provider_account_id: int
        """

        self._provider_account_id = provider_account_id

    @property
    def quantity(self):
        """Gets the quantity of this Holding.

        The quantity held for the holding.<br><b>Note</b>: Only for bonds the quantity field indicates the normalized quantity and not the quantity aggregated from the site. The quantity field is only applicable to restricted stock units/awards, performance units, currency, and commodity.<br>For insurance container, the field is only applicable for insurance annuity and variable life insurance types.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The quantity of this Holding.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Holding.

        The quantity held for the holding.<br><b>Note</b>: Only for bonds the quantity field indicates the normalized quantity and not the quantity aggregated from the site. The quantity field is only applicable to restricted stock units/awards, performance units, currency, and commodity.<br>For insurance container, the field is only applicable for insurance annuity and variable life insurance types.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param quantity: The quantity of this Holding.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def security_style(self):
        """Gets the security_style of this Holding.

        Indicates the security style of holding identified through the security service.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The security_style of this Holding.
        :rtype: str
        """
        return self._security_style

    @security_style.setter
    def security_style(self, security_style):
        """Sets the security_style of this Holding.

        Indicates the security style of holding identified through the security service.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param security_style: The security_style of this Holding.
        :type security_style: str
        """

        self._security_style = security_style

    @property
    def security_type(self):
        """Gets the security_type of this Holding.

        Indicates the security type of holding identified through the security service.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The security_type of this Holding.
        :rtype: str
        """
        return self._security_type

    @security_type.setter
    def security_type(self, security_type):
        """Sets the security_type of this Holding.

        Indicates the security type of holding identified through the security service.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param security_type: The security_type of this Holding.
        :type security_type: str
        """

        self._security_type = security_type

    @property
    def sedol(self):
        """Gets the sedol of this Holding.

        The SEDOL (Stock Exchange Daily Official List) is a set of security identifiers used in the United Kingdom and Ireland for clearing purposes.<br><b>Note</b>: The SEDOL field is only applicable to the trade related transactions<br><br><b>Applicable containers</b>: investment<br>

        :return: The sedol of this Holding.
        :rtype: str
        """
        return self._sedol

    @sedol.setter
    def sedol(self, sedol):
        """Sets the sedol of this Holding.

        The SEDOL (Stock Exchange Daily Official List) is a set of security identifiers used in the United Kingdom and Ireland for clearing purposes.<br><b>Note</b>: The SEDOL field is only applicable to the trade related transactions<br><br><b>Applicable containers</b>: investment<br>

        :param sedol: The sedol of this Holding.
        :type sedol: str
        """

        self._sedol = sedol

    @property
    def spread(self):
        """Gets the spread of this Holding.


        :return: The spread of this Holding.
        :rtype: Money
        """
        return self._spread

    @spread.setter
    def spread(self, spread):
        """Sets the spread of this Holding.


        :param spread: The spread of this Holding.
        :type spread: Money
        """

        self._spread = spread

    @property
    def strike_price(self):
        """Gets the strike_price of this Holding.


        :return: The strike_price of this Holding.
        :rtype: Money
        """
        return self._strike_price

    @strike_price.setter
    def strike_price(self, strike_price):
        """Sets the strike_price of this Holding.


        :param strike_price: The strike_price of this Holding.
        :type strike_price: Money
        """

        self._strike_price = strike_price

    @property
    def symbol(self):
        """Gets the symbol of this Holding.

        The symbol of the security.<br><br><b>Applicable containers</b>: investment<br>

        :return: The symbol of this Holding.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Holding.

        The symbol of the security.<br><br><b>Applicable containers</b>: investment<br>

        :param symbol: The symbol of this Holding.
        :type symbol: str
        """

        self._symbol = symbol

    @property
    def term(self):
        """Gets the term of this Holding.

        The fixed duration for which the bond or CD is issued.<br><b>Note</b>: The term field is only applicable to CD.<br><br><b>Applicable containers</b>: investment<br>

        :return: The term of this Holding.
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this Holding.

        The fixed duration for which the bond or CD is issued.<br><b>Note</b>: The term field is only applicable to CD.<br><br><b>Applicable containers</b>: investment<br>

        :param term: The term of this Holding.
        :type term: str
        """

        self._term = term

    @property
    def unvested_quantity(self):
        """Gets the unvested_quantity of this Holding.

        Indicates the number of unvested quantity or units.<br><b>Note</b>: The unvested quantity field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>

        :return: The unvested_quantity of this Holding.
        :rtype: float
        """
        return self._unvested_quantity

    @unvested_quantity.setter
    def unvested_quantity(self, unvested_quantity):
        """Sets the unvested_quantity of this Holding.

        Indicates the number of unvested quantity or units.<br><b>Note</b>: The unvested quantity field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>

        :param unvested_quantity: The unvested_quantity of this Holding.
        :type unvested_quantity: float
        """

        self._unvested_quantity = unvested_quantity

    @property
    def unvested_value(self):
        """Gets the unvested_value of this Holding.


        :return: The unvested_value of this Holding.
        :rtype: Money
        """
        return self._unvested_value

    @unvested_value.setter
    def unvested_value(self, unvested_value):
        """Sets the unvested_value of this Holding.


        :param unvested_value: The unvested_value of this Holding.
        :type unvested_value: Money
        """

        self._unvested_value = unvested_value

    @property
    def value(self):
        """Gets the value of this Holding.


        :return: The value of this Holding.
        :rtype: Money
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Holding.


        :param value: The value of this Holding.
        :type value: Money
        """

        self._value = value

    @property
    def vested_quantity(self):
        """Gets the vested_quantity of this Holding.

        The quantity of units or shares that are already vested on a vest date.<br><b>Note</b>: The vested quantity field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>

        :return: The vested_quantity of this Holding.
        :rtype: float
        """
        return self._vested_quantity

    @vested_quantity.setter
    def vested_quantity(self, vested_quantity):
        """Sets the vested_quantity of this Holding.

        The quantity of units or shares that are already vested on a vest date.<br><b>Note</b>: The vested quantity field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>

        :param vested_quantity: The vested_quantity of this Holding.
        :type vested_quantity: float
        """

        self._vested_quantity = vested_quantity

    @property
    def vested_shares_exercisable(self):
        """Gets the vested_shares_exercisable of this Holding.

        The number of vested shares that can be exercised by the employee. It is usually equal to the vested quantity.<br><b>Note</b>: The vested shares exercisable field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>

        :return: The vested_shares_exercisable of this Holding.
        :rtype: float
        """
        return self._vested_shares_exercisable

    @vested_shares_exercisable.setter
    def vested_shares_exercisable(self, vested_shares_exercisable):
        """Sets the vested_shares_exercisable of this Holding.

        The number of vested shares that can be exercised by the employee. It is usually equal to the vested quantity.<br><b>Note</b>: The vested shares exercisable field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>

        :param vested_shares_exercisable: The vested_shares_exercisable of this Holding.
        :type vested_shares_exercisable: float
        """

        self._vested_shares_exercisable = vested_shares_exercisable

    @property
    def vested_value(self):
        """Gets the vested_value of this Holding.


        :return: The vested_value of this Holding.
        :rtype: Money
        """
        return self._vested_value

    @vested_value.setter
    def vested_value(self, vested_value):
        """Sets the vested_value of this Holding.


        :param vested_value: The vested_value of this Holding.
        :type vested_value: Money
        """

        self._vested_value = vested_value

    @property
    def vesting_date(self):
        """Gets the vesting_date of this Holding.

        The date on which a RSU, RSA, or an employee stock options become vested.<br><b>Note</b>: The vesting date field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>

        :return: The vesting_date of this Holding.
        :rtype: str
        """
        return self._vesting_date

    @vesting_date.setter
    def vesting_date(self, vesting_date):
        """Sets the vesting_date of this Holding.

        The date on which a RSU, RSA, or an employee stock options become vested.<br><b>Note</b>: The vesting date field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>

        :param vesting_date: The vesting_date of this Holding.
        :type vesting_date: str
        """

        self._vesting_date = vesting_date
