# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Document(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: int=None, doc_type: str=None, form_type: str=None, id: str=None, last_updated: str=None, name: str=None, source: str=None, status: str=None):
        """Document - a model defined in OpenAPI

        :param account_id: The account_id of this Document.
        :param doc_type: The doc_type of this Document.
        :param form_type: The form_type of this Document.
        :param id: The id of this Document.
        :param last_updated: The last_updated of this Document.
        :param name: The name of this Document.
        :param source: The source of this Document.
        :param status: The status of this Document.
        """
        self.openapi_types = {
            'account_id': int,
            'doc_type': str,
            'form_type': str,
            'id': str,
            'last_updated': str,
            'name': str,
            'source': str,
            'status': str
        }

        self.attribute_map = {
            'account_id': 'accountID',
            'doc_type': 'docType',
            'form_type': 'formType',
            'id': 'id',
            'last_updated': 'lastUpdated',
            'name': 'name',
            'source': 'source',
            'status': 'status'
        }

        self._account_id = account_id
        self._doc_type = doc_type
        self._form_type = form_type
        self._id = id
        self._last_updated = last_updated
        self._name = name
        self._source = source
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Document':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Document of this Document.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Document.

        The unique identifier for the account. The account ID to which the document is linked.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>

        :return: The account_id of this Document.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Document.

        The unique identifier for the account. The account ID to which the document is linked.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>

        :param account_id: The account_id of this Document.
        :type account_id: int
        """

        self._account_id = account_id

    @property
    def doc_type(self):
        """Gets the doc_type of this Document.

        Indicates the type of the document.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>

        :return: The doc_type of this Document.
        :rtype: str
        """
        return self._doc_type

    @doc_type.setter
    def doc_type(self, doc_type):
        """Sets the doc_type of this Document.

        Indicates the type of the document.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>

        :param doc_type: The doc_type of this Document.
        :type doc_type: str
        """
        allowed_values = ["STMT", "TAX", "EBILL"]  # noqa: E501
        if doc_type not in allowed_values:
            raise ValueError(
                "Invalid value for `doc_type` ({0}), must be one of {1}"
                .format(doc_type, allowed_values)
            )

        self._doc_type = doc_type

    @property
    def form_type(self):
        """Gets the form_type of this Document.

        Indicates the type of the tax form.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>

        :return: The form_type of this Document.
        :rtype: str
        """
        return self._form_type

    @form_type.setter
    def form_type(self, form_type):
        """Sets the form_type of this Document.

        Indicates the type of the tax form.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>

        :param form_type: The form_type of this Document.
        :type form_type: str
        """

        self._form_type = form_type

    @property
    def id(self):
        """Gets the id of this Document.

        The document's primary key and unique identifier.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>

        :return: The id of this Document.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Document.

        The document's primary key and unique identifier.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>

        :param id: The id of this Document.
        :type id: str
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this Document.

        Indicates the date and time the document was last updated.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>

        :return: The last_updated of this Document.
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Document.

        Indicates the date and time the document was last updated.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>

        :param last_updated: The last_updated of this Document.
        :type last_updated: str
        """

        self._last_updated = last_updated

    @property
    def name(self):
        """Gets the name of this Document.

        Indicates the name of the document.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>

        :return: The name of this Document.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Document.

        Indicates the name of the document.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>

        :param name: The name of this Document.
        :type name: str
        """

        self._name = name

    @property
    def source(self):
        """Gets the source of this Document.

        Indicates the source of the document download.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>

        :return: The source of this Document.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Document.

        Indicates the source of the document download.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>

        :param source: The source of this Document.
        :type source: str
        """

        self._source = source

    @property
    def status(self):
        """Gets the status of this Document.

        Indicates the status of the document download.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>

        :return: The status of this Document.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Document.

        Indicates the status of the document download.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>

        :param status: The status of this Document.
        :type status: str
        """

        self._status = status
