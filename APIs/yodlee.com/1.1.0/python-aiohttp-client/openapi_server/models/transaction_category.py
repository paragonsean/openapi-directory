# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.detail_category import DetailCategory
from openapi_server import util


class TransactionCategory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, classification: str=None, default_category_name: str=None, default_high_level_category_name: str=None, detail_category: List[DetailCategory]=None, high_level_category_id: int=None, high_level_category_name: str=None, id: int=None, source: str=None, type: str=None):
        """TransactionCategory - a model defined in OpenAPI

        :param category: The category of this TransactionCategory.
        :param classification: The classification of this TransactionCategory.
        :param default_category_name: The default_category_name of this TransactionCategory.
        :param default_high_level_category_name: The default_high_level_category_name of this TransactionCategory.
        :param detail_category: The detail_category of this TransactionCategory.
        :param high_level_category_id: The high_level_category_id of this TransactionCategory.
        :param high_level_category_name: The high_level_category_name of this TransactionCategory.
        :param id: The id of this TransactionCategory.
        :param source: The source of this TransactionCategory.
        :param type: The type of this TransactionCategory.
        """
        self.openapi_types = {
            'category': str,
            'classification': str,
            'default_category_name': str,
            'default_high_level_category_name': str,
            'detail_category': List[DetailCategory],
            'high_level_category_id': int,
            'high_level_category_name': str,
            'id': int,
            'source': str,
            'type': str
        }

        self.attribute_map = {
            'category': 'category',
            'classification': 'classification',
            'default_category_name': 'defaultCategoryName',
            'default_high_level_category_name': 'defaultHighLevelCategoryName',
            'detail_category': 'detailCategory',
            'high_level_category_id': 'highLevelCategoryId',
            'high_level_category_name': 'highLevelCategoryName',
            'id': 'id',
            'source': 'source',
            'type': 'type'
        }

        self._category = category
        self._classification = classification
        self._default_category_name = default_category_name
        self._default_high_level_category_name = default_high_level_category_name
        self._detail_category = detail_category
        self._high_level_category_id = high_level_category_id
        self._high_level_category_name = high_level_category_name
        self._id = id
        self._source = source
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactionCategory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransactionCategory of this TransactionCategory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this TransactionCategory.

        The name of the category.<br><b>Note</b>: Transaction categorization is one of the core features offered by Yodlee and the categories are assigned to the transactions by the system. Transactions can be clubbed together by the category that is assigned to them.  <br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :return: The category of this TransactionCategory.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this TransactionCategory.

        The name of the category.<br><b>Note</b>: Transaction categorization is one of the core features offered by Yodlee and the categories are assigned to the transactions by the system. Transactions can be clubbed together by the category that is assigned to them.  <br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :param category: The category of this TransactionCategory.
        :type category: str
        """

        self._category = category

    @property
    def classification(self):
        """Gets the classification of this TransactionCategory.

        Category Classification.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>

        :return: The classification of this TransactionCategory.
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this TransactionCategory.

        Category Classification.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>

        :param classification: The classification of this TransactionCategory.
        :type classification: str
        """
        allowed_values = ["PERSONAL", "BUSINESS"]  # noqa: E501
        if classification not in allowed_values:
            raise ValueError(
                "Invalid value for `classification` ({0}), must be one of {1}"
                .format(classification, allowed_values)
            )

        self._classification = classification

    @property
    def default_category_name(self):
        """Gets the default_category_name of this TransactionCategory.

        A attribute which will always hold the first value(initial name) of Yodlee defined category attribute.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>

        :return: The default_category_name of this TransactionCategory.
        :rtype: str
        """
        return self._default_category_name

    @default_category_name.setter
    def default_category_name(self, default_category_name):
        """Sets the default_category_name of this TransactionCategory.

        A attribute which will always hold the first value(initial name) of Yodlee defined category attribute.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>

        :param default_category_name: The default_category_name of this TransactionCategory.
        :type default_category_name: str
        """

        self._default_category_name = default_category_name

    @property
    def default_high_level_category_name(self):
        """Gets the default_high_level_category_name of this TransactionCategory.

        A attribute which will always hold the first value(initial name) of Yodlee defined highLevelCategoryName attribute.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>

        :return: The default_high_level_category_name of this TransactionCategory.
        :rtype: str
        """
        return self._default_high_level_category_name

    @default_high_level_category_name.setter
    def default_high_level_category_name(self, default_high_level_category_name):
        """Sets the default_high_level_category_name of this TransactionCategory.

        A attribute which will always hold the first value(initial name) of Yodlee defined highLevelCategoryName attribute.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>

        :param default_high_level_category_name: The default_high_level_category_name of this TransactionCategory.
        :type default_high_level_category_name: str
        """

        self._default_high_level_category_name = default_high_level_category_name

    @property
    def detail_category(self):
        """Gets the detail_category of this TransactionCategory.

        Entity that provides detail category attributes<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :return: The detail_category of this TransactionCategory.
        :rtype: List[DetailCategory]
        """
        return self._detail_category

    @detail_category.setter
    def detail_category(self, detail_category):
        """Sets the detail_category of this TransactionCategory.

        Entity that provides detail category attributes<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :param detail_category: The detail_category of this TransactionCategory.
        :type detail_category: List[DetailCategory]
        """

        self._detail_category = detail_category

    @property
    def high_level_category_id(self):
        """Gets the high_level_category_id of this TransactionCategory.

        The unique identifier of the high level category.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :return: The high_level_category_id of this TransactionCategory.
        :rtype: int
        """
        return self._high_level_category_id

    @high_level_category_id.setter
    def high_level_category_id(self, high_level_category_id):
        """Sets the high_level_category_id of this TransactionCategory.

        The unique identifier of the high level category.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :param high_level_category_id: The high_level_category_id of this TransactionCategory.
        :type high_level_category_id: int
        """

        self._high_level_category_id = high_level_category_id

    @property
    def high_level_category_name(self):
        """Gets the high_level_category_name of this TransactionCategory.

        The name of the high level category. A group of similar transaction categories are clubbed together to form a high-level category.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :return: The high_level_category_name of this TransactionCategory.
        :rtype: str
        """
        return self._high_level_category_name

    @high_level_category_name.setter
    def high_level_category_name(self, high_level_category_name):
        """Sets the high_level_category_name of this TransactionCategory.

        The name of the high level category. A group of similar transaction categories are clubbed together to form a high-level category.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :param high_level_category_name: The high_level_category_name of this TransactionCategory.
        :type high_level_category_name: str
        """

        self._high_level_category_name = high_level_category_name

    @property
    def id(self):
        """Gets the id of this TransactionCategory.

        Unique identifier of the category.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :return: The id of this TransactionCategory.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransactionCategory.

        Unique identifier of the category.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :param id: The id of this TransactionCategory.
        :type id: int
        """

        self._id = id

    @property
    def source(self):
        """Gets the source of this TransactionCategory.

        Source used to identify whether the transaction category is user defined category or system created category.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>

        :return: The source of this TransactionCategory.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this TransactionCategory.

        Source used to identify whether the transaction category is user defined category or system created category.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>

        :param source: The source of this TransactionCategory.
        :type source: str
        """
        allowed_values = ["SYSTEM", "USER"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def type(self):
        """Gets the type of this TransactionCategory.

        Transaction categories and high-level categories are further mapped to five transaction category types. Customers, based on their needs can either use the transaction categories, the high-level categories, or the transaction category types. <br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>

        :return: The type of this TransactionCategory.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TransactionCategory.

        Transaction categories and high-level categories are further mapped to five transaction category types. Customers, based on their needs can either use the transaction categories, the high-level categories, or the transaction category types. <br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>

        :param type: The type of this TransactionCategory.
        :type type: str
        """
        allowed_values = ["TRANSFER", "DEFERRED_COMPENSATION", "UNCATEGORIZE", "INCOME", "EXPENSE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
