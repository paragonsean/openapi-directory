# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transaction_days import TransactionDays
from openapi_server import util


class ContainerAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bank: TransactionDays=None, creditcard: TransactionDays=None, insurance: TransactionDays=None, investment: TransactionDays=None, loan: TransactionDays=None):
        """ContainerAttributes - a model defined in OpenAPI

        :param bank: The bank of this ContainerAttributes.
        :param creditcard: The creditcard of this ContainerAttributes.
        :param insurance: The insurance of this ContainerAttributes.
        :param investment: The investment of this ContainerAttributes.
        :param loan: The loan of this ContainerAttributes.
        """
        self.openapi_types = {
            'bank': TransactionDays,
            'creditcard': TransactionDays,
            'insurance': TransactionDays,
            'investment': TransactionDays,
            'loan': TransactionDays
        }

        self.attribute_map = {
            'bank': 'BANK',
            'creditcard': 'CREDITCARD',
            'insurance': 'INSURANCE',
            'investment': 'INVESTMENT',
            'loan': 'LOAN'
        }

        self._bank = bank
        self._creditcard = creditcard
        self._insurance = insurance
        self._investment = investment
        self._loan = loan

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerAttributes of this ContainerAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bank(self):
        """Gets the bank of this ContainerAttributes.


        :return: The bank of this ContainerAttributes.
        :rtype: TransactionDays
        """
        return self._bank

    @bank.setter
    def bank(self, bank):
        """Sets the bank of this ContainerAttributes.


        :param bank: The bank of this ContainerAttributes.
        :type bank: TransactionDays
        """

        self._bank = bank

    @property
    def creditcard(self):
        """Gets the creditcard of this ContainerAttributes.


        :return: The creditcard of this ContainerAttributes.
        :rtype: TransactionDays
        """
        return self._creditcard

    @creditcard.setter
    def creditcard(self, creditcard):
        """Sets the creditcard of this ContainerAttributes.


        :param creditcard: The creditcard of this ContainerAttributes.
        :type creditcard: TransactionDays
        """

        self._creditcard = creditcard

    @property
    def insurance(self):
        """Gets the insurance of this ContainerAttributes.


        :return: The insurance of this ContainerAttributes.
        :rtype: TransactionDays
        """
        return self._insurance

    @insurance.setter
    def insurance(self, insurance):
        """Sets the insurance of this ContainerAttributes.


        :param insurance: The insurance of this ContainerAttributes.
        :type insurance: TransactionDays
        """

        self._insurance = insurance

    @property
    def investment(self):
        """Gets the investment of this ContainerAttributes.


        :return: The investment of this ContainerAttributes.
        :rtype: TransactionDays
        """
        return self._investment

    @investment.setter
    def investment(self, investment):
        """Sets the investment of this ContainerAttributes.


        :param investment: The investment of this ContainerAttributes.
        :type investment: TransactionDays
        """

        self._investment = investment

    @property
    def loan(self):
        """Gets the loan of this ContainerAttributes.


        :return: The loan of this ContainerAttributes.
        :rtype: TransactionDays
        """
        return self._loan

    @loan.setter
    def loan(self, loan):
        """Sets the loan of this ContainerAttributes.


        :param loan: The loan of this ContainerAttributes.
        :type loan: TransactionDays
        """

        self._loan = loan
