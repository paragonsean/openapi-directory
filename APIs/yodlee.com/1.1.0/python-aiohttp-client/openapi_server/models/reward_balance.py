# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RewardBalance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance: float=None, balance_to_level: str=None, balance_to_reward: str=None, balance_type: str=None, description: str=None, expiry_date: str=None, units: str=None):
        """RewardBalance - a model defined in OpenAPI

        :param balance: The balance of this RewardBalance.
        :param balance_to_level: The balance_to_level of this RewardBalance.
        :param balance_to_reward: The balance_to_reward of this RewardBalance.
        :param balance_type: The balance_type of this RewardBalance.
        :param description: The description of this RewardBalance.
        :param expiry_date: The expiry_date of this RewardBalance.
        :param units: The units of this RewardBalance.
        """
        self.openapi_types = {
            'balance': float,
            'balance_to_level': str,
            'balance_to_reward': str,
            'balance_type': str,
            'description': str,
            'expiry_date': str,
            'units': str
        }

        self.attribute_map = {
            'balance': 'balance',
            'balance_to_level': 'balanceToLevel',
            'balance_to_reward': 'balanceToReward',
            'balance_type': 'balanceType',
            'description': 'description',
            'expiry_date': 'expiryDate',
            'units': 'units'
        }

        self._balance = balance
        self._balance_to_level = balance_to_level
        self._balance_to_reward = balance_to_reward
        self._balance_type = balance_type
        self._description = description
        self._expiry_date = expiry_date
        self._units = units

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RewardBalance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RewardBalance of this RewardBalance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance(self):
        """Gets the balance of this RewardBalance.

        The actual reward balance.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The balance of this RewardBalance.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this RewardBalance.

        The actual reward balance.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param balance: The balance of this RewardBalance.
        :type balance: float
        """

        self._balance = balance

    @property
    def balance_to_level(self):
        """Gets the balance_to_level of this RewardBalance.

        The balance required to reach a reward level.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The balance_to_level of this RewardBalance.
        :rtype: str
        """
        return self._balance_to_level

    @balance_to_level.setter
    def balance_to_level(self, balance_to_level):
        """Sets the balance_to_level of this RewardBalance.

        The balance required to reach a reward level.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param balance_to_level: The balance_to_level of this RewardBalance.
        :type balance_to_level: str
        """

        self._balance_to_level = balance_to_level

    @property
    def balance_to_reward(self):
        """Gets the balance_to_reward of this RewardBalance.

        The balance required to qualify for a reward such as retaining membership, business reward, etc.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The balance_to_reward of this RewardBalance.
        :rtype: str
        """
        return self._balance_to_reward

    @balance_to_reward.setter
    def balance_to_reward(self, balance_to_reward):
        """Sets the balance_to_reward of this RewardBalance.

        The balance required to qualify for a reward such as retaining membership, business reward, etc.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param balance_to_reward: The balance_to_reward of this RewardBalance.
        :type balance_to_reward: str
        """

        self._balance_to_reward = balance_to_reward

    @property
    def balance_type(self):
        """Gets the balance_type of this RewardBalance.

        The type of reward balance.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :return: The balance_type of this RewardBalance.
        :rtype: str
        """
        return self._balance_type

    @balance_type.setter
    def balance_type(self, balance_type):
        """Sets the balance_type of this RewardBalance.

        The type of reward balance.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :param balance_type: The balance_type of this RewardBalance.
        :type balance_type: str
        """
        allowed_values = ["EXPIRING_BALANCE", "BALANCE_TO_LEVEL", "BALANCE_TO_REWARD", "BALANCE", "TOTAL_BALANCE"]  # noqa: E501
        if balance_type not in allowed_values:
            raise ValueError(
                "Invalid value for `balance_type` ({0}), must be one of {1}"
                .format(balance_type, allowed_values)
            )

        self._balance_type = balance_type

    @property
    def description(self):
        """Gets the description of this RewardBalance.

        The description for the reward balance as available at provider source.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The description of this RewardBalance.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RewardBalance.

        The description for the reward balance as available at provider source.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param description: The description of this RewardBalance.
        :type description: str
        """

        self._description = description

    @property
    def expiry_date(self):
        """Gets the expiry_date of this RewardBalance.

        The date on which the balance expires.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The expiry_date of this RewardBalance.
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this RewardBalance.

        The date on which the balance expires.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param expiry_date: The expiry_date of this RewardBalance.
        :type expiry_date: str
        """

        self._expiry_date = expiry_date

    @property
    def units(self):
        """Gets the units of this RewardBalance.

        Unit of reward balance - miles, points, segments, dollars, credits.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The units of this RewardBalance.
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this RewardBalance.

        Unit of reward balance - miles, points, segments, dollars, credits.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param units: The units of this RewardBalance.
        :type units: str
        """

        self._units = units
