# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StockExchangeDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_code: str=None, currency_code: str=None, exchange_code: str=None, symbol: str=None):
        """StockExchangeDetail - a model defined in OpenAPI

        :param country_code: The country_code of this StockExchangeDetail.
        :param currency_code: The currency_code of this StockExchangeDetail.
        :param exchange_code: The exchange_code of this StockExchangeDetail.
        :param symbol: The symbol of this StockExchangeDetail.
        """
        self.openapi_types = {
            'country_code': str,
            'currency_code': str,
            'exchange_code': str,
            'symbol': str
        }

        self.attribute_map = {
            'country_code': 'countryCode',
            'currency_code': 'currencyCode',
            'exchange_code': 'exchangeCode',
            'symbol': 'symbol'
        }

        self._country_code = country_code
        self._currency_code = currency_code
        self._exchange_code = exchange_code
        self._symbol = symbol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StockExchangeDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StockExchangeDetail of this StockExchangeDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_code(self):
        """Gets the country_code of this StockExchangeDetail.

        Country codes are geocodes developed to represent countries and dependent areas.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The country_code of this StockExchangeDetail.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this StockExchangeDetail.

        Country codes are geocodes developed to represent countries and dependent areas.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param country_code: The country_code of this StockExchangeDetail.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def currency_code(self):
        """Gets the currency_code of this StockExchangeDetail.

        ISO codes of currency.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The currency_code of this StockExchangeDetail.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this StockExchangeDetail.

        ISO codes of currency.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param currency_code: The currency_code of this StockExchangeDetail.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def exchange_code(self):
        """Gets the exchange_code of this StockExchangeDetail.

        An Exchange code is a four-character code used to identify stock markets and other trading exchanges within global trading.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The exchange_code of this StockExchangeDetail.
        :rtype: str
        """
        return self._exchange_code

    @exchange_code.setter
    def exchange_code(self, exchange_code):
        """Sets the exchange_code of this StockExchangeDetail.

        An Exchange code is a four-character code used to identify stock markets and other trading exchanges within global trading.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param exchange_code: The exchange_code of this StockExchangeDetail.
        :type exchange_code: str
        """

        self._exchange_code = exchange_code

    @property
    def symbol(self):
        """Gets the symbol of this StockExchangeDetail.

        Ticker symbol representing particular securities listed on an exchange.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The symbol of this StockExchangeDetail.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this StockExchangeDetail.

        Ticker symbol representing particular securities listed on an exchange.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param symbol: The symbol of this StockExchangeDetail.
        :type symbol: str
        """

        self._symbol = symbol
