# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address1: str=None, address2: str=None, address3: str=None, city: str=None, country: str=None, state: str=None, zip: str=None):
        """UserAddress - a model defined in OpenAPI

        :param address1: The address1 of this UserAddress.
        :param address2: The address2 of this UserAddress.
        :param address3: The address3 of this UserAddress.
        :param city: The city of this UserAddress.
        :param country: The country of this UserAddress.
        :param state: The state of this UserAddress.
        :param zip: The zip of this UserAddress.
        """
        self.openapi_types = {
            'address1': str,
            'address2': str,
            'address3': str,
            'city': str,
            'country': str,
            'state': str,
            'zip': str
        }

        self.attribute_map = {
            'address1': 'address1',
            'address2': 'address2',
            'address3': 'address3',
            'city': 'city',
            'country': 'country',
            'state': 'state',
            'zip': 'zip'
        }

        self._address1 = address1
        self._address2 = address2
        self._address3 = address3
        self._city = city
        self._country = country
        self._state = state
        self._zip = zip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserAddress of this UserAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address1(self):
        """Gets the address1 of this UserAddress.


        :return: The address1 of this UserAddress.
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this UserAddress.


        :param address1: The address1 of this UserAddress.
        :type address1: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this UserAddress.


        :return: The address2 of this UserAddress.
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this UserAddress.


        :param address2: The address2 of this UserAddress.
        :type address2: str
        """

        self._address2 = address2

    @property
    def address3(self):
        """Gets the address3 of this UserAddress.


        :return: The address3 of this UserAddress.
        :rtype: str
        """
        return self._address3

    @address3.setter
    def address3(self, address3):
        """Sets the address3 of this UserAddress.


        :param address3: The address3 of this UserAddress.
        :type address3: str
        """

        self._address3 = address3

    @property
    def city(self):
        """Gets the city of this UserAddress.


        :return: The city of this UserAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this UserAddress.


        :param city: The city of this UserAddress.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this UserAddress.


        :return: The country of this UserAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this UserAddress.


        :param country: The country of this UserAddress.
        :type country: str
        """

        self._country = country

    @property
    def state(self):
        """Gets the state of this UserAddress.


        :return: The state of this UserAddress.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this UserAddress.


        :param state: The state of this UserAddress.
        :type state: str
        """

        self._state = state

    @property
    def zip(self):
        """Gets the zip of this UserAddress.


        :return: The zip of this UserAddress.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this UserAddress.


        :param zip: The zip of this UserAddress.
        :type zip: str
        """

        self._zip = zip
