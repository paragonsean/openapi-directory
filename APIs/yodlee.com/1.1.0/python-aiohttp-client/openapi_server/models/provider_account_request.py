# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_field import ModelField
from openapi_server.models.provider_account_preferences import ProviderAccountPreferences
from openapi_server.models.providers_dataset import ProvidersDataset
from openapi_server import util


class ProviderAccountRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation_source: str=None, consent_id: int=None, dataset: List[ProvidersDataset]=None, dataset_name: List[str]=None, _field: List[ModelField]=None, preferences: ProviderAccountPreferences=None):
        """ProviderAccountRequest - a model defined in OpenAPI

        :param aggregation_source: The aggregation_source of this ProviderAccountRequest.
        :param consent_id: The consent_id of this ProviderAccountRequest.
        :param dataset: The dataset of this ProviderAccountRequest.
        :param dataset_name: The dataset_name of this ProviderAccountRequest.
        :param _field: The _field of this ProviderAccountRequest.
        :param preferences: The preferences of this ProviderAccountRequest.
        """
        self.openapi_types = {
            'aggregation_source': str,
            'consent_id': int,
            'dataset': List[ProvidersDataset],
            'dataset_name': List[str],
            '_field': List[ModelField],
            'preferences': ProviderAccountPreferences
        }

        self.attribute_map = {
            'aggregation_source': 'aggregationSource',
            'consent_id': 'consentId',
            'dataset': 'dataset',
            'dataset_name': 'datasetName',
            '_field': 'field',
            'preferences': 'preferences'
        }

        self._aggregation_source = aggregation_source
        self._consent_id = consent_id
        self._dataset = dataset
        self._dataset_name = dataset_name
        self.__field = _field
        self._preferences = preferences

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProviderAccountRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProviderAccountRequest of this ProviderAccountRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation_source(self):
        """Gets the aggregation_source of this ProviderAccountRequest.


        :return: The aggregation_source of this ProviderAccountRequest.
        :rtype: str
        """
        return self._aggregation_source

    @aggregation_source.setter
    def aggregation_source(self, aggregation_source):
        """Sets the aggregation_source of this ProviderAccountRequest.


        :param aggregation_source: The aggregation_source of this ProviderAccountRequest.
        :type aggregation_source: str
        """
        allowed_values = ["SYSTEM", "USER"]  # noqa: E501
        if aggregation_source not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregation_source` ({0}), must be one of {1}"
                .format(aggregation_source, allowed_values)
            )

        self._aggregation_source = aggregation_source

    @property
    def consent_id(self):
        """Gets the consent_id of this ProviderAccountRequest.

        Consent Id generated for the request through POST Consent.<br><br><b>Endpoints</b>:<ul><li>POST Provider Account</li><li>PUT Provider Account</li></ul>

        :return: The consent_id of this ProviderAccountRequest.
        :rtype: int
        """
        return self._consent_id

    @consent_id.setter
    def consent_id(self, consent_id):
        """Sets the consent_id of this ProviderAccountRequest.

        Consent Id generated for the request through POST Consent.<br><br><b>Endpoints</b>:<ul><li>POST Provider Account</li><li>PUT Provider Account</li></ul>

        :param consent_id: The consent_id of this ProviderAccountRequest.
        :type consent_id: int
        """

        self._consent_id = consent_id

    @property
    def dataset(self):
        """Gets the dataset of this ProviderAccountRequest.


        :return: The dataset of this ProviderAccountRequest.
        :rtype: List[ProvidersDataset]
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this ProviderAccountRequest.


        :param dataset: The dataset of this ProviderAccountRequest.
        :type dataset: List[ProvidersDataset]
        """

        self._dataset = dataset

    @property
    def dataset_name(self):
        """Gets the dataset_name of this ProviderAccountRequest.


        :return: The dataset_name of this ProviderAccountRequest.
        :rtype: List[str]
        """
        return self._dataset_name

    @dataset_name.setter
    def dataset_name(self, dataset_name):
        """Sets the dataset_name of this ProviderAccountRequest.


        :param dataset_name: The dataset_name of this ProviderAccountRequest.
        :type dataset_name: List[str]
        """
        allowed_values = ["BASIC_AGG_DATA", "ADVANCE_AGG_DATA", "ACCT_PROFILE", "DOCUMENT"]  # noqa: E501
        if not set(dataset_name).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `dataset_name` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(dataset_name) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._dataset_name = dataset_name

    @property
    def _field(self):
        """Gets the _field of this ProviderAccountRequest.


        :return: The _field of this ProviderAccountRequest.
        :rtype: List[ModelField]
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this ProviderAccountRequest.


        :param _field: The _field of this ProviderAccountRequest.
        :type _field: List[ModelField]
        """
        if _field is None:
            raise ValueError("Invalid value for `_field`, must not be `None`")

        self.__field = _field

    @property
    def preferences(self):
        """Gets the preferences of this ProviderAccountRequest.


        :return: The preferences of this ProviderAccountRequest.
        :rtype: ProviderAccountPreferences
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences):
        """Sets the preferences of this ProviderAccountRequest.


        :param preferences: The preferences of this ProviderAccountRequest.
        :type preferences: ProviderAccountPreferences
        """

        self._preferences = preferences
