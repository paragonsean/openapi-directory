# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_extracts_account import DataExtractsAccount
from openapi_server.models.data_extracts_holding import DataExtractsHolding
from openapi_server.models.data_extracts_provider_account import DataExtractsProviderAccount
from openapi_server.models.data_extracts_transaction import DataExtractsTransaction
from openapi_server.models.data_extracts_user import DataExtractsUser
from openapi_server import util


class DataExtractsUserData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: List[DataExtractsAccount]=None, holding: List[DataExtractsHolding]=None, provider_account: List[DataExtractsProviderAccount]=None, total_transactions_count: int=None, transaction: List[DataExtractsTransaction]=None, user: DataExtractsUser=None):
        """DataExtractsUserData - a model defined in OpenAPI

        :param account: The account of this DataExtractsUserData.
        :param holding: The holding of this DataExtractsUserData.
        :param provider_account: The provider_account of this DataExtractsUserData.
        :param total_transactions_count: The total_transactions_count of this DataExtractsUserData.
        :param transaction: The transaction of this DataExtractsUserData.
        :param user: The user of this DataExtractsUserData.
        """
        self.openapi_types = {
            'account': List[DataExtractsAccount],
            'holding': List[DataExtractsHolding],
            'provider_account': List[DataExtractsProviderAccount],
            'total_transactions_count': int,
            'transaction': List[DataExtractsTransaction],
            'user': DataExtractsUser
        }

        self.attribute_map = {
            'account': 'account',
            'holding': 'holding',
            'provider_account': 'providerAccount',
            'total_transactions_count': 'totalTransactionsCount',
            'transaction': 'transaction',
            'user': 'user'
        }

        self._account = account
        self._holding = holding
        self._provider_account = provider_account
        self._total_transactions_count = total_transactions_count
        self._transaction = transaction
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataExtractsUserData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataExtractsUserData of this DataExtractsUserData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this DataExtractsUserData.


        :return: The account of this DataExtractsUserData.
        :rtype: List[DataExtractsAccount]
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this DataExtractsUserData.


        :param account: The account of this DataExtractsUserData.
        :type account: List[DataExtractsAccount]
        """

        self._account = account

    @property
    def holding(self):
        """Gets the holding of this DataExtractsUserData.


        :return: The holding of this DataExtractsUserData.
        :rtype: List[DataExtractsHolding]
        """
        return self._holding

    @holding.setter
    def holding(self, holding):
        """Sets the holding of this DataExtractsUserData.


        :param holding: The holding of this DataExtractsUserData.
        :type holding: List[DataExtractsHolding]
        """

        self._holding = holding

    @property
    def provider_account(self):
        """Gets the provider_account of this DataExtractsUserData.


        :return: The provider_account of this DataExtractsUserData.
        :rtype: List[DataExtractsProviderAccount]
        """
        return self._provider_account

    @provider_account.setter
    def provider_account(self, provider_account):
        """Sets the provider_account of this DataExtractsUserData.


        :param provider_account: The provider_account of this DataExtractsUserData.
        :type provider_account: List[DataExtractsProviderAccount]
        """

        self._provider_account = provider_account

    @property
    def total_transactions_count(self):
        """Gets the total_transactions_count of this DataExtractsUserData.


        :return: The total_transactions_count of this DataExtractsUserData.
        :rtype: int
        """
        return self._total_transactions_count

    @total_transactions_count.setter
    def total_transactions_count(self, total_transactions_count):
        """Sets the total_transactions_count of this DataExtractsUserData.


        :param total_transactions_count: The total_transactions_count of this DataExtractsUserData.
        :type total_transactions_count: int
        """

        self._total_transactions_count = total_transactions_count

    @property
    def transaction(self):
        """Gets the transaction of this DataExtractsUserData.


        :return: The transaction of this DataExtractsUserData.
        :rtype: List[DataExtractsTransaction]
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this DataExtractsUserData.


        :param transaction: The transaction of this DataExtractsUserData.
        :type transaction: List[DataExtractsTransaction]
        """

        self._transaction = transaction

    @property
    def user(self):
        """Gets the user of this DataExtractsUserData.


        :return: The user of this DataExtractsUserData.
        :rtype: DataExtractsUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this DataExtractsUserData.


        :param user: The user of this DataExtractsUserData.
        :type user: DataExtractsUser
        """

        self._user = user
