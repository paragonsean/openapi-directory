# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.option import Option
from openapi_server import util


class ModelField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, image: str=None, is_optional: bool=None, is_value_provided: bool=None, max_length: int=None, min_length: int=None, name: str=None, option: List[Option]=None, prefix: str=None, suffix: str=None, type: str=None, value: str=None, value_editable: str=None):
        """ModelField - a model defined in OpenAPI

        :param id: The id of this ModelField.
        :param image: The image of this ModelField.
        :param is_optional: The is_optional of this ModelField.
        :param is_value_provided: The is_value_provided of this ModelField.
        :param max_length: The max_length of this ModelField.
        :param min_length: The min_length of this ModelField.
        :param name: The name of this ModelField.
        :param option: The option of this ModelField.
        :param prefix: The prefix of this ModelField.
        :param suffix: The suffix of this ModelField.
        :param type: The type of this ModelField.
        :param value: The value of this ModelField.
        :param value_editable: The value_editable of this ModelField.
        """
        self.openapi_types = {
            'id': str,
            'image': str,
            'is_optional': bool,
            'is_value_provided': bool,
            'max_length': int,
            'min_length': int,
            'name': str,
            'option': List[Option],
            'prefix': str,
            'suffix': str,
            'type': str,
            'value': str,
            'value_editable': str
        }

        self.attribute_map = {
            'id': 'id',
            'image': 'image',
            'is_optional': 'isOptional',
            'is_value_provided': 'isValueProvided',
            'max_length': 'maxLength',
            'min_length': 'minLength',
            'name': 'name',
            'option': 'option',
            'prefix': 'prefix',
            'suffix': 'suffix',
            'type': 'type',
            'value': 'value',
            'value_editable': 'valueEditable'
        }

        self._id = id
        self._image = image
        self._is_optional = is_optional
        self._is_value_provided = is_value_provided
        self._max_length = max_length
        self._min_length = min_length
        self._name = name
        self._option = option
        self._prefix = prefix
        self._suffix = suffix
        self._type = type
        self._value = value
        self._value_editable = value_editable

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Field of this ModelField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ModelField.

        Identifier for the field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>

        :return: The id of this ModelField.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelField.

        Identifier for the field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>

        :param id: The id of this ModelField.
        :type id: str
        """
        if id is not None and len(id) > 2147483647:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `2147483647`")
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")

        self._id = id

    @property
    def image(self):
        """Gets the image of this ModelField.

        Image displayed at the endsite.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li></ul>

        :return: The image of this ModelField.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ModelField.

        Image displayed at the endsite.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li></ul>

        :param image: The image of this ModelField.
        :type image: str
        """

        self._image = image

    @property
    def is_optional(self):
        """Gets the is_optional of this ModelField.

        Indicates if a field is an optional field or a mandatory field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>

        :return: The is_optional of this ModelField.
        :rtype: bool
        """
        return self._is_optional

    @is_optional.setter
    def is_optional(self, is_optional):
        """Sets the is_optional of this ModelField.

        Indicates if a field is an optional field or a mandatory field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>

        :param is_optional: The is_optional of this ModelField.
        :type is_optional: bool
        """

        self._is_optional = is_optional

    @property
    def is_value_provided(self):
        """Gets the is_value_provided of this ModelField.

        Indicates that the answer to the security question already exists in the Yodlee system.Persuading the user to provide the answer to the security question again during the edit-credential flow can be avoided.<br><br><br><b>Endpoints</b>:<ul><li>GET providerAccounts?include=questions</li><li>GET providerAccounts/{providerAccountId}? include=questions</li></ul>

        :return: The is_value_provided of this ModelField.
        :rtype: bool
        """
        return self._is_value_provided

    @is_value_provided.setter
    def is_value_provided(self, is_value_provided):
        """Sets the is_value_provided of this ModelField.

        Indicates that the answer to the security question already exists in the Yodlee system.Persuading the user to provide the answer to the security question again during the edit-credential flow can be avoided.<br><br><br><b>Endpoints</b>:<ul><li>GET providerAccounts?include=questions</li><li>GET providerAccounts/{providerAccountId}? include=questions</li></ul>

        :param is_value_provided: The is_value_provided of this ModelField.
        :type is_value_provided: bool
        """

        self._is_value_provided = is_value_provided

    @property
    def max_length(self):
        """Gets the max_length of this ModelField.

        The maximum length of the login form field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>

        :return: The max_length of this ModelField.
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this ModelField.

        The maximum length of the login form field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>

        :param max_length: The max_length of this ModelField.
        :type max_length: int
        """

        self._max_length = max_length

    @property
    def min_length(self):
        """Gets the min_length of this ModelField.

        The minimum length of the login form field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>

        :return: The min_length of this ModelField.
        :rtype: int
        """
        return self._min_length

    @min_length.setter
    def min_length(self, min_length):
        """Sets the min_length of this ModelField.

        The minimum length of the login form field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>

        :param min_length: The min_length of this ModelField.
        :type min_length: int
        """

        self._min_length = min_length

    @property
    def name(self):
        """Gets the name of this ModelField.

        Name of the field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>

        :return: The name of this ModelField.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelField.

        Name of the field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>

        :param name: The name of this ModelField.
        :type name: str
        """

        self._name = name

    @property
    def option(self):
        """Gets the option of this ModelField.

        Provides the different values that are available for the user to choose. This field is applicable for drop-down or radio field types.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>

        :return: The option of this ModelField.
        :rtype: List[Option]
        """
        return self._option

    @option.setter
    def option(self, option):
        """Sets the option of this ModelField.

        Provides the different values that are available for the user to choose. This field is applicable for drop-down or radio field types.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>

        :param option: The option of this ModelField.
        :type option: List[Option]
        """

        self._option = option

    @property
    def prefix(self):
        """Gets the prefix of this ModelField.

        The prefix string that has to be displayed before the field value.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>

        :return: The prefix of this ModelField.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this ModelField.

        The prefix string that has to be displayed before the field value.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>

        :param prefix: The prefix of this ModelField.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def suffix(self):
        """Gets the suffix of this ModelField.

        The suffix string that has to be displayed next to the field value.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>

        :return: The suffix of this ModelField.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this ModelField.

        The suffix string that has to be displayed next to the field value.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>

        :param suffix: The suffix of this ModelField.
        :type suffix: str
        """

        self._suffix = suffix

    @property
    def type(self):
        """Gets the type of this ModelField.

        This indicates the display type of the field. For example, text box, image, etc. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul><b>Applicable Values</b><br>

        :return: The type of this ModelField.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelField.

        This indicates the display type of the field. For example, text box, image, etc. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul><b>Applicable Values</b><br>

        :param type: The type of this ModelField.
        :type type: str
        """
        allowed_values = ["text", "password", "option", "checkbox", "radio", "image"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this ModelField.

        Value expected from the user for the field. This will be blank and is expected to be filled and sent back when submitting the login or MFA information.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>

        :return: The value of this ModelField.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ModelField.

        Value expected from the user for the field. This will be blank and is expected to be filled and sent back when submitting the login or MFA information.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>

        :param value: The value of this ModelField.
        :type value: str
        """

        self._value = value

    @property
    def value_editable(self):
        """Gets the value_editable of this ModelField.

        Indicates whether the field is editable or not.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>

        :return: The value_editable of this ModelField.
        :rtype: str
        """
        return self._value_editable

    @value_editable.setter
    def value_editable(self, value_editable):
        """Sets the value_editable of this ModelField.

        Indicates whether the field is editable or not.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>

        :param value_editable: The value_editable of this ModelField.
        :type value_editable: str
        """

        self._value_editable = value_editable
