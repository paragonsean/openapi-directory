# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class Statement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: int=None, amount_due: Money=None, apr: float=None, billing_period_end: str=None, billing_period_start: str=None, cash_advance: Money=None, cash_apr: float=None, due_date: str=None, id: int=None, interest_amount: Money=None, is_latest: bool=None, last_payment_amount: Money=None, last_payment_date: str=None, last_updated: str=None, loan_balance: Money=None, minimum_payment: Money=None, new_charges: Money=None, principal_amount: Money=None, statement_date: str=None):
        """Statement - a model defined in OpenAPI

        :param account_id: The account_id of this Statement.
        :param amount_due: The amount_due of this Statement.
        :param apr: The apr of this Statement.
        :param billing_period_end: The billing_period_end of this Statement.
        :param billing_period_start: The billing_period_start of this Statement.
        :param cash_advance: The cash_advance of this Statement.
        :param cash_apr: The cash_apr of this Statement.
        :param due_date: The due_date of this Statement.
        :param id: The id of this Statement.
        :param interest_amount: The interest_amount of this Statement.
        :param is_latest: The is_latest of this Statement.
        :param last_payment_amount: The last_payment_amount of this Statement.
        :param last_payment_date: The last_payment_date of this Statement.
        :param last_updated: The last_updated of this Statement.
        :param loan_balance: The loan_balance of this Statement.
        :param minimum_payment: The minimum_payment of this Statement.
        :param new_charges: The new_charges of this Statement.
        :param principal_amount: The principal_amount of this Statement.
        :param statement_date: The statement_date of this Statement.
        """
        self.openapi_types = {
            'account_id': int,
            'amount_due': Money,
            'apr': float,
            'billing_period_end': str,
            'billing_period_start': str,
            'cash_advance': Money,
            'cash_apr': float,
            'due_date': str,
            'id': int,
            'interest_amount': Money,
            'is_latest': bool,
            'last_payment_amount': Money,
            'last_payment_date': str,
            'last_updated': str,
            'loan_balance': Money,
            'minimum_payment': Money,
            'new_charges': Money,
            'principal_amount': Money,
            'statement_date': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'amount_due': 'amountDue',
            'apr': 'apr',
            'billing_period_end': 'billingPeriodEnd',
            'billing_period_start': 'billingPeriodStart',
            'cash_advance': 'cashAdvance',
            'cash_apr': 'cashApr',
            'due_date': 'dueDate',
            'id': 'id',
            'interest_amount': 'interestAmount',
            'is_latest': 'isLatest',
            'last_payment_amount': 'lastPaymentAmount',
            'last_payment_date': 'lastPaymentDate',
            'last_updated': 'lastUpdated',
            'loan_balance': 'loanBalance',
            'minimum_payment': 'minimumPayment',
            'new_charges': 'newCharges',
            'principal_amount': 'principalAmount',
            'statement_date': 'statementDate'
        }

        self._account_id = account_id
        self._amount_due = amount_due
        self._apr = apr
        self._billing_period_end = billing_period_end
        self._billing_period_start = billing_period_start
        self._cash_advance = cash_advance
        self._cash_apr = cash_apr
        self._due_date = due_date
        self._id = id
        self._interest_amount = interest_amount
        self._is_latest = is_latest
        self._last_payment_amount = last_payment_amount
        self._last_payment_date = last_payment_date
        self._last_updated = last_updated
        self._loan_balance = loan_balance
        self._minimum_payment = minimum_payment
        self._new_charges = new_charges
        self._principal_amount = principal_amount
        self._statement_date = statement_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Statement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Statement of this Statement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Statement.

        Account to which the statement belongs to.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>

        :return: The account_id of this Statement.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Statement.

        Account to which the statement belongs to.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>

        :param account_id: The account_id of this Statement.
        :type account_id: int
        """

        self._account_id = account_id

    @property
    def amount_due(self):
        """Gets the amount_due of this Statement.


        :return: The amount_due of this Statement.
        :rtype: Money
        """
        return self._amount_due

    @amount_due.setter
    def amount_due(self, amount_due):
        """Sets the amount_due of this Statement.


        :param amount_due: The amount_due of this Statement.
        :type amount_due: Money
        """

        self._amount_due = amount_due

    @property
    def apr(self):
        """Gets the apr of this Statement.

        The APR applied to the balance on the credit card account, as available in the statement.<br><b>Note:</b> In case of variable APR, the APR available on the statement might differ from the APR available at the account-level.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>

        :return: The apr of this Statement.
        :rtype: float
        """
        return self._apr

    @apr.setter
    def apr(self, apr):
        """Sets the apr of this Statement.

        The APR applied to the balance on the credit card account, as available in the statement.<br><b>Note:</b> In case of variable APR, the APR available on the statement might differ from the APR available at the account-level.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>

        :param apr: The apr of this Statement.
        :type apr: float
        """

        self._apr = apr

    @property
    def billing_period_end(self):
        """Gets the billing_period_end of this Statement.

        The end date of the statement period.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>

        :return: The billing_period_end of this Statement.
        :rtype: str
        """
        return self._billing_period_end

    @billing_period_end.setter
    def billing_period_end(self, billing_period_end):
        """Sets the billing_period_end of this Statement.

        The end date of the statement period.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>

        :param billing_period_end: The billing_period_end of this Statement.
        :type billing_period_end: str
        """

        self._billing_period_end = billing_period_end

    @property
    def billing_period_start(self):
        """Gets the billing_period_start of this Statement.

        The start date of the statement period.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>

        :return: The billing_period_start of this Statement.
        :rtype: str
        """
        return self._billing_period_start

    @billing_period_start.setter
    def billing_period_start(self, billing_period_start):
        """Sets the billing_period_start of this Statement.

        The start date of the statement period.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>

        :param billing_period_start: The billing_period_start of this Statement.
        :type billing_period_start: str
        """

        self._billing_period_start = billing_period_start

    @property
    def cash_advance(self):
        """Gets the cash_advance of this Statement.


        :return: The cash_advance of this Statement.
        :rtype: Money
        """
        return self._cash_advance

    @cash_advance.setter
    def cash_advance(self, cash_advance):
        """Sets the cash_advance of this Statement.


        :param cash_advance: The cash_advance of this Statement.
        :type cash_advance: Money
        """

        self._cash_advance = cash_advance

    @property
    def cash_apr(self):
        """Gets the cash_apr of this Statement.

        The APR applicable to cash withdrawals on the credit card account.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>

        :return: The cash_apr of this Statement.
        :rtype: float
        """
        return self._cash_apr

    @cash_apr.setter
    def cash_apr(self, cash_apr):
        """Sets the cash_apr of this Statement.

        The APR applicable to cash withdrawals on the credit card account.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>

        :param cash_apr: The cash_apr of this Statement.
        :type cash_apr: float
        """

        self._cash_apr = cash_apr

    @property
    def due_date(self):
        """Gets the due_date of this Statement.

        The date by when the minimum payment is due to be paid.<br><b>Note:</b> The due date that appears in the statement may differ from the due date at the account-level.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>

        :return: The due_date of this Statement.
        :rtype: str
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Statement.

        The date by when the minimum payment is due to be paid.<br><b>Note:</b> The due date that appears in the statement may differ from the due date at the account-level.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>

        :param due_date: The due_date of this Statement.
        :type due_date: str
        """

        self._due_date = due_date

    @property
    def id(self):
        """Gets the id of this Statement.

        Unique identifier for the statement.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>

        :return: The id of this Statement.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Statement.

        Unique identifier for the statement.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>

        :param id: The id of this Statement.
        :type id: int
        """

        self._id = id

    @property
    def interest_amount(self):
        """Gets the interest_amount of this Statement.


        :return: The interest_amount of this Statement.
        :rtype: Money
        """
        return self._interest_amount

    @interest_amount.setter
    def interest_amount(self, interest_amount):
        """Sets the interest_amount of this Statement.


        :param interest_amount: The interest_amount of this Statement.
        :type interest_amount: Money
        """

        self._interest_amount = interest_amount

    @property
    def is_latest(self):
        """Gets the is_latest of this Statement.

        The field is set to true if the statement is the latest generated statement.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>

        :return: The is_latest of this Statement.
        :rtype: bool
        """
        return self._is_latest

    @is_latest.setter
    def is_latest(self, is_latest):
        """Sets the is_latest of this Statement.

        The field is set to true if the statement is the latest generated statement.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>

        :param is_latest: The is_latest of this Statement.
        :type is_latest: bool
        """

        self._is_latest = is_latest

    @property
    def last_payment_amount(self):
        """Gets the last_payment_amount of this Statement.


        :return: The last_payment_amount of this Statement.
        :rtype: Money
        """
        return self._last_payment_amount

    @last_payment_amount.setter
    def last_payment_amount(self, last_payment_amount):
        """Sets the last_payment_amount of this Statement.


        :param last_payment_amount: The last_payment_amount of this Statement.
        :type last_payment_amount: Money
        """

        self._last_payment_amount = last_payment_amount

    @property
    def last_payment_date(self):
        """Gets the last_payment_date of this Statement.

        The date on which the last payment was done during the billing cycle.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>

        :return: The last_payment_date of this Statement.
        :rtype: str
        """
        return self._last_payment_date

    @last_payment_date.setter
    def last_payment_date(self, last_payment_date):
        """Sets the last_payment_date of this Statement.

        The date on which the last payment was done during the billing cycle.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>

        :param last_payment_date: The last_payment_date of this Statement.
        :type last_payment_date: str
        """

        self._last_payment_date = last_payment_date

    @property
    def last_updated(self):
        """Gets the last_updated of this Statement.

        The date when the account was last updated by Yodlee.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>

        :return: The last_updated of this Statement.
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Statement.

        The date when the account was last updated by Yodlee.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>

        :param last_updated: The last_updated of this Statement.
        :type last_updated: str
        """

        self._last_updated = last_updated

    @property
    def loan_balance(self):
        """Gets the loan_balance of this Statement.


        :return: The loan_balance of this Statement.
        :rtype: Money
        """
        return self._loan_balance

    @loan_balance.setter
    def loan_balance(self, loan_balance):
        """Sets the loan_balance of this Statement.


        :param loan_balance: The loan_balance of this Statement.
        :type loan_balance: Money
        """

        self._loan_balance = loan_balance

    @property
    def minimum_payment(self):
        """Gets the minimum_payment of this Statement.


        :return: The minimum_payment of this Statement.
        :rtype: Money
        """
        return self._minimum_payment

    @minimum_payment.setter
    def minimum_payment(self, minimum_payment):
        """Sets the minimum_payment of this Statement.


        :param minimum_payment: The minimum_payment of this Statement.
        :type minimum_payment: Money
        """

        self._minimum_payment = minimum_payment

    @property
    def new_charges(self):
        """Gets the new_charges of this Statement.


        :return: The new_charges of this Statement.
        :rtype: Money
        """
        return self._new_charges

    @new_charges.setter
    def new_charges(self, new_charges):
        """Sets the new_charges of this Statement.


        :param new_charges: The new_charges of this Statement.
        :type new_charges: Money
        """

        self._new_charges = new_charges

    @property
    def principal_amount(self):
        """Gets the principal_amount of this Statement.


        :return: The principal_amount of this Statement.
        :rtype: Money
        """
        return self._principal_amount

    @principal_amount.setter
    def principal_amount(self, principal_amount):
        """Sets the principal_amount of this Statement.


        :param principal_amount: The principal_amount of this Statement.
        :type principal_amount: Money
        """

        self._principal_amount = principal_amount

    @property
    def statement_date(self):
        """Gets the statement_date of this Statement.

        The date on which the statement is generated.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>

        :return: The statement_date of this Statement.
        :rtype: str
        """
        return self._statement_date

    @statement_date.setter
    def statement_date(self, statement_date):
        """Sets the statement_date of this Statement.

        The date on which the statement is generated.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>

        :param statement_date: The statement_date of this Statement.
        :type statement_date: str
        """

        self._statement_date = statement_date
