# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountDataset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_status: str=None, last_update_attempt: str=None, last_updated: str=None, name: str=None, next_update_scheduled: str=None, update_eligibility: str=None):
        """AccountDataset - a model defined in OpenAPI

        :param additional_status: The additional_status of this AccountDataset.
        :param last_update_attempt: The last_update_attempt of this AccountDataset.
        :param last_updated: The last_updated of this AccountDataset.
        :param name: The name of this AccountDataset.
        :param next_update_scheduled: The next_update_scheduled of this AccountDataset.
        :param update_eligibility: The update_eligibility of this AccountDataset.
        """
        self.openapi_types = {
            'additional_status': str,
            'last_update_attempt': str,
            'last_updated': str,
            'name': str,
            'next_update_scheduled': str,
            'update_eligibility': str
        }

        self.attribute_map = {
            'additional_status': 'additionalStatus',
            'last_update_attempt': 'lastUpdateAttempt',
            'last_updated': 'lastUpdated',
            'name': 'name',
            'next_update_scheduled': 'nextUpdateScheduled',
            'update_eligibility': 'updateEligibility'
        }

        self._additional_status = additional_status
        self._last_update_attempt = last_update_attempt
        self._last_updated = last_updated
        self._name = name
        self._next_update_scheduled = next_update_scheduled
        self._update_eligibility = update_eligibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountDataset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountDataset of this AccountDataset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_status(self):
        """Gets the additional_status of this AccountDataset.

        The status of last update attempted for the dataset. <br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul><b>Applicable Values</b><br>

        :return: The additional_status of this AccountDataset.
        :rtype: str
        """
        return self._additional_status

    @additional_status.setter
    def additional_status(self, additional_status):
        """Sets the additional_status of this AccountDataset.

        The status of last update attempted for the dataset. <br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul><b>Applicable Values</b><br>

        :param additional_status: The additional_status of this AccountDataset.
        :type additional_status: str
        """
        allowed_values = ["LOGIN_IN_PROGRESS", "DATA_RETRIEVAL_IN_PROGRESS", "ACCT_SUMMARY_RECEIVED", "AVAILABLE_DATA_RETRIEVED", "PARTIAL_DATA_RETRIEVED", "DATA_RETRIEVAL_FAILED", "DATA_NOT_AVAILABLE", "ACCOUNT_LOCKED", "ADDL_AUTHENTICATION_REQUIRED", "BETA_SITE_DEV_IN_PROGRESS", "CREDENTIALS_UPDATE_NEEDED", "INCORRECT_CREDENTIALS", "PROPERTY_VALUE_NOT_AVAILABLE", "INVALID_ADDL_INFO_PROVIDED", "REQUEST_TIME_OUT", "SITE_BLOCKING_ERROR", "UNEXPECTED_SITE_ERROR", "SITE_NOT_SUPPORTED", "SITE_UNAVAILABLE", "TECH_ERROR", "USER_ACTION_NEEDED_AT_SITE", "SITE_SESSION_INVALIDATED", "NEW_AUTHENTICATION_REQUIRED", "DATASET_NOT_SUPPORTED", "ENROLLMENT_REQUIRED_FOR_DATASET", "CONSENT_REQUIRED", "CONSENT_EXPIRED", "CONSENT_REVOKED", "INCORRECT_OAUTH_TOKEN", "MIGRATION_IN_PROGRESS"]  # noqa: E501
        if additional_status not in allowed_values:
            raise ValueError(
                "Invalid value for `additional_status` ({0}), must be one of {1}"
                .format(additional_status, allowed_values)
            )

        self._additional_status = additional_status

    @property
    def last_update_attempt(self):
        """Gets the last_update_attempt of this AccountDataset.

        Indicate when the last attempt was performed to update the dataset for the given provider account<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>

        :return: The last_update_attempt of this AccountDataset.
        :rtype: str
        """
        return self._last_update_attempt

    @last_update_attempt.setter
    def last_update_attempt(self, last_update_attempt):
        """Sets the last_update_attempt of this AccountDataset.

        Indicate when the last attempt was performed to update the dataset for the given provider account<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>

        :param last_update_attempt: The last_update_attempt of this AccountDataset.
        :type last_update_attempt: str
        """

        self._last_update_attempt = last_update_attempt

    @property
    def last_updated(self):
        """Gets the last_updated of this AccountDataset.

        Indicate when the dataset is last updated successfully for the given provider account.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>

        :return: The last_updated of this AccountDataset.
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this AccountDataset.

        Indicate when the dataset is last updated successfully for the given provider account.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>

        :param last_updated: The last_updated of this AccountDataset.
        :type last_updated: str
        """

        self._last_updated = last_updated

    @property
    def name(self):
        """Gets the name of this AccountDataset.

        The name of the dataset requested from the provider site<br><br><b>Account Type</b>: Manual<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li><li>GET providers</li></ul><b>Applicable Values</b><br>

        :return: The name of this AccountDataset.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountDataset.

        The name of the dataset requested from the provider site<br><br><b>Account Type</b>: Manual<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li><li>GET providers</li></ul><b>Applicable Values</b><br>

        :param name: The name of this AccountDataset.
        :type name: str
        """
        allowed_values = ["BASIC_AGG_DATA", "ADVANCE_AGG_DATA", "ACCT_PROFILE", "DOCUMENT"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def next_update_scheduled(self):
        """Gets the next_update_scheduled of this AccountDataset.

        Indicates when the next attempt to update the dataset is scheduled.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>

        :return: The next_update_scheduled of this AccountDataset.
        :rtype: str
        """
        return self._next_update_scheduled

    @next_update_scheduled.setter
    def next_update_scheduled(self, next_update_scheduled):
        """Sets the next_update_scheduled of this AccountDataset.

        Indicates when the next attempt to update the dataset is scheduled.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>

        :param next_update_scheduled: The next_update_scheduled of this AccountDataset.
        :type next_update_scheduled: str
        """

        self._next_update_scheduled = next_update_scheduled

    @property
    def update_eligibility(self):
        """Gets the update_eligibility of this AccountDataset.

        Indicate whether the dataset is eligible for update or not.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul><b>Applicable Values</b><br>

        :return: The update_eligibility of this AccountDataset.
        :rtype: str
        """
        return self._update_eligibility

    @update_eligibility.setter
    def update_eligibility(self, update_eligibility):
        """Sets the update_eligibility of this AccountDataset.

        Indicate whether the dataset is eligible for update or not.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul><b>Applicable Values</b><br>

        :param update_eligibility: The update_eligibility of this AccountDataset.
        :type update_eligibility: str
        """
        allowed_values = ["ALLOW_UPDATE", "ALLOW_UPDATE_WITH_CREDENTIALS", "DISALLOW_UPDATE"]  # noqa: E501
        if update_eligibility not in allowed_values:
            raise ValueError(
                "Invalid value for `update_eligibility` ({0}), must be one of {1}"
                .format(update_eligibility, allowed_values)
            )

        self._update_eligibility = update_eligibility
