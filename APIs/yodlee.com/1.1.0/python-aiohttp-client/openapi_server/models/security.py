# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stock_exchange_detail import StockExchangeDetail
from openapi_server import util


class Security(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accrual_method: str=None, agency_factor: float=None, call_date: str=None, call_price: float=None, cdsc_fund_flag: bool=None, closed_flag: bool=None, cusip: str=None, description: str=None, federal_taxable: bool=None, firm_eligible: str=None, first_coupon_date: str=None, frequency: int=None, fund_family: str=None, gics_sector: str=None, id: int=None, income_currency: str=None, interest_rate: float=None, is_dummy_security: bool=None, is_envestnet_dummy_security: bool=None, is_synthetic_security: bool=None, isin: str=None, issue_date: str=None, issue_type_multiplier: float=None, last_coupon_date: str=None, last_modified_date: str=None, maturity_date: str=None, minimum_purchase: int=None, moody_rating: str=None, s_and_p_rating: str=None, sector: str=None, sedol: str=None, share_class: str=None, state_taxable: bool=None, stock_exchange_details: List[StockExchangeDetail]=None, style: str=None, sub_sector: str=None, trade_currency_code: str=None, type: str=None):
        """Security - a model defined in OpenAPI

        :param accrual_method: The accrual_method of this Security.
        :param agency_factor: The agency_factor of this Security.
        :param call_date: The call_date of this Security.
        :param call_price: The call_price of this Security.
        :param cdsc_fund_flag: The cdsc_fund_flag of this Security.
        :param closed_flag: The closed_flag of this Security.
        :param cusip: The cusip of this Security.
        :param description: The description of this Security.
        :param federal_taxable: The federal_taxable of this Security.
        :param firm_eligible: The firm_eligible of this Security.
        :param first_coupon_date: The first_coupon_date of this Security.
        :param frequency: The frequency of this Security.
        :param fund_family: The fund_family of this Security.
        :param gics_sector: The gics_sector of this Security.
        :param id: The id of this Security.
        :param income_currency: The income_currency of this Security.
        :param interest_rate: The interest_rate of this Security.
        :param is_dummy_security: The is_dummy_security of this Security.
        :param is_envestnet_dummy_security: The is_envestnet_dummy_security of this Security.
        :param is_synthetic_security: The is_synthetic_security of this Security.
        :param isin: The isin of this Security.
        :param issue_date: The issue_date of this Security.
        :param issue_type_multiplier: The issue_type_multiplier of this Security.
        :param last_coupon_date: The last_coupon_date of this Security.
        :param last_modified_date: The last_modified_date of this Security.
        :param maturity_date: The maturity_date of this Security.
        :param minimum_purchase: The minimum_purchase of this Security.
        :param moody_rating: The moody_rating of this Security.
        :param s_and_p_rating: The s_and_p_rating of this Security.
        :param sector: The sector of this Security.
        :param sedol: The sedol of this Security.
        :param share_class: The share_class of this Security.
        :param state_taxable: The state_taxable of this Security.
        :param stock_exchange_details: The stock_exchange_details of this Security.
        :param style: The style of this Security.
        :param sub_sector: The sub_sector of this Security.
        :param trade_currency_code: The trade_currency_code of this Security.
        :param type: The type of this Security.
        """
        self.openapi_types = {
            'accrual_method': str,
            'agency_factor': float,
            'call_date': str,
            'call_price': float,
            'cdsc_fund_flag': bool,
            'closed_flag': bool,
            'cusip': str,
            'description': str,
            'federal_taxable': bool,
            'firm_eligible': str,
            'first_coupon_date': str,
            'frequency': int,
            'fund_family': str,
            'gics_sector': str,
            'id': int,
            'income_currency': str,
            'interest_rate': float,
            'is_dummy_security': bool,
            'is_envestnet_dummy_security': bool,
            'is_synthetic_security': bool,
            'isin': str,
            'issue_date': str,
            'issue_type_multiplier': float,
            'last_coupon_date': str,
            'last_modified_date': str,
            'maturity_date': str,
            'minimum_purchase': int,
            'moody_rating': str,
            's_and_p_rating': str,
            'sector': str,
            'sedol': str,
            'share_class': str,
            'state_taxable': bool,
            'stock_exchange_details': List[StockExchangeDetail],
            'style': str,
            'sub_sector': str,
            'trade_currency_code': str,
            'type': str
        }

        self.attribute_map = {
            'accrual_method': 'accrualMethod',
            'agency_factor': 'agencyFactor',
            'call_date': 'callDate',
            'call_price': 'callPrice',
            'cdsc_fund_flag': 'cdscFundFlag',
            'closed_flag': 'closedFlag',
            'cusip': 'cusip',
            'description': 'description',
            'federal_taxable': 'federalTaxable',
            'firm_eligible': 'firmEligible',
            'first_coupon_date': 'firstCouponDate',
            'frequency': 'frequency',
            'fund_family': 'fundFamily',
            'gics_sector': 'gicsSector',
            'id': 'id',
            'income_currency': 'incomeCurrency',
            'interest_rate': 'interestRate',
            'is_dummy_security': 'isDummySecurity',
            'is_envestnet_dummy_security': 'isEnvestnetDummySecurity',
            'is_synthetic_security': 'isSyntheticSecurity',
            'isin': 'isin',
            'issue_date': 'issueDate',
            'issue_type_multiplier': 'issueTypeMultiplier',
            'last_coupon_date': 'lastCouponDate',
            'last_modified_date': 'lastModifiedDate',
            'maturity_date': 'maturityDate',
            'minimum_purchase': 'minimumPurchase',
            'moody_rating': 'moodyRating',
            's_and_p_rating': 'sAndPRating',
            'sector': 'sector',
            'sedol': 'sedol',
            'share_class': 'shareClass',
            'state_taxable': 'stateTaxable',
            'stock_exchange_details': 'stockExchangeDetails',
            'style': 'style',
            'sub_sector': 'subSector',
            'trade_currency_code': 'tradeCurrencyCode',
            'type': 'type'
        }

        self._accrual_method = accrual_method
        self._agency_factor = agency_factor
        self._call_date = call_date
        self._call_price = call_price
        self._cdsc_fund_flag = cdsc_fund_flag
        self._closed_flag = closed_flag
        self._cusip = cusip
        self._description = description
        self._federal_taxable = federal_taxable
        self._firm_eligible = firm_eligible
        self._first_coupon_date = first_coupon_date
        self._frequency = frequency
        self._fund_family = fund_family
        self._gics_sector = gics_sector
        self._id = id
        self._income_currency = income_currency
        self._interest_rate = interest_rate
        self._is_dummy_security = is_dummy_security
        self._is_envestnet_dummy_security = is_envestnet_dummy_security
        self._is_synthetic_security = is_synthetic_security
        self._isin = isin
        self._issue_date = issue_date
        self._issue_type_multiplier = issue_type_multiplier
        self._last_coupon_date = last_coupon_date
        self._last_modified_date = last_modified_date
        self._maturity_date = maturity_date
        self._minimum_purchase = minimum_purchase
        self._moody_rating = moody_rating
        self._s_and_p_rating = s_and_p_rating
        self._sector = sector
        self._sedol = sedol
        self._share_class = share_class
        self._state_taxable = state_taxable
        self._stock_exchange_details = stock_exchange_details
        self._style = style
        self._sub_sector = sub_sector
        self._trade_currency_code = trade_currency_code
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Security':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Security of this Security.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accrual_method(self):
        """Gets the accrual_method of this Security.

        The method in which interest is accrued or earned.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The accrual_method of this Security.
        :rtype: str
        """
        return self._accrual_method

    @accrual_method.setter
    def accrual_method(self, accrual_method):
        """Sets the accrual_method of this Security.

        The method in which interest is accrued or earned.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param accrual_method: The accrual_method of this Security.
        :type accrual_method: str
        """

        self._accrual_method = accrual_method

    @property
    def agency_factor(self):
        """Gets the agency_factor of this Security.

        Agency factor of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The agency_factor of this Security.
        :rtype: float
        """
        return self._agency_factor

    @agency_factor.setter
    def agency_factor(self, agency_factor):
        """Sets the agency_factor of this Security.

        Agency factor of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param agency_factor: The agency_factor of this Security.
        :type agency_factor: float
        """

        self._agency_factor = agency_factor

    @property
    def call_date(self):
        """Gets the call_date of this Security.

        Next call date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The call_date of this Security.
        :rtype: str
        """
        return self._call_date

    @call_date.setter
    def call_date(self, call_date):
        """Sets the call_date of this Security.

        Next call date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param call_date: The call_date of this Security.
        :type call_date: str
        """

        self._call_date = call_date

    @property
    def call_price(self):
        """Gets the call_price of this Security.

        Next call price of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The call_price of this Security.
        :rtype: float
        """
        return self._call_price

    @call_price.setter
    def call_price(self, call_price):
        """Sets the call_price of this Security.

        Next call price of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param call_price: The call_price of this Security.
        :type call_price: float
        """

        self._call_price = call_price

    @property
    def cdsc_fund_flag(self):
        """Gets the cdsc_fund_flag of this Security.

        cdsc fund flag of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The cdsc_fund_flag of this Security.
        :rtype: bool
        """
        return self._cdsc_fund_flag

    @cdsc_fund_flag.setter
    def cdsc_fund_flag(self, cdsc_fund_flag):
        """Sets the cdsc_fund_flag of this Security.

        cdsc fund flag of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param cdsc_fund_flag: The cdsc_fund_flag of this Security.
        :type cdsc_fund_flag: bool
        """

        self._cdsc_fund_flag = cdsc_fund_flag

    @property
    def closed_flag(self):
        """Gets the closed_flag of this Security.

        <b>true</b>:Closed for all investors , <b>false</b>: Open to all investors.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The closed_flag of this Security.
        :rtype: bool
        """
        return self._closed_flag

    @closed_flag.setter
    def closed_flag(self, closed_flag):
        """Sets the closed_flag of this Security.

        <b>true</b>:Closed for all investors , <b>false</b>: Open to all investors.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param closed_flag: The closed_flag of this Security.
        :type closed_flag: bool
        """

        self._closed_flag = closed_flag

    @property
    def cusip(self):
        """Gets the cusip of this Security.

        A CUSIP is a nine-character alphanumeric code that identifies a North American financial security for the purposes of facilitating clearing and settlement of trades.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The cusip of this Security.
        :rtype: str
        """
        return self._cusip

    @cusip.setter
    def cusip(self, cusip):
        """Sets the cusip of this Security.

        A CUSIP is a nine-character alphanumeric code that identifies a North American financial security for the purposes of facilitating clearing and settlement of trades.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param cusip: The cusip of this Security.
        :type cusip: str
        """

        self._cusip = cusip

    @property
    def description(self):
        """Gets the description of this Security.

        The description (name) of the security. For example, Cisco Systems.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The description of this Security.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Security.

        The description (name) of the security. For example, Cisco Systems.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param description: The description of this Security.
        :type description: str
        """

        self._description = description

    @property
    def federal_taxable(self):
        """Gets the federal_taxable of this Security.

        Flag indicating federal taxable.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The federal_taxable of this Security.
        :rtype: bool
        """
        return self._federal_taxable

    @federal_taxable.setter
    def federal_taxable(self, federal_taxable):
        """Sets the federal_taxable of this Security.

        Flag indicating federal taxable.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param federal_taxable: The federal_taxable of this Security.
        :type federal_taxable: bool
        """

        self._federal_taxable = federal_taxable

    @property
    def firm_eligible(self):
        """Gets the firm_eligible of this Security.

        <b>1</b>- indicates Eligible,<b>0</b>- indicates firm is not eligible.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The firm_eligible of this Security.
        :rtype: str
        """
        return self._firm_eligible

    @firm_eligible.setter
    def firm_eligible(self, firm_eligible):
        """Sets the firm_eligible of this Security.

        <b>1</b>- indicates Eligible,<b>0</b>- indicates firm is not eligible.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param firm_eligible: The firm_eligible of this Security.
        :type firm_eligible: str
        """

        self._firm_eligible = firm_eligible

    @property
    def first_coupon_date(self):
        """Gets the first_coupon_date of this Security.

        First coupon date of security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The first_coupon_date of this Security.
        :rtype: str
        """
        return self._first_coupon_date

    @first_coupon_date.setter
    def first_coupon_date(self, first_coupon_date):
        """Sets the first_coupon_date of this Security.

        First coupon date of security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param first_coupon_date: The first_coupon_date of this Security.
        :type first_coupon_date: str
        """

        self._first_coupon_date = first_coupon_date

    @property
    def frequency(self):
        """Gets the frequency of this Security.

        Coupon Frequency.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The frequency of this Security.
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this Security.

        Coupon Frequency.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param frequency: The frequency of this Security.
        :type frequency: int
        """

        self._frequency = frequency

    @property
    def fund_family(self):
        """Gets the fund_family of this Security.

        Mutual Fund Family Name.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The fund_family of this Security.
        :rtype: str
        """
        return self._fund_family

    @fund_family.setter
    def fund_family(self, fund_family):
        """Sets the fund_family of this Security.

        Mutual Fund Family Name.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param fund_family: The fund_family of this Security.
        :type fund_family: str
        """

        self._fund_family = fund_family

    @property
    def gics_sector(self):
        """Gets the gics_sector of this Security.

        GICS Sector is a categorization the S&P assigns to all publically traded companies. <br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The gics_sector of this Security.
        :rtype: str
        """
        return self._gics_sector

    @gics_sector.setter
    def gics_sector(self, gics_sector):
        """Sets the gics_sector of this Security.

        GICS Sector is a categorization the S&P assigns to all publically traded companies. <br><br><b>Applicable containers</b>: investment, insurance<br>

        :param gics_sector: The gics_sector of this Security.
        :type gics_sector: str
        """

        self._gics_sector = gics_sector

    @property
    def id(self):
        """Gets the id of this Security.

        The unique identifier of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The id of this Security.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Security.

        The unique identifier of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param id: The id of this Security.
        :type id: int
        """

        self._id = id

    @property
    def income_currency(self):
        """Gets the income_currency of this Security.

        ISO 4217 currency code indicating income currency of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The income_currency of this Security.
        :rtype: str
        """
        return self._income_currency

    @income_currency.setter
    def income_currency(self, income_currency):
        """Sets the income_currency of this Security.

        ISO 4217 currency code indicating income currency of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param income_currency: The income_currency of this Security.
        :type income_currency: str
        """

        self._income_currency = income_currency

    @property
    def interest_rate(self):
        """Gets the interest_rate of this Security.

        The rate of interest paid annually, expressed as a percentage of the bond's par or face value.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The interest_rate of this Security.
        :rtype: float
        """
        return self._interest_rate

    @interest_rate.setter
    def interest_rate(self, interest_rate):
        """Sets the interest_rate of this Security.

        The rate of interest paid annually, expressed as a percentage of the bond's par or face value.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param interest_rate: The interest_rate of this Security.
        :type interest_rate: float
        """

        self._interest_rate = interest_rate

    @property
    def is_dummy_security(self):
        """Gets the is_dummy_security of this Security.

        Indicates whether the security is a dummy security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The is_dummy_security of this Security.
        :rtype: bool
        """
        return self._is_dummy_security

    @is_dummy_security.setter
    def is_dummy_security(self, is_dummy_security):
        """Sets the is_dummy_security of this Security.

        Indicates whether the security is a dummy security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param is_dummy_security: The is_dummy_security of this Security.
        :type is_dummy_security: bool
        """

        self._is_dummy_security = is_dummy_security

    @property
    def is_envestnet_dummy_security(self):
        """Gets the is_envestnet_dummy_security of this Security.

        Flag indicating a dummy security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The is_envestnet_dummy_security of this Security.
        :rtype: bool
        """
        return self._is_envestnet_dummy_security

    @is_envestnet_dummy_security.setter
    def is_envestnet_dummy_security(self, is_envestnet_dummy_security):
        """Sets the is_envestnet_dummy_security of this Security.

        Flag indicating a dummy security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param is_envestnet_dummy_security: The is_envestnet_dummy_security of this Security.
        :type is_envestnet_dummy_security: bool
        """

        self._is_envestnet_dummy_security = is_envestnet_dummy_security

    @property
    def is_synthetic_security(self):
        """Gets the is_synthetic_security of this Security.

        Indicates whether the security is a simulated security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The is_synthetic_security of this Security.
        :rtype: bool
        """
        return self._is_synthetic_security

    @is_synthetic_security.setter
    def is_synthetic_security(self, is_synthetic_security):
        """Sets the is_synthetic_security of this Security.

        Indicates whether the security is a simulated security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param is_synthetic_security: The is_synthetic_security of this Security.
        :type is_synthetic_security: bool
        """

        self._is_synthetic_security = is_synthetic_security

    @property
    def isin(self):
        """Gets the isin of this Security.

        The International Securities Identification Number (ISIN) is used worldwide to identify specific securities. It is equivalent to CUSIP for international markets.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The isin of this Security.
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this Security.

        The International Securities Identification Number (ISIN) is used worldwide to identify specific securities. It is equivalent to CUSIP for international markets.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param isin: The isin of this Security.
        :type isin: str
        """

        self._isin = isin

    @property
    def issue_date(self):
        """Gets the issue_date of this Security.

        Issue date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The issue_date of this Security.
        :rtype: str
        """
        return self._issue_date

    @issue_date.setter
    def issue_date(self, issue_date):
        """Sets the issue_date of this Security.

        Issue date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param issue_date: The issue_date of this Security.
        :type issue_date: str
        """

        self._issue_date = issue_date

    @property
    def issue_type_multiplier(self):
        """Gets the issue_type_multiplier of this Security.

        Price units corresponding to the security style. This is used to derive actual price of the security from market value.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The issue_type_multiplier of this Security.
        :rtype: float
        """
        return self._issue_type_multiplier

    @issue_type_multiplier.setter
    def issue_type_multiplier(self, issue_type_multiplier):
        """Sets the issue_type_multiplier of this Security.

        Price units corresponding to the security style. This is used to derive actual price of the security from market value.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param issue_type_multiplier: The issue_type_multiplier of this Security.
        :type issue_type_multiplier: float
        """

        self._issue_type_multiplier = issue_type_multiplier

    @property
    def last_coupon_date(self):
        """Gets the last_coupon_date of this Security.

        Last coupon date of security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The last_coupon_date of this Security.
        :rtype: str
        """
        return self._last_coupon_date

    @last_coupon_date.setter
    def last_coupon_date(self, last_coupon_date):
        """Sets the last_coupon_date of this Security.

        Last coupon date of security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param last_coupon_date: The last_coupon_date of this Security.
        :type last_coupon_date: str
        """

        self._last_coupon_date = last_coupon_date

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this Security.

        The last updated date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The last_modified_date of this Security.
        :rtype: str
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this Security.

        The last updated date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param last_modified_date: The last_modified_date of this Security.
        :type last_modified_date: str
        """

        self._last_modified_date = last_modified_date

    @property
    def maturity_date(self):
        """Gets the maturity_date of this Security.

        Maturity date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The maturity_date of this Security.
        :rtype: str
        """
        return self._maturity_date

    @maturity_date.setter
    def maturity_date(self, maturity_date):
        """Sets the maturity_date of this Security.

        Maturity date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param maturity_date: The maturity_date of this Security.
        :type maturity_date: str
        """

        self._maturity_date = maturity_date

    @property
    def minimum_purchase(self):
        """Gets the minimum_purchase of this Security.

        Minimum purchase of security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The minimum_purchase of this Security.
        :rtype: int
        """
        return self._minimum_purchase

    @minimum_purchase.setter
    def minimum_purchase(self, minimum_purchase):
        """Sets the minimum_purchase of this Security.

        Minimum purchase of security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param minimum_purchase: The minimum_purchase of this Security.
        :type minimum_purchase: int
        """

        self._minimum_purchase = minimum_purchase

    @property
    def moody_rating(self):
        """Gets the moody_rating of this Security.

        Unique identifier for Moody rating on Envestnet platform.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The moody_rating of this Security.
        :rtype: str
        """
        return self._moody_rating

    @moody_rating.setter
    def moody_rating(self, moody_rating):
        """Sets the moody_rating of this Security.

        Unique identifier for Moody rating on Envestnet platform.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param moody_rating: The moody_rating of this Security.
        :type moody_rating: str
        """

        self._moody_rating = moody_rating

    @property
    def s_and_p_rating(self):
        """Gets the s_and_p_rating of this Security.

        Unique identifier for S&P rating on Envestnet platform.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The s_and_p_rating of this Security.
        :rtype: str
        """
        return self._s_and_p_rating

    @s_and_p_rating.setter
    def s_and_p_rating(self, s_and_p_rating):
        """Sets the s_and_p_rating of this Security.

        Unique identifier for S&P rating on Envestnet platform.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param s_and_p_rating: The s_and_p_rating of this Security.
        :type s_and_p_rating: str
        """

        self._s_and_p_rating = s_and_p_rating

    @property
    def sector(self):
        """Gets the sector of this Security.

        Identifier of the sector to which the security belongs to.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The sector of this Security.
        :rtype: str
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """Sets the sector of this Security.

        Identifier of the sector to which the security belongs to.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param sector: The sector of this Security.
        :type sector: str
        """

        self._sector = sector

    @property
    def sedol(self):
        """Gets the sedol of this Security.

        The Stock Exchange Daily Official List (SEDOL) is a set of security identifiers used in the United Kingdom and Ireland for clearing purposes.<br><b>Note</b>: The SEDOL field is only applicable to the trade related transactions.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The sedol of this Security.
        :rtype: str
        """
        return self._sedol

    @sedol.setter
    def sedol(self, sedol):
        """Sets the sedol of this Security.

        The Stock Exchange Daily Official List (SEDOL) is a set of security identifiers used in the United Kingdom and Ireland for clearing purposes.<br><b>Note</b>: The SEDOL field is only applicable to the trade related transactions.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param sedol: The sedol of this Security.
        :type sedol: str
        """

        self._sedol = sedol

    @property
    def share_class(self):
        """Gets the share_class of this Security.

        Share class of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The share_class of this Security.
        :rtype: str
        """
        return self._share_class

    @share_class.setter
    def share_class(self, share_class):
        """Sets the share_class of this Security.

        Share class of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param share_class: The share_class of this Security.
        :type share_class: str
        """

        self._share_class = share_class

    @property
    def state_taxable(self):
        """Gets the state_taxable of this Security.

        The state in which the security is taxed.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The state_taxable of this Security.
        :rtype: bool
        """
        return self._state_taxable

    @state_taxable.setter
    def state_taxable(self, state_taxable):
        """Sets the state_taxable of this Security.

        The state in which the security is taxed.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param state_taxable: The state_taxable of this Security.
        :type state_taxable: bool
        """

        self._state_taxable = state_taxable

    @property
    def stock_exchange_details(self):
        """Gets the stock_exchange_details of this Security.

        Securities exchange provide the securities information at the corresponding exchanges. <br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The stock_exchange_details of this Security.
        :rtype: List[StockExchangeDetail]
        """
        return self._stock_exchange_details

    @stock_exchange_details.setter
    def stock_exchange_details(self, stock_exchange_details):
        """Sets the stock_exchange_details of this Security.

        Securities exchange provide the securities information at the corresponding exchanges. <br><br><b>Applicable containers</b>: investment, insurance<br>

        :param stock_exchange_details: The stock_exchange_details of this Security.
        :type stock_exchange_details: List[StockExchangeDetail]
        """

        self._stock_exchange_details = stock_exchange_details

    @property
    def style(self):
        """Gets the style of this Security.

        Classification of the style for the security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The style of this Security.
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this Security.

        Classification of the style for the security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param style: The style of this Security.
        :type style: str
        """

        self._style = style

    @property
    def sub_sector(self):
        """Gets the sub_sector of this Security.

        GICS sector ID to which the security belongs to.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The sub_sector of this Security.
        :rtype: str
        """
        return self._sub_sector

    @sub_sector.setter
    def sub_sector(self, sub_sector):
        """Sets the sub_sector of this Security.

        GICS sector ID to which the security belongs to.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param sub_sector: The sub_sector of this Security.
        :type sub_sector: str
        """

        self._sub_sector = sub_sector

    @property
    def trade_currency_code(self):
        """Gets the trade_currency_code of this Security.

        ISO 4217 currency code indicating trading currency of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The trade_currency_code of this Security.
        :rtype: str
        """
        return self._trade_currency_code

    @trade_currency_code.setter
    def trade_currency_code(self, trade_currency_code):
        """Sets the trade_currency_code of this Security.

        ISO 4217 currency code indicating trading currency of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>

        :param trade_currency_code: The trade_currency_code of this Security.
        :type trade_currency_code: str
        """

        self._trade_currency_code = trade_currency_code

    @property
    def type(self):
        """Gets the type of this Security.

        Indicates the type of security like stocks, mutual fund, etc. <br><br><b>Applicable containers</b>: investment, insurance<br>

        :return: The type of this Security.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Security.

        Indicates the type of security like stocks, mutual fund, etc. <br><br><b>Applicable containers</b>: investment, insurance<br>

        :param type: The type of this Security.
        :type type: str
        """

        self._type = type
