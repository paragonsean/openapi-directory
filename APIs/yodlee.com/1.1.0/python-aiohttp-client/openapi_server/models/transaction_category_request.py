# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransactionCategoryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_name: str=None, parent_category_id: int=None, source: str=None):
        """TransactionCategoryRequest - a model defined in OpenAPI

        :param category_name: The category_name of this TransactionCategoryRequest.
        :param parent_category_id: The parent_category_id of this TransactionCategoryRequest.
        :param source: The source of this TransactionCategoryRequest.
        """
        self.openapi_types = {
            'category_name': str,
            'parent_category_id': int,
            'source': str
        }

        self.attribute_map = {
            'category_name': 'categoryName',
            'parent_category_id': 'parentCategoryId',
            'source': 'source'
        }

        self._category_name = category_name
        self._parent_category_id = parent_category_id
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactionCategoryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransactionCategoryRequest of this TransactionCategoryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_name(self):
        """Gets the category_name of this TransactionCategoryRequest.


        :return: The category_name of this TransactionCategoryRequest.
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """Sets the category_name of this TransactionCategoryRequest.


        :param category_name: The category_name of this TransactionCategoryRequest.
        :type category_name: str
        """
        if category_name is not None and len(category_name) > 50:
            raise ValueError("Invalid value for `category_name`, length must be less than or equal to `50`")
        if category_name is not None and len(category_name) < 1:
            raise ValueError("Invalid value for `category_name`, length must be greater than or equal to `1`")

        self._category_name = category_name

    @property
    def parent_category_id(self):
        """Gets the parent_category_id of this TransactionCategoryRequest.


        :return: The parent_category_id of this TransactionCategoryRequest.
        :rtype: int
        """
        return self._parent_category_id

    @parent_category_id.setter
    def parent_category_id(self, parent_category_id):
        """Sets the parent_category_id of this TransactionCategoryRequest.


        :param parent_category_id: The parent_category_id of this TransactionCategoryRequest.
        :type parent_category_id: int
        """
        if parent_category_id is None:
            raise ValueError("Invalid value for `parent_category_id`, must not be `None`")
        if parent_category_id is not None and parent_category_id < 1:
            raise ValueError("Invalid value for `parent_category_id`, must be a value greater than or equal to `1`")

        self._parent_category_id = parent_category_id

    @property
    def source(self):
        """Gets the source of this TransactionCategoryRequest.


        :return: The source of this TransactionCategoryRequest.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this TransactionCategoryRequest.


        :param source: The source of this TransactionCategoryRequest.
        :type source: str
        """

        self._source = source
