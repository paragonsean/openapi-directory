# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Capability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container: List[str]=None, name: str=None):
        """Capability - a model defined in OpenAPI

        :param container: The container of this Capability.
        :param name: The name of this Capability.
        """
        self.openapi_types = {
            'container': List[str],
            'name': str
        }

        self.attribute_map = {
            'container': 'container',
            'name': 'name'
        }

        self._container = container
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Capability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Capability of this Capability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container(self):
        """Gets the container of this Capability.


        :return: The container of this Capability.
        :rtype: List[str]
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this Capability.


        :param container: The container of this Capability.
        :type container: List[str]
        """
        allowed_values = ["bank", "creditCard", "investment", "insurance", "loan", "reward", "realEstate", "otherAssets", "otherLiabilities"]  # noqa: E501
        if not set(container).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `container` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(container) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._container = container

    @property
    def name(self):
        """Gets the name of this Capability.


        :return: The name of this Capability.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Capability.


        :param name: The name of this Capability.
        :type name: str
        """

        self._name = name
