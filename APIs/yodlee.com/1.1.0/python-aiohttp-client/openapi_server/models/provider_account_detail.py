# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_dataset import AccountDataset
from openapi_server.models.login_form import LoginForm
from openapi_server.models.provider_account_preferences import ProviderAccountPreferences
from openapi_server import util


class ProviderAccountDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation_source: str=None, consent_id: int=None, created_date: str=None, dataset: List[AccountDataset]=None, id: int=None, is_manual: bool=None, last_updated: str=None, login_form: List[LoginForm]=None, oauth_migration_status: str=None, preferences: ProviderAccountPreferences=None, provider_id: int=None, request_id: str=None, status: str=None):
        """ProviderAccountDetail - a model defined in OpenAPI

        :param aggregation_source: The aggregation_source of this ProviderAccountDetail.
        :param consent_id: The consent_id of this ProviderAccountDetail.
        :param created_date: The created_date of this ProviderAccountDetail.
        :param dataset: The dataset of this ProviderAccountDetail.
        :param id: The id of this ProviderAccountDetail.
        :param is_manual: The is_manual of this ProviderAccountDetail.
        :param last_updated: The last_updated of this ProviderAccountDetail.
        :param login_form: The login_form of this ProviderAccountDetail.
        :param oauth_migration_status: The oauth_migration_status of this ProviderAccountDetail.
        :param preferences: The preferences of this ProviderAccountDetail.
        :param provider_id: The provider_id of this ProviderAccountDetail.
        :param request_id: The request_id of this ProviderAccountDetail.
        :param status: The status of this ProviderAccountDetail.
        """
        self.openapi_types = {
            'aggregation_source': str,
            'consent_id': int,
            'created_date': str,
            'dataset': List[AccountDataset],
            'id': int,
            'is_manual': bool,
            'last_updated': str,
            'login_form': List[LoginForm],
            'oauth_migration_status': str,
            'preferences': ProviderAccountPreferences,
            'provider_id': int,
            'request_id': str,
            'status': str
        }

        self.attribute_map = {
            'aggregation_source': 'aggregationSource',
            'consent_id': 'consentId',
            'created_date': 'createdDate',
            'dataset': 'dataset',
            'id': 'id',
            'is_manual': 'isManual',
            'last_updated': 'lastUpdated',
            'login_form': 'loginForm',
            'oauth_migration_status': 'oauthMigrationStatus',
            'preferences': 'preferences',
            'provider_id': 'providerId',
            'request_id': 'requestId',
            'status': 'status'
        }

        self._aggregation_source = aggregation_source
        self._consent_id = consent_id
        self._created_date = created_date
        self._dataset = dataset
        self._id = id
        self._is_manual = is_manual
        self._last_updated = last_updated
        self._login_form = login_form
        self._oauth_migration_status = oauth_migration_status
        self._preferences = preferences
        self._provider_id = provider_id
        self._request_id = request_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProviderAccountDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProviderAccountDetail of this ProviderAccountDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation_source(self):
        """Gets the aggregation_source of this ProviderAccountDetail.

        The source through which the providerAccount is added in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :return: The aggregation_source of this ProviderAccountDetail.
        :rtype: str
        """
        return self._aggregation_source

    @aggregation_source.setter
    def aggregation_source(self, aggregation_source):
        """Sets the aggregation_source of this ProviderAccountDetail.

        The source through which the providerAccount is added in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :param aggregation_source: The aggregation_source of this ProviderAccountDetail.
        :type aggregation_source: str
        """
        allowed_values = ["SYSTEM", "USER"]  # noqa: E501
        if aggregation_source not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregation_source` ({0}), must be one of {1}"
                .format(aggregation_source, allowed_values)
            )

        self._aggregation_source = aggregation_source

    @property
    def consent_id(self):
        """Gets the consent_id of this ProviderAccountDetail.

        Consent Id generated through POST Consent.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>

        :return: The consent_id of this ProviderAccountDetail.
        :rtype: int
        """
        return self._consent_id

    @consent_id.setter
    def consent_id(self, consent_id):
        """Sets the consent_id of this ProviderAccountDetail.

        Consent Id generated through POST Consent.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>

        :param consent_id: The consent_id of this ProviderAccountDetail.
        :type consent_id: int
        """
        if consent_id is None:
            raise ValueError("Invalid value for `consent_id`, must not be `None`")

        self._consent_id = consent_id

    @property
    def created_date(self):
        """Gets the created_date of this ProviderAccountDetail.

        The date on when the provider account is created in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>

        :return: The created_date of this ProviderAccountDetail.
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ProviderAccountDetail.

        The date on when the provider account is created in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>

        :param created_date: The created_date of this ProviderAccountDetail.
        :type created_date: str
        """

        self._created_date = created_date

    @property
    def dataset(self):
        """Gets the dataset of this ProviderAccountDetail.

        Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The dataset of this ProviderAccountDetail.
        :rtype: List[AccountDataset]
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this ProviderAccountDetail.

        Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>

        :param dataset: The dataset of this ProviderAccountDetail.
        :type dataset: List[AccountDataset]
        """

        self._dataset = dataset

    @property
    def id(self):
        """Gets the id of this ProviderAccountDetail.

        Unique identifier for the provider account resource. This is created during account addition.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The id of this ProviderAccountDetail.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProviderAccountDetail.

        Unique identifier for the provider account resource. This is created during account addition.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>

        :param id: The id of this ProviderAccountDetail.
        :type id: int
        """

        self._id = id

    @property
    def is_manual(self):
        """Gets the is_manual of this ProviderAccountDetail.

        Indicates whether account is a manual or aggregated provider account.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The is_manual of this ProviderAccountDetail.
        :rtype: bool
        """
        return self._is_manual

    @is_manual.setter
    def is_manual(self, is_manual):
        """Sets the is_manual of this ProviderAccountDetail.

        Indicates whether account is a manual or aggregated provider account.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>

        :param is_manual: The is_manual of this ProviderAccountDetail.
        :type is_manual: bool
        """

        self._is_manual = is_manual

    @property
    def last_updated(self):
        """Gets the last_updated of this ProviderAccountDetail.

        Indicate when the providerAccount is last updated successfully.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET dataExtracts/userData</li></ul>

        :return: The last_updated of this ProviderAccountDetail.
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ProviderAccountDetail.

        Indicate when the providerAccount is last updated successfully.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET dataExtracts/userData</li></ul>

        :param last_updated: The last_updated of this ProviderAccountDetail.
        :type last_updated: str
        """

        self._last_updated = last_updated

    @property
    def login_form(self):
        """Gets the login_form of this ProviderAccountDetail.

        This entity gets returned in the response for only MFA based provider accounts during the add/update account polling process. This indicates that the MFA information is expected from the user to complete the process. This represents the structure of MFA form that is displayed to the user in the provider site.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>

        :return: The login_form of this ProviderAccountDetail.
        :rtype: List[LoginForm]
        """
        return self._login_form

    @login_form.setter
    def login_form(self, login_form):
        """Sets the login_form of this ProviderAccountDetail.

        This entity gets returned in the response for only MFA based provider accounts during the add/update account polling process. This indicates that the MFA information is expected from the user to complete the process. This represents the structure of MFA form that is displayed to the user in the provider site.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>

        :param login_form: The login_form of this ProviderAccountDetail.
        :type login_form: List[LoginForm]
        """

        self._login_form = login_form

    @property
    def oauth_migration_status(self):
        """Gets the oauth_migration_status of this ProviderAccountDetail.

        Indicates the migration status of the provider account from screen-scraping provider to the Open Banking provider. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>GET providerAccounts/{providerAccountId}</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The oauth_migration_status of this ProviderAccountDetail.
        :rtype: str
        """
        return self._oauth_migration_status

    @oauth_migration_status.setter
    def oauth_migration_status(self, oauth_migration_status):
        """Sets the oauth_migration_status of this ProviderAccountDetail.

        Indicates the migration status of the provider account from screen-scraping provider to the Open Banking provider. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>GET providerAccounts/{providerAccountId}</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>

        :param oauth_migration_status: The oauth_migration_status of this ProviderAccountDetail.
        :type oauth_migration_status: str
        """
        allowed_values = ["IN_PROGRESS", "TO_BE_MIGRATED", "COMPLETED"]  # noqa: E501
        if oauth_migration_status not in allowed_values:
            raise ValueError(
                "Invalid value for `oauth_migration_status` ({0}), must be one of {1}"
                .format(oauth_migration_status, allowed_values)
            )

        self._oauth_migration_status = oauth_migration_status

    @property
    def preferences(self):
        """Gets the preferences of this ProviderAccountDetail.


        :return: The preferences of this ProviderAccountDetail.
        :rtype: ProviderAccountPreferences
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences):
        """Sets the preferences of this ProviderAccountDetail.


        :param preferences: The preferences of this ProviderAccountDetail.
        :type preferences: ProviderAccountPreferences
        """

        self._preferences = preferences

    @property
    def provider_id(self):
        """Gets the provider_id of this ProviderAccountDetail.

        Unique identifier for the provider resource. This denotes the provider for which the provider account id is generated by the user.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The provider_id of this ProviderAccountDetail.
        :rtype: int
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this ProviderAccountDetail.

        Unique identifier for the provider resource. This denotes the provider for which the provider account id is generated by the user.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>

        :param provider_id: The provider_id of this ProviderAccountDetail.
        :type provider_id: int
        """

        self._provider_id = provider_id

    @property
    def request_id(self):
        """Gets the request_id of this ProviderAccountDetail.

        Unique id generated to indicate the request.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>

        :return: The request_id of this ProviderAccountDetail.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ProviderAccountDetail.

        Unique id generated to indicate the request.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>

        :param request_id: The request_id of this ProviderAccountDetail.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def status(self):
        """Gets the status of this ProviderAccountDetail.

        The status of last update attempted for the account. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :return: The status of this ProviderAccountDetail.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProviderAccountDetail.

        The status of last update attempted for the account. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :param status: The status of this ProviderAccountDetail.
        :type status: str
        """
        allowed_values = ["LOGIN_IN_PROGRESS", "USER_INPUT_REQUIRED", "IN_PROGRESS", "PARTIAL_SUCCESS", "SUCCESS", "FAILED", "MIGRATION_IN_PROGRESS"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
