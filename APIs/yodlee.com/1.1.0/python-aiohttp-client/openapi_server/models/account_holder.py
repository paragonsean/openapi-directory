# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.identifier import Identifier
from openapi_server.models.name import Name
from openapi_server import util


class AccountHolder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gender: str=None, identifier: List[Identifier]=None, name: Name=None, ownership: str=None):
        """AccountHolder - a model defined in OpenAPI

        :param gender: The gender of this AccountHolder.
        :param identifier: The identifier of this AccountHolder.
        :param name: The name of this AccountHolder.
        :param ownership: The ownership of this AccountHolder.
        """
        self.openapi_types = {
            'gender': str,
            'identifier': List[Identifier],
            'name': Name,
            'ownership': str
        }

        self.attribute_map = {
            'gender': 'gender',
            'identifier': 'identifier',
            'name': 'name',
            'ownership': 'ownership'
        }

        self._gender = gender
        self._identifier = identifier
        self._name = name
        self._ownership = ownership

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountHolder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountHolder of this AccountHolder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gender(self):
        """Gets the gender of this AccountHolder.

        Identifiers of the account holder.<br><br><b>Aggregated / Manual</b>: Aggregated <br><b>Applicable containers</b>: bank<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>

        :return: The gender of this AccountHolder.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this AccountHolder.

        Identifiers of the account holder.<br><br><b>Aggregated / Manual</b>: Aggregated <br><b>Applicable containers</b>: bank<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>

        :param gender: The gender of this AccountHolder.
        :type gender: str
        """

        self._gender = gender

    @property
    def identifier(self):
        """Gets the identifier of this AccountHolder.

        Identifiers of the account holder.<br><br><b>Aggregated / Manual</b>: Aggregated <br><b>Applicable containers</b>: bank<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>

        :return: The identifier of this AccountHolder.
        :rtype: List[Identifier]
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this AccountHolder.

        Identifiers of the account holder.<br><br><b>Aggregated / Manual</b>: Aggregated <br><b>Applicable containers</b>: bank<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>

        :param identifier: The identifier of this AccountHolder.
        :type identifier: List[Identifier]
        """

        self._identifier = identifier

    @property
    def name(self):
        """Gets the name of this AccountHolder.


        :return: The name of this AccountHolder.
        :rtype: Name
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountHolder.


        :param name: The name of this AccountHolder.
        :type name: Name
        """

        self._name = name

    @property
    def ownership(self):
        """Gets the ownership of this AccountHolder.

        Indicates the ownership of the account.<br><br><b>Aggregated / Manual</b>: Aggregated <br><b>Applicable containers</b>: bank<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values</b><br>

        :return: The ownership of this AccountHolder.
        :rtype: str
        """
        return self._ownership

    @ownership.setter
    def ownership(self, ownership):
        """Sets the ownership of this AccountHolder.

        Indicates the ownership of the account.<br><br><b>Aggregated / Manual</b>: Aggregated <br><b>Applicable containers</b>: bank<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values</b><br>

        :param ownership: The ownership of this AccountHolder.
        :type ownership: str
        """
        allowed_values = ["PRIMARY", "SECONDARY", "CUSTODIAN", "OTHERS", "POWER_OF_ATTORNEY", "TRUSTEE", "JOINT_OWNER", "BENEFICIARY", "AAS", "BUSINESS", "DBA", "TRUST"]  # noqa: E501
        if ownership not in allowed_values:
            raise ValueError(
                "Invalid value for `ownership` ({0}), must be one of {1}"
                .format(ownership, allowed_values)
            )

        self._ownership = ownership
