# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_address import AccountAddress
from openapi_server.models.account_dataset import AccountDataset
from openapi_server.models.bank_transfer_code import BankTransferCode
from openapi_server.models.coverage import Coverage
from openapi_server.models.loan_payoff_details import LoanPayoffDetails
from openapi_server.models.money import Money
from openapi_server.models.reward_balance import RewardBalance
from openapi_server import util


class DataExtractsAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _401k_loan: Money=None, container: str=None, account_name: str=None, account_number: str=None, account_status: str=None, account_type: str=None, address: AccountAddress=None, aggregation_source: str=None, amount_due: Money=None, annual_percentage_yield: float=None, annuity_balance: Money=None, apr: float=None, associated_provider_account_id: List[int]=None, available_balance: Money=None, available_cash: Money=None, available_credit: Money=None, balance: Money=None, bank_transfer_code: List[BankTransferCode]=None, cash: Money=None, cash_apr: float=None, cash_value: Money=None, classification: str=None, collateral: str=None, coverage: List[Coverage]=None, created_date: str=None, current_balance: Money=None, current_level: str=None, dataset: List[AccountDataset]=None, death_benefit: Money=None, derived_apr: float=None, displayed_name: str=None, due_date: str=None, enrollment_date: str=None, escrow_balance: Money=None, estimated_date: str=None, expiration_date: str=None, face_amount: Money=None, frequency: str=None, guarantor: str=None, home_insurance_type: str=None, home_value: Money=None, id: int=None, include_in_net_worth: bool=None, interest_paid_last_year: Money=None, interest_paid_ytd: Money=None, interest_rate: float=None, interest_rate_type: str=None, is_asset: bool=None, is_deleted: bool=None, is_manual: bool=None, last_employee_contribution_amount: Money=None, last_employee_contribution_date: str=None, last_payment: Money=None, last_payment_amount: Money=None, last_payment_date: str=None, last_updated: str=None, lender: str=None, life_insurance_type: str=None, loan_pay_by_date: str=None, loan_payoff_amount: Money=None, loan_payoff_details: LoanPayoffDetails=None, margin_balance: Money=None, maturity_amount: Money=None, maturity_date: str=None, memo: str=None, minimum_amount_due: Money=None, money_market_balance: Money=None, next_level: str=None, nickname: str=None, oauth_migration_status: str=None, original_loan_amount: Money=None, origination_date: str=None, over_draft_limit: Money=None, policy_effective_date: str=None, policy_from_date: str=None, policy_status: str=None, policy_term: str=None, policy_to_date: str=None, premium: Money=None, premium_payment_term: str=None, primary_reward_unit: str=None, principal_balance: Money=None, provider_account_id: int=None, provider_id: str=None, provider_name: str=None, recurring_payment: Money=None, remaining_balance: Money=None, repayment_plan_type: str=None, reward_balance: List[RewardBalance]=None, running_balance: Money=None, short_balance: Money=None, source_account_status: str=None, source_id: str=None, term: str=None, total_cash_limit: Money=None, total_credit_limit: Money=None, total_credit_line: Money=None, total_unvested_balance: Money=None, total_vested_balance: Money=None, user_classification: str=None, valuation_type: str=None):
        """DataExtractsAccount - a model defined in OpenAPI

        :param _401k_loan: The _401k_loan of this DataExtractsAccount.
        :param container: The container of this DataExtractsAccount.
        :param account_name: The account_name of this DataExtractsAccount.
        :param account_number: The account_number of this DataExtractsAccount.
        :param account_status: The account_status of this DataExtractsAccount.
        :param account_type: The account_type of this DataExtractsAccount.
        :param address: The address of this DataExtractsAccount.
        :param aggregation_source: The aggregation_source of this DataExtractsAccount.
        :param amount_due: The amount_due of this DataExtractsAccount.
        :param annual_percentage_yield: The annual_percentage_yield of this DataExtractsAccount.
        :param annuity_balance: The annuity_balance of this DataExtractsAccount.
        :param apr: The apr of this DataExtractsAccount.
        :param associated_provider_account_id: The associated_provider_account_id of this DataExtractsAccount.
        :param available_balance: The available_balance of this DataExtractsAccount.
        :param available_cash: The available_cash of this DataExtractsAccount.
        :param available_credit: The available_credit of this DataExtractsAccount.
        :param balance: The balance of this DataExtractsAccount.
        :param bank_transfer_code: The bank_transfer_code of this DataExtractsAccount.
        :param cash: The cash of this DataExtractsAccount.
        :param cash_apr: The cash_apr of this DataExtractsAccount.
        :param cash_value: The cash_value of this DataExtractsAccount.
        :param classification: The classification of this DataExtractsAccount.
        :param collateral: The collateral of this DataExtractsAccount.
        :param coverage: The coverage of this DataExtractsAccount.
        :param created_date: The created_date of this DataExtractsAccount.
        :param current_balance: The current_balance of this DataExtractsAccount.
        :param current_level: The current_level of this DataExtractsAccount.
        :param dataset: The dataset of this DataExtractsAccount.
        :param death_benefit: The death_benefit of this DataExtractsAccount.
        :param derived_apr: The derived_apr of this DataExtractsAccount.
        :param displayed_name: The displayed_name of this DataExtractsAccount.
        :param due_date: The due_date of this DataExtractsAccount.
        :param enrollment_date: The enrollment_date of this DataExtractsAccount.
        :param escrow_balance: The escrow_balance of this DataExtractsAccount.
        :param estimated_date: The estimated_date of this DataExtractsAccount.
        :param expiration_date: The expiration_date of this DataExtractsAccount.
        :param face_amount: The face_amount of this DataExtractsAccount.
        :param frequency: The frequency of this DataExtractsAccount.
        :param guarantor: The guarantor of this DataExtractsAccount.
        :param home_insurance_type: The home_insurance_type of this DataExtractsAccount.
        :param home_value: The home_value of this DataExtractsAccount.
        :param id: The id of this DataExtractsAccount.
        :param include_in_net_worth: The include_in_net_worth of this DataExtractsAccount.
        :param interest_paid_last_year: The interest_paid_last_year of this DataExtractsAccount.
        :param interest_paid_ytd: The interest_paid_ytd of this DataExtractsAccount.
        :param interest_rate: The interest_rate of this DataExtractsAccount.
        :param interest_rate_type: The interest_rate_type of this DataExtractsAccount.
        :param is_asset: The is_asset of this DataExtractsAccount.
        :param is_deleted: The is_deleted of this DataExtractsAccount.
        :param is_manual: The is_manual of this DataExtractsAccount.
        :param last_employee_contribution_amount: The last_employee_contribution_amount of this DataExtractsAccount.
        :param last_employee_contribution_date: The last_employee_contribution_date of this DataExtractsAccount.
        :param last_payment: The last_payment of this DataExtractsAccount.
        :param last_payment_amount: The last_payment_amount of this DataExtractsAccount.
        :param last_payment_date: The last_payment_date of this DataExtractsAccount.
        :param last_updated: The last_updated of this DataExtractsAccount.
        :param lender: The lender of this DataExtractsAccount.
        :param life_insurance_type: The life_insurance_type of this DataExtractsAccount.
        :param loan_pay_by_date: The loan_pay_by_date of this DataExtractsAccount.
        :param loan_payoff_amount: The loan_payoff_amount of this DataExtractsAccount.
        :param loan_payoff_details: The loan_payoff_details of this DataExtractsAccount.
        :param margin_balance: The margin_balance of this DataExtractsAccount.
        :param maturity_amount: The maturity_amount of this DataExtractsAccount.
        :param maturity_date: The maturity_date of this DataExtractsAccount.
        :param memo: The memo of this DataExtractsAccount.
        :param minimum_amount_due: The minimum_amount_due of this DataExtractsAccount.
        :param money_market_balance: The money_market_balance of this DataExtractsAccount.
        :param next_level: The next_level of this DataExtractsAccount.
        :param nickname: The nickname of this DataExtractsAccount.
        :param oauth_migration_status: The oauth_migration_status of this DataExtractsAccount.
        :param original_loan_amount: The original_loan_amount of this DataExtractsAccount.
        :param origination_date: The origination_date of this DataExtractsAccount.
        :param over_draft_limit: The over_draft_limit of this DataExtractsAccount.
        :param policy_effective_date: The policy_effective_date of this DataExtractsAccount.
        :param policy_from_date: The policy_from_date of this DataExtractsAccount.
        :param policy_status: The policy_status of this DataExtractsAccount.
        :param policy_term: The policy_term of this DataExtractsAccount.
        :param policy_to_date: The policy_to_date of this DataExtractsAccount.
        :param premium: The premium of this DataExtractsAccount.
        :param premium_payment_term: The premium_payment_term of this DataExtractsAccount.
        :param primary_reward_unit: The primary_reward_unit of this DataExtractsAccount.
        :param principal_balance: The principal_balance of this DataExtractsAccount.
        :param provider_account_id: The provider_account_id of this DataExtractsAccount.
        :param provider_id: The provider_id of this DataExtractsAccount.
        :param provider_name: The provider_name of this DataExtractsAccount.
        :param recurring_payment: The recurring_payment of this DataExtractsAccount.
        :param remaining_balance: The remaining_balance of this DataExtractsAccount.
        :param repayment_plan_type: The repayment_plan_type of this DataExtractsAccount.
        :param reward_balance: The reward_balance of this DataExtractsAccount.
        :param running_balance: The running_balance of this DataExtractsAccount.
        :param short_balance: The short_balance of this DataExtractsAccount.
        :param source_account_status: The source_account_status of this DataExtractsAccount.
        :param source_id: The source_id of this DataExtractsAccount.
        :param term: The term of this DataExtractsAccount.
        :param total_cash_limit: The total_cash_limit of this DataExtractsAccount.
        :param total_credit_limit: The total_credit_limit of this DataExtractsAccount.
        :param total_credit_line: The total_credit_line of this DataExtractsAccount.
        :param total_unvested_balance: The total_unvested_balance of this DataExtractsAccount.
        :param total_vested_balance: The total_vested_balance of this DataExtractsAccount.
        :param user_classification: The user_classification of this DataExtractsAccount.
        :param valuation_type: The valuation_type of this DataExtractsAccount.
        """
        self.openapi_types = {
            '_401k_loan': Money,
            'container': str,
            'account_name': str,
            'account_number': str,
            'account_status': str,
            'account_type': str,
            'address': AccountAddress,
            'aggregation_source': str,
            'amount_due': Money,
            'annual_percentage_yield': float,
            'annuity_balance': Money,
            'apr': float,
            'associated_provider_account_id': List[int],
            'available_balance': Money,
            'available_cash': Money,
            'available_credit': Money,
            'balance': Money,
            'bank_transfer_code': List[BankTransferCode],
            'cash': Money,
            'cash_apr': float,
            'cash_value': Money,
            'classification': str,
            'collateral': str,
            'coverage': List[Coverage],
            'created_date': str,
            'current_balance': Money,
            'current_level': str,
            'dataset': List[AccountDataset],
            'death_benefit': Money,
            'derived_apr': float,
            'displayed_name': str,
            'due_date': str,
            'enrollment_date': str,
            'escrow_balance': Money,
            'estimated_date': str,
            'expiration_date': str,
            'face_amount': Money,
            'frequency': str,
            'guarantor': str,
            'home_insurance_type': str,
            'home_value': Money,
            'id': int,
            'include_in_net_worth': bool,
            'interest_paid_last_year': Money,
            'interest_paid_ytd': Money,
            'interest_rate': float,
            'interest_rate_type': str,
            'is_asset': bool,
            'is_deleted': bool,
            'is_manual': bool,
            'last_employee_contribution_amount': Money,
            'last_employee_contribution_date': str,
            'last_payment': Money,
            'last_payment_amount': Money,
            'last_payment_date': str,
            'last_updated': str,
            'lender': str,
            'life_insurance_type': str,
            'loan_pay_by_date': str,
            'loan_payoff_amount': Money,
            'loan_payoff_details': LoanPayoffDetails,
            'margin_balance': Money,
            'maturity_amount': Money,
            'maturity_date': str,
            'memo': str,
            'minimum_amount_due': Money,
            'money_market_balance': Money,
            'next_level': str,
            'nickname': str,
            'oauth_migration_status': str,
            'original_loan_amount': Money,
            'origination_date': str,
            'over_draft_limit': Money,
            'policy_effective_date': str,
            'policy_from_date': str,
            'policy_status': str,
            'policy_term': str,
            'policy_to_date': str,
            'premium': Money,
            'premium_payment_term': str,
            'primary_reward_unit': str,
            'principal_balance': Money,
            'provider_account_id': int,
            'provider_id': str,
            'provider_name': str,
            'recurring_payment': Money,
            'remaining_balance': Money,
            'repayment_plan_type': str,
            'reward_balance': List[RewardBalance],
            'running_balance': Money,
            'short_balance': Money,
            'source_account_status': str,
            'source_id': str,
            'term': str,
            'total_cash_limit': Money,
            'total_credit_limit': Money,
            'total_credit_line': Money,
            'total_unvested_balance': Money,
            'total_vested_balance': Money,
            'user_classification': str,
            'valuation_type': str
        }

        self.attribute_map = {
            '_401k_loan': '401kLoan',
            'container': 'CONTAINER',
            'account_name': 'accountName',
            'account_number': 'accountNumber',
            'account_status': 'accountStatus',
            'account_type': 'accountType',
            'address': 'address',
            'aggregation_source': 'aggregationSource',
            'amount_due': 'amountDue',
            'annual_percentage_yield': 'annualPercentageYield',
            'annuity_balance': 'annuityBalance',
            'apr': 'apr',
            'associated_provider_account_id': 'associatedProviderAccountId',
            'available_balance': 'availableBalance',
            'available_cash': 'availableCash',
            'available_credit': 'availableCredit',
            'balance': 'balance',
            'bank_transfer_code': 'bankTransferCode',
            'cash': 'cash',
            'cash_apr': 'cashApr',
            'cash_value': 'cashValue',
            'classification': 'classification',
            'collateral': 'collateral',
            'coverage': 'coverage',
            'created_date': 'createdDate',
            'current_balance': 'currentBalance',
            'current_level': 'currentLevel',
            'dataset': 'dataset',
            'death_benefit': 'deathBenefit',
            'derived_apr': 'derivedApr',
            'displayed_name': 'displayedName',
            'due_date': 'dueDate',
            'enrollment_date': 'enrollmentDate',
            'escrow_balance': 'escrowBalance',
            'estimated_date': 'estimatedDate',
            'expiration_date': 'expirationDate',
            'face_amount': 'faceAmount',
            'frequency': 'frequency',
            'guarantor': 'guarantor',
            'home_insurance_type': 'homeInsuranceType',
            'home_value': 'homeValue',
            'id': 'id',
            'include_in_net_worth': 'includeInNetWorth',
            'interest_paid_last_year': 'interestPaidLastYear',
            'interest_paid_ytd': 'interestPaidYTD',
            'interest_rate': 'interestRate',
            'interest_rate_type': 'interestRateType',
            'is_asset': 'isAsset',
            'is_deleted': 'isDeleted',
            'is_manual': 'isManual',
            'last_employee_contribution_amount': 'lastEmployeeContributionAmount',
            'last_employee_contribution_date': 'lastEmployeeContributionDate',
            'last_payment': 'lastPayment',
            'last_payment_amount': 'lastPaymentAmount',
            'last_payment_date': 'lastPaymentDate',
            'last_updated': 'lastUpdated',
            'lender': 'lender',
            'life_insurance_type': 'lifeInsuranceType',
            'loan_pay_by_date': 'loanPayByDate',
            'loan_payoff_amount': 'loanPayoffAmount',
            'loan_payoff_details': 'loanPayoffDetails',
            'margin_balance': 'marginBalance',
            'maturity_amount': 'maturityAmount',
            'maturity_date': 'maturityDate',
            'memo': 'memo',
            'minimum_amount_due': 'minimumAmountDue',
            'money_market_balance': 'moneyMarketBalance',
            'next_level': 'nextLevel',
            'nickname': 'nickname',
            'oauth_migration_status': 'oauthMigrationStatus',
            'original_loan_amount': 'originalLoanAmount',
            'origination_date': 'originationDate',
            'over_draft_limit': 'overDraftLimit',
            'policy_effective_date': 'policyEffectiveDate',
            'policy_from_date': 'policyFromDate',
            'policy_status': 'policyStatus',
            'policy_term': 'policyTerm',
            'policy_to_date': 'policyToDate',
            'premium': 'premium',
            'premium_payment_term': 'premiumPaymentTerm',
            'primary_reward_unit': 'primaryRewardUnit',
            'principal_balance': 'principalBalance',
            'provider_account_id': 'providerAccountId',
            'provider_id': 'providerId',
            'provider_name': 'providerName',
            'recurring_payment': 'recurringPayment',
            'remaining_balance': 'remainingBalance',
            'repayment_plan_type': 'repaymentPlanType',
            'reward_balance': 'rewardBalance',
            'running_balance': 'runningBalance',
            'short_balance': 'shortBalance',
            'source_account_status': 'sourceAccountStatus',
            'source_id': 'sourceId',
            'term': 'term',
            'total_cash_limit': 'totalCashLimit',
            'total_credit_limit': 'totalCreditLimit',
            'total_credit_line': 'totalCreditLine',
            'total_unvested_balance': 'totalUnvestedBalance',
            'total_vested_balance': 'totalVestedBalance',
            'user_classification': 'userClassification',
            'valuation_type': 'valuationType'
        }

        self.__401k_loan = _401k_loan
        self._container = container
        self._account_name = account_name
        self._account_number = account_number
        self._account_status = account_status
        self._account_type = account_type
        self._address = address
        self._aggregation_source = aggregation_source
        self._amount_due = amount_due
        self._annual_percentage_yield = annual_percentage_yield
        self._annuity_balance = annuity_balance
        self._apr = apr
        self._associated_provider_account_id = associated_provider_account_id
        self._available_balance = available_balance
        self._available_cash = available_cash
        self._available_credit = available_credit
        self._balance = balance
        self._bank_transfer_code = bank_transfer_code
        self._cash = cash
        self._cash_apr = cash_apr
        self._cash_value = cash_value
        self._classification = classification
        self._collateral = collateral
        self._coverage = coverage
        self._created_date = created_date
        self._current_balance = current_balance
        self._current_level = current_level
        self._dataset = dataset
        self._death_benefit = death_benefit
        self._derived_apr = derived_apr
        self._displayed_name = displayed_name
        self._due_date = due_date
        self._enrollment_date = enrollment_date
        self._escrow_balance = escrow_balance
        self._estimated_date = estimated_date
        self._expiration_date = expiration_date
        self._face_amount = face_amount
        self._frequency = frequency
        self._guarantor = guarantor
        self._home_insurance_type = home_insurance_type
        self._home_value = home_value
        self._id = id
        self._include_in_net_worth = include_in_net_worth
        self._interest_paid_last_year = interest_paid_last_year
        self._interest_paid_ytd = interest_paid_ytd
        self._interest_rate = interest_rate
        self._interest_rate_type = interest_rate_type
        self._is_asset = is_asset
        self._is_deleted = is_deleted
        self._is_manual = is_manual
        self._last_employee_contribution_amount = last_employee_contribution_amount
        self._last_employee_contribution_date = last_employee_contribution_date
        self._last_payment = last_payment
        self._last_payment_amount = last_payment_amount
        self._last_payment_date = last_payment_date
        self._last_updated = last_updated
        self._lender = lender
        self._life_insurance_type = life_insurance_type
        self._loan_pay_by_date = loan_pay_by_date
        self._loan_payoff_amount = loan_payoff_amount
        self._loan_payoff_details = loan_payoff_details
        self._margin_balance = margin_balance
        self._maturity_amount = maturity_amount
        self._maturity_date = maturity_date
        self._memo = memo
        self._minimum_amount_due = minimum_amount_due
        self._money_market_balance = money_market_balance
        self._next_level = next_level
        self._nickname = nickname
        self._oauth_migration_status = oauth_migration_status
        self._original_loan_amount = original_loan_amount
        self._origination_date = origination_date
        self._over_draft_limit = over_draft_limit
        self._policy_effective_date = policy_effective_date
        self._policy_from_date = policy_from_date
        self._policy_status = policy_status
        self._policy_term = policy_term
        self._policy_to_date = policy_to_date
        self._premium = premium
        self._premium_payment_term = premium_payment_term
        self._primary_reward_unit = primary_reward_unit
        self._principal_balance = principal_balance
        self._provider_account_id = provider_account_id
        self._provider_id = provider_id
        self._provider_name = provider_name
        self._recurring_payment = recurring_payment
        self._remaining_balance = remaining_balance
        self._repayment_plan_type = repayment_plan_type
        self._reward_balance = reward_balance
        self._running_balance = running_balance
        self._short_balance = short_balance
        self._source_account_status = source_account_status
        self._source_id = source_id
        self._term = term
        self._total_cash_limit = total_cash_limit
        self._total_credit_limit = total_credit_limit
        self._total_credit_line = total_credit_line
        self._total_unvested_balance = total_unvested_balance
        self._total_vested_balance = total_vested_balance
        self._user_classification = user_classification
        self._valuation_type = valuation_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataExtractsAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataExtractsAccount of this DataExtractsAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _401k_loan(self):
        """Gets the _401k_loan of this DataExtractsAccount.


        :return: The _401k_loan of this DataExtractsAccount.
        :rtype: Money
        """
        return self.__401k_loan

    @_401k_loan.setter
    def _401k_loan(self, _401k_loan):
        """Sets the _401k_loan of this DataExtractsAccount.


        :param _401k_loan: The _401k_loan of this DataExtractsAccount.
        :type _401k_loan: Money
        """

        self.__401k_loan = _401k_loan

    @property
    def container(self):
        """Gets the container of this DataExtractsAccount.

        The type of service. E.g., Bank, Credit Card, Investment, Insurance, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :return: The container of this DataExtractsAccount.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this DataExtractsAccount.

        The type of service. E.g., Bank, Credit Card, Investment, Insurance, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :param container: The container of this DataExtractsAccount.
        :type container: str
        """
        allowed_values = ["bank", "creditCard", "investment", "insurance", "loan", "reward", "realEstate", "otherAssets", "otherLiabilities"]  # noqa: E501
        if container not in allowed_values:
            raise ValueError(
                "Invalid value for `container` ({0}), must be one of {1}"
                .format(container, allowed_values)
            )

        self._container = container

    @property
    def account_name(self):
        """Gets the account_name of this DataExtractsAccount.

        The account name as it appears at the site.<br>(The POST accounts service response return this field as name)<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The account_name of this DataExtractsAccount.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this DataExtractsAccount.

        The account name as it appears at the site.<br>(The POST accounts service response return this field as name)<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param account_name: The account_name of this DataExtractsAccount.
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def account_number(self):
        """Gets the account_number of this DataExtractsAccount.

        The account number as it appears on the site. (The POST accounts service response return this field as number)<br><b>Additional Details</b>:<b> Bank/ Loan/ Insurance/ Investment</b>:<br> The account number for the bank account as it appears at the site.<br><b>Credit Card</b>: The account number of the card account as it appears at the site,<br>i.e., the card number.The account number can be full or partial based on how it is displayed in the account summary page of the site.In most cases, the site does not display the full account number in the account summary page and additional navigation is required to aggregate it.<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>POST accounts</li><li>GET dataExtracts/userData</li></ul>

        :return: The account_number of this DataExtractsAccount.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this DataExtractsAccount.

        The account number as it appears on the site. (The POST accounts service response return this field as number)<br><b>Additional Details</b>:<b> Bank/ Loan/ Insurance/ Investment</b>:<br> The account number for the bank account as it appears at the site.<br><b>Credit Card</b>: The account number of the card account as it appears at the site,<br>i.e., the card number.The account number can be full or partial based on how it is displayed in the account summary page of the site.In most cases, the site does not display the full account number in the account summary page and additional navigation is required to aggregate it.<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>POST accounts</li><li>GET dataExtracts/userData</li></ul>

        :param account_number: The account_number of this DataExtractsAccount.
        :type account_number: str
        """

        self._account_number = account_number

    @property
    def account_status(self):
        """Gets the account_status of this DataExtractsAccount.

        The status of the account that is updated by the consumer through an application or an API. Valid Values: AccountStatus<br><b>Additional Details:</b><br><b>ACTIVE:</b> All the added manual and aggregated accounts status will be made \"ACTIVE\" by default. <br><b>TO_BE_CLOSED:</b> If the aggregated accounts are not found or closed in the data provider site, Yodlee system marks the status as TO_BE_CLOSED<br><b>INACTIVE:</b> Users can update the status as INACTIVE to stop updating and to stop considering the account in other services<br><b>CLOSED:</b> Users can update the status as CLOSED, if the account is closed with the provider. <br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :return: The account_status of this DataExtractsAccount.
        :rtype: str
        """
        return self._account_status

    @account_status.setter
    def account_status(self, account_status):
        """Sets the account_status of this DataExtractsAccount.

        The status of the account that is updated by the consumer through an application or an API. Valid Values: AccountStatus<br><b>Additional Details:</b><br><b>ACTIVE:</b> All the added manual and aggregated accounts status will be made \"ACTIVE\" by default. <br><b>TO_BE_CLOSED:</b> If the aggregated accounts are not found or closed in the data provider site, Yodlee system marks the status as TO_BE_CLOSED<br><b>INACTIVE:</b> Users can update the status as INACTIVE to stop updating and to stop considering the account in other services<br><b>CLOSED:</b> Users can update the status as CLOSED, if the account is closed with the provider. <br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :param account_status: The account_status of this DataExtractsAccount.
        :type account_status: str
        """
        allowed_values = ["ACTIVE", "INACTIVE", "TO_BE_CLOSED", "CLOSED", "DELETED"]  # noqa: E501
        if account_status not in allowed_values:
            raise ValueError(
                "Invalid value for `account_status` ({0}), must be one of {1}"
                .format(account_status, allowed_values)
            )

        self._account_status = account_status

    @property
    def account_type(self):
        """Gets the account_type of this DataExtractsAccount.

        The type of account that is aggregated, i.e., savings, checking, credit card, charge, HELOC, etc. The account type is derived based on the attributes of the account. <br><b>Valid Values:</b><br><b>Aggregated Account Type</b><br><b>bank</b><ul><li>CHECKING</li><li>SAVINGS</li><li>CD</li><li>PPF</li><li>RECURRING_DEPOSIT</li><li>FSA</li><li>MONEY_MARKET</li><li>IRA</li><li>PREPAID</li></ul><b>creditCard</b><ul><li>OTHER</li><li>CREDIT</li><li>STORE</li><li>CHARGE</li><li>OTHER</li></ul><b>investment (SN 1.0)</b><ul><li>BROKERAGE_MARGIN</li><li>HSA</li><li>IRA</li><li>BROKERAGE_CASH</li><li>401K</li><li>403B</li><li>TRUST</li><li>ANNUITY</li><li>SIMPLE</li><li>CUSTODIAL</li><li>BROKERAGE_CASH_OPTION</li><li>BROKERAGE_MARGIN_OPTION</li><li>INDIVIDUAL</li><li>CORPORATE</li><li>JTTIC</li><li>JTWROS</li><li>COMMUNITY_PROPERTY</li><li>JOINT_BY_ENTIRETY</li><li>CONSERVATORSHIP</li><li>ROTH</li><li>ROTH_CONVERSION</li><li>ROLLOVER</li><li>EDUCATIONAL</li><li>529_PLAN</li><li>457_DEFERRED_COMPENSATION</li><li>401A</li><li>PSP</li><li>MPP</li><li>STOCK_BASKET</li><li>LIVING_TRUST</li><li>REVOCABLE_TRUST</li><li>IRREVOCABLE_TRUST</li><li>CHARITABLE_REMAINDER</li><li>CHARITABLE_LEAD</li><li>CHARITABLE_GIFT_ACCOUNT</li><li>SEP</li><li>UTMA</li><li>UGMA</li><li>ESOPP</li><li>ADMINISTRATOR</li><li>EXECUTOR</li><li>PARTNERSHIP</li><li>SOLE_PROPRIETORSHIP</li><li>CHURCH</li><li>INVESTMENT_CLUB</li><li>RESTRICTED_STOCK_AWARD</li><li>CMA</li><li>EMPLOYEE_STOCK_PURCHASE_PLAN</li><li>PERFORMANCE_PLAN</li><li>BROKERAGE_LINK_ACCOUNT</li><li>MONEY_MARKET</li><li>SUPER_ANNUATION</li><li>REGISTERED_RETIREMENT_SAVINGS_PLAN</li><li>SPOUSAL_RETIREMENT_SAVINGS_PLAN</li><li>DEFERRED_PROFIT_SHARING_PLAN</li><li>NON_REGISTERED_SAVINGS_PLAN</li><li>REGISTERED_EDUCATION_SAVINGS_PLAN</li><li>GROUP_RETIREMENT_SAVINGS_PLAN</li><li>LOCKED_IN_RETIREMENT_SAVINGS_PLAN</li><li>RESTRICTED_LOCKED_IN_SAVINGS_PLAN</li><li>LOCKED_IN_RETIREMENT_ACCOUNT</li><li>REGISTERED_PENSION_PLAN</li><li>TAX_FREE_SAVINGS_ACCOUNT</li><li>LIFE_INCOME_FUND</li><li>REGISTERED_RETIREMENT_INCOME_FUND</li><li>SPOUSAL_RETIREMENT_INCOME_FUND</li><li>LOCKED_IN_REGISTERED_INVESTMENT_FUND</li><li>PRESCRIBED_REGISTERED_RETIREMENT_INCOME_FUND</li><li>GUARANTEED_INVESTMENT_CERTIFICATES</li><li>REGISTERED_DISABILITY_SAVINGS_PLAN</li><li>OTHER</li></ul><b>investment (SN 2.0)</b><ul><li>BROKERAGE_CASH</li><li>BROKERAGE_MARGIN</li><li>INDIVIDUAL_RETIREMENT_ACCOUNT_IRA</li><li>EMPLOYEE_RETIREMENT_ACCOUNT_401K</li><li>EMPLOYEE_RETIREMENT_SAVINGS_PLAN_403B</li><li>TRUST</li><li>ANNUITY</li><li>SIMPLE_IRA</li><li>CUSTODIAL_ACCOUNT</li><li>BROKERAGE_CASH_OPTION</li><li>BROKERAGE_MARGIN_OPTION</li><li>INDIVIDUAL</li><li>CORPORATE_INVESTMENT_ACCOUNT</li><li>JOINT_TENANTS_TENANCY_IN_COMMON_JTIC</li><li>JOINT_TENANTS_WITH_RIGHTS_OF_SURVIVORSHIP_JTWROS</li><li>JOINT_TENANTS_COMMUNITY_PROPERTY</li><li>JOINT_TENANTS_TENANTS_BY_ENTIRETY</li><li>CONSERVATOR</li><li>ROTH_IRA</li><li>ROTH_CONVERSION</li><li>ROLLOVER_IRA</li><li>EDUCATIONAL</li><li>EDUCATIONAL_SAVINGS_PLAN_529</li><li>DEFERRED_COMPENSATION_PLAN_457</li><li>MONEY_PURCHASE_RETIREMENT_PLAN_401A</li><li>PROFIT_SHARING_PLAN</li><li>MONEY_PURCHASE_PLAN</li><li>STOCK_BASKET_ACCOUNT</li><li>LIVING_TRUST</li><li>REVOCABLE_TRUST</li><li>IRREVOCABLE_TRUST</li><li>CHARITABLE_REMAINDER_TRUST</li><li>CHARITABLE_LEAD_TRUST</li><li>CHARITABLE_GIFT_ACCOUNT</li><li>SEP_IRA</li><li>UNIFORM_TRANSFER_TO_MINORS_ACT_UTMA</li><li>UNIFORM_GIFT_TO_MINORS_ACT_UGMA</li><li>EMPLOYEE_STOCK_OWNERSHIP_PLAN_ESOP</li><li>ADMINISTRATOR</li><li>EXECUTOR</li><li>PARTNERSHIP</li><li>PROPRIETORSHIP</li><li>CHURCH_ACCOUNT</li><li>INVESTMENT_CLUB</li><li>RESTRICTED_STOCK_AWARD</li><li>CASH_MANAGEMENT_ACCOUNT</li><li>EMPLOYEE_STOCK_PURCHASE_PLAN_ESPP</li><li>PERFORMANCE_PLAN</li><li>BROKERAGE_LINK_ACCOUNT</li><li>MONEY_MARKET_ACCOUNT</li><li>SUPERANNUATION</li><li>REGISTERED_RETIREMENT_SAVINGS_PLAN_RRSP</li><li>SPOUSAL_RETIREMENT_SAVINGS_PLAN_SRSP</li><li>DEFERRED_PROFIT_SHARING_PLAN_DPSP</li><li>NON_REGISTERED_SAVINGS_PLAN_NRSP</li><li>REGISTERED_EDUCATION_SAVINGS_PLAN_RESP</li><li>GROUP_RETIREMENT_SAVINGS_PLAN_GRSP</li><li>LOCKED_IN_RETIREMENT_SAVINGS_PLAN_LRSP</li><li>RESTRICTED_LOCKED_IN_SAVINGS_PLAN_RLSP</li><li>LOCKED_IN_RETIREMENT_ACCOUNT_LIRA</li><li>REGISTERED_PENSION_PLAN_RPP</li><li>TAX_FREE_SAVINGS_ACCOUNT_TFSA</li><li>LIFE_INCOME_FUND_LIF</li><li>REGISTERED_RETIREMENT_INCOME_FUND_RIF</li><li>SPOUSAL_RETIREMENT_INCOME_FUND_SRIF</li><li>LOCKED_IN_REGISTERED_INVESTMENT_FUND_LRIF</li><li>PRESCRIBED_REGISTERED_RETIREMENT_INCOME_FUND_PRIF</li><li>GUARANTEED_INVESTMENT_CERTIFICATES_GIC</li><li>REGISTERED_DISABILITY_SAVINGS_PLAN_RDSP</li><li>DEFINED_CONTRIBUTION_PLAN</li><li>DEFINED_BENEFIT_PLAN</li><li>EMPLOYEE_STOCK_OPTION_PLAN</li><li>NONQUALIFIED_DEFERRED_COMPENSATION_PLAN_409A</li><li>KEOGH_PLAN</li><li>EMPLOYEE_RETIREMENT_ACCOUNT_ROTH_401K</li><li>DEFERRED_CONTINGENT_CAPITAL_PLAN_DCCP</li><li>EMPLOYEE_BENEFIT_PLAN</li><li>EMPLOYEE_SAVINGS_PLAN</li><li>HEALTH_SAVINGS_ACCOUNT_HSA</li><li>COVERDELL_EDUCATION_SAVINGS_ACCOUNT_ESA</li><li>TESTAMENTARY_TRUST</li><li>ESTATE</li><li>GRANTOR_RETAINED_ANNUITY_TRUST_GRAT</li><li>ADVISORY_ACCOUNT</li><li>NON_PROFIT_ORGANIZATION_501C</li><li>HEALTH_REIMBURSEMENT_ARRANGEMENT_HRA</li><li>INDIVIDUAL_SAVINGS_ACCOUNT_ISA</li><li>CASH_ISA</li><li>STOCKS_AND_SHARES_ISA</li><li>INNOVATIVE_FINANCE_ISA</li><li>JUNIOR_ISA</li><li>EMPLOYEES_PROVIDENT_FUND_ORGANIZATION_EPFO</li><li>PUBLIC_PROVIDENT_FUND_PPF</li><li>EMPLOYEES_PENSION_SCHEME_EPS</li><li>NATIONAL_PENSION_SYSTEM_NPS</li><li>INDEXED_ANNUITY</li><li>ANNUITIZED_ANNUITY</li><li>VARIABLE_ANNUITY</li><li>ROTH_403B</li><li>SPOUSAL_IRA</li><li>SPOUSAL_ROTH_IRA</li><li>SARSEP_IRA</li><li>SUBSTANTIALLY_EQUAL_PERIODIC_PAYMENTS_SEPP</li><li>OFFSHORE_TRUST</li><li>IRREVOCABLE_LIFE_INSURANCE_TRUST</li><li>INTERNATIONAL_TRUST</li><li>LIFE_INTEREST_TRUST</li><li>EMPLOYEE_BENEFIT_TRUST</li><li>PRECIOUS_METAL_ACCOUNT</li><li>INVESTMENT_LOAN_ACCOUNT</li><li>GRANTOR_RETAINED_INCOME_TRUST</li><li>PENSION_PLAN</li><li>OTHER</li></ul><b>loan</b><ul><li>MORTGAGE</li><li>INSTALLMENT_LOAN</li><li>PERSONAL_LOAN</li><li>HOME_EQUITY_LINE_OF_CREDIT</li><li>LINE_OF_CREDIT</li><li>AUTO_LOAN</li><li>STUDENT_LOAN</li><li>HOME_LOAN</li></ul><b>insurance</b><ul><li>AUTO_INSURANCE</li><li>HEALTH_INSURANCE</li><li>HOME_INSURANCE</li><li>LIFE_INSURANCE</li><li>ANNUITY</li><li>TRAVEL_INSURANCE</li><li>INSURANCE</li></ul><b>realEstate</b><ul> <li>REAL_ESTATE</li></ul><b>reward</b><ul><li>REWARD_POINTS</li></ul><b>Manual Account Type</b><br><b>bank</b><ul><li>CHECKING</li><li>SAVINGS</li><li>CD</li><li>PREPAID</li></ul><b>credit</b><ul>  <li>CREDIT</li></ul><b>loan</b><ul>  <li>PERSONAL_LOAN</li><li>HOME_LOAN</li></ul><b>insurance</b><ul><li>INSURANCE</li><li>ANNUITY</li></ul><b>investment</b><ul><li>BROKERAGE_CASH</li></ul><br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The account_type of this DataExtractsAccount.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this DataExtractsAccount.

        The type of account that is aggregated, i.e., savings, checking, credit card, charge, HELOC, etc. The account type is derived based on the attributes of the account. <br><b>Valid Values:</b><br><b>Aggregated Account Type</b><br><b>bank</b><ul><li>CHECKING</li><li>SAVINGS</li><li>CD</li><li>PPF</li><li>RECURRING_DEPOSIT</li><li>FSA</li><li>MONEY_MARKET</li><li>IRA</li><li>PREPAID</li></ul><b>creditCard</b><ul><li>OTHER</li><li>CREDIT</li><li>STORE</li><li>CHARGE</li><li>OTHER</li></ul><b>investment (SN 1.0)</b><ul><li>BROKERAGE_MARGIN</li><li>HSA</li><li>IRA</li><li>BROKERAGE_CASH</li><li>401K</li><li>403B</li><li>TRUST</li><li>ANNUITY</li><li>SIMPLE</li><li>CUSTODIAL</li><li>BROKERAGE_CASH_OPTION</li><li>BROKERAGE_MARGIN_OPTION</li><li>INDIVIDUAL</li><li>CORPORATE</li><li>JTTIC</li><li>JTWROS</li><li>COMMUNITY_PROPERTY</li><li>JOINT_BY_ENTIRETY</li><li>CONSERVATORSHIP</li><li>ROTH</li><li>ROTH_CONVERSION</li><li>ROLLOVER</li><li>EDUCATIONAL</li><li>529_PLAN</li><li>457_DEFERRED_COMPENSATION</li><li>401A</li><li>PSP</li><li>MPP</li><li>STOCK_BASKET</li><li>LIVING_TRUST</li><li>REVOCABLE_TRUST</li><li>IRREVOCABLE_TRUST</li><li>CHARITABLE_REMAINDER</li><li>CHARITABLE_LEAD</li><li>CHARITABLE_GIFT_ACCOUNT</li><li>SEP</li><li>UTMA</li><li>UGMA</li><li>ESOPP</li><li>ADMINISTRATOR</li><li>EXECUTOR</li><li>PARTNERSHIP</li><li>SOLE_PROPRIETORSHIP</li><li>CHURCH</li><li>INVESTMENT_CLUB</li><li>RESTRICTED_STOCK_AWARD</li><li>CMA</li><li>EMPLOYEE_STOCK_PURCHASE_PLAN</li><li>PERFORMANCE_PLAN</li><li>BROKERAGE_LINK_ACCOUNT</li><li>MONEY_MARKET</li><li>SUPER_ANNUATION</li><li>REGISTERED_RETIREMENT_SAVINGS_PLAN</li><li>SPOUSAL_RETIREMENT_SAVINGS_PLAN</li><li>DEFERRED_PROFIT_SHARING_PLAN</li><li>NON_REGISTERED_SAVINGS_PLAN</li><li>REGISTERED_EDUCATION_SAVINGS_PLAN</li><li>GROUP_RETIREMENT_SAVINGS_PLAN</li><li>LOCKED_IN_RETIREMENT_SAVINGS_PLAN</li><li>RESTRICTED_LOCKED_IN_SAVINGS_PLAN</li><li>LOCKED_IN_RETIREMENT_ACCOUNT</li><li>REGISTERED_PENSION_PLAN</li><li>TAX_FREE_SAVINGS_ACCOUNT</li><li>LIFE_INCOME_FUND</li><li>REGISTERED_RETIREMENT_INCOME_FUND</li><li>SPOUSAL_RETIREMENT_INCOME_FUND</li><li>LOCKED_IN_REGISTERED_INVESTMENT_FUND</li><li>PRESCRIBED_REGISTERED_RETIREMENT_INCOME_FUND</li><li>GUARANTEED_INVESTMENT_CERTIFICATES</li><li>REGISTERED_DISABILITY_SAVINGS_PLAN</li><li>OTHER</li></ul><b>investment (SN 2.0)</b><ul><li>BROKERAGE_CASH</li><li>BROKERAGE_MARGIN</li><li>INDIVIDUAL_RETIREMENT_ACCOUNT_IRA</li><li>EMPLOYEE_RETIREMENT_ACCOUNT_401K</li><li>EMPLOYEE_RETIREMENT_SAVINGS_PLAN_403B</li><li>TRUST</li><li>ANNUITY</li><li>SIMPLE_IRA</li><li>CUSTODIAL_ACCOUNT</li><li>BROKERAGE_CASH_OPTION</li><li>BROKERAGE_MARGIN_OPTION</li><li>INDIVIDUAL</li><li>CORPORATE_INVESTMENT_ACCOUNT</li><li>JOINT_TENANTS_TENANCY_IN_COMMON_JTIC</li><li>JOINT_TENANTS_WITH_RIGHTS_OF_SURVIVORSHIP_JTWROS</li><li>JOINT_TENANTS_COMMUNITY_PROPERTY</li><li>JOINT_TENANTS_TENANTS_BY_ENTIRETY</li><li>CONSERVATOR</li><li>ROTH_IRA</li><li>ROTH_CONVERSION</li><li>ROLLOVER_IRA</li><li>EDUCATIONAL</li><li>EDUCATIONAL_SAVINGS_PLAN_529</li><li>DEFERRED_COMPENSATION_PLAN_457</li><li>MONEY_PURCHASE_RETIREMENT_PLAN_401A</li><li>PROFIT_SHARING_PLAN</li><li>MONEY_PURCHASE_PLAN</li><li>STOCK_BASKET_ACCOUNT</li><li>LIVING_TRUST</li><li>REVOCABLE_TRUST</li><li>IRREVOCABLE_TRUST</li><li>CHARITABLE_REMAINDER_TRUST</li><li>CHARITABLE_LEAD_TRUST</li><li>CHARITABLE_GIFT_ACCOUNT</li><li>SEP_IRA</li><li>UNIFORM_TRANSFER_TO_MINORS_ACT_UTMA</li><li>UNIFORM_GIFT_TO_MINORS_ACT_UGMA</li><li>EMPLOYEE_STOCK_OWNERSHIP_PLAN_ESOP</li><li>ADMINISTRATOR</li><li>EXECUTOR</li><li>PARTNERSHIP</li><li>PROPRIETORSHIP</li><li>CHURCH_ACCOUNT</li><li>INVESTMENT_CLUB</li><li>RESTRICTED_STOCK_AWARD</li><li>CASH_MANAGEMENT_ACCOUNT</li><li>EMPLOYEE_STOCK_PURCHASE_PLAN_ESPP</li><li>PERFORMANCE_PLAN</li><li>BROKERAGE_LINK_ACCOUNT</li><li>MONEY_MARKET_ACCOUNT</li><li>SUPERANNUATION</li><li>REGISTERED_RETIREMENT_SAVINGS_PLAN_RRSP</li><li>SPOUSAL_RETIREMENT_SAVINGS_PLAN_SRSP</li><li>DEFERRED_PROFIT_SHARING_PLAN_DPSP</li><li>NON_REGISTERED_SAVINGS_PLAN_NRSP</li><li>REGISTERED_EDUCATION_SAVINGS_PLAN_RESP</li><li>GROUP_RETIREMENT_SAVINGS_PLAN_GRSP</li><li>LOCKED_IN_RETIREMENT_SAVINGS_PLAN_LRSP</li><li>RESTRICTED_LOCKED_IN_SAVINGS_PLAN_RLSP</li><li>LOCKED_IN_RETIREMENT_ACCOUNT_LIRA</li><li>REGISTERED_PENSION_PLAN_RPP</li><li>TAX_FREE_SAVINGS_ACCOUNT_TFSA</li><li>LIFE_INCOME_FUND_LIF</li><li>REGISTERED_RETIREMENT_INCOME_FUND_RIF</li><li>SPOUSAL_RETIREMENT_INCOME_FUND_SRIF</li><li>LOCKED_IN_REGISTERED_INVESTMENT_FUND_LRIF</li><li>PRESCRIBED_REGISTERED_RETIREMENT_INCOME_FUND_PRIF</li><li>GUARANTEED_INVESTMENT_CERTIFICATES_GIC</li><li>REGISTERED_DISABILITY_SAVINGS_PLAN_RDSP</li><li>DEFINED_CONTRIBUTION_PLAN</li><li>DEFINED_BENEFIT_PLAN</li><li>EMPLOYEE_STOCK_OPTION_PLAN</li><li>NONQUALIFIED_DEFERRED_COMPENSATION_PLAN_409A</li><li>KEOGH_PLAN</li><li>EMPLOYEE_RETIREMENT_ACCOUNT_ROTH_401K</li><li>DEFERRED_CONTINGENT_CAPITAL_PLAN_DCCP</li><li>EMPLOYEE_BENEFIT_PLAN</li><li>EMPLOYEE_SAVINGS_PLAN</li><li>HEALTH_SAVINGS_ACCOUNT_HSA</li><li>COVERDELL_EDUCATION_SAVINGS_ACCOUNT_ESA</li><li>TESTAMENTARY_TRUST</li><li>ESTATE</li><li>GRANTOR_RETAINED_ANNUITY_TRUST_GRAT</li><li>ADVISORY_ACCOUNT</li><li>NON_PROFIT_ORGANIZATION_501C</li><li>HEALTH_REIMBURSEMENT_ARRANGEMENT_HRA</li><li>INDIVIDUAL_SAVINGS_ACCOUNT_ISA</li><li>CASH_ISA</li><li>STOCKS_AND_SHARES_ISA</li><li>INNOVATIVE_FINANCE_ISA</li><li>JUNIOR_ISA</li><li>EMPLOYEES_PROVIDENT_FUND_ORGANIZATION_EPFO</li><li>PUBLIC_PROVIDENT_FUND_PPF</li><li>EMPLOYEES_PENSION_SCHEME_EPS</li><li>NATIONAL_PENSION_SYSTEM_NPS</li><li>INDEXED_ANNUITY</li><li>ANNUITIZED_ANNUITY</li><li>VARIABLE_ANNUITY</li><li>ROTH_403B</li><li>SPOUSAL_IRA</li><li>SPOUSAL_ROTH_IRA</li><li>SARSEP_IRA</li><li>SUBSTANTIALLY_EQUAL_PERIODIC_PAYMENTS_SEPP</li><li>OFFSHORE_TRUST</li><li>IRREVOCABLE_LIFE_INSURANCE_TRUST</li><li>INTERNATIONAL_TRUST</li><li>LIFE_INTEREST_TRUST</li><li>EMPLOYEE_BENEFIT_TRUST</li><li>PRECIOUS_METAL_ACCOUNT</li><li>INVESTMENT_LOAN_ACCOUNT</li><li>GRANTOR_RETAINED_INCOME_TRUST</li><li>PENSION_PLAN</li><li>OTHER</li></ul><b>loan</b><ul><li>MORTGAGE</li><li>INSTALLMENT_LOAN</li><li>PERSONAL_LOAN</li><li>HOME_EQUITY_LINE_OF_CREDIT</li><li>LINE_OF_CREDIT</li><li>AUTO_LOAN</li><li>STUDENT_LOAN</li><li>HOME_LOAN</li></ul><b>insurance</b><ul><li>AUTO_INSURANCE</li><li>HEALTH_INSURANCE</li><li>HOME_INSURANCE</li><li>LIFE_INSURANCE</li><li>ANNUITY</li><li>TRAVEL_INSURANCE</li><li>INSURANCE</li></ul><b>realEstate</b><ul> <li>REAL_ESTATE</li></ul><b>reward</b><ul><li>REWARD_POINTS</li></ul><b>Manual Account Type</b><br><b>bank</b><ul><li>CHECKING</li><li>SAVINGS</li><li>CD</li><li>PREPAID</li></ul><b>credit</b><ul>  <li>CREDIT</li></ul><b>loan</b><ul>  <li>PERSONAL_LOAN</li><li>HOME_LOAN</li></ul><b>insurance</b><ul><li>INSURANCE</li><li>ANNUITY</li></ul><b>investment</b><ul><li>BROKERAGE_CASH</li></ul><br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param account_type: The account_type of this DataExtractsAccount.
        :type account_type: str
        """

        self._account_type = account_type

    @property
    def address(self):
        """Gets the address of this DataExtractsAccount.


        :return: The address of this DataExtractsAccount.
        :rtype: AccountAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this DataExtractsAccount.


        :param address: The address of this DataExtractsAccount.
        :type address: AccountAddress
        """

        self._address = address

    @property
    def aggregation_source(self):
        """Gets the aggregation_source of this DataExtractsAccount.

        The source through which the account(s) are added in the system.<br><b>Valid Values</b>: SYSTEM, USER<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :return: The aggregation_source of this DataExtractsAccount.
        :rtype: str
        """
        return self._aggregation_source

    @aggregation_source.setter
    def aggregation_source(self, aggregation_source):
        """Sets the aggregation_source of this DataExtractsAccount.

        The source through which the account(s) are added in the system.<br><b>Valid Values</b>: SYSTEM, USER<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :param aggregation_source: The aggregation_source of this DataExtractsAccount.
        :type aggregation_source: str
        """
        allowed_values = ["SYSTEM", "USER"]  # noqa: E501
        if aggregation_source not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregation_source` ({0}), must be one of {1}"
                .format(aggregation_source, allowed_values)
            )

        self._aggregation_source = aggregation_source

    @property
    def amount_due(self):
        """Gets the amount_due of this DataExtractsAccount.


        :return: The amount_due of this DataExtractsAccount.
        :rtype: Money
        """
        return self._amount_due

    @amount_due.setter
    def amount_due(self, amount_due):
        """Sets the amount_due of this DataExtractsAccount.


        :param amount_due: The amount_due of this DataExtractsAccount.
        :type amount_due: Money
        """

        self._amount_due = amount_due

    @property
    def annual_percentage_yield(self):
        """Gets the annual_percentage_yield of this DataExtractsAccount.

        Annual percentage yield (APY) is a normalized representation of an interest rate, based on a compounding period of one year. APY generally refers to the rate paid to a depositor by a financial institution on an account.<br><b>Applicable containers</b>: bank<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The annual_percentage_yield of this DataExtractsAccount.
        :rtype: float
        """
        return self._annual_percentage_yield

    @annual_percentage_yield.setter
    def annual_percentage_yield(self, annual_percentage_yield):
        """Sets the annual_percentage_yield of this DataExtractsAccount.

        Annual percentage yield (APY) is a normalized representation of an interest rate, based on a compounding period of one year. APY generally refers to the rate paid to a depositor by a financial institution on an account.<br><b>Applicable containers</b>: bank<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param annual_percentage_yield: The annual_percentage_yield of this DataExtractsAccount.
        :type annual_percentage_yield: float
        """

        self._annual_percentage_yield = annual_percentage_yield

    @property
    def annuity_balance(self):
        """Gets the annuity_balance of this DataExtractsAccount.


        :return: The annuity_balance of this DataExtractsAccount.
        :rtype: Money
        """
        return self._annuity_balance

    @annuity_balance.setter
    def annuity_balance(self, annuity_balance):
        """Sets the annuity_balance of this DataExtractsAccount.


        :param annuity_balance: The annuity_balance of this DataExtractsAccount.
        :type annuity_balance: Money
        """

        self._annuity_balance = annuity_balance

    @property
    def apr(self):
        """Gets the apr of this DataExtractsAccount.

        The annual percentage rate (APR) is the yearly rate of interest on the credit card account.<br><b>Additional Details:</b> The yearly percentage rate charged when a balance is held on a credit card. This rate of interest is applied every month on the outstanding credit card balance.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The apr of this DataExtractsAccount.
        :rtype: float
        """
        return self._apr

    @apr.setter
    def apr(self, apr):
        """Sets the apr of this DataExtractsAccount.

        The annual percentage rate (APR) is the yearly rate of interest on the credit card account.<br><b>Additional Details:</b> The yearly percentage rate charged when a balance is held on a credit card. This rate of interest is applied every month on the outstanding credit card balance.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param apr: The apr of this DataExtractsAccount.
        :type apr: float
        """

        self._apr = apr

    @property
    def associated_provider_account_id(self):
        """Gets the associated_provider_account_id of this DataExtractsAccount.

        The providerAccountIds that share the account with the primary providerAccountId that was created when the user had added the account for the first time.<br><b>Additional Details</b>: This attribute is returned in the response only if the account deduplication feature is enabled and the same account is mapped to more than one provider account IDs indicating the account is owned by more than one user, for example, joint accounts.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All Containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The associated_provider_account_id of this DataExtractsAccount.
        :rtype: List[int]
        """
        return self._associated_provider_account_id

    @associated_provider_account_id.setter
    def associated_provider_account_id(self, associated_provider_account_id):
        """Sets the associated_provider_account_id of this DataExtractsAccount.

        The providerAccountIds that share the account with the primary providerAccountId that was created when the user had added the account for the first time.<br><b>Additional Details</b>: This attribute is returned in the response only if the account deduplication feature is enabled and the same account is mapped to more than one provider account IDs indicating the account is owned by more than one user, for example, joint accounts.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All Containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param associated_provider_account_id: The associated_provider_account_id of this DataExtractsAccount.
        :type associated_provider_account_id: List[int]
        """

        self._associated_provider_account_id = associated_provider_account_id

    @property
    def available_balance(self):
        """Gets the available_balance of this DataExtractsAccount.


        :return: The available_balance of this DataExtractsAccount.
        :rtype: Money
        """
        return self._available_balance

    @available_balance.setter
    def available_balance(self, available_balance):
        """Sets the available_balance of this DataExtractsAccount.


        :param available_balance: The available_balance of this DataExtractsAccount.
        :type available_balance: Money
        """

        self._available_balance = available_balance

    @property
    def available_cash(self):
        """Gets the available_cash of this DataExtractsAccount.


        :return: The available_cash of this DataExtractsAccount.
        :rtype: Money
        """
        return self._available_cash

    @available_cash.setter
    def available_cash(self, available_cash):
        """Sets the available_cash of this DataExtractsAccount.


        :param available_cash: The available_cash of this DataExtractsAccount.
        :type available_cash: Money
        """

        self._available_cash = available_cash

    @property
    def available_credit(self):
        """Gets the available_credit of this DataExtractsAccount.


        :return: The available_credit of this DataExtractsAccount.
        :rtype: Money
        """
        return self._available_credit

    @available_credit.setter
    def available_credit(self, available_credit):
        """Sets the available_credit of this DataExtractsAccount.


        :param available_credit: The available_credit of this DataExtractsAccount.
        :type available_credit: Money
        """

        self._available_credit = available_credit

    @property
    def balance(self):
        """Gets the balance of this DataExtractsAccount.


        :return: The balance of this DataExtractsAccount.
        :rtype: Money
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this DataExtractsAccount.


        :param balance: The balance of this DataExtractsAccount.
        :type balance: Money
        """

        self._balance = balance

    @property
    def bank_transfer_code(self):
        """Gets the bank_transfer_code of this DataExtractsAccount.

        Bank and branch identification information.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment, loan<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The bank_transfer_code of this DataExtractsAccount.
        :rtype: List[BankTransferCode]
        """
        return self._bank_transfer_code

    @bank_transfer_code.setter
    def bank_transfer_code(self, bank_transfer_code):
        """Sets the bank_transfer_code of this DataExtractsAccount.

        Bank and branch identification information.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment, loan<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param bank_transfer_code: The bank_transfer_code of this DataExtractsAccount.
        :type bank_transfer_code: List[BankTransferCode]
        """

        self._bank_transfer_code = bank_transfer_code

    @property
    def cash(self):
        """Gets the cash of this DataExtractsAccount.


        :return: The cash of this DataExtractsAccount.
        :rtype: Money
        """
        return self._cash

    @cash.setter
    def cash(self, cash):
        """Sets the cash of this DataExtractsAccount.


        :param cash: The cash of this DataExtractsAccount.
        :type cash: Money
        """

        self._cash = cash

    @property
    def cash_apr(self):
        """Gets the cash_apr of this DataExtractsAccount.

        Annual percentage rate applied to cash withdrawals on the card.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The cash_apr of this DataExtractsAccount.
        :rtype: float
        """
        return self._cash_apr

    @cash_apr.setter
    def cash_apr(self, cash_apr):
        """Sets the cash_apr of this DataExtractsAccount.

        Annual percentage rate applied to cash withdrawals on the card.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param cash_apr: The cash_apr of this DataExtractsAccount.
        :type cash_apr: float
        """

        self._cash_apr = cash_apr

    @property
    def cash_value(self):
        """Gets the cash_value of this DataExtractsAccount.


        :return: The cash_value of this DataExtractsAccount.
        :rtype: Money
        """
        return self._cash_value

    @cash_value.setter
    def cash_value(self, cash_value):
        """Sets the cash_value of this DataExtractsAccount.


        :param cash_value: The cash_value of this DataExtractsAccount.
        :type cash_value: Money
        """

        self._cash_value = cash_value

    @property
    def classification(self):
        """Gets the classification of this DataExtractsAccount.

        The classification of the account such as personal, corporate, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, creditCard, investment, reward, loan, insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :return: The classification of this DataExtractsAccount.
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this DataExtractsAccount.

        The classification of the account such as personal, corporate, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, creditCard, investment, reward, loan, insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :param classification: The classification of this DataExtractsAccount.
        :type classification: str
        """
        allowed_values = ["OTHER", "PERSONAL", "CORPORATE", "SMALL_BUSINESS", "TRUST", "ADD_ON_CARD", "VIRTUAL_CARD"]  # noqa: E501
        if classification not in allowed_values:
            raise ValueError(
                "Invalid value for `classification` ({0}), must be one of {1}"
                .format(classification, allowed_values)
            )

        self._classification = classification

    @property
    def collateral(self):
        """Gets the collateral of this DataExtractsAccount.

        Property or possession offered to support a loan that can be seized on a default.<br><b>Applicable containers</b>: loan<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The collateral of this DataExtractsAccount.
        :rtype: str
        """
        return self._collateral

    @collateral.setter
    def collateral(self, collateral):
        """Sets the collateral of this DataExtractsAccount.

        Property or possession offered to support a loan that can be seized on a default.<br><b>Applicable containers</b>: loan<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param collateral: The collateral of this DataExtractsAccount.
        :type collateral: str
        """

        self._collateral = collateral

    @property
    def coverage(self):
        """Gets the coverage of this DataExtractsAccount.

        The coverage-related details of the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The coverage of this DataExtractsAccount.
        :rtype: List[Coverage]
        """
        return self._coverage

    @coverage.setter
    def coverage(self, coverage):
        """Sets the coverage of this DataExtractsAccount.

        The coverage-related details of the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param coverage: The coverage of this DataExtractsAccount.
        :type coverage: List[Coverage]
        """

        self._coverage = coverage

    @property
    def created_date(self):
        """Gets the created_date of this DataExtractsAccount.

        The date on which the account is created in the Yodlee system.<br><b>Additional Details:</b> It is the date when the user links or aggregates the account(s) that are held with the provider to the Yodlee system.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The created_date of this DataExtractsAccount.
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this DataExtractsAccount.

        The date on which the account is created in the Yodlee system.<br><b>Additional Details:</b> It is the date when the user links or aggregates the account(s) that are held with the provider to the Yodlee system.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param created_date: The created_date of this DataExtractsAccount.
        :type created_date: str
        """

        self._created_date = created_date

    @property
    def current_balance(self):
        """Gets the current_balance of this DataExtractsAccount.


        :return: The current_balance of this DataExtractsAccount.
        :rtype: Money
        """
        return self._current_balance

    @current_balance.setter
    def current_balance(self, current_balance):
        """Sets the current_balance of this DataExtractsAccount.


        :param current_balance: The current_balance of this DataExtractsAccount.
        :type current_balance: Money
        """

        self._current_balance = current_balance

    @property
    def current_level(self):
        """Gets the current_level of this DataExtractsAccount.

        Current level of the reward program the user is associated with. E.g. Silver, Jade etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The current_level of this DataExtractsAccount.
        :rtype: str
        """
        return self._current_level

    @current_level.setter
    def current_level(self, current_level):
        """Sets the current_level of this DataExtractsAccount.

        Current level of the reward program the user is associated with. E.g. Silver, Jade etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param current_level: The current_level of this DataExtractsAccount.
        :type current_level: str
        """

        self._current_level = current_level

    @property
    def dataset(self):
        """Gets the dataset of this DataExtractsAccount.

        Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The dataset of this DataExtractsAccount.
        :rtype: List[AccountDataset]
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this DataExtractsAccount.

        Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param dataset: The dataset of this DataExtractsAccount.
        :type dataset: List[AccountDataset]
        """

        self._dataset = dataset

    @property
    def death_benefit(self):
        """Gets the death_benefit of this DataExtractsAccount.


        :return: The death_benefit of this DataExtractsAccount.
        :rtype: Money
        """
        return self._death_benefit

    @death_benefit.setter
    def death_benefit(self, death_benefit):
        """Sets the death_benefit of this DataExtractsAccount.


        :param death_benefit: The death_benefit of this DataExtractsAccount.
        :type death_benefit: Money
        """

        self._death_benefit = death_benefit

    @property
    def derived_apr(self):
        """Gets the derived_apr of this DataExtractsAccount.

        Derived APR will be an estimated purchase APR based on consumers credit card transactions and credit card purchase.<br><b>Aggregated / Manual / Derived</b>: Derived<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The derived_apr of this DataExtractsAccount.
        :rtype: float
        """
        return self._derived_apr

    @derived_apr.setter
    def derived_apr(self, derived_apr):
        """Sets the derived_apr of this DataExtractsAccount.

        Derived APR will be an estimated purchase APR based on consumers credit card transactions and credit card purchase.<br><b>Aggregated / Manual / Derived</b>: Derived<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param derived_apr: The derived_apr of this DataExtractsAccount.
        :type derived_apr: float
        """

        self._derived_apr = derived_apr

    @property
    def displayed_name(self):
        """Gets the displayed_name of this DataExtractsAccount.

        The name or identification of the account owner, as it appears at the FI site. <br><b>Note:</b> The account holder name can be full or partial based on how it is displayed in the account summary page of the FI site. In most cases, the FI site does not display the full account holder name in the account summary page.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan,  reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The displayed_name of this DataExtractsAccount.
        :rtype: str
        """
        return self._displayed_name

    @displayed_name.setter
    def displayed_name(self, displayed_name):
        """Sets the displayed_name of this DataExtractsAccount.

        The name or identification of the account owner, as it appears at the FI site. <br><b>Note:</b> The account holder name can be full or partial based on how it is displayed in the account summary page of the FI site. In most cases, the FI site does not display the full account holder name in the account summary page.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan,  reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param displayed_name: The displayed_name of this DataExtractsAccount.
        :type displayed_name: str
        """

        self._displayed_name = displayed_name

    @property
    def due_date(self):
        """Gets the due_date of this DataExtractsAccount.

        The date on which the due amount has to be paid. <br><b>Additional Details:</b><br><b>Credit Card:</b> The monthly date by when the minimum payment is due to be paid on the credit card account. <br><b>Loan:</b> The date on or before which the due amount should be paid.<br><b>Note:</b> The due date at the account-level can differ from the due date field at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard, loan, insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The due_date of this DataExtractsAccount.
        :rtype: str
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this DataExtractsAccount.

        The date on which the due amount has to be paid. <br><b>Additional Details:</b><br><b>Credit Card:</b> The monthly date by when the minimum payment is due to be paid on the credit card account. <br><b>Loan:</b> The date on or before which the due amount should be paid.<br><b>Note:</b> The due date at the account-level can differ from the due date field at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard, loan, insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param due_date: The due_date of this DataExtractsAccount.
        :type due_date: str
        """

        self._due_date = due_date

    @property
    def enrollment_date(self):
        """Gets the enrollment_date of this DataExtractsAccount.

        Date on which the user is enrolled on the rewards program.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The enrollment_date of this DataExtractsAccount.
        :rtype: str
        """
        return self._enrollment_date

    @enrollment_date.setter
    def enrollment_date(self, enrollment_date):
        """Sets the enrollment_date of this DataExtractsAccount.

        Date on which the user is enrolled on the rewards program.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param enrollment_date: The enrollment_date of this DataExtractsAccount.
        :type enrollment_date: str
        """

        self._enrollment_date = enrollment_date

    @property
    def escrow_balance(self):
        """Gets the escrow_balance of this DataExtractsAccount.


        :return: The escrow_balance of this DataExtractsAccount.
        :rtype: Money
        """
        return self._escrow_balance

    @escrow_balance.setter
    def escrow_balance(self, escrow_balance):
        """Sets the escrow_balance of this DataExtractsAccount.


        :param escrow_balance: The escrow_balance of this DataExtractsAccount.
        :type escrow_balance: Money
        """

        self._escrow_balance = escrow_balance

    @property
    def estimated_date(self):
        """Gets the estimated_date of this DataExtractsAccount.

        The date on which the home value was estimated.<br><br><b>Aggregated / Manual</b>: Manual<br><b>Applicable containers</b>: realEstate<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The estimated_date of this DataExtractsAccount.
        :rtype: str
        """
        return self._estimated_date

    @estimated_date.setter
    def estimated_date(self, estimated_date):
        """Sets the estimated_date of this DataExtractsAccount.

        The date on which the home value was estimated.<br><br><b>Aggregated / Manual</b>: Manual<br><b>Applicable containers</b>: realEstate<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param estimated_date: The estimated_date of this DataExtractsAccount.
        :type estimated_date: str
        """

        self._estimated_date = estimated_date

    @property
    def expiration_date(self):
        """Gets the expiration_date of this DataExtractsAccount.

        The date on which the insurance policy expires or matures.<br><b>Additional Details:</b> The due date at the account-level can differ from the due date field at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The expiration_date of this DataExtractsAccount.
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this DataExtractsAccount.

        The date on which the insurance policy expires or matures.<br><b>Additional Details:</b> The due date at the account-level can differ from the due date field at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param expiration_date: The expiration_date of this DataExtractsAccount.
        :type expiration_date: str
        """

        self._expiration_date = expiration_date

    @property
    def face_amount(self):
        """Gets the face_amount of this DataExtractsAccount.


        :return: The face_amount of this DataExtractsAccount.
        :rtype: Money
        """
        return self._face_amount

    @face_amount.setter
    def face_amount(self, face_amount):
        """Sets the face_amount of this DataExtractsAccount.


        :param face_amount: The face_amount of this DataExtractsAccount.
        :type face_amount: Money
        """

        self._face_amount = face_amount

    @property
    def frequency(self):
        """Gets the frequency of this DataExtractsAccount.

        The frequency of the billing cycle of the account in case of card. The frequency in which premiums are paid in an insurance policy such as monthly, quarterly, and annually. The frequency in which due amounts are paid in a loan  account.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>:  creditCard, insurance, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :return: The frequency of this DataExtractsAccount.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this DataExtractsAccount.

        The frequency of the billing cycle of the account in case of card. The frequency in which premiums are paid in an insurance policy such as monthly, quarterly, and annually. The frequency in which due amounts are paid in a loan  account.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>:  creditCard, insurance, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :param frequency: The frequency of this DataExtractsAccount.
        :type frequency: str
        """
        allowed_values = ["DAILY", "ONE_TIME", "WEEKLY", "EVERY_2_WEEKS", "SEMI_MONTHLY", "MONTHLY", "QUARTERLY", "SEMI_ANNUALLY", "ANNUALLY", "EVERY_2_MONTHS", "EBILL", "FIRST_DAY_MONTHLY", "LAST_DAY_MONTHLY", "EVERY_4_WEEKS", "UNKNOWN", "OTHER"]  # noqa: E501
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def guarantor(self):
        """Gets the guarantor of this DataExtractsAccount.

        A nonprofit or state organization that works with lender, servicer, school, and the Department of Education to help successfully repay Federal Family Education Loan Program (FFELP) loans. If FFELP student loans default, the guarantor takes ownership of them.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The guarantor of this DataExtractsAccount.
        :rtype: str
        """
        return self._guarantor

    @guarantor.setter
    def guarantor(self, guarantor):
        """Sets the guarantor of this DataExtractsAccount.

        A nonprofit or state organization that works with lender, servicer, school, and the Department of Education to help successfully repay Federal Family Education Loan Program (FFELP) loans. If FFELP student loans default, the guarantor takes ownership of them.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param guarantor: The guarantor of this DataExtractsAccount.
        :type guarantor: str
        """

        self._guarantor = guarantor

    @property
    def home_insurance_type(self):
        """Gets the home_insurance_type of this DataExtractsAccount.

        Type of home insurance, like -<ul><li>HOME_OWNER</li><li>RENTAL</li><li>RENTER</li><li>etc..</li></ul><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :return: The home_insurance_type of this DataExtractsAccount.
        :rtype: str
        """
        return self._home_insurance_type

    @home_insurance_type.setter
    def home_insurance_type(self, home_insurance_type):
        """Sets the home_insurance_type of this DataExtractsAccount.

        Type of home insurance, like -<ul><li>HOME_OWNER</li><li>RENTAL</li><li>RENTER</li><li>etc..</li></ul><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :param home_insurance_type: The home_insurance_type of this DataExtractsAccount.
        :type home_insurance_type: str
        """
        allowed_values = ["HOME_OWNER", "RENTAL", "RENTER", "UNKNOWN", "OTHER"]  # noqa: E501
        if home_insurance_type not in allowed_values:
            raise ValueError(
                "Invalid value for `home_insurance_type` ({0}), must be one of {1}"
                .format(home_insurance_type, allowed_values)
            )

        self._home_insurance_type = home_insurance_type

    @property
    def home_value(self):
        """Gets the home_value of this DataExtractsAccount.


        :return: The home_value of this DataExtractsAccount.
        :rtype: Money
        """
        return self._home_value

    @home_value.setter
    def home_value(self, home_value):
        """Sets the home_value of this DataExtractsAccount.


        :param home_value: The home_value of this DataExtractsAccount.
        :type home_value: Money
        """

        self._home_value = home_value

    @property
    def id(self):
        """Gets the id of this DataExtractsAccount.

        The primary key of the account resource and the unique identifier for the account.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts </li><li>GET accounts/{accountId}</li><li>GET investmentOptions</li><li>GET accounts/historicalBalances</li><li>POST accounts</li><li>GET dataExtracts/userData</li></ul>

        :return: The id of this DataExtractsAccount.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataExtractsAccount.

        The primary key of the account resource and the unique identifier for the account.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts </li><li>GET accounts/{accountId}</li><li>GET investmentOptions</li><li>GET accounts/historicalBalances</li><li>POST accounts</li><li>GET dataExtracts/userData</li></ul>

        :param id: The id of this DataExtractsAccount.
        :type id: int
        """

        self._id = id

    @property
    def include_in_net_worth(self):
        """Gets the include_in_net_worth of this DataExtractsAccount.

        Used to determine  whether an account to be considered in the networth calculation.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank,creditCard,loan,investment,insurance,realEstate,otherAssets,otherLiabilities<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The include_in_net_worth of this DataExtractsAccount.
        :rtype: bool
        """
        return self._include_in_net_worth

    @include_in_net_worth.setter
    def include_in_net_worth(self, include_in_net_worth):
        """Sets the include_in_net_worth of this DataExtractsAccount.

        Used to determine  whether an account to be considered in the networth calculation.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank,creditCard,loan,investment,insurance,realEstate,otherAssets,otherLiabilities<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param include_in_net_worth: The include_in_net_worth of this DataExtractsAccount.
        :type include_in_net_worth: bool
        """

        self._include_in_net_worth = include_in_net_worth

    @property
    def interest_paid_last_year(self):
        """Gets the interest_paid_last_year of this DataExtractsAccount.


        :return: The interest_paid_last_year of this DataExtractsAccount.
        :rtype: Money
        """
        return self._interest_paid_last_year

    @interest_paid_last_year.setter
    def interest_paid_last_year(self, interest_paid_last_year):
        """Sets the interest_paid_last_year of this DataExtractsAccount.


        :param interest_paid_last_year: The interest_paid_last_year of this DataExtractsAccount.
        :type interest_paid_last_year: Money
        """

        self._interest_paid_last_year = interest_paid_last_year

    @property
    def interest_paid_ytd(self):
        """Gets the interest_paid_ytd of this DataExtractsAccount.


        :return: The interest_paid_ytd of this DataExtractsAccount.
        :rtype: Money
        """
        return self._interest_paid_ytd

    @interest_paid_ytd.setter
    def interest_paid_ytd(self, interest_paid_ytd):
        """Sets the interest_paid_ytd of this DataExtractsAccount.


        :param interest_paid_ytd: The interest_paid_ytd of this DataExtractsAccount.
        :type interest_paid_ytd: Money
        """

        self._interest_paid_ytd = interest_paid_ytd

    @property
    def interest_rate(self):
        """Gets the interest_rate of this DataExtractsAccount.

        <br><b>Bank:</b> The interest rate offered by a FI to its depositors on a bank account.<br><b>Loan:</b> Interest rate applied on the loan.<br><b>Additional Details:</b><br><b>Note:</b> The Interest Rate field is only applicable for the following account types: savings, checking, money market, and certificate of deposit.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The interest_rate of this DataExtractsAccount.
        :rtype: float
        """
        return self._interest_rate

    @interest_rate.setter
    def interest_rate(self, interest_rate):
        """Sets the interest_rate of this DataExtractsAccount.

        <br><b>Bank:</b> The interest rate offered by a FI to its depositors on a bank account.<br><b>Loan:</b> Interest rate applied on the loan.<br><b>Additional Details:</b><br><b>Note:</b> The Interest Rate field is only applicable for the following account types: savings, checking, money market, and certificate of deposit.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param interest_rate: The interest_rate of this DataExtractsAccount.
        :type interest_rate: float
        """

        self._interest_rate = interest_rate

    @property
    def interest_rate_type(self):
        """Gets the interest_rate_type of this DataExtractsAccount.

        The type of the interest rate, for example, fixed or variable.<br><b>Applicable containers</b>: loan<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :return: The interest_rate_type of this DataExtractsAccount.
        :rtype: str
        """
        return self._interest_rate_type

    @interest_rate_type.setter
    def interest_rate_type(self, interest_rate_type):
        """Sets the interest_rate_type of this DataExtractsAccount.

        The type of the interest rate, for example, fixed or variable.<br><b>Applicable containers</b>: loan<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :param interest_rate_type: The interest_rate_type of this DataExtractsAccount.
        :type interest_rate_type: str
        """
        allowed_values = ["FIXED", "VARIABLE", "UNKNOWN", "OTHER"]  # noqa: E501
        if interest_rate_type not in allowed_values:
            raise ValueError(
                "Invalid value for `interest_rate_type` ({0}), must be one of {1}"
                .format(interest_rate_type, allowed_values)
            )

        self._interest_rate_type = interest_rate_type

    @property
    def is_asset(self):
        """Gets the is_asset of this DataExtractsAccount.

        The account to be considered as an asset or liability.<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The is_asset of this DataExtractsAccount.
        :rtype: bool
        """
        return self._is_asset

    @is_asset.setter
    def is_asset(self, is_asset):
        """Sets the is_asset of this DataExtractsAccount.

        The account to be considered as an asset or liability.<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param is_asset: The is_asset of this DataExtractsAccount.
        :type is_asset: bool
        """

        self._is_asset = is_asset

    @property
    def is_deleted(self):
        """Gets the is_deleted of this DataExtractsAccount.

        Indicates if the account is marked as deleted.<b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET dataExtracts/userData</li></ul>

        :return: The is_deleted of this DataExtractsAccount.
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this DataExtractsAccount.

        Indicates if the account is marked as deleted.<b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET dataExtracts/userData</li></ul>

        :param is_deleted: The is_deleted of this DataExtractsAccount.
        :type is_deleted: bool
        """

        self._is_deleted = is_deleted

    @property
    def is_manual(self):
        """Gets the is_manual of this DataExtractsAccount.

        Indicates if an account is aggregated from a site or it is a manual account i.e. account information manually provided by the user.<br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The is_manual of this DataExtractsAccount.
        :rtype: bool
        """
        return self._is_manual

    @is_manual.setter
    def is_manual(self, is_manual):
        """Sets the is_manual of this DataExtractsAccount.

        Indicates if an account is aggregated from a site or it is a manual account i.e. account information manually provided by the user.<br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param is_manual: The is_manual of this DataExtractsAccount.
        :type is_manual: bool
        """

        self._is_manual = is_manual

    @property
    def last_employee_contribution_amount(self):
        """Gets the last_employee_contribution_amount of this DataExtractsAccount.


        :return: The last_employee_contribution_amount of this DataExtractsAccount.
        :rtype: Money
        """
        return self._last_employee_contribution_amount

    @last_employee_contribution_amount.setter
    def last_employee_contribution_amount(self, last_employee_contribution_amount):
        """Sets the last_employee_contribution_amount of this DataExtractsAccount.


        :param last_employee_contribution_amount: The last_employee_contribution_amount of this DataExtractsAccount.
        :type last_employee_contribution_amount: Money
        """

        self._last_employee_contribution_amount = last_employee_contribution_amount

    @property
    def last_employee_contribution_date(self):
        """Gets the last_employee_contribution_date of this DataExtractsAccount.

        The date on which the last employee contribution was made to the 401k account.<br><b>Note:</b> The last employee contribution date field is derived from the transaction data and not aggregated from the FI site. The field is only applicable to the 401k account type.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The last_employee_contribution_date of this DataExtractsAccount.
        :rtype: str
        """
        return self._last_employee_contribution_date

    @last_employee_contribution_date.setter
    def last_employee_contribution_date(self, last_employee_contribution_date):
        """Sets the last_employee_contribution_date of this DataExtractsAccount.

        The date on which the last employee contribution was made to the 401k account.<br><b>Note:</b> The last employee contribution date field is derived from the transaction data and not aggregated from the FI site. The field is only applicable to the 401k account type.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param last_employee_contribution_date: The last_employee_contribution_date of this DataExtractsAccount.
        :type last_employee_contribution_date: str
        """

        self._last_employee_contribution_date = last_employee_contribution_date

    @property
    def last_payment(self):
        """Gets the last_payment of this DataExtractsAccount.


        :return: The last_payment of this DataExtractsAccount.
        :rtype: Money
        """
        return self._last_payment

    @last_payment.setter
    def last_payment(self, last_payment):
        """Sets the last_payment of this DataExtractsAccount.


        :param last_payment: The last_payment of this DataExtractsAccount.
        :type last_payment: Money
        """

        self._last_payment = last_payment

    @property
    def last_payment_amount(self):
        """Gets the last_payment_amount of this DataExtractsAccount.


        :return: The last_payment_amount of this DataExtractsAccount.
        :rtype: Money
        """
        return self._last_payment_amount

    @last_payment_amount.setter
    def last_payment_amount(self, last_payment_amount):
        """Sets the last_payment_amount of this DataExtractsAccount.


        :param last_payment_amount: The last_payment_amount of this DataExtractsAccount.
        :type last_payment_amount: Money
        """

        self._last_payment_amount = last_payment_amount

    @property
    def last_payment_date(self):
        """Gets the last_payment_date of this DataExtractsAccount.

        The date on which the payment for the previous or current billing cycle is done.<br><b>Additional Details:</b> If the payment is already done for the current billing cycle, then the field indicates the payment date of the current billing cycle. If payment is yet to be done for the current billing cycle, then the field indicates the date on which the payment was made for any of the previous billing cycles. The last payment date at the account-level can differ from the last payment date at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard, loan, insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The last_payment_date of this DataExtractsAccount.
        :rtype: str
        """
        return self._last_payment_date

    @last_payment_date.setter
    def last_payment_date(self, last_payment_date):
        """Sets the last_payment_date of this DataExtractsAccount.

        The date on which the payment for the previous or current billing cycle is done.<br><b>Additional Details:</b> If the payment is already done for the current billing cycle, then the field indicates the payment date of the current billing cycle. If payment is yet to be done for the current billing cycle, then the field indicates the date on which the payment was made for any of the previous billing cycles. The last payment date at the account-level can differ from the last payment date at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard, loan, insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param last_payment_date: The last_payment_date of this DataExtractsAccount.
        :type last_payment_date: str
        """

        self._last_payment_date = last_payment_date

    @property
    def last_updated(self):
        """Gets the last_updated of this DataExtractsAccount.

        The date time the account information was last retrieved from the provider site and updated in the Yodlee system.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The last_updated of this DataExtractsAccount.
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this DataExtractsAccount.

        The date time the account information was last retrieved from the provider site and updated in the Yodlee system.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param last_updated: The last_updated of this DataExtractsAccount.
        :type last_updated: str
        """

        self._last_updated = last_updated

    @property
    def lender(self):
        """Gets the lender of this DataExtractsAccount.

        The financial institution that provides the loan.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The lender of this DataExtractsAccount.
        :rtype: str
        """
        return self._lender

    @lender.setter
    def lender(self, lender):
        """Sets the lender of this DataExtractsAccount.

        The financial institution that provides the loan.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param lender: The lender of this DataExtractsAccount.
        :type lender: str
        """

        self._lender = lender

    @property
    def life_insurance_type(self):
        """Gets the life_insurance_type of this DataExtractsAccount.

        Type of life insurance.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :return: The life_insurance_type of this DataExtractsAccount.
        :rtype: str
        """
        return self._life_insurance_type

    @life_insurance_type.setter
    def life_insurance_type(self, life_insurance_type):
        """Sets the life_insurance_type of this DataExtractsAccount.

        Type of life insurance.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :param life_insurance_type: The life_insurance_type of this DataExtractsAccount.
        :type life_insurance_type: str
        """
        allowed_values = ["OTHER", "TERM_LIFE_INSURANCE", "UNIVERSAL_LIFE_INSURANCE", "WHOLE_LIFE_INSURANCE", "VARIABLE_LIFE_INSURANCE", "ULIP", "ENDOWMENT"]  # noqa: E501
        if life_insurance_type not in allowed_values:
            raise ValueError(
                "Invalid value for `life_insurance_type` ({0}), must be one of {1}"
                .format(life_insurance_type, allowed_values)
            )

        self._life_insurance_type = life_insurance_type

    @property
    def loan_pay_by_date(self):
        """Gets the loan_pay_by_date of this DataExtractsAccount.

        The date by which the payoff amount should be paid.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The loan_pay_by_date of this DataExtractsAccount.
        :rtype: str
        """
        return self._loan_pay_by_date

    @loan_pay_by_date.setter
    def loan_pay_by_date(self, loan_pay_by_date):
        """Sets the loan_pay_by_date of this DataExtractsAccount.

        The date by which the payoff amount should be paid.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param loan_pay_by_date: The loan_pay_by_date of this DataExtractsAccount.
        :type loan_pay_by_date: str
        """

        self._loan_pay_by_date = loan_pay_by_date

    @property
    def loan_payoff_amount(self):
        """Gets the loan_payoff_amount of this DataExtractsAccount.


        :return: The loan_payoff_amount of this DataExtractsAccount.
        :rtype: Money
        """
        return self._loan_payoff_amount

    @loan_payoff_amount.setter
    def loan_payoff_amount(self, loan_payoff_amount):
        """Sets the loan_payoff_amount of this DataExtractsAccount.


        :param loan_payoff_amount: The loan_payoff_amount of this DataExtractsAccount.
        :type loan_payoff_amount: Money
        """

        self._loan_payoff_amount = loan_payoff_amount

    @property
    def loan_payoff_details(self):
        """Gets the loan_payoff_details of this DataExtractsAccount.


        :return: The loan_payoff_details of this DataExtractsAccount.
        :rtype: LoanPayoffDetails
        """
        return self._loan_payoff_details

    @loan_payoff_details.setter
    def loan_payoff_details(self, loan_payoff_details):
        """Sets the loan_payoff_details of this DataExtractsAccount.


        :param loan_payoff_details: The loan_payoff_details of this DataExtractsAccount.
        :type loan_payoff_details: LoanPayoffDetails
        """

        self._loan_payoff_details = loan_payoff_details

    @property
    def margin_balance(self):
        """Gets the margin_balance of this DataExtractsAccount.


        :return: The margin_balance of this DataExtractsAccount.
        :rtype: Money
        """
        return self._margin_balance

    @margin_balance.setter
    def margin_balance(self, margin_balance):
        """Sets the margin_balance of this DataExtractsAccount.


        :param margin_balance: The margin_balance of this DataExtractsAccount.
        :type margin_balance: Money
        """

        self._margin_balance = margin_balance

    @property
    def maturity_amount(self):
        """Gets the maturity_amount of this DataExtractsAccount.


        :return: The maturity_amount of this DataExtractsAccount.
        :rtype: Money
        """
        return self._maturity_amount

    @maturity_amount.setter
    def maturity_amount(self, maturity_amount):
        """Sets the maturity_amount of this DataExtractsAccount.


        :param maturity_amount: The maturity_amount of this DataExtractsAccount.
        :type maturity_amount: Money
        """

        self._maturity_amount = maturity_amount

    @property
    def maturity_date(self):
        """Gets the maturity_date of this DataExtractsAccount.

        The date when a certificate of deposit (CD/FD) matures or the final payment date of a loan at which point the principal amount (including pending interest) is due to be paid.<br><b>Additional Details:</b> The date when a certificate of deposit (CD) matures, i.e., the money in the CD can be withdrawn without paying an early withdrawal penalty.The final payment date of a loan, i.e., the principal amount (including pending interest) is due to be paid.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The maturity_date of this DataExtractsAccount.
        :rtype: str
        """
        return self._maturity_date

    @maturity_date.setter
    def maturity_date(self, maturity_date):
        """Sets the maturity_date of this DataExtractsAccount.

        The date when a certificate of deposit (CD/FD) matures or the final payment date of a loan at which point the principal amount (including pending interest) is due to be paid.<br><b>Additional Details:</b> The date when a certificate of deposit (CD) matures, i.e., the money in the CD can be withdrawn without paying an early withdrawal penalty.The final payment date of a loan, i.e., the principal amount (including pending interest) is due to be paid.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param maturity_date: The maturity_date of this DataExtractsAccount.
        :type maturity_date: str
        """

        self._maturity_date = maturity_date

    @property
    def memo(self):
        """Gets the memo of this DataExtractsAccount.

        The additional description or notes given by the user.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The memo of this DataExtractsAccount.
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this DataExtractsAccount.

        The additional description or notes given by the user.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param memo: The memo of this DataExtractsAccount.
        :type memo: str
        """

        self._memo = memo

    @property
    def minimum_amount_due(self):
        """Gets the minimum_amount_due of this DataExtractsAccount.


        :return: The minimum_amount_due of this DataExtractsAccount.
        :rtype: Money
        """
        return self._minimum_amount_due

    @minimum_amount_due.setter
    def minimum_amount_due(self, minimum_amount_due):
        """Sets the minimum_amount_due of this DataExtractsAccount.


        :param minimum_amount_due: The minimum_amount_due of this DataExtractsAccount.
        :type minimum_amount_due: Money
        """

        self._minimum_amount_due = minimum_amount_due

    @property
    def money_market_balance(self):
        """Gets the money_market_balance of this DataExtractsAccount.


        :return: The money_market_balance of this DataExtractsAccount.
        :rtype: Money
        """
        return self._money_market_balance

    @money_market_balance.setter
    def money_market_balance(self, money_market_balance):
        """Sets the money_market_balance of this DataExtractsAccount.


        :param money_market_balance: The money_market_balance of this DataExtractsAccount.
        :type money_market_balance: Money
        """

        self._money_market_balance = money_market_balance

    @property
    def next_level(self):
        """Gets the next_level of this DataExtractsAccount.

        The eligible next level of the rewards program.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The next_level of this DataExtractsAccount.
        :rtype: str
        """
        return self._next_level

    @next_level.setter
    def next_level(self, next_level):
        """Sets the next_level of this DataExtractsAccount.

        The eligible next level of the rewards program.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param next_level: The next_level of this DataExtractsAccount.
        :type next_level: str
        """

        self._next_level = next_level

    @property
    def nickname(self):
        """Gets the nickname of this DataExtractsAccount.

        The nickname of the account as provided by the consumer to identify an account. The account nickname can be used instead of the account name.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The nickname of this DataExtractsAccount.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this DataExtractsAccount.

        The nickname of the account as provided by the consumer to identify an account. The account nickname can be used instead of the account name.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param nickname: The nickname of this DataExtractsAccount.
        :type nickname: str
        """

        self._nickname = nickname

    @property
    def oauth_migration_status(self):
        """Gets the oauth_migration_status of this DataExtractsAccount.

        Indicates the migration status of the account from screen-scraping provider to the Open Banking provider. <br><br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The oauth_migration_status of this DataExtractsAccount.
        :rtype: str
        """
        return self._oauth_migration_status

    @oauth_migration_status.setter
    def oauth_migration_status(self, oauth_migration_status):
        """Sets the oauth_migration_status of this DataExtractsAccount.

        Indicates the migration status of the account from screen-scraping provider to the Open Banking provider. <br><br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param oauth_migration_status: The oauth_migration_status of this DataExtractsAccount.
        :type oauth_migration_status: str
        """
        allowed_values = ["IN_PROGRESS", "TO_BE_MIGRATED", "COMPLETED"]  # noqa: E501
        if oauth_migration_status not in allowed_values:
            raise ValueError(
                "Invalid value for `oauth_migration_status` ({0}), must be one of {1}"
                .format(oauth_migration_status, allowed_values)
            )

        self._oauth_migration_status = oauth_migration_status

    @property
    def original_loan_amount(self):
        """Gets the original_loan_amount of this DataExtractsAccount.


        :return: The original_loan_amount of this DataExtractsAccount.
        :rtype: Money
        """
        return self._original_loan_amount

    @original_loan_amount.setter
    def original_loan_amount(self, original_loan_amount):
        """Sets the original_loan_amount of this DataExtractsAccount.


        :param original_loan_amount: The original_loan_amount of this DataExtractsAccount.
        :type original_loan_amount: Money
        """

        self._original_loan_amount = original_loan_amount

    @property
    def origination_date(self):
        """Gets the origination_date of this DataExtractsAccount.

        The date on which the loan is disbursed.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The origination_date of this DataExtractsAccount.
        :rtype: str
        """
        return self._origination_date

    @origination_date.setter
    def origination_date(self, origination_date):
        """Sets the origination_date of this DataExtractsAccount.

        The date on which the loan is disbursed.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param origination_date: The origination_date of this DataExtractsAccount.
        :type origination_date: str
        """

        self._origination_date = origination_date

    @property
    def over_draft_limit(self):
        """Gets the over_draft_limit of this DataExtractsAccount.


        :return: The over_draft_limit of this DataExtractsAccount.
        :rtype: Money
        """
        return self._over_draft_limit

    @over_draft_limit.setter
    def over_draft_limit(self, over_draft_limit):
        """Sets the over_draft_limit of this DataExtractsAccount.


        :param over_draft_limit: The over_draft_limit of this DataExtractsAccount.
        :type over_draft_limit: Money
        """

        self._over_draft_limit = over_draft_limit

    @property
    def policy_effective_date(self):
        """Gets the policy_effective_date of this DataExtractsAccount.

        The date on which the insurance policy coverage commences.<br><b>Applicable containers</b>: insurance<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The policy_effective_date of this DataExtractsAccount.
        :rtype: str
        """
        return self._policy_effective_date

    @policy_effective_date.setter
    def policy_effective_date(self, policy_effective_date):
        """Sets the policy_effective_date of this DataExtractsAccount.

        The date on which the insurance policy coverage commences.<br><b>Applicable containers</b>: insurance<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param policy_effective_date: The policy_effective_date of this DataExtractsAccount.
        :type policy_effective_date: str
        """

        self._policy_effective_date = policy_effective_date

    @property
    def policy_from_date(self):
        """Gets the policy_from_date of this DataExtractsAccount.

        The date the insurance policy began.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The policy_from_date of this DataExtractsAccount.
        :rtype: str
        """
        return self._policy_from_date

    @policy_from_date.setter
    def policy_from_date(self, policy_from_date):
        """Sets the policy_from_date of this DataExtractsAccount.

        The date the insurance policy began.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param policy_from_date: The policy_from_date of this DataExtractsAccount.
        :type policy_from_date: str
        """

        self._policy_from_date = policy_from_date

    @property
    def policy_status(self):
        """Gets the policy_status of this DataExtractsAccount.

        The status of the policy.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :return: The policy_status of this DataExtractsAccount.
        :rtype: str
        """
        return self._policy_status

    @policy_status.setter
    def policy_status(self, policy_status):
        """Sets the policy_status of this DataExtractsAccount.

        The status of the policy.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :param policy_status: The policy_status of this DataExtractsAccount.
        :type policy_status: str
        """
        allowed_values = ["ACTIVE", "INACTIVE", "OTHER"]  # noqa: E501
        if policy_status not in allowed_values:
            raise ValueError(
                "Invalid value for `policy_status` ({0}), must be one of {1}"
                .format(policy_status, allowed_values)
            )

        self._policy_status = policy_status

    @property
    def policy_term(self):
        """Gets the policy_term of this DataExtractsAccount.

        The duration for which the policy is valid or in effect. For example, one year, five years, etc.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The policy_term of this DataExtractsAccount.
        :rtype: str
        """
        return self._policy_term

    @policy_term.setter
    def policy_term(self, policy_term):
        """Sets the policy_term of this DataExtractsAccount.

        The duration for which the policy is valid or in effect. For example, one year, five years, etc.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param policy_term: The policy_term of this DataExtractsAccount.
        :type policy_term: str
        """

        self._policy_term = policy_term

    @property
    def policy_to_date(self):
        """Gets the policy_to_date of this DataExtractsAccount.

        The date to which the policy exists.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The policy_to_date of this DataExtractsAccount.
        :rtype: str
        """
        return self._policy_to_date

    @policy_to_date.setter
    def policy_to_date(self, policy_to_date):
        """Sets the policy_to_date of this DataExtractsAccount.

        The date to which the policy exists.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param policy_to_date: The policy_to_date of this DataExtractsAccount.
        :type policy_to_date: str
        """

        self._policy_to_date = policy_to_date

    @property
    def premium(self):
        """Gets the premium of this DataExtractsAccount.


        :return: The premium of this DataExtractsAccount.
        :rtype: Money
        """
        return self._premium

    @premium.setter
    def premium(self, premium):
        """Sets the premium of this DataExtractsAccount.


        :param premium: The premium of this DataExtractsAccount.
        :type premium: Money
        """

        self._premium = premium

    @property
    def premium_payment_term(self):
        """Gets the premium_payment_term of this DataExtractsAccount.

        The number of years for which premium payments have to be made in a policy.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The premium_payment_term of this DataExtractsAccount.
        :rtype: str
        """
        return self._premium_payment_term

    @premium_payment_term.setter
    def premium_payment_term(self, premium_payment_term):
        """Sets the premium_payment_term of this DataExtractsAccount.

        The number of years for which premium payments have to be made in a policy.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param premium_payment_term: The premium_payment_term of this DataExtractsAccount.
        :type premium_payment_term: str
        """

        self._premium_payment_term = premium_payment_term

    @property
    def primary_reward_unit(self):
        """Gets the primary_reward_unit of this DataExtractsAccount.

        Primary reward unit for this reward program. E.g. miles, points, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The primary_reward_unit of this DataExtractsAccount.
        :rtype: str
        """
        return self._primary_reward_unit

    @primary_reward_unit.setter
    def primary_reward_unit(self, primary_reward_unit):
        """Sets the primary_reward_unit of this DataExtractsAccount.

        Primary reward unit for this reward program. E.g. miles, points, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param primary_reward_unit: The primary_reward_unit of this DataExtractsAccount.
        :type primary_reward_unit: str
        """

        self._primary_reward_unit = primary_reward_unit

    @property
    def principal_balance(self):
        """Gets the principal_balance of this DataExtractsAccount.


        :return: The principal_balance of this DataExtractsAccount.
        :rtype: Money
        """
        return self._principal_balance

    @principal_balance.setter
    def principal_balance(self, principal_balance):
        """Sets the principal_balance of this DataExtractsAccount.


        :param principal_balance: The principal_balance of this DataExtractsAccount.
        :type principal_balance: Money
        """

        self._principal_balance = principal_balance

    @property
    def provider_account_id(self):
        """Gets the provider_account_id of this DataExtractsAccount.

        The primary key of the provider account resource.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The provider_account_id of this DataExtractsAccount.
        :rtype: int
        """
        return self._provider_account_id

    @provider_account_id.setter
    def provider_account_id(self, provider_account_id):
        """Sets the provider_account_id of this DataExtractsAccount.

        The primary key of the provider account resource.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param provider_account_id: The provider_account_id of this DataExtractsAccount.
        :type provider_account_id: int
        """

        self._provider_account_id = provider_account_id

    @property
    def provider_id(self):
        """Gets the provider_id of this DataExtractsAccount.

        Identifier of the provider site. The primary key of provider resource. <br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The provider_id of this DataExtractsAccount.
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this DataExtractsAccount.

        Identifier of the provider site. The primary key of provider resource. <br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param provider_id: The provider_id of this DataExtractsAccount.
        :type provider_id: str
        """

        self._provider_id = provider_id

    @property
    def provider_name(self):
        """Gets the provider_name of this DataExtractsAccount.

        Service provider or institution name where the account originates. This belongs to the provider resource.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The provider_name of this DataExtractsAccount.
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this DataExtractsAccount.

        Service provider or institution name where the account originates. This belongs to the provider resource.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param provider_name: The provider_name of this DataExtractsAccount.
        :type provider_name: str
        """

        self._provider_name = provider_name

    @property
    def recurring_payment(self):
        """Gets the recurring_payment of this DataExtractsAccount.


        :return: The recurring_payment of this DataExtractsAccount.
        :rtype: Money
        """
        return self._recurring_payment

    @recurring_payment.setter
    def recurring_payment(self, recurring_payment):
        """Sets the recurring_payment of this DataExtractsAccount.


        :param recurring_payment: The recurring_payment of this DataExtractsAccount.
        :type recurring_payment: Money
        """

        self._recurring_payment = recurring_payment

    @property
    def remaining_balance(self):
        """Gets the remaining_balance of this DataExtractsAccount.


        :return: The remaining_balance of this DataExtractsAccount.
        :rtype: Money
        """
        return self._remaining_balance

    @remaining_balance.setter
    def remaining_balance(self, remaining_balance):
        """Sets the remaining_balance of this DataExtractsAccount.


        :param remaining_balance: The remaining_balance of this DataExtractsAccount.
        :type remaining_balance: Money
        """

        self._remaining_balance = remaining_balance

    @property
    def repayment_plan_type(self):
        """Gets the repayment_plan_type of this DataExtractsAccount.

        The type of repayment plan that the borrower prefers to repay the loan. <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values:</b><br>

        :return: The repayment_plan_type of this DataExtractsAccount.
        :rtype: str
        """
        return self._repayment_plan_type

    @repayment_plan_type.setter
    def repayment_plan_type(self, repayment_plan_type):
        """Sets the repayment_plan_type of this DataExtractsAccount.

        The type of repayment plan that the borrower prefers to repay the loan. <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values:</b><br>

        :param repayment_plan_type: The repayment_plan_type of this DataExtractsAccount.
        :type repayment_plan_type: str
        """
        allowed_values = ["STANDARD", "GRADUATED", "EXTENDED", "INCOME_BASED", "INCOME_CONTINGENT", "INCOME_SENSITIVE", "PAY_AS_YOU_EARN", "REVISED_PAY_AS_YOU_EARN"]  # noqa: E501
        if repayment_plan_type not in allowed_values:
            raise ValueError(
                "Invalid value for `repayment_plan_type` ({0}), must be one of {1}"
                .format(repayment_plan_type, allowed_values)
            )

        self._repayment_plan_type = repayment_plan_type

    @property
    def reward_balance(self):
        """Gets the reward_balance of this DataExtractsAccount.

        Information of different reward balances associated with the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The reward_balance of this DataExtractsAccount.
        :rtype: List[RewardBalance]
        """
        return self._reward_balance

    @reward_balance.setter
    def reward_balance(self, reward_balance):
        """Sets the reward_balance of this DataExtractsAccount.

        Information of different reward balances associated with the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param reward_balance: The reward_balance of this DataExtractsAccount.
        :type reward_balance: List[RewardBalance]
        """

        self._reward_balance = reward_balance

    @property
    def running_balance(self):
        """Gets the running_balance of this DataExtractsAccount.


        :return: The running_balance of this DataExtractsAccount.
        :rtype: Money
        """
        return self._running_balance

    @running_balance.setter
    def running_balance(self, running_balance):
        """Sets the running_balance of this DataExtractsAccount.


        :param running_balance: The running_balance of this DataExtractsAccount.
        :type running_balance: Money
        """

        self._running_balance = running_balance

    @property
    def short_balance(self):
        """Gets the short_balance of this DataExtractsAccount.


        :return: The short_balance of this DataExtractsAccount.
        :rtype: Money
        """
        return self._short_balance

    @short_balance.setter
    def short_balance(self, short_balance):
        """Sets the short_balance of this DataExtractsAccount.


        :param short_balance: The short_balance of this DataExtractsAccount.
        :type short_balance: Money
        """

        self._short_balance = short_balance

    @property
    def source_account_status(self):
        """Gets the source_account_status of this DataExtractsAccount.

        Indicates the status of the loan account. <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values:</b><br>

        :return: The source_account_status of this DataExtractsAccount.
        :rtype: str
        """
        return self._source_account_status

    @source_account_status.setter
    def source_account_status(self, source_account_status):
        """Sets the source_account_status of this DataExtractsAccount.

        Indicates the status of the loan account. <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values:</b><br>

        :param source_account_status: The source_account_status of this DataExtractsAccount.
        :type source_account_status: str
        """
        allowed_values = ["IN_REPAYMENT", "DEFAULTED", "IN_SCHOOL", "IN_GRACE_PERIOD", "DELINQUENCY", "DEFERMENT", "FORBEARANCE"]  # noqa: E501
        if source_account_status not in allowed_values:
            raise ValueError(
                "Invalid value for `source_account_status` ({0}), must be one of {1}"
                .format(source_account_status, allowed_values)
            )

        self._source_account_status = source_account_status

    @property
    def source_id(self):
        """Gets the source_id of this DataExtractsAccount.

        A unique ID that the provider site has assigned to the account. The source ID is only available for the HELD accounts.<br><br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan,  reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The source_id of this DataExtractsAccount.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this DataExtractsAccount.

        A unique ID that the provider site has assigned to the account. The source ID is only available for the HELD accounts.<br><br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan,  reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param source_id: The source_id of this DataExtractsAccount.
        :type source_id: str
        """

        self._source_id = source_id

    @property
    def term(self):
        """Gets the term of this DataExtractsAccount.

        The tenure for which the CD account is valid  or in case of loan, the number of years/months over which the loan amount  has to be repaid. <br><b>Additional Details:</b><br>  Bank: The Term field is only applicable for the account type CD.Loan: The period for which the loan agreement is in force. The period, before or at the end of which, the loan should either be repaid or renegotiated for another term.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The term of this DataExtractsAccount.
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this DataExtractsAccount.

        The tenure for which the CD account is valid  or in case of loan, the number of years/months over which the loan amount  has to be repaid. <br><b>Additional Details:</b><br>  Bank: The Term field is only applicable for the account type CD.Loan: The period for which the loan agreement is in force. The period, before or at the end of which, the loan should either be repaid or renegotiated for another term.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>

        :param term: The term of this DataExtractsAccount.
        :type term: str
        """

        self._term = term

    @property
    def total_cash_limit(self):
        """Gets the total_cash_limit of this DataExtractsAccount.


        :return: The total_cash_limit of this DataExtractsAccount.
        :rtype: Money
        """
        return self._total_cash_limit

    @total_cash_limit.setter
    def total_cash_limit(self, total_cash_limit):
        """Sets the total_cash_limit of this DataExtractsAccount.


        :param total_cash_limit: The total_cash_limit of this DataExtractsAccount.
        :type total_cash_limit: Money
        """

        self._total_cash_limit = total_cash_limit

    @property
    def total_credit_limit(self):
        """Gets the total_credit_limit of this DataExtractsAccount.


        :return: The total_credit_limit of this DataExtractsAccount.
        :rtype: Money
        """
        return self._total_credit_limit

    @total_credit_limit.setter
    def total_credit_limit(self, total_credit_limit):
        """Sets the total_credit_limit of this DataExtractsAccount.


        :param total_credit_limit: The total_credit_limit of this DataExtractsAccount.
        :type total_credit_limit: Money
        """

        self._total_credit_limit = total_credit_limit

    @property
    def total_credit_line(self):
        """Gets the total_credit_line of this DataExtractsAccount.


        :return: The total_credit_line of this DataExtractsAccount.
        :rtype: Money
        """
        return self._total_credit_line

    @total_credit_line.setter
    def total_credit_line(self, total_credit_line):
        """Sets the total_credit_line of this DataExtractsAccount.


        :param total_credit_line: The total_credit_line of this DataExtractsAccount.
        :type total_credit_line: Money
        """

        self._total_credit_line = total_credit_line

    @property
    def total_unvested_balance(self):
        """Gets the total_unvested_balance of this DataExtractsAccount.


        :return: The total_unvested_balance of this DataExtractsAccount.
        :rtype: Money
        """
        return self._total_unvested_balance

    @total_unvested_balance.setter
    def total_unvested_balance(self, total_unvested_balance):
        """Sets the total_unvested_balance of this DataExtractsAccount.


        :param total_unvested_balance: The total_unvested_balance of this DataExtractsAccount.
        :type total_unvested_balance: Money
        """

        self._total_unvested_balance = total_unvested_balance

    @property
    def total_vested_balance(self):
        """Gets the total_vested_balance of this DataExtractsAccount.


        :return: The total_vested_balance of this DataExtractsAccount.
        :rtype: Money
        """
        return self._total_vested_balance

    @total_vested_balance.setter
    def total_vested_balance(self, total_vested_balance):
        """Sets the total_vested_balance of this DataExtractsAccount.


        :param total_vested_balance: The total_vested_balance of this DataExtractsAccount.
        :type total_vested_balance: Money
        """

        self._total_vested_balance = total_vested_balance

    @property
    def user_classification(self):
        """Gets the user_classification of this DataExtractsAccount.

        <b>Applicable containers</b>: reward, bank, creditCard, investment, loan, insurance, realEstate,  otherLiabilities<br><b>Endpoints</b>:<ul><li>GET accounts </li><li>GET accounts/{accountId}</li><li>POST accounts</ul><li>GET dataExtracts/userData</li><b>Applicable Values</b><br>

        :return: The user_classification of this DataExtractsAccount.
        :rtype: str
        """
        return self._user_classification

    @user_classification.setter
    def user_classification(self, user_classification):
        """Sets the user_classification of this DataExtractsAccount.

        <b>Applicable containers</b>: reward, bank, creditCard, investment, loan, insurance, realEstate,  otherLiabilities<br><b>Endpoints</b>:<ul><li>GET accounts </li><li>GET accounts/{accountId}</li><li>POST accounts</ul><li>GET dataExtracts/userData</li><b>Applicable Values</b><br>

        :param user_classification: The user_classification of this DataExtractsAccount.
        :type user_classification: str
        """
        allowed_values = ["BUSINESS", "PERSONAL"]  # noqa: E501
        if user_classification not in allowed_values:
            raise ValueError(
                "Invalid value for `user_classification` ({0}), must be one of {1}"
                .format(user_classification, allowed_values)
            )

        self._user_classification = user_classification

    @property
    def valuation_type(self):
        """Gets the valuation_type of this DataExtractsAccount.

        The valuation type indicates whether the home value is calculated either manually or by Yodlee Partners.<br><br><b>Aggregated / Manual</b>: Manual<br><b>Applicable containers</b>: realEstate<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :return: The valuation_type of this DataExtractsAccount.
        :rtype: str
        """
        return self._valuation_type

    @valuation_type.setter
    def valuation_type(self, valuation_type):
        """Sets the valuation_type of this DataExtractsAccount.

        The valuation type indicates whether the home value is calculated either manually or by Yodlee Partners.<br><br><b>Aggregated / Manual</b>: Manual<br><b>Applicable containers</b>: realEstate<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :param valuation_type: The valuation_type of this DataExtractsAccount.
        :type valuation_type: str
        """
        allowed_values = ["SYSTEM", "MANUAL"]  # noqa: E501
        if valuation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `valuation_type` ({0}), must be one of {1}"
                .format(valuation_type, allowed_values)
            )

        self._valuation_type = valuation_type
