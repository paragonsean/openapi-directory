# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_address import AccountAddress
from openapi_server.models.contact import Contact
from openapi_server.models.coordinates import Coordinates
from openapi_server import util


class Merchant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: AccountAddress=None, category_label: List[str]=None, contact: Contact=None, coordinates: Coordinates=None, id: str=None, name: str=None, source: str=None, website: str=None):
        """Merchant - a model defined in OpenAPI

        :param address: The address of this Merchant.
        :param category_label: The category_label of this Merchant.
        :param contact: The contact of this Merchant.
        :param coordinates: The coordinates of this Merchant.
        :param id: The id of this Merchant.
        :param name: The name of this Merchant.
        :param source: The source of this Merchant.
        :param website: The website of this Merchant.
        """
        self.openapi_types = {
            'address': AccountAddress,
            'category_label': List[str],
            'contact': Contact,
            'coordinates': Coordinates,
            'id': str,
            'name': str,
            'source': str,
            'website': str
        }

        self.attribute_map = {
            'address': 'address',
            'category_label': 'categoryLabel',
            'contact': 'contact',
            'coordinates': 'coordinates',
            'id': 'id',
            'name': 'name',
            'source': 'source',
            'website': 'website'
        }

        self._address = address
        self._category_label = category_label
        self._contact = contact
        self._coordinates = coordinates
        self._id = id
        self._name = name
        self._source = source
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Merchant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Merchant of this Merchant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Merchant.


        :return: The address of this Merchant.
        :rtype: AccountAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Merchant.


        :param address: The address of this Merchant.
        :type address: AccountAddress
        """

        self._address = address

    @property
    def category_label(self):
        """Gets the category_label of this Merchant.

        The business categories of the merchant.<br><br><b>Applicable containers</b>: bank,creditCard<br><b>Applicable Values</b><br>

        :return: The category_label of this Merchant.
        :rtype: List[str]
        """
        return self._category_label

    @category_label.setter
    def category_label(self, category_label):
        """Sets the category_label of this Merchant.

        The business categories of the merchant.<br><br><b>Applicable containers</b>: bank,creditCard<br><b>Applicable Values</b><br>

        :param category_label: The category_label of this Merchant.
        :type category_label: List[str]
        """

        self._category_label = category_label

    @property
    def contact(self):
        """Gets the contact of this Merchant.


        :return: The contact of this Merchant.
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this Merchant.


        :param contact: The contact of this Merchant.
        :type contact: Contact
        """

        self._contact = contact

    @property
    def coordinates(self):
        """Gets the coordinates of this Merchant.


        :return: The coordinates of this Merchant.
        :rtype: Coordinates
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this Merchant.


        :param coordinates: The coordinates of this Merchant.
        :type coordinates: Coordinates
        """

        self._coordinates = coordinates

    @property
    def id(self):
        """Gets the id of this Merchant.

        Identifier of the merchant.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>

        :return: The id of this Merchant.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Merchant.

        Identifier of the merchant.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>

        :param id: The id of this Merchant.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Merchant.

        The name of the merchant.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>

        :return: The name of this Merchant.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Merchant.

        The name of the merchant.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>

        :param name: The name of this Merchant.
        :type name: str
        """

        self._name = name

    @property
    def source(self):
        """Gets the source of this Merchant.

        The source through which merchant information is retrieved.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>

        :return: The source of this Merchant.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Merchant.

        The source through which merchant information is retrieved.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>

        :param source: The source of this Merchant.
        :type source: str
        """
        allowed_values = ["YODLEE", "FACTUAL"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def website(self):
        """Gets the website of this Merchant.

        The website of the merchant.<br><br><b>Applicable containers</b>: bank,creditCard,investment,loan<br>

        :return: The website of this Merchant.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Merchant.

        The website of the merchant.<br><br><b>Applicable containers</b>: bank,creditCard,investment,loan<br>

        :param website: The website of this Merchant.
        :type website: str
        """

        self._website = website
