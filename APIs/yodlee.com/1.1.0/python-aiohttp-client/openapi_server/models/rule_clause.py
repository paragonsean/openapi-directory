# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RuleClause(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _field: str=None, field_value: str=None, operation: str=None, rule_clause_id: int=None, user_defined_rule_id: int=None):
        """RuleClause - a model defined in OpenAPI

        :param _field: The _field of this RuleClause.
        :param field_value: The field_value of this RuleClause.
        :param operation: The operation of this RuleClause.
        :param rule_clause_id: The rule_clause_id of this RuleClause.
        :param user_defined_rule_id: The user_defined_rule_id of this RuleClause.
        """
        self.openapi_types = {
            '_field': str,
            'field_value': str,
            'operation': str,
            'rule_clause_id': int,
            'user_defined_rule_id': int
        }

        self.attribute_map = {
            '_field': 'field',
            'field_value': 'fieldValue',
            'operation': 'operation',
            'rule_clause_id': 'ruleClauseId',
            'user_defined_rule_id': 'userDefinedRuleId'
        }

        self.__field = _field
        self._field_value = field_value
        self._operation = operation
        self._rule_clause_id = rule_clause_id
        self._user_defined_rule_id = user_defined_rule_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleClause':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuleClause of this RuleClause.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _field(self):
        """Gets the _field of this RuleClause.

        Field for which the clause is created.<br><br><br><b>Valid Values</b>:amount,description<b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :return: The _field of this RuleClause.
        :rtype: str
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this RuleClause.

        Field for which the clause is created.<br><br><br><b>Valid Values</b>:amount,description<b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :param _field: The _field of this RuleClause.
        :type _field: str
        """
        allowed_values = ["amount", "description"]  # noqa: E501
        if _field not in allowed_values:
            raise ValueError(
                "Invalid value for `_field` ({0}), must be one of {1}"
                .format(_field, allowed_values)
            )

        self.__field = _field

    @property
    def field_value(self):
        """Gets the field_value of this RuleClause.

        The value would be the amount value in case of amount based rule clause or the string value in case of description based rule clause.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :return: The field_value of this RuleClause.
        :rtype: str
        """
        return self._field_value

    @field_value.setter
    def field_value(self, field_value):
        """Sets the field_value of this RuleClause.

        The value would be the amount value in case of amount based rule clause or the string value in case of description based rule clause.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :param field_value: The field_value of this RuleClause.
        :type field_value: str
        """

        self._field_value = field_value

    @property
    def operation(self):
        """Gets the operation of this RuleClause.

        Operation for which the clause is created.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :return: The operation of this RuleClause.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this RuleClause.

        Operation for which the clause is created.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :param operation: The operation of this RuleClause.
        :type operation: str
        """
        allowed_values = ["numberEquals", "numberLessThan", "numberLessThanEquals", "numberGreaterThan", "numberGreaterThanEquals", "stringEquals", "stringContains"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def rule_clause_id(self):
        """Gets the rule_clause_id of this RuleClause.

        Unique identifier generated for the rule clause.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :return: The rule_clause_id of this RuleClause.
        :rtype: int
        """
        return self._rule_clause_id

    @rule_clause_id.setter
    def rule_clause_id(self, rule_clause_id):
        """Sets the rule_clause_id of this RuleClause.

        Unique identifier generated for the rule clause.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :param rule_clause_id: The rule_clause_id of this RuleClause.
        :type rule_clause_id: int
        """

        self._rule_clause_id = rule_clause_id

    @property
    def user_defined_rule_id(self):
        """Gets the user_defined_rule_id of this RuleClause.

        Unique identifier generated for every rule the user creates.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :return: The user_defined_rule_id of this RuleClause.
        :rtype: int
        """
        return self._user_defined_rule_id

    @user_defined_rule_id.setter
    def user_defined_rule_id(self, user_defined_rule_id):
        """Sets the user_defined_rule_id of this RuleClause.

        Unique identifier generated for every rule the user creates.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :param user_defined_rule_id: The user_defined_rule_id of this RuleClause.
        :type user_defined_rule_id: int
        """

        self._user_defined_rule_id = user_defined_rule_id
