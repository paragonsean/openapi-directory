# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_dataset import AccountDataset
from openapi_server.models.provider_account_preferences import ProviderAccountPreferences
from openapi_server import util


class ProviderAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation_source: str=None, consent_id: int=None, created_date: str=None, dataset: List[AccountDataset]=None, id: int=None, is_manual: bool=None, last_updated: str=None, oauth_migration_status: str=None, preferences: ProviderAccountPreferences=None, provider_id: int=None, request_id: str=None, status: str=None):
        """ProviderAccount - a model defined in OpenAPI

        :param aggregation_source: The aggregation_source of this ProviderAccount.
        :param consent_id: The consent_id of this ProviderAccount.
        :param created_date: The created_date of this ProviderAccount.
        :param dataset: The dataset of this ProviderAccount.
        :param id: The id of this ProviderAccount.
        :param is_manual: The is_manual of this ProviderAccount.
        :param last_updated: The last_updated of this ProviderAccount.
        :param oauth_migration_status: The oauth_migration_status of this ProviderAccount.
        :param preferences: The preferences of this ProviderAccount.
        :param provider_id: The provider_id of this ProviderAccount.
        :param request_id: The request_id of this ProviderAccount.
        :param status: The status of this ProviderAccount.
        """
        self.openapi_types = {
            'aggregation_source': str,
            'consent_id': int,
            'created_date': str,
            'dataset': List[AccountDataset],
            'id': int,
            'is_manual': bool,
            'last_updated': str,
            'oauth_migration_status': str,
            'preferences': ProviderAccountPreferences,
            'provider_id': int,
            'request_id': str,
            'status': str
        }

        self.attribute_map = {
            'aggregation_source': 'aggregationSource',
            'consent_id': 'consentId',
            'created_date': 'createdDate',
            'dataset': 'dataset',
            'id': 'id',
            'is_manual': 'isManual',
            'last_updated': 'lastUpdated',
            'oauth_migration_status': 'oauthMigrationStatus',
            'preferences': 'preferences',
            'provider_id': 'providerId',
            'request_id': 'requestId',
            'status': 'status'
        }

        self._aggregation_source = aggregation_source
        self._consent_id = consent_id
        self._created_date = created_date
        self._dataset = dataset
        self._id = id
        self._is_manual = is_manual
        self._last_updated = last_updated
        self._oauth_migration_status = oauth_migration_status
        self._preferences = preferences
        self._provider_id = provider_id
        self._request_id = request_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProviderAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProviderAccount of this ProviderAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation_source(self):
        """Gets the aggregation_source of this ProviderAccount.

        The source through which the providerAccount is added in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :return: The aggregation_source of this ProviderAccount.
        :rtype: str
        """
        return self._aggregation_source

    @aggregation_source.setter
    def aggregation_source(self, aggregation_source):
        """Sets the aggregation_source of this ProviderAccount.

        The source through which the providerAccount is added in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :param aggregation_source: The aggregation_source of this ProviderAccount.
        :type aggregation_source: str
        """
        allowed_values = ["SYSTEM", "USER"]  # noqa: E501
        if aggregation_source not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregation_source` ({0}), must be one of {1}"
                .format(aggregation_source, allowed_values)
            )

        self._aggregation_source = aggregation_source

    @property
    def consent_id(self):
        """Gets the consent_id of this ProviderAccount.

        Consent Id generated through POST Consent.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>

        :return: The consent_id of this ProviderAccount.
        :rtype: int
        """
        return self._consent_id

    @consent_id.setter
    def consent_id(self, consent_id):
        """Sets the consent_id of this ProviderAccount.

        Consent Id generated through POST Consent.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>

        :param consent_id: The consent_id of this ProviderAccount.
        :type consent_id: int
        """

        self._consent_id = consent_id

    @property
    def created_date(self):
        """Gets the created_date of this ProviderAccount.

        The date on when the provider account is created in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>

        :return: The created_date of this ProviderAccount.
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ProviderAccount.

        The date on when the provider account is created in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>

        :param created_date: The created_date of this ProviderAccount.
        :type created_date: str
        """

        self._created_date = created_date

    @property
    def dataset(self):
        """Gets the dataset of this ProviderAccount.

        Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The dataset of this ProviderAccount.
        :rtype: List[AccountDataset]
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this ProviderAccount.

        Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>

        :param dataset: The dataset of this ProviderAccount.
        :type dataset: List[AccountDataset]
        """

        self._dataset = dataset

    @property
    def id(self):
        """Gets the id of this ProviderAccount.

        Unique identifier for the provider account resource. This is created during account addition.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The id of this ProviderAccount.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProviderAccount.

        Unique identifier for the provider account resource. This is created during account addition.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>

        :param id: The id of this ProviderAccount.
        :type id: int
        """

        self._id = id

    @property
    def is_manual(self):
        """Gets the is_manual of this ProviderAccount.

        Indicates whether account is a manual or aggregated provider account.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The is_manual of this ProviderAccount.
        :rtype: bool
        """
        return self._is_manual

    @is_manual.setter
    def is_manual(self, is_manual):
        """Sets the is_manual of this ProviderAccount.

        Indicates whether account is a manual or aggregated provider account.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>

        :param is_manual: The is_manual of this ProviderAccount.
        :type is_manual: bool
        """

        self._is_manual = is_manual

    @property
    def last_updated(self):
        """Gets the last_updated of this ProviderAccount.

        Indicate when the providerAccount is last updated successfully.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET dataExtracts/userData</li></ul>

        :return: The last_updated of this ProviderAccount.
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ProviderAccount.

        Indicate when the providerAccount is last updated successfully.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET dataExtracts/userData</li></ul>

        :param last_updated: The last_updated of this ProviderAccount.
        :type last_updated: str
        """

        self._last_updated = last_updated

    @property
    def oauth_migration_status(self):
        """Gets the oauth_migration_status of this ProviderAccount.

        Indicates the migration status of the provider account from screen-scraping provider to the Open Banking provider. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>GET providerAccounts/{providerAccountId}</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The oauth_migration_status of this ProviderAccount.
        :rtype: str
        """
        return self._oauth_migration_status

    @oauth_migration_status.setter
    def oauth_migration_status(self, oauth_migration_status):
        """Sets the oauth_migration_status of this ProviderAccount.

        Indicates the migration status of the provider account from screen-scraping provider to the Open Banking provider. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>GET providerAccounts/{providerAccountId}</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>

        :param oauth_migration_status: The oauth_migration_status of this ProviderAccount.
        :type oauth_migration_status: str
        """
        allowed_values = ["IN_PROGRESS", "TO_BE_MIGRATED", "COMPLETED"]  # noqa: E501
        if oauth_migration_status not in allowed_values:
            raise ValueError(
                "Invalid value for `oauth_migration_status` ({0}), must be one of {1}"
                .format(oauth_migration_status, allowed_values)
            )

        self._oauth_migration_status = oauth_migration_status

    @property
    def preferences(self):
        """Gets the preferences of this ProviderAccount.


        :return: The preferences of this ProviderAccount.
        :rtype: ProviderAccountPreferences
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences):
        """Sets the preferences of this ProviderAccount.


        :param preferences: The preferences of this ProviderAccount.
        :type preferences: ProviderAccountPreferences
        """

        self._preferences = preferences

    @property
    def provider_id(self):
        """Gets the provider_id of this ProviderAccount.

        Unique identifier for the provider resource. This denotes the provider for which the provider account id is generated by the user.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>

        :return: The provider_id of this ProviderAccount.
        :rtype: int
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this ProviderAccount.

        Unique identifier for the provider resource. This denotes the provider for which the provider account id is generated by the user.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>

        :param provider_id: The provider_id of this ProviderAccount.
        :type provider_id: int
        """

        self._provider_id = provider_id

    @property
    def request_id(self):
        """Gets the request_id of this ProviderAccount.

        Unique id generated to indicate the request.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>

        :return: The request_id of this ProviderAccount.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ProviderAccount.

        Unique id generated to indicate the request.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>

        :param request_id: The request_id of this ProviderAccount.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def status(self):
        """Gets the status of this ProviderAccount.

        The status of last update attempted for the account. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :return: The status of this ProviderAccount.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProviderAccount.

        The status of last update attempted for the account. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>

        :param status: The status of this ProviderAccount.
        :type status: str
        """
        allowed_values = ["LOGIN_IN_PROGRESS", "USER_INPUT_REQUIRED", "IN_PROGRESS", "PARTIAL_SUCCESS", "SUCCESS", "FAILED", "MIGRATION_IN_PROGRESS"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
