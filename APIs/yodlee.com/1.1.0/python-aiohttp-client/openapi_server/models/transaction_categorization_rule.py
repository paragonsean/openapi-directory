# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rule_clause import RuleClause
from openapi_server import util


class TransactionCategorizationRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_level_id: int=None, mem_id: int=None, rule_clauses: List[RuleClause]=None, rule_priority: int=None, transaction_categorisation_id: int=None, user_defined_rule_id: int=None):
        """TransactionCategorizationRule - a model defined in OpenAPI

        :param category_level_id: The category_level_id of this TransactionCategorizationRule.
        :param mem_id: The mem_id of this TransactionCategorizationRule.
        :param rule_clauses: The rule_clauses of this TransactionCategorizationRule.
        :param rule_priority: The rule_priority of this TransactionCategorizationRule.
        :param transaction_categorisation_id: The transaction_categorisation_id of this TransactionCategorizationRule.
        :param user_defined_rule_id: The user_defined_rule_id of this TransactionCategorizationRule.
        """
        self.openapi_types = {
            'category_level_id': int,
            'mem_id': int,
            'rule_clauses': List[RuleClause],
            'rule_priority': int,
            'transaction_categorisation_id': int,
            'user_defined_rule_id': int
        }

        self.attribute_map = {
            'category_level_id': 'categoryLevelId',
            'mem_id': 'memId',
            'rule_clauses': 'ruleClauses',
            'rule_priority': 'rulePriority',
            'transaction_categorisation_id': 'transactionCategorisationId',
            'user_defined_rule_id': 'userDefinedRuleId'
        }

        self._category_level_id = category_level_id
        self._mem_id = mem_id
        self._rule_clauses = rule_clauses
        self._rule_priority = rule_priority
        self._transaction_categorisation_id = transaction_categorisation_id
        self._user_defined_rule_id = user_defined_rule_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactionCategorizationRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransactionCategorizationRule of this TransactionCategorizationRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_level_id(self):
        """Gets the category_level_id of this TransactionCategorizationRule.

        The level of the category for which the rule is created.<br><br><b>Applicable containers</b>:  creditCard, insurance, loan<br>

        :return: The category_level_id of this TransactionCategorizationRule.
        :rtype: int
        """
        return self._category_level_id

    @category_level_id.setter
    def category_level_id(self, category_level_id):
        """Sets the category_level_id of this TransactionCategorizationRule.

        The level of the category for which the rule is created.<br><br><b>Applicable containers</b>:  creditCard, insurance, loan<br>

        :param category_level_id: The category_level_id of this TransactionCategorizationRule.
        :type category_level_id: int
        """

        self._category_level_id = category_level_id

    @property
    def mem_id(self):
        """Gets the mem_id of this TransactionCategorizationRule.

        Unique identifier of the user.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :return: The mem_id of this TransactionCategorizationRule.
        :rtype: int
        """
        return self._mem_id

    @mem_id.setter
    def mem_id(self, mem_id):
        """Sets the mem_id of this TransactionCategorizationRule.

        Unique identifier of the user.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :param mem_id: The mem_id of this TransactionCategorizationRule.
        :type mem_id: int
        """

        self._mem_id = mem_id

    @property
    def rule_clauses(self):
        """Gets the rule_clauses of this TransactionCategorizationRule.

        Details of rules. <br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :return: The rule_clauses of this TransactionCategorizationRule.
        :rtype: List[RuleClause]
        """
        return self._rule_clauses

    @rule_clauses.setter
    def rule_clauses(self, rule_clauses):
        """Sets the rule_clauses of this TransactionCategorizationRule.

        Details of rules. <br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :param rule_clauses: The rule_clauses of this TransactionCategorizationRule.
        :type rule_clauses: List[RuleClause]
        """

        self._rule_clauses = rule_clauses

    @property
    def rule_priority(self):
        """Gets the rule_priority of this TransactionCategorizationRule.

        The order in which the rules get executed on transactions.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :return: The rule_priority of this TransactionCategorizationRule.
        :rtype: int
        """
        return self._rule_priority

    @rule_priority.setter
    def rule_priority(self, rule_priority):
        """Sets the rule_priority of this TransactionCategorizationRule.

        The order in which the rules get executed on transactions.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :param rule_priority: The rule_priority of this TransactionCategorizationRule.
        :type rule_priority: int
        """

        self._rule_priority = rule_priority

    @property
    def transaction_categorisation_id(self):
        """Gets the transaction_categorisation_id of this TransactionCategorizationRule.

        Category id that is assigned to the transaction when the transaction matches the rule clause. This is the id field of the transaction category resource.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :return: The transaction_categorisation_id of this TransactionCategorizationRule.
        :rtype: int
        """
        return self._transaction_categorisation_id

    @transaction_categorisation_id.setter
    def transaction_categorisation_id(self, transaction_categorisation_id):
        """Sets the transaction_categorisation_id of this TransactionCategorizationRule.

        Category id that is assigned to the transaction when the transaction matches the rule clause. This is the id field of the transaction category resource.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :param transaction_categorisation_id: The transaction_categorisation_id of this TransactionCategorizationRule.
        :type transaction_categorisation_id: int
        """

        self._transaction_categorisation_id = transaction_categorisation_id

    @property
    def user_defined_rule_id(self):
        """Gets the user_defined_rule_id of this TransactionCategorizationRule.

        Unique identifier generated for every rule the user creates.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :return: The user_defined_rule_id of this TransactionCategorizationRule.
        :rtype: int
        """
        return self._user_defined_rule_id

    @user_defined_rule_id.setter
    def user_defined_rule_id(self, user_defined_rule_id):
        """Sets the user_defined_rule_id of this TransactionCategorizationRule.

        Unique identifier generated for every rule the user creates.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>

        :param user_defined_rule_id: The user_defined_rule_id of this TransactionCategorizationRule.
        :type user_defined_rule_id: int
        """

        self._user_defined_rule_id = user_defined_rule_id
