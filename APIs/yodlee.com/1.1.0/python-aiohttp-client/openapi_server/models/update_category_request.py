# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateCategoryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_name: str=None, high_level_category_name: str=None, id: int=None, source: str=None):
        """UpdateCategoryRequest - a model defined in OpenAPI

        :param category_name: The category_name of this UpdateCategoryRequest.
        :param high_level_category_name: The high_level_category_name of this UpdateCategoryRequest.
        :param id: The id of this UpdateCategoryRequest.
        :param source: The source of this UpdateCategoryRequest.
        """
        self.openapi_types = {
            'category_name': str,
            'high_level_category_name': str,
            'id': int,
            'source': str
        }

        self.attribute_map = {
            'category_name': 'categoryName',
            'high_level_category_name': 'highLevelCategoryName',
            'id': 'id',
            'source': 'source'
        }

        self._category_name = category_name
        self._high_level_category_name = high_level_category_name
        self._id = id
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateCategoryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateCategoryRequest of this UpdateCategoryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_name(self):
        """Gets the category_name of this UpdateCategoryRequest.


        :return: The category_name of this UpdateCategoryRequest.
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """Sets the category_name of this UpdateCategoryRequest.


        :param category_name: The category_name of this UpdateCategoryRequest.
        :type category_name: str
        """

        self._category_name = category_name

    @property
    def high_level_category_name(self):
        """Gets the high_level_category_name of this UpdateCategoryRequest.


        :return: The high_level_category_name of this UpdateCategoryRequest.
        :rtype: str
        """
        return self._high_level_category_name

    @high_level_category_name.setter
    def high_level_category_name(self, high_level_category_name):
        """Sets the high_level_category_name of this UpdateCategoryRequest.


        :param high_level_category_name: The high_level_category_name of this UpdateCategoryRequest.
        :type high_level_category_name: str
        """

        self._high_level_category_name = high_level_category_name

    @property
    def id(self):
        """Gets the id of this UpdateCategoryRequest.


        :return: The id of this UpdateCategoryRequest.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdateCategoryRequest.


        :param id: The id of this UpdateCategoryRequest.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and id < 1:
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")

        self._id = id

    @property
    def source(self):
        """Gets the source of this UpdateCategoryRequest.


        :return: The source of this UpdateCategoryRequest.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this UpdateCategoryRequest.


        :param source: The source of this UpdateCategoryRequest.
        :type source: str
        """
        allowed_values = ["SYSTEM", "USER"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"
                .format(source, allowed_values)
            )

        self._source = source
