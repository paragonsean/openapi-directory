# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.verification_bank_transfer_code import VerificationBankTransferCode
from openapi_server import util


class VerificationAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_name: str=None, account_number: str=None, account_type: str=None, bank_transfer_code: VerificationBankTransferCode=None):
        """VerificationAccount - a model defined in OpenAPI

        :param account_name: The account_name of this VerificationAccount.
        :param account_number: The account_number of this VerificationAccount.
        :param account_type: The account_type of this VerificationAccount.
        :param bank_transfer_code: The bank_transfer_code of this VerificationAccount.
        """
        self.openapi_types = {
            'account_name': str,
            'account_number': str,
            'account_type': str,
            'bank_transfer_code': VerificationBankTransferCode
        }

        self.attribute_map = {
            'account_name': 'accountName',
            'account_number': 'accountNumber',
            'account_type': 'accountType',
            'bank_transfer_code': 'bankTransferCode'
        }

        self._account_name = account_name
        self._account_number = account_number
        self._account_type = account_type
        self._bank_transfer_code = bank_transfer_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerificationAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VerificationAccount of this VerificationAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_name(self):
        """Gets the account_name of this VerificationAccount.


        :return: The account_name of this VerificationAccount.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this VerificationAccount.


        :param account_name: The account_name of this VerificationAccount.
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def account_number(self):
        """Gets the account_number of this VerificationAccount.


        :return: The account_number of this VerificationAccount.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this VerificationAccount.


        :param account_number: The account_number of this VerificationAccount.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")
        if account_number is not None and len(account_number) > 17:
            raise ValueError("Invalid value for `account_number`, length must be less than or equal to `17`")
        if account_number is not None and len(account_number) < 3:
            raise ValueError("Invalid value for `account_number`, length must be greater than or equal to `3`")

        self._account_number = account_number

    @property
    def account_type(self):
        """Gets the account_type of this VerificationAccount.


        :return: The account_type of this VerificationAccount.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this VerificationAccount.


        :param account_type: The account_type of this VerificationAccount.
        :type account_type: str
        """
        allowed_values = ["SAVINGS", "CHECKING"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def bank_transfer_code(self):
        """Gets the bank_transfer_code of this VerificationAccount.


        :return: The bank_transfer_code of this VerificationAccount.
        :rtype: VerificationBankTransferCode
        """
        return self._bank_transfer_code

    @bank_transfer_code.setter
    def bank_transfer_code(self, bank_transfer_code):
        """Sets the bank_transfer_code of this VerificationAccount.


        :param bank_transfer_code: The bank_transfer_code of this VerificationAccount.
        :type bank_transfer_code: VerificationBankTransferCode
        """
        if bank_transfer_code is None:
            raise ValueError("Invalid value for `bank_transfer_code`, must not be `None`")

        self._bank_transfer_code = bank_transfer_code
