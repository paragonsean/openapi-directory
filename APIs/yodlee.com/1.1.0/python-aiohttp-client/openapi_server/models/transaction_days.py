# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransactionDays(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, full_account_number_fields: List[str]=None, number_of_transaction_days: int=None):
        """TransactionDays - a model defined in OpenAPI

        :param full_account_number_fields: The full_account_number_fields of this TransactionDays.
        :param number_of_transaction_days: The number_of_transaction_days of this TransactionDays.
        """
        self.openapi_types = {
            'full_account_number_fields': List[str],
            'number_of_transaction_days': int
        }

        self.attribute_map = {
            'full_account_number_fields': 'fullAccountNumberFields',
            'number_of_transaction_days': 'numberOfTransactionDays'
        }

        self._full_account_number_fields = full_account_number_fields
        self._number_of_transaction_days = number_of_transaction_days

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactionDays':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransactionDays of this TransactionDays.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def full_account_number_fields(self):
        """Gets the full_account_number_fields of this TransactionDays.


        :return: The full_account_number_fields of this TransactionDays.
        :rtype: List[str]
        """
        return self._full_account_number_fields

    @full_account_number_fields.setter
    def full_account_number_fields(self, full_account_number_fields):
        """Sets the full_account_number_fields of this TransactionDays.


        :param full_account_number_fields: The full_account_number_fields of this TransactionDays.
        :type full_account_number_fields: List[str]
        """
        allowed_values = ["paymentAccountNumber", "unmaskedAccountNumber"]  # noqa: E501
        if not set(full_account_number_fields).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `full_account_number_fields` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(full_account_number_fields) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._full_account_number_fields = full_account_number_fields

    @property
    def number_of_transaction_days(self):
        """Gets the number_of_transaction_days of this TransactionDays.


        :return: The number_of_transaction_days of this TransactionDays.
        :rtype: int
        """
        return self._number_of_transaction_days

    @number_of_transaction_days.setter
    def number_of_transaction_days(self, number_of_transaction_days):
        """Sets the number_of_transaction_days of this TransactionDays.


        :param number_of_transaction_days: The number_of_transaction_days of this TransactionDays.
        :type number_of_transaction_days: int
        """

        self._number_of_transaction_days = number_of_transaction_days
