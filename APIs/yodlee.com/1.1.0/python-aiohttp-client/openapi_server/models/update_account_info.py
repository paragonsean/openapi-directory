# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_address import AccountAddress
from openapi_server.models.money import Money
import re
from openapi_server import util


class UpdateAccountInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_name: str=None, account_number: str=None, account_status: str=None, address: AccountAddress=None, amount_due: Money=None, balance: Money=None, container: str=None, due_date: str=None, frequency: str=None, home_value: Money=None, include_in_net_worth: str=None, is_ebill_enrolled: str=None, memo: str=None, nickname: str=None):
        """UpdateAccountInfo - a model defined in OpenAPI

        :param account_name: The account_name of this UpdateAccountInfo.
        :param account_number: The account_number of this UpdateAccountInfo.
        :param account_status: The account_status of this UpdateAccountInfo.
        :param address: The address of this UpdateAccountInfo.
        :param amount_due: The amount_due of this UpdateAccountInfo.
        :param balance: The balance of this UpdateAccountInfo.
        :param container: The container of this UpdateAccountInfo.
        :param due_date: The due_date of this UpdateAccountInfo.
        :param frequency: The frequency of this UpdateAccountInfo.
        :param home_value: The home_value of this UpdateAccountInfo.
        :param include_in_net_worth: The include_in_net_worth of this UpdateAccountInfo.
        :param is_ebill_enrolled: The is_ebill_enrolled of this UpdateAccountInfo.
        :param memo: The memo of this UpdateAccountInfo.
        :param nickname: The nickname of this UpdateAccountInfo.
        """
        self.openapi_types = {
            'account_name': str,
            'account_number': str,
            'account_status': str,
            'address': AccountAddress,
            'amount_due': Money,
            'balance': Money,
            'container': str,
            'due_date': str,
            'frequency': str,
            'home_value': Money,
            'include_in_net_worth': str,
            'is_ebill_enrolled': str,
            'memo': str,
            'nickname': str
        }

        self.attribute_map = {
            'account_name': 'accountName',
            'account_number': 'accountNumber',
            'account_status': 'accountStatus',
            'address': 'address',
            'amount_due': 'amountDue',
            'balance': 'balance',
            'container': 'container',
            'due_date': 'dueDate',
            'frequency': 'frequency',
            'home_value': 'homeValue',
            'include_in_net_worth': 'includeInNetWorth',
            'is_ebill_enrolled': 'isEbillEnrolled',
            'memo': 'memo',
            'nickname': 'nickname'
        }

        self._account_name = account_name
        self._account_number = account_number
        self._account_status = account_status
        self._address = address
        self._amount_due = amount_due
        self._balance = balance
        self._container = container
        self._due_date = due_date
        self._frequency = frequency
        self._home_value = home_value
        self._include_in_net_worth = include_in_net_worth
        self._is_ebill_enrolled = is_ebill_enrolled
        self._memo = memo
        self._nickname = nickname

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAccountInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAccountInfo of this UpdateAccountInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_name(self):
        """Gets the account_name of this UpdateAccountInfo.


        :return: The account_name of this UpdateAccountInfo.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this UpdateAccountInfo.


        :param account_name: The account_name of this UpdateAccountInfo.
        :type account_name: str
        """
        if account_name is not None and len(account_name) > 100:
            raise ValueError("Invalid value for `account_name`, length must be less than or equal to `100`")
        if account_name is not None and len(account_name) < 1:
            raise ValueError("Invalid value for `account_name`, length must be greater than or equal to `1`")

        self._account_name = account_name

    @property
    def account_number(self):
        """Gets the account_number of this UpdateAccountInfo.


        :return: The account_number of this UpdateAccountInfo.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this UpdateAccountInfo.


        :param account_number: The account_number of this UpdateAccountInfo.
        :type account_number: str
        """
        if account_number is not None and len(account_number) > 100:
            raise ValueError("Invalid value for `account_number`, length must be less than or equal to `100`")
        if account_number is not None and len(account_number) < 0:
            raise ValueError("Invalid value for `account_number`, length must be greater than or equal to `0`")
        if account_number is not None and not re.search(r'^[a-zA-Z0-9]+$', account_number):
            raise ValueError("Invalid value for `account_number`, must be a follow pattern or equal to `/^[a-zA-Z0-9]+$/`")

        self._account_number = account_number

    @property
    def account_status(self):
        """Gets the account_status of this UpdateAccountInfo.


        :return: The account_status of this UpdateAccountInfo.
        :rtype: str
        """
        return self._account_status

    @account_status.setter
    def account_status(self, account_status):
        """Sets the account_status of this UpdateAccountInfo.


        :param account_status: The account_status of this UpdateAccountInfo.
        :type account_status: str
        """
        allowed_values = ["ACTIVE", "INACTIVE", "TO_BE_CLOSED", "CLOSED", "DELETED"]  # noqa: E501
        if account_status not in allowed_values:
            raise ValueError(
                "Invalid value for `account_status` ({0}), must be one of {1}"
                .format(account_status, allowed_values)
            )

        self._account_status = account_status

    @property
    def address(self):
        """Gets the address of this UpdateAccountInfo.


        :return: The address of this UpdateAccountInfo.
        :rtype: AccountAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this UpdateAccountInfo.


        :param address: The address of this UpdateAccountInfo.
        :type address: AccountAddress
        """

        self._address = address

    @property
    def amount_due(self):
        """Gets the amount_due of this UpdateAccountInfo.


        :return: The amount_due of this UpdateAccountInfo.
        :rtype: Money
        """
        return self._amount_due

    @amount_due.setter
    def amount_due(self, amount_due):
        """Sets the amount_due of this UpdateAccountInfo.


        :param amount_due: The amount_due of this UpdateAccountInfo.
        :type amount_due: Money
        """

        self._amount_due = amount_due

    @property
    def balance(self):
        """Gets the balance of this UpdateAccountInfo.


        :return: The balance of this UpdateAccountInfo.
        :rtype: Money
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this UpdateAccountInfo.


        :param balance: The balance of this UpdateAccountInfo.
        :type balance: Money
        """

        self._balance = balance

    @property
    def container(self):
        """Gets the container of this UpdateAccountInfo.


        :return: The container of this UpdateAccountInfo.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this UpdateAccountInfo.


        :param container: The container of this UpdateAccountInfo.
        :type container: str
        """
        allowed_values = ["bank", "creditCard", "investment", "insurance", "loan", "reward", "realEstate", "otherAssets", "otherLiabilities"]  # noqa: E501
        if container not in allowed_values:
            raise ValueError(
                "Invalid value for `container` ({0}), must be one of {1}"
                .format(container, allowed_values)
            )

        self._container = container

    @property
    def due_date(self):
        """Gets the due_date of this UpdateAccountInfo.


        :return: The due_date of this UpdateAccountInfo.
        :rtype: str
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this UpdateAccountInfo.


        :param due_date: The due_date of this UpdateAccountInfo.
        :type due_date: str
        """

        self._due_date = due_date

    @property
    def frequency(self):
        """Gets the frequency of this UpdateAccountInfo.


        :return: The frequency of this UpdateAccountInfo.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this UpdateAccountInfo.


        :param frequency: The frequency of this UpdateAccountInfo.
        :type frequency: str
        """
        allowed_values = ["DAILY", "ONE_TIME", "WEEKLY", "EVERY_2_WEEKS", "SEMI_MONTHLY", "MONTHLY", "QUARTERLY", "SEMI_ANNUALLY", "ANNUALLY", "EVERY_2_MONTHS", "EBILL", "FIRST_DAY_MONTHLY", "LAST_DAY_MONTHLY", "EVERY_4_WEEKS", "UNKNOWN", "OTHER"]  # noqa: E501
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def home_value(self):
        """Gets the home_value of this UpdateAccountInfo.


        :return: The home_value of this UpdateAccountInfo.
        :rtype: Money
        """
        return self._home_value

    @home_value.setter
    def home_value(self, home_value):
        """Sets the home_value of this UpdateAccountInfo.


        :param home_value: The home_value of this UpdateAccountInfo.
        :type home_value: Money
        """

        self._home_value = home_value

    @property
    def include_in_net_worth(self):
        """Gets the include_in_net_worth of this UpdateAccountInfo.


        :return: The include_in_net_worth of this UpdateAccountInfo.
        :rtype: str
        """
        return self._include_in_net_worth

    @include_in_net_worth.setter
    def include_in_net_worth(self, include_in_net_worth):
        """Sets the include_in_net_worth of this UpdateAccountInfo.


        :param include_in_net_worth: The include_in_net_worth of this UpdateAccountInfo.
        :type include_in_net_worth: str
        """

        self._include_in_net_worth = include_in_net_worth

    @property
    def is_ebill_enrolled(self):
        """Gets the is_ebill_enrolled of this UpdateAccountInfo.


        :return: The is_ebill_enrolled of this UpdateAccountInfo.
        :rtype: str
        """
        return self._is_ebill_enrolled

    @is_ebill_enrolled.setter
    def is_ebill_enrolled(self, is_ebill_enrolled):
        """Sets the is_ebill_enrolled of this UpdateAccountInfo.


        :param is_ebill_enrolled: The is_ebill_enrolled of this UpdateAccountInfo.
        :type is_ebill_enrolled: str
        """

        self._is_ebill_enrolled = is_ebill_enrolled

    @property
    def memo(self):
        """Gets the memo of this UpdateAccountInfo.


        :return: The memo of this UpdateAccountInfo.
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this UpdateAccountInfo.


        :param memo: The memo of this UpdateAccountInfo.
        :type memo: str
        """
        if memo is not None and len(memo) > 250:
            raise ValueError("Invalid value for `memo`, length must be less than or equal to `250`")
        if memo is not None and len(memo) < 0:
            raise ValueError("Invalid value for `memo`, length must be greater than or equal to `0`")

        self._memo = memo

    @property
    def nickname(self):
        """Gets the nickname of this UpdateAccountInfo.


        :return: The nickname of this UpdateAccountInfo.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this UpdateAccountInfo.


        :param nickname: The nickname of this UpdateAccountInfo.
        :type nickname: str
        """
        if nickname is not None and len(nickname) > 50:
            raise ValueError("Invalid value for `nickname`, length must be less than or equal to `50`")
        if nickname is not None and len(nickname) < 0:
            raise ValueError("Invalid value for `nickname`, length must be greater than or equal to `0`")

        self._nickname = nickname
