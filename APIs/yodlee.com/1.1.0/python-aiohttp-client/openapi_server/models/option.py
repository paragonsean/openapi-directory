# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Option(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_text: str=None, is_selected: bool=None, option_value: str=None):
        """Option - a model defined in OpenAPI

        :param display_text: The display_text of this Option.
        :param is_selected: The is_selected of this Option.
        :param option_value: The option_value of this Option.
        """
        self.openapi_types = {
            'display_text': str,
            'is_selected': bool,
            'option_value': str
        }

        self.attribute_map = {
            'display_text': 'displayText',
            'is_selected': 'isSelected',
            'option_value': 'optionValue'
        }

        self._display_text = display_text
        self._is_selected = is_selected
        self._option_value = option_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Option':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Option of this Option.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_text(self):
        """Gets the display_text of this Option.

        The text that is displayed to the user for that option in the provider site.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>

        :return: The display_text of this Option.
        :rtype: str
        """
        return self._display_text

    @display_text.setter
    def display_text(self, display_text):
        """Sets the display_text of this Option.

        The text that is displayed to the user for that option in the provider site.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>

        :param display_text: The display_text of this Option.
        :type display_text: str
        """

        self._display_text = display_text

    @property
    def is_selected(self):
        """Gets the is_selected of this Option.

        The option that is selected by default in the provider site.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>

        :return: The is_selected of this Option.
        :rtype: bool
        """
        return self._is_selected

    @is_selected.setter
    def is_selected(self, is_selected):
        """Sets the is_selected of this Option.

        The option that is selected by default in the provider site.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>

        :param is_selected: The is_selected of this Option.
        :type is_selected: bool
        """

        self._is_selected = is_selected

    @property
    def option_value(self):
        """Gets the option_value of this Option.

        The value that is associated with the option.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>

        :return: The option_value of this Option.
        :rtype: str
        """
        return self._option_value

    @option_value.setter
    def option_value(self, option_value):
        """Sets the option_value of this Option.

        The value that is associated with the option.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>

        :param option_value: The option_value of this Option.
        :type option_value: str
        """

        self._option_value = option_value
