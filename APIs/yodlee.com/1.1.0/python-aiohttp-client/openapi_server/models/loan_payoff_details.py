# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class LoanPayoffDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, outstanding_balance: Money=None, pay_by_date: str=None, payoff_amount: Money=None):
        """LoanPayoffDetails - a model defined in OpenAPI

        :param outstanding_balance: The outstanding_balance of this LoanPayoffDetails.
        :param pay_by_date: The pay_by_date of this LoanPayoffDetails.
        :param payoff_amount: The payoff_amount of this LoanPayoffDetails.
        """
        self.openapi_types = {
            'outstanding_balance': Money,
            'pay_by_date': str,
            'payoff_amount': Money
        }

        self.attribute_map = {
            'outstanding_balance': 'outstandingBalance',
            'pay_by_date': 'payByDate',
            'payoff_amount': 'payoffAmount'
        }

        self._outstanding_balance = outstanding_balance
        self._pay_by_date = pay_by_date
        self._payoff_amount = payoff_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoanPayoffDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoanPayoffDetails of this LoanPayoffDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def outstanding_balance(self):
        """Gets the outstanding_balance of this LoanPayoffDetails.


        :return: The outstanding_balance of this LoanPayoffDetails.
        :rtype: Money
        """
        return self._outstanding_balance

    @outstanding_balance.setter
    def outstanding_balance(self, outstanding_balance):
        """Sets the outstanding_balance of this LoanPayoffDetails.


        :param outstanding_balance: The outstanding_balance of this LoanPayoffDetails.
        :type outstanding_balance: Money
        """

        self._outstanding_balance = outstanding_balance

    @property
    def pay_by_date(self):
        """Gets the pay_by_date of this LoanPayoffDetails.

        The date by which the payoff amount should be paid.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>

        :return: The pay_by_date of this LoanPayoffDetails.
        :rtype: str
        """
        return self._pay_by_date

    @pay_by_date.setter
    def pay_by_date(self, pay_by_date):
        """Sets the pay_by_date of this LoanPayoffDetails.

        The date by which the payoff amount should be paid.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>

        :param pay_by_date: The pay_by_date of this LoanPayoffDetails.
        :type pay_by_date: str
        """

        self._pay_by_date = pay_by_date

    @property
    def payoff_amount(self):
        """Gets the payoff_amount of this LoanPayoffDetails.


        :return: The payoff_amount of this LoanPayoffDetails.
        :rtype: Money
        """
        return self._payoff_amount

    @payoff_amount.setter
    def payoff_amount(self, payoff_amount):
        """Sets the payoff_amount of this LoanPayoffDetails.


        :param payoff_amount: The payoff_amount of this LoanPayoffDetails.
        :type payoff_amount: Money
        """

        self._payoff_amount = payoff_amount
