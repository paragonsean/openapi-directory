# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.coverage_amount import CoverageAmount
from openapi_server import util


class Coverage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: List[CoverageAmount]=None, end_date: str=None, plan_type: str=None, start_date: str=None, type: str=None):
        """Coverage - a model defined in OpenAPI

        :param amount: The amount of this Coverage.
        :param end_date: The end_date of this Coverage.
        :param plan_type: The plan_type of this Coverage.
        :param start_date: The start_date of this Coverage.
        :param type: The type of this Coverage.
        """
        self.openapi_types = {
            'amount': List[CoverageAmount],
            'end_date': str,
            'plan_type': str,
            'start_date': str,
            'type': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'end_date': 'endDate',
            'plan_type': 'planType',
            'start_date': 'startDate',
            'type': 'type'
        }

        self._amount = amount
        self._end_date = end_date
        self._plan_type = plan_type
        self._start_date = start_date
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Coverage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Coverage of this Coverage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this Coverage.

        The coverage amount-related details.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>

        :return: The amount of this Coverage.
        :rtype: List[CoverageAmount]
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Coverage.

        The coverage amount-related details.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>

        :param amount: The amount of this Coverage.
        :type amount: List[CoverageAmount]
        """

        self._amount = amount

    @property
    def end_date(self):
        """Gets the end_date of this Coverage.

        The date on which the coverage for the account ends or expires.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>

        :return: The end_date of this Coverage.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Coverage.

        The date on which the coverage for the account ends or expires.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>

        :param end_date: The end_date of this Coverage.
        :type end_date: str
        """

        self._end_date = end_date

    @property
    def plan_type(self):
        """Gets the plan_type of this Coverage.

        The plan type for an insurance provided to an individual or an entity.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values:</b><br>

        :return: The plan_type of this Coverage.
        :rtype: str
        """
        return self._plan_type

    @plan_type.setter
    def plan_type(self, plan_type):
        """Sets the plan_type of this Coverage.

        The plan type for an insurance provided to an individual or an entity.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values:</b><br>

        :param plan_type: The plan_type of this Coverage.
        :type plan_type: str
        """
        allowed_values = ["PPO", "HMO", "UNKNOWN"]  # noqa: E501
        if plan_type not in allowed_values:
            raise ValueError(
                "Invalid value for `plan_type` ({0}), must be one of {1}"
                .format(plan_type, allowed_values)
            )

        self._plan_type = plan_type

    @property
    def start_date(self):
        """Gets the start_date of this Coverage.

        The date on which the coverage for the account starts.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>

        :return: The start_date of this Coverage.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Coverage.

        The date on which the coverage for the account starts.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>

        :param start_date: The start_date of this Coverage.
        :type start_date: str
        """

        self._start_date = start_date

    @property
    def type(self):
        """Gets the type of this Coverage.

        The type of coverage provided to an individual or an entity.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values:</b><br>

        :return: The type of this Coverage.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Coverage.

        The type of coverage provided to an individual or an entity.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values:</b><br>

        :param type: The type of this Coverage.
        :type type: str
        """
        allowed_values = ["VISION", "DENTAL", "MEDICAL", "HEALTH", "DEATH_COVER", "TOTAL_PERMANENT_DISABILITY", "ACCIDENTAL_DEATH_COVER", "INCOME_PROTECTION", "DEATH_TOTAL_PERMANENT_DISABILITY", "OTHER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
