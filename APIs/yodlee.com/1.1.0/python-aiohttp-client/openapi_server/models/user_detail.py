# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.name import Name
from openapi_server.models.user_address import UserAddress
from openapi_server.models.user_response_preferences import UserResponsePreferences
from openapi_server import util


class UserDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: UserAddress=None, email: str=None, id: int=None, login_name: str=None, name: Name=None, preferences: UserResponsePreferences=None, role_type: str=None, segment_name: str=None):
        """UserDetail - a model defined in OpenAPI

        :param address: The address of this UserDetail.
        :param email: The email of this UserDetail.
        :param id: The id of this UserDetail.
        :param login_name: The login_name of this UserDetail.
        :param name: The name of this UserDetail.
        :param preferences: The preferences of this UserDetail.
        :param role_type: The role_type of this UserDetail.
        :param segment_name: The segment_name of this UserDetail.
        """
        self.openapi_types = {
            'address': UserAddress,
            'email': str,
            'id': int,
            'login_name': str,
            'name': Name,
            'preferences': UserResponsePreferences,
            'role_type': str,
            'segment_name': str
        }

        self.attribute_map = {
            'address': 'address',
            'email': 'email',
            'id': 'id',
            'login_name': 'loginName',
            'name': 'name',
            'preferences': 'preferences',
            'role_type': 'roleType',
            'segment_name': 'segmentName'
        }

        self._address = address
        self._email = email
        self._id = id
        self._login_name = login_name
        self._name = name
        self._preferences = preferences
        self._role_type = role_type
        self._segment_name = segment_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserDetail of this UserDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this UserDetail.


        :return: The address of this UserDetail.
        :rtype: UserAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this UserDetail.


        :param address: The address of this UserDetail.
        :type address: UserAddress
        """

        self._address = address

    @property
    def email(self):
        """Gets the email of this UserDetail.

        The email address of the user.<br><br><b>Endpoints</b>:<ul><li>GET user</li></ul>

        :return: The email of this UserDetail.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserDetail.

        The email address of the user.<br><br><b>Endpoints</b>:<ul><li>GET user</li></ul>

        :param email: The email of this UserDetail.
        :type email: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this UserDetail.

        The unique identifier of a consumer/user in Yodlee system for whom the API services would be accessed for.<br><br><b>Endpoints</b>:<ul><li>POST user/samlLogin</li><li>POST user/register</li><li>GET user</li></ul>

        :return: The id of this UserDetail.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserDetail.

        The unique identifier of a consumer/user in Yodlee system for whom the API services would be accessed for.<br><br><b>Endpoints</b>:<ul><li>POST user/samlLogin</li><li>POST user/register</li><li>GET user</li></ul>

        :param id: The id of this UserDetail.
        :type id: int
        """

        self._id = id

    @property
    def login_name(self):
        """Gets the login_name of this UserDetail.

        The login name of the user used for authentication.<br><br><b>Endpoints</b>:<ul><li>POST user/register</li><li>GET user</li></ul>

        :return: The login_name of this UserDetail.
        :rtype: str
        """
        return self._login_name

    @login_name.setter
    def login_name(self, login_name):
        """Sets the login_name of this UserDetail.

        The login name of the user used for authentication.<br><br><b>Endpoints</b>:<ul><li>POST user/register</li><li>GET user</li></ul>

        :param login_name: The login_name of this UserDetail.
        :type login_name: str
        """

        self._login_name = login_name

    @property
    def name(self):
        """Gets the name of this UserDetail.


        :return: The name of this UserDetail.
        :rtype: Name
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserDetail.


        :param name: The name of this UserDetail.
        :type name: Name
        """

        self._name = name

    @property
    def preferences(self):
        """Gets the preferences of this UserDetail.


        :return: The preferences of this UserDetail.
        :rtype: UserResponsePreferences
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences):
        """Sets the preferences of this UserDetail.


        :param preferences: The preferences of this UserDetail.
        :type preferences: UserResponsePreferences
        """

        self._preferences = preferences

    @property
    def role_type(self):
        """Gets the role_type of this UserDetail.


        :return: The role_type of this UserDetail.
        :rtype: str
        """
        return self._role_type

    @role_type.setter
    def role_type(self, role_type):
        """Sets the role_type of this UserDetail.


        :param role_type: The role_type of this UserDetail.
        :type role_type: str
        """
        allowed_values = ["INDIVIDUAL"]  # noqa: E501
        if role_type not in allowed_values:
            raise ValueError(
                "Invalid value for `role_type` ({0}), must be one of {1}"
                .format(role_type, allowed_values)
            )

        self._role_type = role_type

    @property
    def segment_name(self):
        """Gets the segment_name of this UserDetail.


        :return: The segment_name of this UserDetail.
        :rtype: str
        """
        return self._segment_name

    @segment_name.setter
    def segment_name(self, segment_name):
        """Sets the segment_name of this UserDetail.


        :param segment_name: The segment_name of this UserDetail.
        :type segment_name: str
        """

        self._segment_name = segment_name
