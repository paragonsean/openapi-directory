# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container_attributes import ContainerAttributes
from openapi_server import util


class Attribute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container: List[str]=None, container_attributes: ContainerAttributes=None, from_date: str=None, from_fin_year: str=None, name: str=None, to_date: str=None, to_fin_year: str=None):
        """Attribute - a model defined in OpenAPI

        :param container: The container of this Attribute.
        :param container_attributes: The container_attributes of this Attribute.
        :param from_date: The from_date of this Attribute.
        :param from_fin_year: The from_fin_year of this Attribute.
        :param name: The name of this Attribute.
        :param to_date: The to_date of this Attribute.
        :param to_fin_year: The to_fin_year of this Attribute.
        """
        self.openapi_types = {
            'container': List[str],
            'container_attributes': ContainerAttributes,
            'from_date': str,
            'from_fin_year': str,
            'name': str,
            'to_date': str,
            'to_fin_year': str
        }

        self.attribute_map = {
            'container': 'container',
            'container_attributes': 'containerAttributes',
            'from_date': 'fromDate',
            'from_fin_year': 'fromFinYear',
            'name': 'name',
            'to_date': 'toDate',
            'to_fin_year': 'toFinYear'
        }

        self._container = container
        self._container_attributes = container_attributes
        self._from_date = from_date
        self._from_fin_year = from_fin_year
        self._name = name
        self._to_date = to_date
        self._to_fin_year = to_fin_year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attribute of this Attribute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container(self):
        """Gets the container of this Attribute.

        Containers for which the attributes are supported.<br><br><b>Endpoints</b>:<ul><li>GET providers</li><li>GET providers/{providerId}</li></ul>

        :return: The container of this Attribute.
        :rtype: List[str]
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this Attribute.

        Containers for which the attributes are supported.<br><br><b>Endpoints</b>:<ul><li>GET providers</li><li>GET providers/{providerId}</li></ul>

        :param container: The container of this Attribute.
        :type container: List[str]
        """
        allowed_values = ["bank", "creditCard", "investment", "insurance", "loan", "reward", "realEstate", "otherAssets", "otherLiabilities"]  # noqa: E501
        if not set(container).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `container` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(container) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._container = container

    @property
    def container_attributes(self):
        """Gets the container_attributes of this Attribute.


        :return: The container_attributes of this Attribute.
        :rtype: ContainerAttributes
        """
        return self._container_attributes

    @container_attributes.setter
    def container_attributes(self, container_attributes):
        """Sets the container_attributes of this Attribute.


        :param container_attributes: The container_attributes of this Attribute.
        :type container_attributes: ContainerAttributes
        """

        self._container_attributes = container_attributes

    @property
    def from_date(self):
        """Gets the from_date of this Attribute.

        Applicable only to EBILLS and STATEMENTS attributes of DOCUMENT dataset.<br><br><b>Endpoints</b>:<ul><li>POST providerAccounts</li><li>PUT providerAccounts</li></ul>

        :return: The from_date of this Attribute.
        :rtype: str
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this Attribute.

        Applicable only to EBILLS and STATEMENTS attributes of DOCUMENT dataset.<br><br><b>Endpoints</b>:<ul><li>POST providerAccounts</li><li>PUT providerAccounts</li></ul>

        :param from_date: The from_date of this Attribute.
        :type from_date: str
        """

        self._from_date = from_date

    @property
    def from_fin_year(self):
        """Gets the from_fin_year of this Attribute.

        Applicable only to TAX attribute of DOCUMENT dataset.<br><br><b>Endpoints</b>:<ul><li>POST providerAccounts</li><li>PUT providerAccounts</li></ul>

        :return: The from_fin_year of this Attribute.
        :rtype: str
        """
        return self._from_fin_year

    @from_fin_year.setter
    def from_fin_year(self, from_fin_year):
        """Sets the from_fin_year of this Attribute.

        Applicable only to TAX attribute of DOCUMENT dataset.<br><br><b>Endpoints</b>:<ul><li>POST providerAccounts</li><li>PUT providerAccounts</li></ul>

        :param from_fin_year: The from_fin_year of this Attribute.
        :type from_fin_year: str
        """

        self._from_fin_year = from_fin_year

    @property
    def name(self):
        """Gets the name of this Attribute.

        Attributes that are supported for a dataset.<br><br><b>Endpoints</b>:<ul><li>GET providers</li><li>GET providers/{providerId}</li></ul>

        :return: The name of this Attribute.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Attribute.

        Attributes that are supported for a dataset.<br><br><b>Endpoints</b>:<ul><li>GET providers</li><li>GET providers/{providerId}</li></ul>

        :param name: The name of this Attribute.
        :type name: str
        """
        allowed_values = ["BASIC_ACCOUNT_INFO", "TRANSACTIONS", "STATEMENTS", "HOLDINGS", "ACCOUNT_DETAILS", "TAX", "EBILLS", "FULL_ACCT_NUMBER", "BANK_TRANSFER_CODE", "HOLDER_NAME", "HOLDER_DETAILS", "PAYMENT_PROFILE", "PAYMENT_DETAILS", "INTEREST_DETAILS", "COVERAGE"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def to_date(self):
        """Gets the to_date of this Attribute.

        Applicable only to EBILLS and STATEMENTS attributes of DOCUMENT dataset.<br><br><b>Endpoints</b>:<ul><li>POST providerAccounts</li><li>PUT providerAccounts</li></ul>

        :return: The to_date of this Attribute.
        :rtype: str
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this Attribute.

        Applicable only to EBILLS and STATEMENTS attributes of DOCUMENT dataset.<br><br><b>Endpoints</b>:<ul><li>POST providerAccounts</li><li>PUT providerAccounts</li></ul>

        :param to_date: The to_date of this Attribute.
        :type to_date: str
        """

        self._to_date = to_date

    @property
    def to_fin_year(self):
        """Gets the to_fin_year of this Attribute.

        Applicable only to TAX attribute of DOCUMENT dataset.<br><br><b>Endpoints</b>:<ul><li>POST providerAccounts</li><li>PUT providerAccounts</li></ul>

        :return: The to_fin_year of this Attribute.
        :rtype: str
        """
        return self._to_fin_year

    @to_fin_year.setter
    def to_fin_year(self, to_fin_year):
        """Sets the to_fin_year of this Attribute.

        Applicable only to TAX attribute of DOCUMENT dataset.<br><br><b>Endpoints</b>:<ul><li>POST providerAccounts</li><li>PUT providerAccounts</li></ul>

        :param to_fin_year: The to_fin_year of this Attribute.
        :type to_fin_year: str
        """

        self._to_fin_year = to_fin_year
