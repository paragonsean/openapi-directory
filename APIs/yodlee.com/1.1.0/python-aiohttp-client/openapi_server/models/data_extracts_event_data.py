# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_extracts_event_user_data import DataExtractsEventUserData
from openapi_server import util


class DataExtractsEventData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, from_date: str=None, to_date: str=None, user_count: int=None, user_data: List[DataExtractsEventUserData]=None):
        """DataExtractsEventData - a model defined in OpenAPI

        :param from_date: The from_date of this DataExtractsEventData.
        :param to_date: The to_date of this DataExtractsEventData.
        :param user_count: The user_count of this DataExtractsEventData.
        :param user_data: The user_data of this DataExtractsEventData.
        """
        self.openapi_types = {
            'from_date': str,
            'to_date': str,
            'user_count': int,
            'user_data': List[DataExtractsEventUserData]
        }

        self.attribute_map = {
            'from_date': 'fromDate',
            'to_date': 'toDate',
            'user_count': 'userCount',
            'user_data': 'userData'
        }

        self._from_date = from_date
        self._to_date = to_date
        self._user_count = user_count
        self._user_data = user_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataExtractsEventData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataExtractsEventData of this DataExtractsEventData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def from_date(self):
        """Gets the from_date of this DataExtractsEventData.


        :return: The from_date of this DataExtractsEventData.
        :rtype: str
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this DataExtractsEventData.


        :param from_date: The from_date of this DataExtractsEventData.
        :type from_date: str
        """

        self._from_date = from_date

    @property
    def to_date(self):
        """Gets the to_date of this DataExtractsEventData.


        :return: The to_date of this DataExtractsEventData.
        :rtype: str
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this DataExtractsEventData.


        :param to_date: The to_date of this DataExtractsEventData.
        :type to_date: str
        """

        self._to_date = to_date

    @property
    def user_count(self):
        """Gets the user_count of this DataExtractsEventData.


        :return: The user_count of this DataExtractsEventData.
        :rtype: int
        """
        return self._user_count

    @user_count.setter
    def user_count(self, user_count):
        """Sets the user_count of this DataExtractsEventData.


        :param user_count: The user_count of this DataExtractsEventData.
        :type user_count: int
        """

        self._user_count = user_count

    @property
    def user_data(self):
        """Gets the user_data of this DataExtractsEventData.


        :return: The user_data of this DataExtractsEventData.
        :rtype: List[DataExtractsEventUserData]
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data):
        """Sets the user_data of this DataExtractsEventData.


        :param user_data: The user_data of this DataExtractsEventData.
        :type user_data: List[DataExtractsEventUserData]
        """

        self._user_data = user_data
