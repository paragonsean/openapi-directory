# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class DerivedNetworthHistoricalBalance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: int=None, as_of_date: str=None, balance: Money=None, data_source_type: str=None, _date: str=None, is_asset: bool=None):
        """DerivedNetworthHistoricalBalance - a model defined in OpenAPI

        :param account_id: The account_id of this DerivedNetworthHistoricalBalance.
        :param as_of_date: The as_of_date of this DerivedNetworthHistoricalBalance.
        :param balance: The balance of this DerivedNetworthHistoricalBalance.
        :param data_source_type: The data_source_type of this DerivedNetworthHistoricalBalance.
        :param _date: The _date of this DerivedNetworthHistoricalBalance.
        :param is_asset: The is_asset of this DerivedNetworthHistoricalBalance.
        """
        self.openapi_types = {
            'account_id': int,
            'as_of_date': str,
            'balance': Money,
            'data_source_type': str,
            '_date': str,
            'is_asset': bool
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'as_of_date': 'asOfDate',
            'balance': 'balance',
            'data_source_type': 'dataSourceType',
            '_date': 'date',
            'is_asset': 'isAsset'
        }

        self._account_id = account_id
        self._as_of_date = as_of_date
        self._balance = balance
        self._data_source_type = data_source_type
        self.__date = _date
        self._is_asset = is_asset

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DerivedNetworthHistoricalBalance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DerivedNetworthHistoricalBalance of this DerivedNetworthHistoricalBalance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this DerivedNetworthHistoricalBalance.


        :return: The account_id of this DerivedNetworthHistoricalBalance.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this DerivedNetworthHistoricalBalance.


        :param account_id: The account_id of this DerivedNetworthHistoricalBalance.
        :type account_id: int
        """

        self._account_id = account_id

    @property
    def as_of_date(self):
        """Gets the as_of_date of this DerivedNetworthHistoricalBalance.

        Date as of when the balance is last  updated due to the auto account updates or user triggered updates. This balance will be carry forward for the days where there is no balance available in the system. <br><br><b>Account Type</b>: Aggregated and Manual<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li></ul>

        :return: The as_of_date of this DerivedNetworthHistoricalBalance.
        :rtype: str
        """
        return self._as_of_date

    @as_of_date.setter
    def as_of_date(self, as_of_date):
        """Sets the as_of_date of this DerivedNetworthHistoricalBalance.

        Date as of when the balance is last  updated due to the auto account updates or user triggered updates. This balance will be carry forward for the days where there is no balance available in the system. <br><br><b>Account Type</b>: Aggregated and Manual<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li></ul>

        :param as_of_date: The as_of_date of this DerivedNetworthHistoricalBalance.
        :type as_of_date: str
        """

        self._as_of_date = as_of_date

    @property
    def balance(self):
        """Gets the balance of this DerivedNetworthHistoricalBalance.


        :return: The balance of this DerivedNetworthHistoricalBalance.
        :rtype: Money
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this DerivedNetworthHistoricalBalance.


        :param balance: The balance of this DerivedNetworthHistoricalBalance.
        :type balance: Money
        """

        self._balance = balance

    @property
    def data_source_type(self):
        """Gets the data_source_type of this DerivedNetworthHistoricalBalance.

        The source of balance information.<br><br><b>Account Type</b>: Aggregated and Manual<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li></ul><b>Applicable Values</b><br>

        :return: The data_source_type of this DerivedNetworthHistoricalBalance.
        :rtype: str
        """
        return self._data_source_type

    @data_source_type.setter
    def data_source_type(self, data_source_type):
        """Sets the data_source_type of this DerivedNetworthHistoricalBalance.

        The source of balance information.<br><br><b>Account Type</b>: Aggregated and Manual<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li></ul><b>Applicable Values</b><br>

        :param data_source_type: The data_source_type of this DerivedNetworthHistoricalBalance.
        :type data_source_type: str
        """
        allowed_values = ["S", "C", "CF"]  # noqa: E501
        if data_source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_source_type` ({0}), must be one of {1}"
                .format(data_source_type, allowed_values)
            )

        self._data_source_type = data_source_type

    @property
    def _date(self):
        """Gets the _date of this DerivedNetworthHistoricalBalance.

        Date for which the account balance was provided.  This balance could be a carryforward, calculated or a scraped balance. AdditIonal Details: scraped: Balance shown in the provider site. This balance gets stored in Yodlee system during system/user account updates. carryForward : Balance carried forward from the scraped balance to the days for which the balance was not available in the system. Balance may not be available for all the days in the system due to MFA information required, error in the site, credential changes, etc. calculated: Balances that gets calculated for the days that are prior to the account added date.<br><br><b>Account Type</b>: Aggregated and Manual<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li><li>GET derived/networth</li></ul>

        :return: The _date of this DerivedNetworthHistoricalBalance.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this DerivedNetworthHistoricalBalance.

        Date for which the account balance was provided.  This balance could be a carryforward, calculated or a scraped balance. AdditIonal Details: scraped: Balance shown in the provider site. This balance gets stored in Yodlee system during system/user account updates. carryForward : Balance carried forward from the scraped balance to the days for which the balance was not available in the system. Balance may not be available for all the days in the system due to MFA information required, error in the site, credential changes, etc. calculated: Balances that gets calculated for the days that are prior to the account added date.<br><br><b>Account Type</b>: Aggregated and Manual<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li><li>GET derived/networth</li></ul>

        :param _date: The _date of this DerivedNetworthHistoricalBalance.
        :type _date: str
        """

        self.__date = _date

    @property
    def is_asset(self):
        """Gets the is_asset of this DerivedNetworthHistoricalBalance.

        Indicates whether the balance is an asset or liability.<br><br><b>Account Type</b>: Aggregated and Manual<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li></ul>

        :return: The is_asset of this DerivedNetworthHistoricalBalance.
        :rtype: bool
        """
        return self._is_asset

    @is_asset.setter
    def is_asset(self, is_asset):
        """Sets the is_asset of this DerivedNetworthHistoricalBalance.

        Indicates whether the balance is an asset or liability.<br><br><b>Account Type</b>: Aggregated and Manual<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li></ul>

        :param is_asset: The is_asset of this DerivedNetworthHistoricalBalance.
        :type is_asset: bool
        """

        self._is_asset = is_asset
