# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_cobrand_notification_event import UpdateCobrandNotificationEvent
from openapi_server import util


class UpdateCobrandNotificationEventRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event: UpdateCobrandNotificationEvent=None):
        """UpdateCobrandNotificationEventRequest - a model defined in OpenAPI

        :param event: The event of this UpdateCobrandNotificationEventRequest.
        """
        self.openapi_types = {
            'event': UpdateCobrandNotificationEvent
        }

        self.attribute_map = {
            'event': 'event'
        }

        self._event = event

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateCobrandNotificationEventRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateCobrandNotificationEventRequest of this UpdateCobrandNotificationEventRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event(self):
        """Gets the event of this UpdateCobrandNotificationEventRequest.


        :return: The event of this UpdateCobrandNotificationEventRequest.
        :rtype: UpdateCobrandNotificationEvent
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this UpdateCobrandNotificationEventRequest.


        :param event: The event of this UpdateCobrandNotificationEventRequest.
        :type event: UpdateCobrandNotificationEvent
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")

        self._event = event
