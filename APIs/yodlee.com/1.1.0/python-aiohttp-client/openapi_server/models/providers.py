# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.capability import Capability
from openapi_server.models.providers_dataset import ProvidersDataset
from openapi_server import util


class Providers(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, priority: str=None, account_type: List[str]=None, associated_provider_ids: List[int]=None, auth_parameter: List[str]=None, auth_type: str=None, base_url: str=None, capability: List[Capability]=None, country_iso_code: str=None, dataset: List[ProvidersDataset]=None, favicon: str=None, forget_password_url: str=None, help: str=None, id: int=None, is_added_by_user: str=None, is_auto_refresh_enabled: bool=None, is_consent_required: bool=None, language_iso_code: str=None, last_modified: str=None, login_help: str=None, login_url: str=None, logo: str=None, name: str=None, primary_language_iso_code: str=None, status: str=None):
        """Providers - a model defined in OpenAPI

        :param priority: The priority of this Providers.
        :param account_type: The account_type of this Providers.
        :param associated_provider_ids: The associated_provider_ids of this Providers.
        :param auth_parameter: The auth_parameter of this Providers.
        :param auth_type: The auth_type of this Providers.
        :param base_url: The base_url of this Providers.
        :param capability: The capability of this Providers.
        :param country_iso_code: The country_iso_code of this Providers.
        :param dataset: The dataset of this Providers.
        :param favicon: The favicon of this Providers.
        :param forget_password_url: The forget_password_url of this Providers.
        :param help: The help of this Providers.
        :param id: The id of this Providers.
        :param is_added_by_user: The is_added_by_user of this Providers.
        :param is_auto_refresh_enabled: The is_auto_refresh_enabled of this Providers.
        :param is_consent_required: The is_consent_required of this Providers.
        :param language_iso_code: The language_iso_code of this Providers.
        :param last_modified: The last_modified of this Providers.
        :param login_help: The login_help of this Providers.
        :param login_url: The login_url of this Providers.
        :param logo: The logo of this Providers.
        :param name: The name of this Providers.
        :param primary_language_iso_code: The primary_language_iso_code of this Providers.
        :param status: The status of this Providers.
        """
        self.openapi_types = {
            'priority': str,
            'account_type': List[str],
            'associated_provider_ids': List[int],
            'auth_parameter': List[str],
            'auth_type': str,
            'base_url': str,
            'capability': List[Capability],
            'country_iso_code': str,
            'dataset': List[ProvidersDataset],
            'favicon': str,
            'forget_password_url': str,
            'help': str,
            'id': int,
            'is_added_by_user': str,
            'is_auto_refresh_enabled': bool,
            'is_consent_required': bool,
            'language_iso_code': str,
            'last_modified': str,
            'login_help': str,
            'login_url': str,
            'logo': str,
            'name': str,
            'primary_language_iso_code': str,
            'status': str
        }

        self.attribute_map = {
            'priority': 'PRIORITY',
            'account_type': 'accountType',
            'associated_provider_ids': 'associatedProviderIds',
            'auth_parameter': 'authParameter',
            'auth_type': 'authType',
            'base_url': 'baseUrl',
            'capability': 'capability',
            'country_iso_code': 'countryISOCode',
            'dataset': 'dataset',
            'favicon': 'favicon',
            'forget_password_url': 'forgetPasswordUrl',
            'help': 'help',
            'id': 'id',
            'is_added_by_user': 'isAddedByUser',
            'is_auto_refresh_enabled': 'isAutoRefreshEnabled',
            'is_consent_required': 'isConsentRequired',
            'language_iso_code': 'languageISOCode',
            'last_modified': 'lastModified',
            'login_help': 'loginHelp',
            'login_url': 'loginUrl',
            'logo': 'logo',
            'name': 'name',
            'primary_language_iso_code': 'primaryLanguageISOCode',
            'status': 'status'
        }

        self._priority = priority
        self._account_type = account_type
        self._associated_provider_ids = associated_provider_ids
        self._auth_parameter = auth_parameter
        self._auth_type = auth_type
        self._base_url = base_url
        self._capability = capability
        self._country_iso_code = country_iso_code
        self._dataset = dataset
        self._favicon = favicon
        self._forget_password_url = forget_password_url
        self._help = help
        self._id = id
        self._is_added_by_user = is_added_by_user
        self._is_auto_refresh_enabled = is_auto_refresh_enabled
        self._is_consent_required = is_consent_required
        self._language_iso_code = language_iso_code
        self._last_modified = last_modified
        self._login_help = login_help
        self._login_url = login_url
        self._logo = logo
        self._name = name
        self._primary_language_iso_code = primary_language_iso_code
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Providers':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Providers of this Providers.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def priority(self):
        """Gets the priority of this Providers.

        Indicates the priority for which the service is invoked.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul><b>Applicable Values</b><br>

        :return: The priority of this Providers.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Providers.

        Indicates the priority for which the service is invoked.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul><b>Applicable Values</b><br>

        :param priority: The priority of this Providers.
        :type priority: str
        """
        allowed_values = ["POPULAR", "SUGGESTED", "COBRAND", "SEARCH", "ALL"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def account_type(self):
        """Gets the account_type of this Providers.

        AccountType supported by the provider, eg: Brokerage Cash, Current<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :return: The account_type of this Providers.
        :rtype: List[str]
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this Providers.

        AccountType supported by the provider, eg: Brokerage Cash, Current<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :param account_type: The account_type of this Providers.
        :type account_type: List[str]
        """
        allowed_values = ["CURRENT", "BROKERAGE_CASH"]  # noqa: E501
        if not set(account_type).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `account_type` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(account_type) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._account_type = account_type

    @property
    def associated_provider_ids(self):
        """Gets the associated_provider_ids of this Providers.

        The screen-scraping providers that are associated to the Open Banking provider ID.<br><br><b>Applicable containers</b>: All Containers<br><b>Endpoints</b>:<ul><li>GET providers</li><li>GET providers/{providerId}</li></ul>

        :return: The associated_provider_ids of this Providers.
        :rtype: List[int]
        """
        return self._associated_provider_ids

    @associated_provider_ids.setter
    def associated_provider_ids(self, associated_provider_ids):
        """Sets the associated_provider_ids of this Providers.

        The screen-scraping providers that are associated to the Open Banking provider ID.<br><br><b>Applicable containers</b>: All Containers<br><b>Endpoints</b>:<ul><li>GET providers</li><li>GET providers/{providerId}</li></ul>

        :param associated_provider_ids: The associated_provider_ids of this Providers.
        :type associated_provider_ids: List[int]
        """

        self._associated_provider_ids = associated_provider_ids

    @property
    def auth_parameter(self):
        """Gets the auth_parameter of this Providers.

        AuthParameter appears in the response only in case of token-based aggregation sites.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :return: The auth_parameter of this Providers.
        :rtype: List[str]
        """
        return self._auth_parameter

    @auth_parameter.setter
    def auth_parameter(self, auth_parameter):
        """Sets the auth_parameter of this Providers.

        AuthParameter appears in the response only in case of token-based aggregation sites.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :param auth_parameter: The auth_parameter of this Providers.
        :type auth_parameter: List[str]
        """
        allowed_values = ["authorizationCode", "idToken", "authResponse"]  # noqa: E501
        if not set(auth_parameter).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `auth_parameter` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(auth_parameter) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._auth_parameter = auth_parameter

    @property
    def auth_type(self):
        """Gets the auth_type of this Providers.

        The authentication type enabled at the provider site. <br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul><b>Applicable Values</b><br>

        :return: The auth_type of this Providers.
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this Providers.

        The authentication type enabled at the provider site. <br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul><b>Applicable Values</b><br>

        :param auth_type: The auth_type of this Providers.
        :type auth_type: str
        """
        allowed_values = ["OAUTH", "CREDENTIALS", "MFA_CREDENTIALS"]  # noqa: E501
        if auth_type not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_type` ({0}), must be one of {1}"
                .format(auth_type, allowed_values)
            )

        self._auth_type = auth_type

    @property
    def base_url(self):
        """Gets the base_url of this Providers.

        The base URL of the provider's site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :return: The base_url of this Providers.
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this Providers.

        The base URL of the provider's site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :param base_url: The base_url of this Providers.
        :type base_url: str
        """

        self._base_url = base_url

    @property
    def capability(self):
        """Gets the capability of this Providers.

        Capability of the site<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul><br><b>Note : </b> capability has been deprecated

        :return: The capability of this Providers.
        :rtype: List[Capability]
        """
        return self._capability

    @capability.setter
    def capability(self, capability):
        """Sets the capability of this Providers.

        Capability of the site<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul><br><b>Note : </b> capability has been deprecated

        :param capability: The capability of this Providers.
        :type capability: List[Capability]
        """

        self._capability = capability

    @property
    def country_iso_code(self):
        """Gets the country_iso_code of this Providers.

        Country to which the provider belongs.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :return: The country_iso_code of this Providers.
        :rtype: str
        """
        return self._country_iso_code

    @country_iso_code.setter
    def country_iso_code(self, country_iso_code):
        """Sets the country_iso_code of this Providers.

        Country to which the provider belongs.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :param country_iso_code: The country_iso_code of this Providers.
        :type country_iso_code: str
        """

        self._country_iso_code = country_iso_code

    @property
    def dataset(self):
        """Gets the dataset of this Providers.

        Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :return: The dataset of this Providers.
        :rtype: List[ProvidersDataset]
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this Providers.

        Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :param dataset: The dataset of this Providers.
        :type dataset: List[ProvidersDataset]
        """

        self._dataset = dataset

    @property
    def favicon(self):
        """Gets the favicon of this Providers.

        Favicon link of the provider.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :return: The favicon of this Providers.
        :rtype: str
        """
        return self._favicon

    @favicon.setter
    def favicon(self, favicon):
        """Sets the favicon of this Providers.

        Favicon link of the provider.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :param favicon: The favicon of this Providers.
        :type favicon: str
        """

        self._favicon = favicon

    @property
    def forget_password_url(self):
        """Gets the forget_password_url of this Providers.

        The forget password URL of the provider site.<br><br><b>Endpoints</b>:<ul><li>GET providers</li></ul>

        :return: The forget_password_url of this Providers.
        :rtype: str
        """
        return self._forget_password_url

    @forget_password_url.setter
    def forget_password_url(self, forget_password_url):
        """Sets the forget_password_url of this Providers.

        The forget password URL of the provider site.<br><br><b>Endpoints</b>:<ul><li>GET providers</li></ul>

        :param forget_password_url: The forget_password_url of this Providers.
        :type forget_password_url: str
        """

        self._forget_password_url = forget_password_url

    @property
    def help(self):
        """Gets the help of this Providers.

        Text to guide user through linking an account that belongs to the site<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :return: The help of this Providers.
        :rtype: str
        """
        return self._help

    @help.setter
    def help(self, help):
        """Sets the help of this Providers.

        Text to guide user through linking an account that belongs to the site<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :param help: The help of this Providers.
        :type help: str
        """

        self._help = help

    @property
    def id(self):
        """Gets the id of this Providers.

        Unique identifier for the provider site(e.g., financial institution sites, biller sites, lender sites, etc.).<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :return: The id of this Providers.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Providers.

        Unique identifier for the provider site(e.g., financial institution sites, biller sites, lender sites, etc.).<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :param id: The id of this Providers.
        :type id: int
        """

        self._id = id

    @property
    def is_added_by_user(self):
        """Gets the is_added_by_user of this Providers.

        Indicates that the site has been added by the user at least once.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :return: The is_added_by_user of this Providers.
        :rtype: str
        """
        return self._is_added_by_user

    @is_added_by_user.setter
    def is_added_by_user(self, is_added_by_user):
        """Sets the is_added_by_user of this Providers.

        Indicates that the site has been added by the user at least once.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :param is_added_by_user: The is_added_by_user of this Providers.
        :type is_added_by_user: str
        """

        self._is_added_by_user = is_added_by_user

    @property
    def is_auto_refresh_enabled(self):
        """Gets the is_auto_refresh_enabled of this Providers.

        Indicates if a provider site is auto-refreshed.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :return: The is_auto_refresh_enabled of this Providers.
        :rtype: bool
        """
        return self._is_auto_refresh_enabled

    @is_auto_refresh_enabled.setter
    def is_auto_refresh_enabled(self, is_auto_refresh_enabled):
        """Sets the is_auto_refresh_enabled of this Providers.

        Indicates if a provider site is auto-refreshed.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :param is_auto_refresh_enabled: The is_auto_refresh_enabled of this Providers.
        :type is_auto_refresh_enabled: bool
        """

        self._is_auto_refresh_enabled = is_auto_refresh_enabled

    @property
    def is_consent_required(self):
        """Gets the is_consent_required of this Providers.

        Indicates if a provider site requires consent.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :return: The is_consent_required of this Providers.
        :rtype: bool
        """
        return self._is_consent_required

    @is_consent_required.setter
    def is_consent_required(self, is_consent_required):
        """Sets the is_consent_required of this Providers.

        Indicates if a provider site requires consent.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :param is_consent_required: The is_consent_required of this Providers.
        :type is_consent_required: bool
        """

        self._is_consent_required = is_consent_required

    @property
    def language_iso_code(self):
        """Gets the language_iso_code of this Providers.

        The language in which the provider details are provided. For example, a site supports two languages English and French. English being the primary language, the provider response will be provided in French depending on the user's locale. The language follows the two letter ISO code.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :return: The language_iso_code of this Providers.
        :rtype: str
        """
        return self._language_iso_code

    @language_iso_code.setter
    def language_iso_code(self, language_iso_code):
        """Sets the language_iso_code of this Providers.

        The language in which the provider details are provided. For example, a site supports two languages English and French. English being the primary language, the provider response will be provided in French depending on the user's locale. The language follows the two letter ISO code.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :param language_iso_code: The language_iso_code of this Providers.
        :type language_iso_code: str
        """

        self._language_iso_code = language_iso_code

    @property
    def last_modified(self):
        """Gets the last_modified of this Providers.

        Determines when the provider information was updated by Yodlee. If the customer caches the data, the cache is recommended to be refreshed based on this field.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :return: The last_modified of this Providers.
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this Providers.

        Determines when the provider information was updated by Yodlee. If the customer caches the data, the cache is recommended to be refreshed based on this field.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :param last_modified: The last_modified of this Providers.
        :type last_modified: str
        """

        self._last_modified = last_modified

    @property
    def login_help(self):
        """Gets the login_help of this Providers.

        Help text to guide the user to choose the correct provider site.<br><br><b>Endpoints</b>:<ul><li>GET providers</li></ul>

        :return: The login_help of this Providers.
        :rtype: str
        """
        return self._login_help

    @login_help.setter
    def login_help(self, login_help):
        """Sets the login_help of this Providers.

        Help text to guide the user to choose the correct provider site.<br><br><b>Endpoints</b>:<ul><li>GET providers</li></ul>

        :param login_help: The login_help of this Providers.
        :type login_help: str
        """

        self._login_help = login_help

    @property
    def login_url(self):
        """Gets the login_url of this Providers.

        The login URL of the provider's site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :return: The login_url of this Providers.
        :rtype: str
        """
        return self._login_url

    @login_url.setter
    def login_url(self, login_url):
        """Sets the login_url of this Providers.

        The login URL of the provider's site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :param login_url: The login_url of this Providers.
        :type login_url: str
        """

        self._login_url = login_url

    @property
    def logo(self):
        """Gets the logo of this Providers.

        The logo link of the provider institution. The link will return the logo in the PNG format.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :return: The logo of this Providers.
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this Providers.

        The logo link of the provider institution. The link will return the logo in the PNG format.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :param logo: The logo of this Providers.
        :type logo: str
        """

        self._logo = logo

    @property
    def name(self):
        """Gets the name of this Providers.

        The name of a provider site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :return: The name of this Providers.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Providers.

        The name of a provider site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :param name: The name of this Providers.
        :type name: str
        """

        self._name = name

    @property
    def primary_language_iso_code(self):
        """Gets the primary_language_iso_code of this Providers.

        The primary language of the site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :return: The primary_language_iso_code of this Providers.
        :rtype: str
        """
        return self._primary_language_iso_code

    @primary_language_iso_code.setter
    def primary_language_iso_code(self, primary_language_iso_code):
        """Sets the primary_language_iso_code of this Providers.

        The primary language of the site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :param primary_language_iso_code: The primary_language_iso_code of this Providers.
        :type primary_language_iso_code: str
        """

        self._primary_language_iso_code = primary_language_iso_code

    @property
    def status(self):
        """Gets the status of this Providers.

        Determines if the provider is supported for the cobrand (customer), is in the beta stage, etc. <br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :return: The status of this Providers.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Providers.

        Determines if the provider is supported for the cobrand (customer), is in the beta stage, etc. <br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :param status: The status of this Providers.
        :type status: str
        """
        allowed_values = ["Supported", "Beta", "Unsupported"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
