# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.description import Description
from openapi_server.models.merchant import Merchant
from openapi_server.models.money import Money
from openapi_server import util


class Transaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container: str=None, account_id: int=None, amount: Money=None, base_type: str=None, category: str=None, category_id: int=None, category_source: str=None, category_type: str=None, check_number: str=None, commission: Money=None, created_date: str=None, cusip_number: str=None, _date: str=None, description: Description=None, detail_category_id: int=None, high_level_category_id: int=None, holding_description: str=None, id: int=None, interest: Money=None, is_manual: bool=None, isin: str=None, last_updated: str=None, memo: str=None, merchant: Merchant=None, parent_category_id: int=None, post_date: str=None, price: Money=None, principal: Money=None, quantity: float=None, running_balance: Money=None, sedol: str=None, settle_date: str=None, source_id: str=None, source_type: str=None, status: str=None, sub_type: str=None, symbol: str=None, transaction_date: str=None, type: str=None, valoren: str=None):
        """Transaction - a model defined in OpenAPI

        :param container: The container of this Transaction.
        :param account_id: The account_id of this Transaction.
        :param amount: The amount of this Transaction.
        :param base_type: The base_type of this Transaction.
        :param category: The category of this Transaction.
        :param category_id: The category_id of this Transaction.
        :param category_source: The category_source of this Transaction.
        :param category_type: The category_type of this Transaction.
        :param check_number: The check_number of this Transaction.
        :param commission: The commission of this Transaction.
        :param created_date: The created_date of this Transaction.
        :param cusip_number: The cusip_number of this Transaction.
        :param _date: The _date of this Transaction.
        :param description: The description of this Transaction.
        :param detail_category_id: The detail_category_id of this Transaction.
        :param high_level_category_id: The high_level_category_id of this Transaction.
        :param holding_description: The holding_description of this Transaction.
        :param id: The id of this Transaction.
        :param interest: The interest of this Transaction.
        :param is_manual: The is_manual of this Transaction.
        :param isin: The isin of this Transaction.
        :param last_updated: The last_updated of this Transaction.
        :param memo: The memo of this Transaction.
        :param merchant: The merchant of this Transaction.
        :param parent_category_id: The parent_category_id of this Transaction.
        :param post_date: The post_date of this Transaction.
        :param price: The price of this Transaction.
        :param principal: The principal of this Transaction.
        :param quantity: The quantity of this Transaction.
        :param running_balance: The running_balance of this Transaction.
        :param sedol: The sedol of this Transaction.
        :param settle_date: The settle_date of this Transaction.
        :param source_id: The source_id of this Transaction.
        :param source_type: The source_type of this Transaction.
        :param status: The status of this Transaction.
        :param sub_type: The sub_type of this Transaction.
        :param symbol: The symbol of this Transaction.
        :param transaction_date: The transaction_date of this Transaction.
        :param type: The type of this Transaction.
        :param valoren: The valoren of this Transaction.
        """
        self.openapi_types = {
            'container': str,
            'account_id': int,
            'amount': Money,
            'base_type': str,
            'category': str,
            'category_id': int,
            'category_source': str,
            'category_type': str,
            'check_number': str,
            'commission': Money,
            'created_date': str,
            'cusip_number': str,
            '_date': str,
            'description': Description,
            'detail_category_id': int,
            'high_level_category_id': int,
            'holding_description': str,
            'id': int,
            'interest': Money,
            'is_manual': bool,
            'isin': str,
            'last_updated': str,
            'memo': str,
            'merchant': Merchant,
            'parent_category_id': int,
            'post_date': str,
            'price': Money,
            'principal': Money,
            'quantity': float,
            'running_balance': Money,
            'sedol': str,
            'settle_date': str,
            'source_id': str,
            'source_type': str,
            'status': str,
            'sub_type': str,
            'symbol': str,
            'transaction_date': str,
            'type': str,
            'valoren': str
        }

        self.attribute_map = {
            'container': 'CONTAINER',
            'account_id': 'accountId',
            'amount': 'amount',
            'base_type': 'baseType',
            'category': 'category',
            'category_id': 'categoryId',
            'category_source': 'categorySource',
            'category_type': 'categoryType',
            'check_number': 'checkNumber',
            'commission': 'commission',
            'created_date': 'createdDate',
            'cusip_number': 'cusipNumber',
            '_date': 'date',
            'description': 'description',
            'detail_category_id': 'detailCategoryId',
            'high_level_category_id': 'highLevelCategoryId',
            'holding_description': 'holdingDescription',
            'id': 'id',
            'interest': 'interest',
            'is_manual': 'isManual',
            'isin': 'isin',
            'last_updated': 'lastUpdated',
            'memo': 'memo',
            'merchant': 'merchant',
            'parent_category_id': 'parentCategoryId',
            'post_date': 'postDate',
            'price': 'price',
            'principal': 'principal',
            'quantity': 'quantity',
            'running_balance': 'runningBalance',
            'sedol': 'sedol',
            'settle_date': 'settleDate',
            'source_id': 'sourceId',
            'source_type': 'sourceType',
            'status': 'status',
            'sub_type': 'subType',
            'symbol': 'symbol',
            'transaction_date': 'transactionDate',
            'type': 'type',
            'valoren': 'valoren'
        }

        self._container = container
        self._account_id = account_id
        self._amount = amount
        self._base_type = base_type
        self._category = category
        self._category_id = category_id
        self._category_source = category_source
        self._category_type = category_type
        self._check_number = check_number
        self._commission = commission
        self._created_date = created_date
        self._cusip_number = cusip_number
        self.__date = _date
        self._description = description
        self._detail_category_id = detail_category_id
        self._high_level_category_id = high_level_category_id
        self._holding_description = holding_description
        self._id = id
        self._interest = interest
        self._is_manual = is_manual
        self._isin = isin
        self._last_updated = last_updated
        self._memo = memo
        self._merchant = merchant
        self._parent_category_id = parent_category_id
        self._post_date = post_date
        self._price = price
        self._principal = principal
        self._quantity = quantity
        self._running_balance = running_balance
        self._sedol = sedol
        self._settle_date = settle_date
        self._source_id = source_id
        self._source_type = source_type
        self._status = status
        self._sub_type = sub_type
        self._symbol = symbol
        self._transaction_date = transaction_date
        self._type = type
        self._valoren = valoren

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transaction of this Transaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container(self):
        """Gets the container of this Transaction.

        The account's container.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>

        :return: The container of this Transaction.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this Transaction.

        The account's container.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>

        :param container: The container of this Transaction.
        :type container: str
        """
        allowed_values = ["bank", "creditCard", "investment", "insurance", "loan", "reward", "realEstate", "otherAssets", "otherLiabilities"]  # noqa: E501
        if container not in allowed_values:
            raise ValueError(
                "Invalid value for `container` ({0}), must be one of {1}"
                .format(container, allowed_values)
            )

        self._container = container

    @property
    def account_id(self):
        """Gets the account_id of this Transaction.

        The account from which the transaction was made. This is basically the primary key of the account resource. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>

        :return: The account_id of this Transaction.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Transaction.

        The account from which the transaction was made. This is basically the primary key of the account resource. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>

        :param account_id: The account_id of this Transaction.
        :type account_id: int
        """

        self._account_id = account_id

    @property
    def amount(self):
        """Gets the amount of this Transaction.


        :return: The amount of this Transaction.
        :rtype: Money
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Transaction.


        :param amount: The amount of this Transaction.
        :type amount: Money
        """

        self._amount = amount

    @property
    def base_type(self):
        """Gets the base_type of this Transaction.

        Indicates if the transaction appears as a debit or a credit transaction in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>

        :return: The base_type of this Transaction.
        :rtype: str
        """
        return self._base_type

    @base_type.setter
    def base_type(self, base_type):
        """Sets the base_type of this Transaction.

        Indicates if the transaction appears as a debit or a credit transaction in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>

        :param base_type: The base_type of this Transaction.
        :type base_type: str
        """
        allowed_values = ["CREDIT", "DEBIT"]  # noqa: E501
        if base_type not in allowed_values:
            raise ValueError(
                "Invalid value for `base_type` ({0}), must be one of {1}"
                .format(base_type, allowed_values)
            )

        self._base_type = base_type

    @property
    def category(self):
        """Gets the category of this Transaction.

        The name of the category assigned to the transaction. This is the category field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>

        :return: The category of this Transaction.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Transaction.

        The name of the category assigned to the transaction. This is the category field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>

        :param category: The category of this Transaction.
        :type category: str
        """

        self._category = category

    @property
    def category_id(self):
        """Gets the category_id of this Transaction.

        The id of the category assigned to the transaction. This is the id field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>

        :return: The category_id of this Transaction.
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this Transaction.

        The id of the category assigned to the transaction. This is the id field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>

        :param category_id: The category_id of this Transaction.
        :type category_id: int
        """

        self._category_id = category_id

    @property
    def category_source(self):
        """Gets the category_source of this Transaction.

        Indicates the source of the category, i.e., categories derived by the system or assigned/provided by the consumer. This is the source field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>

        :return: The category_source of this Transaction.
        :rtype: str
        """
        return self._category_source

    @category_source.setter
    def category_source(self, category_source):
        """Sets the category_source of this Transaction.

        Indicates the source of the category, i.e., categories derived by the system or assigned/provided by the consumer. This is the source field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>

        :param category_source: The category_source of this Transaction.
        :type category_source: str
        """
        allowed_values = ["SYSTEM", "USER"]  # noqa: E501
        if category_source not in allowed_values:
            raise ValueError(
                "Invalid value for `category_source` ({0}), must be one of {1}"
                .format(category_source, allowed_values)
            )

        self._category_source = category_source

    @property
    def category_type(self):
        """Gets the category_type of this Transaction.

        The categoryType of the category assigned to the transaction. This is the type field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>

        :return: The category_type of this Transaction.
        :rtype: str
        """
        return self._category_type

    @category_type.setter
    def category_type(self, category_type):
        """Sets the category_type of this Transaction.

        The categoryType of the category assigned to the transaction. This is the type field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>

        :param category_type: The category_type of this Transaction.
        :type category_type: str
        """
        allowed_values = ["TRANSFER", "DEFERRED_COMPENSATION", "UNCATEGORIZE", "INCOME", "EXPENSE"]  # noqa: E501
        if category_type not in allowed_values:
            raise ValueError(
                "Invalid value for `category_type` ({0}), must be one of {1}"
                .format(category_type, allowed_values)
            )

        self._category_type = category_type

    @property
    def check_number(self):
        """Gets the check_number of this Transaction.

        The checkNumber of the transaction.<br><br><b>Applicable containers</b>: bank<br>

        :return: The check_number of this Transaction.
        :rtype: str
        """
        return self._check_number

    @check_number.setter
    def check_number(self, check_number):
        """Sets the check_number of this Transaction.

        The checkNumber of the transaction.<br><br><b>Applicable containers</b>: bank<br>

        :param check_number: The check_number of this Transaction.
        :type check_number: str
        """

        self._check_number = check_number

    @property
    def commission(self):
        """Gets the commission of this Transaction.


        :return: The commission of this Transaction.
        :rtype: Money
        """
        return self._commission

    @commission.setter
    def commission(self, commission):
        """Sets the commission of this Transaction.


        :param commission: The commission of this Transaction.
        :type commission: Money
        """

        self._commission = commission

    @property
    def created_date(self):
        """Gets the created_date of this Transaction.


        :return: The created_date of this Transaction.
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Transaction.


        :param created_date: The created_date of this Transaction.
        :type created_date: str
        """

        self._created_date = created_date

    @property
    def cusip_number(self):
        """Gets the cusip_number of this Transaction.

        The CUSIP (Committee on Uniform Securities Identification Procedures) identifies the financial instruments in the United States and Canada.<br><b><br><b>Note</b></b>: The CUSIP number field applies only to trade related transactions.<br><br><b>Applicable containers</b>: investment<br>

        :return: The cusip_number of this Transaction.
        :rtype: str
        """
        return self._cusip_number

    @cusip_number.setter
    def cusip_number(self, cusip_number):
        """Sets the cusip_number of this Transaction.

        The CUSIP (Committee on Uniform Securities Identification Procedures) identifies the financial instruments in the United States and Canada.<br><b><br><b>Note</b></b>: The CUSIP number field applies only to trade related transactions.<br><br><b>Applicable containers</b>: investment<br>

        :param cusip_number: The cusip_number of this Transaction.
        :type cusip_number: str
        """

        self._cusip_number = cusip_number

    @property
    def _date(self):
        """Gets the _date of this Transaction.

        The value provided will be either postDate or transactionDate. postDate takes higher priority than transactionDate, except for the investment container as only transactionDate is available. The availability of postDate or transactionDate depends on the provider site.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>

        :return: The _date of this Transaction.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Transaction.

        The value provided will be either postDate or transactionDate. postDate takes higher priority than transactionDate, except for the investment container as only transactionDate is available. The availability of postDate or transactionDate depends on the provider site.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>

        :param _date: The _date of this Transaction.
        :type _date: str
        """

        self.__date = _date

    @property
    def description(self):
        """Gets the description of this Transaction.


        :return: The description of this Transaction.
        :rtype: Description
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Transaction.


        :param description: The description of this Transaction.
        :type description: Description
        """

        self._description = description

    @property
    def detail_category_id(self):
        """Gets the detail_category_id of this Transaction.

        The id of the detail category that is assigned to the transaction. The supported values are provided by GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard<br>

        :return: The detail_category_id of this Transaction.
        :rtype: int
        """
        return self._detail_category_id

    @detail_category_id.setter
    def detail_category_id(self, detail_category_id):
        """Sets the detail_category_id of this Transaction.

        The id of the detail category that is assigned to the transaction. The supported values are provided by GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard<br>

        :param detail_category_id: The detail_category_id of this Transaction.
        :type detail_category_id: int
        """

        self._detail_category_id = detail_category_id

    @property
    def high_level_category_id(self):
        """Gets the high_level_category_id of this Transaction.

        The high level category assigned to the transaction. The supported values are provided by the GET transactions/categories. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>

        :return: The high_level_category_id of this Transaction.
        :rtype: int
        """
        return self._high_level_category_id

    @high_level_category_id.setter
    def high_level_category_id(self, high_level_category_id):
        """Sets the high_level_category_id of this Transaction.

        The high level category assigned to the transaction. The supported values are provided by the GET transactions/categories. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>

        :param high_level_category_id: The high_level_category_id of this Transaction.
        :type high_level_category_id: int
        """

        self._high_level_category_id = high_level_category_id

    @property
    def holding_description(self):
        """Gets the holding_description of this Transaction.

        For transactions involving securities, this captures the securities description.<br><br><b>Applicable containers</b>: investment<br>

        :return: The holding_description of this Transaction.
        :rtype: str
        """
        return self._holding_description

    @holding_description.setter
    def holding_description(self, holding_description):
        """Sets the holding_description of this Transaction.

        For transactions involving securities, this captures the securities description.<br><br><b>Applicable containers</b>: investment<br>

        :param holding_description: The holding_description of this Transaction.
        :type holding_description: str
        """

        self._holding_description = holding_description

    @property
    def id(self):
        """Gets the id of this Transaction.

        An unique identifier for the transaction. The combination of the id and account container are unique in the system. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>

        :return: The id of this Transaction.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Transaction.

        An unique identifier for the transaction. The combination of the id and account container are unique in the system. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>

        :param id: The id of this Transaction.
        :type id: int
        """

        self._id = id

    @property
    def interest(self):
        """Gets the interest of this Transaction.


        :return: The interest of this Transaction.
        :rtype: Money
        """
        return self._interest

    @interest.setter
    def interest(self, interest):
        """Sets the interest of this Transaction.


        :param interest: The interest of this Transaction.
        :type interest: Money
        """

        self._interest = interest

    @property
    def is_manual(self):
        """Gets the is_manual of this Transaction.

        Indicates if the transaction is aggregated from the FI site or the consumer has manually created the transaction using the application or an API. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>

        :return: The is_manual of this Transaction.
        :rtype: bool
        """
        return self._is_manual

    @is_manual.setter
    def is_manual(self, is_manual):
        """Sets the is_manual of this Transaction.

        Indicates if the transaction is aggregated from the FI site or the consumer has manually created the transaction using the application or an API. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>

        :param is_manual: The is_manual of this Transaction.
        :type is_manual: bool
        """

        self._is_manual = is_manual

    @property
    def isin(self):
        """Gets the isin of this Transaction.

        International Securities Identification Number (ISIN) standard is used worldwide to identify specific securities.<br><br><b>Applicable containers</b>: investment<br>

        :return: The isin of this Transaction.
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this Transaction.

        International Securities Identification Number (ISIN) standard is used worldwide to identify specific securities.<br><br><b>Applicable containers</b>: investment<br>

        :param isin: The isin of this Transaction.
        :type isin: str
        """

        self._isin = isin

    @property
    def last_updated(self):
        """Gets the last_updated of this Transaction.


        :return: The last_updated of this Transaction.
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Transaction.


        :param last_updated: The last_updated of this Transaction.
        :type last_updated: str
        """

        self._last_updated = last_updated

    @property
    def memo(self):
        """Gets the memo of this Transaction.

        Additional notes provided by the user for a particular  transaction through application or API services. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>

        :return: The memo of this Transaction.
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this Transaction.

        Additional notes provided by the user for a particular  transaction through application or API services. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>

        :param memo: The memo of this Transaction.
        :type memo: str
        """

        self._memo = memo

    @property
    def merchant(self):
        """Gets the merchant of this Transaction.


        :return: The merchant of this Transaction.
        :rtype: Merchant
        """
        return self._merchant

    @merchant.setter
    def merchant(self, merchant):
        """Sets the merchant of this Transaction.


        :param merchant: The merchant of this Transaction.
        :type merchant: Merchant
        """

        self._merchant = merchant

    @property
    def parent_category_id(self):
        """Gets the parent_category_id of this Transaction.

        The parentCategoryId of the category assigned to the transaction.<br><b>Note</b>: This field will be provided in the response if the transaction is assigned to a user-created category. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>

        :return: The parent_category_id of this Transaction.
        :rtype: int
        """
        return self._parent_category_id

    @parent_category_id.setter
    def parent_category_id(self, parent_category_id):
        """Sets the parent_category_id of this Transaction.

        The parentCategoryId of the category assigned to the transaction.<br><b>Note</b>: This field will be provided in the response if the transaction is assigned to a user-created category. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>

        :param parent_category_id: The parent_category_id of this Transaction.
        :type parent_category_id: int
        """

        self._parent_category_id = parent_category_id

    @property
    def post_date(self):
        """Gets the post_date of this Transaction.

        The date on which the transaction is posted to the account.<br><br><b>Applicable containers</b>: bank,creditCard,insurance,loan<br>

        :return: The post_date of this Transaction.
        :rtype: str
        """
        return self._post_date

    @post_date.setter
    def post_date(self, post_date):
        """Sets the post_date of this Transaction.

        The date on which the transaction is posted to the account.<br><br><b>Applicable containers</b>: bank,creditCard,insurance,loan<br>

        :param post_date: The post_date of this Transaction.
        :type post_date: str
        """

        self._post_date = post_date

    @property
    def price(self):
        """Gets the price of this Transaction.


        :return: The price of this Transaction.
        :rtype: Money
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Transaction.


        :param price: The price of this Transaction.
        :type price: Money
        """

        self._price = price

    @property
    def principal(self):
        """Gets the principal of this Transaction.


        :return: The principal of this Transaction.
        :rtype: Money
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this Transaction.


        :param principal: The principal of this Transaction.
        :type principal: Money
        """

        self._principal = principal

    @property
    def quantity(self):
        """Gets the quantity of this Transaction.

        The quantity associated with the transaction.<br><b>Note</b>: The quantity field applies only to trade-related transactions.<br><br><b>Applicable containers</b>: investment<br>

        :return: The quantity of this Transaction.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Transaction.

        The quantity associated with the transaction.<br><b>Note</b>: The quantity field applies only to trade-related transactions.<br><br><b>Applicable containers</b>: investment<br>

        :param quantity: The quantity of this Transaction.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def running_balance(self):
        """Gets the running_balance of this Transaction.


        :return: The running_balance of this Transaction.
        :rtype: Money
        """
        return self._running_balance

    @running_balance.setter
    def running_balance(self, running_balance):
        """Sets the running_balance of this Transaction.


        :param running_balance: The running_balance of this Transaction.
        :type running_balance: Money
        """

        self._running_balance = running_balance

    @property
    def sedol(self):
        """Gets the sedol of this Transaction.

        SEDOL stands for Stock Exchange Daily Official List, a list of security identifiers used in the United Kingdom and Ireland for clearing purposes.<br><br><b>Applicable containers</b>: investment<br>

        :return: The sedol of this Transaction.
        :rtype: str
        """
        return self._sedol

    @sedol.setter
    def sedol(self, sedol):
        """Sets the sedol of this Transaction.

        SEDOL stands for Stock Exchange Daily Official List, a list of security identifiers used in the United Kingdom and Ireland for clearing purposes.<br><br><b>Applicable containers</b>: investment<br>

        :param sedol: The sedol of this Transaction.
        :type sedol: str
        """

        self._sedol = sedol

    @property
    def settle_date(self):
        """Gets the settle_date of this Transaction.

        It is the date on which the transaction is finalized, that is, the date the ownership of the security is transferred to the buyer. The settlement date is usually few days after the transaction date.<br><br><b>Applicable containers</b>: investment<br>

        :return: The settle_date of this Transaction.
        :rtype: str
        """
        return self._settle_date

    @settle_date.setter
    def settle_date(self, settle_date):
        """Sets the settle_date of this Transaction.

        It is the date on which the transaction is finalized, that is, the date the ownership of the security is transferred to the buyer. The settlement date is usually few days after the transaction date.<br><br><b>Applicable containers</b>: investment<br>

        :param settle_date: The settle_date of this Transaction.
        :type settle_date: str
        """

        self._settle_date = settle_date

    @property
    def source_id(self):
        """Gets the source_id of this Transaction.

        A unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts.<br>Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.

        :return: The source_id of this Transaction.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Transaction.

        A unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts.<br>Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.

        :param source_id: The source_id of this Transaction.
        :type source_id: str
        """

        self._source_id = source_id

    @property
    def source_type(self):
        """Gets the source_type of this Transaction.

        The source through which the transaction is added to the Yodlee system.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loann<br><b>Applicable Values:</b><br>

        :return: The source_type of this Transaction.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this Transaction.

        The source through which the transaction is added to the Yodlee system.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loann<br><b>Applicable Values:</b><br>

        :param source_type: The source_type of this Transaction.
        :type source_type: str
        """
        allowed_values = ["AGGREGATED", "MANUAL"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"
                .format(source_type, allowed_values)
            )

        self._source_type = source_type

    @property
    def status(self):
        """Gets the status of this Transaction.

        The status of the transaction: pending or posted.<br><b>Note</b>: Most FI sites only display posted transactions. If the FI site displays transaction status, same will be aggregated.  <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>

        :return: The status of this Transaction.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Transaction.

        The status of the transaction: pending or posted.<br><b>Note</b>: Most FI sites only display posted transactions. If the FI site displays transaction status, same will be aggregated.  <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>

        :param status: The status of this Transaction.
        :type status: str
        """
        allowed_values = ["POSTED", "PENDING", "SCHEDULED", "FAILED", "CLEARED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def sub_type(self):
        """Gets the sub_type of this Transaction.

        The transaction subtype field provides a detailed transaction type. For example, purchase is a transaction type and the transaction subtype field indicates if the purchase was made using a debit or credit card.<br><b>Note</b>: The transaction subtype field is available only in the United States, Canada, United Kingdom, and India.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>

        :return: The sub_type of this Transaction.
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this Transaction.

        The transaction subtype field provides a detailed transaction type. For example, purchase is a transaction type and the transaction subtype field indicates if the purchase was made using a debit or credit card.<br><b>Note</b>: The transaction subtype field is available only in the United States, Canada, United Kingdom, and India.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>

        :param sub_type: The sub_type of this Transaction.
        :type sub_type: str
        """
        allowed_values = ["AUTH_HOLD", "AUTH_REQUEST", "OVERDRAFT_CHARGE", "CREDIT_ADJUSTMENT", "PIN_DEBIT", "BANK_DIRECT_DEPOSIT", "DIVIDEND_DEPOSIT", "INTEREST_SAVINGS", "INTEREST_ADJUSTMENT", "ONLINE_PURCHASE", "PURCHASED_WITH_CHECK", "RECURRING_BILLING", "TAX_PAYMENT", "PAYMENT_BY_CHECK", "PAYMENT_PLAN", "FEE_REFUND", "WIRE_TRANSFER_CHARGE", "ACCOUNT_TO_ACCOUNT_TRANSFER", "BANK_TO_BANK_TRANSACTION", "BANK_TO_NON_BANK_ACCOUNT_TRANSFER", "CASH_WITHDRAWAL_AT_FI", "ATM_CASH_WITHDRAWAL", "AUTH_PROCESSING", "AUTH_RELEASE", "PRE_AUTH", "AUTH_COMPLETE", "AUTH_VOID", "BALANCE_ENQUIRY", "ACCOUNT_VERIFICATION", "PRE_AUTH_COMPLETION", "SERVICE_CHARGE", "SERVICE_CHARGE_FEE_REFUND", "RETURNED_CHECK_CHARGE", "RETURNED_CHECK_REIMBURSEMENT", "CASH_ADVANCE", "BILL_PAY_CHARGE", "CHECK_IMAGE_SERVICE_CHARGE", "OVERDRAFT_PROTECTION_CHARGE", "STOP_PAYMENT_CHARGE", "CHECKS_ORDERING_CHARGE", "MONTHLY_MAINTENANCE_CHARGE", "DEBIT_CARD_FEE", "CONVENIENCE_FEE", "PERSONAL_LOAN_CREDIT", "CREDIT_CARD_CREDIT", "AUTO_LOAN", "HOME_LOAN_MORTGAGE", "SHORT_TERM_CREDIT", "SIGNATURE_DEBIT", "CONTACT_LESS_DEBIT", "DEFERRED_DEPOSIT", "DEFERRED_BILL_PAY", "INSTALLMENT_PAYMENT", "RECURRING_SUBSCRIPTION_PAYMENT", "HOLD_CHECK_PAYMENT", "CAPITAL_GAINS_DISTIBUTION", "CG_LONG_TERM_DEPOSIT", "OPEN_SALE_DEPOSIT", "INTEREST__CHECK", "PURCHASE_VOID", "PURCHASE_WITH_CREDIT_CARD", "PURCHASE_WITH_DEBIT_CARD", "CHARGE_A_REPEAT_CUSTOMER", "DOWN_PAYMENT_OR_ANNUITY_PAYMENT_OR_DIRECT_PAYMENT", "FEE_PAYMENT", "FINANCE_CHARGE_REFUND", "TRANSACTION_VOID", "FEE_VOID", "DEBIT_CARD_WITHDRAWAL_AT_STORE", "ELECTRONIC_PAYMENT", "ACH_DEBIT", "ATM_TELLER_DEPOSIT", "POS_DEBIT", "BANK_ADJUSTMENT", "CHARGES_FEES", "INTEREST", "DEPOSITS_CREDITS", "PAYMENT", "PURCHASE", "REFUND", "TRANSFER", "WITHDRAWAL", "OTHER_DEPOSITS", "OTHER_WITHDRAWALS", "ADJUSTMENT", "FINANCE_CHARGE", "OTHER_CHARGES_FEES", "ANNUAL_FEE", "DEPOSIT", "DIRECT_DEPOSIT_SALARY", "INVESTMENT_INCOME_CASH", "SSA", "REWARDS", "CHECK_DEPOSIT", "MOBILE_REMOTE_DEPOSIT", "TELLER_DEPOSIT", "TAX_REFUND", "CREDIT_CARD_PAYMENT", "INSURANCE_PAYMENT", "UTILITIES_PAYMENT", "CHILD_SUPPORT", "LOAN", "PERSONAL_LOAN", "STUDENT_LOAN", "SALES_TAX", "REIMBURSEMENT", "BALANCE_TRANSFER", "WIRE_TRANSFER", "OVERDRAFT_PROTECTION", "DEBIT", "CREDIT", "NSF_FEES"]  # noqa: E501
        if sub_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sub_type` ({0}), must be one of {1}"
                .format(sub_type, allowed_values)
            )

        self._sub_type = sub_type

    @property
    def symbol(self):
        """Gets the symbol of this Transaction.

        The symbol of the security being traded.<br><b>Note</b>: The settle date field applies only to trade-related transactions. <br><br><b>Applicable containers</b>: investment<br>

        :return: The symbol of this Transaction.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Transaction.

        The symbol of the security being traded.<br><b>Note</b>: The settle date field applies only to trade-related transactions. <br><br><b>Applicable containers</b>: investment<br>

        :param symbol: The symbol of this Transaction.
        :type symbol: str
        """

        self._symbol = symbol

    @property
    def transaction_date(self):
        """Gets the transaction_date of this Transaction.

        The date the transaction happens in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>

        :return: The transaction_date of this Transaction.
        :rtype: str
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date):
        """Sets the transaction_date of this Transaction.

        The date the transaction happens in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>

        :param transaction_date: The transaction_date of this Transaction.
        :type transaction_date: str
        """

        self._transaction_date = transaction_date

    @property
    def type(self):
        """Gets the type of this Transaction.

        The nature of the transaction, i.e., deposit, refund, payment, etc.<br><b>Note</b>: The transaction type field is available only for the United States, Canada, United Kingdom, and India based provider sites. <br><br><b>Applicable containers</b>: bank,creditCard,investment<br>

        :return: The type of this Transaction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Transaction.

        The nature of the transaction, i.e., deposit, refund, payment, etc.<br><b>Note</b>: The transaction type field is available only for the United States, Canada, United Kingdom, and India based provider sites. <br><br><b>Applicable containers</b>: bank,creditCard,investment<br>

        :param type: The type of this Transaction.
        :type type: str
        """

        self._type = type

    @property
    def valoren(self):
        """Gets the valoren of this Transaction.

        It is an identification number that is assigned to financial instruments such as stocks and bonds trading in Switzerland.<br><br><b>Applicable containers</b>: investment<br>

        :return: The valoren of this Transaction.
        :rtype: str
        """
        return self._valoren

    @valoren.setter
    def valoren(self, valoren):
        """Sets the valoren of this Transaction.

        It is an identification number that is assigned to financial instruments such as stocks and bonds trading in Switzerland.<br><br><b>Applicable containers</b>: investment<br>

        :param valoren: The valoren of this Transaction.
        :type valoren: str
        """

        self._valoren = valoren
