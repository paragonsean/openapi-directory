# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transaction import Transaction
from openapi_server import util


class VerifyTransactionCriteria(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, base_type: str=None, _date: str=None, date_variance: str=None, keyword: str=None, matched: str=None, verified_transaction: List[Transaction]=None):
        """VerifyTransactionCriteria - a model defined in OpenAPI

        :param amount: The amount of this VerifyTransactionCriteria.
        :param base_type: The base_type of this VerifyTransactionCriteria.
        :param _date: The _date of this VerifyTransactionCriteria.
        :param date_variance: The date_variance of this VerifyTransactionCriteria.
        :param keyword: The keyword of this VerifyTransactionCriteria.
        :param matched: The matched of this VerifyTransactionCriteria.
        :param verified_transaction: The verified_transaction of this VerifyTransactionCriteria.
        """
        self.openapi_types = {
            'amount': float,
            'base_type': str,
            '_date': str,
            'date_variance': str,
            'keyword': str,
            'matched': str,
            'verified_transaction': List[Transaction]
        }

        self.attribute_map = {
            'amount': 'amount',
            'base_type': 'baseType',
            '_date': 'date',
            'date_variance': 'dateVariance',
            'keyword': 'keyword',
            'matched': 'matched',
            'verified_transaction': 'verifiedTransaction'
        }

        self._amount = amount
        self._base_type = base_type
        self.__date = _date
        self._date_variance = date_variance
        self._keyword = keyword
        self._matched = matched
        self._verified_transaction = verified_transaction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerifyTransactionCriteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VerifyTransactionCriteria of this VerifyTransactionCriteria.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this VerifyTransactionCriteria.


        :return: The amount of this VerifyTransactionCriteria.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this VerifyTransactionCriteria.


        :param amount: The amount of this VerifyTransactionCriteria.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def base_type(self):
        """Gets the base_type of this VerifyTransactionCriteria.

        Indicates if the transaction appears as a debit or a credit transaction in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>

        :return: The base_type of this VerifyTransactionCriteria.
        :rtype: str
        """
        return self._base_type

    @base_type.setter
    def base_type(self, base_type):
        """Sets the base_type of this VerifyTransactionCriteria.

        Indicates if the transaction appears as a debit or a credit transaction in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>

        :param base_type: The base_type of this VerifyTransactionCriteria.
        :type base_type: str
        """
        allowed_values = ["CREDIT", "DEBIT"]  # noqa: E501
        if base_type not in allowed_values:
            raise ValueError(
                "Invalid value for `base_type` ({0}), must be one of {1}"
                .format(base_type, allowed_values)
            )

        self._base_type = base_type

    @property
    def _date(self):
        """Gets the _date of this VerifyTransactionCriteria.


        :return: The _date of this VerifyTransactionCriteria.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this VerifyTransactionCriteria.


        :param _date: The _date of this VerifyTransactionCriteria.
        :type _date: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def date_variance(self):
        """Gets the date_variance of this VerifyTransactionCriteria.


        :return: The date_variance of this VerifyTransactionCriteria.
        :rtype: str
        """
        return self._date_variance

    @date_variance.setter
    def date_variance(self, date_variance):
        """Sets the date_variance of this VerifyTransactionCriteria.


        :param date_variance: The date_variance of this VerifyTransactionCriteria.
        :type date_variance: str
        """

        self._date_variance = date_variance

    @property
    def keyword(self):
        """Gets the keyword of this VerifyTransactionCriteria.


        :return: The keyword of this VerifyTransactionCriteria.
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """Sets the keyword of this VerifyTransactionCriteria.


        :param keyword: The keyword of this VerifyTransactionCriteria.
        :type keyword: str
        """

        self._keyword = keyword

    @property
    def matched(self):
        """Gets the matched of this VerifyTransactionCriteria.

        Indicates if the criteria is matched or not. <br><b>Applicable Values</b><br>

        :return: The matched of this VerifyTransactionCriteria.
        :rtype: str
        """
        return self._matched

    @matched.setter
    def matched(self, matched):
        """Sets the matched of this VerifyTransactionCriteria.

        Indicates if the criteria is matched or not. <br><b>Applicable Values</b><br>

        :param matched: The matched of this VerifyTransactionCriteria.
        :type matched: str
        """
        allowed_values = ["COMPLETE", "NONE"]  # noqa: E501
        if matched not in allowed_values:
            raise ValueError(
                "Invalid value for `matched` ({0}), must be one of {1}"
                .format(matched, allowed_values)
            )

        self._matched = matched

    @property
    def verified_transaction(self):
        """Gets the verified_transaction of this VerifyTransactionCriteria.


        :return: The verified_transaction of this VerifyTransactionCriteria.
        :rtype: List[Transaction]
        """
        return self._verified_transaction

    @verified_transaction.setter
    def verified_transaction(self, verified_transaction):
        """Sets the verified_transaction of this VerifyTransactionCriteria.


        :param verified_transaction: The verified_transaction of this VerifyTransactionCriteria.
        :type verified_transaction: List[Transaction]
        """

        self._verified_transaction = verified_transaction
