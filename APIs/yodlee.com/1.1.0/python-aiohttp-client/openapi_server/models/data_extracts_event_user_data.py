# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_extracts_event_links import DataExtractsEventLinks
from openapi_server.models.data_extracts_user import DataExtractsUser
from openapi_server import util


class DataExtractsEventUserData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: List[DataExtractsEventLinks]=None, user: DataExtractsUser=None):
        """DataExtractsEventUserData - a model defined in OpenAPI

        :param links: The links of this DataExtractsEventUserData.
        :param user: The user of this DataExtractsEventUserData.
        """
        self.openapi_types = {
            'links': List[DataExtractsEventLinks],
            'user': DataExtractsUser
        }

        self.attribute_map = {
            'links': 'links',
            'user': 'user'
        }

        self._links = links
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataExtractsEventUserData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataExtractsEventUserData of this DataExtractsEventUserData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this DataExtractsEventUserData.


        :return: The links of this DataExtractsEventUserData.
        :rtype: List[DataExtractsEventLinks]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DataExtractsEventUserData.


        :param links: The links of this DataExtractsEventUserData.
        :type links: List[DataExtractsEventLinks]
        """

        self._links = links

    @property
    def user(self):
        """Gets the user of this DataExtractsEventUserData.


        :return: The user of this DataExtractsEventUserData.
        :rtype: DataExtractsUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this DataExtractsEventUserData.


        :param user: The user of this DataExtractsEventUserData.
        :type user: DataExtractsUser
        """

        self._user = user
