# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attribute import Attribute
from openapi_server import util


class ProvidersDataset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute: List[Attribute]=None, name: str=None):
        """ProvidersDataset - a model defined in OpenAPI

        :param attribute: The attribute of this ProvidersDataset.
        :param name: The name of this ProvidersDataset.
        """
        self.openapi_types = {
            'attribute': List[Attribute],
            'name': str
        }

        self.attribute_map = {
            'attribute': 'attribute',
            'name': 'name'
        }

        self._attribute = attribute
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProvidersDataset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProvidersDataset of this ProvidersDataset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute(self):
        """Gets the attribute of this ProvidersDataset.

        The name of the dataset attribute suported by the provider.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :return: The attribute of this ProvidersDataset.
        :rtype: List[Attribute]
        """
        return self._attribute

    @attribute.setter
    def attribute(self, attribute):
        """Sets the attribute of this ProvidersDataset.

        The name of the dataset attribute suported by the provider.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>

        :param attribute: The attribute of this ProvidersDataset.
        :type attribute: List[Attribute]
        """

        self._attribute = attribute

    @property
    def name(self):
        """Gets the name of this ProvidersDataset.

        The name of the dataset requested from the provider site<br><br><b>Account Type</b>: Manual<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li><li>GET providers</li></ul><b>Applicable Values</b><br>

        :return: The name of this ProvidersDataset.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProvidersDataset.

        The name of the dataset requested from the provider site<br><br><b>Account Type</b>: Manual<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li><li>GET providers</li></ul><b>Applicable Values</b><br>

        :param name: The name of this ProvidersDataset.
        :type name: str
        """
        allowed_values = ["BASIC_AGG_DATA", "ADVANCE_AGG_DATA", "ACCT_PROFILE", "DOCUMENT"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"
                .format(name, allowed_values)
            )

        self._name = name
