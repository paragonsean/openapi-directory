/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecurity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecurity::OAISecurity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecurity::OAISecurity() {
    this->initializeModel();
}

OAISecurity::~OAISecurity() {}

void OAISecurity::initializeModel() {

    m_accrual_method_isSet = false;
    m_accrual_method_isValid = false;

    m_agency_factor_isSet = false;
    m_agency_factor_isValid = false;

    m_call_date_isSet = false;
    m_call_date_isValid = false;

    m_call_price_isSet = false;
    m_call_price_isValid = false;

    m_cdsc_fund_flag_isSet = false;
    m_cdsc_fund_flag_isValid = false;

    m_closed_flag_isSet = false;
    m_closed_flag_isValid = false;

    m_cusip_isSet = false;
    m_cusip_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_federal_taxable_isSet = false;
    m_federal_taxable_isValid = false;

    m_firm_eligible_isSet = false;
    m_firm_eligible_isValid = false;

    m_first_coupon_date_isSet = false;
    m_first_coupon_date_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_fund_family_isSet = false;
    m_fund_family_isValid = false;

    m_gics_sector_isSet = false;
    m_gics_sector_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_income_currency_isSet = false;
    m_income_currency_isValid = false;

    m_interest_rate_isSet = false;
    m_interest_rate_isValid = false;

    m_is_dummy_security_isSet = false;
    m_is_dummy_security_isValid = false;

    m_is_envestnet_dummy_security_isSet = false;
    m_is_envestnet_dummy_security_isValid = false;

    m_is_synthetic_security_isSet = false;
    m_is_synthetic_security_isValid = false;

    m_isin_isSet = false;
    m_isin_isValid = false;

    m_issue_date_isSet = false;
    m_issue_date_isValid = false;

    m_issue_type_multiplier_isSet = false;
    m_issue_type_multiplier_isValid = false;

    m_last_coupon_date_isSet = false;
    m_last_coupon_date_isValid = false;

    m_last_modified_date_isSet = false;
    m_last_modified_date_isValid = false;

    m_maturity_date_isSet = false;
    m_maturity_date_isValid = false;

    m_minimum_purchase_isSet = false;
    m_minimum_purchase_isValid = false;

    m_moody_rating_isSet = false;
    m_moody_rating_isValid = false;

    m_s_and_p_rating_isSet = false;
    m_s_and_p_rating_isValid = false;

    m_sector_isSet = false;
    m_sector_isValid = false;

    m_sedol_isSet = false;
    m_sedol_isValid = false;

    m_share_class_isSet = false;
    m_share_class_isValid = false;

    m_state_taxable_isSet = false;
    m_state_taxable_isValid = false;

    m_stock_exchange_details_isSet = false;
    m_stock_exchange_details_isValid = false;

    m_style_isSet = false;
    m_style_isValid = false;

    m_sub_sector_isSet = false;
    m_sub_sector_isValid = false;

    m_trade_currency_code_isSet = false;
    m_trade_currency_code_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISecurity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecurity::fromJsonObject(QJsonObject json) {

    m_accrual_method_isValid = ::OpenAPI::fromJsonValue(m_accrual_method, json[QString("accrualMethod")]);
    m_accrual_method_isSet = !json[QString("accrualMethod")].isNull() && m_accrual_method_isValid;

    m_agency_factor_isValid = ::OpenAPI::fromJsonValue(m_agency_factor, json[QString("agencyFactor")]);
    m_agency_factor_isSet = !json[QString("agencyFactor")].isNull() && m_agency_factor_isValid;

    m_call_date_isValid = ::OpenAPI::fromJsonValue(m_call_date, json[QString("callDate")]);
    m_call_date_isSet = !json[QString("callDate")].isNull() && m_call_date_isValid;

    m_call_price_isValid = ::OpenAPI::fromJsonValue(m_call_price, json[QString("callPrice")]);
    m_call_price_isSet = !json[QString("callPrice")].isNull() && m_call_price_isValid;

    m_cdsc_fund_flag_isValid = ::OpenAPI::fromJsonValue(m_cdsc_fund_flag, json[QString("cdscFundFlag")]);
    m_cdsc_fund_flag_isSet = !json[QString("cdscFundFlag")].isNull() && m_cdsc_fund_flag_isValid;

    m_closed_flag_isValid = ::OpenAPI::fromJsonValue(m_closed_flag, json[QString("closedFlag")]);
    m_closed_flag_isSet = !json[QString("closedFlag")].isNull() && m_closed_flag_isValid;

    m_cusip_isValid = ::OpenAPI::fromJsonValue(m_cusip, json[QString("cusip")]);
    m_cusip_isSet = !json[QString("cusip")].isNull() && m_cusip_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_federal_taxable_isValid = ::OpenAPI::fromJsonValue(m_federal_taxable, json[QString("federalTaxable")]);
    m_federal_taxable_isSet = !json[QString("federalTaxable")].isNull() && m_federal_taxable_isValid;

    m_firm_eligible_isValid = ::OpenAPI::fromJsonValue(m_firm_eligible, json[QString("firmEligible")]);
    m_firm_eligible_isSet = !json[QString("firmEligible")].isNull() && m_firm_eligible_isValid;

    m_first_coupon_date_isValid = ::OpenAPI::fromJsonValue(m_first_coupon_date, json[QString("firstCouponDate")]);
    m_first_coupon_date_isSet = !json[QString("firstCouponDate")].isNull() && m_first_coupon_date_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_fund_family_isValid = ::OpenAPI::fromJsonValue(m_fund_family, json[QString("fundFamily")]);
    m_fund_family_isSet = !json[QString("fundFamily")].isNull() && m_fund_family_isValid;

    m_gics_sector_isValid = ::OpenAPI::fromJsonValue(m_gics_sector, json[QString("gicsSector")]);
    m_gics_sector_isSet = !json[QString("gicsSector")].isNull() && m_gics_sector_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_income_currency_isValid = ::OpenAPI::fromJsonValue(m_income_currency, json[QString("incomeCurrency")]);
    m_income_currency_isSet = !json[QString("incomeCurrency")].isNull() && m_income_currency_isValid;

    m_interest_rate_isValid = ::OpenAPI::fromJsonValue(m_interest_rate, json[QString("interestRate")]);
    m_interest_rate_isSet = !json[QString("interestRate")].isNull() && m_interest_rate_isValid;

    m_is_dummy_security_isValid = ::OpenAPI::fromJsonValue(m_is_dummy_security, json[QString("isDummySecurity")]);
    m_is_dummy_security_isSet = !json[QString("isDummySecurity")].isNull() && m_is_dummy_security_isValid;

    m_is_envestnet_dummy_security_isValid = ::OpenAPI::fromJsonValue(m_is_envestnet_dummy_security, json[QString("isEnvestnetDummySecurity")]);
    m_is_envestnet_dummy_security_isSet = !json[QString("isEnvestnetDummySecurity")].isNull() && m_is_envestnet_dummy_security_isValid;

    m_is_synthetic_security_isValid = ::OpenAPI::fromJsonValue(m_is_synthetic_security, json[QString("isSyntheticSecurity")]);
    m_is_synthetic_security_isSet = !json[QString("isSyntheticSecurity")].isNull() && m_is_synthetic_security_isValid;

    m_isin_isValid = ::OpenAPI::fromJsonValue(m_isin, json[QString("isin")]);
    m_isin_isSet = !json[QString("isin")].isNull() && m_isin_isValid;

    m_issue_date_isValid = ::OpenAPI::fromJsonValue(m_issue_date, json[QString("issueDate")]);
    m_issue_date_isSet = !json[QString("issueDate")].isNull() && m_issue_date_isValid;

    m_issue_type_multiplier_isValid = ::OpenAPI::fromJsonValue(m_issue_type_multiplier, json[QString("issueTypeMultiplier")]);
    m_issue_type_multiplier_isSet = !json[QString("issueTypeMultiplier")].isNull() && m_issue_type_multiplier_isValid;

    m_last_coupon_date_isValid = ::OpenAPI::fromJsonValue(m_last_coupon_date, json[QString("lastCouponDate")]);
    m_last_coupon_date_isSet = !json[QString("lastCouponDate")].isNull() && m_last_coupon_date_isValid;

    m_last_modified_date_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date, json[QString("lastModifiedDate")]);
    m_last_modified_date_isSet = !json[QString("lastModifiedDate")].isNull() && m_last_modified_date_isValid;

    m_maturity_date_isValid = ::OpenAPI::fromJsonValue(m_maturity_date, json[QString("maturityDate")]);
    m_maturity_date_isSet = !json[QString("maturityDate")].isNull() && m_maturity_date_isValid;

    m_minimum_purchase_isValid = ::OpenAPI::fromJsonValue(m_minimum_purchase, json[QString("minimumPurchase")]);
    m_minimum_purchase_isSet = !json[QString("minimumPurchase")].isNull() && m_minimum_purchase_isValid;

    m_moody_rating_isValid = ::OpenAPI::fromJsonValue(m_moody_rating, json[QString("moodyRating")]);
    m_moody_rating_isSet = !json[QString("moodyRating")].isNull() && m_moody_rating_isValid;

    m_s_and_p_rating_isValid = ::OpenAPI::fromJsonValue(m_s_and_p_rating, json[QString("sAndPRating")]);
    m_s_and_p_rating_isSet = !json[QString("sAndPRating")].isNull() && m_s_and_p_rating_isValid;

    m_sector_isValid = ::OpenAPI::fromJsonValue(m_sector, json[QString("sector")]);
    m_sector_isSet = !json[QString("sector")].isNull() && m_sector_isValid;

    m_sedol_isValid = ::OpenAPI::fromJsonValue(m_sedol, json[QString("sedol")]);
    m_sedol_isSet = !json[QString("sedol")].isNull() && m_sedol_isValid;

    m_share_class_isValid = ::OpenAPI::fromJsonValue(m_share_class, json[QString("shareClass")]);
    m_share_class_isSet = !json[QString("shareClass")].isNull() && m_share_class_isValid;

    m_state_taxable_isValid = ::OpenAPI::fromJsonValue(m_state_taxable, json[QString("stateTaxable")]);
    m_state_taxable_isSet = !json[QString("stateTaxable")].isNull() && m_state_taxable_isValid;

    m_stock_exchange_details_isValid = ::OpenAPI::fromJsonValue(m_stock_exchange_details, json[QString("stockExchangeDetails")]);
    m_stock_exchange_details_isSet = !json[QString("stockExchangeDetails")].isNull() && m_stock_exchange_details_isValid;

    m_style_isValid = ::OpenAPI::fromJsonValue(m_style, json[QString("style")]);
    m_style_isSet = !json[QString("style")].isNull() && m_style_isValid;

    m_sub_sector_isValid = ::OpenAPI::fromJsonValue(m_sub_sector, json[QString("subSector")]);
    m_sub_sector_isSet = !json[QString("subSector")].isNull() && m_sub_sector_isValid;

    m_trade_currency_code_isValid = ::OpenAPI::fromJsonValue(m_trade_currency_code, json[QString("tradeCurrencyCode")]);
    m_trade_currency_code_isSet = !json[QString("tradeCurrencyCode")].isNull() && m_trade_currency_code_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISecurity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecurity::asJsonObject() const {
    QJsonObject obj;
    if (m_accrual_method_isSet) {
        obj.insert(QString("accrualMethod"), ::OpenAPI::toJsonValue(m_accrual_method));
    }
    if (m_agency_factor_isSet) {
        obj.insert(QString("agencyFactor"), ::OpenAPI::toJsonValue(m_agency_factor));
    }
    if (m_call_date_isSet) {
        obj.insert(QString("callDate"), ::OpenAPI::toJsonValue(m_call_date));
    }
    if (m_call_price_isSet) {
        obj.insert(QString("callPrice"), ::OpenAPI::toJsonValue(m_call_price));
    }
    if (m_cdsc_fund_flag_isSet) {
        obj.insert(QString("cdscFundFlag"), ::OpenAPI::toJsonValue(m_cdsc_fund_flag));
    }
    if (m_closed_flag_isSet) {
        obj.insert(QString("closedFlag"), ::OpenAPI::toJsonValue(m_closed_flag));
    }
    if (m_cusip_isSet) {
        obj.insert(QString("cusip"), ::OpenAPI::toJsonValue(m_cusip));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_federal_taxable_isSet) {
        obj.insert(QString("federalTaxable"), ::OpenAPI::toJsonValue(m_federal_taxable));
    }
    if (m_firm_eligible_isSet) {
        obj.insert(QString("firmEligible"), ::OpenAPI::toJsonValue(m_firm_eligible));
    }
    if (m_first_coupon_date_isSet) {
        obj.insert(QString("firstCouponDate"), ::OpenAPI::toJsonValue(m_first_coupon_date));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_fund_family_isSet) {
        obj.insert(QString("fundFamily"), ::OpenAPI::toJsonValue(m_fund_family));
    }
    if (m_gics_sector_isSet) {
        obj.insert(QString("gicsSector"), ::OpenAPI::toJsonValue(m_gics_sector));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_income_currency_isSet) {
        obj.insert(QString("incomeCurrency"), ::OpenAPI::toJsonValue(m_income_currency));
    }
    if (m_interest_rate_isSet) {
        obj.insert(QString("interestRate"), ::OpenAPI::toJsonValue(m_interest_rate));
    }
    if (m_is_dummy_security_isSet) {
        obj.insert(QString("isDummySecurity"), ::OpenAPI::toJsonValue(m_is_dummy_security));
    }
    if (m_is_envestnet_dummy_security_isSet) {
        obj.insert(QString("isEnvestnetDummySecurity"), ::OpenAPI::toJsonValue(m_is_envestnet_dummy_security));
    }
    if (m_is_synthetic_security_isSet) {
        obj.insert(QString("isSyntheticSecurity"), ::OpenAPI::toJsonValue(m_is_synthetic_security));
    }
    if (m_isin_isSet) {
        obj.insert(QString("isin"), ::OpenAPI::toJsonValue(m_isin));
    }
    if (m_issue_date_isSet) {
        obj.insert(QString("issueDate"), ::OpenAPI::toJsonValue(m_issue_date));
    }
    if (m_issue_type_multiplier_isSet) {
        obj.insert(QString("issueTypeMultiplier"), ::OpenAPI::toJsonValue(m_issue_type_multiplier));
    }
    if (m_last_coupon_date_isSet) {
        obj.insert(QString("lastCouponDate"), ::OpenAPI::toJsonValue(m_last_coupon_date));
    }
    if (m_last_modified_date_isSet) {
        obj.insert(QString("lastModifiedDate"), ::OpenAPI::toJsonValue(m_last_modified_date));
    }
    if (m_maturity_date_isSet) {
        obj.insert(QString("maturityDate"), ::OpenAPI::toJsonValue(m_maturity_date));
    }
    if (m_minimum_purchase_isSet) {
        obj.insert(QString("minimumPurchase"), ::OpenAPI::toJsonValue(m_minimum_purchase));
    }
    if (m_moody_rating_isSet) {
        obj.insert(QString("moodyRating"), ::OpenAPI::toJsonValue(m_moody_rating));
    }
    if (m_s_and_p_rating_isSet) {
        obj.insert(QString("sAndPRating"), ::OpenAPI::toJsonValue(m_s_and_p_rating));
    }
    if (m_sector_isSet) {
        obj.insert(QString("sector"), ::OpenAPI::toJsonValue(m_sector));
    }
    if (m_sedol_isSet) {
        obj.insert(QString("sedol"), ::OpenAPI::toJsonValue(m_sedol));
    }
    if (m_share_class_isSet) {
        obj.insert(QString("shareClass"), ::OpenAPI::toJsonValue(m_share_class));
    }
    if (m_state_taxable_isSet) {
        obj.insert(QString("stateTaxable"), ::OpenAPI::toJsonValue(m_state_taxable));
    }
    if (m_stock_exchange_details.size() > 0) {
        obj.insert(QString("stockExchangeDetails"), ::OpenAPI::toJsonValue(m_stock_exchange_details));
    }
    if (m_style_isSet) {
        obj.insert(QString("style"), ::OpenAPI::toJsonValue(m_style));
    }
    if (m_sub_sector_isSet) {
        obj.insert(QString("subSector"), ::OpenAPI::toJsonValue(m_sub_sector));
    }
    if (m_trade_currency_code_isSet) {
        obj.insert(QString("tradeCurrencyCode"), ::OpenAPI::toJsonValue(m_trade_currency_code));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAISecurity::getAccrualMethod() const {
    return m_accrual_method;
}
void OAISecurity::setAccrualMethod(const QString &accrual_method) {
    m_accrual_method = accrual_method;
    m_accrual_method_isSet = true;
}

bool OAISecurity::is_accrual_method_Set() const{
    return m_accrual_method_isSet;
}

bool OAISecurity::is_accrual_method_Valid() const{
    return m_accrual_method_isValid;
}

double OAISecurity::getAgencyFactor() const {
    return m_agency_factor;
}
void OAISecurity::setAgencyFactor(const double &agency_factor) {
    m_agency_factor = agency_factor;
    m_agency_factor_isSet = true;
}

bool OAISecurity::is_agency_factor_Set() const{
    return m_agency_factor_isSet;
}

bool OAISecurity::is_agency_factor_Valid() const{
    return m_agency_factor_isValid;
}

QString OAISecurity::getCallDate() const {
    return m_call_date;
}
void OAISecurity::setCallDate(const QString &call_date) {
    m_call_date = call_date;
    m_call_date_isSet = true;
}

bool OAISecurity::is_call_date_Set() const{
    return m_call_date_isSet;
}

bool OAISecurity::is_call_date_Valid() const{
    return m_call_date_isValid;
}

double OAISecurity::getCallPrice() const {
    return m_call_price;
}
void OAISecurity::setCallPrice(const double &call_price) {
    m_call_price = call_price;
    m_call_price_isSet = true;
}

bool OAISecurity::is_call_price_Set() const{
    return m_call_price_isSet;
}

bool OAISecurity::is_call_price_Valid() const{
    return m_call_price_isValid;
}

bool OAISecurity::isCdscFundFlag() const {
    return m_cdsc_fund_flag;
}
void OAISecurity::setCdscFundFlag(const bool &cdsc_fund_flag) {
    m_cdsc_fund_flag = cdsc_fund_flag;
    m_cdsc_fund_flag_isSet = true;
}

bool OAISecurity::is_cdsc_fund_flag_Set() const{
    return m_cdsc_fund_flag_isSet;
}

bool OAISecurity::is_cdsc_fund_flag_Valid() const{
    return m_cdsc_fund_flag_isValid;
}

bool OAISecurity::isClosedFlag() const {
    return m_closed_flag;
}
void OAISecurity::setClosedFlag(const bool &closed_flag) {
    m_closed_flag = closed_flag;
    m_closed_flag_isSet = true;
}

bool OAISecurity::is_closed_flag_Set() const{
    return m_closed_flag_isSet;
}

bool OAISecurity::is_closed_flag_Valid() const{
    return m_closed_flag_isValid;
}

QString OAISecurity::getCusip() const {
    return m_cusip;
}
void OAISecurity::setCusip(const QString &cusip) {
    m_cusip = cusip;
    m_cusip_isSet = true;
}

bool OAISecurity::is_cusip_Set() const{
    return m_cusip_isSet;
}

bool OAISecurity::is_cusip_Valid() const{
    return m_cusip_isValid;
}

QString OAISecurity::getDescription() const {
    return m_description;
}
void OAISecurity::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISecurity::is_description_Set() const{
    return m_description_isSet;
}

bool OAISecurity::is_description_Valid() const{
    return m_description_isValid;
}

bool OAISecurity::isFederalTaxable() const {
    return m_federal_taxable;
}
void OAISecurity::setFederalTaxable(const bool &federal_taxable) {
    m_federal_taxable = federal_taxable;
    m_federal_taxable_isSet = true;
}

bool OAISecurity::is_federal_taxable_Set() const{
    return m_federal_taxable_isSet;
}

bool OAISecurity::is_federal_taxable_Valid() const{
    return m_federal_taxable_isValid;
}

QString OAISecurity::getFirmEligible() const {
    return m_firm_eligible;
}
void OAISecurity::setFirmEligible(const QString &firm_eligible) {
    m_firm_eligible = firm_eligible;
    m_firm_eligible_isSet = true;
}

bool OAISecurity::is_firm_eligible_Set() const{
    return m_firm_eligible_isSet;
}

bool OAISecurity::is_firm_eligible_Valid() const{
    return m_firm_eligible_isValid;
}

QString OAISecurity::getFirstCouponDate() const {
    return m_first_coupon_date;
}
void OAISecurity::setFirstCouponDate(const QString &first_coupon_date) {
    m_first_coupon_date = first_coupon_date;
    m_first_coupon_date_isSet = true;
}

bool OAISecurity::is_first_coupon_date_Set() const{
    return m_first_coupon_date_isSet;
}

bool OAISecurity::is_first_coupon_date_Valid() const{
    return m_first_coupon_date_isValid;
}

qint32 OAISecurity::getFrequency() const {
    return m_frequency;
}
void OAISecurity::setFrequency(const qint32 &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAISecurity::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAISecurity::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QString OAISecurity::getFundFamily() const {
    return m_fund_family;
}
void OAISecurity::setFundFamily(const QString &fund_family) {
    m_fund_family = fund_family;
    m_fund_family_isSet = true;
}

bool OAISecurity::is_fund_family_Set() const{
    return m_fund_family_isSet;
}

bool OAISecurity::is_fund_family_Valid() const{
    return m_fund_family_isValid;
}

QString OAISecurity::getGicsSector() const {
    return m_gics_sector;
}
void OAISecurity::setGicsSector(const QString &gics_sector) {
    m_gics_sector = gics_sector;
    m_gics_sector_isSet = true;
}

bool OAISecurity::is_gics_sector_Set() const{
    return m_gics_sector_isSet;
}

bool OAISecurity::is_gics_sector_Valid() const{
    return m_gics_sector_isValid;
}

qint64 OAISecurity::getId() const {
    return m_id;
}
void OAISecurity::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISecurity::is_id_Set() const{
    return m_id_isSet;
}

bool OAISecurity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISecurity::getIncomeCurrency() const {
    return m_income_currency;
}
void OAISecurity::setIncomeCurrency(const QString &income_currency) {
    m_income_currency = income_currency;
    m_income_currency_isSet = true;
}

bool OAISecurity::is_income_currency_Set() const{
    return m_income_currency_isSet;
}

bool OAISecurity::is_income_currency_Valid() const{
    return m_income_currency_isValid;
}

double OAISecurity::getInterestRate() const {
    return m_interest_rate;
}
void OAISecurity::setInterestRate(const double &interest_rate) {
    m_interest_rate = interest_rate;
    m_interest_rate_isSet = true;
}

bool OAISecurity::is_interest_rate_Set() const{
    return m_interest_rate_isSet;
}

bool OAISecurity::is_interest_rate_Valid() const{
    return m_interest_rate_isValid;
}

bool OAISecurity::isIsDummySecurity() const {
    return m_is_dummy_security;
}
void OAISecurity::setIsDummySecurity(const bool &is_dummy_security) {
    m_is_dummy_security = is_dummy_security;
    m_is_dummy_security_isSet = true;
}

bool OAISecurity::is_is_dummy_security_Set() const{
    return m_is_dummy_security_isSet;
}

bool OAISecurity::is_is_dummy_security_Valid() const{
    return m_is_dummy_security_isValid;
}

bool OAISecurity::isIsEnvestnetDummySecurity() const {
    return m_is_envestnet_dummy_security;
}
void OAISecurity::setIsEnvestnetDummySecurity(const bool &is_envestnet_dummy_security) {
    m_is_envestnet_dummy_security = is_envestnet_dummy_security;
    m_is_envestnet_dummy_security_isSet = true;
}

bool OAISecurity::is_is_envestnet_dummy_security_Set() const{
    return m_is_envestnet_dummy_security_isSet;
}

bool OAISecurity::is_is_envestnet_dummy_security_Valid() const{
    return m_is_envestnet_dummy_security_isValid;
}

bool OAISecurity::isIsSyntheticSecurity() const {
    return m_is_synthetic_security;
}
void OAISecurity::setIsSyntheticSecurity(const bool &is_synthetic_security) {
    m_is_synthetic_security = is_synthetic_security;
    m_is_synthetic_security_isSet = true;
}

bool OAISecurity::is_is_synthetic_security_Set() const{
    return m_is_synthetic_security_isSet;
}

bool OAISecurity::is_is_synthetic_security_Valid() const{
    return m_is_synthetic_security_isValid;
}

QString OAISecurity::getIsin() const {
    return m_isin;
}
void OAISecurity::setIsin(const QString &isin) {
    m_isin = isin;
    m_isin_isSet = true;
}

bool OAISecurity::is_isin_Set() const{
    return m_isin_isSet;
}

bool OAISecurity::is_isin_Valid() const{
    return m_isin_isValid;
}

QString OAISecurity::getIssueDate() const {
    return m_issue_date;
}
void OAISecurity::setIssueDate(const QString &issue_date) {
    m_issue_date = issue_date;
    m_issue_date_isSet = true;
}

bool OAISecurity::is_issue_date_Set() const{
    return m_issue_date_isSet;
}

bool OAISecurity::is_issue_date_Valid() const{
    return m_issue_date_isValid;
}

double OAISecurity::getIssueTypeMultiplier() const {
    return m_issue_type_multiplier;
}
void OAISecurity::setIssueTypeMultiplier(const double &issue_type_multiplier) {
    m_issue_type_multiplier = issue_type_multiplier;
    m_issue_type_multiplier_isSet = true;
}

bool OAISecurity::is_issue_type_multiplier_Set() const{
    return m_issue_type_multiplier_isSet;
}

bool OAISecurity::is_issue_type_multiplier_Valid() const{
    return m_issue_type_multiplier_isValid;
}

QString OAISecurity::getLastCouponDate() const {
    return m_last_coupon_date;
}
void OAISecurity::setLastCouponDate(const QString &last_coupon_date) {
    m_last_coupon_date = last_coupon_date;
    m_last_coupon_date_isSet = true;
}

bool OAISecurity::is_last_coupon_date_Set() const{
    return m_last_coupon_date_isSet;
}

bool OAISecurity::is_last_coupon_date_Valid() const{
    return m_last_coupon_date_isValid;
}

QString OAISecurity::getLastModifiedDate() const {
    return m_last_modified_date;
}
void OAISecurity::setLastModifiedDate(const QString &last_modified_date) {
    m_last_modified_date = last_modified_date;
    m_last_modified_date_isSet = true;
}

bool OAISecurity::is_last_modified_date_Set() const{
    return m_last_modified_date_isSet;
}

bool OAISecurity::is_last_modified_date_Valid() const{
    return m_last_modified_date_isValid;
}

QString OAISecurity::getMaturityDate() const {
    return m_maturity_date;
}
void OAISecurity::setMaturityDate(const QString &maturity_date) {
    m_maturity_date = maturity_date;
    m_maturity_date_isSet = true;
}

bool OAISecurity::is_maturity_date_Set() const{
    return m_maturity_date_isSet;
}

bool OAISecurity::is_maturity_date_Valid() const{
    return m_maturity_date_isValid;
}

qint32 OAISecurity::getMinimumPurchase() const {
    return m_minimum_purchase;
}
void OAISecurity::setMinimumPurchase(const qint32 &minimum_purchase) {
    m_minimum_purchase = minimum_purchase;
    m_minimum_purchase_isSet = true;
}

bool OAISecurity::is_minimum_purchase_Set() const{
    return m_minimum_purchase_isSet;
}

bool OAISecurity::is_minimum_purchase_Valid() const{
    return m_minimum_purchase_isValid;
}

QString OAISecurity::getMoodyRating() const {
    return m_moody_rating;
}
void OAISecurity::setMoodyRating(const QString &moody_rating) {
    m_moody_rating = moody_rating;
    m_moody_rating_isSet = true;
}

bool OAISecurity::is_moody_rating_Set() const{
    return m_moody_rating_isSet;
}

bool OAISecurity::is_moody_rating_Valid() const{
    return m_moody_rating_isValid;
}

QString OAISecurity::getSAndPRating() const {
    return m_s_and_p_rating;
}
void OAISecurity::setSAndPRating(const QString &s_and_p_rating) {
    m_s_and_p_rating = s_and_p_rating;
    m_s_and_p_rating_isSet = true;
}

bool OAISecurity::is_s_and_p_rating_Set() const{
    return m_s_and_p_rating_isSet;
}

bool OAISecurity::is_s_and_p_rating_Valid() const{
    return m_s_and_p_rating_isValid;
}

QString OAISecurity::getSector() const {
    return m_sector;
}
void OAISecurity::setSector(const QString &sector) {
    m_sector = sector;
    m_sector_isSet = true;
}

bool OAISecurity::is_sector_Set() const{
    return m_sector_isSet;
}

bool OAISecurity::is_sector_Valid() const{
    return m_sector_isValid;
}

QString OAISecurity::getSedol() const {
    return m_sedol;
}
void OAISecurity::setSedol(const QString &sedol) {
    m_sedol = sedol;
    m_sedol_isSet = true;
}

bool OAISecurity::is_sedol_Set() const{
    return m_sedol_isSet;
}

bool OAISecurity::is_sedol_Valid() const{
    return m_sedol_isValid;
}

QString OAISecurity::getShareClass() const {
    return m_share_class;
}
void OAISecurity::setShareClass(const QString &share_class) {
    m_share_class = share_class;
    m_share_class_isSet = true;
}

bool OAISecurity::is_share_class_Set() const{
    return m_share_class_isSet;
}

bool OAISecurity::is_share_class_Valid() const{
    return m_share_class_isValid;
}

bool OAISecurity::isStateTaxable() const {
    return m_state_taxable;
}
void OAISecurity::setStateTaxable(const bool &state_taxable) {
    m_state_taxable = state_taxable;
    m_state_taxable_isSet = true;
}

bool OAISecurity::is_state_taxable_Set() const{
    return m_state_taxable_isSet;
}

bool OAISecurity::is_state_taxable_Valid() const{
    return m_state_taxable_isValid;
}

QList<OAIStockExchangeDetail> OAISecurity::getStockExchangeDetails() const {
    return m_stock_exchange_details;
}
void OAISecurity::setStockExchangeDetails(const QList<OAIStockExchangeDetail> &stock_exchange_details) {
    m_stock_exchange_details = stock_exchange_details;
    m_stock_exchange_details_isSet = true;
}

bool OAISecurity::is_stock_exchange_details_Set() const{
    return m_stock_exchange_details_isSet;
}

bool OAISecurity::is_stock_exchange_details_Valid() const{
    return m_stock_exchange_details_isValid;
}

QString OAISecurity::getStyle() const {
    return m_style;
}
void OAISecurity::setStyle(const QString &style) {
    m_style = style;
    m_style_isSet = true;
}

bool OAISecurity::is_style_Set() const{
    return m_style_isSet;
}

bool OAISecurity::is_style_Valid() const{
    return m_style_isValid;
}

QString OAISecurity::getSubSector() const {
    return m_sub_sector;
}
void OAISecurity::setSubSector(const QString &sub_sector) {
    m_sub_sector = sub_sector;
    m_sub_sector_isSet = true;
}

bool OAISecurity::is_sub_sector_Set() const{
    return m_sub_sector_isSet;
}

bool OAISecurity::is_sub_sector_Valid() const{
    return m_sub_sector_isValid;
}

QString OAISecurity::getTradeCurrencyCode() const {
    return m_trade_currency_code;
}
void OAISecurity::setTradeCurrencyCode(const QString &trade_currency_code) {
    m_trade_currency_code = trade_currency_code;
    m_trade_currency_code_isSet = true;
}

bool OAISecurity::is_trade_currency_code_Set() const{
    return m_trade_currency_code_isSet;
}

bool OAISecurity::is_trade_currency_code_Valid() const{
    return m_trade_currency_code_isValid;
}

QString OAISecurity::getType() const {
    return m_type;
}
void OAISecurity::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISecurity::is_type_Set() const{
    return m_type_isSet;
}

bool OAISecurity::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISecurity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accrual_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agency_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cdsc_fund_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cusip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_federal_taxable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firm_eligible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_coupon_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fund_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gics_sector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_income_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interest_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_dummy_security_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_envestnet_dummy_security_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_synthetic_security_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_isin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_type_multiplier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_coupon_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maturity_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_purchase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moody_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_and_p_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sedol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_taxable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_exchange_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_sector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trade_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecurity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
