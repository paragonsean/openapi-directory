/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIField.h
 *
 * 
 */

#ifndef OAIField_H
#define OAIField_H

#include <QJsonObject>

#include "OAIOption.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIOption;

class OAIField : public OAIObject {
public:
    OAIField();
    OAIField(QString json);
    ~OAIField() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getImage() const;
    void setImage(const QString &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    bool isIsOptional() const;
    void setIsOptional(const bool &is_optional);
    bool is_is_optional_Set() const;
    bool is_is_optional_Valid() const;

    bool isIsValueProvided() const;
    void setIsValueProvided(const bool &is_value_provided);
    bool is_is_value_provided_Set() const;
    bool is_is_value_provided_Valid() const;

    qint64 getMaxLength() const;
    void setMaxLength(const qint64 &max_length);
    bool is_max_length_Set() const;
    bool is_max_length_Valid() const;

    qint64 getMinLength() const;
    void setMinLength(const qint64 &min_length);
    bool is_min_length_Set() const;
    bool is_min_length_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIOption> getOption() const;
    void setOption(const QList<OAIOption> &option);
    bool is_option_Set() const;
    bool is_option_Valid() const;

    QString getPrefix() const;
    void setPrefix(const QString &prefix);
    bool is_prefix_Set() const;
    bool is_prefix_Valid() const;

    QString getSuffix() const;
    void setSuffix(const QString &suffix);
    bool is_suffix_Set() const;
    bool is_suffix_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getValue() const;
    void setValue(const QString &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    QString getValueEditable() const;
    void setValueEditable(const QString &value_editable);
    bool is_value_editable_Set() const;
    bool is_value_editable_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    bool m_is_optional;
    bool m_is_optional_isSet;
    bool m_is_optional_isValid;

    bool m_is_value_provided;
    bool m_is_value_provided_isSet;
    bool m_is_value_provided_isValid;

    qint64 m_max_length;
    bool m_max_length_isSet;
    bool m_max_length_isValid;

    qint64 m_min_length;
    bool m_min_length_isSet;
    bool m_min_length_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIOption> m_option;
    bool m_option_isSet;
    bool m_option_isValid;

    QString m_prefix;
    bool m_prefix_isSet;
    bool m_prefix_isValid;

    QString m_suffix;
    bool m_suffix_isSet;
    bool m_suffix_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_value;
    bool m_value_isSet;
    bool m_value_isValid;

    QString m_value_editable;
    bool m_value_editable_isSet;
    bool m_value_editable_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIField)

#endif // OAIField_H
