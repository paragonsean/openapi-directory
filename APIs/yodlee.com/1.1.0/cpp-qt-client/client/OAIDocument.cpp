/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocument::OAIDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocument::OAIDocument() {
    this->initializeModel();
}

OAIDocument::~OAIDocument() {}

void OAIDocument::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_doc_type_isSet = false;
    m_doc_type_isValid = false;

    m_form_type_isSet = false;
    m_form_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocument::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountID")]);
    m_account_id_isSet = !json[QString("accountID")].isNull() && m_account_id_isValid;

    m_doc_type_isValid = ::OpenAPI::fromJsonValue(m_doc_type, json[QString("docType")]);
    m_doc_type_isSet = !json[QString("docType")].isNull() && m_doc_type_isValid;

    m_form_type_isValid = ::OpenAPI::fromJsonValue(m_form_type, json[QString("formType")]);
    m_form_type_isSet = !json[QString("formType")].isNull() && m_form_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountID"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_doc_type_isSet) {
        obj.insert(QString("docType"), ::OpenAPI::toJsonValue(m_doc_type));
    }
    if (m_form_type_isSet) {
        obj.insert(QString("formType"), ::OpenAPI::toJsonValue(m_form_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint64 OAIDocument::getAccountId() const {
    return m_account_id;
}
void OAIDocument::setAccountId(const qint64 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIDocument::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIDocument::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIDocument::getDocType() const {
    return m_doc_type;
}
void OAIDocument::setDocType(const QString &doc_type) {
    m_doc_type = doc_type;
    m_doc_type_isSet = true;
}

bool OAIDocument::is_doc_type_Set() const{
    return m_doc_type_isSet;
}

bool OAIDocument::is_doc_type_Valid() const{
    return m_doc_type_isValid;
}

QString OAIDocument::getFormType() const {
    return m_form_type;
}
void OAIDocument::setFormType(const QString &form_type) {
    m_form_type = form_type;
    m_form_type_isSet = true;
}

bool OAIDocument::is_form_type_Set() const{
    return m_form_type_isSet;
}

bool OAIDocument::is_form_type_Valid() const{
    return m_form_type_isValid;
}

QString OAIDocument::getId() const {
    return m_id;
}
void OAIDocument::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDocument::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDocument::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDocument::getLastUpdated() const {
    return m_last_updated;
}
void OAIDocument::setLastUpdated(const QString &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIDocument::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIDocument::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIDocument::getName() const {
    return m_name;
}
void OAIDocument::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDocument::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDocument::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDocument::getSource() const {
    return m_source;
}
void OAIDocument::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIDocument::is_source_Set() const{
    return m_source_isSet;
}

bool OAIDocument::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIDocument::getStatus() const {
    return m_status;
}
void OAIDocument::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDocument::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDocument::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doc_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
