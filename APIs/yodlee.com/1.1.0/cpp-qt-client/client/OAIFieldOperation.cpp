/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFieldOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFieldOperation::OAIFieldOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFieldOperation::OAIFieldOperation() {
    this->initializeModel();
}

OAIFieldOperation::~OAIFieldOperation() {}

void OAIFieldOperation::initializeModel() {

    m_field_isSet = false;
    m_field_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIFieldOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFieldOperation::fromJsonObject(QJsonObject json) {

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIFieldOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFieldOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_field_isSet) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIFieldOperation::getField() const {
    return m_field;
}
void OAIFieldOperation::setField(const QString &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIFieldOperation::is_field_Set() const{
    return m_field_isSet;
}

bool OAIFieldOperation::is_field_Valid() const{
    return m_field_isValid;
}

QString OAIFieldOperation::getOperation() const {
    return m_operation;
}
void OAIFieldOperation::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIFieldOperation::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIFieldOperation::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIObject OAIFieldOperation::getValue() const {
    return m_value;
}
void OAIFieldOperation::setValue(const OAIObject &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIFieldOperation::is_value_Set() const{
    return m_value_isSet;
}

bool OAIFieldOperation::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIFieldOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFieldOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
