/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDerivedHoldingsSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDerivedHoldingsSummary::OAIDerivedHoldingsSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDerivedHoldingsSummary::OAIDerivedHoldingsSummary() {
    this->initializeModel();
}

OAIDerivedHoldingsSummary::~OAIDerivedHoldingsSummary() {}

void OAIDerivedHoldingsSummary::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_classification_type_isSet = false;
    m_classification_type_isValid = false;

    m_classification_value_isSet = false;
    m_classification_value_isValid = false;

    m_holding_isSet = false;
    m_holding_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIDerivedHoldingsSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDerivedHoldingsSummary::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_classification_type_isValid = ::OpenAPI::fromJsonValue(m_classification_type, json[QString("classificationType")]);
    m_classification_type_isSet = !json[QString("classificationType")].isNull() && m_classification_type_isValid;

    m_classification_value_isValid = ::OpenAPI::fromJsonValue(m_classification_value, json[QString("classificationValue")]);
    m_classification_value_isSet = !json[QString("classificationValue")].isNull() && m_classification_value_isValid;

    m_holding_isValid = ::OpenAPI::fromJsonValue(m_holding, json[QString("holding")]);
    m_holding_isSet = !json[QString("holding")].isNull() && m_holding_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIDerivedHoldingsSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDerivedHoldingsSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_account.size() > 0) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_classification_type_isSet) {
        obj.insert(QString("classificationType"), ::OpenAPI::toJsonValue(m_classification_type));
    }
    if (m_classification_value_isSet) {
        obj.insert(QString("classificationValue"), ::OpenAPI::toJsonValue(m_classification_value));
    }
    if (m_holding.size() > 0) {
        obj.insert(QString("holding"), ::OpenAPI::toJsonValue(m_holding));
    }
    if (m_value.isSet()) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QList<OAIDerivedHoldingsAccount> OAIDerivedHoldingsSummary::getAccount() const {
    return m_account;
}
void OAIDerivedHoldingsSummary::setAccount(const QList<OAIDerivedHoldingsAccount> &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIDerivedHoldingsSummary::is_account_Set() const{
    return m_account_isSet;
}

bool OAIDerivedHoldingsSummary::is_account_Valid() const{
    return m_account_isValid;
}

QString OAIDerivedHoldingsSummary::getClassificationType() const {
    return m_classification_type;
}
void OAIDerivedHoldingsSummary::setClassificationType(const QString &classification_type) {
    m_classification_type = classification_type;
    m_classification_type_isSet = true;
}

bool OAIDerivedHoldingsSummary::is_classification_type_Set() const{
    return m_classification_type_isSet;
}

bool OAIDerivedHoldingsSummary::is_classification_type_Valid() const{
    return m_classification_type_isValid;
}

QString OAIDerivedHoldingsSummary::getClassificationValue() const {
    return m_classification_value;
}
void OAIDerivedHoldingsSummary::setClassificationValue(const QString &classification_value) {
    m_classification_value = classification_value;
    m_classification_value_isSet = true;
}

bool OAIDerivedHoldingsSummary::is_classification_value_Set() const{
    return m_classification_value_isSet;
}

bool OAIDerivedHoldingsSummary::is_classification_value_Valid() const{
    return m_classification_value_isValid;
}

QList<OAIDerivedHolding> OAIDerivedHoldingsSummary::getHolding() const {
    return m_holding;
}
void OAIDerivedHoldingsSummary::setHolding(const QList<OAIDerivedHolding> &holding) {
    m_holding = holding;
    m_holding_isSet = true;
}

bool OAIDerivedHoldingsSummary::is_holding_Set() const{
    return m_holding_isSet;
}

bool OAIDerivedHoldingsSummary::is_holding_Valid() const{
    return m_holding_isValid;
}

OAIMoney OAIDerivedHoldingsSummary::getValue() const {
    return m_value;
}
void OAIDerivedHoldingsSummary::setValue(const OAIMoney &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIDerivedHoldingsSummary::is_value_Set() const{
    return m_value_isSet;
}

bool OAIDerivedHoldingsSummary::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIDerivedHoldingsSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_classification_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classification_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holding.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDerivedHoldingsSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
