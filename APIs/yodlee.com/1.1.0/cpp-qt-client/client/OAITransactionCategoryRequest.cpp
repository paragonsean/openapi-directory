/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionCategoryRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionCategoryRequest::OAITransactionCategoryRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionCategoryRequest::OAITransactionCategoryRequest() {
    this->initializeModel();
}

OAITransactionCategoryRequest::~OAITransactionCategoryRequest() {}

void OAITransactionCategoryRequest::initializeModel() {

    m_category_name_isSet = false;
    m_category_name_isValid = false;

    m_parent_category_id_isSet = false;
    m_parent_category_id_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAITransactionCategoryRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactionCategoryRequest::fromJsonObject(QJsonObject json) {

    m_category_name_isValid = ::OpenAPI::fromJsonValue(m_category_name, json[QString("categoryName")]);
    m_category_name_isSet = !json[QString("categoryName")].isNull() && m_category_name_isValid;

    m_parent_category_id_isValid = ::OpenAPI::fromJsonValue(m_parent_category_id, json[QString("parentCategoryId")]);
    m_parent_category_id_isSet = !json[QString("parentCategoryId")].isNull() && m_parent_category_id_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAITransactionCategoryRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactionCategoryRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_category_name_isSet) {
        obj.insert(QString("categoryName"), ::OpenAPI::toJsonValue(m_category_name));
    }
    if (m_parent_category_id_isSet) {
        obj.insert(QString("parentCategoryId"), ::OpenAPI::toJsonValue(m_parent_category_id));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QString OAITransactionCategoryRequest::getCategoryName() const {
    return m_category_name;
}
void OAITransactionCategoryRequest::setCategoryName(const QString &category_name) {
    m_category_name = category_name;
    m_category_name_isSet = true;
}

bool OAITransactionCategoryRequest::is_category_name_Set() const{
    return m_category_name_isSet;
}

bool OAITransactionCategoryRequest::is_category_name_Valid() const{
    return m_category_name_isValid;
}

qint32 OAITransactionCategoryRequest::getParentCategoryId() const {
    return m_parent_category_id;
}
void OAITransactionCategoryRequest::setParentCategoryId(const qint32 &parent_category_id) {
    m_parent_category_id = parent_category_id;
    m_parent_category_id_isSet = true;
}

bool OAITransactionCategoryRequest::is_parent_category_id_Set() const{
    return m_parent_category_id_isSet;
}

bool OAITransactionCategoryRequest::is_parent_category_id_Valid() const{
    return m_parent_category_id_isValid;
}

QString OAITransactionCategoryRequest::getSource() const {
    return m_source;
}
void OAITransactionCategoryRequest::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAITransactionCategoryRequest::is_source_Set() const{
    return m_source_isSet;
}

bool OAITransactionCategoryRequest::is_source_Valid() const{
    return m_source_isValid;
}

bool OAITransactionCategoryRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactionCategoryRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_parent_category_id_isValid && true;
}

} // namespace OpenAPI
