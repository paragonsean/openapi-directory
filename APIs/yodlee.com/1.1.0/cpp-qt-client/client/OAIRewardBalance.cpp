/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRewardBalance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRewardBalance::OAIRewardBalance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRewardBalance::OAIRewardBalance() {
    this->initializeModel();
}

OAIRewardBalance::~OAIRewardBalance() {}

void OAIRewardBalance::initializeModel() {

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_balance_to_level_isSet = false;
    m_balance_to_level_isValid = false;

    m_balance_to_reward_isSet = false;
    m_balance_to_reward_isValid = false;

    m_balance_type_isSet = false;
    m_balance_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_expiry_date_isSet = false;
    m_expiry_date_isValid = false;

    m_units_isSet = false;
    m_units_isValid = false;
}

void OAIRewardBalance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRewardBalance::fromJsonObject(QJsonObject json) {

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_balance_to_level_isValid = ::OpenAPI::fromJsonValue(m_balance_to_level, json[QString("balanceToLevel")]);
    m_balance_to_level_isSet = !json[QString("balanceToLevel")].isNull() && m_balance_to_level_isValid;

    m_balance_to_reward_isValid = ::OpenAPI::fromJsonValue(m_balance_to_reward, json[QString("balanceToReward")]);
    m_balance_to_reward_isSet = !json[QString("balanceToReward")].isNull() && m_balance_to_reward_isValid;

    m_balance_type_isValid = ::OpenAPI::fromJsonValue(m_balance_type, json[QString("balanceType")]);
    m_balance_type_isSet = !json[QString("balanceType")].isNull() && m_balance_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_expiry_date, json[QString("expiryDate")]);
    m_expiry_date_isSet = !json[QString("expiryDate")].isNull() && m_expiry_date_isValid;

    m_units_isValid = ::OpenAPI::fromJsonValue(m_units, json[QString("units")]);
    m_units_isSet = !json[QString("units")].isNull() && m_units_isValid;
}

QString OAIRewardBalance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRewardBalance::asJsonObject() const {
    QJsonObject obj;
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_balance_to_level_isSet) {
        obj.insert(QString("balanceToLevel"), ::OpenAPI::toJsonValue(m_balance_to_level));
    }
    if (m_balance_to_reward_isSet) {
        obj.insert(QString("balanceToReward"), ::OpenAPI::toJsonValue(m_balance_to_reward));
    }
    if (m_balance_type_isSet) {
        obj.insert(QString("balanceType"), ::OpenAPI::toJsonValue(m_balance_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expiry_date_isSet) {
        obj.insert(QString("expiryDate"), ::OpenAPI::toJsonValue(m_expiry_date));
    }
    if (m_units_isSet) {
        obj.insert(QString("units"), ::OpenAPI::toJsonValue(m_units));
    }
    return obj;
}

double OAIRewardBalance::getBalance() const {
    return m_balance;
}
void OAIRewardBalance::setBalance(const double &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAIRewardBalance::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAIRewardBalance::is_balance_Valid() const{
    return m_balance_isValid;
}

QString OAIRewardBalance::getBalanceToLevel() const {
    return m_balance_to_level;
}
void OAIRewardBalance::setBalanceToLevel(const QString &balance_to_level) {
    m_balance_to_level = balance_to_level;
    m_balance_to_level_isSet = true;
}

bool OAIRewardBalance::is_balance_to_level_Set() const{
    return m_balance_to_level_isSet;
}

bool OAIRewardBalance::is_balance_to_level_Valid() const{
    return m_balance_to_level_isValid;
}

QString OAIRewardBalance::getBalanceToReward() const {
    return m_balance_to_reward;
}
void OAIRewardBalance::setBalanceToReward(const QString &balance_to_reward) {
    m_balance_to_reward = balance_to_reward;
    m_balance_to_reward_isSet = true;
}

bool OAIRewardBalance::is_balance_to_reward_Set() const{
    return m_balance_to_reward_isSet;
}

bool OAIRewardBalance::is_balance_to_reward_Valid() const{
    return m_balance_to_reward_isValid;
}

QString OAIRewardBalance::getBalanceType() const {
    return m_balance_type;
}
void OAIRewardBalance::setBalanceType(const QString &balance_type) {
    m_balance_type = balance_type;
    m_balance_type_isSet = true;
}

bool OAIRewardBalance::is_balance_type_Set() const{
    return m_balance_type_isSet;
}

bool OAIRewardBalance::is_balance_type_Valid() const{
    return m_balance_type_isValid;
}

QString OAIRewardBalance::getDescription() const {
    return m_description;
}
void OAIRewardBalance::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRewardBalance::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRewardBalance::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRewardBalance::getExpiryDate() const {
    return m_expiry_date;
}
void OAIRewardBalance::setExpiryDate(const QString &expiry_date) {
    m_expiry_date = expiry_date;
    m_expiry_date_isSet = true;
}

bool OAIRewardBalance::is_expiry_date_Set() const{
    return m_expiry_date_isSet;
}

bool OAIRewardBalance::is_expiry_date_Valid() const{
    return m_expiry_date_isValid;
}

QString OAIRewardBalance::getUnits() const {
    return m_units;
}
void OAIRewardBalance::setUnits(const QString &units) {
    m_units = units;
    m_units_isSet = true;
}

bool OAIRewardBalance::is_units_Set() const{
    return m_units_isSet;
}

bool OAIRewardBalance::is_units_Valid() const{
    return m_units_isValid;
}

bool OAIRewardBalance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_to_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_to_reward_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_units_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRewardBalance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
