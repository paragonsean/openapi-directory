/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetClassificationList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetClassificationList::OAIAssetClassificationList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetClassificationList::OAIAssetClassificationList() {
    this->initializeModel();
}

OAIAssetClassificationList::~OAIAssetClassificationList() {}

void OAIAssetClassificationList::initializeModel() {

    m_classification_type_isSet = false;
    m_classification_type_isValid = false;

    m_classification_value_isSet = false;
    m_classification_value_isValid = false;
}

void OAIAssetClassificationList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetClassificationList::fromJsonObject(QJsonObject json) {

    m_classification_type_isValid = ::OpenAPI::fromJsonValue(m_classification_type, json[QString("classificationType")]);
    m_classification_type_isSet = !json[QString("classificationType")].isNull() && m_classification_type_isValid;

    m_classification_value_isValid = ::OpenAPI::fromJsonValue(m_classification_value, json[QString("classificationValue")]);
    m_classification_value_isSet = !json[QString("classificationValue")].isNull() && m_classification_value_isValid;
}

QString OAIAssetClassificationList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetClassificationList::asJsonObject() const {
    QJsonObject obj;
    if (m_classification_type_isSet) {
        obj.insert(QString("classificationType"), ::OpenAPI::toJsonValue(m_classification_type));
    }
    if (m_classification_value.size() > 0) {
        obj.insert(QString("classificationValue"), ::OpenAPI::toJsonValue(m_classification_value));
    }
    return obj;
}

QString OAIAssetClassificationList::getClassificationType() const {
    return m_classification_type;
}
void OAIAssetClassificationList::setClassificationType(const QString &classification_type) {
    m_classification_type = classification_type;
    m_classification_type_isSet = true;
}

bool OAIAssetClassificationList::is_classification_type_Set() const{
    return m_classification_type_isSet;
}

bool OAIAssetClassificationList::is_classification_type_Valid() const{
    return m_classification_type_isValid;
}

QList<QString> OAIAssetClassificationList::getClassificationValue() const {
    return m_classification_value;
}
void OAIAssetClassificationList::setClassificationValue(const QList<QString> &classification_value) {
    m_classification_value = classification_value;
    m_classification_value_isSet = true;
}

bool OAIAssetClassificationList::is_classification_value_Set() const{
    return m_classification_value_isSet;
}

bool OAIAssetClassificationList::is_classification_value_Valid() const{
    return m_classification_value_isValid;
}

bool OAIAssetClassificationList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_classification_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classification_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetClassificationList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
