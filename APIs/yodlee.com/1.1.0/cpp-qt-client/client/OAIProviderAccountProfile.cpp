/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProviderAccountProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProviderAccountProfile::OAIProviderAccountProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProviderAccountProfile::OAIProviderAccountProfile() {
    this->initializeModel();
}

OAIProviderAccountProfile::~OAIProviderAccountProfile() {}

void OAIProviderAccountProfile::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_profile_isSet = false;
    m_profile_isValid = false;
}

void OAIProviderAccountProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProviderAccountProfile::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_profile_isValid = ::OpenAPI::fromJsonValue(m_profile, json[QString("profile")]);
    m_profile_isSet = !json[QString("profile")].isNull() && m_profile_isValid;
}

QString OAIProviderAccountProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProviderAccountProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_profile.size() > 0) {
        obj.insert(QString("profile"), ::OpenAPI::toJsonValue(m_profile));
    }
    return obj;
}

qint64 OAIProviderAccountProfile::getId() const {
    return m_id;
}
void OAIProviderAccountProfile::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProviderAccountProfile::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProviderAccountProfile::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIProfile> OAIProviderAccountProfile::getProfile() const {
    return m_profile;
}
void OAIProviderAccountProfile::setProfile(const QList<OAIProfile> &profile) {
    m_profile = profile;
    m_profile_isSet = true;
}

bool OAIProviderAccountProfile::is_profile_Set() const{
    return m_profile_isSet;
}

bool OAIProviderAccountProfile::is_profile_Valid() const{
    return m_profile_isValid;
}

bool OAIProviderAccountProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProviderAccountProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
