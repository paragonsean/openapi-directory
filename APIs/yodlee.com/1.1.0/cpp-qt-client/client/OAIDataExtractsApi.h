/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDataExtractsApi_H
#define OAI_OAIDataExtractsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDataExtractsEventResponse.h"
#include "OAIDataExtractsUserDataResponse.h"
#include "OAIYodleeError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDataExtractsApi : public QObject {
    Q_OBJECT

public:
    OAIDataExtractsApi(const int timeOut = 0);
    ~OAIDataExtractsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  event_name QString [required]
    * @param[in]  from_date QString [required]
    * @param[in]  to_date QString [required]
    */
    virtual void getDataExtractsEvents(const QString &event_name, const QString &from_date, const QString &to_date);

    /**
    * @param[in]  from_date QString [required]
    * @param[in]  login_name QString [required]
    * @param[in]  to_date QString [required]
    */
    virtual void getDataExtractsUserData(const QString &from_date, const QString &login_name, const QString &to_date);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getDataExtractsEventsCallback(OAIHttpRequestWorker *worker);
    void getDataExtractsUserDataCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getDataExtractsEventsSignal(OAIDataExtractsEventResponse summary);
    void getDataExtractsUserDataSignal(OAIDataExtractsUserDataResponse summary);


    void getDataExtractsEventsSignalFull(OAIHttpRequestWorker *worker, OAIDataExtractsEventResponse summary);
    void getDataExtractsUserDataSignalFull(OAIHttpRequestWorker *worker, OAIDataExtractsUserDataResponse summary);

    Q_DECL_DEPRECATED_X("Use getDataExtractsEventsSignalError() instead")
    void getDataExtractsEventsSignalE(OAIDataExtractsEventResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDataExtractsEventsSignalError(OAIDataExtractsEventResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDataExtractsUserDataSignalError() instead")
    void getDataExtractsUserDataSignalE(OAIDataExtractsUserDataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDataExtractsUserDataSignalError(OAIDataExtractsUserDataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getDataExtractsEventsSignalErrorFull() instead")
    void getDataExtractsEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDataExtractsEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDataExtractsUserDataSignalErrorFull() instead")
    void getDataExtractsUserDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDataExtractsUserDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
