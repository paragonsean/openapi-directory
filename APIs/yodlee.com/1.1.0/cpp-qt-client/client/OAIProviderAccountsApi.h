/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProviderAccountsApi_H
#define OAI_OAIProviderAccountsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIProviderAccountDetailResponse.h"
#include "OAIProviderAccountPreferencesRequest.h"
#include "OAIProviderAccountRequest.h"
#include "OAIProviderAccountResponse.h"
#include "OAIProviderAccountUserProfileResponse.h"
#include "OAIUpdatedProviderAccountResponse.h"
#include "OAIYodleeError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProviderAccountsApi : public QObject {
    Q_OBJECT

public:
    OAIProviderAccountsApi(const int timeOut = 0);
    ~OAIProviderAccountsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  provider_account_id qint64 [required]
    */
    virtual void deleteProviderAccount(const qint64 &provider_account_id);

    /**
    * @param[in]  provider_account_ids QString [required]
    * @param[in]  oai_provider_account_request OAIProviderAccountRequest [optional]
    */
    virtual void editCredentialsOrRefreshProviderAccount(const QString &provider_account_ids, const ::OpenAPI::OptionalParam<OAIProviderAccountRequest> &oai_provider_account_request = ::OpenAPI::OptionalParam<OAIProviderAccountRequest>());

    /**
    * @param[in]  include QString [optional]
    * @param[in]  provider_ids QString [optional]
    */
    virtual void getAllProviderAccounts(const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &provider_ids = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  provider_account_id qint64 [required]
    * @param[in]  include QString [optional]
    * @param[in]  request_id QString [optional]
    */
    virtual void getProviderAccount(const qint64 &provider_account_id, const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &request_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  provider_account_id QString [optional]
    */
    virtual void getProviderAccountProfiles(const ::OpenAPI::OptionalParam<QString> &provider_account_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  provider_account_id qint64 [required]
    * @param[in]  oai_provider_account_preferences_request OAIProviderAccountPreferencesRequest [required]
    */
    virtual void updatePreferences(const qint64 &provider_account_id, const OAIProviderAccountPreferencesRequest &oai_provider_account_preferences_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteProviderAccountCallback(OAIHttpRequestWorker *worker);
    void editCredentialsOrRefreshProviderAccountCallback(OAIHttpRequestWorker *worker);
    void getAllProviderAccountsCallback(OAIHttpRequestWorker *worker);
    void getProviderAccountCallback(OAIHttpRequestWorker *worker);
    void getProviderAccountProfilesCallback(OAIHttpRequestWorker *worker);
    void updatePreferencesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteProviderAccountSignal();
    void editCredentialsOrRefreshProviderAccountSignal(OAIUpdatedProviderAccountResponse summary);
    void getAllProviderAccountsSignal(OAIProviderAccountResponse summary);
    void getProviderAccountSignal(OAIProviderAccountDetailResponse summary);
    void getProviderAccountProfilesSignal(OAIProviderAccountUserProfileResponse summary);
    void updatePreferencesSignal();


    void deleteProviderAccountSignalFull(OAIHttpRequestWorker *worker);
    void editCredentialsOrRefreshProviderAccountSignalFull(OAIHttpRequestWorker *worker, OAIUpdatedProviderAccountResponse summary);
    void getAllProviderAccountsSignalFull(OAIHttpRequestWorker *worker, OAIProviderAccountResponse summary);
    void getProviderAccountSignalFull(OAIHttpRequestWorker *worker, OAIProviderAccountDetailResponse summary);
    void getProviderAccountProfilesSignalFull(OAIHttpRequestWorker *worker, OAIProviderAccountUserProfileResponse summary);
    void updatePreferencesSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteProviderAccountSignalError() instead")
    void deleteProviderAccountSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProviderAccountSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editCredentialsOrRefreshProviderAccountSignalError() instead")
    void editCredentialsOrRefreshProviderAccountSignalE(OAIUpdatedProviderAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editCredentialsOrRefreshProviderAccountSignalError(OAIUpdatedProviderAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllProviderAccountsSignalError() instead")
    void getAllProviderAccountsSignalE(OAIProviderAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllProviderAccountsSignalError(OAIProviderAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProviderAccountSignalError() instead")
    void getProviderAccountSignalE(OAIProviderAccountDetailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProviderAccountSignalError(OAIProviderAccountDetailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProviderAccountProfilesSignalError() instead")
    void getProviderAccountProfilesSignalE(OAIProviderAccountUserProfileResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProviderAccountProfilesSignalError(OAIProviderAccountUserProfileResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePreferencesSignalError() instead")
    void updatePreferencesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updatePreferencesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteProviderAccountSignalErrorFull() instead")
    void deleteProviderAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProviderAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editCredentialsOrRefreshProviderAccountSignalErrorFull() instead")
    void editCredentialsOrRefreshProviderAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editCredentialsOrRefreshProviderAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllProviderAccountsSignalErrorFull() instead")
    void getAllProviderAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllProviderAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProviderAccountSignalErrorFull() instead")
    void getProviderAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProviderAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProviderAccountProfilesSignalErrorFull() instead")
    void getProviderAccountProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProviderAccountProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePreferencesSignalErrorFull() instead")
    void updatePreferencesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePreferencesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
