/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerificationBankTransferCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerificationBankTransferCode::OAIVerificationBankTransferCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerificationBankTransferCode::OAIVerificationBankTransferCode() {
    this->initializeModel();
}

OAIVerificationBankTransferCode::~OAIVerificationBankTransferCode() {}

void OAIVerificationBankTransferCode::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIVerificationBankTransferCode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerificationBankTransferCode::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIVerificationBankTransferCode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerificationBankTransferCode::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIVerificationBankTransferCode::getId() const {
    return m_id;
}
void OAIVerificationBankTransferCode::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVerificationBankTransferCode::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVerificationBankTransferCode::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIVerificationBankTransferCode::getType() const {
    return m_type;
}
void OAIVerificationBankTransferCode::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIVerificationBankTransferCode::is_type_Set() const{
    return m_type_isSet;
}

bool OAIVerificationBankTransferCode::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIVerificationBankTransferCode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerificationBankTransferCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
