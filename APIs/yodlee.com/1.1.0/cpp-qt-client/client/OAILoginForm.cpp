/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoginForm.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoginForm::OAILoginForm(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoginForm::OAILoginForm() {
    this->initializeModel();
}

OAILoginForm::~OAILoginForm() {}

void OAILoginForm::initializeModel() {

    m_forget_password_url_isSet = false;
    m_forget_password_url_isValid = false;

    m_form_type_isSet = false;
    m_form_type_isValid = false;

    m_help_isSet = false;
    m_help_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_login_help_isSet = false;
    m_login_help_isValid = false;

    m_mfa_info_text_isSet = false;
    m_mfa_info_text_isValid = false;

    m_mfa_info_title_isSet = false;
    m_mfa_info_title_isValid = false;

    m_mfa_timeout_isSet = false;
    m_mfa_timeout_isValid = false;

    m_row_isSet = false;
    m_row_isValid = false;
}

void OAILoginForm::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoginForm::fromJsonObject(QJsonObject json) {

    m_forget_password_url_isValid = ::OpenAPI::fromJsonValue(m_forget_password_url, json[QString("forgetPasswordURL")]);
    m_forget_password_url_isSet = !json[QString("forgetPasswordURL")].isNull() && m_forget_password_url_isValid;

    m_form_type_isValid = ::OpenAPI::fromJsonValue(m_form_type, json[QString("formType")]);
    m_form_type_isSet = !json[QString("formType")].isNull() && m_form_type_isValid;

    m_help_isValid = ::OpenAPI::fromJsonValue(m_help, json[QString("help")]);
    m_help_isSet = !json[QString("help")].isNull() && m_help_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_login_help_isValid = ::OpenAPI::fromJsonValue(m_login_help, json[QString("loginHelp")]);
    m_login_help_isSet = !json[QString("loginHelp")].isNull() && m_login_help_isValid;

    m_mfa_info_text_isValid = ::OpenAPI::fromJsonValue(m_mfa_info_text, json[QString("mfaInfoText")]);
    m_mfa_info_text_isSet = !json[QString("mfaInfoText")].isNull() && m_mfa_info_text_isValid;

    m_mfa_info_title_isValid = ::OpenAPI::fromJsonValue(m_mfa_info_title, json[QString("mfaInfoTitle")]);
    m_mfa_info_title_isSet = !json[QString("mfaInfoTitle")].isNull() && m_mfa_info_title_isValid;

    m_mfa_timeout_isValid = ::OpenAPI::fromJsonValue(m_mfa_timeout, json[QString("mfaTimeout")]);
    m_mfa_timeout_isSet = !json[QString("mfaTimeout")].isNull() && m_mfa_timeout_isValid;

    m_row_isValid = ::OpenAPI::fromJsonValue(m_row, json[QString("row")]);
    m_row_isSet = !json[QString("row")].isNull() && m_row_isValid;
}

QString OAILoginForm::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoginForm::asJsonObject() const {
    QJsonObject obj;
    if (m_forget_password_url_isSet) {
        obj.insert(QString("forgetPasswordURL"), ::OpenAPI::toJsonValue(m_forget_password_url));
    }
    if (m_form_type_isSet) {
        obj.insert(QString("formType"), ::OpenAPI::toJsonValue(m_form_type));
    }
    if (m_help_isSet) {
        obj.insert(QString("help"), ::OpenAPI::toJsonValue(m_help));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_login_help_isSet) {
        obj.insert(QString("loginHelp"), ::OpenAPI::toJsonValue(m_login_help));
    }
    if (m_mfa_info_text_isSet) {
        obj.insert(QString("mfaInfoText"), ::OpenAPI::toJsonValue(m_mfa_info_text));
    }
    if (m_mfa_info_title_isSet) {
        obj.insert(QString("mfaInfoTitle"), ::OpenAPI::toJsonValue(m_mfa_info_title));
    }
    if (m_mfa_timeout_isSet) {
        obj.insert(QString("mfaTimeout"), ::OpenAPI::toJsonValue(m_mfa_timeout));
    }
    if (m_row.size() > 0) {
        obj.insert(QString("row"), ::OpenAPI::toJsonValue(m_row));
    }
    return obj;
}

QString OAILoginForm::getForgetPasswordUrl() const {
    return m_forget_password_url;
}
void OAILoginForm::setForgetPasswordUrl(const QString &forget_password_url) {
    m_forget_password_url = forget_password_url;
    m_forget_password_url_isSet = true;
}

bool OAILoginForm::is_forget_password_url_Set() const{
    return m_forget_password_url_isSet;
}

bool OAILoginForm::is_forget_password_url_Valid() const{
    return m_forget_password_url_isValid;
}

QString OAILoginForm::getFormType() const {
    return m_form_type;
}
void OAILoginForm::setFormType(const QString &form_type) {
    m_form_type = form_type;
    m_form_type_isSet = true;
}

bool OAILoginForm::is_form_type_Set() const{
    return m_form_type_isSet;
}

bool OAILoginForm::is_form_type_Valid() const{
    return m_form_type_isValid;
}

QString OAILoginForm::getHelp() const {
    return m_help;
}
void OAILoginForm::setHelp(const QString &help) {
    m_help = help;
    m_help_isSet = true;
}

bool OAILoginForm::is_help_Set() const{
    return m_help_isSet;
}

bool OAILoginForm::is_help_Valid() const{
    return m_help_isValid;
}

qint64 OAILoginForm::getId() const {
    return m_id;
}
void OAILoginForm::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILoginForm::is_id_Set() const{
    return m_id_isSet;
}

bool OAILoginForm::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILoginForm::getLoginHelp() const {
    return m_login_help;
}
void OAILoginForm::setLoginHelp(const QString &login_help) {
    m_login_help = login_help;
    m_login_help_isSet = true;
}

bool OAILoginForm::is_login_help_Set() const{
    return m_login_help_isSet;
}

bool OAILoginForm::is_login_help_Valid() const{
    return m_login_help_isValid;
}

QString OAILoginForm::getMfaInfoText() const {
    return m_mfa_info_text;
}
void OAILoginForm::setMfaInfoText(const QString &mfa_info_text) {
    m_mfa_info_text = mfa_info_text;
    m_mfa_info_text_isSet = true;
}

bool OAILoginForm::is_mfa_info_text_Set() const{
    return m_mfa_info_text_isSet;
}

bool OAILoginForm::is_mfa_info_text_Valid() const{
    return m_mfa_info_text_isValid;
}

QString OAILoginForm::getMfaInfoTitle() const {
    return m_mfa_info_title;
}
void OAILoginForm::setMfaInfoTitle(const QString &mfa_info_title) {
    m_mfa_info_title = mfa_info_title;
    m_mfa_info_title_isSet = true;
}

bool OAILoginForm::is_mfa_info_title_Set() const{
    return m_mfa_info_title_isSet;
}

bool OAILoginForm::is_mfa_info_title_Valid() const{
    return m_mfa_info_title_isValid;
}

qint64 OAILoginForm::getMfaTimeout() const {
    return m_mfa_timeout;
}
void OAILoginForm::setMfaTimeout(const qint64 &mfa_timeout) {
    m_mfa_timeout = mfa_timeout;
    m_mfa_timeout_isSet = true;
}

bool OAILoginForm::is_mfa_timeout_Set() const{
    return m_mfa_timeout_isSet;
}

bool OAILoginForm::is_mfa_timeout_Valid() const{
    return m_mfa_timeout_isValid;
}

QList<OAIRow> OAILoginForm::getRow() const {
    return m_row;
}
void OAILoginForm::setRow(const QList<OAIRow> &row) {
    m_row = row;
    m_row_isSet = true;
}

bool OAILoginForm::is_row_Set() const{
    return m_row_isSet;
}

bool OAILoginForm::is_row_Valid() const{
    return m_row_isValid;
}

bool OAILoginForm::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_forget_password_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_help_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_help_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mfa_info_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mfa_info_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mfa_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoginForm::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
