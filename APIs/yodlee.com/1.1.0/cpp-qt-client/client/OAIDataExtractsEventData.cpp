/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataExtractsEventData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataExtractsEventData::OAIDataExtractsEventData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataExtractsEventData::OAIDataExtractsEventData() {
    this->initializeModel();
}

OAIDataExtractsEventData::~OAIDataExtractsEventData() {}

void OAIDataExtractsEventData::initializeModel() {

    m_from_date_isSet = false;
    m_from_date_isValid = false;

    m_to_date_isSet = false;
    m_to_date_isValid = false;

    m_user_count_isSet = false;
    m_user_count_isValid = false;

    m_user_data_isSet = false;
    m_user_data_isValid = false;
}

void OAIDataExtractsEventData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataExtractsEventData::fromJsonObject(QJsonObject json) {

    m_from_date_isValid = ::OpenAPI::fromJsonValue(m_from_date, json[QString("fromDate")]);
    m_from_date_isSet = !json[QString("fromDate")].isNull() && m_from_date_isValid;

    m_to_date_isValid = ::OpenAPI::fromJsonValue(m_to_date, json[QString("toDate")]);
    m_to_date_isSet = !json[QString("toDate")].isNull() && m_to_date_isValid;

    m_user_count_isValid = ::OpenAPI::fromJsonValue(m_user_count, json[QString("userCount")]);
    m_user_count_isSet = !json[QString("userCount")].isNull() && m_user_count_isValid;

    m_user_data_isValid = ::OpenAPI::fromJsonValue(m_user_data, json[QString("userData")]);
    m_user_data_isSet = !json[QString("userData")].isNull() && m_user_data_isValid;
}

QString OAIDataExtractsEventData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataExtractsEventData::asJsonObject() const {
    QJsonObject obj;
    if (m_from_date_isSet) {
        obj.insert(QString("fromDate"), ::OpenAPI::toJsonValue(m_from_date));
    }
    if (m_to_date_isSet) {
        obj.insert(QString("toDate"), ::OpenAPI::toJsonValue(m_to_date));
    }
    if (m_user_count_isSet) {
        obj.insert(QString("userCount"), ::OpenAPI::toJsonValue(m_user_count));
    }
    if (m_user_data.size() > 0) {
        obj.insert(QString("userData"), ::OpenAPI::toJsonValue(m_user_data));
    }
    return obj;
}

QString OAIDataExtractsEventData::getFromDate() const {
    return m_from_date;
}
void OAIDataExtractsEventData::setFromDate(const QString &from_date) {
    m_from_date = from_date;
    m_from_date_isSet = true;
}

bool OAIDataExtractsEventData::is_from_date_Set() const{
    return m_from_date_isSet;
}

bool OAIDataExtractsEventData::is_from_date_Valid() const{
    return m_from_date_isValid;
}

QString OAIDataExtractsEventData::getToDate() const {
    return m_to_date;
}
void OAIDataExtractsEventData::setToDate(const QString &to_date) {
    m_to_date = to_date;
    m_to_date_isSet = true;
}

bool OAIDataExtractsEventData::is_to_date_Set() const{
    return m_to_date_isSet;
}

bool OAIDataExtractsEventData::is_to_date_Valid() const{
    return m_to_date_isValid;
}

qint32 OAIDataExtractsEventData::getUserCount() const {
    return m_user_count;
}
void OAIDataExtractsEventData::setUserCount(const qint32 &user_count) {
    m_user_count = user_count;
    m_user_count_isSet = true;
}

bool OAIDataExtractsEventData::is_user_count_Set() const{
    return m_user_count_isSet;
}

bool OAIDataExtractsEventData::is_user_count_Valid() const{
    return m_user_count_isValid;
}

QList<OAIDataExtractsEventUserData> OAIDataExtractsEventData::getUserData() const {
    return m_user_data;
}
void OAIDataExtractsEventData::setUserData(const QList<OAIDataExtractsEventUserData> &user_data) {
    m_user_data = user_data;
    m_user_data_isSet = true;
}

bool OAIDataExtractsEventData::is_user_data_Set() const{
    return m_user_data_isSet;
}

bool OAIDataExtractsEventData::is_user_data_Valid() const{
    return m_user_data_isValid;
}

bool OAIDataExtractsEventData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataExtractsEventData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
