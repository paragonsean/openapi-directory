/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAccountInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAccountInfo::OAIUpdateAccountInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAccountInfo::OAIUpdateAccountInfo() {
    this->initializeModel();
}

OAIUpdateAccountInfo::~OAIUpdateAccountInfo() {}

void OAIUpdateAccountInfo::initializeModel() {

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_account_number_isSet = false;
    m_account_number_isValid = false;

    m_account_status_isSet = false;
    m_account_status_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_amount_due_isSet = false;
    m_amount_due_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_container_isSet = false;
    m_container_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_home_value_isSet = false;
    m_home_value_isValid = false;

    m_include_in_net_worth_isSet = false;
    m_include_in_net_worth_isValid = false;

    m_is_ebill_enrolled_isSet = false;
    m_is_ebill_enrolled_isValid = false;

    m_memo_isSet = false;
    m_memo_isValid = false;

    m_nickname_isSet = false;
    m_nickname_isValid = false;
}

void OAIUpdateAccountInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAccountInfo::fromJsonObject(QJsonObject json) {

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_account_number_isValid = ::OpenAPI::fromJsonValue(m_account_number, json[QString("accountNumber")]);
    m_account_number_isSet = !json[QString("accountNumber")].isNull() && m_account_number_isValid;

    m_account_status_isValid = ::OpenAPI::fromJsonValue(m_account_status, json[QString("accountStatus")]);
    m_account_status_isSet = !json[QString("accountStatus")].isNull() && m_account_status_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_amount_due_isValid = ::OpenAPI::fromJsonValue(m_amount_due, json[QString("amountDue")]);
    m_amount_due_isSet = !json[QString("amountDue")].isNull() && m_amount_due_isValid;

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("container")]);
    m_container_isSet = !json[QString("container")].isNull() && m_container_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("dueDate")]);
    m_due_date_isSet = !json[QString("dueDate")].isNull() && m_due_date_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_home_value_isValid = ::OpenAPI::fromJsonValue(m_home_value, json[QString("homeValue")]);
    m_home_value_isSet = !json[QString("homeValue")].isNull() && m_home_value_isValid;

    m_include_in_net_worth_isValid = ::OpenAPI::fromJsonValue(m_include_in_net_worth, json[QString("includeInNetWorth")]);
    m_include_in_net_worth_isSet = !json[QString("includeInNetWorth")].isNull() && m_include_in_net_worth_isValid;

    m_is_ebill_enrolled_isValid = ::OpenAPI::fromJsonValue(m_is_ebill_enrolled, json[QString("isEbillEnrolled")]);
    m_is_ebill_enrolled_isSet = !json[QString("isEbillEnrolled")].isNull() && m_is_ebill_enrolled_isValid;

    m_memo_isValid = ::OpenAPI::fromJsonValue(m_memo, json[QString("memo")]);
    m_memo_isSet = !json[QString("memo")].isNull() && m_memo_isValid;

    m_nickname_isValid = ::OpenAPI::fromJsonValue(m_nickname, json[QString("nickname")]);
    m_nickname_isSet = !json[QString("nickname")].isNull() && m_nickname_isValid;
}

QString OAIUpdateAccountInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAccountInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_account_number_isSet) {
        obj.insert(QString("accountNumber"), ::OpenAPI::toJsonValue(m_account_number));
    }
    if (m_account_status_isSet) {
        obj.insert(QString("accountStatus"), ::OpenAPI::toJsonValue(m_account_status));
    }
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_amount_due.isSet()) {
        obj.insert(QString("amountDue"), ::OpenAPI::toJsonValue(m_amount_due));
    }
    if (m_balance.isSet()) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_container_isSet) {
        obj.insert(QString("container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("dueDate"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_home_value.isSet()) {
        obj.insert(QString("homeValue"), ::OpenAPI::toJsonValue(m_home_value));
    }
    if (m_include_in_net_worth_isSet) {
        obj.insert(QString("includeInNetWorth"), ::OpenAPI::toJsonValue(m_include_in_net_worth));
    }
    if (m_is_ebill_enrolled_isSet) {
        obj.insert(QString("isEbillEnrolled"), ::OpenAPI::toJsonValue(m_is_ebill_enrolled));
    }
    if (m_memo_isSet) {
        obj.insert(QString("memo"), ::OpenAPI::toJsonValue(m_memo));
    }
    if (m_nickname_isSet) {
        obj.insert(QString("nickname"), ::OpenAPI::toJsonValue(m_nickname));
    }
    return obj;
}

QString OAIUpdateAccountInfo::getAccountName() const {
    return m_account_name;
}
void OAIUpdateAccountInfo::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIUpdateAccountInfo::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIUpdateAccountInfo::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAIUpdateAccountInfo::getAccountNumber() const {
    return m_account_number;
}
void OAIUpdateAccountInfo::setAccountNumber(const QString &account_number) {
    m_account_number = account_number;
    m_account_number_isSet = true;
}

bool OAIUpdateAccountInfo::is_account_number_Set() const{
    return m_account_number_isSet;
}

bool OAIUpdateAccountInfo::is_account_number_Valid() const{
    return m_account_number_isValid;
}

QString OAIUpdateAccountInfo::getAccountStatus() const {
    return m_account_status;
}
void OAIUpdateAccountInfo::setAccountStatus(const QString &account_status) {
    m_account_status = account_status;
    m_account_status_isSet = true;
}

bool OAIUpdateAccountInfo::is_account_status_Set() const{
    return m_account_status_isSet;
}

bool OAIUpdateAccountInfo::is_account_status_Valid() const{
    return m_account_status_isValid;
}

OAIAccountAddress OAIUpdateAccountInfo::getAddress() const {
    return m_address;
}
void OAIUpdateAccountInfo::setAddress(const OAIAccountAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIUpdateAccountInfo::is_address_Set() const{
    return m_address_isSet;
}

bool OAIUpdateAccountInfo::is_address_Valid() const{
    return m_address_isValid;
}

OAIMoney OAIUpdateAccountInfo::getAmountDue() const {
    return m_amount_due;
}
void OAIUpdateAccountInfo::setAmountDue(const OAIMoney &amount_due) {
    m_amount_due = amount_due;
    m_amount_due_isSet = true;
}

bool OAIUpdateAccountInfo::is_amount_due_Set() const{
    return m_amount_due_isSet;
}

bool OAIUpdateAccountInfo::is_amount_due_Valid() const{
    return m_amount_due_isValid;
}

OAIMoney OAIUpdateAccountInfo::getBalance() const {
    return m_balance;
}
void OAIUpdateAccountInfo::setBalance(const OAIMoney &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAIUpdateAccountInfo::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAIUpdateAccountInfo::is_balance_Valid() const{
    return m_balance_isValid;
}

QString OAIUpdateAccountInfo::getContainer() const {
    return m_container;
}
void OAIUpdateAccountInfo::setContainer(const QString &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAIUpdateAccountInfo::is_container_Set() const{
    return m_container_isSet;
}

bool OAIUpdateAccountInfo::is_container_Valid() const{
    return m_container_isValid;
}

QString OAIUpdateAccountInfo::getDueDate() const {
    return m_due_date;
}
void OAIUpdateAccountInfo::setDueDate(const QString &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIUpdateAccountInfo::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIUpdateAccountInfo::is_due_date_Valid() const{
    return m_due_date_isValid;
}

QString OAIUpdateAccountInfo::getFrequency() const {
    return m_frequency;
}
void OAIUpdateAccountInfo::setFrequency(const QString &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIUpdateAccountInfo::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIUpdateAccountInfo::is_frequency_Valid() const{
    return m_frequency_isValid;
}

OAIMoney OAIUpdateAccountInfo::getHomeValue() const {
    return m_home_value;
}
void OAIUpdateAccountInfo::setHomeValue(const OAIMoney &home_value) {
    m_home_value = home_value;
    m_home_value_isSet = true;
}

bool OAIUpdateAccountInfo::is_home_value_Set() const{
    return m_home_value_isSet;
}

bool OAIUpdateAccountInfo::is_home_value_Valid() const{
    return m_home_value_isValid;
}

QString OAIUpdateAccountInfo::getIncludeInNetWorth() const {
    return m_include_in_net_worth;
}
void OAIUpdateAccountInfo::setIncludeInNetWorth(const QString &include_in_net_worth) {
    m_include_in_net_worth = include_in_net_worth;
    m_include_in_net_worth_isSet = true;
}

bool OAIUpdateAccountInfo::is_include_in_net_worth_Set() const{
    return m_include_in_net_worth_isSet;
}

bool OAIUpdateAccountInfo::is_include_in_net_worth_Valid() const{
    return m_include_in_net_worth_isValid;
}

QString OAIUpdateAccountInfo::getIsEbillEnrolled() const {
    return m_is_ebill_enrolled;
}
void OAIUpdateAccountInfo::setIsEbillEnrolled(const QString &is_ebill_enrolled) {
    m_is_ebill_enrolled = is_ebill_enrolled;
    m_is_ebill_enrolled_isSet = true;
}

bool OAIUpdateAccountInfo::is_is_ebill_enrolled_Set() const{
    return m_is_ebill_enrolled_isSet;
}

bool OAIUpdateAccountInfo::is_is_ebill_enrolled_Valid() const{
    return m_is_ebill_enrolled_isValid;
}

QString OAIUpdateAccountInfo::getMemo() const {
    return m_memo;
}
void OAIUpdateAccountInfo::setMemo(const QString &memo) {
    m_memo = memo;
    m_memo_isSet = true;
}

bool OAIUpdateAccountInfo::is_memo_Set() const{
    return m_memo_isSet;
}

bool OAIUpdateAccountInfo::is_memo_Valid() const{
    return m_memo_isValid;
}

QString OAIUpdateAccountInfo::getNickname() const {
    return m_nickname;
}
void OAIUpdateAccountInfo::setNickname(const QString &nickname) {
    m_nickname = nickname;
    m_nickname_isSet = true;
}

bool OAIUpdateAccountInfo::is_nickname_Set() const{
    return m_nickname_isSet;
}

bool OAIUpdateAccountInfo::is_nickname_Valid() const{
    return m_nickname_isValid;
}

bool OAIUpdateAccountInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_due.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_in_net_worth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_ebill_enrolled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nickname_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAccountInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
