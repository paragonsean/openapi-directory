/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDerivedNetworthHistoricalBalance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDerivedNetworthHistoricalBalance::OAIDerivedNetworthHistoricalBalance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDerivedNetworthHistoricalBalance::OAIDerivedNetworthHistoricalBalance() {
    this->initializeModel();
}

OAIDerivedNetworthHistoricalBalance::~OAIDerivedNetworthHistoricalBalance() {}

void OAIDerivedNetworthHistoricalBalance::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_as_of_date_isSet = false;
    m_as_of_date_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_data_source_type_isSet = false;
    m_data_source_type_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_is_asset_isSet = false;
    m_is_asset_isValid = false;
}

void OAIDerivedNetworthHistoricalBalance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDerivedNetworthHistoricalBalance::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_as_of_date_isValid = ::OpenAPI::fromJsonValue(m_as_of_date, json[QString("asOfDate")]);
    m_as_of_date_isSet = !json[QString("asOfDate")].isNull() && m_as_of_date_isValid;

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_data_source_type_isValid = ::OpenAPI::fromJsonValue(m_data_source_type, json[QString("dataSourceType")]);
    m_data_source_type_isSet = !json[QString("dataSourceType")].isNull() && m_data_source_type_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_is_asset_isValid = ::OpenAPI::fromJsonValue(m_is_asset, json[QString("isAsset")]);
    m_is_asset_isSet = !json[QString("isAsset")].isNull() && m_is_asset_isValid;
}

QString OAIDerivedNetworthHistoricalBalance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDerivedNetworthHistoricalBalance::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_as_of_date_isSet) {
        obj.insert(QString("asOfDate"), ::OpenAPI::toJsonValue(m_as_of_date));
    }
    if (m_balance.isSet()) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_data_source_type_isSet) {
        obj.insert(QString("dataSourceType"), ::OpenAPI::toJsonValue(m_data_source_type));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_is_asset_isSet) {
        obj.insert(QString("isAsset"), ::OpenAPI::toJsonValue(m_is_asset));
    }
    return obj;
}

qint64 OAIDerivedNetworthHistoricalBalance::getAccountId() const {
    return m_account_id;
}
void OAIDerivedNetworthHistoricalBalance::setAccountId(const qint64 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIDerivedNetworthHistoricalBalance::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIDerivedNetworthHistoricalBalance::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIDerivedNetworthHistoricalBalance::getAsOfDate() const {
    return m_as_of_date;
}
void OAIDerivedNetworthHistoricalBalance::setAsOfDate(const QString &as_of_date) {
    m_as_of_date = as_of_date;
    m_as_of_date_isSet = true;
}

bool OAIDerivedNetworthHistoricalBalance::is_as_of_date_Set() const{
    return m_as_of_date_isSet;
}

bool OAIDerivedNetworthHistoricalBalance::is_as_of_date_Valid() const{
    return m_as_of_date_isValid;
}

OAIMoney OAIDerivedNetworthHistoricalBalance::getBalance() const {
    return m_balance;
}
void OAIDerivedNetworthHistoricalBalance::setBalance(const OAIMoney &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAIDerivedNetworthHistoricalBalance::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAIDerivedNetworthHistoricalBalance::is_balance_Valid() const{
    return m_balance_isValid;
}

QString OAIDerivedNetworthHistoricalBalance::getDataSourceType() const {
    return m_data_source_type;
}
void OAIDerivedNetworthHistoricalBalance::setDataSourceType(const QString &data_source_type) {
    m_data_source_type = data_source_type;
    m_data_source_type_isSet = true;
}

bool OAIDerivedNetworthHistoricalBalance::is_data_source_type_Set() const{
    return m_data_source_type_isSet;
}

bool OAIDerivedNetworthHistoricalBalance::is_data_source_type_Valid() const{
    return m_data_source_type_isValid;
}

QString OAIDerivedNetworthHistoricalBalance::getDate() const {
    return m_date;
}
void OAIDerivedNetworthHistoricalBalance::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIDerivedNetworthHistoricalBalance::is_date_Set() const{
    return m_date_isSet;
}

bool OAIDerivedNetworthHistoricalBalance::is_date_Valid() const{
    return m_date_isValid;
}

bool OAIDerivedNetworthHistoricalBalance::isIsAsset() const {
    return m_is_asset;
}
void OAIDerivedNetworthHistoricalBalance::setIsAsset(const bool &is_asset) {
    m_is_asset = is_asset;
    m_is_asset_isSet = true;
}

bool OAIDerivedNetworthHistoricalBalance::is_is_asset_Set() const{
    return m_is_asset_isSet;
}

bool OAIDerivedNetworthHistoricalBalance::is_is_asset_Valid() const{
    return m_is_asset_isValid;
}

bool OAIDerivedNetworthHistoricalBalance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_as_of_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_asset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDerivedNetworthHistoricalBalance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
