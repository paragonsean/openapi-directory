/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICobrandApi_H
#define OAI_OAICobrandApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICobrandLoginRequest.h"
#include "OAICobrandLoginResponse.h"
#include "OAICobrandNotificationResponse.h"
#include "OAICobrandPublicKeyResponse.h"
#include "OAICreateCobrandNotificationEventRequest.h"
#include "OAIUpdateCobrandNotificationEventRequest.h"
#include "OAIYodleeError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICobrandApi : public QObject {
    Q_OBJECT

public:
    OAICobrandApi(const int timeOut = 0);
    ~OAICobrandApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_cobrand_login_request OAICobrandLoginRequest [required]
    */
    virtual void cobrandLogin(const OAICobrandLoginRequest &oai_cobrand_login_request);


    virtual void cobrandLogout();

    /**
    * @param[in]  event_name QString [required]
    * @param[in]  oai_create_cobrand_notification_event_request OAICreateCobrandNotificationEventRequest [required]
    */
    Q_DECL_DEPRECATED virtual void createSubscriptionEvent(const QString &event_name, const OAICreateCobrandNotificationEventRequest &oai_create_cobrand_notification_event_request);

    /**
    * @param[in]  event_name QString [required]
    */
    Q_DECL_DEPRECATED virtual void deleteSubscribedEvent(const QString &event_name);


    Q_DECL_DEPRECATED virtual void getPublicKey();

    /**
    * @param[in]  event_name QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getSubscribedEvents(const ::OpenAPI::OptionalParam<QString> &event_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_name QString [required]
    * @param[in]  oai_update_cobrand_notification_event_request OAIUpdateCobrandNotificationEventRequest [required]
    */
    Q_DECL_DEPRECATED virtual void updateSubscribedEvent(const QString &event_name, const OAIUpdateCobrandNotificationEventRequest &oai_update_cobrand_notification_event_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cobrandLoginCallback(OAIHttpRequestWorker *worker);
    void cobrandLogoutCallback(OAIHttpRequestWorker *worker);
    void createSubscriptionEventCallback(OAIHttpRequestWorker *worker);
    void deleteSubscribedEventCallback(OAIHttpRequestWorker *worker);
    void getPublicKeyCallback(OAIHttpRequestWorker *worker);
    void getSubscribedEventsCallback(OAIHttpRequestWorker *worker);
    void updateSubscribedEventCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cobrandLoginSignal(OAICobrandLoginResponse summary);
    void cobrandLogoutSignal();
    void createSubscriptionEventSignal();
    void deleteSubscribedEventSignal();
    void getPublicKeySignal(OAICobrandPublicKeyResponse summary);
    void getSubscribedEventsSignal(OAICobrandNotificationResponse summary);
    void updateSubscribedEventSignal();


    void cobrandLoginSignalFull(OAIHttpRequestWorker *worker, OAICobrandLoginResponse summary);
    void cobrandLogoutSignalFull(OAIHttpRequestWorker *worker);
    void createSubscriptionEventSignalFull(OAIHttpRequestWorker *worker);
    void deleteSubscribedEventSignalFull(OAIHttpRequestWorker *worker);
    void getPublicKeySignalFull(OAIHttpRequestWorker *worker, OAICobrandPublicKeyResponse summary);
    void getSubscribedEventsSignalFull(OAIHttpRequestWorker *worker, OAICobrandNotificationResponse summary);
    void updateSubscribedEventSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use cobrandLoginSignalError() instead")
    void cobrandLoginSignalE(OAICobrandLoginResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cobrandLoginSignalError(OAICobrandLoginResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cobrandLogoutSignalError() instead")
    void cobrandLogoutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cobrandLogoutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSubscriptionEventSignalError() instead")
    void createSubscriptionEventSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createSubscriptionEventSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSubscribedEventSignalError() instead")
    void deleteSubscribedEventSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSubscribedEventSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicKeySignalError() instead")
    void getPublicKeySignalE(OAICobrandPublicKeyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicKeySignalError(OAICobrandPublicKeyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubscribedEventsSignalError() instead")
    void getSubscribedEventsSignalE(OAICobrandNotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubscribedEventsSignalError(OAICobrandNotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSubscribedEventSignalError() instead")
    void updateSubscribedEventSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateSubscribedEventSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cobrandLoginSignalErrorFull() instead")
    void cobrandLoginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cobrandLoginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cobrandLogoutSignalErrorFull() instead")
    void cobrandLogoutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cobrandLogoutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSubscriptionEventSignalErrorFull() instead")
    void createSubscriptionEventSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSubscriptionEventSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSubscribedEventSignalErrorFull() instead")
    void deleteSubscribedEventSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSubscribedEventSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicKeySignalErrorFull() instead")
    void getPublicKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubscribedEventsSignalErrorFull() instead")
    void getSubscribedEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubscribedEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSubscribedEventSignalErrorFull() instead")
    void updateSubscribedEventSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSubscribedEventSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
