/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVerificationApi_H
#define OAI_OAIVerificationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIUpdateVerificationRequest.h"
#include "OAIVerificationRequest.h"
#include "OAIVerificationResponse.h"
#include "OAIVerificationStatusResponse.h"
#include "OAIYodleeError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVerificationApi : public QObject {
    Q_OBJECT

public:
    OAIVerificationApi(const int timeOut = 0);
    ~OAIVerificationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_id QString [optional]
    * @param[in]  provider_account_id QString [optional]
    * @param[in]  verification_type QString [optional]
    */
    virtual void getVerificationStatus(const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &provider_account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &verification_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_verification_request OAIVerificationRequest [required]
    */
    virtual void initiateMatchingOrChallengeDepositeVerification(const OAIVerificationRequest &oai_verification_request);

    /**
    * @param[in]  oai_update_verification_request OAIUpdateVerificationRequest [required]
    */
    virtual void verifyChallengeDeposit(const OAIUpdateVerificationRequest &oai_update_verification_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getVerificationStatusCallback(OAIHttpRequestWorker *worker);
    void initiateMatchingOrChallengeDepositeVerificationCallback(OAIHttpRequestWorker *worker);
    void verifyChallengeDepositCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getVerificationStatusSignal(OAIVerificationStatusResponse summary);
    void initiateMatchingOrChallengeDepositeVerificationSignal(OAIVerificationResponse summary);
    void verifyChallengeDepositSignal(OAIVerificationResponse summary);


    void getVerificationStatusSignalFull(OAIHttpRequestWorker *worker, OAIVerificationStatusResponse summary);
    void initiateMatchingOrChallengeDepositeVerificationSignalFull(OAIHttpRequestWorker *worker, OAIVerificationResponse summary);
    void verifyChallengeDepositSignalFull(OAIHttpRequestWorker *worker, OAIVerificationResponse summary);

    Q_DECL_DEPRECATED_X("Use getVerificationStatusSignalError() instead")
    void getVerificationStatusSignalE(OAIVerificationStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVerificationStatusSignalError(OAIVerificationStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use initiateMatchingOrChallengeDepositeVerificationSignalError() instead")
    void initiateMatchingOrChallengeDepositeVerificationSignalE(OAIVerificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void initiateMatchingOrChallengeDepositeVerificationSignalError(OAIVerificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyChallengeDepositSignalError() instead")
    void verifyChallengeDepositSignalE(OAIVerificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyChallengeDepositSignalError(OAIVerificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getVerificationStatusSignalErrorFull() instead")
    void getVerificationStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVerificationStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use initiateMatchingOrChallengeDepositeVerificationSignalErrorFull() instead")
    void initiateMatchingOrChallengeDepositeVerificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void initiateMatchingOrChallengeDepositeVerificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyChallengeDepositSignalErrorFull() instead")
    void verifyChallengeDepositSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyChallengeDepositSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
