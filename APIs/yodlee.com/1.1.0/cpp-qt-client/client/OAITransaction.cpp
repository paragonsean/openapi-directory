/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransaction::OAITransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransaction::OAITransaction() {
    this->initializeModel();
}

OAITransaction::~OAITransaction() {}

void OAITransaction::initializeModel() {

    m_container_isSet = false;
    m_container_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_base_type_isSet = false;
    m_base_type_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_category_source_isSet = false;
    m_category_source_isValid = false;

    m_category_type_isSet = false;
    m_category_type_isValid = false;

    m_check_number_isSet = false;
    m_check_number_isValid = false;

    m_commission_isSet = false;
    m_commission_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_cusip_number_isSet = false;
    m_cusip_number_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_detail_category_id_isSet = false;
    m_detail_category_id_isValid = false;

    m_high_level_category_id_isSet = false;
    m_high_level_category_id_isValid = false;

    m_holding_description_isSet = false;
    m_holding_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_interest_isSet = false;
    m_interest_isValid = false;

    m_is_manual_isSet = false;
    m_is_manual_isValid = false;

    m_isin_isSet = false;
    m_isin_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_memo_isSet = false;
    m_memo_isValid = false;

    m_merchant_isSet = false;
    m_merchant_isValid = false;

    m_parent_category_id_isSet = false;
    m_parent_category_id_isValid = false;

    m_post_date_isSet = false;
    m_post_date_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_principal_isSet = false;
    m_principal_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_running_balance_isSet = false;
    m_running_balance_isValid = false;

    m_sedol_isSet = false;
    m_sedol_isValid = false;

    m_settle_date_isSet = false;
    m_settle_date_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_sub_type_isSet = false;
    m_sub_type_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;

    m_transaction_date_isSet = false;
    m_transaction_date_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_valoren_isSet = false;
    m_valoren_isValid = false;
}

void OAITransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransaction::fromJsonObject(QJsonObject json) {

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("CONTAINER")]);
    m_container_isSet = !json[QString("CONTAINER")].isNull() && m_container_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_base_type_isValid = ::OpenAPI::fromJsonValue(m_base_type, json[QString("baseType")]);
    m_base_type_isSet = !json[QString("baseType")].isNull() && m_base_type_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("categoryId")]);
    m_category_id_isSet = !json[QString("categoryId")].isNull() && m_category_id_isValid;

    m_category_source_isValid = ::OpenAPI::fromJsonValue(m_category_source, json[QString("categorySource")]);
    m_category_source_isSet = !json[QString("categorySource")].isNull() && m_category_source_isValid;

    m_category_type_isValid = ::OpenAPI::fromJsonValue(m_category_type, json[QString("categoryType")]);
    m_category_type_isSet = !json[QString("categoryType")].isNull() && m_category_type_isValid;

    m_check_number_isValid = ::OpenAPI::fromJsonValue(m_check_number, json[QString("checkNumber")]);
    m_check_number_isSet = !json[QString("checkNumber")].isNull() && m_check_number_isValid;

    m_commission_isValid = ::OpenAPI::fromJsonValue(m_commission, json[QString("commission")]);
    m_commission_isSet = !json[QString("commission")].isNull() && m_commission_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_cusip_number_isValid = ::OpenAPI::fromJsonValue(m_cusip_number, json[QString("cusipNumber")]);
    m_cusip_number_isSet = !json[QString("cusipNumber")].isNull() && m_cusip_number_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_detail_category_id_isValid = ::OpenAPI::fromJsonValue(m_detail_category_id, json[QString("detailCategoryId")]);
    m_detail_category_id_isSet = !json[QString("detailCategoryId")].isNull() && m_detail_category_id_isValid;

    m_high_level_category_id_isValid = ::OpenAPI::fromJsonValue(m_high_level_category_id, json[QString("highLevelCategoryId")]);
    m_high_level_category_id_isSet = !json[QString("highLevelCategoryId")].isNull() && m_high_level_category_id_isValid;

    m_holding_description_isValid = ::OpenAPI::fromJsonValue(m_holding_description, json[QString("holdingDescription")]);
    m_holding_description_isSet = !json[QString("holdingDescription")].isNull() && m_holding_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interest_isValid = ::OpenAPI::fromJsonValue(m_interest, json[QString("interest")]);
    m_interest_isSet = !json[QString("interest")].isNull() && m_interest_isValid;

    m_is_manual_isValid = ::OpenAPI::fromJsonValue(m_is_manual, json[QString("isManual")]);
    m_is_manual_isSet = !json[QString("isManual")].isNull() && m_is_manual_isValid;

    m_isin_isValid = ::OpenAPI::fromJsonValue(m_isin, json[QString("isin")]);
    m_isin_isSet = !json[QString("isin")].isNull() && m_isin_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_memo_isValid = ::OpenAPI::fromJsonValue(m_memo, json[QString("memo")]);
    m_memo_isSet = !json[QString("memo")].isNull() && m_memo_isValid;

    m_merchant_isValid = ::OpenAPI::fromJsonValue(m_merchant, json[QString("merchant")]);
    m_merchant_isSet = !json[QString("merchant")].isNull() && m_merchant_isValid;

    m_parent_category_id_isValid = ::OpenAPI::fromJsonValue(m_parent_category_id, json[QString("parentCategoryId")]);
    m_parent_category_id_isSet = !json[QString("parentCategoryId")].isNull() && m_parent_category_id_isValid;

    m_post_date_isValid = ::OpenAPI::fromJsonValue(m_post_date, json[QString("postDate")]);
    m_post_date_isSet = !json[QString("postDate")].isNull() && m_post_date_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_principal_isValid = ::OpenAPI::fromJsonValue(m_principal, json[QString("principal")]);
    m_principal_isSet = !json[QString("principal")].isNull() && m_principal_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_running_balance_isValid = ::OpenAPI::fromJsonValue(m_running_balance, json[QString("runningBalance")]);
    m_running_balance_isSet = !json[QString("runningBalance")].isNull() && m_running_balance_isValid;

    m_sedol_isValid = ::OpenAPI::fromJsonValue(m_sedol, json[QString("sedol")]);
    m_sedol_isSet = !json[QString("sedol")].isNull() && m_sedol_isValid;

    m_settle_date_isValid = ::OpenAPI::fromJsonValue(m_settle_date, json[QString("settleDate")]);
    m_settle_date_isSet = !json[QString("settleDate")].isNull() && m_settle_date_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("sourceId")]);
    m_source_id_isSet = !json[QString("sourceId")].isNull() && m_source_id_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("sourceType")]);
    m_source_type_isSet = !json[QString("sourceType")].isNull() && m_source_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_sub_type_isValid = ::OpenAPI::fromJsonValue(m_sub_type, json[QString("subType")]);
    m_sub_type_isSet = !json[QString("subType")].isNull() && m_sub_type_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;

    m_transaction_date_isValid = ::OpenAPI::fromJsonValue(m_transaction_date, json[QString("transactionDate")]);
    m_transaction_date_isSet = !json[QString("transactionDate")].isNull() && m_transaction_date_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_valoren_isValid = ::OpenAPI::fromJsonValue(m_valoren, json[QString("valoren")]);
    m_valoren_isSet = !json[QString("valoren")].isNull() && m_valoren_isValid;
}

QString OAITransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_container_isSet) {
        obj.insert(QString("CONTAINER"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_base_type_isSet) {
        obj.insert(QString("baseType"), ::OpenAPI::toJsonValue(m_base_type));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_category_id_isSet) {
        obj.insert(QString("categoryId"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_category_source_isSet) {
        obj.insert(QString("categorySource"), ::OpenAPI::toJsonValue(m_category_source));
    }
    if (m_category_type_isSet) {
        obj.insert(QString("categoryType"), ::OpenAPI::toJsonValue(m_category_type));
    }
    if (m_check_number_isSet) {
        obj.insert(QString("checkNumber"), ::OpenAPI::toJsonValue(m_check_number));
    }
    if (m_commission.isSet()) {
        obj.insert(QString("commission"), ::OpenAPI::toJsonValue(m_commission));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_cusip_number_isSet) {
        obj.insert(QString("cusipNumber"), ::OpenAPI::toJsonValue(m_cusip_number));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_detail_category_id_isSet) {
        obj.insert(QString("detailCategoryId"), ::OpenAPI::toJsonValue(m_detail_category_id));
    }
    if (m_high_level_category_id_isSet) {
        obj.insert(QString("highLevelCategoryId"), ::OpenAPI::toJsonValue(m_high_level_category_id));
    }
    if (m_holding_description_isSet) {
        obj.insert(QString("holdingDescription"), ::OpenAPI::toJsonValue(m_holding_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interest.isSet()) {
        obj.insert(QString("interest"), ::OpenAPI::toJsonValue(m_interest));
    }
    if (m_is_manual_isSet) {
        obj.insert(QString("isManual"), ::OpenAPI::toJsonValue(m_is_manual));
    }
    if (m_isin_isSet) {
        obj.insert(QString("isin"), ::OpenAPI::toJsonValue(m_isin));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_memo_isSet) {
        obj.insert(QString("memo"), ::OpenAPI::toJsonValue(m_memo));
    }
    if (m_merchant.isSet()) {
        obj.insert(QString("merchant"), ::OpenAPI::toJsonValue(m_merchant));
    }
    if (m_parent_category_id_isSet) {
        obj.insert(QString("parentCategoryId"), ::OpenAPI::toJsonValue(m_parent_category_id));
    }
    if (m_post_date_isSet) {
        obj.insert(QString("postDate"), ::OpenAPI::toJsonValue(m_post_date));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_principal.isSet()) {
        obj.insert(QString("principal"), ::OpenAPI::toJsonValue(m_principal));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_running_balance.isSet()) {
        obj.insert(QString("runningBalance"), ::OpenAPI::toJsonValue(m_running_balance));
    }
    if (m_sedol_isSet) {
        obj.insert(QString("sedol"), ::OpenAPI::toJsonValue(m_sedol));
    }
    if (m_settle_date_isSet) {
        obj.insert(QString("settleDate"), ::OpenAPI::toJsonValue(m_settle_date));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("sourceId"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_source_type_isSet) {
        obj.insert(QString("sourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_sub_type_isSet) {
        obj.insert(QString("subType"), ::OpenAPI::toJsonValue(m_sub_type));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    if (m_transaction_date_isSet) {
        obj.insert(QString("transactionDate"), ::OpenAPI::toJsonValue(m_transaction_date));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_valoren_isSet) {
        obj.insert(QString("valoren"), ::OpenAPI::toJsonValue(m_valoren));
    }
    return obj;
}

QString OAITransaction::getContainer() const {
    return m_container;
}
void OAITransaction::setContainer(const QString &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAITransaction::is_container_Set() const{
    return m_container_isSet;
}

bool OAITransaction::is_container_Valid() const{
    return m_container_isValid;
}

qint64 OAITransaction::getAccountId() const {
    return m_account_id;
}
void OAITransaction::setAccountId(const qint64 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAITransaction::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAITransaction::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAIMoney OAITransaction::getAmount() const {
    return m_amount;
}
void OAITransaction::setAmount(const OAIMoney &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAITransaction::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAITransaction::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAITransaction::getBaseType() const {
    return m_base_type;
}
void OAITransaction::setBaseType(const QString &base_type) {
    m_base_type = base_type;
    m_base_type_isSet = true;
}

bool OAITransaction::is_base_type_Set() const{
    return m_base_type_isSet;
}

bool OAITransaction::is_base_type_Valid() const{
    return m_base_type_isValid;
}

QString OAITransaction::getCategory() const {
    return m_category;
}
void OAITransaction::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAITransaction::is_category_Set() const{
    return m_category_isSet;
}

bool OAITransaction::is_category_Valid() const{
    return m_category_isValid;
}

qint64 OAITransaction::getCategoryId() const {
    return m_category_id;
}
void OAITransaction::setCategoryId(const qint64 &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAITransaction::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAITransaction::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QString OAITransaction::getCategorySource() const {
    return m_category_source;
}
void OAITransaction::setCategorySource(const QString &category_source) {
    m_category_source = category_source;
    m_category_source_isSet = true;
}

bool OAITransaction::is_category_source_Set() const{
    return m_category_source_isSet;
}

bool OAITransaction::is_category_source_Valid() const{
    return m_category_source_isValid;
}

QString OAITransaction::getCategoryType() const {
    return m_category_type;
}
void OAITransaction::setCategoryType(const QString &category_type) {
    m_category_type = category_type;
    m_category_type_isSet = true;
}

bool OAITransaction::is_category_type_Set() const{
    return m_category_type_isSet;
}

bool OAITransaction::is_category_type_Valid() const{
    return m_category_type_isValid;
}

QString OAITransaction::getCheckNumber() const {
    return m_check_number;
}
void OAITransaction::setCheckNumber(const QString &check_number) {
    m_check_number = check_number;
    m_check_number_isSet = true;
}

bool OAITransaction::is_check_number_Set() const{
    return m_check_number_isSet;
}

bool OAITransaction::is_check_number_Valid() const{
    return m_check_number_isValid;
}

OAIMoney OAITransaction::getCommission() const {
    return m_commission;
}
void OAITransaction::setCommission(const OAIMoney &commission) {
    m_commission = commission;
    m_commission_isSet = true;
}

bool OAITransaction::is_commission_Set() const{
    return m_commission_isSet;
}

bool OAITransaction::is_commission_Valid() const{
    return m_commission_isValid;
}

QString OAITransaction::getCreatedDate() const {
    return m_created_date;
}
void OAITransaction::setCreatedDate(const QString &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAITransaction::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAITransaction::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAITransaction::getCusipNumber() const {
    return m_cusip_number;
}
void OAITransaction::setCusipNumber(const QString &cusip_number) {
    m_cusip_number = cusip_number;
    m_cusip_number_isSet = true;
}

bool OAITransaction::is_cusip_number_Set() const{
    return m_cusip_number_isSet;
}

bool OAITransaction::is_cusip_number_Valid() const{
    return m_cusip_number_isValid;
}

QString OAITransaction::getDate() const {
    return m_date;
}
void OAITransaction::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAITransaction::is_date_Set() const{
    return m_date_isSet;
}

bool OAITransaction::is_date_Valid() const{
    return m_date_isValid;
}

OAIDescription OAITransaction::getDescription() const {
    return m_description;
}
void OAITransaction::setDescription(const OAIDescription &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITransaction::is_description_Set() const{
    return m_description_isSet;
}

bool OAITransaction::is_description_Valid() const{
    return m_description_isValid;
}

qint64 OAITransaction::getDetailCategoryId() const {
    return m_detail_category_id;
}
void OAITransaction::setDetailCategoryId(const qint64 &detail_category_id) {
    m_detail_category_id = detail_category_id;
    m_detail_category_id_isSet = true;
}

bool OAITransaction::is_detail_category_id_Set() const{
    return m_detail_category_id_isSet;
}

bool OAITransaction::is_detail_category_id_Valid() const{
    return m_detail_category_id_isValid;
}

qint64 OAITransaction::getHighLevelCategoryId() const {
    return m_high_level_category_id;
}
void OAITransaction::setHighLevelCategoryId(const qint64 &high_level_category_id) {
    m_high_level_category_id = high_level_category_id;
    m_high_level_category_id_isSet = true;
}

bool OAITransaction::is_high_level_category_id_Set() const{
    return m_high_level_category_id_isSet;
}

bool OAITransaction::is_high_level_category_id_Valid() const{
    return m_high_level_category_id_isValid;
}

QString OAITransaction::getHoldingDescription() const {
    return m_holding_description;
}
void OAITransaction::setHoldingDescription(const QString &holding_description) {
    m_holding_description = holding_description;
    m_holding_description_isSet = true;
}

bool OAITransaction::is_holding_description_Set() const{
    return m_holding_description_isSet;
}

bool OAITransaction::is_holding_description_Valid() const{
    return m_holding_description_isValid;
}

qint64 OAITransaction::getId() const {
    return m_id;
}
void OAITransaction::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITransaction::is_id_Set() const{
    return m_id_isSet;
}

bool OAITransaction::is_id_Valid() const{
    return m_id_isValid;
}

OAIMoney OAITransaction::getInterest() const {
    return m_interest;
}
void OAITransaction::setInterest(const OAIMoney &interest) {
    m_interest = interest;
    m_interest_isSet = true;
}

bool OAITransaction::is_interest_Set() const{
    return m_interest_isSet;
}

bool OAITransaction::is_interest_Valid() const{
    return m_interest_isValid;
}

bool OAITransaction::isIsManual() const {
    return m_is_manual;
}
void OAITransaction::setIsManual(const bool &is_manual) {
    m_is_manual = is_manual;
    m_is_manual_isSet = true;
}

bool OAITransaction::is_is_manual_Set() const{
    return m_is_manual_isSet;
}

bool OAITransaction::is_is_manual_Valid() const{
    return m_is_manual_isValid;
}

QString OAITransaction::getIsin() const {
    return m_isin;
}
void OAITransaction::setIsin(const QString &isin) {
    m_isin = isin;
    m_isin_isSet = true;
}

bool OAITransaction::is_isin_Set() const{
    return m_isin_isSet;
}

bool OAITransaction::is_isin_Valid() const{
    return m_isin_isValid;
}

QString OAITransaction::getLastUpdated() const {
    return m_last_updated;
}
void OAITransaction::setLastUpdated(const QString &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAITransaction::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAITransaction::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAITransaction::getMemo() const {
    return m_memo;
}
void OAITransaction::setMemo(const QString &memo) {
    m_memo = memo;
    m_memo_isSet = true;
}

bool OAITransaction::is_memo_Set() const{
    return m_memo_isSet;
}

bool OAITransaction::is_memo_Valid() const{
    return m_memo_isValid;
}

OAIMerchant OAITransaction::getMerchant() const {
    return m_merchant;
}
void OAITransaction::setMerchant(const OAIMerchant &merchant) {
    m_merchant = merchant;
    m_merchant_isSet = true;
}

bool OAITransaction::is_merchant_Set() const{
    return m_merchant_isSet;
}

bool OAITransaction::is_merchant_Valid() const{
    return m_merchant_isValid;
}

qint64 OAITransaction::getParentCategoryId() const {
    return m_parent_category_id;
}
void OAITransaction::setParentCategoryId(const qint64 &parent_category_id) {
    m_parent_category_id = parent_category_id;
    m_parent_category_id_isSet = true;
}

bool OAITransaction::is_parent_category_id_Set() const{
    return m_parent_category_id_isSet;
}

bool OAITransaction::is_parent_category_id_Valid() const{
    return m_parent_category_id_isValid;
}

QString OAITransaction::getPostDate() const {
    return m_post_date;
}
void OAITransaction::setPostDate(const QString &post_date) {
    m_post_date = post_date;
    m_post_date_isSet = true;
}

bool OAITransaction::is_post_date_Set() const{
    return m_post_date_isSet;
}

bool OAITransaction::is_post_date_Valid() const{
    return m_post_date_isValid;
}

OAIMoney OAITransaction::getPrice() const {
    return m_price;
}
void OAITransaction::setPrice(const OAIMoney &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAITransaction::is_price_Set() const{
    return m_price_isSet;
}

bool OAITransaction::is_price_Valid() const{
    return m_price_isValid;
}

OAIMoney OAITransaction::getPrincipal() const {
    return m_principal;
}
void OAITransaction::setPrincipal(const OAIMoney &principal) {
    m_principal = principal;
    m_principal_isSet = true;
}

bool OAITransaction::is_principal_Set() const{
    return m_principal_isSet;
}

bool OAITransaction::is_principal_Valid() const{
    return m_principal_isValid;
}

double OAITransaction::getQuantity() const {
    return m_quantity;
}
void OAITransaction::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAITransaction::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAITransaction::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIMoney OAITransaction::getRunningBalance() const {
    return m_running_balance;
}
void OAITransaction::setRunningBalance(const OAIMoney &running_balance) {
    m_running_balance = running_balance;
    m_running_balance_isSet = true;
}

bool OAITransaction::is_running_balance_Set() const{
    return m_running_balance_isSet;
}

bool OAITransaction::is_running_balance_Valid() const{
    return m_running_balance_isValid;
}

QString OAITransaction::getSedol() const {
    return m_sedol;
}
void OAITransaction::setSedol(const QString &sedol) {
    m_sedol = sedol;
    m_sedol_isSet = true;
}

bool OAITransaction::is_sedol_Set() const{
    return m_sedol_isSet;
}

bool OAITransaction::is_sedol_Valid() const{
    return m_sedol_isValid;
}

QString OAITransaction::getSettleDate() const {
    return m_settle_date;
}
void OAITransaction::setSettleDate(const QString &settle_date) {
    m_settle_date = settle_date;
    m_settle_date_isSet = true;
}

bool OAITransaction::is_settle_date_Set() const{
    return m_settle_date_isSet;
}

bool OAITransaction::is_settle_date_Valid() const{
    return m_settle_date_isValid;
}

QString OAITransaction::getSourceId() const {
    return m_source_id;
}
void OAITransaction::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAITransaction::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAITransaction::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAITransaction::getSourceType() const {
    return m_source_type;
}
void OAITransaction::setSourceType(const QString &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAITransaction::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAITransaction::is_source_type_Valid() const{
    return m_source_type_isValid;
}

QString OAITransaction::getStatus() const {
    return m_status;
}
void OAITransaction::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITransaction::is_status_Set() const{
    return m_status_isSet;
}

bool OAITransaction::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITransaction::getSubType() const {
    return m_sub_type;
}
void OAITransaction::setSubType(const QString &sub_type) {
    m_sub_type = sub_type;
    m_sub_type_isSet = true;
}

bool OAITransaction::is_sub_type_Set() const{
    return m_sub_type_isSet;
}

bool OAITransaction::is_sub_type_Valid() const{
    return m_sub_type_isValid;
}

QString OAITransaction::getSymbol() const {
    return m_symbol;
}
void OAITransaction::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAITransaction::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAITransaction::is_symbol_Valid() const{
    return m_symbol_isValid;
}

QString OAITransaction::getTransactionDate() const {
    return m_transaction_date;
}
void OAITransaction::setTransactionDate(const QString &transaction_date) {
    m_transaction_date = transaction_date;
    m_transaction_date_isSet = true;
}

bool OAITransaction::is_transaction_date_Set() const{
    return m_transaction_date_isSet;
}

bool OAITransaction::is_transaction_date_Valid() const{
    return m_transaction_date_isValid;
}

QString OAITransaction::getType() const {
    return m_type;
}
void OAITransaction::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITransaction::is_type_Set() const{
    return m_type_isSet;
}

bool OAITransaction::is_type_Valid() const{
    return m_type_isValid;
}

QString OAITransaction::getValoren() const {
    return m_valoren;
}
void OAITransaction::setValoren(const QString &valoren) {
    m_valoren = valoren;
    m_valoren_isSet = true;
}

bool OAITransaction::is_valoren_Set() const{
    return m_valoren_isSet;
}

bool OAITransaction::is_valoren_Valid() const{
    return m_valoren_isValid;
}

bool OAITransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commission.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cusip_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_level_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holding_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_manual_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_isin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_running_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sedol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settle_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valoren_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
