/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerificationTransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerificationTransaction::OAIVerificationTransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerificationTransaction::OAIVerificationTransaction() {
    this->initializeModel();
}

OAIVerificationTransaction::~OAIVerificationTransaction() {}

void OAIVerificationTransaction::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_base_type_isSet = false;
    m_base_type_isValid = false;
}

void OAIVerificationTransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerificationTransaction::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_base_type_isValid = ::OpenAPI::fromJsonValue(m_base_type, json[QString("baseType")]);
    m_base_type_isSet = !json[QString("baseType")].isNull() && m_base_type_isValid;
}

QString OAIVerificationTransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerificationTransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_base_type_isSet) {
        obj.insert(QString("baseType"), ::OpenAPI::toJsonValue(m_base_type));
    }
    return obj;
}

OAIMoney OAIVerificationTransaction::getAmount() const {
    return m_amount;
}
void OAIVerificationTransaction::setAmount(const OAIMoney &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIVerificationTransaction::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIVerificationTransaction::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIVerificationTransaction::getBaseType() const {
    return m_base_type;
}
void OAIVerificationTransaction::setBaseType(const QString &base_type) {
    m_base_type = base_type;
    m_base_type_isSet = true;
}

bool OAIVerificationTransaction::is_base_type_Set() const{
    return m_base_type_isSet;
}

bool OAIVerificationTransaction::is_base_type_Valid() const{
    return m_base_type_isValid;
}

bool OAIVerificationTransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerificationTransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_base_type_isValid && true;
}

} // namespace OpenAPI
