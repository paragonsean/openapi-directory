/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDerivedApi_H
#define OAI_OAIDerivedApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDerivedHoldingSummaryResponse.h"
#include "OAIDerivedNetworthResponse.h"
#include "OAIDerivedTransactionSummaryResponse.h"
#include "OAIYodleeError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDerivedApi : public QObject {
    Q_OBJECT

public:
    OAIDerivedApi(const int timeOut = 0);
    ~OAIDerivedApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_ids QString [optional]
    * @param[in]  classification_type QString [optional]
    * @param[in]  include QString [optional]
    */
    virtual void getHoldingSummary(const ::OpenAPI::OptionalParam<QString> &account_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &classification_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_ids QString [optional]
    * @param[in]  container QString [optional]
    * @param[in]  from_date QString [optional]
    * @param[in]  include QString [optional]
    * @param[in]  interval QString [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  to_date QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void getNetworth(const ::OpenAPI::OptionalParam<QString> &account_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &container = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interval = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &to_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  group_by QString [required]
    * @param[in]  account_id QString [optional]
    * @param[in]  category_id QString [optional]
    * @param[in]  category_type QString [optional]
    * @param[in]  from_date QString [optional]
    * @param[in]  include QString [optional]
    * @param[in]  include_user_category bool [optional]
    * @param[in]  interval QString [optional]
    * @param[in]  to_date QString [optional]
    */
    virtual void getTransactionSummary(const QString &group_by, const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_user_category = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &interval = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_date = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getHoldingSummaryCallback(OAIHttpRequestWorker *worker);
    void getNetworthCallback(OAIHttpRequestWorker *worker);
    void getTransactionSummaryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getHoldingSummarySignal(OAIDerivedHoldingSummaryResponse summary);
    void getNetworthSignal(OAIDerivedNetworthResponse summary);
    void getTransactionSummarySignal(OAIDerivedTransactionSummaryResponse summary);


    void getHoldingSummarySignalFull(OAIHttpRequestWorker *worker, OAIDerivedHoldingSummaryResponse summary);
    void getNetworthSignalFull(OAIHttpRequestWorker *worker, OAIDerivedNetworthResponse summary);
    void getTransactionSummarySignalFull(OAIHttpRequestWorker *worker, OAIDerivedTransactionSummaryResponse summary);

    Q_DECL_DEPRECATED_X("Use getHoldingSummarySignalError() instead")
    void getHoldingSummarySignalE(OAIDerivedHoldingSummaryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHoldingSummarySignalError(OAIDerivedHoldingSummaryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworthSignalError() instead")
    void getNetworthSignalE(OAIDerivedNetworthResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworthSignalError(OAIDerivedNetworthResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionSummarySignalError() instead")
    void getTransactionSummarySignalE(OAIDerivedTransactionSummaryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionSummarySignalError(OAIDerivedTransactionSummaryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getHoldingSummarySignalErrorFull() instead")
    void getHoldingSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHoldingSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworthSignalErrorFull() instead")
    void getNetworthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionSummarySignalErrorFull() instead")
    void getTransactionSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
