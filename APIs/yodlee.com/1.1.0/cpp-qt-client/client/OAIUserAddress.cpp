/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserAddress::OAIUserAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserAddress::OAIUserAddress() {
    this->initializeModel();
}

OAIUserAddress::~OAIUserAddress() {}

void OAIUserAddress::initializeModel() {

    m_address1_isSet = false;
    m_address1_isValid = false;

    m_address2_isSet = false;
    m_address2_isValid = false;

    m_address3_isSet = false;
    m_address3_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_zip_isSet = false;
    m_zip_isValid = false;
}

void OAIUserAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserAddress::fromJsonObject(QJsonObject json) {

    m_address1_isValid = ::OpenAPI::fromJsonValue(m_address1, json[QString("address1")]);
    m_address1_isSet = !json[QString("address1")].isNull() && m_address1_isValid;

    m_address2_isValid = ::OpenAPI::fromJsonValue(m_address2, json[QString("address2")]);
    m_address2_isSet = !json[QString("address2")].isNull() && m_address2_isValid;

    m_address3_isValid = ::OpenAPI::fromJsonValue(m_address3, json[QString("address3")]);
    m_address3_isSet = !json[QString("address3")].isNull() && m_address3_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_zip_isValid = ::OpenAPI::fromJsonValue(m_zip, json[QString("zip")]);
    m_zip_isSet = !json[QString("zip")].isNull() && m_zip_isValid;
}

QString OAIUserAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_address1_isSet) {
        obj.insert(QString("address1"), ::OpenAPI::toJsonValue(m_address1));
    }
    if (m_address2_isSet) {
        obj.insert(QString("address2"), ::OpenAPI::toJsonValue(m_address2));
    }
    if (m_address3_isSet) {
        obj.insert(QString("address3"), ::OpenAPI::toJsonValue(m_address3));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_zip_isSet) {
        obj.insert(QString("zip"), ::OpenAPI::toJsonValue(m_zip));
    }
    return obj;
}

QString OAIUserAddress::getAddress1() const {
    return m_address1;
}
void OAIUserAddress::setAddress1(const QString &address1) {
    m_address1 = address1;
    m_address1_isSet = true;
}

bool OAIUserAddress::is_address1_Set() const{
    return m_address1_isSet;
}

bool OAIUserAddress::is_address1_Valid() const{
    return m_address1_isValid;
}

QString OAIUserAddress::getAddress2() const {
    return m_address2;
}
void OAIUserAddress::setAddress2(const QString &address2) {
    m_address2 = address2;
    m_address2_isSet = true;
}

bool OAIUserAddress::is_address2_Set() const{
    return m_address2_isSet;
}

bool OAIUserAddress::is_address2_Valid() const{
    return m_address2_isValid;
}

QString OAIUserAddress::getAddress3() const {
    return m_address3;
}
void OAIUserAddress::setAddress3(const QString &address3) {
    m_address3 = address3;
    m_address3_isSet = true;
}

bool OAIUserAddress::is_address3_Set() const{
    return m_address3_isSet;
}

bool OAIUserAddress::is_address3_Valid() const{
    return m_address3_isValid;
}

QString OAIUserAddress::getCity() const {
    return m_city;
}
void OAIUserAddress::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIUserAddress::is_city_Set() const{
    return m_city_isSet;
}

bool OAIUserAddress::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIUserAddress::getCountry() const {
    return m_country;
}
void OAIUserAddress::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIUserAddress::is_country_Set() const{
    return m_country_isSet;
}

bool OAIUserAddress::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIUserAddress::getState() const {
    return m_state;
}
void OAIUserAddress::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIUserAddress::is_state_Set() const{
    return m_state_isSet;
}

bool OAIUserAddress::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIUserAddress::getZip() const {
    return m_zip;
}
void OAIUserAddress::setZip(const QString &zip) {
    m_zip = zip;
    m_zip_isSet = true;
}

bool OAIUserAddress::is_zip_Set() const{
    return m_zip_isSet;
}

bool OAIUserAddress::is_zip_Valid() const{
    return m_zip_isValid;
}

bool OAIUserAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
