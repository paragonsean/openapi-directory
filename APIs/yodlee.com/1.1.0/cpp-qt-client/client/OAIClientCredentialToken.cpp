/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClientCredentialToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClientCredentialToken::OAIClientCredentialToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClientCredentialToken::OAIClientCredentialToken() {
    this->initializeModel();
}

OAIClientCredentialToken::~OAIClientCredentialToken() {}

void OAIClientCredentialToken::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_expires_in_isSet = false;
    m_expires_in_isValid = false;

    m_issued_at_isSet = false;
    m_issued_at_isValid = false;
}

void OAIClientCredentialToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClientCredentialToken::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("accessToken")]);
    m_access_token_isSet = !json[QString("accessToken")].isNull() && m_access_token_isValid;

    m_expires_in_isValid = ::OpenAPI::fromJsonValue(m_expires_in, json[QString("expiresIn")]);
    m_expires_in_isSet = !json[QString("expiresIn")].isNull() && m_expires_in_isValid;

    m_issued_at_isValid = ::OpenAPI::fromJsonValue(m_issued_at, json[QString("issuedAt")]);
    m_issued_at_isSet = !json[QString("issuedAt")].isNull() && m_issued_at_isValid;
}

QString OAIClientCredentialToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClientCredentialToken::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("accessToken"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_expires_in_isSet) {
        obj.insert(QString("expiresIn"), ::OpenAPI::toJsonValue(m_expires_in));
    }
    if (m_issued_at_isSet) {
        obj.insert(QString("issuedAt"), ::OpenAPI::toJsonValue(m_issued_at));
    }
    return obj;
}

QString OAIClientCredentialToken::getAccessToken() const {
    return m_access_token;
}
void OAIClientCredentialToken::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAIClientCredentialToken::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAIClientCredentialToken::is_access_token_Valid() const{
    return m_access_token_isValid;
}

qint32 OAIClientCredentialToken::getExpiresIn() const {
    return m_expires_in;
}
void OAIClientCredentialToken::setExpiresIn(const qint32 &expires_in) {
    m_expires_in = expires_in;
    m_expires_in_isSet = true;
}

bool OAIClientCredentialToken::is_expires_in_Set() const{
    return m_expires_in_isSet;
}

bool OAIClientCredentialToken::is_expires_in_Valid() const{
    return m_expires_in_isValid;
}

QString OAIClientCredentialToken::getIssuedAt() const {
    return m_issued_at;
}
void OAIClientCredentialToken::setIssuedAt(const QString &issued_at) {
    m_issued_at = issued_at;
    m_issued_at_isSet = true;
}

bool OAIClientCredentialToken::is_issued_at_Set() const{
    return m_issued_at_isSet;
}

bool OAIClientCredentialToken::is_issued_at_Valid() const{
    return m_issued_at_isValid;
}

bool OAIClientCredentialToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issued_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClientCredentialToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
