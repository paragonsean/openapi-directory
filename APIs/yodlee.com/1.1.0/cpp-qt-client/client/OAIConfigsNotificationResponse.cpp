/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigsNotificationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigsNotificationResponse::OAIConfigsNotificationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigsNotificationResponse::OAIConfigsNotificationResponse() {
    this->initializeModel();
}

OAIConfigsNotificationResponse::~OAIConfigsNotificationResponse() {}

void OAIConfigsNotificationResponse::initializeModel() {

    m_event_isSet = false;
    m_event_isValid = false;
}

void OAIConfigsNotificationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigsNotificationResponse::fromJsonObject(QJsonObject json) {

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;
}

QString OAIConfigsNotificationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigsNotificationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_event.size() > 0) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    return obj;
}

QList<OAIConfigsNotificationEvent> OAIConfigsNotificationResponse::getEvent() const {
    return m_event;
}
void OAIConfigsNotificationResponse::setEvent(const QList<OAIConfigsNotificationEvent> &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAIConfigsNotificationResponse::is_event_Set() const{
    return m_event_isSet;
}

bool OAIConfigsNotificationResponse::is_event_Valid() const{
    return m_event_isValid;
}

bool OAIConfigsNotificationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigsNotificationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
