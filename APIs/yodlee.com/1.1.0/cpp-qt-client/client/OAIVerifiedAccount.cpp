/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerifiedAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerifiedAccount::OAIVerifiedAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerifiedAccount::OAIVerifiedAccount() {
    this->initializeModel();
}

OAIVerifiedAccount::~OAIVerifiedAccount() {}

void OAIVerifiedAccount::initializeModel() {

    m_account_number_isSet = false;
    m_account_number_isValid = false;

    m_account_type_isSet = false;
    m_account_type_isValid = false;

    m_bank_transfer_code_isSet = false;
    m_bank_transfer_code_isValid = false;

    m_full_account_number_isSet = false;
    m_full_account_number_isValid = false;

    m_holder_isSet = false;
    m_holder_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_provider_account_id_isSet = false;
    m_provider_account_id_isValid = false;

    m_provider_name_isSet = false;
    m_provider_name_isValid = false;
}

void OAIVerifiedAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerifiedAccount::fromJsonObject(QJsonObject json) {

    m_account_number_isValid = ::OpenAPI::fromJsonValue(m_account_number, json[QString("accountNumber")]);
    m_account_number_isSet = !json[QString("accountNumber")].isNull() && m_account_number_isValid;

    m_account_type_isValid = ::OpenAPI::fromJsonValue(m_account_type, json[QString("accountType")]);
    m_account_type_isSet = !json[QString("accountType")].isNull() && m_account_type_isValid;

    m_bank_transfer_code_isValid = ::OpenAPI::fromJsonValue(m_bank_transfer_code, json[QString("bankTransferCode")]);
    m_bank_transfer_code_isSet = !json[QString("bankTransferCode")].isNull() && m_bank_transfer_code_isValid;

    m_full_account_number_isValid = ::OpenAPI::fromJsonValue(m_full_account_number, json[QString("fullAccountNumber")]);
    m_full_account_number_isSet = !json[QString("fullAccountNumber")].isNull() && m_full_account_number_isValid;

    m_holder_isValid = ::OpenAPI::fromJsonValue(m_holder, json[QString("holder")]);
    m_holder_isSet = !json[QString("holder")].isNull() && m_holder_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_provider_account_id_isValid = ::OpenAPI::fromJsonValue(m_provider_account_id, json[QString("providerAccountId")]);
    m_provider_account_id_isSet = !json[QString("providerAccountId")].isNull() && m_provider_account_id_isValid;

    m_provider_name_isValid = ::OpenAPI::fromJsonValue(m_provider_name, json[QString("providerName")]);
    m_provider_name_isSet = !json[QString("providerName")].isNull() && m_provider_name_isValid;
}

QString OAIVerifiedAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerifiedAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_account_number_isSet) {
        obj.insert(QString("accountNumber"), ::OpenAPI::toJsonValue(m_account_number));
    }
    if (m_account_type_isSet) {
        obj.insert(QString("accountType"), ::OpenAPI::toJsonValue(m_account_type));
    }
    if (m_bank_transfer_code.size() > 0) {
        obj.insert(QString("bankTransferCode"), ::OpenAPI::toJsonValue(m_bank_transfer_code));
    }
    if (m_full_account_number_isSet) {
        obj.insert(QString("fullAccountNumber"), ::OpenAPI::toJsonValue(m_full_account_number));
    }
    if (m_holder.size() > 0) {
        obj.insert(QString("holder"), ::OpenAPI::toJsonValue(m_holder));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_provider_account_id_isSet) {
        obj.insert(QString("providerAccountId"), ::OpenAPI::toJsonValue(m_provider_account_id));
    }
    if (m_provider_name_isSet) {
        obj.insert(QString("providerName"), ::OpenAPI::toJsonValue(m_provider_name));
    }
    return obj;
}

QString OAIVerifiedAccount::getAccountNumber() const {
    return m_account_number;
}
void OAIVerifiedAccount::setAccountNumber(const QString &account_number) {
    m_account_number = account_number;
    m_account_number_isSet = true;
}

bool OAIVerifiedAccount::is_account_number_Set() const{
    return m_account_number_isSet;
}

bool OAIVerifiedAccount::is_account_number_Valid() const{
    return m_account_number_isValid;
}

QString OAIVerifiedAccount::getAccountType() const {
    return m_account_type;
}
void OAIVerifiedAccount::setAccountType(const QString &account_type) {
    m_account_type = account_type;
    m_account_type_isSet = true;
}

bool OAIVerifiedAccount::is_account_type_Set() const{
    return m_account_type_isSet;
}

bool OAIVerifiedAccount::is_account_type_Valid() const{
    return m_account_type_isValid;
}

QList<OAIBankTransferCode> OAIVerifiedAccount::getBankTransferCode() const {
    return m_bank_transfer_code;
}
void OAIVerifiedAccount::setBankTransferCode(const QList<OAIBankTransferCode> &bank_transfer_code) {
    m_bank_transfer_code = bank_transfer_code;
    m_bank_transfer_code_isSet = true;
}

bool OAIVerifiedAccount::is_bank_transfer_code_Set() const{
    return m_bank_transfer_code_isSet;
}

bool OAIVerifiedAccount::is_bank_transfer_code_Valid() const{
    return m_bank_transfer_code_isValid;
}

QString OAIVerifiedAccount::getFullAccountNumber() const {
    return m_full_account_number;
}
void OAIVerifiedAccount::setFullAccountNumber(const QString &full_account_number) {
    m_full_account_number = full_account_number;
    m_full_account_number_isSet = true;
}

bool OAIVerifiedAccount::is_full_account_number_Set() const{
    return m_full_account_number_isSet;
}

bool OAIVerifiedAccount::is_full_account_number_Valid() const{
    return m_full_account_number_isValid;
}

QList<OAIAccountHolder> OAIVerifiedAccount::getHolder() const {
    return m_holder;
}
void OAIVerifiedAccount::setHolder(const QList<OAIAccountHolder> &holder) {
    m_holder = holder;
    m_holder_isSet = true;
}

bool OAIVerifiedAccount::is_holder_Set() const{
    return m_holder_isSet;
}

bool OAIVerifiedAccount::is_holder_Valid() const{
    return m_holder_isValid;
}

qint64 OAIVerifiedAccount::getId() const {
    return m_id;
}
void OAIVerifiedAccount::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVerifiedAccount::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVerifiedAccount::is_id_Valid() const{
    return m_id_isValid;
}

qint64 OAIVerifiedAccount::getProviderAccountId() const {
    return m_provider_account_id;
}
void OAIVerifiedAccount::setProviderAccountId(const qint64 &provider_account_id) {
    m_provider_account_id = provider_account_id;
    m_provider_account_id_isSet = true;
}

bool OAIVerifiedAccount::is_provider_account_id_Set() const{
    return m_provider_account_id_isSet;
}

bool OAIVerifiedAccount::is_provider_account_id_Valid() const{
    return m_provider_account_id_isValid;
}

QString OAIVerifiedAccount::getProviderName() const {
    return m_provider_name;
}
void OAIVerifiedAccount::setProviderName(const QString &provider_name) {
    m_provider_name = provider_name;
    m_provider_name_isSet = true;
}

bool OAIVerifiedAccount::is_provider_name_Set() const{
    return m_provider_name_isSet;
}

bool OAIVerifiedAccount::is_provider_name_Valid() const{
    return m_provider_name_isValid;
}

bool OAIVerifiedAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_transfer_code.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holder.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerifiedAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
