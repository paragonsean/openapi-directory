/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountProfile::OAIAccountProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountProfile::OAIAccountProfile() {
    this->initializeModel();
}

OAIAccountProfile::~OAIAccountProfile() {}

void OAIAccountProfile::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;
}

void OAIAccountProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountProfile::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;
}

QString OAIAccountProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_address.size() > 0) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_email.size() > 0) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_identifier.size() > 0) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_phone_number.size() > 0) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    return obj;
}

QList<OAIAccountAddress> OAIAccountProfile::getAddress() const {
    return m_address;
}
void OAIAccountProfile::setAddress(const QList<OAIAccountAddress> &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIAccountProfile::is_address_Set() const{
    return m_address_isSet;
}

bool OAIAccountProfile::is_address_Valid() const{
    return m_address_isValid;
}

QList<OAIEmail> OAIAccountProfile::getEmail() const {
    return m_email;
}
void OAIAccountProfile::setEmail(const QList<OAIEmail> &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIAccountProfile::is_email_Set() const{
    return m_email_isSet;
}

bool OAIAccountProfile::is_email_Valid() const{
    return m_email_isValid;
}

QList<OAIIdentifier> OAIAccountProfile::getIdentifier() const {
    return m_identifier;
}
void OAIAccountProfile::setIdentifier(const QList<OAIIdentifier> &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIAccountProfile::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIAccountProfile::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QList<OAIPhoneNumber> OAIAccountProfile::getPhoneNumber() const {
    return m_phone_number;
}
void OAIAccountProfile::setPhoneNumber(const QList<OAIPhoneNumber> &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIAccountProfile::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIAccountProfile::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

bool OAIAccountProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_email.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
