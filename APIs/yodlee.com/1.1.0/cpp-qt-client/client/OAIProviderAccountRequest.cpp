/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProviderAccountRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProviderAccountRequest::OAIProviderAccountRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProviderAccountRequest::OAIProviderAccountRequest() {
    this->initializeModel();
}

OAIProviderAccountRequest::~OAIProviderAccountRequest() {}

void OAIProviderAccountRequest::initializeModel() {

    m_aggregation_source_isSet = false;
    m_aggregation_source_isValid = false;

    m_consent_id_isSet = false;
    m_consent_id_isValid = false;

    m_dataset_isSet = false;
    m_dataset_isValid = false;

    m_dataset_name_isSet = false;
    m_dataset_name_isValid = false;

    m_field_isSet = false;
    m_field_isValid = false;

    m_preferences_isSet = false;
    m_preferences_isValid = false;
}

void OAIProviderAccountRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProviderAccountRequest::fromJsonObject(QJsonObject json) {

    m_aggregation_source_isValid = ::OpenAPI::fromJsonValue(m_aggregation_source, json[QString("aggregationSource")]);
    m_aggregation_source_isSet = !json[QString("aggregationSource")].isNull() && m_aggregation_source_isValid;

    m_consent_id_isValid = ::OpenAPI::fromJsonValue(m_consent_id, json[QString("consentId")]);
    m_consent_id_isSet = !json[QString("consentId")].isNull() && m_consent_id_isValid;

    m_dataset_isValid = ::OpenAPI::fromJsonValue(m_dataset, json[QString("dataset")]);
    m_dataset_isSet = !json[QString("dataset")].isNull() && m_dataset_isValid;

    m_dataset_name_isValid = ::OpenAPI::fromJsonValue(m_dataset_name, json[QString("datasetName")]);
    m_dataset_name_isSet = !json[QString("datasetName")].isNull() && m_dataset_name_isValid;

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_preferences_isValid = ::OpenAPI::fromJsonValue(m_preferences, json[QString("preferences")]);
    m_preferences_isSet = !json[QString("preferences")].isNull() && m_preferences_isValid;
}

QString OAIProviderAccountRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProviderAccountRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregation_source_isSet) {
        obj.insert(QString("aggregationSource"), ::OpenAPI::toJsonValue(m_aggregation_source));
    }
    if (m_consent_id_isSet) {
        obj.insert(QString("consentId"), ::OpenAPI::toJsonValue(m_consent_id));
    }
    if (m_dataset.size() > 0) {
        obj.insert(QString("dataset"), ::OpenAPI::toJsonValue(m_dataset));
    }
    if (m_dataset_name.size() > 0) {
        obj.insert(QString("datasetName"), ::OpenAPI::toJsonValue(m_dataset_name));
    }
    if (m_field.size() > 0) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_preferences.isSet()) {
        obj.insert(QString("preferences"), ::OpenAPI::toJsonValue(m_preferences));
    }
    return obj;
}

QString OAIProviderAccountRequest::getAggregationSource() const {
    return m_aggregation_source;
}
void OAIProviderAccountRequest::setAggregationSource(const QString &aggregation_source) {
    m_aggregation_source = aggregation_source;
    m_aggregation_source_isSet = true;
}

bool OAIProviderAccountRequest::is_aggregation_source_Set() const{
    return m_aggregation_source_isSet;
}

bool OAIProviderAccountRequest::is_aggregation_source_Valid() const{
    return m_aggregation_source_isValid;
}

qint64 OAIProviderAccountRequest::getConsentId() const {
    return m_consent_id;
}
void OAIProviderAccountRequest::setConsentId(const qint64 &consent_id) {
    m_consent_id = consent_id;
    m_consent_id_isSet = true;
}

bool OAIProviderAccountRequest::is_consent_id_Set() const{
    return m_consent_id_isSet;
}

bool OAIProviderAccountRequest::is_consent_id_Valid() const{
    return m_consent_id_isValid;
}

QList<OAIProvidersDataset> OAIProviderAccountRequest::getDataset() const {
    return m_dataset;
}
void OAIProviderAccountRequest::setDataset(const QList<OAIProvidersDataset> &dataset) {
    m_dataset = dataset;
    m_dataset_isSet = true;
}

bool OAIProviderAccountRequest::is_dataset_Set() const{
    return m_dataset_isSet;
}

bool OAIProviderAccountRequest::is_dataset_Valid() const{
    return m_dataset_isValid;
}

QList<QString> OAIProviderAccountRequest::getDatasetName() const {
    return m_dataset_name;
}
void OAIProviderAccountRequest::setDatasetName(const QList<QString> &dataset_name) {
    m_dataset_name = dataset_name;
    m_dataset_name_isSet = true;
}

bool OAIProviderAccountRequest::is_dataset_name_Set() const{
    return m_dataset_name_isSet;
}

bool OAIProviderAccountRequest::is_dataset_name_Valid() const{
    return m_dataset_name_isValid;
}

QList<OAIField> OAIProviderAccountRequest::getField() const {
    return m_field;
}
void OAIProviderAccountRequest::setField(const QList<OAIField> &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIProviderAccountRequest::is_field_Set() const{
    return m_field_isSet;
}

bool OAIProviderAccountRequest::is_field_Valid() const{
    return m_field_isValid;
}

OAIProviderAccountPreferences OAIProviderAccountRequest::getPreferences() const {
    return m_preferences;
}
void OAIProviderAccountRequest::setPreferences(const OAIProviderAccountPreferences &preferences) {
    m_preferences = preferences;
    m_preferences_isSet = true;
}

bool OAIProviderAccountRequest::is_preferences_Set() const{
    return m_preferences_isSet;
}

bool OAIProviderAccountRequest::is_preferences_Valid() const{
    return m_preferences_isValid;
}

bool OAIProviderAccountRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregation_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_field.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProviderAccountRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_field_isValid && true;
}

} // namespace OpenAPI
