/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuleClause.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuleClause::OAIRuleClause(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuleClause::OAIRuleClause() {
    this->initializeModel();
}

OAIRuleClause::~OAIRuleClause() {}

void OAIRuleClause::initializeModel() {

    m_field_isSet = false;
    m_field_isValid = false;

    m_field_value_isSet = false;
    m_field_value_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_rule_clause_id_isSet = false;
    m_rule_clause_id_isValid = false;

    m_user_defined_rule_id_isSet = false;
    m_user_defined_rule_id_isValid = false;
}

void OAIRuleClause::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRuleClause::fromJsonObject(QJsonObject json) {

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_field_value_isValid = ::OpenAPI::fromJsonValue(m_field_value, json[QString("fieldValue")]);
    m_field_value_isSet = !json[QString("fieldValue")].isNull() && m_field_value_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_rule_clause_id_isValid = ::OpenAPI::fromJsonValue(m_rule_clause_id, json[QString("ruleClauseId")]);
    m_rule_clause_id_isSet = !json[QString("ruleClauseId")].isNull() && m_rule_clause_id_isValid;

    m_user_defined_rule_id_isValid = ::OpenAPI::fromJsonValue(m_user_defined_rule_id, json[QString("userDefinedRuleId")]);
    m_user_defined_rule_id_isSet = !json[QString("userDefinedRuleId")].isNull() && m_user_defined_rule_id_isValid;
}

QString OAIRuleClause::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRuleClause::asJsonObject() const {
    QJsonObject obj;
    if (m_field_isSet) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_field_value_isSet) {
        obj.insert(QString("fieldValue"), ::OpenAPI::toJsonValue(m_field_value));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_rule_clause_id_isSet) {
        obj.insert(QString("ruleClauseId"), ::OpenAPI::toJsonValue(m_rule_clause_id));
    }
    if (m_user_defined_rule_id_isSet) {
        obj.insert(QString("userDefinedRuleId"), ::OpenAPI::toJsonValue(m_user_defined_rule_id));
    }
    return obj;
}

QString OAIRuleClause::getField() const {
    return m_field;
}
void OAIRuleClause::setField(const QString &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIRuleClause::is_field_Set() const{
    return m_field_isSet;
}

bool OAIRuleClause::is_field_Valid() const{
    return m_field_isValid;
}

QString OAIRuleClause::getFieldValue() const {
    return m_field_value;
}
void OAIRuleClause::setFieldValue(const QString &field_value) {
    m_field_value = field_value;
    m_field_value_isSet = true;
}

bool OAIRuleClause::is_field_value_Set() const{
    return m_field_value_isSet;
}

bool OAIRuleClause::is_field_value_Valid() const{
    return m_field_value_isValid;
}

QString OAIRuleClause::getOperation() const {
    return m_operation;
}
void OAIRuleClause::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIRuleClause::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIRuleClause::is_operation_Valid() const{
    return m_operation_isValid;
}

qint64 OAIRuleClause::getRuleClauseId() const {
    return m_rule_clause_id;
}
void OAIRuleClause::setRuleClauseId(const qint64 &rule_clause_id) {
    m_rule_clause_id = rule_clause_id;
    m_rule_clause_id_isSet = true;
}

bool OAIRuleClause::is_rule_clause_id_Set() const{
    return m_rule_clause_id_isSet;
}

bool OAIRuleClause::is_rule_clause_id_Valid() const{
    return m_rule_clause_id_isValid;
}

qint64 OAIRuleClause::getUserDefinedRuleId() const {
    return m_user_defined_rule_id;
}
void OAIRuleClause::setUserDefinedRuleId(const qint64 &user_defined_rule_id) {
    m_user_defined_rule_id = user_defined_rule_id;
    m_user_defined_rule_id_isSet = true;
}

bool OAIRuleClause::is_user_defined_rule_id_Set() const{
    return m_user_defined_rule_id_isSet;
}

bool OAIRuleClause::is_user_defined_rule_id_Valid() const{
    return m_user_defined_rule_id_isValid;
}

bool OAIRuleClause::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_clause_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_defined_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRuleClause::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
