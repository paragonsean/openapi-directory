/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHoldingTypeListResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHoldingTypeListResponse::OAIHoldingTypeListResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHoldingTypeListResponse::OAIHoldingTypeListResponse() {
    this->initializeModel();
}

OAIHoldingTypeListResponse::~OAIHoldingTypeListResponse() {}

void OAIHoldingTypeListResponse::initializeModel() {

    m_holding_type_isSet = false;
    m_holding_type_isValid = false;
}

void OAIHoldingTypeListResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHoldingTypeListResponse::fromJsonObject(QJsonObject json) {

    m_holding_type_isValid = ::OpenAPI::fromJsonValue(m_holding_type, json[QString("holdingType")]);
    m_holding_type_isSet = !json[QString("holdingType")].isNull() && m_holding_type_isValid;
}

QString OAIHoldingTypeListResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHoldingTypeListResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_holding_type.size() > 0) {
        obj.insert(QString("holdingType"), ::OpenAPI::toJsonValue(m_holding_type));
    }
    return obj;
}

QList<QString> OAIHoldingTypeListResponse::getHoldingType() const {
    return m_holding_type;
}
void OAIHoldingTypeListResponse::setHoldingType(const QList<QString> &holding_type) {
    m_holding_type = holding_type;
    m_holding_type_isSet = true;
}

bool OAIHoldingTypeListResponse::is_holding_type_Set() const{
    return m_holding_type_isSet;
}

bool OAIHoldingTypeListResponse::is_holding_type_Valid() const{
    return m_holding_type_isValid;
}

bool OAIHoldingTypeListResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_holding_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHoldingTypeListResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
