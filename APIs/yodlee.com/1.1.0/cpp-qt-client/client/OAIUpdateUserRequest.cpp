/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateUserRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateUserRequest::OAIUpdateUserRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateUserRequest::OAIUpdateUserRequest() {
    this->initializeModel();
}

OAIUpdateUserRequest::~OAIUpdateUserRequest() {}

void OAIUpdateUserRequest::initializeModel() {

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIUpdateUserRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateUserRequest::fromJsonObject(QJsonObject json) {

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIUpdateUserRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateUserRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIUpdateUserRegistration OAIUpdateUserRequest::getUser() const {
    return m_user;
}
void OAIUpdateUserRequest::setUser(const OAIUpdateUserRegistration &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIUpdateUserRequest::is_user_Set() const{
    return m_user_isSet;
}

bool OAIUpdateUserRequest::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIUpdateUserRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateUserRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_user_isValid && true;
}

} // namespace OpenAPI
