/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICobrandLoginRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICobrandLoginRequest::OAICobrandLoginRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICobrandLoginRequest::OAICobrandLoginRequest() {
    this->initializeModel();
}

OAICobrandLoginRequest::~OAICobrandLoginRequest() {}

void OAICobrandLoginRequest::initializeModel() {

    m_cobrand_isSet = false;
    m_cobrand_isValid = false;
}

void OAICobrandLoginRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICobrandLoginRequest::fromJsonObject(QJsonObject json) {

    m_cobrand_isValid = ::OpenAPI::fromJsonValue(m_cobrand, json[QString("cobrand")]);
    m_cobrand_isSet = !json[QString("cobrand")].isNull() && m_cobrand_isValid;
}

QString OAICobrandLoginRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICobrandLoginRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cobrand.isSet()) {
        obj.insert(QString("cobrand"), ::OpenAPI::toJsonValue(m_cobrand));
    }
    return obj;
}

OAICobrand OAICobrandLoginRequest::getCobrand() const {
    return m_cobrand;
}
void OAICobrandLoginRequest::setCobrand(const OAICobrand &cobrand) {
    m_cobrand = cobrand;
    m_cobrand_isSet = true;
}

bool OAICobrandLoginRequest::is_cobrand_Set() const{
    return m_cobrand_isSet;
}

bool OAICobrandLoginRequest::is_cobrand_Valid() const{
    return m_cobrand_isValid;
}

bool OAICobrandLoginRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cobrand.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICobrandLoginRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cobrand_isValid && true;
}

} // namespace OpenAPI
