/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMerchant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMerchant::OAIMerchant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMerchant::OAIMerchant() {
    this->initializeModel();
}

OAIMerchant::~OAIMerchant() {}

void OAIMerchant::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_category_label_isSet = false;
    m_category_label_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_coordinates_isSet = false;
    m_coordinates_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAIMerchant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMerchant::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_category_label_isValid = ::OpenAPI::fromJsonValue(m_category_label, json[QString("categoryLabel")]);
    m_category_label_isSet = !json[QString("categoryLabel")].isNull() && m_category_label_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_coordinates_isValid = ::OpenAPI::fromJsonValue(m_coordinates, json[QString("coordinates")]);
    m_coordinates_isSet = !json[QString("coordinates")].isNull() && m_coordinates_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAIMerchant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMerchant::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_category_label.size() > 0) {
        obj.insert(QString("categoryLabel"), ::OpenAPI::toJsonValue(m_category_label));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_coordinates.isSet()) {
        obj.insert(QString("coordinates"), ::OpenAPI::toJsonValue(m_coordinates));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

OAIAccountAddress OAIMerchant::getAddress() const {
    return m_address;
}
void OAIMerchant::setAddress(const OAIAccountAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIMerchant::is_address_Set() const{
    return m_address_isSet;
}

bool OAIMerchant::is_address_Valid() const{
    return m_address_isValid;
}

QList<QString> OAIMerchant::getCategoryLabel() const {
    return m_category_label;
}
void OAIMerchant::setCategoryLabel(const QList<QString> &category_label) {
    m_category_label = category_label;
    m_category_label_isSet = true;
}

bool OAIMerchant::is_category_label_Set() const{
    return m_category_label_isSet;
}

bool OAIMerchant::is_category_label_Valid() const{
    return m_category_label_isValid;
}

OAIContact OAIMerchant::getContact() const {
    return m_contact;
}
void OAIMerchant::setContact(const OAIContact &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIMerchant::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIMerchant::is_contact_Valid() const{
    return m_contact_isValid;
}

OAICoordinates OAIMerchant::getCoordinates() const {
    return m_coordinates;
}
void OAIMerchant::setCoordinates(const OAICoordinates &coordinates) {
    m_coordinates = coordinates;
    m_coordinates_isSet = true;
}

bool OAIMerchant::is_coordinates_Set() const{
    return m_coordinates_isSet;
}

bool OAIMerchant::is_coordinates_Valid() const{
    return m_coordinates_isValid;
}

QString OAIMerchant::getId() const {
    return m_id;
}
void OAIMerchant::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMerchant::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMerchant::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMerchant::getName() const {
    return m_name;
}
void OAIMerchant::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMerchant::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMerchant::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMerchant::getSource() const {
    return m_source;
}
void OAIMerchant::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIMerchant::is_source_Set() const{
    return m_source_isSet;
}

bool OAIMerchant::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIMerchant::getWebsite() const {
    return m_website;
}
void OAIMerchant::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIMerchant::is_website_Set() const{
    return m_website_isSet;
}

bool OAIMerchant::is_website_Valid() const{
    return m_website_isValid;
}

bool OAIMerchant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_label.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_coordinates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMerchant::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
