/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerifyTransactionCriteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerifyTransactionCriteria::OAIVerifyTransactionCriteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerifyTransactionCriteria::OAIVerifyTransactionCriteria() {
    this->initializeModel();
}

OAIVerifyTransactionCriteria::~OAIVerifyTransactionCriteria() {}

void OAIVerifyTransactionCriteria::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_base_type_isSet = false;
    m_base_type_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_date_variance_isSet = false;
    m_date_variance_isValid = false;

    m_keyword_isSet = false;
    m_keyword_isValid = false;

    m_matched_isSet = false;
    m_matched_isValid = false;

    m_verified_transaction_isSet = false;
    m_verified_transaction_isValid = false;
}

void OAIVerifyTransactionCriteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerifyTransactionCriteria::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_base_type_isValid = ::OpenAPI::fromJsonValue(m_base_type, json[QString("baseType")]);
    m_base_type_isSet = !json[QString("baseType")].isNull() && m_base_type_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_date_variance_isValid = ::OpenAPI::fromJsonValue(m_date_variance, json[QString("dateVariance")]);
    m_date_variance_isSet = !json[QString("dateVariance")].isNull() && m_date_variance_isValid;

    m_keyword_isValid = ::OpenAPI::fromJsonValue(m_keyword, json[QString("keyword")]);
    m_keyword_isSet = !json[QString("keyword")].isNull() && m_keyword_isValid;

    m_matched_isValid = ::OpenAPI::fromJsonValue(m_matched, json[QString("matched")]);
    m_matched_isSet = !json[QString("matched")].isNull() && m_matched_isValid;

    m_verified_transaction_isValid = ::OpenAPI::fromJsonValue(m_verified_transaction, json[QString("verifiedTransaction")]);
    m_verified_transaction_isSet = !json[QString("verifiedTransaction")].isNull() && m_verified_transaction_isValid;
}

QString OAIVerifyTransactionCriteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerifyTransactionCriteria::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_base_type_isSet) {
        obj.insert(QString("baseType"), ::OpenAPI::toJsonValue(m_base_type));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_date_variance_isSet) {
        obj.insert(QString("dateVariance"), ::OpenAPI::toJsonValue(m_date_variance));
    }
    if (m_keyword_isSet) {
        obj.insert(QString("keyword"), ::OpenAPI::toJsonValue(m_keyword));
    }
    if (m_matched_isSet) {
        obj.insert(QString("matched"), ::OpenAPI::toJsonValue(m_matched));
    }
    if (m_verified_transaction.size() > 0) {
        obj.insert(QString("verifiedTransaction"), ::OpenAPI::toJsonValue(m_verified_transaction));
    }
    return obj;
}

double OAIVerifyTransactionCriteria::getAmount() const {
    return m_amount;
}
void OAIVerifyTransactionCriteria::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIVerifyTransactionCriteria::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIVerifyTransactionCriteria::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIVerifyTransactionCriteria::getBaseType() const {
    return m_base_type;
}
void OAIVerifyTransactionCriteria::setBaseType(const QString &base_type) {
    m_base_type = base_type;
    m_base_type_isSet = true;
}

bool OAIVerifyTransactionCriteria::is_base_type_Set() const{
    return m_base_type_isSet;
}

bool OAIVerifyTransactionCriteria::is_base_type_Valid() const{
    return m_base_type_isValid;
}

QString OAIVerifyTransactionCriteria::getDate() const {
    return m_date;
}
void OAIVerifyTransactionCriteria::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIVerifyTransactionCriteria::is_date_Set() const{
    return m_date_isSet;
}

bool OAIVerifyTransactionCriteria::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIVerifyTransactionCriteria::getDateVariance() const {
    return m_date_variance;
}
void OAIVerifyTransactionCriteria::setDateVariance(const QString &date_variance) {
    m_date_variance = date_variance;
    m_date_variance_isSet = true;
}

bool OAIVerifyTransactionCriteria::is_date_variance_Set() const{
    return m_date_variance_isSet;
}

bool OAIVerifyTransactionCriteria::is_date_variance_Valid() const{
    return m_date_variance_isValid;
}

QString OAIVerifyTransactionCriteria::getKeyword() const {
    return m_keyword;
}
void OAIVerifyTransactionCriteria::setKeyword(const QString &keyword) {
    m_keyword = keyword;
    m_keyword_isSet = true;
}

bool OAIVerifyTransactionCriteria::is_keyword_Set() const{
    return m_keyword_isSet;
}

bool OAIVerifyTransactionCriteria::is_keyword_Valid() const{
    return m_keyword_isValid;
}

QString OAIVerifyTransactionCriteria::getMatched() const {
    return m_matched;
}
void OAIVerifyTransactionCriteria::setMatched(const QString &matched) {
    m_matched = matched;
    m_matched_isSet = true;
}

bool OAIVerifyTransactionCriteria::is_matched_Set() const{
    return m_matched_isSet;
}

bool OAIVerifyTransactionCriteria::is_matched_Valid() const{
    return m_matched_isValid;
}

QList<OAITransaction> OAIVerifyTransactionCriteria::getVerifiedTransaction() const {
    return m_verified_transaction;
}
void OAIVerifyTransactionCriteria::setVerifiedTransaction(const QList<OAITransaction> &verified_transaction) {
    m_verified_transaction = verified_transaction;
    m_verified_transaction_isSet = true;
}

bool OAIVerifyTransactionCriteria::is_verified_transaction_Set() const{
    return m_verified_transaction_isSet;
}

bool OAIVerifyTransactionCriteria::is_verified_transaction_Valid() const{
    return m_verified_transaction_isValid;
}

bool OAIVerifyTransactionCriteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_variance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keyword_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matched_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_transaction.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerifyTransactionCriteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_date_isValid && true;
}

} // namespace OpenAPI
