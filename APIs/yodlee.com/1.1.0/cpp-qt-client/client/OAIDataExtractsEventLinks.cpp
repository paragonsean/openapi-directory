/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataExtractsEventLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataExtractsEventLinks::OAIDataExtractsEventLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataExtractsEventLinks::OAIDataExtractsEventLinks() {
    this->initializeModel();
}

OAIDataExtractsEventLinks::~OAIDataExtractsEventLinks() {}

void OAIDataExtractsEventLinks::initializeModel() {

    m_href_isSet = false;
    m_href_isValid = false;

    m_method_type_isSet = false;
    m_method_type_isValid = false;

    m_rel_isSet = false;
    m_rel_isValid = false;
}

void OAIDataExtractsEventLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataExtractsEventLinks::fromJsonObject(QJsonObject json) {

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_method_type_isValid = ::OpenAPI::fromJsonValue(m_method_type, json[QString("methodType")]);
    m_method_type_isSet = !json[QString("methodType")].isNull() && m_method_type_isValid;

    m_rel_isValid = ::OpenAPI::fromJsonValue(m_rel, json[QString("rel")]);
    m_rel_isSet = !json[QString("rel")].isNull() && m_rel_isValid;
}

QString OAIDataExtractsEventLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataExtractsEventLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_method_type_isSet) {
        obj.insert(QString("methodType"), ::OpenAPI::toJsonValue(m_method_type));
    }
    if (m_rel_isSet) {
        obj.insert(QString("rel"), ::OpenAPI::toJsonValue(m_rel));
    }
    return obj;
}

QString OAIDataExtractsEventLinks::getHref() const {
    return m_href;
}
void OAIDataExtractsEventLinks::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIDataExtractsEventLinks::is_href_Set() const{
    return m_href_isSet;
}

bool OAIDataExtractsEventLinks::is_href_Valid() const{
    return m_href_isValid;
}

QString OAIDataExtractsEventLinks::getMethodType() const {
    return m_method_type;
}
void OAIDataExtractsEventLinks::setMethodType(const QString &method_type) {
    m_method_type = method_type;
    m_method_type_isSet = true;
}

bool OAIDataExtractsEventLinks::is_method_type_Set() const{
    return m_method_type_isSet;
}

bool OAIDataExtractsEventLinks::is_method_type_Valid() const{
    return m_method_type_isValid;
}

QString OAIDataExtractsEventLinks::getRel() const {
    return m_rel;
}
void OAIDataExtractsEventLinks::setRel(const QString &rel) {
    m_rel = rel;
    m_rel_isSet = true;
}

bool OAIDataExtractsEventLinks::is_rel_Set() const{
    return m_rel_isSet;
}

bool OAIDataExtractsEventLinks::is_rel_Valid() const{
    return m_rel_isValid;
}

bool OAIDataExtractsEventLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rel_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataExtractsEventLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
