/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescription::OAIDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescription::OAIDescription() {
    this->initializeModel();
}

OAIDescription::~OAIDescription() {}

void OAIDescription::initializeModel() {

    m_consumer_isSet = false;
    m_consumer_isValid = false;

    m_original_isSet = false;
    m_original_isValid = false;

    m_security_isSet = false;
    m_security_isValid = false;

    m_simple_isSet = false;
    m_simple_isValid = false;
}

void OAIDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescription::fromJsonObject(QJsonObject json) {

    m_consumer_isValid = ::OpenAPI::fromJsonValue(m_consumer, json[QString("consumer")]);
    m_consumer_isSet = !json[QString("consumer")].isNull() && m_consumer_isValid;

    m_original_isValid = ::OpenAPI::fromJsonValue(m_original, json[QString("original")]);
    m_original_isSet = !json[QString("original")].isNull() && m_original_isValid;

    m_security_isValid = ::OpenAPI::fromJsonValue(m_security, json[QString("security")]);
    m_security_isSet = !json[QString("security")].isNull() && m_security_isValid;

    m_simple_isValid = ::OpenAPI::fromJsonValue(m_simple, json[QString("simple")]);
    m_simple_isSet = !json[QString("simple")].isNull() && m_simple_isValid;
}

QString OAIDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_consumer_isSet) {
        obj.insert(QString("consumer"), ::OpenAPI::toJsonValue(m_consumer));
    }
    if (m_original_isSet) {
        obj.insert(QString("original"), ::OpenAPI::toJsonValue(m_original));
    }
    if (m_security_isSet) {
        obj.insert(QString("security"), ::OpenAPI::toJsonValue(m_security));
    }
    if (m_simple_isSet) {
        obj.insert(QString("simple"), ::OpenAPI::toJsonValue(m_simple));
    }
    return obj;
}

QString OAIDescription::getConsumer() const {
    return m_consumer;
}
void OAIDescription::setConsumer(const QString &consumer) {
    m_consumer = consumer;
    m_consumer_isSet = true;
}

bool OAIDescription::is_consumer_Set() const{
    return m_consumer_isSet;
}

bool OAIDescription::is_consumer_Valid() const{
    return m_consumer_isValid;
}

QString OAIDescription::getOriginal() const {
    return m_original;
}
void OAIDescription::setOriginal(const QString &original) {
    m_original = original;
    m_original_isSet = true;
}

bool OAIDescription::is_original_Set() const{
    return m_original_isSet;
}

bool OAIDescription::is_original_Valid() const{
    return m_original_isValid;
}

QString OAIDescription::getSecurity() const {
    return m_security;
}
void OAIDescription::setSecurity(const QString &security) {
    m_security = security;
    m_security_isSet = true;
}

bool OAIDescription::is_security_Set() const{
    return m_security_isSet;
}

bool OAIDescription::is_security_Valid() const{
    return m_security_isValid;
}

QString OAIDescription::getSimple() const {
    return m_simple;
}
void OAIDescription::setSimple(const QString &simple) {
    m_simple = simple;
    m_simple_isSet = true;
}

bool OAIDescription::is_simple_Set() const{
    return m_simple_isSet;
}

bool OAIDescription::is_simple_Valid() const{
    return m_simple_isValid;
}

bool OAIDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consumer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_simple_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
