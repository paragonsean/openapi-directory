/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataExtractsEventUserData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataExtractsEventUserData::OAIDataExtractsEventUserData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataExtractsEventUserData::OAIDataExtractsEventUserData() {
    this->initializeModel();
}

OAIDataExtractsEventUserData::~OAIDataExtractsEventUserData() {}

void OAIDataExtractsEventUserData::initializeModel() {

    m_links_isSet = false;
    m_links_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIDataExtractsEventUserData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataExtractsEventUserData::fromJsonObject(QJsonObject json) {

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIDataExtractsEventUserData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataExtractsEventUserData::asJsonObject() const {
    QJsonObject obj;
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QList<OAIDataExtractsEventLinks> OAIDataExtractsEventUserData::getLinks() const {
    return m_links;
}
void OAIDataExtractsEventUserData::setLinks(const QList<OAIDataExtractsEventLinks> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIDataExtractsEventUserData::is_links_Set() const{
    return m_links_isSet;
}

bool OAIDataExtractsEventUserData::is_links_Valid() const{
    return m_links_isValid;
}

OAIDataExtractsUser OAIDataExtractsEventUserData::getUser() const {
    return m_user;
}
void OAIDataExtractsEventUserData::setUser(const OAIDataExtractsUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIDataExtractsEventUserData::is_user_Set() const{
    return m_user_isSet;
}

bool OAIDataExtractsEventUserData::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIDataExtractsEventUserData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataExtractsEventUserData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
