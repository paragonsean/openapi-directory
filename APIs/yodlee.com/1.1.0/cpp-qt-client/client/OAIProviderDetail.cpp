/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProviderDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProviderDetail::OAIProviderDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProviderDetail::OAIProviderDetail() {
    this->initializeModel();
}

OAIProviderDetail::~OAIProviderDetail() {}

void OAIProviderDetail::initializeModel() {

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_account_type_isSet = false;
    m_account_type_isValid = false;

    m_associated_provider_ids_isSet = false;
    m_associated_provider_ids_isValid = false;

    m_auth_parameter_isSet = false;
    m_auth_parameter_isValid = false;

    m_auth_type_isSet = false;
    m_auth_type_isValid = false;

    m_base_url_isSet = false;
    m_base_url_isValid = false;

    m_capability_isSet = false;
    m_capability_isValid = false;

    m_country_iso_code_isSet = false;
    m_country_iso_code_isValid = false;

    m_dataset_isSet = false;
    m_dataset_isValid = false;

    m_favicon_isSet = false;
    m_favicon_isValid = false;

    m_help_isSet = false;
    m_help_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_added_by_user_isSet = false;
    m_is_added_by_user_isValid = false;

    m_is_auto_refresh_enabled_isSet = false;
    m_is_auto_refresh_enabled_isValid = false;

    m_is_consent_required_isSet = false;
    m_is_consent_required_isValid = false;

    m_language_iso_code_isSet = false;
    m_language_iso_code_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_login_form_isSet = false;
    m_login_form_isValid = false;

    m_login_url_isSet = false;
    m_login_url_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_primary_language_iso_code_isSet = false;
    m_primary_language_iso_code_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIProviderDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProviderDetail::fromJsonObject(QJsonObject json) {

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("PRIORITY")]);
    m_priority_isSet = !json[QString("PRIORITY")].isNull() && m_priority_isValid;

    m_account_type_isValid = ::OpenAPI::fromJsonValue(m_account_type, json[QString("accountType")]);
    m_account_type_isSet = !json[QString("accountType")].isNull() && m_account_type_isValid;

    m_associated_provider_ids_isValid = ::OpenAPI::fromJsonValue(m_associated_provider_ids, json[QString("associatedProviderIds")]);
    m_associated_provider_ids_isSet = !json[QString("associatedProviderIds")].isNull() && m_associated_provider_ids_isValid;

    m_auth_parameter_isValid = ::OpenAPI::fromJsonValue(m_auth_parameter, json[QString("authParameter")]);
    m_auth_parameter_isSet = !json[QString("authParameter")].isNull() && m_auth_parameter_isValid;

    m_auth_type_isValid = ::OpenAPI::fromJsonValue(m_auth_type, json[QString("authType")]);
    m_auth_type_isSet = !json[QString("authType")].isNull() && m_auth_type_isValid;

    m_base_url_isValid = ::OpenAPI::fromJsonValue(m_base_url, json[QString("baseUrl")]);
    m_base_url_isSet = !json[QString("baseUrl")].isNull() && m_base_url_isValid;

    m_capability_isValid = ::OpenAPI::fromJsonValue(m_capability, json[QString("capability")]);
    m_capability_isSet = !json[QString("capability")].isNull() && m_capability_isValid;

    m_country_iso_code_isValid = ::OpenAPI::fromJsonValue(m_country_iso_code, json[QString("countryISOCode")]);
    m_country_iso_code_isSet = !json[QString("countryISOCode")].isNull() && m_country_iso_code_isValid;

    m_dataset_isValid = ::OpenAPI::fromJsonValue(m_dataset, json[QString("dataset")]);
    m_dataset_isSet = !json[QString("dataset")].isNull() && m_dataset_isValid;

    m_favicon_isValid = ::OpenAPI::fromJsonValue(m_favicon, json[QString("favicon")]);
    m_favicon_isSet = !json[QString("favicon")].isNull() && m_favicon_isValid;

    m_help_isValid = ::OpenAPI::fromJsonValue(m_help, json[QString("help")]);
    m_help_isSet = !json[QString("help")].isNull() && m_help_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_added_by_user_isValid = ::OpenAPI::fromJsonValue(m_is_added_by_user, json[QString("isAddedByUser")]);
    m_is_added_by_user_isSet = !json[QString("isAddedByUser")].isNull() && m_is_added_by_user_isValid;

    m_is_auto_refresh_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_auto_refresh_enabled, json[QString("isAutoRefreshEnabled")]);
    m_is_auto_refresh_enabled_isSet = !json[QString("isAutoRefreshEnabled")].isNull() && m_is_auto_refresh_enabled_isValid;

    m_is_consent_required_isValid = ::OpenAPI::fromJsonValue(m_is_consent_required, json[QString("isConsentRequired")]);
    m_is_consent_required_isSet = !json[QString("isConsentRequired")].isNull() && m_is_consent_required_isValid;

    m_language_iso_code_isValid = ::OpenAPI::fromJsonValue(m_language_iso_code, json[QString("languageISOCode")]);
    m_language_iso_code_isSet = !json[QString("languageISOCode")].isNull() && m_language_iso_code_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_login_form_isValid = ::OpenAPI::fromJsonValue(m_login_form, json[QString("loginForm")]);
    m_login_form_isSet = !json[QString("loginForm")].isNull() && m_login_form_isValid;

    m_login_url_isValid = ::OpenAPI::fromJsonValue(m_login_url, json[QString("loginUrl")]);
    m_login_url_isSet = !json[QString("loginUrl")].isNull() && m_login_url_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("logo")]);
    m_logo_isSet = !json[QString("logo")].isNull() && m_logo_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_primary_language_iso_code_isValid = ::OpenAPI::fromJsonValue(m_primary_language_iso_code, json[QString("primaryLanguageISOCode")]);
    m_primary_language_iso_code_isSet = !json[QString("primaryLanguageISOCode")].isNull() && m_primary_language_iso_code_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIProviderDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProviderDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_priority_isSet) {
        obj.insert(QString("PRIORITY"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_account_type.size() > 0) {
        obj.insert(QString("accountType"), ::OpenAPI::toJsonValue(m_account_type));
    }
    if (m_associated_provider_ids.size() > 0) {
        obj.insert(QString("associatedProviderIds"), ::OpenAPI::toJsonValue(m_associated_provider_ids));
    }
    if (m_auth_parameter.size() > 0) {
        obj.insert(QString("authParameter"), ::OpenAPI::toJsonValue(m_auth_parameter));
    }
    if (m_auth_type_isSet) {
        obj.insert(QString("authType"), ::OpenAPI::toJsonValue(m_auth_type));
    }
    if (m_base_url_isSet) {
        obj.insert(QString("baseUrl"), ::OpenAPI::toJsonValue(m_base_url));
    }
    if (m_capability.size() > 0) {
        obj.insert(QString("capability"), ::OpenAPI::toJsonValue(m_capability));
    }
    if (m_country_iso_code_isSet) {
        obj.insert(QString("countryISOCode"), ::OpenAPI::toJsonValue(m_country_iso_code));
    }
    if (m_dataset.size() > 0) {
        obj.insert(QString("dataset"), ::OpenAPI::toJsonValue(m_dataset));
    }
    if (m_favicon_isSet) {
        obj.insert(QString("favicon"), ::OpenAPI::toJsonValue(m_favicon));
    }
    if (m_help_isSet) {
        obj.insert(QString("help"), ::OpenAPI::toJsonValue(m_help));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_added_by_user_isSet) {
        obj.insert(QString("isAddedByUser"), ::OpenAPI::toJsonValue(m_is_added_by_user));
    }
    if (m_is_auto_refresh_enabled_isSet) {
        obj.insert(QString("isAutoRefreshEnabled"), ::OpenAPI::toJsonValue(m_is_auto_refresh_enabled));
    }
    if (m_is_consent_required_isSet) {
        obj.insert(QString("isConsentRequired"), ::OpenAPI::toJsonValue(m_is_consent_required));
    }
    if (m_language_iso_code_isSet) {
        obj.insert(QString("languageISOCode"), ::OpenAPI::toJsonValue(m_language_iso_code));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_login_form.size() > 0) {
        obj.insert(QString("loginForm"), ::OpenAPI::toJsonValue(m_login_form));
    }
    if (m_login_url_isSet) {
        obj.insert(QString("loginUrl"), ::OpenAPI::toJsonValue(m_login_url));
    }
    if (m_logo_isSet) {
        obj.insert(QString("logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_primary_language_iso_code_isSet) {
        obj.insert(QString("primaryLanguageISOCode"), ::OpenAPI::toJsonValue(m_primary_language_iso_code));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIProviderDetail::getPriority() const {
    return m_priority;
}
void OAIProviderDetail::setPriority(const QString &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIProviderDetail::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIProviderDetail::is_priority_Valid() const{
    return m_priority_isValid;
}

QList<QString> OAIProviderDetail::getAccountType() const {
    return m_account_type;
}
void OAIProviderDetail::setAccountType(const QList<QString> &account_type) {
    m_account_type = account_type;
    m_account_type_isSet = true;
}

bool OAIProviderDetail::is_account_type_Set() const{
    return m_account_type_isSet;
}

bool OAIProviderDetail::is_account_type_Valid() const{
    return m_account_type_isValid;
}

QList<qint64> OAIProviderDetail::getAssociatedProviderIds() const {
    return m_associated_provider_ids;
}
void OAIProviderDetail::setAssociatedProviderIds(const QList<qint64> &associated_provider_ids) {
    m_associated_provider_ids = associated_provider_ids;
    m_associated_provider_ids_isSet = true;
}

bool OAIProviderDetail::is_associated_provider_ids_Set() const{
    return m_associated_provider_ids_isSet;
}

bool OAIProviderDetail::is_associated_provider_ids_Valid() const{
    return m_associated_provider_ids_isValid;
}

QList<QString> OAIProviderDetail::getAuthParameter() const {
    return m_auth_parameter;
}
void OAIProviderDetail::setAuthParameter(const QList<QString> &auth_parameter) {
    m_auth_parameter = auth_parameter;
    m_auth_parameter_isSet = true;
}

bool OAIProviderDetail::is_auth_parameter_Set() const{
    return m_auth_parameter_isSet;
}

bool OAIProviderDetail::is_auth_parameter_Valid() const{
    return m_auth_parameter_isValid;
}

QString OAIProviderDetail::getAuthType() const {
    return m_auth_type;
}
void OAIProviderDetail::setAuthType(const QString &auth_type) {
    m_auth_type = auth_type;
    m_auth_type_isSet = true;
}

bool OAIProviderDetail::is_auth_type_Set() const{
    return m_auth_type_isSet;
}

bool OAIProviderDetail::is_auth_type_Valid() const{
    return m_auth_type_isValid;
}

QString OAIProviderDetail::getBaseUrl() const {
    return m_base_url;
}
void OAIProviderDetail::setBaseUrl(const QString &base_url) {
    m_base_url = base_url;
    m_base_url_isSet = true;
}

bool OAIProviderDetail::is_base_url_Set() const{
    return m_base_url_isSet;
}

bool OAIProviderDetail::is_base_url_Valid() const{
    return m_base_url_isValid;
}

QList<OAICapability> OAIProviderDetail::getCapability() const {
    return m_capability;
}
void OAIProviderDetail::setCapability(const QList<OAICapability> &capability) {
    m_capability = capability;
    m_capability_isSet = true;
}

bool OAIProviderDetail::is_capability_Set() const{
    return m_capability_isSet;
}

bool OAIProviderDetail::is_capability_Valid() const{
    return m_capability_isValid;
}

QString OAIProviderDetail::getCountryIsoCode() const {
    return m_country_iso_code;
}
void OAIProviderDetail::setCountryIsoCode(const QString &country_iso_code) {
    m_country_iso_code = country_iso_code;
    m_country_iso_code_isSet = true;
}

bool OAIProviderDetail::is_country_iso_code_Set() const{
    return m_country_iso_code_isSet;
}

bool OAIProviderDetail::is_country_iso_code_Valid() const{
    return m_country_iso_code_isValid;
}

QList<OAIProvidersDataset> OAIProviderDetail::getDataset() const {
    return m_dataset;
}
void OAIProviderDetail::setDataset(const QList<OAIProvidersDataset> &dataset) {
    m_dataset = dataset;
    m_dataset_isSet = true;
}

bool OAIProviderDetail::is_dataset_Set() const{
    return m_dataset_isSet;
}

bool OAIProviderDetail::is_dataset_Valid() const{
    return m_dataset_isValid;
}

QString OAIProviderDetail::getFavicon() const {
    return m_favicon;
}
void OAIProviderDetail::setFavicon(const QString &favicon) {
    m_favicon = favicon;
    m_favicon_isSet = true;
}

bool OAIProviderDetail::is_favicon_Set() const{
    return m_favicon_isSet;
}

bool OAIProviderDetail::is_favicon_Valid() const{
    return m_favicon_isValid;
}

QString OAIProviderDetail::getHelp() const {
    return m_help;
}
void OAIProviderDetail::setHelp(const QString &help) {
    m_help = help;
    m_help_isSet = true;
}

bool OAIProviderDetail::is_help_Set() const{
    return m_help_isSet;
}

bool OAIProviderDetail::is_help_Valid() const{
    return m_help_isValid;
}

qint64 OAIProviderDetail::getId() const {
    return m_id;
}
void OAIProviderDetail::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProviderDetail::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProviderDetail::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProviderDetail::getIsAddedByUser() const {
    return m_is_added_by_user;
}
void OAIProviderDetail::setIsAddedByUser(const QString &is_added_by_user) {
    m_is_added_by_user = is_added_by_user;
    m_is_added_by_user_isSet = true;
}

bool OAIProviderDetail::is_is_added_by_user_Set() const{
    return m_is_added_by_user_isSet;
}

bool OAIProviderDetail::is_is_added_by_user_Valid() const{
    return m_is_added_by_user_isValid;
}

bool OAIProviderDetail::isIsAutoRefreshEnabled() const {
    return m_is_auto_refresh_enabled;
}
void OAIProviderDetail::setIsAutoRefreshEnabled(const bool &is_auto_refresh_enabled) {
    m_is_auto_refresh_enabled = is_auto_refresh_enabled;
    m_is_auto_refresh_enabled_isSet = true;
}

bool OAIProviderDetail::is_is_auto_refresh_enabled_Set() const{
    return m_is_auto_refresh_enabled_isSet;
}

bool OAIProviderDetail::is_is_auto_refresh_enabled_Valid() const{
    return m_is_auto_refresh_enabled_isValid;
}

bool OAIProviderDetail::isIsConsentRequired() const {
    return m_is_consent_required;
}
void OAIProviderDetail::setIsConsentRequired(const bool &is_consent_required) {
    m_is_consent_required = is_consent_required;
    m_is_consent_required_isSet = true;
}

bool OAIProviderDetail::is_is_consent_required_Set() const{
    return m_is_consent_required_isSet;
}

bool OAIProviderDetail::is_is_consent_required_Valid() const{
    return m_is_consent_required_isValid;
}

QString OAIProviderDetail::getLanguageIsoCode() const {
    return m_language_iso_code;
}
void OAIProviderDetail::setLanguageIsoCode(const QString &language_iso_code) {
    m_language_iso_code = language_iso_code;
    m_language_iso_code_isSet = true;
}

bool OAIProviderDetail::is_language_iso_code_Set() const{
    return m_language_iso_code_isSet;
}

bool OAIProviderDetail::is_language_iso_code_Valid() const{
    return m_language_iso_code_isValid;
}

QString OAIProviderDetail::getLastModified() const {
    return m_last_modified;
}
void OAIProviderDetail::setLastModified(const QString &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIProviderDetail::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIProviderDetail::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QList<OAILoginForm> OAIProviderDetail::getLoginForm() const {
    return m_login_form;
}
void OAIProviderDetail::setLoginForm(const QList<OAILoginForm> &login_form) {
    m_login_form = login_form;
    m_login_form_isSet = true;
}

bool OAIProviderDetail::is_login_form_Set() const{
    return m_login_form_isSet;
}

bool OAIProviderDetail::is_login_form_Valid() const{
    return m_login_form_isValid;
}

QString OAIProviderDetail::getLoginUrl() const {
    return m_login_url;
}
void OAIProviderDetail::setLoginUrl(const QString &login_url) {
    m_login_url = login_url;
    m_login_url_isSet = true;
}

bool OAIProviderDetail::is_login_url_Set() const{
    return m_login_url_isSet;
}

bool OAIProviderDetail::is_login_url_Valid() const{
    return m_login_url_isValid;
}

QString OAIProviderDetail::getLogo() const {
    return m_logo;
}
void OAIProviderDetail::setLogo(const QString &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAIProviderDetail::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAIProviderDetail::is_logo_Valid() const{
    return m_logo_isValid;
}

QString OAIProviderDetail::getName() const {
    return m_name;
}
void OAIProviderDetail::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProviderDetail::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProviderDetail::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProviderDetail::getPrimaryLanguageIsoCode() const {
    return m_primary_language_iso_code;
}
void OAIProviderDetail::setPrimaryLanguageIsoCode(const QString &primary_language_iso_code) {
    m_primary_language_iso_code = primary_language_iso_code;
    m_primary_language_iso_code_isSet = true;
}

bool OAIProviderDetail::is_primary_language_iso_code_Set() const{
    return m_primary_language_iso_code_isSet;
}

bool OAIProviderDetail::is_primary_language_iso_code_Valid() const{
    return m_primary_language_iso_code_isValid;
}

QString OAIProviderDetail::getStatus() const {
    return m_status;
}
void OAIProviderDetail::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIProviderDetail::is_status_Set() const{
    return m_status_isSet;
}

bool OAIProviderDetail::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIProviderDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_associated_provider_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_parameter.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capability.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_iso_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_favicon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_help_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_added_by_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_auto_refresh_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_consent_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_iso_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_form.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_language_iso_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProviderDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
