/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProvidersApi_H
#define OAI_OAIProvidersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIProviderDetailResponse.h"
#include "OAIProviderResponse.h"
#include "OAIProvidersCountResponse.h"
#include "OAIYodleeError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProvidersApi : public QObject {
    Q_OBJECT

public:
    OAIProvidersApi(const int timeOut = 0);
    ~OAIProvidersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  capability QString [optional]
    * @param[in]  datasetfilter QString [optional]
    * @param[in]  full_account_number_fields QString [optional]
    * @param[in]  institution_id qint64 [optional]
    * @param[in]  name QString [optional]
    * @param[in]  priority QString [optional]
    * @param[in]  provider_id QString [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void getAllProviders(const ::OpenAPI::OptionalParam<QString> &capability = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &datasetfilter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &full_account_number_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &institution_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &priority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &provider_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  provider_id qint64 [required]
    */
    virtual void getProvider(const qint64 &provider_id);

    /**
    * @param[in]  capability QString [optional]
    * @param[in]  datasetfilter QString [optional]
    * @param[in]  full_account_number_fields QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  priority QString [optional]
    */
    virtual void getProvidersCount(const ::OpenAPI::OptionalParam<QString> &capability = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &datasetfilter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &full_account_number_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &priority = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAllProvidersCallback(OAIHttpRequestWorker *worker);
    void getProviderCallback(OAIHttpRequestWorker *worker);
    void getProvidersCountCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAllProvidersSignal(OAIProviderResponse summary);
    void getProviderSignal(OAIProviderDetailResponse summary);
    void getProvidersCountSignal(OAIProvidersCountResponse summary);


    void getAllProvidersSignalFull(OAIHttpRequestWorker *worker, OAIProviderResponse summary);
    void getProviderSignalFull(OAIHttpRequestWorker *worker, OAIProviderDetailResponse summary);
    void getProvidersCountSignalFull(OAIHttpRequestWorker *worker, OAIProvidersCountResponse summary);

    Q_DECL_DEPRECATED_X("Use getAllProvidersSignalError() instead")
    void getAllProvidersSignalE(OAIProviderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllProvidersSignalError(OAIProviderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProviderSignalError() instead")
    void getProviderSignalE(OAIProviderDetailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProviderSignalError(OAIProviderDetailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProvidersCountSignalError() instead")
    void getProvidersCountSignalE(OAIProvidersCountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProvidersCountSignalError(OAIProvidersCountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAllProvidersSignalErrorFull() instead")
    void getAllProvidersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllProvidersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProviderSignalErrorFull() instead")
    void getProviderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProviderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProvidersCountSignalErrorFull() instead")
    void getProvidersCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProvidersCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
