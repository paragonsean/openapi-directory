/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRow::OAIRow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRow::OAIRow() {
    this->initializeModel();
}

OAIRow::~OAIRow() {}

void OAIRow::initializeModel() {

    m_field_isSet = false;
    m_field_isValid = false;

    m_field_row_choice_isSet = false;
    m_field_row_choice_isValid = false;

    m_form_isSet = false;
    m_form_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;
}

void OAIRow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRow::fromJsonObject(QJsonObject json) {

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_field_row_choice_isValid = ::OpenAPI::fromJsonValue(m_field_row_choice, json[QString("fieldRowChoice")]);
    m_field_row_choice_isSet = !json[QString("fieldRowChoice")].isNull() && m_field_row_choice_isValid;

    m_form_isValid = ::OpenAPI::fromJsonValue(m_form, json[QString("form")]);
    m_form_isSet = !json[QString("form")].isNull() && m_form_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;
}

QString OAIRow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRow::asJsonObject() const {
    QJsonObject obj;
    if (m_field.size() > 0) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_field_row_choice_isSet) {
        obj.insert(QString("fieldRowChoice"), ::OpenAPI::toJsonValue(m_field_row_choice));
    }
    if (m_form_isSet) {
        obj.insert(QString("form"), ::OpenAPI::toJsonValue(m_form));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    return obj;
}

QList<OAIField> OAIRow::getField() const {
    return m_field;
}
void OAIRow::setField(const QList<OAIField> &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIRow::is_field_Set() const{
    return m_field_isSet;
}

bool OAIRow::is_field_Valid() const{
    return m_field_isValid;
}

QString OAIRow::getFieldRowChoice() const {
    return m_field_row_choice;
}
void OAIRow::setFieldRowChoice(const QString &field_row_choice) {
    m_field_row_choice = field_row_choice;
    m_field_row_choice_isSet = true;
}

bool OAIRow::is_field_row_choice_Set() const{
    return m_field_row_choice_isSet;
}

bool OAIRow::is_field_row_choice_Valid() const{
    return m_field_row_choice_isValid;
}

QString OAIRow::getForm() const {
    return m_form;
}
void OAIRow::setForm(const QString &form) {
    m_form = form;
    m_form_isSet = true;
}

bool OAIRow::is_form_Set() const{
    return m_form_isSet;
}

bool OAIRow::is_form_Valid() const{
    return m_form_isValid;
}

QString OAIRow::getId() const {
    return m_id;
}
void OAIRow::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRow::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRow::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRow::getLabel() const {
    return m_label;
}
void OAIRow::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIRow::is_label_Set() const{
    return m_label_isSet;
}

bool OAIRow::is_label_Valid() const{
    return m_label_isValid;
}

bool OAIRow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_row_choice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
