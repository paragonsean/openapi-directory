/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessTokens.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessTokens::OAIAccessTokens(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessTokens::OAIAccessTokens() {
    this->initializeModel();
}

OAIAccessTokens::~OAIAccessTokens() {}

void OAIAccessTokens::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIAccessTokens::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessTokens::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIAccessTokens::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessTokens::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIAccessTokens::getAppId() const {
    return m_app_id;
}
void OAIAccessTokens::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIAccessTokens::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIAccessTokens::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIAccessTokens::getUrl() const {
    return m_url;
}
void OAIAccessTokens::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAccessTokens::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAccessTokens::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIAccessTokens::getValue() const {
    return m_value;
}
void OAIAccessTokens::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIAccessTokens::is_value_Set() const{
    return m_value_isSet;
}

bool OAIAccessTokens::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIAccessTokens::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessTokens::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
