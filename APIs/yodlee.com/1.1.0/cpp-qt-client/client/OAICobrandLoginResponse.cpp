/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICobrandLoginResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICobrandLoginResponse::OAICobrandLoginResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICobrandLoginResponse::OAICobrandLoginResponse() {
    this->initializeModel();
}

OAICobrandLoginResponse::~OAICobrandLoginResponse() {}

void OAICobrandLoginResponse::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_cobrand_id_isSet = false;
    m_cobrand_id_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_session_isSet = false;
    m_session_isValid = false;
}

void OAICobrandLoginResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICobrandLoginResponse::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("applicationId")]);
    m_application_id_isSet = !json[QString("applicationId")].isNull() && m_application_id_isValid;

    m_cobrand_id_isValid = ::OpenAPI::fromJsonValue(m_cobrand_id, json[QString("cobrandId")]);
    m_cobrand_id_isSet = !json[QString("cobrandId")].isNull() && m_cobrand_id_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_session_isValid = ::OpenAPI::fromJsonValue(m_session, json[QString("session")]);
    m_session_isSet = !json[QString("session")].isNull() && m_session_isValid;
}

QString OAICobrandLoginResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICobrandLoginResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("applicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_cobrand_id_isSet) {
        obj.insert(QString("cobrandId"), ::OpenAPI::toJsonValue(m_cobrand_id));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_session.isSet()) {
        obj.insert(QString("session"), ::OpenAPI::toJsonValue(m_session));
    }
    return obj;
}

QString OAICobrandLoginResponse::getApplicationId() const {
    return m_application_id;
}
void OAICobrandLoginResponse::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAICobrandLoginResponse::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAICobrandLoginResponse::is_application_id_Valid() const{
    return m_application_id_isValid;
}

qint64 OAICobrandLoginResponse::getCobrandId() const {
    return m_cobrand_id;
}
void OAICobrandLoginResponse::setCobrandId(const qint64 &cobrand_id) {
    m_cobrand_id = cobrand_id;
    m_cobrand_id_isSet = true;
}

bool OAICobrandLoginResponse::is_cobrand_id_Set() const{
    return m_cobrand_id_isSet;
}

bool OAICobrandLoginResponse::is_cobrand_id_Valid() const{
    return m_cobrand_id_isValid;
}

QString OAICobrandLoginResponse::getLocale() const {
    return m_locale;
}
void OAICobrandLoginResponse::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAICobrandLoginResponse::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAICobrandLoginResponse::is_locale_Valid() const{
    return m_locale_isValid;
}

OAICobrandSession OAICobrandLoginResponse::getSession() const {
    return m_session;
}
void OAICobrandLoginResponse::setSession(const OAICobrandSession &session) {
    m_session = session;
    m_session_isSet = true;
}

bool OAICobrandLoginResponse::is_session_Set() const{
    return m_session_isSet;
}

bool OAICobrandLoginResponse::is_session_Valid() const{
    return m_session_isValid;
}

bool OAICobrandLoginResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cobrand_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICobrandLoginResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
