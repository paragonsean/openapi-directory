/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAccountInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAccountInfo::OAICreateAccountInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAccountInfo::OAICreateAccountInfo() {
    this->initializeModel();
}

OAICreateAccountInfo::~OAICreateAccountInfo() {}

void OAICreateAccountInfo::initializeModel() {

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_account_number_isSet = false;
    m_account_number_isValid = false;

    m_account_type_isSet = false;
    m_account_type_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_amount_due_isSet = false;
    m_amount_due_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_home_value_isSet = false;
    m_home_value_isValid = false;

    m_include_in_net_worth_isSet = false;
    m_include_in_net_worth_isValid = false;

    m_memo_isSet = false;
    m_memo_isValid = false;

    m_nickname_isSet = false;
    m_nickname_isValid = false;

    m_valuation_type_isSet = false;
    m_valuation_type_isValid = false;
}

void OAICreateAccountInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAccountInfo::fromJsonObject(QJsonObject json) {

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_account_number_isValid = ::OpenAPI::fromJsonValue(m_account_number, json[QString("accountNumber")]);
    m_account_number_isSet = !json[QString("accountNumber")].isNull() && m_account_number_isValid;

    m_account_type_isValid = ::OpenAPI::fromJsonValue(m_account_type, json[QString("accountType")]);
    m_account_type_isSet = !json[QString("accountType")].isNull() && m_account_type_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_amount_due_isValid = ::OpenAPI::fromJsonValue(m_amount_due, json[QString("amountDue")]);
    m_amount_due_isSet = !json[QString("amountDue")].isNull() && m_amount_due_isValid;

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("dueDate")]);
    m_due_date_isSet = !json[QString("dueDate")].isNull() && m_due_date_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_home_value_isValid = ::OpenAPI::fromJsonValue(m_home_value, json[QString("homeValue")]);
    m_home_value_isSet = !json[QString("homeValue")].isNull() && m_home_value_isValid;

    m_include_in_net_worth_isValid = ::OpenAPI::fromJsonValue(m_include_in_net_worth, json[QString("includeInNetWorth")]);
    m_include_in_net_worth_isSet = !json[QString("includeInNetWorth")].isNull() && m_include_in_net_worth_isValid;

    m_memo_isValid = ::OpenAPI::fromJsonValue(m_memo, json[QString("memo")]);
    m_memo_isSet = !json[QString("memo")].isNull() && m_memo_isValid;

    m_nickname_isValid = ::OpenAPI::fromJsonValue(m_nickname, json[QString("nickname")]);
    m_nickname_isSet = !json[QString("nickname")].isNull() && m_nickname_isValid;

    m_valuation_type_isValid = ::OpenAPI::fromJsonValue(m_valuation_type, json[QString("valuationType")]);
    m_valuation_type_isSet = !json[QString("valuationType")].isNull() && m_valuation_type_isValid;
}

QString OAICreateAccountInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAccountInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_account_number_isSet) {
        obj.insert(QString("accountNumber"), ::OpenAPI::toJsonValue(m_account_number));
    }
    if (m_account_type_isSet) {
        obj.insert(QString("accountType"), ::OpenAPI::toJsonValue(m_account_type));
    }
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_amount_due.isSet()) {
        obj.insert(QString("amountDue"), ::OpenAPI::toJsonValue(m_amount_due));
    }
    if (m_balance.isSet()) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("dueDate"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_home_value.isSet()) {
        obj.insert(QString("homeValue"), ::OpenAPI::toJsonValue(m_home_value));
    }
    if (m_include_in_net_worth_isSet) {
        obj.insert(QString("includeInNetWorth"), ::OpenAPI::toJsonValue(m_include_in_net_worth));
    }
    if (m_memo_isSet) {
        obj.insert(QString("memo"), ::OpenAPI::toJsonValue(m_memo));
    }
    if (m_nickname_isSet) {
        obj.insert(QString("nickname"), ::OpenAPI::toJsonValue(m_nickname));
    }
    if (m_valuation_type_isSet) {
        obj.insert(QString("valuationType"), ::OpenAPI::toJsonValue(m_valuation_type));
    }
    return obj;
}

QString OAICreateAccountInfo::getAccountName() const {
    return m_account_name;
}
void OAICreateAccountInfo::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAICreateAccountInfo::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAICreateAccountInfo::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAICreateAccountInfo::getAccountNumber() const {
    return m_account_number;
}
void OAICreateAccountInfo::setAccountNumber(const QString &account_number) {
    m_account_number = account_number;
    m_account_number_isSet = true;
}

bool OAICreateAccountInfo::is_account_number_Set() const{
    return m_account_number_isSet;
}

bool OAICreateAccountInfo::is_account_number_Valid() const{
    return m_account_number_isValid;
}

QString OAICreateAccountInfo::getAccountType() const {
    return m_account_type;
}
void OAICreateAccountInfo::setAccountType(const QString &account_type) {
    m_account_type = account_type;
    m_account_type_isSet = true;
}

bool OAICreateAccountInfo::is_account_type_Set() const{
    return m_account_type_isSet;
}

bool OAICreateAccountInfo::is_account_type_Valid() const{
    return m_account_type_isValid;
}

OAIAccountAddress OAICreateAccountInfo::getAddress() const {
    return m_address;
}
void OAICreateAccountInfo::setAddress(const OAIAccountAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAICreateAccountInfo::is_address_Set() const{
    return m_address_isSet;
}

bool OAICreateAccountInfo::is_address_Valid() const{
    return m_address_isValid;
}

OAIMoney OAICreateAccountInfo::getAmountDue() const {
    return m_amount_due;
}
void OAICreateAccountInfo::setAmountDue(const OAIMoney &amount_due) {
    m_amount_due = amount_due;
    m_amount_due_isSet = true;
}

bool OAICreateAccountInfo::is_amount_due_Set() const{
    return m_amount_due_isSet;
}

bool OAICreateAccountInfo::is_amount_due_Valid() const{
    return m_amount_due_isValid;
}

OAIMoney OAICreateAccountInfo::getBalance() const {
    return m_balance;
}
void OAICreateAccountInfo::setBalance(const OAIMoney &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAICreateAccountInfo::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAICreateAccountInfo::is_balance_Valid() const{
    return m_balance_isValid;
}

QString OAICreateAccountInfo::getDueDate() const {
    return m_due_date;
}
void OAICreateAccountInfo::setDueDate(const QString &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAICreateAccountInfo::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAICreateAccountInfo::is_due_date_Valid() const{
    return m_due_date_isValid;
}

QString OAICreateAccountInfo::getFrequency() const {
    return m_frequency;
}
void OAICreateAccountInfo::setFrequency(const QString &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAICreateAccountInfo::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAICreateAccountInfo::is_frequency_Valid() const{
    return m_frequency_isValid;
}

OAIMoney OAICreateAccountInfo::getHomeValue() const {
    return m_home_value;
}
void OAICreateAccountInfo::setHomeValue(const OAIMoney &home_value) {
    m_home_value = home_value;
    m_home_value_isSet = true;
}

bool OAICreateAccountInfo::is_home_value_Set() const{
    return m_home_value_isSet;
}

bool OAICreateAccountInfo::is_home_value_Valid() const{
    return m_home_value_isValid;
}

QString OAICreateAccountInfo::getIncludeInNetWorth() const {
    return m_include_in_net_worth;
}
void OAICreateAccountInfo::setIncludeInNetWorth(const QString &include_in_net_worth) {
    m_include_in_net_worth = include_in_net_worth;
    m_include_in_net_worth_isSet = true;
}

bool OAICreateAccountInfo::is_include_in_net_worth_Set() const{
    return m_include_in_net_worth_isSet;
}

bool OAICreateAccountInfo::is_include_in_net_worth_Valid() const{
    return m_include_in_net_worth_isValid;
}

QString OAICreateAccountInfo::getMemo() const {
    return m_memo;
}
void OAICreateAccountInfo::setMemo(const QString &memo) {
    m_memo = memo;
    m_memo_isSet = true;
}

bool OAICreateAccountInfo::is_memo_Set() const{
    return m_memo_isSet;
}

bool OAICreateAccountInfo::is_memo_Valid() const{
    return m_memo_isValid;
}

QString OAICreateAccountInfo::getNickname() const {
    return m_nickname;
}
void OAICreateAccountInfo::setNickname(const QString &nickname) {
    m_nickname = nickname;
    m_nickname_isSet = true;
}

bool OAICreateAccountInfo::is_nickname_Set() const{
    return m_nickname_isSet;
}

bool OAICreateAccountInfo::is_nickname_Valid() const{
    return m_nickname_isValid;
}

QString OAICreateAccountInfo::getValuationType() const {
    return m_valuation_type;
}
void OAICreateAccountInfo::setValuationType(const QString &valuation_type) {
    m_valuation_type = valuation_type;
    m_valuation_type_isSet = true;
}

bool OAICreateAccountInfo::is_valuation_type_Set() const{
    return m_valuation_type_isSet;
}

bool OAICreateAccountInfo::is_valuation_type_Valid() const{
    return m_valuation_type_isValid;
}

bool OAICreateAccountInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_due.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_in_net_worth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nickname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valuation_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAccountInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_name_isValid && m_account_type_isValid && true;
}

} // namespace OpenAPI
