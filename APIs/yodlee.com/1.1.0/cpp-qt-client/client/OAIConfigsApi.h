/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConfigsApi_H
#define OAI_OAIConfigsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConfigsNotificationResponse.h"
#include "OAIConfigsPublicKeyResponse.h"
#include "OAICreateConfigsNotificationEventRequest.h"
#include "OAIUpdateConfigsNotificationEventRequest.h"
#include "OAIYodleeError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConfigsApi : public QObject {
    Q_OBJECT

public:
    OAIConfigsApi(const int timeOut = 0);
    ~OAIConfigsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  event_name QString [required]
    * @param[in]  oai_create_configs_notification_event_request OAICreateConfigsNotificationEventRequest [required]
    */
    virtual void createSubscriptionNotificationEvent(const QString &event_name, const OAICreateConfigsNotificationEventRequest &oai_create_configs_notification_event_request);

    /**
    * @param[in]  event_name QString [required]
    */
    virtual void deleteSubscribedNotificationEvent(const QString &event_name);


    virtual void getPublicEncryptionKey();

    /**
    * @param[in]  event_name QString [optional]
    */
    virtual void getSubscribedNotificationEvents(const ::OpenAPI::OptionalParam<QString> &event_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_name QString [required]
    * @param[in]  oai_update_configs_notification_event_request OAIUpdateConfigsNotificationEventRequest [required]
    */
    virtual void updateSubscribedNotificationEvent(const QString &event_name, const OAIUpdateConfigsNotificationEventRequest &oai_update_configs_notification_event_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSubscriptionNotificationEventCallback(OAIHttpRequestWorker *worker);
    void deleteSubscribedNotificationEventCallback(OAIHttpRequestWorker *worker);
    void getPublicEncryptionKeyCallback(OAIHttpRequestWorker *worker);
    void getSubscribedNotificationEventsCallback(OAIHttpRequestWorker *worker);
    void updateSubscribedNotificationEventCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSubscriptionNotificationEventSignal();
    void deleteSubscribedNotificationEventSignal();
    void getPublicEncryptionKeySignal(OAIConfigsPublicKeyResponse summary);
    void getSubscribedNotificationEventsSignal(OAIConfigsNotificationResponse summary);
    void updateSubscribedNotificationEventSignal();


    void createSubscriptionNotificationEventSignalFull(OAIHttpRequestWorker *worker);
    void deleteSubscribedNotificationEventSignalFull(OAIHttpRequestWorker *worker);
    void getPublicEncryptionKeySignalFull(OAIHttpRequestWorker *worker, OAIConfigsPublicKeyResponse summary);
    void getSubscribedNotificationEventsSignalFull(OAIHttpRequestWorker *worker, OAIConfigsNotificationResponse summary);
    void updateSubscribedNotificationEventSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createSubscriptionNotificationEventSignalError() instead")
    void createSubscriptionNotificationEventSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createSubscriptionNotificationEventSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSubscribedNotificationEventSignalError() instead")
    void deleteSubscribedNotificationEventSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSubscribedNotificationEventSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicEncryptionKeySignalError() instead")
    void getPublicEncryptionKeySignalE(OAIConfigsPublicKeyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicEncryptionKeySignalError(OAIConfigsPublicKeyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubscribedNotificationEventsSignalError() instead")
    void getSubscribedNotificationEventsSignalE(OAIConfigsNotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubscribedNotificationEventsSignalError(OAIConfigsNotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSubscribedNotificationEventSignalError() instead")
    void updateSubscribedNotificationEventSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateSubscribedNotificationEventSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSubscriptionNotificationEventSignalErrorFull() instead")
    void createSubscriptionNotificationEventSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSubscriptionNotificationEventSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSubscribedNotificationEventSignalErrorFull() instead")
    void deleteSubscribedNotificationEventSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSubscribedNotificationEventSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicEncryptionKeySignalErrorFull() instead")
    void getPublicEncryptionKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicEncryptionKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubscribedNotificationEventsSignalErrorFull() instead")
    void getSubscribedNotificationEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubscribedNotificationEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSubscribedNotificationEventSignalErrorFull() instead")
    void updateSubscribedNotificationEventSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSubscribedNotificationEventSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
