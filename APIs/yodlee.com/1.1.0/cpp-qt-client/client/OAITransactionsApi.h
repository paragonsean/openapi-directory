/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransactionsApi_H
#define OAI_OAITransactionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAITransactionCategorizationRule.h"
#include "OAITransactionCategorizationRuleRequest.h"
#include "OAITransactionCategorizationRuleResponse.h"
#include "OAITransactionCategoryRequest.h"
#include "OAITransactionCategoryResponse.h"
#include "OAITransactionCountResponse.h"
#include "OAITransactionRequest.h"
#include "OAITransactionResponse.h"
#include "OAIUpdateCategoryRequest.h"
#include "OAIYodleeError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransactionsApi : public QObject {
    Q_OBJECT

public:
    OAITransactionsApi(const int timeOut = 0);
    ~OAITransactionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  action QString [optional]
    * @param[in]  rule_param QString [optional]
    */
    virtual void createOrRunTransactionCategorizationRules(const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rule_param = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_transaction_category_request OAITransactionCategoryRequest [required]
    */
    virtual void createTransactionCategory(const OAITransactionCategoryRequest &oai_transaction_category_request);

    /**
    * @param[in]  rule_id qint64 [required]
    */
    virtual void deleteTransactionCategorizationRule(const qint64 &rule_id);

    /**
    * @param[in]  category_id qint64 [required]
    */
    virtual void deleteTransactionCategory(const qint64 &category_id);


    virtual void getTransactionCategories();


    virtual void getTransactionCategorizationRules();


    Q_DECL_DEPRECATED virtual void getTransactionCategorizationRulesDeprecated();

    /**
    * @param[in]  account_id QString [optional]
    * @param[in]  base_type QString [optional]
    * @param[in]  category_id QString [optional]
    * @param[in]  category_type QString [optional]
    * @param[in]  container QString [optional]
    * @param[in]  detail_category_id QString [optional]
    * @param[in]  from_date QString [optional]
    * @param[in]  high_level_category_id QString [optional]
    * @param[in]  keyword QString [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  to_date QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  type QString [optional]
    */
    virtual void getTransactions(const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &base_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &container = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &detail_category_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &high_level_category_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &keyword = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &to_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [optional]
    * @param[in]  base_type QString [optional]
    * @param[in]  category_id QString [optional]
    * @param[in]  category_type QString [optional]
    * @param[in]  container QString [optional]
    * @param[in]  detail_category_id QString [optional]
    * @param[in]  from_date QString [optional]
    * @param[in]  high_level_category_id QString [optional]
    * @param[in]  keyword QString [optional]
    * @param[in]  to_date QString [optional]
    * @param[in]  type QString [optional]
    */
    virtual void getTransactionsCount(const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &base_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &container = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &detail_category_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &high_level_category_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &keyword = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  rule_id qint64 [required]
    */
    virtual void runTransactionCategorizationRule(const QString &action, const qint64 &rule_id);

    /**
    * @param[in]  transaction_id qint64 [required]
    * @param[in]  oai_transaction_request OAITransactionRequest [required]
    */
    virtual void updateTransaction(const qint64 &transaction_id, const OAITransactionRequest &oai_transaction_request);

    /**
    * @param[in]  rule_id qint64 [required]
    * @param[in]  oai_transaction_categorization_rule_request OAITransactionCategorizationRuleRequest [required]
    */
    virtual void updateTransactionCategorizationRule(const qint64 &rule_id, const OAITransactionCategorizationRuleRequest &oai_transaction_categorization_rule_request);

    /**
    * @param[in]  oai_update_category_request OAIUpdateCategoryRequest [required]
    */
    virtual void updateTransactionCategory(const OAIUpdateCategoryRequest &oai_update_category_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createOrRunTransactionCategorizationRulesCallback(OAIHttpRequestWorker *worker);
    void createTransactionCategoryCallback(OAIHttpRequestWorker *worker);
    void deleteTransactionCategorizationRuleCallback(OAIHttpRequestWorker *worker);
    void deleteTransactionCategoryCallback(OAIHttpRequestWorker *worker);
    void getTransactionCategoriesCallback(OAIHttpRequestWorker *worker);
    void getTransactionCategorizationRulesCallback(OAIHttpRequestWorker *worker);
    void getTransactionCategorizationRulesDeprecatedCallback(OAIHttpRequestWorker *worker);
    void getTransactionsCallback(OAIHttpRequestWorker *worker);
    void getTransactionsCountCallback(OAIHttpRequestWorker *worker);
    void runTransactionCategorizationRuleCallback(OAIHttpRequestWorker *worker);
    void updateTransactionCallback(OAIHttpRequestWorker *worker);
    void updateTransactionCategorizationRuleCallback(OAIHttpRequestWorker *worker);
    void updateTransactionCategoryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createOrRunTransactionCategorizationRulesSignal();
    void createTransactionCategorySignal();
    void deleteTransactionCategorizationRuleSignal();
    void deleteTransactionCategorySignal();
    void getTransactionCategoriesSignal(OAITransactionCategoryResponse summary);
    void getTransactionCategorizationRulesSignal(OAITransactionCategorizationRuleResponse summary);
    void getTransactionCategorizationRulesDeprecatedSignal(QList<OAITransactionCategorizationRule> summary);
    void getTransactionsSignal(OAITransactionResponse summary);
    void getTransactionsCountSignal(OAITransactionCountResponse summary);
    void runTransactionCategorizationRuleSignal();
    void updateTransactionSignal();
    void updateTransactionCategorizationRuleSignal();
    void updateTransactionCategorySignal();


    void createOrRunTransactionCategorizationRulesSignalFull(OAIHttpRequestWorker *worker);
    void createTransactionCategorySignalFull(OAIHttpRequestWorker *worker);
    void deleteTransactionCategorizationRuleSignalFull(OAIHttpRequestWorker *worker);
    void deleteTransactionCategorySignalFull(OAIHttpRequestWorker *worker);
    void getTransactionCategoriesSignalFull(OAIHttpRequestWorker *worker, OAITransactionCategoryResponse summary);
    void getTransactionCategorizationRulesSignalFull(OAIHttpRequestWorker *worker, OAITransactionCategorizationRuleResponse summary);
    void getTransactionCategorizationRulesDeprecatedSignalFull(OAIHttpRequestWorker *worker, QList<OAITransactionCategorizationRule> summary);
    void getTransactionsSignalFull(OAIHttpRequestWorker *worker, OAITransactionResponse summary);
    void getTransactionsCountSignalFull(OAIHttpRequestWorker *worker, OAITransactionCountResponse summary);
    void runTransactionCategorizationRuleSignalFull(OAIHttpRequestWorker *worker);
    void updateTransactionSignalFull(OAIHttpRequestWorker *worker);
    void updateTransactionCategorizationRuleSignalFull(OAIHttpRequestWorker *worker);
    void updateTransactionCategorySignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createOrRunTransactionCategorizationRulesSignalError() instead")
    void createOrRunTransactionCategorizationRulesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createOrRunTransactionCategorizationRulesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTransactionCategorySignalError() instead")
    void createTransactionCategorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createTransactionCategorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTransactionCategorizationRuleSignalError() instead")
    void deleteTransactionCategorizationRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTransactionCategorizationRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTransactionCategorySignalError() instead")
    void deleteTransactionCategorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTransactionCategorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionCategoriesSignalError() instead")
    void getTransactionCategoriesSignalE(OAITransactionCategoryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionCategoriesSignalError(OAITransactionCategoryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionCategorizationRulesSignalError() instead")
    void getTransactionCategorizationRulesSignalE(OAITransactionCategorizationRuleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionCategorizationRulesSignalError(OAITransactionCategorizationRuleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionCategorizationRulesDeprecatedSignalError() instead")
    void getTransactionCategorizationRulesDeprecatedSignalE(QList<OAITransactionCategorizationRule> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionCategorizationRulesDeprecatedSignalError(QList<OAITransactionCategorizationRule> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionsSignalError() instead")
    void getTransactionsSignalE(OAITransactionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionsSignalError(OAITransactionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionsCountSignalError() instead")
    void getTransactionsCountSignalE(OAITransactionCountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionsCountSignalError(OAITransactionCountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runTransactionCategorizationRuleSignalError() instead")
    void runTransactionCategorizationRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void runTransactionCategorizationRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTransactionSignalError() instead")
    void updateTransactionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateTransactionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTransactionCategorizationRuleSignalError() instead")
    void updateTransactionCategorizationRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateTransactionCategorizationRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTransactionCategorySignalError() instead")
    void updateTransactionCategorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateTransactionCategorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createOrRunTransactionCategorizationRulesSignalErrorFull() instead")
    void createOrRunTransactionCategorizationRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrRunTransactionCategorizationRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTransactionCategorySignalErrorFull() instead")
    void createTransactionCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTransactionCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTransactionCategorizationRuleSignalErrorFull() instead")
    void deleteTransactionCategorizationRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTransactionCategorizationRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTransactionCategorySignalErrorFull() instead")
    void deleteTransactionCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTransactionCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionCategoriesSignalErrorFull() instead")
    void getTransactionCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionCategorizationRulesSignalErrorFull() instead")
    void getTransactionCategorizationRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionCategorizationRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionCategorizationRulesDeprecatedSignalErrorFull() instead")
    void getTransactionCategorizationRulesDeprecatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionCategorizationRulesDeprecatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionsSignalErrorFull() instead")
    void getTransactionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionsCountSignalErrorFull() instead")
    void getTransactionsCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionsCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runTransactionCategorizationRuleSignalErrorFull() instead")
    void runTransactionCategorizationRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void runTransactionCategorizationRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTransactionSignalErrorFull() instead")
    void updateTransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTransactionCategorizationRuleSignalErrorFull() instead")
    void updateTransactionCategorizationRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTransactionCategorizationRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTransactionCategorySignalErrorFull() instead")
    void updateTransactionCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTransactionCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
