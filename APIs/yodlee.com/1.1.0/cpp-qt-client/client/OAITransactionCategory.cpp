/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionCategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionCategory::OAITransactionCategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionCategory::OAITransactionCategory() {
    this->initializeModel();
}

OAITransactionCategory::~OAITransactionCategory() {}

void OAITransactionCategory::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_classification_isSet = false;
    m_classification_isValid = false;

    m_default_category_name_isSet = false;
    m_default_category_name_isValid = false;

    m_default_high_level_category_name_isSet = false;
    m_default_high_level_category_name_isValid = false;

    m_detail_category_isSet = false;
    m_detail_category_isValid = false;

    m_high_level_category_id_isSet = false;
    m_high_level_category_id_isValid = false;

    m_high_level_category_name_isSet = false;
    m_high_level_category_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITransactionCategory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactionCategory::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_classification_isValid = ::OpenAPI::fromJsonValue(m_classification, json[QString("classification")]);
    m_classification_isSet = !json[QString("classification")].isNull() && m_classification_isValid;

    m_default_category_name_isValid = ::OpenAPI::fromJsonValue(m_default_category_name, json[QString("defaultCategoryName")]);
    m_default_category_name_isSet = !json[QString("defaultCategoryName")].isNull() && m_default_category_name_isValid;

    m_default_high_level_category_name_isValid = ::OpenAPI::fromJsonValue(m_default_high_level_category_name, json[QString("defaultHighLevelCategoryName")]);
    m_default_high_level_category_name_isSet = !json[QString("defaultHighLevelCategoryName")].isNull() && m_default_high_level_category_name_isValid;

    m_detail_category_isValid = ::OpenAPI::fromJsonValue(m_detail_category, json[QString("detailCategory")]);
    m_detail_category_isSet = !json[QString("detailCategory")].isNull() && m_detail_category_isValid;

    m_high_level_category_id_isValid = ::OpenAPI::fromJsonValue(m_high_level_category_id, json[QString("highLevelCategoryId")]);
    m_high_level_category_id_isSet = !json[QString("highLevelCategoryId")].isNull() && m_high_level_category_id_isValid;

    m_high_level_category_name_isValid = ::OpenAPI::fromJsonValue(m_high_level_category_name, json[QString("highLevelCategoryName")]);
    m_high_level_category_name_isSet = !json[QString("highLevelCategoryName")].isNull() && m_high_level_category_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITransactionCategory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactionCategory::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_classification_isSet) {
        obj.insert(QString("classification"), ::OpenAPI::toJsonValue(m_classification));
    }
    if (m_default_category_name_isSet) {
        obj.insert(QString("defaultCategoryName"), ::OpenAPI::toJsonValue(m_default_category_name));
    }
    if (m_default_high_level_category_name_isSet) {
        obj.insert(QString("defaultHighLevelCategoryName"), ::OpenAPI::toJsonValue(m_default_high_level_category_name));
    }
    if (m_detail_category.size() > 0) {
        obj.insert(QString("detailCategory"), ::OpenAPI::toJsonValue(m_detail_category));
    }
    if (m_high_level_category_id_isSet) {
        obj.insert(QString("highLevelCategoryId"), ::OpenAPI::toJsonValue(m_high_level_category_id));
    }
    if (m_high_level_category_name_isSet) {
        obj.insert(QString("highLevelCategoryName"), ::OpenAPI::toJsonValue(m_high_level_category_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAITransactionCategory::getCategory() const {
    return m_category;
}
void OAITransactionCategory::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAITransactionCategory::is_category_Set() const{
    return m_category_isSet;
}

bool OAITransactionCategory::is_category_Valid() const{
    return m_category_isValid;
}

QString OAITransactionCategory::getClassification() const {
    return m_classification;
}
void OAITransactionCategory::setClassification(const QString &classification) {
    m_classification = classification;
    m_classification_isSet = true;
}

bool OAITransactionCategory::is_classification_Set() const{
    return m_classification_isSet;
}

bool OAITransactionCategory::is_classification_Valid() const{
    return m_classification_isValid;
}

QString OAITransactionCategory::getDefaultCategoryName() const {
    return m_default_category_name;
}
void OAITransactionCategory::setDefaultCategoryName(const QString &default_category_name) {
    m_default_category_name = default_category_name;
    m_default_category_name_isSet = true;
}

bool OAITransactionCategory::is_default_category_name_Set() const{
    return m_default_category_name_isSet;
}

bool OAITransactionCategory::is_default_category_name_Valid() const{
    return m_default_category_name_isValid;
}

QString OAITransactionCategory::getDefaultHighLevelCategoryName() const {
    return m_default_high_level_category_name;
}
void OAITransactionCategory::setDefaultHighLevelCategoryName(const QString &default_high_level_category_name) {
    m_default_high_level_category_name = default_high_level_category_name;
    m_default_high_level_category_name_isSet = true;
}

bool OAITransactionCategory::is_default_high_level_category_name_Set() const{
    return m_default_high_level_category_name_isSet;
}

bool OAITransactionCategory::is_default_high_level_category_name_Valid() const{
    return m_default_high_level_category_name_isValid;
}

QList<OAIDetailCategory> OAITransactionCategory::getDetailCategory() const {
    return m_detail_category;
}
void OAITransactionCategory::setDetailCategory(const QList<OAIDetailCategory> &detail_category) {
    m_detail_category = detail_category;
    m_detail_category_isSet = true;
}

bool OAITransactionCategory::is_detail_category_Set() const{
    return m_detail_category_isSet;
}

bool OAITransactionCategory::is_detail_category_Valid() const{
    return m_detail_category_isValid;
}

qint64 OAITransactionCategory::getHighLevelCategoryId() const {
    return m_high_level_category_id;
}
void OAITransactionCategory::setHighLevelCategoryId(const qint64 &high_level_category_id) {
    m_high_level_category_id = high_level_category_id;
    m_high_level_category_id_isSet = true;
}

bool OAITransactionCategory::is_high_level_category_id_Set() const{
    return m_high_level_category_id_isSet;
}

bool OAITransactionCategory::is_high_level_category_id_Valid() const{
    return m_high_level_category_id_isValid;
}

QString OAITransactionCategory::getHighLevelCategoryName() const {
    return m_high_level_category_name;
}
void OAITransactionCategory::setHighLevelCategoryName(const QString &high_level_category_name) {
    m_high_level_category_name = high_level_category_name;
    m_high_level_category_name_isSet = true;
}

bool OAITransactionCategory::is_high_level_category_name_Set() const{
    return m_high_level_category_name_isSet;
}

bool OAITransactionCategory::is_high_level_category_name_Valid() const{
    return m_high_level_category_name_isValid;
}

qint64 OAITransactionCategory::getId() const {
    return m_id;
}
void OAITransactionCategory::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITransactionCategory::is_id_Set() const{
    return m_id_isSet;
}

bool OAITransactionCategory::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITransactionCategory::getSource() const {
    return m_source;
}
void OAITransactionCategory::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAITransactionCategory::is_source_Set() const{
    return m_source_isSet;
}

bool OAITransactionCategory::is_source_Valid() const{
    return m_source_isValid;
}

QString OAITransactionCategory::getType() const {
    return m_type;
}
void OAITransactionCategory::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITransactionCategory::is_type_Set() const{
    return m_type_isSet;
}

bool OAITransactionCategory::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITransactionCategory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_category_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_high_level_category_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_category.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_level_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_level_category_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactionCategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
