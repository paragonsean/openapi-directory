/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOption::OAIOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOption::OAIOption() {
    this->initializeModel();
}

OAIOption::~OAIOption() {}

void OAIOption::initializeModel() {

    m_display_text_isSet = false;
    m_display_text_isValid = false;

    m_is_selected_isSet = false;
    m_is_selected_isValid = false;

    m_option_value_isSet = false;
    m_option_value_isValid = false;
}

void OAIOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOption::fromJsonObject(QJsonObject json) {

    m_display_text_isValid = ::OpenAPI::fromJsonValue(m_display_text, json[QString("displayText")]);
    m_display_text_isSet = !json[QString("displayText")].isNull() && m_display_text_isValid;

    m_is_selected_isValid = ::OpenAPI::fromJsonValue(m_is_selected, json[QString("isSelected")]);
    m_is_selected_isSet = !json[QString("isSelected")].isNull() && m_is_selected_isValid;

    m_option_value_isValid = ::OpenAPI::fromJsonValue(m_option_value, json[QString("optionValue")]);
    m_option_value_isSet = !json[QString("optionValue")].isNull() && m_option_value_isValid;
}

QString OAIOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOption::asJsonObject() const {
    QJsonObject obj;
    if (m_display_text_isSet) {
        obj.insert(QString("displayText"), ::OpenAPI::toJsonValue(m_display_text));
    }
    if (m_is_selected_isSet) {
        obj.insert(QString("isSelected"), ::OpenAPI::toJsonValue(m_is_selected));
    }
    if (m_option_value_isSet) {
        obj.insert(QString("optionValue"), ::OpenAPI::toJsonValue(m_option_value));
    }
    return obj;
}

QString OAIOption::getDisplayText() const {
    return m_display_text;
}
void OAIOption::setDisplayText(const QString &display_text) {
    m_display_text = display_text;
    m_display_text_isSet = true;
}

bool OAIOption::is_display_text_Set() const{
    return m_display_text_isSet;
}

bool OAIOption::is_display_text_Valid() const{
    return m_display_text_isValid;
}

bool OAIOption::isIsSelected() const {
    return m_is_selected;
}
void OAIOption::setIsSelected(const bool &is_selected) {
    m_is_selected = is_selected;
    m_is_selected_isSet = true;
}

bool OAIOption::is_is_selected_Set() const{
    return m_is_selected_isSet;
}

bool OAIOption::is_is_selected_Valid() const{
    return m_is_selected_isValid;
}

QString OAIOption::getOptionValue() const {
    return m_option_value;
}
void OAIOption::setOptionValue(const QString &option_value) {
    m_option_value = option_value;
    m_option_value_isSet = true;
}

bool OAIOption::is_option_value_Set() const{
    return m_option_value_isSet;
}

bool OAIOption::is_option_value_Valid() const{
    return m_option_value_isValid;
}

bool OAIOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_selected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
