/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatement::OAIStatement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatement::OAIStatement() {
    this->initializeModel();
}

OAIStatement::~OAIStatement() {}

void OAIStatement::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_amount_due_isSet = false;
    m_amount_due_isValid = false;

    m_apr_isSet = false;
    m_apr_isValid = false;

    m_billing_period_end_isSet = false;
    m_billing_period_end_isValid = false;

    m_billing_period_start_isSet = false;
    m_billing_period_start_isValid = false;

    m_cash_advance_isSet = false;
    m_cash_advance_isValid = false;

    m_cash_apr_isSet = false;
    m_cash_apr_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_interest_amount_isSet = false;
    m_interest_amount_isValid = false;

    m_is_latest_isSet = false;
    m_is_latest_isValid = false;

    m_last_payment_amount_isSet = false;
    m_last_payment_amount_isValid = false;

    m_last_payment_date_isSet = false;
    m_last_payment_date_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_loan_balance_isSet = false;
    m_loan_balance_isValid = false;

    m_minimum_payment_isSet = false;
    m_minimum_payment_isValid = false;

    m_new_charges_isSet = false;
    m_new_charges_isValid = false;

    m_principal_amount_isSet = false;
    m_principal_amount_isValid = false;

    m_statement_date_isSet = false;
    m_statement_date_isValid = false;
}

void OAIStatement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatement::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_amount_due_isValid = ::OpenAPI::fromJsonValue(m_amount_due, json[QString("amountDue")]);
    m_amount_due_isSet = !json[QString("amountDue")].isNull() && m_amount_due_isValid;

    m_apr_isValid = ::OpenAPI::fromJsonValue(m_apr, json[QString("apr")]);
    m_apr_isSet = !json[QString("apr")].isNull() && m_apr_isValid;

    m_billing_period_end_isValid = ::OpenAPI::fromJsonValue(m_billing_period_end, json[QString("billingPeriodEnd")]);
    m_billing_period_end_isSet = !json[QString("billingPeriodEnd")].isNull() && m_billing_period_end_isValid;

    m_billing_period_start_isValid = ::OpenAPI::fromJsonValue(m_billing_period_start, json[QString("billingPeriodStart")]);
    m_billing_period_start_isSet = !json[QString("billingPeriodStart")].isNull() && m_billing_period_start_isValid;

    m_cash_advance_isValid = ::OpenAPI::fromJsonValue(m_cash_advance, json[QString("cashAdvance")]);
    m_cash_advance_isSet = !json[QString("cashAdvance")].isNull() && m_cash_advance_isValid;

    m_cash_apr_isValid = ::OpenAPI::fromJsonValue(m_cash_apr, json[QString("cashApr")]);
    m_cash_apr_isSet = !json[QString("cashApr")].isNull() && m_cash_apr_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("dueDate")]);
    m_due_date_isSet = !json[QString("dueDate")].isNull() && m_due_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interest_amount_isValid = ::OpenAPI::fromJsonValue(m_interest_amount, json[QString("interestAmount")]);
    m_interest_amount_isSet = !json[QString("interestAmount")].isNull() && m_interest_amount_isValid;

    m_is_latest_isValid = ::OpenAPI::fromJsonValue(m_is_latest, json[QString("isLatest")]);
    m_is_latest_isSet = !json[QString("isLatest")].isNull() && m_is_latest_isValid;

    m_last_payment_amount_isValid = ::OpenAPI::fromJsonValue(m_last_payment_amount, json[QString("lastPaymentAmount")]);
    m_last_payment_amount_isSet = !json[QString("lastPaymentAmount")].isNull() && m_last_payment_amount_isValid;

    m_last_payment_date_isValid = ::OpenAPI::fromJsonValue(m_last_payment_date, json[QString("lastPaymentDate")]);
    m_last_payment_date_isSet = !json[QString("lastPaymentDate")].isNull() && m_last_payment_date_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_loan_balance_isValid = ::OpenAPI::fromJsonValue(m_loan_balance, json[QString("loanBalance")]);
    m_loan_balance_isSet = !json[QString("loanBalance")].isNull() && m_loan_balance_isValid;

    m_minimum_payment_isValid = ::OpenAPI::fromJsonValue(m_minimum_payment, json[QString("minimumPayment")]);
    m_minimum_payment_isSet = !json[QString("minimumPayment")].isNull() && m_minimum_payment_isValid;

    m_new_charges_isValid = ::OpenAPI::fromJsonValue(m_new_charges, json[QString("newCharges")]);
    m_new_charges_isSet = !json[QString("newCharges")].isNull() && m_new_charges_isValid;

    m_principal_amount_isValid = ::OpenAPI::fromJsonValue(m_principal_amount, json[QString("principalAmount")]);
    m_principal_amount_isSet = !json[QString("principalAmount")].isNull() && m_principal_amount_isValid;

    m_statement_date_isValid = ::OpenAPI::fromJsonValue(m_statement_date, json[QString("statementDate")]);
    m_statement_date_isSet = !json[QString("statementDate")].isNull() && m_statement_date_isValid;
}

QString OAIStatement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatement::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_amount_due.isSet()) {
        obj.insert(QString("amountDue"), ::OpenAPI::toJsonValue(m_amount_due));
    }
    if (m_apr_isSet) {
        obj.insert(QString("apr"), ::OpenAPI::toJsonValue(m_apr));
    }
    if (m_billing_period_end_isSet) {
        obj.insert(QString("billingPeriodEnd"), ::OpenAPI::toJsonValue(m_billing_period_end));
    }
    if (m_billing_period_start_isSet) {
        obj.insert(QString("billingPeriodStart"), ::OpenAPI::toJsonValue(m_billing_period_start));
    }
    if (m_cash_advance.isSet()) {
        obj.insert(QString("cashAdvance"), ::OpenAPI::toJsonValue(m_cash_advance));
    }
    if (m_cash_apr_isSet) {
        obj.insert(QString("cashApr"), ::OpenAPI::toJsonValue(m_cash_apr));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("dueDate"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interest_amount.isSet()) {
        obj.insert(QString("interestAmount"), ::OpenAPI::toJsonValue(m_interest_amount));
    }
    if (m_is_latest_isSet) {
        obj.insert(QString("isLatest"), ::OpenAPI::toJsonValue(m_is_latest));
    }
    if (m_last_payment_amount.isSet()) {
        obj.insert(QString("lastPaymentAmount"), ::OpenAPI::toJsonValue(m_last_payment_amount));
    }
    if (m_last_payment_date_isSet) {
        obj.insert(QString("lastPaymentDate"), ::OpenAPI::toJsonValue(m_last_payment_date));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_loan_balance.isSet()) {
        obj.insert(QString("loanBalance"), ::OpenAPI::toJsonValue(m_loan_balance));
    }
    if (m_minimum_payment.isSet()) {
        obj.insert(QString("minimumPayment"), ::OpenAPI::toJsonValue(m_minimum_payment));
    }
    if (m_new_charges.isSet()) {
        obj.insert(QString("newCharges"), ::OpenAPI::toJsonValue(m_new_charges));
    }
    if (m_principal_amount.isSet()) {
        obj.insert(QString("principalAmount"), ::OpenAPI::toJsonValue(m_principal_amount));
    }
    if (m_statement_date_isSet) {
        obj.insert(QString("statementDate"), ::OpenAPI::toJsonValue(m_statement_date));
    }
    return obj;
}

qint64 OAIStatement::getAccountId() const {
    return m_account_id;
}
void OAIStatement::setAccountId(const qint64 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIStatement::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIStatement::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAIMoney OAIStatement::getAmountDue() const {
    return m_amount_due;
}
void OAIStatement::setAmountDue(const OAIMoney &amount_due) {
    m_amount_due = amount_due;
    m_amount_due_isSet = true;
}

bool OAIStatement::is_amount_due_Set() const{
    return m_amount_due_isSet;
}

bool OAIStatement::is_amount_due_Valid() const{
    return m_amount_due_isValid;
}

double OAIStatement::getApr() const {
    return m_apr;
}
void OAIStatement::setApr(const double &apr) {
    m_apr = apr;
    m_apr_isSet = true;
}

bool OAIStatement::is_apr_Set() const{
    return m_apr_isSet;
}

bool OAIStatement::is_apr_Valid() const{
    return m_apr_isValid;
}

QString OAIStatement::getBillingPeriodEnd() const {
    return m_billing_period_end;
}
void OAIStatement::setBillingPeriodEnd(const QString &billing_period_end) {
    m_billing_period_end = billing_period_end;
    m_billing_period_end_isSet = true;
}

bool OAIStatement::is_billing_period_end_Set() const{
    return m_billing_period_end_isSet;
}

bool OAIStatement::is_billing_period_end_Valid() const{
    return m_billing_period_end_isValid;
}

QString OAIStatement::getBillingPeriodStart() const {
    return m_billing_period_start;
}
void OAIStatement::setBillingPeriodStart(const QString &billing_period_start) {
    m_billing_period_start = billing_period_start;
    m_billing_period_start_isSet = true;
}

bool OAIStatement::is_billing_period_start_Set() const{
    return m_billing_period_start_isSet;
}

bool OAIStatement::is_billing_period_start_Valid() const{
    return m_billing_period_start_isValid;
}

OAIMoney OAIStatement::getCashAdvance() const {
    return m_cash_advance;
}
void OAIStatement::setCashAdvance(const OAIMoney &cash_advance) {
    m_cash_advance = cash_advance;
    m_cash_advance_isSet = true;
}

bool OAIStatement::is_cash_advance_Set() const{
    return m_cash_advance_isSet;
}

bool OAIStatement::is_cash_advance_Valid() const{
    return m_cash_advance_isValid;
}

double OAIStatement::getCashApr() const {
    return m_cash_apr;
}
void OAIStatement::setCashApr(const double &cash_apr) {
    m_cash_apr = cash_apr;
    m_cash_apr_isSet = true;
}

bool OAIStatement::is_cash_apr_Set() const{
    return m_cash_apr_isSet;
}

bool OAIStatement::is_cash_apr_Valid() const{
    return m_cash_apr_isValid;
}

QString OAIStatement::getDueDate() const {
    return m_due_date;
}
void OAIStatement::setDueDate(const QString &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIStatement::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIStatement::is_due_date_Valid() const{
    return m_due_date_isValid;
}

qint64 OAIStatement::getId() const {
    return m_id;
}
void OAIStatement::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStatement::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStatement::is_id_Valid() const{
    return m_id_isValid;
}

OAIMoney OAIStatement::getInterestAmount() const {
    return m_interest_amount;
}
void OAIStatement::setInterestAmount(const OAIMoney &interest_amount) {
    m_interest_amount = interest_amount;
    m_interest_amount_isSet = true;
}

bool OAIStatement::is_interest_amount_Set() const{
    return m_interest_amount_isSet;
}

bool OAIStatement::is_interest_amount_Valid() const{
    return m_interest_amount_isValid;
}

bool OAIStatement::isIsLatest() const {
    return m_is_latest;
}
void OAIStatement::setIsLatest(const bool &is_latest) {
    m_is_latest = is_latest;
    m_is_latest_isSet = true;
}

bool OAIStatement::is_is_latest_Set() const{
    return m_is_latest_isSet;
}

bool OAIStatement::is_is_latest_Valid() const{
    return m_is_latest_isValid;
}

OAIMoney OAIStatement::getLastPaymentAmount() const {
    return m_last_payment_amount;
}
void OAIStatement::setLastPaymentAmount(const OAIMoney &last_payment_amount) {
    m_last_payment_amount = last_payment_amount;
    m_last_payment_amount_isSet = true;
}

bool OAIStatement::is_last_payment_amount_Set() const{
    return m_last_payment_amount_isSet;
}

bool OAIStatement::is_last_payment_amount_Valid() const{
    return m_last_payment_amount_isValid;
}

QString OAIStatement::getLastPaymentDate() const {
    return m_last_payment_date;
}
void OAIStatement::setLastPaymentDate(const QString &last_payment_date) {
    m_last_payment_date = last_payment_date;
    m_last_payment_date_isSet = true;
}

bool OAIStatement::is_last_payment_date_Set() const{
    return m_last_payment_date_isSet;
}

bool OAIStatement::is_last_payment_date_Valid() const{
    return m_last_payment_date_isValid;
}

QString OAIStatement::getLastUpdated() const {
    return m_last_updated;
}
void OAIStatement::setLastUpdated(const QString &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIStatement::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIStatement::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

OAIMoney OAIStatement::getLoanBalance() const {
    return m_loan_balance;
}
void OAIStatement::setLoanBalance(const OAIMoney &loan_balance) {
    m_loan_balance = loan_balance;
    m_loan_balance_isSet = true;
}

bool OAIStatement::is_loan_balance_Set() const{
    return m_loan_balance_isSet;
}

bool OAIStatement::is_loan_balance_Valid() const{
    return m_loan_balance_isValid;
}

OAIMoney OAIStatement::getMinimumPayment() const {
    return m_minimum_payment;
}
void OAIStatement::setMinimumPayment(const OAIMoney &minimum_payment) {
    m_minimum_payment = minimum_payment;
    m_minimum_payment_isSet = true;
}

bool OAIStatement::is_minimum_payment_Set() const{
    return m_minimum_payment_isSet;
}

bool OAIStatement::is_minimum_payment_Valid() const{
    return m_minimum_payment_isValid;
}

OAIMoney OAIStatement::getNewCharges() const {
    return m_new_charges;
}
void OAIStatement::setNewCharges(const OAIMoney &new_charges) {
    m_new_charges = new_charges;
    m_new_charges_isSet = true;
}

bool OAIStatement::is_new_charges_Set() const{
    return m_new_charges_isSet;
}

bool OAIStatement::is_new_charges_Valid() const{
    return m_new_charges_isValid;
}

OAIMoney OAIStatement::getPrincipalAmount() const {
    return m_principal_amount;
}
void OAIStatement::setPrincipalAmount(const OAIMoney &principal_amount) {
    m_principal_amount = principal_amount;
    m_principal_amount_isSet = true;
}

bool OAIStatement::is_principal_amount_Set() const{
    return m_principal_amount_isSet;
}

bool OAIStatement::is_principal_amount_Valid() const{
    return m_principal_amount_isValid;
}

QString OAIStatement::getStatementDate() const {
    return m_statement_date;
}
void OAIStatement::setStatementDate(const QString &statement_date) {
    m_statement_date = statement_date;
    m_statement_date_isSet = true;
}

bool OAIStatement::is_statement_date_Set() const{
    return m_statement_date_isSet;
}

bool OAIStatement::is_statement_date_Valid() const{
    return m_statement_date_isValid;
}

bool OAIStatement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_due.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_apr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_period_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_period_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_advance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_apr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interest_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_latest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_payment_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_payment_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loan_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_payment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_charges.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_statement_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
