/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataExtractsEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataExtractsEvent::OAIDataExtractsEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataExtractsEvent::OAIDataExtractsEvent() {
    this->initializeModel();
}

OAIDataExtractsEvent::~OAIDataExtractsEvent() {}

void OAIDataExtractsEvent::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_info_isSet = false;
    m_info_isValid = false;
}

void OAIDataExtractsEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataExtractsEvent::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_info_isValid = ::OpenAPI::fromJsonValue(m_info, json[QString("info")]);
    m_info_isSet = !json[QString("info")].isNull() && m_info_isValid;
}

QString OAIDataExtractsEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataExtractsEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_info_isSet) {
        obj.insert(QString("info"), ::OpenAPI::toJsonValue(m_info));
    }
    return obj;
}

OAIDataExtractsEventData OAIDataExtractsEvent::getData() const {
    return m_data;
}
void OAIDataExtractsEvent::setData(const OAIDataExtractsEventData &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIDataExtractsEvent::is_data_Set() const{
    return m_data_isSet;
}

bool OAIDataExtractsEvent::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIDataExtractsEvent::getInfo() const {
    return m_info;
}
void OAIDataExtractsEvent::setInfo(const QString &info) {
    m_info = info;
    m_info_isSet = true;
}

bool OAIDataExtractsEvent::is_info_Set() const{
    return m_info_isSet;
}

bool OAIDataExtractsEvent::is_info_Valid() const{
    return m_info_isValid;
}

bool OAIDataExtractsEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataExtractsEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
