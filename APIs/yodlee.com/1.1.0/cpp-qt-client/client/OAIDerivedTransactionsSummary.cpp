/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDerivedTransactionsSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDerivedTransactionsSummary::OAIDerivedTransactionsSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDerivedTransactionsSummary::OAIDerivedTransactionsSummary() {
    this->initializeModel();
}

OAIDerivedTransactionsSummary::~OAIDerivedTransactionsSummary() {}

void OAIDerivedTransactionsSummary::initializeModel() {

    m_category_summary_isSet = false;
    m_category_summary_isValid = false;

    m_category_type_isSet = false;
    m_category_type_isValid = false;

    m_credit_total_isSet = false;
    m_credit_total_isValid = false;

    m_debit_total_isSet = false;
    m_debit_total_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;
}

void OAIDerivedTransactionsSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDerivedTransactionsSummary::fromJsonObject(QJsonObject json) {

    m_category_summary_isValid = ::OpenAPI::fromJsonValue(m_category_summary, json[QString("categorySummary")]);
    m_category_summary_isSet = !json[QString("categorySummary")].isNull() && m_category_summary_isValid;

    m_category_type_isValid = ::OpenAPI::fromJsonValue(m_category_type, json[QString("categoryType")]);
    m_category_type_isSet = !json[QString("categoryType")].isNull() && m_category_type_isValid;

    m_credit_total_isValid = ::OpenAPI::fromJsonValue(m_credit_total, json[QString("creditTotal")]);
    m_credit_total_isSet = !json[QString("creditTotal")].isNull() && m_credit_total_isValid;

    m_debit_total_isValid = ::OpenAPI::fromJsonValue(m_debit_total, json[QString("debitTotal")]);
    m_debit_total_isSet = !json[QString("debitTotal")].isNull() && m_debit_total_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;
}

QString OAIDerivedTransactionsSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDerivedTransactionsSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_category_summary.size() > 0) {
        obj.insert(QString("categorySummary"), ::OpenAPI::toJsonValue(m_category_summary));
    }
    if (m_category_type_isSet) {
        obj.insert(QString("categoryType"), ::OpenAPI::toJsonValue(m_category_type));
    }
    if (m_credit_total.isSet()) {
        obj.insert(QString("creditTotal"), ::OpenAPI::toJsonValue(m_credit_total));
    }
    if (m_debit_total.isSet()) {
        obj.insert(QString("debitTotal"), ::OpenAPI::toJsonValue(m_debit_total));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    return obj;
}

QList<OAIDerivedCategorySummary> OAIDerivedTransactionsSummary::getCategorySummary() const {
    return m_category_summary;
}
void OAIDerivedTransactionsSummary::setCategorySummary(const QList<OAIDerivedCategorySummary> &category_summary) {
    m_category_summary = category_summary;
    m_category_summary_isSet = true;
}

bool OAIDerivedTransactionsSummary::is_category_summary_Set() const{
    return m_category_summary_isSet;
}

bool OAIDerivedTransactionsSummary::is_category_summary_Valid() const{
    return m_category_summary_isValid;
}

QString OAIDerivedTransactionsSummary::getCategoryType() const {
    return m_category_type;
}
void OAIDerivedTransactionsSummary::setCategoryType(const QString &category_type) {
    m_category_type = category_type;
    m_category_type_isSet = true;
}

bool OAIDerivedTransactionsSummary::is_category_type_Set() const{
    return m_category_type_isSet;
}

bool OAIDerivedTransactionsSummary::is_category_type_Valid() const{
    return m_category_type_isValid;
}

OAIMoney OAIDerivedTransactionsSummary::getCreditTotal() const {
    return m_credit_total;
}
void OAIDerivedTransactionsSummary::setCreditTotal(const OAIMoney &credit_total) {
    m_credit_total = credit_total;
    m_credit_total_isSet = true;
}

bool OAIDerivedTransactionsSummary::is_credit_total_Set() const{
    return m_credit_total_isSet;
}

bool OAIDerivedTransactionsSummary::is_credit_total_Valid() const{
    return m_credit_total_isValid;
}

OAIMoney OAIDerivedTransactionsSummary::getDebitTotal() const {
    return m_debit_total;
}
void OAIDerivedTransactionsSummary::setDebitTotal(const OAIMoney &debit_total) {
    m_debit_total = debit_total;
    m_debit_total_isSet = true;
}

bool OAIDerivedTransactionsSummary::is_debit_total_Set() const{
    return m_debit_total_isSet;
}

bool OAIDerivedTransactionsSummary::is_debit_total_Valid() const{
    return m_debit_total_isValid;
}

OAIDerivedTransactionsLinks OAIDerivedTransactionsSummary::getLinks() const {
    return m_links;
}
void OAIDerivedTransactionsSummary::setLinks(const OAIDerivedTransactionsLinks &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIDerivedTransactionsSummary::is_links_Set() const{
    return m_links_isSet;
}

bool OAIDerivedTransactionsSummary::is_links_Valid() const{
    return m_links_isValid;
}

bool OAIDerivedTransactionsSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_summary.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_total.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_debit_total.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDerivedTransactionsSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
