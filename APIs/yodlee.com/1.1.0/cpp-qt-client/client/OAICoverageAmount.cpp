/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICoverageAmount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICoverageAmount::OAICoverageAmount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICoverageAmount::OAICoverageAmount() {
    this->initializeModel();
}

OAICoverageAmount::~OAICoverageAmount() {}

void OAICoverageAmount::initializeModel() {

    m_cover_isSet = false;
    m_cover_isValid = false;

    m_limit_type_isSet = false;
    m_limit_type_isValid = false;

    m_met_isSet = false;
    m_met_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_unit_type_isSet = false;
    m_unit_type_isValid = false;
}

void OAICoverageAmount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICoverageAmount::fromJsonObject(QJsonObject json) {

    m_cover_isValid = ::OpenAPI::fromJsonValue(m_cover, json[QString("cover")]);
    m_cover_isSet = !json[QString("cover")].isNull() && m_cover_isValid;

    m_limit_type_isValid = ::OpenAPI::fromJsonValue(m_limit_type, json[QString("limitType")]);
    m_limit_type_isSet = !json[QString("limitType")].isNull() && m_limit_type_isValid;

    m_met_isValid = ::OpenAPI::fromJsonValue(m_met, json[QString("met")]);
    m_met_isSet = !json[QString("met")].isNull() && m_met_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_unit_type_isValid = ::OpenAPI::fromJsonValue(m_unit_type, json[QString("unitType")]);
    m_unit_type_isSet = !json[QString("unitType")].isNull() && m_unit_type_isValid;
}

QString OAICoverageAmount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICoverageAmount::asJsonObject() const {
    QJsonObject obj;
    if (m_cover.isSet()) {
        obj.insert(QString("cover"), ::OpenAPI::toJsonValue(m_cover));
    }
    if (m_limit_type_isSet) {
        obj.insert(QString("limitType"), ::OpenAPI::toJsonValue(m_limit_type));
    }
    if (m_met.isSet()) {
        obj.insert(QString("met"), ::OpenAPI::toJsonValue(m_met));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_unit_type_isSet) {
        obj.insert(QString("unitType"), ::OpenAPI::toJsonValue(m_unit_type));
    }
    return obj;
}

OAIMoney OAICoverageAmount::getCover() const {
    return m_cover;
}
void OAICoverageAmount::setCover(const OAIMoney &cover) {
    m_cover = cover;
    m_cover_isSet = true;
}

bool OAICoverageAmount::is_cover_Set() const{
    return m_cover_isSet;
}

bool OAICoverageAmount::is_cover_Valid() const{
    return m_cover_isValid;
}

QString OAICoverageAmount::getLimitType() const {
    return m_limit_type;
}
void OAICoverageAmount::setLimitType(const QString &limit_type) {
    m_limit_type = limit_type;
    m_limit_type_isSet = true;
}

bool OAICoverageAmount::is_limit_type_Set() const{
    return m_limit_type_isSet;
}

bool OAICoverageAmount::is_limit_type_Valid() const{
    return m_limit_type_isValid;
}

OAIMoney OAICoverageAmount::getMet() const {
    return m_met;
}
void OAICoverageAmount::setMet(const OAIMoney &met) {
    m_met = met;
    m_met_isSet = true;
}

bool OAICoverageAmount::is_met_Set() const{
    return m_met_isSet;
}

bool OAICoverageAmount::is_met_Valid() const{
    return m_met_isValid;
}

QString OAICoverageAmount::getType() const {
    return m_type;
}
void OAICoverageAmount::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICoverageAmount::is_type_Set() const{
    return m_type_isSet;
}

bool OAICoverageAmount::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICoverageAmount::getUnitType() const {
    return m_unit_type;
}
void OAICoverageAmount::setUnitType(const QString &unit_type) {
    m_unit_type = unit_type;
    m_unit_type_isSet = true;
}

bool OAICoverageAmount::is_unit_type_Set() const{
    return m_unit_type_isSet;
}

bool OAICoverageAmount::is_unit_type_Valid() const{
    return m_unit_type_isValid;
}

bool OAICoverageAmount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cover.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_met.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICoverageAmount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
