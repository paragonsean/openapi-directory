/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_login_name_isSet = false;
    m_login_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_preferences_isSet = false;
    m_preferences_isValid = false;

    m_role_type_isSet = false;
    m_role_type_isValid = false;

    m_session_isSet = false;
    m_session_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_login_name_isValid = ::OpenAPI::fromJsonValue(m_login_name, json[QString("loginName")]);
    m_login_name_isSet = !json[QString("loginName")].isNull() && m_login_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_preferences_isValid = ::OpenAPI::fromJsonValue(m_preferences, json[QString("preferences")]);
    m_preferences_isSet = !json[QString("preferences")].isNull() && m_preferences_isValid;

    m_role_type_isValid = ::OpenAPI::fromJsonValue(m_role_type, json[QString("roleType")]);
    m_role_type_isSet = !json[QString("roleType")].isNull() && m_role_type_isValid;

    m_session_isValid = ::OpenAPI::fromJsonValue(m_session, json[QString("session")]);
    m_session_isSet = !json[QString("session")].isNull() && m_session_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_login_name_isSet) {
        obj.insert(QString("loginName"), ::OpenAPI::toJsonValue(m_login_name));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_preferences.isSet()) {
        obj.insert(QString("preferences"), ::OpenAPI::toJsonValue(m_preferences));
    }
    if (m_role_type_isSet) {
        obj.insert(QString("roleType"), ::OpenAPI::toJsonValue(m_role_type));
    }
    if (m_session.isSet()) {
        obj.insert(QString("session"), ::OpenAPI::toJsonValue(m_session));
    }
    return obj;
}

qint64 OAIUser::getId() const {
    return m_id;
}
void OAIUser::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUser::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUser::getLoginName() const {
    return m_login_name;
}
void OAIUser::setLoginName(const QString &login_name) {
    m_login_name = login_name;
    m_login_name_isSet = true;
}

bool OAIUser::is_login_name_Set() const{
    return m_login_name_isSet;
}

bool OAIUser::is_login_name_Valid() const{
    return m_login_name_isValid;
}

OAIName OAIUser::getName() const {
    return m_name;
}
void OAIUser::setName(const OAIName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUser::is_name_Valid() const{
    return m_name_isValid;
}

OAIUserResponsePreferences OAIUser::getPreferences() const {
    return m_preferences;
}
void OAIUser::setPreferences(const OAIUserResponsePreferences &preferences) {
    m_preferences = preferences;
    m_preferences_isSet = true;
}

bool OAIUser::is_preferences_Set() const{
    return m_preferences_isSet;
}

bool OAIUser::is_preferences_Valid() const{
    return m_preferences_isValid;
}

QString OAIUser::getRoleType() const {
    return m_role_type;
}
void OAIUser::setRoleType(const QString &role_type) {
    m_role_type = role_type;
    m_role_type_isSet = true;
}

bool OAIUser::is_role_type_Set() const{
    return m_role_type_isSet;
}

bool OAIUser::is_role_type_Valid() const{
    return m_role_type_isValid;
}

OAIUserSession OAIUser::getSession() const {
    return m_session;
}
void OAIUser::setSession(const OAIUserSession &session) {
    m_session = session;
    m_session_isSet = true;
}

bool OAIUser::is_session_Set() const{
    return m_session_isSet;
}

bool OAIUser::is_session_Valid() const{
    return m_session_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
