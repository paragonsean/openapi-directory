/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountDataset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountDataset::OAIAccountDataset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountDataset::OAIAccountDataset() {
    this->initializeModel();
}

OAIAccountDataset::~OAIAccountDataset() {}

void OAIAccountDataset::initializeModel() {

    m_additional_status_isSet = false;
    m_additional_status_isValid = false;

    m_last_update_attempt_isSet = false;
    m_last_update_attempt_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_next_update_scheduled_isSet = false;
    m_next_update_scheduled_isValid = false;

    m_update_eligibility_isSet = false;
    m_update_eligibility_isValid = false;
}

void OAIAccountDataset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountDataset::fromJsonObject(QJsonObject json) {

    m_additional_status_isValid = ::OpenAPI::fromJsonValue(m_additional_status, json[QString("additionalStatus")]);
    m_additional_status_isSet = !json[QString("additionalStatus")].isNull() && m_additional_status_isValid;

    m_last_update_attempt_isValid = ::OpenAPI::fromJsonValue(m_last_update_attempt, json[QString("lastUpdateAttempt")]);
    m_last_update_attempt_isSet = !json[QString("lastUpdateAttempt")].isNull() && m_last_update_attempt_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_next_update_scheduled_isValid = ::OpenAPI::fromJsonValue(m_next_update_scheduled, json[QString("nextUpdateScheduled")]);
    m_next_update_scheduled_isSet = !json[QString("nextUpdateScheduled")].isNull() && m_next_update_scheduled_isValid;

    m_update_eligibility_isValid = ::OpenAPI::fromJsonValue(m_update_eligibility, json[QString("updateEligibility")]);
    m_update_eligibility_isSet = !json[QString("updateEligibility")].isNull() && m_update_eligibility_isValid;
}

QString OAIAccountDataset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountDataset::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_status_isSet) {
        obj.insert(QString("additionalStatus"), ::OpenAPI::toJsonValue(m_additional_status));
    }
    if (m_last_update_attempt_isSet) {
        obj.insert(QString("lastUpdateAttempt"), ::OpenAPI::toJsonValue(m_last_update_attempt));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_next_update_scheduled_isSet) {
        obj.insert(QString("nextUpdateScheduled"), ::OpenAPI::toJsonValue(m_next_update_scheduled));
    }
    if (m_update_eligibility_isSet) {
        obj.insert(QString("updateEligibility"), ::OpenAPI::toJsonValue(m_update_eligibility));
    }
    return obj;
}

QString OAIAccountDataset::getAdditionalStatus() const {
    return m_additional_status;
}
void OAIAccountDataset::setAdditionalStatus(const QString &additional_status) {
    m_additional_status = additional_status;
    m_additional_status_isSet = true;
}

bool OAIAccountDataset::is_additional_status_Set() const{
    return m_additional_status_isSet;
}

bool OAIAccountDataset::is_additional_status_Valid() const{
    return m_additional_status_isValid;
}

QString OAIAccountDataset::getLastUpdateAttempt() const {
    return m_last_update_attempt;
}
void OAIAccountDataset::setLastUpdateAttempt(const QString &last_update_attempt) {
    m_last_update_attempt = last_update_attempt;
    m_last_update_attempt_isSet = true;
}

bool OAIAccountDataset::is_last_update_attempt_Set() const{
    return m_last_update_attempt_isSet;
}

bool OAIAccountDataset::is_last_update_attempt_Valid() const{
    return m_last_update_attempt_isValid;
}

QString OAIAccountDataset::getLastUpdated() const {
    return m_last_updated;
}
void OAIAccountDataset::setLastUpdated(const QString &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIAccountDataset::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIAccountDataset::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIAccountDataset::getName() const {
    return m_name;
}
void OAIAccountDataset::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccountDataset::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccountDataset::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAccountDataset::getNextUpdateScheduled() const {
    return m_next_update_scheduled;
}
void OAIAccountDataset::setNextUpdateScheduled(const QString &next_update_scheduled) {
    m_next_update_scheduled = next_update_scheduled;
    m_next_update_scheduled_isSet = true;
}

bool OAIAccountDataset::is_next_update_scheduled_Set() const{
    return m_next_update_scheduled_isSet;
}

bool OAIAccountDataset::is_next_update_scheduled_Valid() const{
    return m_next_update_scheduled_isValid;
}

QString OAIAccountDataset::getUpdateEligibility() const {
    return m_update_eligibility;
}
void OAIAccountDataset::setUpdateEligibility(const QString &update_eligibility) {
    m_update_eligibility = update_eligibility;
    m_update_eligibility_isSet = true;
}

bool OAIAccountDataset::is_update_eligibility_Set() const{
    return m_update_eligibility_isSet;
}

bool OAIAccountDataset::is_update_eligibility_Valid() const{
    return m_update_eligibility_isValid;
}

bool OAIAccountDataset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_attempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_update_scheduled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_eligibility_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountDataset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
