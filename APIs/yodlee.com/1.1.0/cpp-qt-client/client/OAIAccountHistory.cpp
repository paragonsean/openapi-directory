/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountHistory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountHistory::OAIAccountHistory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountHistory::OAIAccountHistory() {
    this->initializeModel();
}

OAIAccountHistory::~OAIAccountHistory() {}

void OAIAccountHistory::initializeModel() {

    m_historical_balances_isSet = false;
    m_historical_balances_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIAccountHistory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountHistory::fromJsonObject(QJsonObject json) {

    m_historical_balances_isValid = ::OpenAPI::fromJsonValue(m_historical_balances, json[QString("historicalBalances")]);
    m_historical_balances_isSet = !json[QString("historicalBalances")].isNull() && m_historical_balances_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIAccountHistory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountHistory::asJsonObject() const {
    QJsonObject obj;
    if (m_historical_balances.size() > 0) {
        obj.insert(QString("historicalBalances"), ::OpenAPI::toJsonValue(m_historical_balances));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QList<OAIHistoricalBalance> OAIAccountHistory::getHistoricalBalances() const {
    return m_historical_balances;
}
void OAIAccountHistory::setHistoricalBalances(const QList<OAIHistoricalBalance> &historical_balances) {
    m_historical_balances = historical_balances;
    m_historical_balances_isSet = true;
}

bool OAIAccountHistory::is_historical_balances_Set() const{
    return m_historical_balances_isSet;
}

bool OAIAccountHistory::is_historical_balances_Valid() const{
    return m_historical_balances_isValid;
}

qint64 OAIAccountHistory::getId() const {
    return m_id;
}
void OAIAccountHistory::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAccountHistory::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccountHistory::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIAccountHistory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_historical_balances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountHistory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
