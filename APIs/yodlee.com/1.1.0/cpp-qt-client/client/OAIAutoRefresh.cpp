/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoRefresh.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoRefresh::OAIAutoRefresh(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoRefresh::OAIAutoRefresh() {
    this->initializeModel();
}

OAIAutoRefresh::~OAIAutoRefresh() {}

void OAIAutoRefresh::initializeModel() {

    m_additional_status_isSet = false;
    m_additional_status_isValid = false;

    m_as_of_date_isSet = false;
    m_as_of_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIAutoRefresh::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutoRefresh::fromJsonObject(QJsonObject json) {

    m_additional_status_isValid = ::OpenAPI::fromJsonValue(m_additional_status, json[QString("additionalStatus")]);
    m_additional_status_isSet = !json[QString("additionalStatus")].isNull() && m_additional_status_isValid;

    m_as_of_date_isValid = ::OpenAPI::fromJsonValue(m_as_of_date, json[QString("asOfDate")]);
    m_as_of_date_isSet = !json[QString("asOfDate")].isNull() && m_as_of_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIAutoRefresh::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutoRefresh::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_status_isSet) {
        obj.insert(QString("additionalStatus"), ::OpenAPI::toJsonValue(m_additional_status));
    }
    if (m_as_of_date_isSet) {
        obj.insert(QString("asOfDate"), ::OpenAPI::toJsonValue(m_as_of_date));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIAutoRefresh::getAdditionalStatus() const {
    return m_additional_status;
}
void OAIAutoRefresh::setAdditionalStatus(const QString &additional_status) {
    m_additional_status = additional_status;
    m_additional_status_isSet = true;
}

bool OAIAutoRefresh::is_additional_status_Set() const{
    return m_additional_status_isSet;
}

bool OAIAutoRefresh::is_additional_status_Valid() const{
    return m_additional_status_isValid;
}

QString OAIAutoRefresh::getAsOfDate() const {
    return m_as_of_date;
}
void OAIAutoRefresh::setAsOfDate(const QString &as_of_date) {
    m_as_of_date = as_of_date;
    m_as_of_date_isSet = true;
}

bool OAIAutoRefresh::is_as_of_date_Set() const{
    return m_as_of_date_isSet;
}

bool OAIAutoRefresh::is_as_of_date_Valid() const{
    return m_as_of_date_isValid;
}

QString OAIAutoRefresh::getStatus() const {
    return m_status;
}
void OAIAutoRefresh::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAutoRefresh::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAutoRefresh::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIAutoRefresh::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_as_of_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutoRefresh::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
