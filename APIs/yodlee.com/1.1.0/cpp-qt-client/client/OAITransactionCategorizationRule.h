/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITransactionCategorizationRule.h
 *
 * 
 */

#ifndef OAITransactionCategorizationRule_H
#define OAITransactionCategorizationRule_H

#include <QJsonObject>

#include "OAIRuleClause.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRuleClause;

class OAITransactionCategorizationRule : public OAIObject {
public:
    OAITransactionCategorizationRule();
    OAITransactionCategorizationRule(QString json);
    ~OAITransactionCategorizationRule() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCategoryLevelId() const;
    void setCategoryLevelId(const qint32 &category_level_id);
    bool is_category_level_id_Set() const;
    bool is_category_level_id_Valid() const;

    qint64 getMemId() const;
    void setMemId(const qint64 &mem_id);
    bool is_mem_id_Set() const;
    bool is_mem_id_Valid() const;

    QList<OAIRuleClause> getRuleClauses() const;
    void setRuleClauses(const QList<OAIRuleClause> &rule_clauses);
    bool is_rule_clauses_Set() const;
    bool is_rule_clauses_Valid() const;

    qint32 getRulePriority() const;
    void setRulePriority(const qint32 &rule_priority);
    bool is_rule_priority_Set() const;
    bool is_rule_priority_Valid() const;

    qint64 getTransactionCategorisationId() const;
    void setTransactionCategorisationId(const qint64 &transaction_categorisation_id);
    bool is_transaction_categorisation_id_Set() const;
    bool is_transaction_categorisation_id_Valid() const;

    qint64 getUserDefinedRuleId() const;
    void setUserDefinedRuleId(const qint64 &user_defined_rule_id);
    bool is_user_defined_rule_id_Set() const;
    bool is_user_defined_rule_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_category_level_id;
    bool m_category_level_id_isSet;
    bool m_category_level_id_isValid;

    qint64 m_mem_id;
    bool m_mem_id_isSet;
    bool m_mem_id_isValid;

    QList<OAIRuleClause> m_rule_clauses;
    bool m_rule_clauses_isSet;
    bool m_rule_clauses_isValid;

    qint32 m_rule_priority;
    bool m_rule_priority_isSet;
    bool m_rule_priority_isValid;

    qint64 m_transaction_categorisation_id;
    bool m_transaction_categorisation_id_isSet;
    bool m_transaction_categorisation_id_isValid;

    qint64 m_user_defined_rule_id;
    bool m_user_defined_rule_id_isSet;
    bool m_user_defined_rule_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITransactionCategorizationRule)

#endif // OAITransactionCategorizationRule_H
