/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProviderAccountPreferences.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProviderAccountPreferences::OAIProviderAccountPreferences(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProviderAccountPreferences::OAIProviderAccountPreferences() {
    this->initializeModel();
}

OAIProviderAccountPreferences::~OAIProviderAccountPreferences() {}

void OAIProviderAccountPreferences::initializeModel() {

    m_is_auto_refresh_enabled_isSet = false;
    m_is_auto_refresh_enabled_isValid = false;

    m_is_data_extracts_enabled_isSet = false;
    m_is_data_extracts_enabled_isValid = false;

    m_linked_provider_account_id_isSet = false;
    m_linked_provider_account_id_isValid = false;
}

void OAIProviderAccountPreferences::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProviderAccountPreferences::fromJsonObject(QJsonObject json) {

    m_is_auto_refresh_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_auto_refresh_enabled, json[QString("isAutoRefreshEnabled")]);
    m_is_auto_refresh_enabled_isSet = !json[QString("isAutoRefreshEnabled")].isNull() && m_is_auto_refresh_enabled_isValid;

    m_is_data_extracts_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_data_extracts_enabled, json[QString("isDataExtractsEnabled")]);
    m_is_data_extracts_enabled_isSet = !json[QString("isDataExtractsEnabled")].isNull() && m_is_data_extracts_enabled_isValid;

    m_linked_provider_account_id_isValid = ::OpenAPI::fromJsonValue(m_linked_provider_account_id, json[QString("linkedProviderAccountId")]);
    m_linked_provider_account_id_isSet = !json[QString("linkedProviderAccountId")].isNull() && m_linked_provider_account_id_isValid;
}

QString OAIProviderAccountPreferences::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProviderAccountPreferences::asJsonObject() const {
    QJsonObject obj;
    if (m_is_auto_refresh_enabled_isSet) {
        obj.insert(QString("isAutoRefreshEnabled"), ::OpenAPI::toJsonValue(m_is_auto_refresh_enabled));
    }
    if (m_is_data_extracts_enabled_isSet) {
        obj.insert(QString("isDataExtractsEnabled"), ::OpenAPI::toJsonValue(m_is_data_extracts_enabled));
    }
    if (m_linked_provider_account_id_isSet) {
        obj.insert(QString("linkedProviderAccountId"), ::OpenAPI::toJsonValue(m_linked_provider_account_id));
    }
    return obj;
}

bool OAIProviderAccountPreferences::isIsAutoRefreshEnabled() const {
    return m_is_auto_refresh_enabled;
}
void OAIProviderAccountPreferences::setIsAutoRefreshEnabled(const bool &is_auto_refresh_enabled) {
    m_is_auto_refresh_enabled = is_auto_refresh_enabled;
    m_is_auto_refresh_enabled_isSet = true;
}

bool OAIProviderAccountPreferences::is_is_auto_refresh_enabled_Set() const{
    return m_is_auto_refresh_enabled_isSet;
}

bool OAIProviderAccountPreferences::is_is_auto_refresh_enabled_Valid() const{
    return m_is_auto_refresh_enabled_isValid;
}

bool OAIProviderAccountPreferences::isIsDataExtractsEnabled() const {
    return m_is_data_extracts_enabled;
}
void OAIProviderAccountPreferences::setIsDataExtractsEnabled(const bool &is_data_extracts_enabled) {
    m_is_data_extracts_enabled = is_data_extracts_enabled;
    m_is_data_extracts_enabled_isSet = true;
}

bool OAIProviderAccountPreferences::is_is_data_extracts_enabled_Set() const{
    return m_is_data_extracts_enabled_isSet;
}

bool OAIProviderAccountPreferences::is_is_data_extracts_enabled_Valid() const{
    return m_is_data_extracts_enabled_isValid;
}

qint64 OAIProviderAccountPreferences::getLinkedProviderAccountId() const {
    return m_linked_provider_account_id;
}
void OAIProviderAccountPreferences::setLinkedProviderAccountId(const qint64 &linked_provider_account_id) {
    m_linked_provider_account_id = linked_provider_account_id;
    m_linked_provider_account_id_isSet = true;
}

bool OAIProviderAccountPreferences::is_linked_provider_account_id_Set() const{
    return m_linked_provider_account_id_isSet;
}

bool OAIProviderAccountPreferences::is_linked_provider_account_id_Valid() const{
    return m_linked_provider_account_id_isValid;
}

bool OAIProviderAccountPreferences::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_auto_refresh_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_data_extracts_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_provider_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProviderAccountPreferences::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
