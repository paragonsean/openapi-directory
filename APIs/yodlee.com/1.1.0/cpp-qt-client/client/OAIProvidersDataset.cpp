/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvidersDataset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvidersDataset::OAIProvidersDataset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvidersDataset::OAIProvidersDataset() {
    this->initializeModel();
}

OAIProvidersDataset::~OAIProvidersDataset() {}

void OAIProvidersDataset::initializeModel() {

    m_attribute_isSet = false;
    m_attribute_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIProvidersDataset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProvidersDataset::fromJsonObject(QJsonObject json) {

    m_attribute_isValid = ::OpenAPI::fromJsonValue(m_attribute, json[QString("attribute")]);
    m_attribute_isSet = !json[QString("attribute")].isNull() && m_attribute_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIProvidersDataset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProvidersDataset::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute.size() > 0) {
        obj.insert(QString("attribute"), ::OpenAPI::toJsonValue(m_attribute));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QList<OAIAttribute> OAIProvidersDataset::getAttribute() const {
    return m_attribute;
}
void OAIProvidersDataset::setAttribute(const QList<OAIAttribute> &attribute) {
    m_attribute = attribute;
    m_attribute_isSet = true;
}

bool OAIProvidersDataset::is_attribute_Set() const{
    return m_attribute_isSet;
}

bool OAIProvidersDataset::is_attribute_Valid() const{
    return m_attribute_isValid;
}

QString OAIProvidersDataset::getName() const {
    return m_name;
}
void OAIProvidersDataset::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProvidersDataset::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProvidersDataset::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIProvidersDataset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProvidersDataset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
