/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataExtractsAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataExtractsAccount::OAIDataExtractsAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataExtractsAccount::OAIDataExtractsAccount() {
    this->initializeModel();
}

OAIDataExtractsAccount::~OAIDataExtractsAccount() {}

void OAIDataExtractsAccount::initializeModel() {

    m_r_401k_loan_isSet = false;
    m_r_401k_loan_isValid = false;

    m_container_isSet = false;
    m_container_isValid = false;

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_account_number_isSet = false;
    m_account_number_isValid = false;

    m_account_status_isSet = false;
    m_account_status_isValid = false;

    m_account_type_isSet = false;
    m_account_type_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_aggregation_source_isSet = false;
    m_aggregation_source_isValid = false;

    m_amount_due_isSet = false;
    m_amount_due_isValid = false;

    m_annual_percentage_yield_isSet = false;
    m_annual_percentage_yield_isValid = false;

    m_annuity_balance_isSet = false;
    m_annuity_balance_isValid = false;

    m_apr_isSet = false;
    m_apr_isValid = false;

    m_associated_provider_account_id_isSet = false;
    m_associated_provider_account_id_isValid = false;

    m_available_balance_isSet = false;
    m_available_balance_isValid = false;

    m_available_cash_isSet = false;
    m_available_cash_isValid = false;

    m_available_credit_isSet = false;
    m_available_credit_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_bank_transfer_code_isSet = false;
    m_bank_transfer_code_isValid = false;

    m_cash_isSet = false;
    m_cash_isValid = false;

    m_cash_apr_isSet = false;
    m_cash_apr_isValid = false;

    m_cash_value_isSet = false;
    m_cash_value_isValid = false;

    m_classification_isSet = false;
    m_classification_isValid = false;

    m_collateral_isSet = false;
    m_collateral_isValid = false;

    m_coverage_isSet = false;
    m_coverage_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_current_balance_isSet = false;
    m_current_balance_isValid = false;

    m_current_level_isSet = false;
    m_current_level_isValid = false;

    m_dataset_isSet = false;
    m_dataset_isValid = false;

    m_death_benefit_isSet = false;
    m_death_benefit_isValid = false;

    m_derived_apr_isSet = false;
    m_derived_apr_isValid = false;

    m_displayed_name_isSet = false;
    m_displayed_name_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_enrollment_date_isSet = false;
    m_enrollment_date_isValid = false;

    m_escrow_balance_isSet = false;
    m_escrow_balance_isValid = false;

    m_estimated_date_isSet = false;
    m_estimated_date_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_face_amount_isSet = false;
    m_face_amount_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_guarantor_isSet = false;
    m_guarantor_isValid = false;

    m_home_insurance_type_isSet = false;
    m_home_insurance_type_isValid = false;

    m_home_value_isSet = false;
    m_home_value_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_include_in_net_worth_isSet = false;
    m_include_in_net_worth_isValid = false;

    m_interest_paid_last_year_isSet = false;
    m_interest_paid_last_year_isValid = false;

    m_interest_paid_ytd_isSet = false;
    m_interest_paid_ytd_isValid = false;

    m_interest_rate_isSet = false;
    m_interest_rate_isValid = false;

    m_interest_rate_type_isSet = false;
    m_interest_rate_type_isValid = false;

    m_is_asset_isSet = false;
    m_is_asset_isValid = false;

    m_is_deleted_isSet = false;
    m_is_deleted_isValid = false;

    m_is_manual_isSet = false;
    m_is_manual_isValid = false;

    m_last_employee_contribution_amount_isSet = false;
    m_last_employee_contribution_amount_isValid = false;

    m_last_employee_contribution_date_isSet = false;
    m_last_employee_contribution_date_isValid = false;

    m_last_payment_isSet = false;
    m_last_payment_isValid = false;

    m_last_payment_amount_isSet = false;
    m_last_payment_amount_isValid = false;

    m_last_payment_date_isSet = false;
    m_last_payment_date_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_lender_isSet = false;
    m_lender_isValid = false;

    m_life_insurance_type_isSet = false;
    m_life_insurance_type_isValid = false;

    m_loan_pay_by_date_isSet = false;
    m_loan_pay_by_date_isValid = false;

    m_loan_payoff_amount_isSet = false;
    m_loan_payoff_amount_isValid = false;

    m_loan_payoff_details_isSet = false;
    m_loan_payoff_details_isValid = false;

    m_margin_balance_isSet = false;
    m_margin_balance_isValid = false;

    m_maturity_amount_isSet = false;
    m_maturity_amount_isValid = false;

    m_maturity_date_isSet = false;
    m_maturity_date_isValid = false;

    m_memo_isSet = false;
    m_memo_isValid = false;

    m_minimum_amount_due_isSet = false;
    m_minimum_amount_due_isValid = false;

    m_money_market_balance_isSet = false;
    m_money_market_balance_isValid = false;

    m_next_level_isSet = false;
    m_next_level_isValid = false;

    m_nickname_isSet = false;
    m_nickname_isValid = false;

    m_oauth_migration_status_isSet = false;
    m_oauth_migration_status_isValid = false;

    m_original_loan_amount_isSet = false;
    m_original_loan_amount_isValid = false;

    m_origination_date_isSet = false;
    m_origination_date_isValid = false;

    m_over_draft_limit_isSet = false;
    m_over_draft_limit_isValid = false;

    m_policy_effective_date_isSet = false;
    m_policy_effective_date_isValid = false;

    m_policy_from_date_isSet = false;
    m_policy_from_date_isValid = false;

    m_policy_status_isSet = false;
    m_policy_status_isValid = false;

    m_policy_term_isSet = false;
    m_policy_term_isValid = false;

    m_policy_to_date_isSet = false;
    m_policy_to_date_isValid = false;

    m_premium_isSet = false;
    m_premium_isValid = false;

    m_premium_payment_term_isSet = false;
    m_premium_payment_term_isValid = false;

    m_primary_reward_unit_isSet = false;
    m_primary_reward_unit_isValid = false;

    m_principal_balance_isSet = false;
    m_principal_balance_isValid = false;

    m_provider_account_id_isSet = false;
    m_provider_account_id_isValid = false;

    m_provider_id_isSet = false;
    m_provider_id_isValid = false;

    m_provider_name_isSet = false;
    m_provider_name_isValid = false;

    m_recurring_payment_isSet = false;
    m_recurring_payment_isValid = false;

    m_remaining_balance_isSet = false;
    m_remaining_balance_isValid = false;

    m_repayment_plan_type_isSet = false;
    m_repayment_plan_type_isValid = false;

    m_reward_balance_isSet = false;
    m_reward_balance_isValid = false;

    m_running_balance_isSet = false;
    m_running_balance_isValid = false;

    m_short_balance_isSet = false;
    m_short_balance_isValid = false;

    m_source_account_status_isSet = false;
    m_source_account_status_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_term_isSet = false;
    m_term_isValid = false;

    m_total_cash_limit_isSet = false;
    m_total_cash_limit_isValid = false;

    m_total_credit_limit_isSet = false;
    m_total_credit_limit_isValid = false;

    m_total_credit_line_isSet = false;
    m_total_credit_line_isValid = false;

    m_total_unvested_balance_isSet = false;
    m_total_unvested_balance_isValid = false;

    m_total_vested_balance_isSet = false;
    m_total_vested_balance_isValid = false;

    m_user_classification_isSet = false;
    m_user_classification_isValid = false;

    m_valuation_type_isSet = false;
    m_valuation_type_isValid = false;
}

void OAIDataExtractsAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataExtractsAccount::fromJsonObject(QJsonObject json) {

    m_r_401k_loan_isValid = ::OpenAPI::fromJsonValue(m_r_401k_loan, json[QString("401kLoan")]);
    m_r_401k_loan_isSet = !json[QString("401kLoan")].isNull() && m_r_401k_loan_isValid;

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("CONTAINER")]);
    m_container_isSet = !json[QString("CONTAINER")].isNull() && m_container_isValid;

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_account_number_isValid = ::OpenAPI::fromJsonValue(m_account_number, json[QString("accountNumber")]);
    m_account_number_isSet = !json[QString("accountNumber")].isNull() && m_account_number_isValid;

    m_account_status_isValid = ::OpenAPI::fromJsonValue(m_account_status, json[QString("accountStatus")]);
    m_account_status_isSet = !json[QString("accountStatus")].isNull() && m_account_status_isValid;

    m_account_type_isValid = ::OpenAPI::fromJsonValue(m_account_type, json[QString("accountType")]);
    m_account_type_isSet = !json[QString("accountType")].isNull() && m_account_type_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_aggregation_source_isValid = ::OpenAPI::fromJsonValue(m_aggregation_source, json[QString("aggregationSource")]);
    m_aggregation_source_isSet = !json[QString("aggregationSource")].isNull() && m_aggregation_source_isValid;

    m_amount_due_isValid = ::OpenAPI::fromJsonValue(m_amount_due, json[QString("amountDue")]);
    m_amount_due_isSet = !json[QString("amountDue")].isNull() && m_amount_due_isValid;

    m_annual_percentage_yield_isValid = ::OpenAPI::fromJsonValue(m_annual_percentage_yield, json[QString("annualPercentageYield")]);
    m_annual_percentage_yield_isSet = !json[QString("annualPercentageYield")].isNull() && m_annual_percentage_yield_isValid;

    m_annuity_balance_isValid = ::OpenAPI::fromJsonValue(m_annuity_balance, json[QString("annuityBalance")]);
    m_annuity_balance_isSet = !json[QString("annuityBalance")].isNull() && m_annuity_balance_isValid;

    m_apr_isValid = ::OpenAPI::fromJsonValue(m_apr, json[QString("apr")]);
    m_apr_isSet = !json[QString("apr")].isNull() && m_apr_isValid;

    m_associated_provider_account_id_isValid = ::OpenAPI::fromJsonValue(m_associated_provider_account_id, json[QString("associatedProviderAccountId")]);
    m_associated_provider_account_id_isSet = !json[QString("associatedProviderAccountId")].isNull() && m_associated_provider_account_id_isValid;

    m_available_balance_isValid = ::OpenAPI::fromJsonValue(m_available_balance, json[QString("availableBalance")]);
    m_available_balance_isSet = !json[QString("availableBalance")].isNull() && m_available_balance_isValid;

    m_available_cash_isValid = ::OpenAPI::fromJsonValue(m_available_cash, json[QString("availableCash")]);
    m_available_cash_isSet = !json[QString("availableCash")].isNull() && m_available_cash_isValid;

    m_available_credit_isValid = ::OpenAPI::fromJsonValue(m_available_credit, json[QString("availableCredit")]);
    m_available_credit_isSet = !json[QString("availableCredit")].isNull() && m_available_credit_isValid;

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_bank_transfer_code_isValid = ::OpenAPI::fromJsonValue(m_bank_transfer_code, json[QString("bankTransferCode")]);
    m_bank_transfer_code_isSet = !json[QString("bankTransferCode")].isNull() && m_bank_transfer_code_isValid;

    m_cash_isValid = ::OpenAPI::fromJsonValue(m_cash, json[QString("cash")]);
    m_cash_isSet = !json[QString("cash")].isNull() && m_cash_isValid;

    m_cash_apr_isValid = ::OpenAPI::fromJsonValue(m_cash_apr, json[QString("cashApr")]);
    m_cash_apr_isSet = !json[QString("cashApr")].isNull() && m_cash_apr_isValid;

    m_cash_value_isValid = ::OpenAPI::fromJsonValue(m_cash_value, json[QString("cashValue")]);
    m_cash_value_isSet = !json[QString("cashValue")].isNull() && m_cash_value_isValid;

    m_classification_isValid = ::OpenAPI::fromJsonValue(m_classification, json[QString("classification")]);
    m_classification_isSet = !json[QString("classification")].isNull() && m_classification_isValid;

    m_collateral_isValid = ::OpenAPI::fromJsonValue(m_collateral, json[QString("collateral")]);
    m_collateral_isSet = !json[QString("collateral")].isNull() && m_collateral_isValid;

    m_coverage_isValid = ::OpenAPI::fromJsonValue(m_coverage, json[QString("coverage")]);
    m_coverage_isSet = !json[QString("coverage")].isNull() && m_coverage_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_current_balance_isValid = ::OpenAPI::fromJsonValue(m_current_balance, json[QString("currentBalance")]);
    m_current_balance_isSet = !json[QString("currentBalance")].isNull() && m_current_balance_isValid;

    m_current_level_isValid = ::OpenAPI::fromJsonValue(m_current_level, json[QString("currentLevel")]);
    m_current_level_isSet = !json[QString("currentLevel")].isNull() && m_current_level_isValid;

    m_dataset_isValid = ::OpenAPI::fromJsonValue(m_dataset, json[QString("dataset")]);
    m_dataset_isSet = !json[QString("dataset")].isNull() && m_dataset_isValid;

    m_death_benefit_isValid = ::OpenAPI::fromJsonValue(m_death_benefit, json[QString("deathBenefit")]);
    m_death_benefit_isSet = !json[QString("deathBenefit")].isNull() && m_death_benefit_isValid;

    m_derived_apr_isValid = ::OpenAPI::fromJsonValue(m_derived_apr, json[QString("derivedApr")]);
    m_derived_apr_isSet = !json[QString("derivedApr")].isNull() && m_derived_apr_isValid;

    m_displayed_name_isValid = ::OpenAPI::fromJsonValue(m_displayed_name, json[QString("displayedName")]);
    m_displayed_name_isSet = !json[QString("displayedName")].isNull() && m_displayed_name_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("dueDate")]);
    m_due_date_isSet = !json[QString("dueDate")].isNull() && m_due_date_isValid;

    m_enrollment_date_isValid = ::OpenAPI::fromJsonValue(m_enrollment_date, json[QString("enrollmentDate")]);
    m_enrollment_date_isSet = !json[QString("enrollmentDate")].isNull() && m_enrollment_date_isValid;

    m_escrow_balance_isValid = ::OpenAPI::fromJsonValue(m_escrow_balance, json[QString("escrowBalance")]);
    m_escrow_balance_isSet = !json[QString("escrowBalance")].isNull() && m_escrow_balance_isValid;

    m_estimated_date_isValid = ::OpenAPI::fromJsonValue(m_estimated_date, json[QString("estimatedDate")]);
    m_estimated_date_isSet = !json[QString("estimatedDate")].isNull() && m_estimated_date_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_face_amount_isValid = ::OpenAPI::fromJsonValue(m_face_amount, json[QString("faceAmount")]);
    m_face_amount_isSet = !json[QString("faceAmount")].isNull() && m_face_amount_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_guarantor_isValid = ::OpenAPI::fromJsonValue(m_guarantor, json[QString("guarantor")]);
    m_guarantor_isSet = !json[QString("guarantor")].isNull() && m_guarantor_isValid;

    m_home_insurance_type_isValid = ::OpenAPI::fromJsonValue(m_home_insurance_type, json[QString("homeInsuranceType")]);
    m_home_insurance_type_isSet = !json[QString("homeInsuranceType")].isNull() && m_home_insurance_type_isValid;

    m_home_value_isValid = ::OpenAPI::fromJsonValue(m_home_value, json[QString("homeValue")]);
    m_home_value_isSet = !json[QString("homeValue")].isNull() && m_home_value_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_include_in_net_worth_isValid = ::OpenAPI::fromJsonValue(m_include_in_net_worth, json[QString("includeInNetWorth")]);
    m_include_in_net_worth_isSet = !json[QString("includeInNetWorth")].isNull() && m_include_in_net_worth_isValid;

    m_interest_paid_last_year_isValid = ::OpenAPI::fromJsonValue(m_interest_paid_last_year, json[QString("interestPaidLastYear")]);
    m_interest_paid_last_year_isSet = !json[QString("interestPaidLastYear")].isNull() && m_interest_paid_last_year_isValid;

    m_interest_paid_ytd_isValid = ::OpenAPI::fromJsonValue(m_interest_paid_ytd, json[QString("interestPaidYTD")]);
    m_interest_paid_ytd_isSet = !json[QString("interestPaidYTD")].isNull() && m_interest_paid_ytd_isValid;

    m_interest_rate_isValid = ::OpenAPI::fromJsonValue(m_interest_rate, json[QString("interestRate")]);
    m_interest_rate_isSet = !json[QString("interestRate")].isNull() && m_interest_rate_isValid;

    m_interest_rate_type_isValid = ::OpenAPI::fromJsonValue(m_interest_rate_type, json[QString("interestRateType")]);
    m_interest_rate_type_isSet = !json[QString("interestRateType")].isNull() && m_interest_rate_type_isValid;

    m_is_asset_isValid = ::OpenAPI::fromJsonValue(m_is_asset, json[QString("isAsset")]);
    m_is_asset_isSet = !json[QString("isAsset")].isNull() && m_is_asset_isValid;

    m_is_deleted_isValid = ::OpenAPI::fromJsonValue(m_is_deleted, json[QString("isDeleted")]);
    m_is_deleted_isSet = !json[QString("isDeleted")].isNull() && m_is_deleted_isValid;

    m_is_manual_isValid = ::OpenAPI::fromJsonValue(m_is_manual, json[QString("isManual")]);
    m_is_manual_isSet = !json[QString("isManual")].isNull() && m_is_manual_isValid;

    m_last_employee_contribution_amount_isValid = ::OpenAPI::fromJsonValue(m_last_employee_contribution_amount, json[QString("lastEmployeeContributionAmount")]);
    m_last_employee_contribution_amount_isSet = !json[QString("lastEmployeeContributionAmount")].isNull() && m_last_employee_contribution_amount_isValid;

    m_last_employee_contribution_date_isValid = ::OpenAPI::fromJsonValue(m_last_employee_contribution_date, json[QString("lastEmployeeContributionDate")]);
    m_last_employee_contribution_date_isSet = !json[QString("lastEmployeeContributionDate")].isNull() && m_last_employee_contribution_date_isValid;

    m_last_payment_isValid = ::OpenAPI::fromJsonValue(m_last_payment, json[QString("lastPayment")]);
    m_last_payment_isSet = !json[QString("lastPayment")].isNull() && m_last_payment_isValid;

    m_last_payment_amount_isValid = ::OpenAPI::fromJsonValue(m_last_payment_amount, json[QString("lastPaymentAmount")]);
    m_last_payment_amount_isSet = !json[QString("lastPaymentAmount")].isNull() && m_last_payment_amount_isValid;

    m_last_payment_date_isValid = ::OpenAPI::fromJsonValue(m_last_payment_date, json[QString("lastPaymentDate")]);
    m_last_payment_date_isSet = !json[QString("lastPaymentDate")].isNull() && m_last_payment_date_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_lender_isValid = ::OpenAPI::fromJsonValue(m_lender, json[QString("lender")]);
    m_lender_isSet = !json[QString("lender")].isNull() && m_lender_isValid;

    m_life_insurance_type_isValid = ::OpenAPI::fromJsonValue(m_life_insurance_type, json[QString("lifeInsuranceType")]);
    m_life_insurance_type_isSet = !json[QString("lifeInsuranceType")].isNull() && m_life_insurance_type_isValid;

    m_loan_pay_by_date_isValid = ::OpenAPI::fromJsonValue(m_loan_pay_by_date, json[QString("loanPayByDate")]);
    m_loan_pay_by_date_isSet = !json[QString("loanPayByDate")].isNull() && m_loan_pay_by_date_isValid;

    m_loan_payoff_amount_isValid = ::OpenAPI::fromJsonValue(m_loan_payoff_amount, json[QString("loanPayoffAmount")]);
    m_loan_payoff_amount_isSet = !json[QString("loanPayoffAmount")].isNull() && m_loan_payoff_amount_isValid;

    m_loan_payoff_details_isValid = ::OpenAPI::fromJsonValue(m_loan_payoff_details, json[QString("loanPayoffDetails")]);
    m_loan_payoff_details_isSet = !json[QString("loanPayoffDetails")].isNull() && m_loan_payoff_details_isValid;

    m_margin_balance_isValid = ::OpenAPI::fromJsonValue(m_margin_balance, json[QString("marginBalance")]);
    m_margin_balance_isSet = !json[QString("marginBalance")].isNull() && m_margin_balance_isValid;

    m_maturity_amount_isValid = ::OpenAPI::fromJsonValue(m_maturity_amount, json[QString("maturityAmount")]);
    m_maturity_amount_isSet = !json[QString("maturityAmount")].isNull() && m_maturity_amount_isValid;

    m_maturity_date_isValid = ::OpenAPI::fromJsonValue(m_maturity_date, json[QString("maturityDate")]);
    m_maturity_date_isSet = !json[QString("maturityDate")].isNull() && m_maturity_date_isValid;

    m_memo_isValid = ::OpenAPI::fromJsonValue(m_memo, json[QString("memo")]);
    m_memo_isSet = !json[QString("memo")].isNull() && m_memo_isValid;

    m_minimum_amount_due_isValid = ::OpenAPI::fromJsonValue(m_minimum_amount_due, json[QString("minimumAmountDue")]);
    m_minimum_amount_due_isSet = !json[QString("minimumAmountDue")].isNull() && m_minimum_amount_due_isValid;

    m_money_market_balance_isValid = ::OpenAPI::fromJsonValue(m_money_market_balance, json[QString("moneyMarketBalance")]);
    m_money_market_balance_isSet = !json[QString("moneyMarketBalance")].isNull() && m_money_market_balance_isValid;

    m_next_level_isValid = ::OpenAPI::fromJsonValue(m_next_level, json[QString("nextLevel")]);
    m_next_level_isSet = !json[QString("nextLevel")].isNull() && m_next_level_isValid;

    m_nickname_isValid = ::OpenAPI::fromJsonValue(m_nickname, json[QString("nickname")]);
    m_nickname_isSet = !json[QString("nickname")].isNull() && m_nickname_isValid;

    m_oauth_migration_status_isValid = ::OpenAPI::fromJsonValue(m_oauth_migration_status, json[QString("oauthMigrationStatus")]);
    m_oauth_migration_status_isSet = !json[QString("oauthMigrationStatus")].isNull() && m_oauth_migration_status_isValid;

    m_original_loan_amount_isValid = ::OpenAPI::fromJsonValue(m_original_loan_amount, json[QString("originalLoanAmount")]);
    m_original_loan_amount_isSet = !json[QString("originalLoanAmount")].isNull() && m_original_loan_amount_isValid;

    m_origination_date_isValid = ::OpenAPI::fromJsonValue(m_origination_date, json[QString("originationDate")]);
    m_origination_date_isSet = !json[QString("originationDate")].isNull() && m_origination_date_isValid;

    m_over_draft_limit_isValid = ::OpenAPI::fromJsonValue(m_over_draft_limit, json[QString("overDraftLimit")]);
    m_over_draft_limit_isSet = !json[QString("overDraftLimit")].isNull() && m_over_draft_limit_isValid;

    m_policy_effective_date_isValid = ::OpenAPI::fromJsonValue(m_policy_effective_date, json[QString("policyEffectiveDate")]);
    m_policy_effective_date_isSet = !json[QString("policyEffectiveDate")].isNull() && m_policy_effective_date_isValid;

    m_policy_from_date_isValid = ::OpenAPI::fromJsonValue(m_policy_from_date, json[QString("policyFromDate")]);
    m_policy_from_date_isSet = !json[QString("policyFromDate")].isNull() && m_policy_from_date_isValid;

    m_policy_status_isValid = ::OpenAPI::fromJsonValue(m_policy_status, json[QString("policyStatus")]);
    m_policy_status_isSet = !json[QString("policyStatus")].isNull() && m_policy_status_isValid;

    m_policy_term_isValid = ::OpenAPI::fromJsonValue(m_policy_term, json[QString("policyTerm")]);
    m_policy_term_isSet = !json[QString("policyTerm")].isNull() && m_policy_term_isValid;

    m_policy_to_date_isValid = ::OpenAPI::fromJsonValue(m_policy_to_date, json[QString("policyToDate")]);
    m_policy_to_date_isSet = !json[QString("policyToDate")].isNull() && m_policy_to_date_isValid;

    m_premium_isValid = ::OpenAPI::fromJsonValue(m_premium, json[QString("premium")]);
    m_premium_isSet = !json[QString("premium")].isNull() && m_premium_isValid;

    m_premium_payment_term_isValid = ::OpenAPI::fromJsonValue(m_premium_payment_term, json[QString("premiumPaymentTerm")]);
    m_premium_payment_term_isSet = !json[QString("premiumPaymentTerm")].isNull() && m_premium_payment_term_isValid;

    m_primary_reward_unit_isValid = ::OpenAPI::fromJsonValue(m_primary_reward_unit, json[QString("primaryRewardUnit")]);
    m_primary_reward_unit_isSet = !json[QString("primaryRewardUnit")].isNull() && m_primary_reward_unit_isValid;

    m_principal_balance_isValid = ::OpenAPI::fromJsonValue(m_principal_balance, json[QString("principalBalance")]);
    m_principal_balance_isSet = !json[QString("principalBalance")].isNull() && m_principal_balance_isValid;

    m_provider_account_id_isValid = ::OpenAPI::fromJsonValue(m_provider_account_id, json[QString("providerAccountId")]);
    m_provider_account_id_isSet = !json[QString("providerAccountId")].isNull() && m_provider_account_id_isValid;

    m_provider_id_isValid = ::OpenAPI::fromJsonValue(m_provider_id, json[QString("providerId")]);
    m_provider_id_isSet = !json[QString("providerId")].isNull() && m_provider_id_isValid;

    m_provider_name_isValid = ::OpenAPI::fromJsonValue(m_provider_name, json[QString("providerName")]);
    m_provider_name_isSet = !json[QString("providerName")].isNull() && m_provider_name_isValid;

    m_recurring_payment_isValid = ::OpenAPI::fromJsonValue(m_recurring_payment, json[QString("recurringPayment")]);
    m_recurring_payment_isSet = !json[QString("recurringPayment")].isNull() && m_recurring_payment_isValid;

    m_remaining_balance_isValid = ::OpenAPI::fromJsonValue(m_remaining_balance, json[QString("remainingBalance")]);
    m_remaining_balance_isSet = !json[QString("remainingBalance")].isNull() && m_remaining_balance_isValid;

    m_repayment_plan_type_isValid = ::OpenAPI::fromJsonValue(m_repayment_plan_type, json[QString("repaymentPlanType")]);
    m_repayment_plan_type_isSet = !json[QString("repaymentPlanType")].isNull() && m_repayment_plan_type_isValid;

    m_reward_balance_isValid = ::OpenAPI::fromJsonValue(m_reward_balance, json[QString("rewardBalance")]);
    m_reward_balance_isSet = !json[QString("rewardBalance")].isNull() && m_reward_balance_isValid;

    m_running_balance_isValid = ::OpenAPI::fromJsonValue(m_running_balance, json[QString("runningBalance")]);
    m_running_balance_isSet = !json[QString("runningBalance")].isNull() && m_running_balance_isValid;

    m_short_balance_isValid = ::OpenAPI::fromJsonValue(m_short_balance, json[QString("shortBalance")]);
    m_short_balance_isSet = !json[QString("shortBalance")].isNull() && m_short_balance_isValid;

    m_source_account_status_isValid = ::OpenAPI::fromJsonValue(m_source_account_status, json[QString("sourceAccountStatus")]);
    m_source_account_status_isSet = !json[QString("sourceAccountStatus")].isNull() && m_source_account_status_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("sourceId")]);
    m_source_id_isSet = !json[QString("sourceId")].isNull() && m_source_id_isValid;

    m_term_isValid = ::OpenAPI::fromJsonValue(m_term, json[QString("term")]);
    m_term_isSet = !json[QString("term")].isNull() && m_term_isValid;

    m_total_cash_limit_isValid = ::OpenAPI::fromJsonValue(m_total_cash_limit, json[QString("totalCashLimit")]);
    m_total_cash_limit_isSet = !json[QString("totalCashLimit")].isNull() && m_total_cash_limit_isValid;

    m_total_credit_limit_isValid = ::OpenAPI::fromJsonValue(m_total_credit_limit, json[QString("totalCreditLimit")]);
    m_total_credit_limit_isSet = !json[QString("totalCreditLimit")].isNull() && m_total_credit_limit_isValid;

    m_total_credit_line_isValid = ::OpenAPI::fromJsonValue(m_total_credit_line, json[QString("totalCreditLine")]);
    m_total_credit_line_isSet = !json[QString("totalCreditLine")].isNull() && m_total_credit_line_isValid;

    m_total_unvested_balance_isValid = ::OpenAPI::fromJsonValue(m_total_unvested_balance, json[QString("totalUnvestedBalance")]);
    m_total_unvested_balance_isSet = !json[QString("totalUnvestedBalance")].isNull() && m_total_unvested_balance_isValid;

    m_total_vested_balance_isValid = ::OpenAPI::fromJsonValue(m_total_vested_balance, json[QString("totalVestedBalance")]);
    m_total_vested_balance_isSet = !json[QString("totalVestedBalance")].isNull() && m_total_vested_balance_isValid;

    m_user_classification_isValid = ::OpenAPI::fromJsonValue(m_user_classification, json[QString("userClassification")]);
    m_user_classification_isSet = !json[QString("userClassification")].isNull() && m_user_classification_isValid;

    m_valuation_type_isValid = ::OpenAPI::fromJsonValue(m_valuation_type, json[QString("valuationType")]);
    m_valuation_type_isSet = !json[QString("valuationType")].isNull() && m_valuation_type_isValid;
}

QString OAIDataExtractsAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataExtractsAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_r_401k_loan.isSet()) {
        obj.insert(QString("401kLoan"), ::OpenAPI::toJsonValue(m_r_401k_loan));
    }
    if (m_container_isSet) {
        obj.insert(QString("CONTAINER"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_account_number_isSet) {
        obj.insert(QString("accountNumber"), ::OpenAPI::toJsonValue(m_account_number));
    }
    if (m_account_status_isSet) {
        obj.insert(QString("accountStatus"), ::OpenAPI::toJsonValue(m_account_status));
    }
    if (m_account_type_isSet) {
        obj.insert(QString("accountType"), ::OpenAPI::toJsonValue(m_account_type));
    }
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_aggregation_source_isSet) {
        obj.insert(QString("aggregationSource"), ::OpenAPI::toJsonValue(m_aggregation_source));
    }
    if (m_amount_due.isSet()) {
        obj.insert(QString("amountDue"), ::OpenAPI::toJsonValue(m_amount_due));
    }
    if (m_annual_percentage_yield_isSet) {
        obj.insert(QString("annualPercentageYield"), ::OpenAPI::toJsonValue(m_annual_percentage_yield));
    }
    if (m_annuity_balance.isSet()) {
        obj.insert(QString("annuityBalance"), ::OpenAPI::toJsonValue(m_annuity_balance));
    }
    if (m_apr_isSet) {
        obj.insert(QString("apr"), ::OpenAPI::toJsonValue(m_apr));
    }
    if (m_associated_provider_account_id.size() > 0) {
        obj.insert(QString("associatedProviderAccountId"), ::OpenAPI::toJsonValue(m_associated_provider_account_id));
    }
    if (m_available_balance.isSet()) {
        obj.insert(QString("availableBalance"), ::OpenAPI::toJsonValue(m_available_balance));
    }
    if (m_available_cash.isSet()) {
        obj.insert(QString("availableCash"), ::OpenAPI::toJsonValue(m_available_cash));
    }
    if (m_available_credit.isSet()) {
        obj.insert(QString("availableCredit"), ::OpenAPI::toJsonValue(m_available_credit));
    }
    if (m_balance.isSet()) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_bank_transfer_code.size() > 0) {
        obj.insert(QString("bankTransferCode"), ::OpenAPI::toJsonValue(m_bank_transfer_code));
    }
    if (m_cash.isSet()) {
        obj.insert(QString("cash"), ::OpenAPI::toJsonValue(m_cash));
    }
    if (m_cash_apr_isSet) {
        obj.insert(QString("cashApr"), ::OpenAPI::toJsonValue(m_cash_apr));
    }
    if (m_cash_value.isSet()) {
        obj.insert(QString("cashValue"), ::OpenAPI::toJsonValue(m_cash_value));
    }
    if (m_classification_isSet) {
        obj.insert(QString("classification"), ::OpenAPI::toJsonValue(m_classification));
    }
    if (m_collateral_isSet) {
        obj.insert(QString("collateral"), ::OpenAPI::toJsonValue(m_collateral));
    }
    if (m_coverage.size() > 0) {
        obj.insert(QString("coverage"), ::OpenAPI::toJsonValue(m_coverage));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_current_balance.isSet()) {
        obj.insert(QString("currentBalance"), ::OpenAPI::toJsonValue(m_current_balance));
    }
    if (m_current_level_isSet) {
        obj.insert(QString("currentLevel"), ::OpenAPI::toJsonValue(m_current_level));
    }
    if (m_dataset.size() > 0) {
        obj.insert(QString("dataset"), ::OpenAPI::toJsonValue(m_dataset));
    }
    if (m_death_benefit.isSet()) {
        obj.insert(QString("deathBenefit"), ::OpenAPI::toJsonValue(m_death_benefit));
    }
    if (m_derived_apr_isSet) {
        obj.insert(QString("derivedApr"), ::OpenAPI::toJsonValue(m_derived_apr));
    }
    if (m_displayed_name_isSet) {
        obj.insert(QString("displayedName"), ::OpenAPI::toJsonValue(m_displayed_name));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("dueDate"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_enrollment_date_isSet) {
        obj.insert(QString("enrollmentDate"), ::OpenAPI::toJsonValue(m_enrollment_date));
    }
    if (m_escrow_balance.isSet()) {
        obj.insert(QString("escrowBalance"), ::OpenAPI::toJsonValue(m_escrow_balance));
    }
    if (m_estimated_date_isSet) {
        obj.insert(QString("estimatedDate"), ::OpenAPI::toJsonValue(m_estimated_date));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_face_amount.isSet()) {
        obj.insert(QString("faceAmount"), ::OpenAPI::toJsonValue(m_face_amount));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_guarantor_isSet) {
        obj.insert(QString("guarantor"), ::OpenAPI::toJsonValue(m_guarantor));
    }
    if (m_home_insurance_type_isSet) {
        obj.insert(QString("homeInsuranceType"), ::OpenAPI::toJsonValue(m_home_insurance_type));
    }
    if (m_home_value.isSet()) {
        obj.insert(QString("homeValue"), ::OpenAPI::toJsonValue(m_home_value));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_include_in_net_worth_isSet) {
        obj.insert(QString("includeInNetWorth"), ::OpenAPI::toJsonValue(m_include_in_net_worth));
    }
    if (m_interest_paid_last_year.isSet()) {
        obj.insert(QString("interestPaidLastYear"), ::OpenAPI::toJsonValue(m_interest_paid_last_year));
    }
    if (m_interest_paid_ytd.isSet()) {
        obj.insert(QString("interestPaidYTD"), ::OpenAPI::toJsonValue(m_interest_paid_ytd));
    }
    if (m_interest_rate_isSet) {
        obj.insert(QString("interestRate"), ::OpenAPI::toJsonValue(m_interest_rate));
    }
    if (m_interest_rate_type_isSet) {
        obj.insert(QString("interestRateType"), ::OpenAPI::toJsonValue(m_interest_rate_type));
    }
    if (m_is_asset_isSet) {
        obj.insert(QString("isAsset"), ::OpenAPI::toJsonValue(m_is_asset));
    }
    if (m_is_deleted_isSet) {
        obj.insert(QString("isDeleted"), ::OpenAPI::toJsonValue(m_is_deleted));
    }
    if (m_is_manual_isSet) {
        obj.insert(QString("isManual"), ::OpenAPI::toJsonValue(m_is_manual));
    }
    if (m_last_employee_contribution_amount.isSet()) {
        obj.insert(QString("lastEmployeeContributionAmount"), ::OpenAPI::toJsonValue(m_last_employee_contribution_amount));
    }
    if (m_last_employee_contribution_date_isSet) {
        obj.insert(QString("lastEmployeeContributionDate"), ::OpenAPI::toJsonValue(m_last_employee_contribution_date));
    }
    if (m_last_payment.isSet()) {
        obj.insert(QString("lastPayment"), ::OpenAPI::toJsonValue(m_last_payment));
    }
    if (m_last_payment_amount.isSet()) {
        obj.insert(QString("lastPaymentAmount"), ::OpenAPI::toJsonValue(m_last_payment_amount));
    }
    if (m_last_payment_date_isSet) {
        obj.insert(QString("lastPaymentDate"), ::OpenAPI::toJsonValue(m_last_payment_date));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_lender_isSet) {
        obj.insert(QString("lender"), ::OpenAPI::toJsonValue(m_lender));
    }
    if (m_life_insurance_type_isSet) {
        obj.insert(QString("lifeInsuranceType"), ::OpenAPI::toJsonValue(m_life_insurance_type));
    }
    if (m_loan_pay_by_date_isSet) {
        obj.insert(QString("loanPayByDate"), ::OpenAPI::toJsonValue(m_loan_pay_by_date));
    }
    if (m_loan_payoff_amount.isSet()) {
        obj.insert(QString("loanPayoffAmount"), ::OpenAPI::toJsonValue(m_loan_payoff_amount));
    }
    if (m_loan_payoff_details.isSet()) {
        obj.insert(QString("loanPayoffDetails"), ::OpenAPI::toJsonValue(m_loan_payoff_details));
    }
    if (m_margin_balance.isSet()) {
        obj.insert(QString("marginBalance"), ::OpenAPI::toJsonValue(m_margin_balance));
    }
    if (m_maturity_amount.isSet()) {
        obj.insert(QString("maturityAmount"), ::OpenAPI::toJsonValue(m_maturity_amount));
    }
    if (m_maturity_date_isSet) {
        obj.insert(QString("maturityDate"), ::OpenAPI::toJsonValue(m_maturity_date));
    }
    if (m_memo_isSet) {
        obj.insert(QString("memo"), ::OpenAPI::toJsonValue(m_memo));
    }
    if (m_minimum_amount_due.isSet()) {
        obj.insert(QString("minimumAmountDue"), ::OpenAPI::toJsonValue(m_minimum_amount_due));
    }
    if (m_money_market_balance.isSet()) {
        obj.insert(QString("moneyMarketBalance"), ::OpenAPI::toJsonValue(m_money_market_balance));
    }
    if (m_next_level_isSet) {
        obj.insert(QString("nextLevel"), ::OpenAPI::toJsonValue(m_next_level));
    }
    if (m_nickname_isSet) {
        obj.insert(QString("nickname"), ::OpenAPI::toJsonValue(m_nickname));
    }
    if (m_oauth_migration_status_isSet) {
        obj.insert(QString("oauthMigrationStatus"), ::OpenAPI::toJsonValue(m_oauth_migration_status));
    }
    if (m_original_loan_amount.isSet()) {
        obj.insert(QString("originalLoanAmount"), ::OpenAPI::toJsonValue(m_original_loan_amount));
    }
    if (m_origination_date_isSet) {
        obj.insert(QString("originationDate"), ::OpenAPI::toJsonValue(m_origination_date));
    }
    if (m_over_draft_limit.isSet()) {
        obj.insert(QString("overDraftLimit"), ::OpenAPI::toJsonValue(m_over_draft_limit));
    }
    if (m_policy_effective_date_isSet) {
        obj.insert(QString("policyEffectiveDate"), ::OpenAPI::toJsonValue(m_policy_effective_date));
    }
    if (m_policy_from_date_isSet) {
        obj.insert(QString("policyFromDate"), ::OpenAPI::toJsonValue(m_policy_from_date));
    }
    if (m_policy_status_isSet) {
        obj.insert(QString("policyStatus"), ::OpenAPI::toJsonValue(m_policy_status));
    }
    if (m_policy_term_isSet) {
        obj.insert(QString("policyTerm"), ::OpenAPI::toJsonValue(m_policy_term));
    }
    if (m_policy_to_date_isSet) {
        obj.insert(QString("policyToDate"), ::OpenAPI::toJsonValue(m_policy_to_date));
    }
    if (m_premium.isSet()) {
        obj.insert(QString("premium"), ::OpenAPI::toJsonValue(m_premium));
    }
    if (m_premium_payment_term_isSet) {
        obj.insert(QString("premiumPaymentTerm"), ::OpenAPI::toJsonValue(m_premium_payment_term));
    }
    if (m_primary_reward_unit_isSet) {
        obj.insert(QString("primaryRewardUnit"), ::OpenAPI::toJsonValue(m_primary_reward_unit));
    }
    if (m_principal_balance.isSet()) {
        obj.insert(QString("principalBalance"), ::OpenAPI::toJsonValue(m_principal_balance));
    }
    if (m_provider_account_id_isSet) {
        obj.insert(QString("providerAccountId"), ::OpenAPI::toJsonValue(m_provider_account_id));
    }
    if (m_provider_id_isSet) {
        obj.insert(QString("providerId"), ::OpenAPI::toJsonValue(m_provider_id));
    }
    if (m_provider_name_isSet) {
        obj.insert(QString("providerName"), ::OpenAPI::toJsonValue(m_provider_name));
    }
    if (m_recurring_payment.isSet()) {
        obj.insert(QString("recurringPayment"), ::OpenAPI::toJsonValue(m_recurring_payment));
    }
    if (m_remaining_balance.isSet()) {
        obj.insert(QString("remainingBalance"), ::OpenAPI::toJsonValue(m_remaining_balance));
    }
    if (m_repayment_plan_type_isSet) {
        obj.insert(QString("repaymentPlanType"), ::OpenAPI::toJsonValue(m_repayment_plan_type));
    }
    if (m_reward_balance.size() > 0) {
        obj.insert(QString("rewardBalance"), ::OpenAPI::toJsonValue(m_reward_balance));
    }
    if (m_running_balance.isSet()) {
        obj.insert(QString("runningBalance"), ::OpenAPI::toJsonValue(m_running_balance));
    }
    if (m_short_balance.isSet()) {
        obj.insert(QString("shortBalance"), ::OpenAPI::toJsonValue(m_short_balance));
    }
    if (m_source_account_status_isSet) {
        obj.insert(QString("sourceAccountStatus"), ::OpenAPI::toJsonValue(m_source_account_status));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("sourceId"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_term_isSet) {
        obj.insert(QString("term"), ::OpenAPI::toJsonValue(m_term));
    }
    if (m_total_cash_limit.isSet()) {
        obj.insert(QString("totalCashLimit"), ::OpenAPI::toJsonValue(m_total_cash_limit));
    }
    if (m_total_credit_limit.isSet()) {
        obj.insert(QString("totalCreditLimit"), ::OpenAPI::toJsonValue(m_total_credit_limit));
    }
    if (m_total_credit_line.isSet()) {
        obj.insert(QString("totalCreditLine"), ::OpenAPI::toJsonValue(m_total_credit_line));
    }
    if (m_total_unvested_balance.isSet()) {
        obj.insert(QString("totalUnvestedBalance"), ::OpenAPI::toJsonValue(m_total_unvested_balance));
    }
    if (m_total_vested_balance.isSet()) {
        obj.insert(QString("totalVestedBalance"), ::OpenAPI::toJsonValue(m_total_vested_balance));
    }
    if (m_user_classification_isSet) {
        obj.insert(QString("userClassification"), ::OpenAPI::toJsonValue(m_user_classification));
    }
    if (m_valuation_type_isSet) {
        obj.insert(QString("valuationType"), ::OpenAPI::toJsonValue(m_valuation_type));
    }
    return obj;
}

OAIMoney OAIDataExtractsAccount::getR401kLoan() const {
    return m_r_401k_loan;
}
void OAIDataExtractsAccount::setR401kLoan(const OAIMoney &r_401k_loan) {
    m_r_401k_loan = r_401k_loan;
    m_r_401k_loan_isSet = true;
}

bool OAIDataExtractsAccount::is_r_401k_loan_Set() const{
    return m_r_401k_loan_isSet;
}

bool OAIDataExtractsAccount::is_r_401k_loan_Valid() const{
    return m_r_401k_loan_isValid;
}

QString OAIDataExtractsAccount::getContainer() const {
    return m_container;
}
void OAIDataExtractsAccount::setContainer(const QString &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAIDataExtractsAccount::is_container_Set() const{
    return m_container_isSet;
}

bool OAIDataExtractsAccount::is_container_Valid() const{
    return m_container_isValid;
}

QString OAIDataExtractsAccount::getAccountName() const {
    return m_account_name;
}
void OAIDataExtractsAccount::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIDataExtractsAccount::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIDataExtractsAccount::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAIDataExtractsAccount::getAccountNumber() const {
    return m_account_number;
}
void OAIDataExtractsAccount::setAccountNumber(const QString &account_number) {
    m_account_number = account_number;
    m_account_number_isSet = true;
}

bool OAIDataExtractsAccount::is_account_number_Set() const{
    return m_account_number_isSet;
}

bool OAIDataExtractsAccount::is_account_number_Valid() const{
    return m_account_number_isValid;
}

QString OAIDataExtractsAccount::getAccountStatus() const {
    return m_account_status;
}
void OAIDataExtractsAccount::setAccountStatus(const QString &account_status) {
    m_account_status = account_status;
    m_account_status_isSet = true;
}

bool OAIDataExtractsAccount::is_account_status_Set() const{
    return m_account_status_isSet;
}

bool OAIDataExtractsAccount::is_account_status_Valid() const{
    return m_account_status_isValid;
}

QString OAIDataExtractsAccount::getAccountType() const {
    return m_account_type;
}
void OAIDataExtractsAccount::setAccountType(const QString &account_type) {
    m_account_type = account_type;
    m_account_type_isSet = true;
}

bool OAIDataExtractsAccount::is_account_type_Set() const{
    return m_account_type_isSet;
}

bool OAIDataExtractsAccount::is_account_type_Valid() const{
    return m_account_type_isValid;
}

OAIAccountAddress OAIDataExtractsAccount::getAddress() const {
    return m_address;
}
void OAIDataExtractsAccount::setAddress(const OAIAccountAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIDataExtractsAccount::is_address_Set() const{
    return m_address_isSet;
}

bool OAIDataExtractsAccount::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIDataExtractsAccount::getAggregationSource() const {
    return m_aggregation_source;
}
void OAIDataExtractsAccount::setAggregationSource(const QString &aggregation_source) {
    m_aggregation_source = aggregation_source;
    m_aggregation_source_isSet = true;
}

bool OAIDataExtractsAccount::is_aggregation_source_Set() const{
    return m_aggregation_source_isSet;
}

bool OAIDataExtractsAccount::is_aggregation_source_Valid() const{
    return m_aggregation_source_isValid;
}

OAIMoney OAIDataExtractsAccount::getAmountDue() const {
    return m_amount_due;
}
void OAIDataExtractsAccount::setAmountDue(const OAIMoney &amount_due) {
    m_amount_due = amount_due;
    m_amount_due_isSet = true;
}

bool OAIDataExtractsAccount::is_amount_due_Set() const{
    return m_amount_due_isSet;
}

bool OAIDataExtractsAccount::is_amount_due_Valid() const{
    return m_amount_due_isValid;
}

double OAIDataExtractsAccount::getAnnualPercentageYield() const {
    return m_annual_percentage_yield;
}
void OAIDataExtractsAccount::setAnnualPercentageYield(const double &annual_percentage_yield) {
    m_annual_percentage_yield = annual_percentage_yield;
    m_annual_percentage_yield_isSet = true;
}

bool OAIDataExtractsAccount::is_annual_percentage_yield_Set() const{
    return m_annual_percentage_yield_isSet;
}

bool OAIDataExtractsAccount::is_annual_percentage_yield_Valid() const{
    return m_annual_percentage_yield_isValid;
}

OAIMoney OAIDataExtractsAccount::getAnnuityBalance() const {
    return m_annuity_balance;
}
void OAIDataExtractsAccount::setAnnuityBalance(const OAIMoney &annuity_balance) {
    m_annuity_balance = annuity_balance;
    m_annuity_balance_isSet = true;
}

bool OAIDataExtractsAccount::is_annuity_balance_Set() const{
    return m_annuity_balance_isSet;
}

bool OAIDataExtractsAccount::is_annuity_balance_Valid() const{
    return m_annuity_balance_isValid;
}

double OAIDataExtractsAccount::getApr() const {
    return m_apr;
}
void OAIDataExtractsAccount::setApr(const double &apr) {
    m_apr = apr;
    m_apr_isSet = true;
}

bool OAIDataExtractsAccount::is_apr_Set() const{
    return m_apr_isSet;
}

bool OAIDataExtractsAccount::is_apr_Valid() const{
    return m_apr_isValid;
}

QList<qint64> OAIDataExtractsAccount::getAssociatedProviderAccountId() const {
    return m_associated_provider_account_id;
}
void OAIDataExtractsAccount::setAssociatedProviderAccountId(const QList<qint64> &associated_provider_account_id) {
    m_associated_provider_account_id = associated_provider_account_id;
    m_associated_provider_account_id_isSet = true;
}

bool OAIDataExtractsAccount::is_associated_provider_account_id_Set() const{
    return m_associated_provider_account_id_isSet;
}

bool OAIDataExtractsAccount::is_associated_provider_account_id_Valid() const{
    return m_associated_provider_account_id_isValid;
}

OAIMoney OAIDataExtractsAccount::getAvailableBalance() const {
    return m_available_balance;
}
void OAIDataExtractsAccount::setAvailableBalance(const OAIMoney &available_balance) {
    m_available_balance = available_balance;
    m_available_balance_isSet = true;
}

bool OAIDataExtractsAccount::is_available_balance_Set() const{
    return m_available_balance_isSet;
}

bool OAIDataExtractsAccount::is_available_balance_Valid() const{
    return m_available_balance_isValid;
}

OAIMoney OAIDataExtractsAccount::getAvailableCash() const {
    return m_available_cash;
}
void OAIDataExtractsAccount::setAvailableCash(const OAIMoney &available_cash) {
    m_available_cash = available_cash;
    m_available_cash_isSet = true;
}

bool OAIDataExtractsAccount::is_available_cash_Set() const{
    return m_available_cash_isSet;
}

bool OAIDataExtractsAccount::is_available_cash_Valid() const{
    return m_available_cash_isValid;
}

OAIMoney OAIDataExtractsAccount::getAvailableCredit() const {
    return m_available_credit;
}
void OAIDataExtractsAccount::setAvailableCredit(const OAIMoney &available_credit) {
    m_available_credit = available_credit;
    m_available_credit_isSet = true;
}

bool OAIDataExtractsAccount::is_available_credit_Set() const{
    return m_available_credit_isSet;
}

bool OAIDataExtractsAccount::is_available_credit_Valid() const{
    return m_available_credit_isValid;
}

OAIMoney OAIDataExtractsAccount::getBalance() const {
    return m_balance;
}
void OAIDataExtractsAccount::setBalance(const OAIMoney &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAIDataExtractsAccount::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAIDataExtractsAccount::is_balance_Valid() const{
    return m_balance_isValid;
}

QList<OAIBankTransferCode> OAIDataExtractsAccount::getBankTransferCode() const {
    return m_bank_transfer_code;
}
void OAIDataExtractsAccount::setBankTransferCode(const QList<OAIBankTransferCode> &bank_transfer_code) {
    m_bank_transfer_code = bank_transfer_code;
    m_bank_transfer_code_isSet = true;
}

bool OAIDataExtractsAccount::is_bank_transfer_code_Set() const{
    return m_bank_transfer_code_isSet;
}

bool OAIDataExtractsAccount::is_bank_transfer_code_Valid() const{
    return m_bank_transfer_code_isValid;
}

OAIMoney OAIDataExtractsAccount::getCash() const {
    return m_cash;
}
void OAIDataExtractsAccount::setCash(const OAIMoney &cash) {
    m_cash = cash;
    m_cash_isSet = true;
}

bool OAIDataExtractsAccount::is_cash_Set() const{
    return m_cash_isSet;
}

bool OAIDataExtractsAccount::is_cash_Valid() const{
    return m_cash_isValid;
}

double OAIDataExtractsAccount::getCashApr() const {
    return m_cash_apr;
}
void OAIDataExtractsAccount::setCashApr(const double &cash_apr) {
    m_cash_apr = cash_apr;
    m_cash_apr_isSet = true;
}

bool OAIDataExtractsAccount::is_cash_apr_Set() const{
    return m_cash_apr_isSet;
}

bool OAIDataExtractsAccount::is_cash_apr_Valid() const{
    return m_cash_apr_isValid;
}

OAIMoney OAIDataExtractsAccount::getCashValue() const {
    return m_cash_value;
}
void OAIDataExtractsAccount::setCashValue(const OAIMoney &cash_value) {
    m_cash_value = cash_value;
    m_cash_value_isSet = true;
}

bool OAIDataExtractsAccount::is_cash_value_Set() const{
    return m_cash_value_isSet;
}

bool OAIDataExtractsAccount::is_cash_value_Valid() const{
    return m_cash_value_isValid;
}

QString OAIDataExtractsAccount::getClassification() const {
    return m_classification;
}
void OAIDataExtractsAccount::setClassification(const QString &classification) {
    m_classification = classification;
    m_classification_isSet = true;
}

bool OAIDataExtractsAccount::is_classification_Set() const{
    return m_classification_isSet;
}

bool OAIDataExtractsAccount::is_classification_Valid() const{
    return m_classification_isValid;
}

QString OAIDataExtractsAccount::getCollateral() const {
    return m_collateral;
}
void OAIDataExtractsAccount::setCollateral(const QString &collateral) {
    m_collateral = collateral;
    m_collateral_isSet = true;
}

bool OAIDataExtractsAccount::is_collateral_Set() const{
    return m_collateral_isSet;
}

bool OAIDataExtractsAccount::is_collateral_Valid() const{
    return m_collateral_isValid;
}

QList<OAICoverage> OAIDataExtractsAccount::getCoverage() const {
    return m_coverage;
}
void OAIDataExtractsAccount::setCoverage(const QList<OAICoverage> &coverage) {
    m_coverage = coverage;
    m_coverage_isSet = true;
}

bool OAIDataExtractsAccount::is_coverage_Set() const{
    return m_coverage_isSet;
}

bool OAIDataExtractsAccount::is_coverage_Valid() const{
    return m_coverage_isValid;
}

QString OAIDataExtractsAccount::getCreatedDate() const {
    return m_created_date;
}
void OAIDataExtractsAccount::setCreatedDate(const QString &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIDataExtractsAccount::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIDataExtractsAccount::is_created_date_Valid() const{
    return m_created_date_isValid;
}

OAIMoney OAIDataExtractsAccount::getCurrentBalance() const {
    return m_current_balance;
}
void OAIDataExtractsAccount::setCurrentBalance(const OAIMoney &current_balance) {
    m_current_balance = current_balance;
    m_current_balance_isSet = true;
}

bool OAIDataExtractsAccount::is_current_balance_Set() const{
    return m_current_balance_isSet;
}

bool OAIDataExtractsAccount::is_current_balance_Valid() const{
    return m_current_balance_isValid;
}

QString OAIDataExtractsAccount::getCurrentLevel() const {
    return m_current_level;
}
void OAIDataExtractsAccount::setCurrentLevel(const QString &current_level) {
    m_current_level = current_level;
    m_current_level_isSet = true;
}

bool OAIDataExtractsAccount::is_current_level_Set() const{
    return m_current_level_isSet;
}

bool OAIDataExtractsAccount::is_current_level_Valid() const{
    return m_current_level_isValid;
}

QList<OAIAccountDataset> OAIDataExtractsAccount::getDataset() const {
    return m_dataset;
}
void OAIDataExtractsAccount::setDataset(const QList<OAIAccountDataset> &dataset) {
    m_dataset = dataset;
    m_dataset_isSet = true;
}

bool OAIDataExtractsAccount::is_dataset_Set() const{
    return m_dataset_isSet;
}

bool OAIDataExtractsAccount::is_dataset_Valid() const{
    return m_dataset_isValid;
}

OAIMoney OAIDataExtractsAccount::getDeathBenefit() const {
    return m_death_benefit;
}
void OAIDataExtractsAccount::setDeathBenefit(const OAIMoney &death_benefit) {
    m_death_benefit = death_benefit;
    m_death_benefit_isSet = true;
}

bool OAIDataExtractsAccount::is_death_benefit_Set() const{
    return m_death_benefit_isSet;
}

bool OAIDataExtractsAccount::is_death_benefit_Valid() const{
    return m_death_benefit_isValid;
}

double OAIDataExtractsAccount::getDerivedApr() const {
    return m_derived_apr;
}
void OAIDataExtractsAccount::setDerivedApr(const double &derived_apr) {
    m_derived_apr = derived_apr;
    m_derived_apr_isSet = true;
}

bool OAIDataExtractsAccount::is_derived_apr_Set() const{
    return m_derived_apr_isSet;
}

bool OAIDataExtractsAccount::is_derived_apr_Valid() const{
    return m_derived_apr_isValid;
}

QString OAIDataExtractsAccount::getDisplayedName() const {
    return m_displayed_name;
}
void OAIDataExtractsAccount::setDisplayedName(const QString &displayed_name) {
    m_displayed_name = displayed_name;
    m_displayed_name_isSet = true;
}

bool OAIDataExtractsAccount::is_displayed_name_Set() const{
    return m_displayed_name_isSet;
}

bool OAIDataExtractsAccount::is_displayed_name_Valid() const{
    return m_displayed_name_isValid;
}

QString OAIDataExtractsAccount::getDueDate() const {
    return m_due_date;
}
void OAIDataExtractsAccount::setDueDate(const QString &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIDataExtractsAccount::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIDataExtractsAccount::is_due_date_Valid() const{
    return m_due_date_isValid;
}

QString OAIDataExtractsAccount::getEnrollmentDate() const {
    return m_enrollment_date;
}
void OAIDataExtractsAccount::setEnrollmentDate(const QString &enrollment_date) {
    m_enrollment_date = enrollment_date;
    m_enrollment_date_isSet = true;
}

bool OAIDataExtractsAccount::is_enrollment_date_Set() const{
    return m_enrollment_date_isSet;
}

bool OAIDataExtractsAccount::is_enrollment_date_Valid() const{
    return m_enrollment_date_isValid;
}

OAIMoney OAIDataExtractsAccount::getEscrowBalance() const {
    return m_escrow_balance;
}
void OAIDataExtractsAccount::setEscrowBalance(const OAIMoney &escrow_balance) {
    m_escrow_balance = escrow_balance;
    m_escrow_balance_isSet = true;
}

bool OAIDataExtractsAccount::is_escrow_balance_Set() const{
    return m_escrow_balance_isSet;
}

bool OAIDataExtractsAccount::is_escrow_balance_Valid() const{
    return m_escrow_balance_isValid;
}

QString OAIDataExtractsAccount::getEstimatedDate() const {
    return m_estimated_date;
}
void OAIDataExtractsAccount::setEstimatedDate(const QString &estimated_date) {
    m_estimated_date = estimated_date;
    m_estimated_date_isSet = true;
}

bool OAIDataExtractsAccount::is_estimated_date_Set() const{
    return m_estimated_date_isSet;
}

bool OAIDataExtractsAccount::is_estimated_date_Valid() const{
    return m_estimated_date_isValid;
}

QString OAIDataExtractsAccount::getExpirationDate() const {
    return m_expiration_date;
}
void OAIDataExtractsAccount::setExpirationDate(const QString &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIDataExtractsAccount::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIDataExtractsAccount::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

OAIMoney OAIDataExtractsAccount::getFaceAmount() const {
    return m_face_amount;
}
void OAIDataExtractsAccount::setFaceAmount(const OAIMoney &face_amount) {
    m_face_amount = face_amount;
    m_face_amount_isSet = true;
}

bool OAIDataExtractsAccount::is_face_amount_Set() const{
    return m_face_amount_isSet;
}

bool OAIDataExtractsAccount::is_face_amount_Valid() const{
    return m_face_amount_isValid;
}

QString OAIDataExtractsAccount::getFrequency() const {
    return m_frequency;
}
void OAIDataExtractsAccount::setFrequency(const QString &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIDataExtractsAccount::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIDataExtractsAccount::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QString OAIDataExtractsAccount::getGuarantor() const {
    return m_guarantor;
}
void OAIDataExtractsAccount::setGuarantor(const QString &guarantor) {
    m_guarantor = guarantor;
    m_guarantor_isSet = true;
}

bool OAIDataExtractsAccount::is_guarantor_Set() const{
    return m_guarantor_isSet;
}

bool OAIDataExtractsAccount::is_guarantor_Valid() const{
    return m_guarantor_isValid;
}

QString OAIDataExtractsAccount::getHomeInsuranceType() const {
    return m_home_insurance_type;
}
void OAIDataExtractsAccount::setHomeInsuranceType(const QString &home_insurance_type) {
    m_home_insurance_type = home_insurance_type;
    m_home_insurance_type_isSet = true;
}

bool OAIDataExtractsAccount::is_home_insurance_type_Set() const{
    return m_home_insurance_type_isSet;
}

bool OAIDataExtractsAccount::is_home_insurance_type_Valid() const{
    return m_home_insurance_type_isValid;
}

OAIMoney OAIDataExtractsAccount::getHomeValue() const {
    return m_home_value;
}
void OAIDataExtractsAccount::setHomeValue(const OAIMoney &home_value) {
    m_home_value = home_value;
    m_home_value_isSet = true;
}

bool OAIDataExtractsAccount::is_home_value_Set() const{
    return m_home_value_isSet;
}

bool OAIDataExtractsAccount::is_home_value_Valid() const{
    return m_home_value_isValid;
}

qint64 OAIDataExtractsAccount::getId() const {
    return m_id;
}
void OAIDataExtractsAccount::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDataExtractsAccount::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDataExtractsAccount::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIDataExtractsAccount::isIncludeInNetWorth() const {
    return m_include_in_net_worth;
}
void OAIDataExtractsAccount::setIncludeInNetWorth(const bool &include_in_net_worth) {
    m_include_in_net_worth = include_in_net_worth;
    m_include_in_net_worth_isSet = true;
}

bool OAIDataExtractsAccount::is_include_in_net_worth_Set() const{
    return m_include_in_net_worth_isSet;
}

bool OAIDataExtractsAccount::is_include_in_net_worth_Valid() const{
    return m_include_in_net_worth_isValid;
}

OAIMoney OAIDataExtractsAccount::getInterestPaidLastYear() const {
    return m_interest_paid_last_year;
}
void OAIDataExtractsAccount::setInterestPaidLastYear(const OAIMoney &interest_paid_last_year) {
    m_interest_paid_last_year = interest_paid_last_year;
    m_interest_paid_last_year_isSet = true;
}

bool OAIDataExtractsAccount::is_interest_paid_last_year_Set() const{
    return m_interest_paid_last_year_isSet;
}

bool OAIDataExtractsAccount::is_interest_paid_last_year_Valid() const{
    return m_interest_paid_last_year_isValid;
}

OAIMoney OAIDataExtractsAccount::getInterestPaidYtd() const {
    return m_interest_paid_ytd;
}
void OAIDataExtractsAccount::setInterestPaidYtd(const OAIMoney &interest_paid_ytd) {
    m_interest_paid_ytd = interest_paid_ytd;
    m_interest_paid_ytd_isSet = true;
}

bool OAIDataExtractsAccount::is_interest_paid_ytd_Set() const{
    return m_interest_paid_ytd_isSet;
}

bool OAIDataExtractsAccount::is_interest_paid_ytd_Valid() const{
    return m_interest_paid_ytd_isValid;
}

double OAIDataExtractsAccount::getInterestRate() const {
    return m_interest_rate;
}
void OAIDataExtractsAccount::setInterestRate(const double &interest_rate) {
    m_interest_rate = interest_rate;
    m_interest_rate_isSet = true;
}

bool OAIDataExtractsAccount::is_interest_rate_Set() const{
    return m_interest_rate_isSet;
}

bool OAIDataExtractsAccount::is_interest_rate_Valid() const{
    return m_interest_rate_isValid;
}

QString OAIDataExtractsAccount::getInterestRateType() const {
    return m_interest_rate_type;
}
void OAIDataExtractsAccount::setInterestRateType(const QString &interest_rate_type) {
    m_interest_rate_type = interest_rate_type;
    m_interest_rate_type_isSet = true;
}

bool OAIDataExtractsAccount::is_interest_rate_type_Set() const{
    return m_interest_rate_type_isSet;
}

bool OAIDataExtractsAccount::is_interest_rate_type_Valid() const{
    return m_interest_rate_type_isValid;
}

bool OAIDataExtractsAccount::isIsAsset() const {
    return m_is_asset;
}
void OAIDataExtractsAccount::setIsAsset(const bool &is_asset) {
    m_is_asset = is_asset;
    m_is_asset_isSet = true;
}

bool OAIDataExtractsAccount::is_is_asset_Set() const{
    return m_is_asset_isSet;
}

bool OAIDataExtractsAccount::is_is_asset_Valid() const{
    return m_is_asset_isValid;
}

bool OAIDataExtractsAccount::isIsDeleted() const {
    return m_is_deleted;
}
void OAIDataExtractsAccount::setIsDeleted(const bool &is_deleted) {
    m_is_deleted = is_deleted;
    m_is_deleted_isSet = true;
}

bool OAIDataExtractsAccount::is_is_deleted_Set() const{
    return m_is_deleted_isSet;
}

bool OAIDataExtractsAccount::is_is_deleted_Valid() const{
    return m_is_deleted_isValid;
}

bool OAIDataExtractsAccount::isIsManual() const {
    return m_is_manual;
}
void OAIDataExtractsAccount::setIsManual(const bool &is_manual) {
    m_is_manual = is_manual;
    m_is_manual_isSet = true;
}

bool OAIDataExtractsAccount::is_is_manual_Set() const{
    return m_is_manual_isSet;
}

bool OAIDataExtractsAccount::is_is_manual_Valid() const{
    return m_is_manual_isValid;
}

OAIMoney OAIDataExtractsAccount::getLastEmployeeContributionAmount() const {
    return m_last_employee_contribution_amount;
}
void OAIDataExtractsAccount::setLastEmployeeContributionAmount(const OAIMoney &last_employee_contribution_amount) {
    m_last_employee_contribution_amount = last_employee_contribution_amount;
    m_last_employee_contribution_amount_isSet = true;
}

bool OAIDataExtractsAccount::is_last_employee_contribution_amount_Set() const{
    return m_last_employee_contribution_amount_isSet;
}

bool OAIDataExtractsAccount::is_last_employee_contribution_amount_Valid() const{
    return m_last_employee_contribution_amount_isValid;
}

QString OAIDataExtractsAccount::getLastEmployeeContributionDate() const {
    return m_last_employee_contribution_date;
}
void OAIDataExtractsAccount::setLastEmployeeContributionDate(const QString &last_employee_contribution_date) {
    m_last_employee_contribution_date = last_employee_contribution_date;
    m_last_employee_contribution_date_isSet = true;
}

bool OAIDataExtractsAccount::is_last_employee_contribution_date_Set() const{
    return m_last_employee_contribution_date_isSet;
}

bool OAIDataExtractsAccount::is_last_employee_contribution_date_Valid() const{
    return m_last_employee_contribution_date_isValid;
}

OAIMoney OAIDataExtractsAccount::getLastPayment() const {
    return m_last_payment;
}
void OAIDataExtractsAccount::setLastPayment(const OAIMoney &last_payment) {
    m_last_payment = last_payment;
    m_last_payment_isSet = true;
}

bool OAIDataExtractsAccount::is_last_payment_Set() const{
    return m_last_payment_isSet;
}

bool OAIDataExtractsAccount::is_last_payment_Valid() const{
    return m_last_payment_isValid;
}

OAIMoney OAIDataExtractsAccount::getLastPaymentAmount() const {
    return m_last_payment_amount;
}
void OAIDataExtractsAccount::setLastPaymentAmount(const OAIMoney &last_payment_amount) {
    m_last_payment_amount = last_payment_amount;
    m_last_payment_amount_isSet = true;
}

bool OAIDataExtractsAccount::is_last_payment_amount_Set() const{
    return m_last_payment_amount_isSet;
}

bool OAIDataExtractsAccount::is_last_payment_amount_Valid() const{
    return m_last_payment_amount_isValid;
}

QString OAIDataExtractsAccount::getLastPaymentDate() const {
    return m_last_payment_date;
}
void OAIDataExtractsAccount::setLastPaymentDate(const QString &last_payment_date) {
    m_last_payment_date = last_payment_date;
    m_last_payment_date_isSet = true;
}

bool OAIDataExtractsAccount::is_last_payment_date_Set() const{
    return m_last_payment_date_isSet;
}

bool OAIDataExtractsAccount::is_last_payment_date_Valid() const{
    return m_last_payment_date_isValid;
}

QString OAIDataExtractsAccount::getLastUpdated() const {
    return m_last_updated;
}
void OAIDataExtractsAccount::setLastUpdated(const QString &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIDataExtractsAccount::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIDataExtractsAccount::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIDataExtractsAccount::getLender() const {
    return m_lender;
}
void OAIDataExtractsAccount::setLender(const QString &lender) {
    m_lender = lender;
    m_lender_isSet = true;
}

bool OAIDataExtractsAccount::is_lender_Set() const{
    return m_lender_isSet;
}

bool OAIDataExtractsAccount::is_lender_Valid() const{
    return m_lender_isValid;
}

QString OAIDataExtractsAccount::getLifeInsuranceType() const {
    return m_life_insurance_type;
}
void OAIDataExtractsAccount::setLifeInsuranceType(const QString &life_insurance_type) {
    m_life_insurance_type = life_insurance_type;
    m_life_insurance_type_isSet = true;
}

bool OAIDataExtractsAccount::is_life_insurance_type_Set() const{
    return m_life_insurance_type_isSet;
}

bool OAIDataExtractsAccount::is_life_insurance_type_Valid() const{
    return m_life_insurance_type_isValid;
}

QString OAIDataExtractsAccount::getLoanPayByDate() const {
    return m_loan_pay_by_date;
}
void OAIDataExtractsAccount::setLoanPayByDate(const QString &loan_pay_by_date) {
    m_loan_pay_by_date = loan_pay_by_date;
    m_loan_pay_by_date_isSet = true;
}

bool OAIDataExtractsAccount::is_loan_pay_by_date_Set() const{
    return m_loan_pay_by_date_isSet;
}

bool OAIDataExtractsAccount::is_loan_pay_by_date_Valid() const{
    return m_loan_pay_by_date_isValid;
}

OAIMoney OAIDataExtractsAccount::getLoanPayoffAmount() const {
    return m_loan_payoff_amount;
}
void OAIDataExtractsAccount::setLoanPayoffAmount(const OAIMoney &loan_payoff_amount) {
    m_loan_payoff_amount = loan_payoff_amount;
    m_loan_payoff_amount_isSet = true;
}

bool OAIDataExtractsAccount::is_loan_payoff_amount_Set() const{
    return m_loan_payoff_amount_isSet;
}

bool OAIDataExtractsAccount::is_loan_payoff_amount_Valid() const{
    return m_loan_payoff_amount_isValid;
}

OAILoanPayoffDetails OAIDataExtractsAccount::getLoanPayoffDetails() const {
    return m_loan_payoff_details;
}
void OAIDataExtractsAccount::setLoanPayoffDetails(const OAILoanPayoffDetails &loan_payoff_details) {
    m_loan_payoff_details = loan_payoff_details;
    m_loan_payoff_details_isSet = true;
}

bool OAIDataExtractsAccount::is_loan_payoff_details_Set() const{
    return m_loan_payoff_details_isSet;
}

bool OAIDataExtractsAccount::is_loan_payoff_details_Valid() const{
    return m_loan_payoff_details_isValid;
}

OAIMoney OAIDataExtractsAccount::getMarginBalance() const {
    return m_margin_balance;
}
void OAIDataExtractsAccount::setMarginBalance(const OAIMoney &margin_balance) {
    m_margin_balance = margin_balance;
    m_margin_balance_isSet = true;
}

bool OAIDataExtractsAccount::is_margin_balance_Set() const{
    return m_margin_balance_isSet;
}

bool OAIDataExtractsAccount::is_margin_balance_Valid() const{
    return m_margin_balance_isValid;
}

OAIMoney OAIDataExtractsAccount::getMaturityAmount() const {
    return m_maturity_amount;
}
void OAIDataExtractsAccount::setMaturityAmount(const OAIMoney &maturity_amount) {
    m_maturity_amount = maturity_amount;
    m_maturity_amount_isSet = true;
}

bool OAIDataExtractsAccount::is_maturity_amount_Set() const{
    return m_maturity_amount_isSet;
}

bool OAIDataExtractsAccount::is_maturity_amount_Valid() const{
    return m_maturity_amount_isValid;
}

QString OAIDataExtractsAccount::getMaturityDate() const {
    return m_maturity_date;
}
void OAIDataExtractsAccount::setMaturityDate(const QString &maturity_date) {
    m_maturity_date = maturity_date;
    m_maturity_date_isSet = true;
}

bool OAIDataExtractsAccount::is_maturity_date_Set() const{
    return m_maturity_date_isSet;
}

bool OAIDataExtractsAccount::is_maturity_date_Valid() const{
    return m_maturity_date_isValid;
}

QString OAIDataExtractsAccount::getMemo() const {
    return m_memo;
}
void OAIDataExtractsAccount::setMemo(const QString &memo) {
    m_memo = memo;
    m_memo_isSet = true;
}

bool OAIDataExtractsAccount::is_memo_Set() const{
    return m_memo_isSet;
}

bool OAIDataExtractsAccount::is_memo_Valid() const{
    return m_memo_isValid;
}

OAIMoney OAIDataExtractsAccount::getMinimumAmountDue() const {
    return m_minimum_amount_due;
}
void OAIDataExtractsAccount::setMinimumAmountDue(const OAIMoney &minimum_amount_due) {
    m_minimum_amount_due = minimum_amount_due;
    m_minimum_amount_due_isSet = true;
}

bool OAIDataExtractsAccount::is_minimum_amount_due_Set() const{
    return m_minimum_amount_due_isSet;
}

bool OAIDataExtractsAccount::is_minimum_amount_due_Valid() const{
    return m_minimum_amount_due_isValid;
}

OAIMoney OAIDataExtractsAccount::getMoneyMarketBalance() const {
    return m_money_market_balance;
}
void OAIDataExtractsAccount::setMoneyMarketBalance(const OAIMoney &money_market_balance) {
    m_money_market_balance = money_market_balance;
    m_money_market_balance_isSet = true;
}

bool OAIDataExtractsAccount::is_money_market_balance_Set() const{
    return m_money_market_balance_isSet;
}

bool OAIDataExtractsAccount::is_money_market_balance_Valid() const{
    return m_money_market_balance_isValid;
}

QString OAIDataExtractsAccount::getNextLevel() const {
    return m_next_level;
}
void OAIDataExtractsAccount::setNextLevel(const QString &next_level) {
    m_next_level = next_level;
    m_next_level_isSet = true;
}

bool OAIDataExtractsAccount::is_next_level_Set() const{
    return m_next_level_isSet;
}

bool OAIDataExtractsAccount::is_next_level_Valid() const{
    return m_next_level_isValid;
}

QString OAIDataExtractsAccount::getNickname() const {
    return m_nickname;
}
void OAIDataExtractsAccount::setNickname(const QString &nickname) {
    m_nickname = nickname;
    m_nickname_isSet = true;
}

bool OAIDataExtractsAccount::is_nickname_Set() const{
    return m_nickname_isSet;
}

bool OAIDataExtractsAccount::is_nickname_Valid() const{
    return m_nickname_isValid;
}

QString OAIDataExtractsAccount::getOauthMigrationStatus() const {
    return m_oauth_migration_status;
}
void OAIDataExtractsAccount::setOauthMigrationStatus(const QString &oauth_migration_status) {
    m_oauth_migration_status = oauth_migration_status;
    m_oauth_migration_status_isSet = true;
}

bool OAIDataExtractsAccount::is_oauth_migration_status_Set() const{
    return m_oauth_migration_status_isSet;
}

bool OAIDataExtractsAccount::is_oauth_migration_status_Valid() const{
    return m_oauth_migration_status_isValid;
}

OAIMoney OAIDataExtractsAccount::getOriginalLoanAmount() const {
    return m_original_loan_amount;
}
void OAIDataExtractsAccount::setOriginalLoanAmount(const OAIMoney &original_loan_amount) {
    m_original_loan_amount = original_loan_amount;
    m_original_loan_amount_isSet = true;
}

bool OAIDataExtractsAccount::is_original_loan_amount_Set() const{
    return m_original_loan_amount_isSet;
}

bool OAIDataExtractsAccount::is_original_loan_amount_Valid() const{
    return m_original_loan_amount_isValid;
}

QString OAIDataExtractsAccount::getOriginationDate() const {
    return m_origination_date;
}
void OAIDataExtractsAccount::setOriginationDate(const QString &origination_date) {
    m_origination_date = origination_date;
    m_origination_date_isSet = true;
}

bool OAIDataExtractsAccount::is_origination_date_Set() const{
    return m_origination_date_isSet;
}

bool OAIDataExtractsAccount::is_origination_date_Valid() const{
    return m_origination_date_isValid;
}

OAIMoney OAIDataExtractsAccount::getOverDraftLimit() const {
    return m_over_draft_limit;
}
void OAIDataExtractsAccount::setOverDraftLimit(const OAIMoney &over_draft_limit) {
    m_over_draft_limit = over_draft_limit;
    m_over_draft_limit_isSet = true;
}

bool OAIDataExtractsAccount::is_over_draft_limit_Set() const{
    return m_over_draft_limit_isSet;
}

bool OAIDataExtractsAccount::is_over_draft_limit_Valid() const{
    return m_over_draft_limit_isValid;
}

QString OAIDataExtractsAccount::getPolicyEffectiveDate() const {
    return m_policy_effective_date;
}
void OAIDataExtractsAccount::setPolicyEffectiveDate(const QString &policy_effective_date) {
    m_policy_effective_date = policy_effective_date;
    m_policy_effective_date_isSet = true;
}

bool OAIDataExtractsAccount::is_policy_effective_date_Set() const{
    return m_policy_effective_date_isSet;
}

bool OAIDataExtractsAccount::is_policy_effective_date_Valid() const{
    return m_policy_effective_date_isValid;
}

QString OAIDataExtractsAccount::getPolicyFromDate() const {
    return m_policy_from_date;
}
void OAIDataExtractsAccount::setPolicyFromDate(const QString &policy_from_date) {
    m_policy_from_date = policy_from_date;
    m_policy_from_date_isSet = true;
}

bool OAIDataExtractsAccount::is_policy_from_date_Set() const{
    return m_policy_from_date_isSet;
}

bool OAIDataExtractsAccount::is_policy_from_date_Valid() const{
    return m_policy_from_date_isValid;
}

QString OAIDataExtractsAccount::getPolicyStatus() const {
    return m_policy_status;
}
void OAIDataExtractsAccount::setPolicyStatus(const QString &policy_status) {
    m_policy_status = policy_status;
    m_policy_status_isSet = true;
}

bool OAIDataExtractsAccount::is_policy_status_Set() const{
    return m_policy_status_isSet;
}

bool OAIDataExtractsAccount::is_policy_status_Valid() const{
    return m_policy_status_isValid;
}

QString OAIDataExtractsAccount::getPolicyTerm() const {
    return m_policy_term;
}
void OAIDataExtractsAccount::setPolicyTerm(const QString &policy_term) {
    m_policy_term = policy_term;
    m_policy_term_isSet = true;
}

bool OAIDataExtractsAccount::is_policy_term_Set() const{
    return m_policy_term_isSet;
}

bool OAIDataExtractsAccount::is_policy_term_Valid() const{
    return m_policy_term_isValid;
}

QString OAIDataExtractsAccount::getPolicyToDate() const {
    return m_policy_to_date;
}
void OAIDataExtractsAccount::setPolicyToDate(const QString &policy_to_date) {
    m_policy_to_date = policy_to_date;
    m_policy_to_date_isSet = true;
}

bool OAIDataExtractsAccount::is_policy_to_date_Set() const{
    return m_policy_to_date_isSet;
}

bool OAIDataExtractsAccount::is_policy_to_date_Valid() const{
    return m_policy_to_date_isValid;
}

OAIMoney OAIDataExtractsAccount::getPremium() const {
    return m_premium;
}
void OAIDataExtractsAccount::setPremium(const OAIMoney &premium) {
    m_premium = premium;
    m_premium_isSet = true;
}

bool OAIDataExtractsAccount::is_premium_Set() const{
    return m_premium_isSet;
}

bool OAIDataExtractsAccount::is_premium_Valid() const{
    return m_premium_isValid;
}

QString OAIDataExtractsAccount::getPremiumPaymentTerm() const {
    return m_premium_payment_term;
}
void OAIDataExtractsAccount::setPremiumPaymentTerm(const QString &premium_payment_term) {
    m_premium_payment_term = premium_payment_term;
    m_premium_payment_term_isSet = true;
}

bool OAIDataExtractsAccount::is_premium_payment_term_Set() const{
    return m_premium_payment_term_isSet;
}

bool OAIDataExtractsAccount::is_premium_payment_term_Valid() const{
    return m_premium_payment_term_isValid;
}

QString OAIDataExtractsAccount::getPrimaryRewardUnit() const {
    return m_primary_reward_unit;
}
void OAIDataExtractsAccount::setPrimaryRewardUnit(const QString &primary_reward_unit) {
    m_primary_reward_unit = primary_reward_unit;
    m_primary_reward_unit_isSet = true;
}

bool OAIDataExtractsAccount::is_primary_reward_unit_Set() const{
    return m_primary_reward_unit_isSet;
}

bool OAIDataExtractsAccount::is_primary_reward_unit_Valid() const{
    return m_primary_reward_unit_isValid;
}

OAIMoney OAIDataExtractsAccount::getPrincipalBalance() const {
    return m_principal_balance;
}
void OAIDataExtractsAccount::setPrincipalBalance(const OAIMoney &principal_balance) {
    m_principal_balance = principal_balance;
    m_principal_balance_isSet = true;
}

bool OAIDataExtractsAccount::is_principal_balance_Set() const{
    return m_principal_balance_isSet;
}

bool OAIDataExtractsAccount::is_principal_balance_Valid() const{
    return m_principal_balance_isValid;
}

qint64 OAIDataExtractsAccount::getProviderAccountId() const {
    return m_provider_account_id;
}
void OAIDataExtractsAccount::setProviderAccountId(const qint64 &provider_account_id) {
    m_provider_account_id = provider_account_id;
    m_provider_account_id_isSet = true;
}

bool OAIDataExtractsAccount::is_provider_account_id_Set() const{
    return m_provider_account_id_isSet;
}

bool OAIDataExtractsAccount::is_provider_account_id_Valid() const{
    return m_provider_account_id_isValid;
}

QString OAIDataExtractsAccount::getProviderId() const {
    return m_provider_id;
}
void OAIDataExtractsAccount::setProviderId(const QString &provider_id) {
    m_provider_id = provider_id;
    m_provider_id_isSet = true;
}

bool OAIDataExtractsAccount::is_provider_id_Set() const{
    return m_provider_id_isSet;
}

bool OAIDataExtractsAccount::is_provider_id_Valid() const{
    return m_provider_id_isValid;
}

QString OAIDataExtractsAccount::getProviderName() const {
    return m_provider_name;
}
void OAIDataExtractsAccount::setProviderName(const QString &provider_name) {
    m_provider_name = provider_name;
    m_provider_name_isSet = true;
}

bool OAIDataExtractsAccount::is_provider_name_Set() const{
    return m_provider_name_isSet;
}

bool OAIDataExtractsAccount::is_provider_name_Valid() const{
    return m_provider_name_isValid;
}

OAIMoney OAIDataExtractsAccount::getRecurringPayment() const {
    return m_recurring_payment;
}
void OAIDataExtractsAccount::setRecurringPayment(const OAIMoney &recurring_payment) {
    m_recurring_payment = recurring_payment;
    m_recurring_payment_isSet = true;
}

bool OAIDataExtractsAccount::is_recurring_payment_Set() const{
    return m_recurring_payment_isSet;
}

bool OAIDataExtractsAccount::is_recurring_payment_Valid() const{
    return m_recurring_payment_isValid;
}

OAIMoney OAIDataExtractsAccount::getRemainingBalance() const {
    return m_remaining_balance;
}
void OAIDataExtractsAccount::setRemainingBalance(const OAIMoney &remaining_balance) {
    m_remaining_balance = remaining_balance;
    m_remaining_balance_isSet = true;
}

bool OAIDataExtractsAccount::is_remaining_balance_Set() const{
    return m_remaining_balance_isSet;
}

bool OAIDataExtractsAccount::is_remaining_balance_Valid() const{
    return m_remaining_balance_isValid;
}

QString OAIDataExtractsAccount::getRepaymentPlanType() const {
    return m_repayment_plan_type;
}
void OAIDataExtractsAccount::setRepaymentPlanType(const QString &repayment_plan_type) {
    m_repayment_plan_type = repayment_plan_type;
    m_repayment_plan_type_isSet = true;
}

bool OAIDataExtractsAccount::is_repayment_plan_type_Set() const{
    return m_repayment_plan_type_isSet;
}

bool OAIDataExtractsAccount::is_repayment_plan_type_Valid() const{
    return m_repayment_plan_type_isValid;
}

QList<OAIRewardBalance> OAIDataExtractsAccount::getRewardBalance() const {
    return m_reward_balance;
}
void OAIDataExtractsAccount::setRewardBalance(const QList<OAIRewardBalance> &reward_balance) {
    m_reward_balance = reward_balance;
    m_reward_balance_isSet = true;
}

bool OAIDataExtractsAccount::is_reward_balance_Set() const{
    return m_reward_balance_isSet;
}

bool OAIDataExtractsAccount::is_reward_balance_Valid() const{
    return m_reward_balance_isValid;
}

OAIMoney OAIDataExtractsAccount::getRunningBalance() const {
    return m_running_balance;
}
void OAIDataExtractsAccount::setRunningBalance(const OAIMoney &running_balance) {
    m_running_balance = running_balance;
    m_running_balance_isSet = true;
}

bool OAIDataExtractsAccount::is_running_balance_Set() const{
    return m_running_balance_isSet;
}

bool OAIDataExtractsAccount::is_running_balance_Valid() const{
    return m_running_balance_isValid;
}

OAIMoney OAIDataExtractsAccount::getShortBalance() const {
    return m_short_balance;
}
void OAIDataExtractsAccount::setShortBalance(const OAIMoney &short_balance) {
    m_short_balance = short_balance;
    m_short_balance_isSet = true;
}

bool OAIDataExtractsAccount::is_short_balance_Set() const{
    return m_short_balance_isSet;
}

bool OAIDataExtractsAccount::is_short_balance_Valid() const{
    return m_short_balance_isValid;
}

QString OAIDataExtractsAccount::getSourceAccountStatus() const {
    return m_source_account_status;
}
void OAIDataExtractsAccount::setSourceAccountStatus(const QString &source_account_status) {
    m_source_account_status = source_account_status;
    m_source_account_status_isSet = true;
}

bool OAIDataExtractsAccount::is_source_account_status_Set() const{
    return m_source_account_status_isSet;
}

bool OAIDataExtractsAccount::is_source_account_status_Valid() const{
    return m_source_account_status_isValid;
}

QString OAIDataExtractsAccount::getSourceId() const {
    return m_source_id;
}
void OAIDataExtractsAccount::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIDataExtractsAccount::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIDataExtractsAccount::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIDataExtractsAccount::getTerm() const {
    return m_term;
}
void OAIDataExtractsAccount::setTerm(const QString &term) {
    m_term = term;
    m_term_isSet = true;
}

bool OAIDataExtractsAccount::is_term_Set() const{
    return m_term_isSet;
}

bool OAIDataExtractsAccount::is_term_Valid() const{
    return m_term_isValid;
}

OAIMoney OAIDataExtractsAccount::getTotalCashLimit() const {
    return m_total_cash_limit;
}
void OAIDataExtractsAccount::setTotalCashLimit(const OAIMoney &total_cash_limit) {
    m_total_cash_limit = total_cash_limit;
    m_total_cash_limit_isSet = true;
}

bool OAIDataExtractsAccount::is_total_cash_limit_Set() const{
    return m_total_cash_limit_isSet;
}

bool OAIDataExtractsAccount::is_total_cash_limit_Valid() const{
    return m_total_cash_limit_isValid;
}

OAIMoney OAIDataExtractsAccount::getTotalCreditLimit() const {
    return m_total_credit_limit;
}
void OAIDataExtractsAccount::setTotalCreditLimit(const OAIMoney &total_credit_limit) {
    m_total_credit_limit = total_credit_limit;
    m_total_credit_limit_isSet = true;
}

bool OAIDataExtractsAccount::is_total_credit_limit_Set() const{
    return m_total_credit_limit_isSet;
}

bool OAIDataExtractsAccount::is_total_credit_limit_Valid() const{
    return m_total_credit_limit_isValid;
}

OAIMoney OAIDataExtractsAccount::getTotalCreditLine() const {
    return m_total_credit_line;
}
void OAIDataExtractsAccount::setTotalCreditLine(const OAIMoney &total_credit_line) {
    m_total_credit_line = total_credit_line;
    m_total_credit_line_isSet = true;
}

bool OAIDataExtractsAccount::is_total_credit_line_Set() const{
    return m_total_credit_line_isSet;
}

bool OAIDataExtractsAccount::is_total_credit_line_Valid() const{
    return m_total_credit_line_isValid;
}

OAIMoney OAIDataExtractsAccount::getTotalUnvestedBalance() const {
    return m_total_unvested_balance;
}
void OAIDataExtractsAccount::setTotalUnvestedBalance(const OAIMoney &total_unvested_balance) {
    m_total_unvested_balance = total_unvested_balance;
    m_total_unvested_balance_isSet = true;
}

bool OAIDataExtractsAccount::is_total_unvested_balance_Set() const{
    return m_total_unvested_balance_isSet;
}

bool OAIDataExtractsAccount::is_total_unvested_balance_Valid() const{
    return m_total_unvested_balance_isValid;
}

OAIMoney OAIDataExtractsAccount::getTotalVestedBalance() const {
    return m_total_vested_balance;
}
void OAIDataExtractsAccount::setTotalVestedBalance(const OAIMoney &total_vested_balance) {
    m_total_vested_balance = total_vested_balance;
    m_total_vested_balance_isSet = true;
}

bool OAIDataExtractsAccount::is_total_vested_balance_Set() const{
    return m_total_vested_balance_isSet;
}

bool OAIDataExtractsAccount::is_total_vested_balance_Valid() const{
    return m_total_vested_balance_isValid;
}

QString OAIDataExtractsAccount::getUserClassification() const {
    return m_user_classification;
}
void OAIDataExtractsAccount::setUserClassification(const QString &user_classification) {
    m_user_classification = user_classification;
    m_user_classification_isSet = true;
}

bool OAIDataExtractsAccount::is_user_classification_Set() const{
    return m_user_classification_isSet;
}

bool OAIDataExtractsAccount::is_user_classification_Valid() const{
    return m_user_classification_isValid;
}

QString OAIDataExtractsAccount::getValuationType() const {
    return m_valuation_type;
}
void OAIDataExtractsAccount::setValuationType(const QString &valuation_type) {
    m_valuation_type = valuation_type;
    m_valuation_type_isSet = true;
}

bool OAIDataExtractsAccount::is_valuation_type_Set() const{
    return m_valuation_type_isSet;
}

bool OAIDataExtractsAccount::is_valuation_type_Valid() const{
    return m_valuation_type_isValid;
}

bool OAIDataExtractsAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_401k_loan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregation_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_due.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_annual_percentage_yield_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annuity_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_apr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_associated_provider_account_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_cash.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_credit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_transfer_code.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_apr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_classification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collateral_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_death_benefit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_derived_apr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_displayed_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enrollment_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_escrow_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_face_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guarantor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_insurance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_in_net_worth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interest_paid_last_year.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_interest_paid_ytd.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_interest_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interest_rate_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_asset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_manual_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_employee_contribution_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_employee_contribution_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_payment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_payment_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_payment_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_life_insurance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loan_pay_by_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loan_payoff_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_loan_payoff_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_margin_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maturity_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maturity_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_amount_due.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_money_market_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nickname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_migration_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_loan_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_origination_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_over_draft_limit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_effective_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_from_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_term_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_to_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_premium.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_premium_payment_term_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_reward_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_payment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repayment_plan_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reward_balance.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_running_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_account_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_cash_limit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_credit_limit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_credit_line.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_unvested_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_vested_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_classification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valuation_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataExtractsAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
