/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProviderAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProviderAccount::OAIProviderAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProviderAccount::OAIProviderAccount() {
    this->initializeModel();
}

OAIProviderAccount::~OAIProviderAccount() {}

void OAIProviderAccount::initializeModel() {

    m_aggregation_source_isSet = false;
    m_aggregation_source_isValid = false;

    m_consent_id_isSet = false;
    m_consent_id_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_dataset_isSet = false;
    m_dataset_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_manual_isSet = false;
    m_is_manual_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_oauth_migration_status_isSet = false;
    m_oauth_migration_status_isValid = false;

    m_preferences_isSet = false;
    m_preferences_isValid = false;

    m_provider_id_isSet = false;
    m_provider_id_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIProviderAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProviderAccount::fromJsonObject(QJsonObject json) {

    m_aggregation_source_isValid = ::OpenAPI::fromJsonValue(m_aggregation_source, json[QString("aggregationSource")]);
    m_aggregation_source_isSet = !json[QString("aggregationSource")].isNull() && m_aggregation_source_isValid;

    m_consent_id_isValid = ::OpenAPI::fromJsonValue(m_consent_id, json[QString("consentId")]);
    m_consent_id_isSet = !json[QString("consentId")].isNull() && m_consent_id_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_dataset_isValid = ::OpenAPI::fromJsonValue(m_dataset, json[QString("dataset")]);
    m_dataset_isSet = !json[QString("dataset")].isNull() && m_dataset_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_manual_isValid = ::OpenAPI::fromJsonValue(m_is_manual, json[QString("isManual")]);
    m_is_manual_isSet = !json[QString("isManual")].isNull() && m_is_manual_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_oauth_migration_status_isValid = ::OpenAPI::fromJsonValue(m_oauth_migration_status, json[QString("oauthMigrationStatus")]);
    m_oauth_migration_status_isSet = !json[QString("oauthMigrationStatus")].isNull() && m_oauth_migration_status_isValid;

    m_preferences_isValid = ::OpenAPI::fromJsonValue(m_preferences, json[QString("preferences")]);
    m_preferences_isSet = !json[QString("preferences")].isNull() && m_preferences_isValid;

    m_provider_id_isValid = ::OpenAPI::fromJsonValue(m_provider_id, json[QString("providerId")]);
    m_provider_id_isSet = !json[QString("providerId")].isNull() && m_provider_id_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIProviderAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProviderAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregation_source_isSet) {
        obj.insert(QString("aggregationSource"), ::OpenAPI::toJsonValue(m_aggregation_source));
    }
    if (m_consent_id_isSet) {
        obj.insert(QString("consentId"), ::OpenAPI::toJsonValue(m_consent_id));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_dataset.size() > 0) {
        obj.insert(QString("dataset"), ::OpenAPI::toJsonValue(m_dataset));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_manual_isSet) {
        obj.insert(QString("isManual"), ::OpenAPI::toJsonValue(m_is_manual));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_oauth_migration_status_isSet) {
        obj.insert(QString("oauthMigrationStatus"), ::OpenAPI::toJsonValue(m_oauth_migration_status));
    }
    if (m_preferences.isSet()) {
        obj.insert(QString("preferences"), ::OpenAPI::toJsonValue(m_preferences));
    }
    if (m_provider_id_isSet) {
        obj.insert(QString("providerId"), ::OpenAPI::toJsonValue(m_provider_id));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIProviderAccount::getAggregationSource() const {
    return m_aggregation_source;
}
void OAIProviderAccount::setAggregationSource(const QString &aggregation_source) {
    m_aggregation_source = aggregation_source;
    m_aggregation_source_isSet = true;
}

bool OAIProviderAccount::is_aggregation_source_Set() const{
    return m_aggregation_source_isSet;
}

bool OAIProviderAccount::is_aggregation_source_Valid() const{
    return m_aggregation_source_isValid;
}

qint64 OAIProviderAccount::getConsentId() const {
    return m_consent_id;
}
void OAIProviderAccount::setConsentId(const qint64 &consent_id) {
    m_consent_id = consent_id;
    m_consent_id_isSet = true;
}

bool OAIProviderAccount::is_consent_id_Set() const{
    return m_consent_id_isSet;
}

bool OAIProviderAccount::is_consent_id_Valid() const{
    return m_consent_id_isValid;
}

QString OAIProviderAccount::getCreatedDate() const {
    return m_created_date;
}
void OAIProviderAccount::setCreatedDate(const QString &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIProviderAccount::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIProviderAccount::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QList<OAIAccountDataset> OAIProviderAccount::getDataset() const {
    return m_dataset;
}
void OAIProviderAccount::setDataset(const QList<OAIAccountDataset> &dataset) {
    m_dataset = dataset;
    m_dataset_isSet = true;
}

bool OAIProviderAccount::is_dataset_Set() const{
    return m_dataset_isSet;
}

bool OAIProviderAccount::is_dataset_Valid() const{
    return m_dataset_isValid;
}

qint64 OAIProviderAccount::getId() const {
    return m_id;
}
void OAIProviderAccount::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProviderAccount::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProviderAccount::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIProviderAccount::isIsManual() const {
    return m_is_manual;
}
void OAIProviderAccount::setIsManual(const bool &is_manual) {
    m_is_manual = is_manual;
    m_is_manual_isSet = true;
}

bool OAIProviderAccount::is_is_manual_Set() const{
    return m_is_manual_isSet;
}

bool OAIProviderAccount::is_is_manual_Valid() const{
    return m_is_manual_isValid;
}

QString OAIProviderAccount::getLastUpdated() const {
    return m_last_updated;
}
void OAIProviderAccount::setLastUpdated(const QString &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIProviderAccount::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIProviderAccount::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIProviderAccount::getOauthMigrationStatus() const {
    return m_oauth_migration_status;
}
void OAIProviderAccount::setOauthMigrationStatus(const QString &oauth_migration_status) {
    m_oauth_migration_status = oauth_migration_status;
    m_oauth_migration_status_isSet = true;
}

bool OAIProviderAccount::is_oauth_migration_status_Set() const{
    return m_oauth_migration_status_isSet;
}

bool OAIProviderAccount::is_oauth_migration_status_Valid() const{
    return m_oauth_migration_status_isValid;
}

OAIProviderAccountPreferences OAIProviderAccount::getPreferences() const {
    return m_preferences;
}
void OAIProviderAccount::setPreferences(const OAIProviderAccountPreferences &preferences) {
    m_preferences = preferences;
    m_preferences_isSet = true;
}

bool OAIProviderAccount::is_preferences_Set() const{
    return m_preferences_isSet;
}

bool OAIProviderAccount::is_preferences_Valid() const{
    return m_preferences_isValid;
}

qint64 OAIProviderAccount::getProviderId() const {
    return m_provider_id;
}
void OAIProviderAccount::setProviderId(const qint64 &provider_id) {
    m_provider_id = provider_id;
    m_provider_id_isSet = true;
}

bool OAIProviderAccount::is_provider_id_Set() const{
    return m_provider_id_isSet;
}

bool OAIProviderAccount::is_provider_id_Valid() const{
    return m_provider_id_isValid;
}

QString OAIProviderAccount::getRequestId() const {
    return m_request_id;
}
void OAIProviderAccount::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIProviderAccount::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIProviderAccount::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAIProviderAccount::getStatus() const {
    return m_status;
}
void OAIProviderAccount::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIProviderAccount::is_status_Set() const{
    return m_status_isSet;
}

bool OAIProviderAccount::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIProviderAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregation_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_manual_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_migration_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProviderAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
