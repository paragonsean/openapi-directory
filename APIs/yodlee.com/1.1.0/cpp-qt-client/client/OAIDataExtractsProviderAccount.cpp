/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataExtractsProviderAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataExtractsProviderAccount::OAIDataExtractsProviderAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataExtractsProviderAccount::OAIDataExtractsProviderAccount() {
    this->initializeModel();
}

OAIDataExtractsProviderAccount::~OAIDataExtractsProviderAccount() {}

void OAIDataExtractsProviderAccount::initializeModel() {

    m_aggregation_source_isSet = false;
    m_aggregation_source_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_dataset_isSet = false;
    m_dataset_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_deleted_isSet = false;
    m_is_deleted_isValid = false;

    m_is_manual_isSet = false;
    m_is_manual_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_oauth_migration_status_isSet = false;
    m_oauth_migration_status_isValid = false;

    m_provider_id_isSet = false;
    m_provider_id_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDataExtractsProviderAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataExtractsProviderAccount::fromJsonObject(QJsonObject json) {

    m_aggregation_source_isValid = ::OpenAPI::fromJsonValue(m_aggregation_source, json[QString("aggregationSource")]);
    m_aggregation_source_isSet = !json[QString("aggregationSource")].isNull() && m_aggregation_source_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_dataset_isValid = ::OpenAPI::fromJsonValue(m_dataset, json[QString("dataset")]);
    m_dataset_isSet = !json[QString("dataset")].isNull() && m_dataset_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_deleted_isValid = ::OpenAPI::fromJsonValue(m_is_deleted, json[QString("isDeleted")]);
    m_is_deleted_isSet = !json[QString("isDeleted")].isNull() && m_is_deleted_isValid;

    m_is_manual_isValid = ::OpenAPI::fromJsonValue(m_is_manual, json[QString("isManual")]);
    m_is_manual_isSet = !json[QString("isManual")].isNull() && m_is_manual_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_oauth_migration_status_isValid = ::OpenAPI::fromJsonValue(m_oauth_migration_status, json[QString("oauthMigrationStatus")]);
    m_oauth_migration_status_isSet = !json[QString("oauthMigrationStatus")].isNull() && m_oauth_migration_status_isValid;

    m_provider_id_isValid = ::OpenAPI::fromJsonValue(m_provider_id, json[QString("providerId")]);
    m_provider_id_isSet = !json[QString("providerId")].isNull() && m_provider_id_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIDataExtractsProviderAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataExtractsProviderAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregation_source_isSet) {
        obj.insert(QString("aggregationSource"), ::OpenAPI::toJsonValue(m_aggregation_source));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_dataset.size() > 0) {
        obj.insert(QString("dataset"), ::OpenAPI::toJsonValue(m_dataset));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_deleted_isSet) {
        obj.insert(QString("isDeleted"), ::OpenAPI::toJsonValue(m_is_deleted));
    }
    if (m_is_manual_isSet) {
        obj.insert(QString("isManual"), ::OpenAPI::toJsonValue(m_is_manual));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_oauth_migration_status_isSet) {
        obj.insert(QString("oauthMigrationStatus"), ::OpenAPI::toJsonValue(m_oauth_migration_status));
    }
    if (m_provider_id_isSet) {
        obj.insert(QString("providerId"), ::OpenAPI::toJsonValue(m_provider_id));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIDataExtractsProviderAccount::getAggregationSource() const {
    return m_aggregation_source;
}
void OAIDataExtractsProviderAccount::setAggregationSource(const QString &aggregation_source) {
    m_aggregation_source = aggregation_source;
    m_aggregation_source_isSet = true;
}

bool OAIDataExtractsProviderAccount::is_aggregation_source_Set() const{
    return m_aggregation_source_isSet;
}

bool OAIDataExtractsProviderAccount::is_aggregation_source_Valid() const{
    return m_aggregation_source_isValid;
}

QString OAIDataExtractsProviderAccount::getCreatedDate() const {
    return m_created_date;
}
void OAIDataExtractsProviderAccount::setCreatedDate(const QString &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIDataExtractsProviderAccount::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIDataExtractsProviderAccount::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QList<OAIAccountDataset> OAIDataExtractsProviderAccount::getDataset() const {
    return m_dataset;
}
void OAIDataExtractsProviderAccount::setDataset(const QList<OAIAccountDataset> &dataset) {
    m_dataset = dataset;
    m_dataset_isSet = true;
}

bool OAIDataExtractsProviderAccount::is_dataset_Set() const{
    return m_dataset_isSet;
}

bool OAIDataExtractsProviderAccount::is_dataset_Valid() const{
    return m_dataset_isValid;
}

qint64 OAIDataExtractsProviderAccount::getId() const {
    return m_id;
}
void OAIDataExtractsProviderAccount::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDataExtractsProviderAccount::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDataExtractsProviderAccount::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIDataExtractsProviderAccount::isIsDeleted() const {
    return m_is_deleted;
}
void OAIDataExtractsProviderAccount::setIsDeleted(const bool &is_deleted) {
    m_is_deleted = is_deleted;
    m_is_deleted_isSet = true;
}

bool OAIDataExtractsProviderAccount::is_is_deleted_Set() const{
    return m_is_deleted_isSet;
}

bool OAIDataExtractsProviderAccount::is_is_deleted_Valid() const{
    return m_is_deleted_isValid;
}

bool OAIDataExtractsProviderAccount::isIsManual() const {
    return m_is_manual;
}
void OAIDataExtractsProviderAccount::setIsManual(const bool &is_manual) {
    m_is_manual = is_manual;
    m_is_manual_isSet = true;
}

bool OAIDataExtractsProviderAccount::is_is_manual_Set() const{
    return m_is_manual_isSet;
}

bool OAIDataExtractsProviderAccount::is_is_manual_Valid() const{
    return m_is_manual_isValid;
}

QString OAIDataExtractsProviderAccount::getLastUpdated() const {
    return m_last_updated;
}
void OAIDataExtractsProviderAccount::setLastUpdated(const QString &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIDataExtractsProviderAccount::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIDataExtractsProviderAccount::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIDataExtractsProviderAccount::getOauthMigrationStatus() const {
    return m_oauth_migration_status;
}
void OAIDataExtractsProviderAccount::setOauthMigrationStatus(const QString &oauth_migration_status) {
    m_oauth_migration_status = oauth_migration_status;
    m_oauth_migration_status_isSet = true;
}

bool OAIDataExtractsProviderAccount::is_oauth_migration_status_Set() const{
    return m_oauth_migration_status_isSet;
}

bool OAIDataExtractsProviderAccount::is_oauth_migration_status_Valid() const{
    return m_oauth_migration_status_isValid;
}

qint64 OAIDataExtractsProviderAccount::getProviderId() const {
    return m_provider_id;
}
void OAIDataExtractsProviderAccount::setProviderId(const qint64 &provider_id) {
    m_provider_id = provider_id;
    m_provider_id_isSet = true;
}

bool OAIDataExtractsProviderAccount::is_provider_id_Set() const{
    return m_provider_id_isSet;
}

bool OAIDataExtractsProviderAccount::is_provider_id_Valid() const{
    return m_provider_id_isValid;
}

QString OAIDataExtractsProviderAccount::getRequestId() const {
    return m_request_id;
}
void OAIDataExtractsProviderAccount::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDataExtractsProviderAccount::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDataExtractsProviderAccount::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAIDataExtractsProviderAccount::getStatus() const {
    return m_status;
}
void OAIDataExtractsProviderAccount::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDataExtractsProviderAccount::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDataExtractsProviderAccount::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDataExtractsProviderAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregation_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_manual_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_migration_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataExtractsProviderAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
