/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICapability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICapability::OAICapability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICapability::OAICapability() {
    this->initializeModel();
}

OAICapability::~OAICapability() {}

void OAICapability::initializeModel() {

    m_container_isSet = false;
    m_container_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAICapability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICapability::fromJsonObject(QJsonObject json) {

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("container")]);
    m_container_isSet = !json[QString("container")].isNull() && m_container_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAICapability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICapability::asJsonObject() const {
    QJsonObject obj;
    if (m_container.size() > 0) {
        obj.insert(QString("container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QList<QString> OAICapability::getContainer() const {
    return m_container;
}
void OAICapability::setContainer(const QList<QString> &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAICapability::is_container_Set() const{
    return m_container_isSet;
}

bool OAICapability::is_container_Valid() const{
    return m_container_isValid;
}

QString OAICapability::getName() const {
    return m_name;
}
void OAICapability::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICapability::is_name_Set() const{
    return m_name_isSet;
}

bool OAICapability::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICapability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICapability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
