/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDerivedNetworth.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDerivedNetworth::OAIDerivedNetworth(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDerivedNetworth::OAIDerivedNetworth() {
    this->initializeModel();
}

OAIDerivedNetworth::~OAIDerivedNetworth() {}

void OAIDerivedNetworth::initializeModel() {

    m_asset_isSet = false;
    m_asset_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_historical_balances_isSet = false;
    m_historical_balances_isValid = false;

    m_liability_isSet = false;
    m_liability_isValid = false;

    m_networth_isSet = false;
    m_networth_isValid = false;
}

void OAIDerivedNetworth::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDerivedNetworth::fromJsonObject(QJsonObject json) {

    m_asset_isValid = ::OpenAPI::fromJsonValue(m_asset, json[QString("asset")]);
    m_asset_isSet = !json[QString("asset")].isNull() && m_asset_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_historical_balances_isValid = ::OpenAPI::fromJsonValue(m_historical_balances, json[QString("historicalBalances")]);
    m_historical_balances_isSet = !json[QString("historicalBalances")].isNull() && m_historical_balances_isValid;

    m_liability_isValid = ::OpenAPI::fromJsonValue(m_liability, json[QString("liability")]);
    m_liability_isSet = !json[QString("liability")].isNull() && m_liability_isValid;

    m_networth_isValid = ::OpenAPI::fromJsonValue(m_networth, json[QString("networth")]);
    m_networth_isSet = !json[QString("networth")].isNull() && m_networth_isValid;
}

QString OAIDerivedNetworth::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDerivedNetworth::asJsonObject() const {
    QJsonObject obj;
    if (m_asset.isSet()) {
        obj.insert(QString("asset"), ::OpenAPI::toJsonValue(m_asset));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_historical_balances.size() > 0) {
        obj.insert(QString("historicalBalances"), ::OpenAPI::toJsonValue(m_historical_balances));
    }
    if (m_liability.isSet()) {
        obj.insert(QString("liability"), ::OpenAPI::toJsonValue(m_liability));
    }
    if (m_networth.isSet()) {
        obj.insert(QString("networth"), ::OpenAPI::toJsonValue(m_networth));
    }
    return obj;
}

OAIMoney OAIDerivedNetworth::getAsset() const {
    return m_asset;
}
void OAIDerivedNetworth::setAsset(const OAIMoney &asset) {
    m_asset = asset;
    m_asset_isSet = true;
}

bool OAIDerivedNetworth::is_asset_Set() const{
    return m_asset_isSet;
}

bool OAIDerivedNetworth::is_asset_Valid() const{
    return m_asset_isValid;
}

QString OAIDerivedNetworth::getDate() const {
    return m_date;
}
void OAIDerivedNetworth::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIDerivedNetworth::is_date_Set() const{
    return m_date_isSet;
}

bool OAIDerivedNetworth::is_date_Valid() const{
    return m_date_isValid;
}

QList<OAIDerivedNetworthHistoricalBalance> OAIDerivedNetworth::getHistoricalBalances() const {
    return m_historical_balances;
}
void OAIDerivedNetworth::setHistoricalBalances(const QList<OAIDerivedNetworthHistoricalBalance> &historical_balances) {
    m_historical_balances = historical_balances;
    m_historical_balances_isSet = true;
}

bool OAIDerivedNetworth::is_historical_balances_Set() const{
    return m_historical_balances_isSet;
}

bool OAIDerivedNetworth::is_historical_balances_Valid() const{
    return m_historical_balances_isValid;
}

OAIMoney OAIDerivedNetworth::getLiability() const {
    return m_liability;
}
void OAIDerivedNetworth::setLiability(const OAIMoney &liability) {
    m_liability = liability;
    m_liability_isSet = true;
}

bool OAIDerivedNetworth::is_liability_Set() const{
    return m_liability_isSet;
}

bool OAIDerivedNetworth::is_liability_Valid() const{
    return m_liability_isValid;
}

OAIMoney OAIDerivedNetworth::getNetworth() const {
    return m_networth;
}
void OAIDerivedNetworth::setNetworth(const OAIMoney &networth) {
    m_networth = networth;
    m_networth_isSet = true;
}

bool OAIDerivedNetworth::is_networth_Set() const{
    return m_networth_isSet;
}

bool OAIDerivedNetworth::is_networth_Valid() const{
    return m_networth_isValid;
}

bool OAIDerivedNetworth::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_historical_balances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_liability.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_networth.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDerivedNetworth::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
