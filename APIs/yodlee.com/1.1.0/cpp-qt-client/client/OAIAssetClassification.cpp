/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetClassification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetClassification::OAIAssetClassification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetClassification::OAIAssetClassification() {
    this->initializeModel();
}

OAIAssetClassification::~OAIAssetClassification() {}

void OAIAssetClassification::initializeModel() {

    m_allocation_isSet = false;
    m_allocation_isValid = false;

    m_classification_type_isSet = false;
    m_classification_type_isValid = false;

    m_classification_value_isSet = false;
    m_classification_value_isValid = false;
}

void OAIAssetClassification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetClassification::fromJsonObject(QJsonObject json) {

    m_allocation_isValid = ::OpenAPI::fromJsonValue(m_allocation, json[QString("allocation")]);
    m_allocation_isSet = !json[QString("allocation")].isNull() && m_allocation_isValid;

    m_classification_type_isValid = ::OpenAPI::fromJsonValue(m_classification_type, json[QString("classificationType")]);
    m_classification_type_isSet = !json[QString("classificationType")].isNull() && m_classification_type_isValid;

    m_classification_value_isValid = ::OpenAPI::fromJsonValue(m_classification_value, json[QString("classificationValue")]);
    m_classification_value_isSet = !json[QString("classificationValue")].isNull() && m_classification_value_isValid;
}

QString OAIAssetClassification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetClassification::asJsonObject() const {
    QJsonObject obj;
    if (m_allocation_isSet) {
        obj.insert(QString("allocation"), ::OpenAPI::toJsonValue(m_allocation));
    }
    if (m_classification_type_isSet) {
        obj.insert(QString("classificationType"), ::OpenAPI::toJsonValue(m_classification_type));
    }
    if (m_classification_value_isSet) {
        obj.insert(QString("classificationValue"), ::OpenAPI::toJsonValue(m_classification_value));
    }
    return obj;
}

double OAIAssetClassification::getAllocation() const {
    return m_allocation;
}
void OAIAssetClassification::setAllocation(const double &allocation) {
    m_allocation = allocation;
    m_allocation_isSet = true;
}

bool OAIAssetClassification::is_allocation_Set() const{
    return m_allocation_isSet;
}

bool OAIAssetClassification::is_allocation_Valid() const{
    return m_allocation_isValid;
}

QString OAIAssetClassification::getClassificationType() const {
    return m_classification_type;
}
void OAIAssetClassification::setClassificationType(const QString &classification_type) {
    m_classification_type = classification_type;
    m_classification_type_isSet = true;
}

bool OAIAssetClassification::is_classification_type_Set() const{
    return m_classification_type_isSet;
}

bool OAIAssetClassification::is_classification_type_Valid() const{
    return m_classification_type_isValid;
}

QString OAIAssetClassification::getClassificationValue() const {
    return m_classification_value;
}
void OAIAssetClassification::setClassificationValue(const QString &classification_value) {
    m_classification_value = classification_value;
    m_classification_value_isSet = true;
}

bool OAIAssetClassification::is_classification_value_Set() const{
    return m_classification_value_isSet;
}

bool OAIAssetClassification::is_classification_value_Valid() const{
    return m_classification_value_isValid;
}

bool OAIAssetClassification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classification_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classification_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetClassification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
