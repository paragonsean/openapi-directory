/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStockExchangeDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStockExchangeDetail::OAIStockExchangeDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStockExchangeDetail::OAIStockExchangeDetail() {
    this->initializeModel();
}

OAIStockExchangeDetail::~OAIStockExchangeDetail() {}

void OAIStockExchangeDetail::initializeModel() {

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_exchange_code_isSet = false;
    m_exchange_code_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;
}

void OAIStockExchangeDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStockExchangeDetail::fromJsonObject(QJsonObject json) {

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_exchange_code_isValid = ::OpenAPI::fromJsonValue(m_exchange_code, json[QString("exchangeCode")]);
    m_exchange_code_isSet = !json[QString("exchangeCode")].isNull() && m_exchange_code_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;
}

QString OAIStockExchangeDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStockExchangeDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_exchange_code_isSet) {
        obj.insert(QString("exchangeCode"), ::OpenAPI::toJsonValue(m_exchange_code));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    return obj;
}

QString OAIStockExchangeDetail::getCountryCode() const {
    return m_country_code;
}
void OAIStockExchangeDetail::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIStockExchangeDetail::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIStockExchangeDetail::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIStockExchangeDetail::getCurrencyCode() const {
    return m_currency_code;
}
void OAIStockExchangeDetail::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIStockExchangeDetail::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIStockExchangeDetail::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAIStockExchangeDetail::getExchangeCode() const {
    return m_exchange_code;
}
void OAIStockExchangeDetail::setExchangeCode(const QString &exchange_code) {
    m_exchange_code = exchange_code;
    m_exchange_code_isSet = true;
}

bool OAIStockExchangeDetail::is_exchange_code_Set() const{
    return m_exchange_code_isSet;
}

bool OAIStockExchangeDetail::is_exchange_code_Valid() const{
    return m_exchange_code_isValid;
}

QString OAIStockExchangeDetail::getSymbol() const {
    return m_symbol;
}
void OAIStockExchangeDetail::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAIStockExchangeDetail::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAIStockExchangeDetail::is_symbol_Valid() const{
    return m_symbol_isValid;
}

bool OAIStockExchangeDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStockExchangeDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
