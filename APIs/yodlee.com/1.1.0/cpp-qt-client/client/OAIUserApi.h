/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserApi_H
#define OAI_OAIUserApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIUpdateUserRequest.h"
#include "OAIUserAccessTokensResponse.h"
#include "OAIUserDetailResponse.h"
#include "OAIUserRequest.h"
#include "OAIUserResponse.h"
#include "OAIYodleeError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserApi : public QObject {
    Q_OBJECT

public:
    OAIUserApi(const int timeOut = 0);
    ~OAIUserApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  app_ids QString [required]
    */
    virtual void getAccessTokens(const QString &app_ids);


    virtual void getUser();

    /**
    * @param[in]  oai_user_request OAIUserRequest [required]
    */
    virtual void registerUser(const OAIUserRequest &oai_user_request);

    /**
    * @param[in]  issuer QString [required]
    * @param[in]  saml_response QString [required]
    * @param[in]  source QString [optional]
    */
    virtual void samlLogin(const QString &issuer, const QString &saml_response, const ::OpenAPI::OptionalParam<QString> &source = ::OpenAPI::OptionalParam<QString>());


    virtual void unregister();

    /**
    * @param[in]  oai_update_user_request OAIUpdateUserRequest [required]
    */
    virtual void updateUser(const OAIUpdateUserRequest &oai_update_user_request);


    virtual void userLogout();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAccessTokensCallback(OAIHttpRequestWorker *worker);
    void getUserCallback(OAIHttpRequestWorker *worker);
    void registerUserCallback(OAIHttpRequestWorker *worker);
    void samlLoginCallback(OAIHttpRequestWorker *worker);
    void unregisterCallback(OAIHttpRequestWorker *worker);
    void updateUserCallback(OAIHttpRequestWorker *worker);
    void userLogoutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAccessTokensSignal(OAIUserAccessTokensResponse summary);
    void getUserSignal(OAIUserDetailResponse summary);
    void registerUserSignal(OAIUserResponse summary);
    void samlLoginSignal(OAIUserResponse summary);
    void unregisterSignal();
    void updateUserSignal();
    void userLogoutSignal();


    void getAccessTokensSignalFull(OAIHttpRequestWorker *worker, OAIUserAccessTokensResponse summary);
    void getUserSignalFull(OAIHttpRequestWorker *worker, OAIUserDetailResponse summary);
    void registerUserSignalFull(OAIHttpRequestWorker *worker, OAIUserResponse summary);
    void samlLoginSignalFull(OAIHttpRequestWorker *worker, OAIUserResponse summary);
    void unregisterSignalFull(OAIHttpRequestWorker *worker);
    void updateUserSignalFull(OAIHttpRequestWorker *worker);
    void userLogoutSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getAccessTokensSignalError() instead")
    void getAccessTokensSignalE(OAIUserAccessTokensResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessTokensSignalError(OAIUserAccessTokensResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalError() instead")
    void getUserSignalE(OAIUserDetailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalError(OAIUserDetailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registerUserSignalError() instead")
    void registerUserSignalE(OAIUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registerUserSignalError(OAIUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use samlLoginSignalError() instead")
    void samlLoginSignalE(OAIUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void samlLoginSignalError(OAIUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unregisterSignalError() instead")
    void unregisterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unregisterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserSignalError() instead")
    void updateUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userLogoutSignalError() instead")
    void userLogoutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void userLogoutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAccessTokensSignalErrorFull() instead")
    void getAccessTokensSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessTokensSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalErrorFull() instead")
    void getUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registerUserSignalErrorFull() instead")
    void registerUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registerUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use samlLoginSignalErrorFull() instead")
    void samlLoginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void samlLoginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unregisterSignalErrorFull() instead")
    void unregisterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unregisterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserSignalErrorFull() instead")
    void updateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userLogoutSignalErrorFull() instead")
    void userLogoutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userLogoutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
