/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIYodleeError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIYodleeError::OAIYodleeError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIYodleeError::OAIYodleeError() {
    this->initializeModel();
}

OAIYodleeError::~OAIYodleeError() {}

void OAIYodleeError::initializeModel() {

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_reference_code_isSet = false;
    m_reference_code_isValid = false;
}

void OAIYodleeError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIYodleeError::fromJsonObject(QJsonObject json) {

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_reference_code_isValid = ::OpenAPI::fromJsonValue(m_reference_code, json[QString("referenceCode")]);
    m_reference_code_isSet = !json[QString("referenceCode")].isNull() && m_reference_code_isValid;
}

QString OAIYodleeError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIYodleeError::asJsonObject() const {
    QJsonObject obj;
    if (m_error_code_isSet) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_reference_code_isSet) {
        obj.insert(QString("referenceCode"), ::OpenAPI::toJsonValue(m_reference_code));
    }
    return obj;
}

QString OAIYodleeError::getErrorCode() const {
    return m_error_code;
}
void OAIYodleeError::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIYodleeError::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIYodleeError::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIYodleeError::getErrorMessage() const {
    return m_error_message;
}
void OAIYodleeError::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIYodleeError::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIYodleeError::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIYodleeError::getReferenceCode() const {
    return m_reference_code;
}
void OAIYodleeError::setReferenceCode(const QString &reference_code) {
    m_reference_code = reference_code;
    m_reference_code_isSet = true;
}

bool OAIYodleeError::is_reference_code_Set() const{
    return m_reference_code_isSet;
}

bool OAIYodleeError::is_reference_code_Valid() const{
    return m_reference_code_isValid;
}

bool OAIYodleeError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIYodleeError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
