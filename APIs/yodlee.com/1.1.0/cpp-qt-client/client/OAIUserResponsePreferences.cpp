/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserResponsePreferences.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserResponsePreferences::OAIUserResponsePreferences(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserResponsePreferences::OAIUserResponsePreferences() {
    this->initializeModel();
}

OAIUserResponsePreferences::~OAIUserResponsePreferences() {}

void OAIUserResponsePreferences::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_date_format_isSet = false;
    m_date_format_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAIUserResponsePreferences::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserResponsePreferences::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_date_format_isValid = ::OpenAPI::fromJsonValue(m_date_format, json[QString("dateFormat")]);
    m_date_format_isSet = !json[QString("dateFormat")].isNull() && m_date_format_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAIUserResponsePreferences::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserResponsePreferences::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_date_format_isSet) {
        obj.insert(QString("dateFormat"), ::OpenAPI::toJsonValue(m_date_format));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

QString OAIUserResponsePreferences::getCurrency() const {
    return m_currency;
}
void OAIUserResponsePreferences::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIUserResponsePreferences::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIUserResponsePreferences::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIUserResponsePreferences::getDateFormat() const {
    return m_date_format;
}
void OAIUserResponsePreferences::setDateFormat(const QString &date_format) {
    m_date_format = date_format;
    m_date_format_isSet = true;
}

bool OAIUserResponsePreferences::is_date_format_Set() const{
    return m_date_format_isSet;
}

bool OAIUserResponsePreferences::is_date_format_Valid() const{
    return m_date_format_isValid;
}

QString OAIUserResponsePreferences::getLocale() const {
    return m_locale;
}
void OAIUserResponsePreferences::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIUserResponsePreferences::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIUserResponsePreferences::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAIUserResponsePreferences::getTimeZone() const {
    return m_time_zone;
}
void OAIUserResponsePreferences::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIUserResponsePreferences::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIUserResponsePreferences::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAIUserResponsePreferences::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserResponsePreferences::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
