/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentDownload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentDownload::OAIDocumentDownload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentDownload::OAIDocumentDownload() {
    this->initializeModel();
}

OAIDocumentDownload::~OAIDocumentDownload() {}

void OAIDocumentDownload::initializeModel() {

    m_doc_content_isSet = false;
    m_doc_content_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIDocumentDownload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentDownload::fromJsonObject(QJsonObject json) {

    m_doc_content_isValid = ::OpenAPI::fromJsonValue(m_doc_content, json[QString("docContent")]);
    m_doc_content_isSet = !json[QString("docContent")].isNull() && m_doc_content_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIDocumentDownload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentDownload::asJsonObject() const {
    QJsonObject obj;
    if (m_doc_content_isSet) {
        obj.insert(QString("docContent"), ::OpenAPI::toJsonValue(m_doc_content));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAIDocumentDownload::getDocContent() const {
    return m_doc_content;
}
void OAIDocumentDownload::setDocContent(const QString &doc_content) {
    m_doc_content = doc_content;
    m_doc_content_isSet = true;
}

bool OAIDocumentDownload::is_doc_content_Set() const{
    return m_doc_content_isSet;
}

bool OAIDocumentDownload::is_doc_content_Valid() const{
    return m_doc_content_isValid;
}

QString OAIDocumentDownload::getId() const {
    return m_id;
}
void OAIDocumentDownload::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDocumentDownload::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDocumentDownload::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIDocumentDownload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_doc_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentDownload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
