/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerifyAccountRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerifyAccountRequest::OAIVerifyAccountRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerifyAccountRequest::OAIVerifyAccountRequest() {
    this->initializeModel();
}

OAIVerifyAccountRequest::~OAIVerifyAccountRequest() {}

void OAIVerifyAccountRequest::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_container_isSet = false;
    m_container_isValid = false;

    m_transaction_criteria_isSet = false;
    m_transaction_criteria_isValid = false;
}

void OAIVerifyAccountRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerifyAccountRequest::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("container")]);
    m_container_isSet = !json[QString("container")].isNull() && m_container_isValid;

    m_transaction_criteria_isValid = ::OpenAPI::fromJsonValue(m_transaction_criteria, json[QString("transactionCriteria")]);
    m_transaction_criteria_isSet = !json[QString("transactionCriteria")].isNull() && m_transaction_criteria_isValid;
}

QString OAIVerifyAccountRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerifyAccountRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_container_isSet) {
        obj.insert(QString("container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_transaction_criteria.size() > 0) {
        obj.insert(QString("transactionCriteria"), ::OpenAPI::toJsonValue(m_transaction_criteria));
    }
    return obj;
}

qint64 OAIVerifyAccountRequest::getAccountId() const {
    return m_account_id;
}
void OAIVerifyAccountRequest::setAccountId(const qint64 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIVerifyAccountRequest::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIVerifyAccountRequest::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIVerifyAccountRequest::getContainer() const {
    return m_container;
}
void OAIVerifyAccountRequest::setContainer(const QString &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAIVerifyAccountRequest::is_container_Set() const{
    return m_container_isSet;
}

bool OAIVerifyAccountRequest::is_container_Valid() const{
    return m_container_isValid;
}

QList<OAIVerifyTransactionCriteria> OAIVerifyAccountRequest::getTransactionCriteria() const {
    return m_transaction_criteria;
}
void OAIVerifyAccountRequest::setTransactionCriteria(const QList<OAIVerifyTransactionCriteria> &transaction_criteria) {
    m_transaction_criteria = transaction_criteria;
    m_transaction_criteria_isSet = true;
}

bool OAIVerifyAccountRequest::is_transaction_criteria_Set() const{
    return m_transaction_criteria_isSet;
}

bool OAIVerifyAccountRequest::is_transaction_criteria_Valid() const{
    return m_transaction_criteria_isValid;
}

bool OAIVerifyAccountRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_criteria.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerifyAccountRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_transaction_criteria_isValid && true;
}

} // namespace OpenAPI
