/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiKeyOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiKeyOutput::OAIApiKeyOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiKeyOutput::OAIApiKeyOutput() {
    this->initializeModel();
}

OAIApiKeyOutput::~OAIApiKeyOutput() {}

void OAIApiKeyOutput::initializeModel() {

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_expires_in_isSet = false;
    m_expires_in_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_public_key_isSet = false;
    m_public_key_isValid = false;
}

void OAIApiKeyOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiKeyOutput::fromJsonObject(QJsonObject json) {

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_expires_in_isValid = ::OpenAPI::fromJsonValue(m_expires_in, json[QString("expiresIn")]);
    m_expires_in_isSet = !json[QString("expiresIn")].isNull() && m_expires_in_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_public_key_isValid = ::OpenAPI::fromJsonValue(m_public_key, json[QString("publicKey")]);
    m_public_key_isSet = !json[QString("publicKey")].isNull() && m_public_key_isValid;
}

QString OAIApiKeyOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiKeyOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_expires_in_isSet) {
        obj.insert(QString("expiresIn"), ::OpenAPI::toJsonValue(m_expires_in));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_public_key_isSet) {
        obj.insert(QString("publicKey"), ::OpenAPI::toJsonValue(m_public_key));
    }
    return obj;
}

QString OAIApiKeyOutput::getCreatedDate() const {
    return m_created_date;
}
void OAIApiKeyOutput::setCreatedDate(const QString &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIApiKeyOutput::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIApiKeyOutput::is_created_date_Valid() const{
    return m_created_date_isValid;
}

qint64 OAIApiKeyOutput::getExpiresIn() const {
    return m_expires_in;
}
void OAIApiKeyOutput::setExpiresIn(const qint64 &expires_in) {
    m_expires_in = expires_in;
    m_expires_in_isSet = true;
}

bool OAIApiKeyOutput::is_expires_in_Set() const{
    return m_expires_in_isSet;
}

bool OAIApiKeyOutput::is_expires_in_Valid() const{
    return m_expires_in_isValid;
}

QString OAIApiKeyOutput::getKey() const {
    return m_key;
}
void OAIApiKeyOutput::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIApiKeyOutput::is_key_Set() const{
    return m_key_isSet;
}

bool OAIApiKeyOutput::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIApiKeyOutput::getPublicKey() const {
    return m_public_key;
}
void OAIApiKeyOutput::setPublicKey(const QString &public_key) {
    m_public_key = public_key;
    m_public_key_isSet = true;
}

bool OAIApiKeyOutput::is_public_key_Set() const{
    return m_public_key_isSet;
}

bool OAIApiKeyOutput::is_public_key_Valid() const{
    return m_public_key_isValid;
}

bool OAIApiKeyOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiKeyOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
