/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttribute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttribute::OAIAttribute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttribute::OAIAttribute() {
    this->initializeModel();
}

OAIAttribute::~OAIAttribute() {}

void OAIAttribute::initializeModel() {

    m_container_isSet = false;
    m_container_isValid = false;

    m_container_attributes_isSet = false;
    m_container_attributes_isValid = false;

    m_from_date_isSet = false;
    m_from_date_isValid = false;

    m_from_fin_year_isSet = false;
    m_from_fin_year_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_to_date_isSet = false;
    m_to_date_isValid = false;

    m_to_fin_year_isSet = false;
    m_to_fin_year_isValid = false;
}

void OAIAttribute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttribute::fromJsonObject(QJsonObject json) {

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("container")]);
    m_container_isSet = !json[QString("container")].isNull() && m_container_isValid;

    m_container_attributes_isValid = ::OpenAPI::fromJsonValue(m_container_attributes, json[QString("containerAttributes")]);
    m_container_attributes_isSet = !json[QString("containerAttributes")].isNull() && m_container_attributes_isValid;

    m_from_date_isValid = ::OpenAPI::fromJsonValue(m_from_date, json[QString("fromDate")]);
    m_from_date_isSet = !json[QString("fromDate")].isNull() && m_from_date_isValid;

    m_from_fin_year_isValid = ::OpenAPI::fromJsonValue(m_from_fin_year, json[QString("fromFinYear")]);
    m_from_fin_year_isSet = !json[QString("fromFinYear")].isNull() && m_from_fin_year_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_to_date_isValid = ::OpenAPI::fromJsonValue(m_to_date, json[QString("toDate")]);
    m_to_date_isSet = !json[QString("toDate")].isNull() && m_to_date_isValid;

    m_to_fin_year_isValid = ::OpenAPI::fromJsonValue(m_to_fin_year, json[QString("toFinYear")]);
    m_to_fin_year_isSet = !json[QString("toFinYear")].isNull() && m_to_fin_year_isValid;
}

QString OAIAttribute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttribute::asJsonObject() const {
    QJsonObject obj;
    if (m_container.size() > 0) {
        obj.insert(QString("container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_container_attributes.isSet()) {
        obj.insert(QString("containerAttributes"), ::OpenAPI::toJsonValue(m_container_attributes));
    }
    if (m_from_date_isSet) {
        obj.insert(QString("fromDate"), ::OpenAPI::toJsonValue(m_from_date));
    }
    if (m_from_fin_year_isSet) {
        obj.insert(QString("fromFinYear"), ::OpenAPI::toJsonValue(m_from_fin_year));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_to_date_isSet) {
        obj.insert(QString("toDate"), ::OpenAPI::toJsonValue(m_to_date));
    }
    if (m_to_fin_year_isSet) {
        obj.insert(QString("toFinYear"), ::OpenAPI::toJsonValue(m_to_fin_year));
    }
    return obj;
}

QList<QString> OAIAttribute::getContainer() const {
    return m_container;
}
void OAIAttribute::setContainer(const QList<QString> &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAIAttribute::is_container_Set() const{
    return m_container_isSet;
}

bool OAIAttribute::is_container_Valid() const{
    return m_container_isValid;
}

OAIContainerAttributes OAIAttribute::getContainerAttributes() const {
    return m_container_attributes;
}
void OAIAttribute::setContainerAttributes(const OAIContainerAttributes &container_attributes) {
    m_container_attributes = container_attributes;
    m_container_attributes_isSet = true;
}

bool OAIAttribute::is_container_attributes_Set() const{
    return m_container_attributes_isSet;
}

bool OAIAttribute::is_container_attributes_Valid() const{
    return m_container_attributes_isValid;
}

QString OAIAttribute::getFromDate() const {
    return m_from_date;
}
void OAIAttribute::setFromDate(const QString &from_date) {
    m_from_date = from_date;
    m_from_date_isSet = true;
}

bool OAIAttribute::is_from_date_Set() const{
    return m_from_date_isSet;
}

bool OAIAttribute::is_from_date_Valid() const{
    return m_from_date_isValid;
}

QString OAIAttribute::getFromFinYear() const {
    return m_from_fin_year;
}
void OAIAttribute::setFromFinYear(const QString &from_fin_year) {
    m_from_fin_year = from_fin_year;
    m_from_fin_year_isSet = true;
}

bool OAIAttribute::is_from_fin_year_Set() const{
    return m_from_fin_year_isSet;
}

bool OAIAttribute::is_from_fin_year_Valid() const{
    return m_from_fin_year_isValid;
}

QString OAIAttribute::getName() const {
    return m_name;
}
void OAIAttribute::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAttribute::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAttribute::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAttribute::getToDate() const {
    return m_to_date;
}
void OAIAttribute::setToDate(const QString &to_date) {
    m_to_date = to_date;
    m_to_date_isSet = true;
}

bool OAIAttribute::is_to_date_Set() const{
    return m_to_date_isSet;
}

bool OAIAttribute::is_to_date_Valid() const{
    return m_to_date_isValid;
}

QString OAIAttribute::getToFinYear() const {
    return m_to_fin_year;
}
void OAIAttribute::setToFinYear(const QString &to_fin_year) {
    m_to_fin_year = to_fin_year;
    m_to_fin_year_isSet = true;
}

bool OAIAttribute::is_to_fin_year_Set() const{
    return m_to_fin_year_isSet;
}

bool OAIAttribute::is_to_fin_year_Valid() const{
    return m_to_fin_year_isValid;
}

bool OAIAttribute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_fin_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_fin_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttribute::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
