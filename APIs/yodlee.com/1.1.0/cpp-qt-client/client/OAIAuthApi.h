/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAuthApi_H
#define OAI_OAIAuthApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiKeyRequest.h"
#include "OAIApiKeyResponse.h"
#include "OAIClientCredentialTokenResponse.h"
#include "OAIYodleeError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAuthApi : public QObject {
    Q_OBJECT

public:
    OAIAuthApi(const int timeOut = 0);
    ~OAIAuthApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  key QString [required]
    */
    virtual void deleteApiKey(const QString &key);


    virtual void deleteToken();


    virtual void generateAccessToken();

    /**
    * @param[in]  oai_api_key_request OAIApiKeyRequest [required]
    */
    virtual void generateApiKey(const OAIApiKeyRequest &oai_api_key_request);


    virtual void getApiKeys();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteApiKeyCallback(OAIHttpRequestWorker *worker);
    void deleteTokenCallback(OAIHttpRequestWorker *worker);
    void generateAccessTokenCallback(OAIHttpRequestWorker *worker);
    void generateApiKeyCallback(OAIHttpRequestWorker *worker);
    void getApiKeysCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteApiKeySignal();
    void deleteTokenSignal();
    void generateAccessTokenSignal(OAIClientCredentialTokenResponse summary);
    void generateApiKeySignal(OAIApiKeyResponse summary);
    void getApiKeysSignal(OAIApiKeyResponse summary);


    void deleteApiKeySignalFull(OAIHttpRequestWorker *worker);
    void deleteTokenSignalFull(OAIHttpRequestWorker *worker);
    void generateAccessTokenSignalFull(OAIHttpRequestWorker *worker, OAIClientCredentialTokenResponse summary);
    void generateApiKeySignalFull(OAIHttpRequestWorker *worker, OAIApiKeyResponse summary);
    void getApiKeysSignalFull(OAIHttpRequestWorker *worker, OAIApiKeyResponse summary);

    Q_DECL_DEPRECATED_X("Use deleteApiKeySignalError() instead")
    void deleteApiKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApiKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTokenSignalError() instead")
    void deleteTokenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTokenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateAccessTokenSignalError() instead")
    void generateAccessTokenSignalE(OAIClientCredentialTokenResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateAccessTokenSignalError(OAIClientCredentialTokenResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateApiKeySignalError() instead")
    void generateApiKeySignalE(OAIApiKeyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateApiKeySignalError(OAIApiKeyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApiKeysSignalError() instead")
    void getApiKeysSignalE(OAIApiKeyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApiKeysSignalError(OAIApiKeyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteApiKeySignalErrorFull() instead")
    void deleteApiKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApiKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTokenSignalErrorFull() instead")
    void deleteTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateAccessTokenSignalErrorFull() instead")
    void generateAccessTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateAccessTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateApiKeySignalErrorFull() instead")
    void generateApiKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateApiKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApiKeysSignalErrorFull() instead")
    void getApiKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApiKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
