/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateTransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateTransaction::OAIUpdateTransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateTransaction::OAIUpdateTransaction() {
    this->initializeModel();
}

OAIUpdateTransaction::~OAIUpdateTransaction() {}

void OAIUpdateTransaction::initializeModel() {

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_category_source_isSet = false;
    m_category_source_isValid = false;

    m_container_isSet = false;
    m_container_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_memo_isSet = false;
    m_memo_isValid = false;
}

void OAIUpdateTransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateTransaction::fromJsonObject(QJsonObject json) {

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("categoryId")]);
    m_category_id_isSet = !json[QString("categoryId")].isNull() && m_category_id_isValid;

    m_category_source_isValid = ::OpenAPI::fromJsonValue(m_category_source, json[QString("categorySource")]);
    m_category_source_isSet = !json[QString("categorySource")].isNull() && m_category_source_isValid;

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("container")]);
    m_container_isSet = !json[QString("container")].isNull() && m_container_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_memo_isValid = ::OpenAPI::fromJsonValue(m_memo, json[QString("memo")]);
    m_memo_isSet = !json[QString("memo")].isNull() && m_memo_isValid;
}

QString OAIUpdateTransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateTransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_category_id_isSet) {
        obj.insert(QString("categoryId"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_category_source_isSet) {
        obj.insert(QString("categorySource"), ::OpenAPI::toJsonValue(m_category_source));
    }
    if (m_container_isSet) {
        obj.insert(QString("container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_memo_isSet) {
        obj.insert(QString("memo"), ::OpenAPI::toJsonValue(m_memo));
    }
    return obj;
}

qint64 OAIUpdateTransaction::getCategoryId() const {
    return m_category_id;
}
void OAIUpdateTransaction::setCategoryId(const qint64 &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAIUpdateTransaction::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIUpdateTransaction::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QString OAIUpdateTransaction::getCategorySource() const {
    return m_category_source;
}
void OAIUpdateTransaction::setCategorySource(const QString &category_source) {
    m_category_source = category_source;
    m_category_source_isSet = true;
}

bool OAIUpdateTransaction::is_category_source_Set() const{
    return m_category_source_isSet;
}

bool OAIUpdateTransaction::is_category_source_Valid() const{
    return m_category_source_isValid;
}

QString OAIUpdateTransaction::getContainer() const {
    return m_container;
}
void OAIUpdateTransaction::setContainer(const QString &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAIUpdateTransaction::is_container_Set() const{
    return m_container_isSet;
}

bool OAIUpdateTransaction::is_container_Valid() const{
    return m_container_isValid;
}

OAIDescription OAIUpdateTransaction::getDescription() const {
    return m_description;
}
void OAIUpdateTransaction::setDescription(const OAIDescription &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateTransaction::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateTransaction::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUpdateTransaction::getMemo() const {
    return m_memo;
}
void OAIUpdateTransaction::setMemo(const QString &memo) {
    m_memo = memo;
    m_memo_isSet = true;
}

bool OAIUpdateTransaction::is_memo_Set() const{
    return m_memo_isSet;
}

bool OAIUpdateTransaction::is_memo_Valid() const{
    return m_memo_isValid;
}

bool OAIUpdateTransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateTransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_category_id_isValid && m_category_source_isValid && m_container_isValid && true;
}

} // namespace OpenAPI
