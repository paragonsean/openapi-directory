/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICobrandPublicKeyResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICobrandPublicKeyResponse::OAICobrandPublicKeyResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICobrandPublicKeyResponse::OAICobrandPublicKeyResponse() {
    this->initializeModel();
}

OAICobrandPublicKeyResponse::~OAICobrandPublicKeyResponse() {}

void OAICobrandPublicKeyResponse::initializeModel() {

    m_key_alias_isSet = false;
    m_key_alias_isValid = false;

    m_key_as_pem_string_isSet = false;
    m_key_as_pem_string_isValid = false;
}

void OAICobrandPublicKeyResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICobrandPublicKeyResponse::fromJsonObject(QJsonObject json) {

    m_key_alias_isValid = ::OpenAPI::fromJsonValue(m_key_alias, json[QString("keyAlias")]);
    m_key_alias_isSet = !json[QString("keyAlias")].isNull() && m_key_alias_isValid;

    m_key_as_pem_string_isValid = ::OpenAPI::fromJsonValue(m_key_as_pem_string, json[QString("keyAsPemString")]);
    m_key_as_pem_string_isSet = !json[QString("keyAsPemString")].isNull() && m_key_as_pem_string_isValid;
}

QString OAICobrandPublicKeyResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICobrandPublicKeyResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_key_alias_isSet) {
        obj.insert(QString("keyAlias"), ::OpenAPI::toJsonValue(m_key_alias));
    }
    if (m_key_as_pem_string_isSet) {
        obj.insert(QString("keyAsPemString"), ::OpenAPI::toJsonValue(m_key_as_pem_string));
    }
    return obj;
}

QString OAICobrandPublicKeyResponse::getKeyAlias() const {
    return m_key_alias;
}
void OAICobrandPublicKeyResponse::setKeyAlias(const QString &key_alias) {
    m_key_alias = key_alias;
    m_key_alias_isSet = true;
}

bool OAICobrandPublicKeyResponse::is_key_alias_Set() const{
    return m_key_alias_isSet;
}

bool OAICobrandPublicKeyResponse::is_key_alias_Valid() const{
    return m_key_alias_isValid;
}

QString OAICobrandPublicKeyResponse::getKeyAsPemString() const {
    return m_key_as_pem_string;
}
void OAICobrandPublicKeyResponse::setKeyAsPemString(const QString &key_as_pem_string) {
    m_key_as_pem_string = key_as_pem_string;
    m_key_as_pem_string_isSet = true;
}

bool OAICobrandPublicKeyResponse::is_key_as_pem_string_Set() const{
    return m_key_as_pem_string_isSet;
}

bool OAICobrandPublicKeyResponse::is_key_as_pem_string_Valid() const{
    return m_key_as_pem_string_isValid;
}

bool OAICobrandPublicKeyResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_as_pem_string_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICobrandPublicKeyResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
