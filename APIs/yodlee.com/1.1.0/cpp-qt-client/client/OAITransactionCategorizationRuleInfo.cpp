/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionCategorizationRuleInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionCategorizationRuleInfo::OAITransactionCategorizationRuleInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionCategorizationRuleInfo::OAITransactionCategorizationRuleInfo() {
    this->initializeModel();
}

OAITransactionCategorizationRuleInfo::~OAITransactionCategorizationRuleInfo() {}

void OAITransactionCategorizationRuleInfo::initializeModel() {

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_rule_clause_isSet = false;
    m_rule_clause_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAITransactionCategorizationRuleInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactionCategorizationRuleInfo::fromJsonObject(QJsonObject json) {

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("categoryId")]);
    m_category_id_isSet = !json[QString("categoryId")].isNull() && m_category_id_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_rule_clause_isValid = ::OpenAPI::fromJsonValue(m_rule_clause, json[QString("ruleClause")]);
    m_rule_clause_isSet = !json[QString("ruleClause")].isNull() && m_rule_clause_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAITransactionCategorizationRuleInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactionCategorizationRuleInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_category_id_isSet) {
        obj.insert(QString("categoryId"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_rule_clause.size() > 0) {
        obj.insert(QString("ruleClause"), ::OpenAPI::toJsonValue(m_rule_clause));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

qint32 OAITransactionCategorizationRuleInfo::getCategoryId() const {
    return m_category_id;
}
void OAITransactionCategorizationRuleInfo::setCategoryId(const qint32 &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAITransactionCategorizationRuleInfo::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAITransactionCategorizationRuleInfo::is_category_id_Valid() const{
    return m_category_id_isValid;
}

qint32 OAITransactionCategorizationRuleInfo::getPriority() const {
    return m_priority;
}
void OAITransactionCategorizationRuleInfo::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAITransactionCategorizationRuleInfo::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAITransactionCategorizationRuleInfo::is_priority_Valid() const{
    return m_priority_isValid;
}

QList<OAIFieldOperation> OAITransactionCategorizationRuleInfo::getRuleClause() const {
    return m_rule_clause;
}
void OAITransactionCategorizationRuleInfo::setRuleClause(const QList<OAIFieldOperation> &rule_clause) {
    m_rule_clause = rule_clause;
    m_rule_clause_isSet = true;
}

bool OAITransactionCategorizationRuleInfo::is_rule_clause_Set() const{
    return m_rule_clause_isSet;
}

bool OAITransactionCategorizationRuleInfo::is_rule_clause_Valid() const{
    return m_rule_clause_isValid;
}

QString OAITransactionCategorizationRuleInfo::getSource() const {
    return m_source;
}
void OAITransactionCategorizationRuleInfo::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAITransactionCategorizationRuleInfo::is_source_Set() const{
    return m_source_isSet;
}

bool OAITransactionCategorizationRuleInfo::is_source_Valid() const{
    return m_source_isValid;
}

bool OAITransactionCategorizationRuleInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_clause.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactionCategorizationRuleInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_category_id_isValid && m_rule_clause_isValid && true;
}

} // namespace OpenAPI
