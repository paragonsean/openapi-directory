/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountHolder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountHolder::OAIAccountHolder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountHolder::OAIAccountHolder() {
    this->initializeModel();
}

OAIAccountHolder::~OAIAccountHolder() {}

void OAIAccountHolder::initializeModel() {

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ownership_isSet = false;
    m_ownership_isValid = false;
}

void OAIAccountHolder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountHolder::fromJsonObject(QJsonObject json) {

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_ownership_isValid = ::OpenAPI::fromJsonValue(m_ownership, json[QString("ownership")]);
    m_ownership_isSet = !json[QString("ownership")].isNull() && m_ownership_isValid;
}

QString OAIAccountHolder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountHolder::asJsonObject() const {
    QJsonObject obj;
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_identifier.size() > 0) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ownership_isSet) {
        obj.insert(QString("ownership"), ::OpenAPI::toJsonValue(m_ownership));
    }
    return obj;
}

QString OAIAccountHolder::getGender() const {
    return m_gender;
}
void OAIAccountHolder::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIAccountHolder::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIAccountHolder::is_gender_Valid() const{
    return m_gender_isValid;
}

QList<OAIIdentifier> OAIAccountHolder::getIdentifier() const {
    return m_identifier;
}
void OAIAccountHolder::setIdentifier(const QList<OAIIdentifier> &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIAccountHolder::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIAccountHolder::is_identifier_Valid() const{
    return m_identifier_isValid;
}

OAIName OAIAccountHolder::getName() const {
    return m_name;
}
void OAIAccountHolder::setName(const OAIName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccountHolder::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccountHolder::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAccountHolder::getOwnership() const {
    return m_ownership;
}
void OAIAccountHolder::setOwnership(const QString &ownership) {
    m_ownership = ownership;
    m_ownership_isSet = true;
}

bool OAIAccountHolder::is_ownership_Set() const{
    return m_ownership_isSet;
}

bool OAIAccountHolder::is_ownership_Valid() const{
    return m_ownership_isValid;
}

bool OAIAccountHolder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ownership_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountHolder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
