/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataExtractsUserData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataExtractsUserData::OAIDataExtractsUserData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataExtractsUserData::OAIDataExtractsUserData() {
    this->initializeModel();
}

OAIDataExtractsUserData::~OAIDataExtractsUserData() {}

void OAIDataExtractsUserData::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_holding_isSet = false;
    m_holding_isValid = false;

    m_provider_account_isSet = false;
    m_provider_account_isValid = false;

    m_total_transactions_count_isSet = false;
    m_total_transactions_count_isValid = false;

    m_transaction_isSet = false;
    m_transaction_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIDataExtractsUserData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataExtractsUserData::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_holding_isValid = ::OpenAPI::fromJsonValue(m_holding, json[QString("holding")]);
    m_holding_isSet = !json[QString("holding")].isNull() && m_holding_isValid;

    m_provider_account_isValid = ::OpenAPI::fromJsonValue(m_provider_account, json[QString("providerAccount")]);
    m_provider_account_isSet = !json[QString("providerAccount")].isNull() && m_provider_account_isValid;

    m_total_transactions_count_isValid = ::OpenAPI::fromJsonValue(m_total_transactions_count, json[QString("totalTransactionsCount")]);
    m_total_transactions_count_isSet = !json[QString("totalTransactionsCount")].isNull() && m_total_transactions_count_isValid;

    m_transaction_isValid = ::OpenAPI::fromJsonValue(m_transaction, json[QString("transaction")]);
    m_transaction_isSet = !json[QString("transaction")].isNull() && m_transaction_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIDataExtractsUserData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataExtractsUserData::asJsonObject() const {
    QJsonObject obj;
    if (m_account.size() > 0) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_holding.size() > 0) {
        obj.insert(QString("holding"), ::OpenAPI::toJsonValue(m_holding));
    }
    if (m_provider_account.size() > 0) {
        obj.insert(QString("providerAccount"), ::OpenAPI::toJsonValue(m_provider_account));
    }
    if (m_total_transactions_count_isSet) {
        obj.insert(QString("totalTransactionsCount"), ::OpenAPI::toJsonValue(m_total_transactions_count));
    }
    if (m_transaction.size() > 0) {
        obj.insert(QString("transaction"), ::OpenAPI::toJsonValue(m_transaction));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QList<OAIDataExtractsAccount> OAIDataExtractsUserData::getAccount() const {
    return m_account;
}
void OAIDataExtractsUserData::setAccount(const QList<OAIDataExtractsAccount> &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIDataExtractsUserData::is_account_Set() const{
    return m_account_isSet;
}

bool OAIDataExtractsUserData::is_account_Valid() const{
    return m_account_isValid;
}

QList<OAIDataExtractsHolding> OAIDataExtractsUserData::getHolding() const {
    return m_holding;
}
void OAIDataExtractsUserData::setHolding(const QList<OAIDataExtractsHolding> &holding) {
    m_holding = holding;
    m_holding_isSet = true;
}

bool OAIDataExtractsUserData::is_holding_Set() const{
    return m_holding_isSet;
}

bool OAIDataExtractsUserData::is_holding_Valid() const{
    return m_holding_isValid;
}

QList<OAIDataExtractsProviderAccount> OAIDataExtractsUserData::getProviderAccount() const {
    return m_provider_account;
}
void OAIDataExtractsUserData::setProviderAccount(const QList<OAIDataExtractsProviderAccount> &provider_account) {
    m_provider_account = provider_account;
    m_provider_account_isSet = true;
}

bool OAIDataExtractsUserData::is_provider_account_Set() const{
    return m_provider_account_isSet;
}

bool OAIDataExtractsUserData::is_provider_account_Valid() const{
    return m_provider_account_isValid;
}

qint64 OAIDataExtractsUserData::getTotalTransactionsCount() const {
    return m_total_transactions_count;
}
void OAIDataExtractsUserData::setTotalTransactionsCount(const qint64 &total_transactions_count) {
    m_total_transactions_count = total_transactions_count;
    m_total_transactions_count_isSet = true;
}

bool OAIDataExtractsUserData::is_total_transactions_count_Set() const{
    return m_total_transactions_count_isSet;
}

bool OAIDataExtractsUserData::is_total_transactions_count_Valid() const{
    return m_total_transactions_count_isValid;
}

QList<OAIDataExtractsTransaction> OAIDataExtractsUserData::getTransaction() const {
    return m_transaction;
}
void OAIDataExtractsUserData::setTransaction(const QList<OAIDataExtractsTransaction> &transaction) {
    m_transaction = transaction;
    m_transaction_isSet = true;
}

bool OAIDataExtractsUserData::is_transaction_Set() const{
    return m_transaction_isSet;
}

bool OAIDataExtractsUserData::is_transaction_Valid() const{
    return m_transaction_isValid;
}

OAIDataExtractsUser OAIDataExtractsUserData::getUser() const {
    return m_user;
}
void OAIDataExtractsUserData::setUser(const OAIDataExtractsUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIDataExtractsUserData::is_user_Set() const{
    return m_user_isSet;
}

bool OAIDataExtractsUserData::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIDataExtractsUserData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_holding.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_account.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_transactions_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataExtractsUserData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
