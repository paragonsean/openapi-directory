/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHoldingAssetClassificationListResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHoldingAssetClassificationListResponse::OAIHoldingAssetClassificationListResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHoldingAssetClassificationListResponse::OAIHoldingAssetClassificationListResponse() {
    this->initializeModel();
}

OAIHoldingAssetClassificationListResponse::~OAIHoldingAssetClassificationListResponse() {}

void OAIHoldingAssetClassificationListResponse::initializeModel() {

    m_asset_classification_list_isSet = false;
    m_asset_classification_list_isValid = false;
}

void OAIHoldingAssetClassificationListResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHoldingAssetClassificationListResponse::fromJsonObject(QJsonObject json) {

    m_asset_classification_list_isValid = ::OpenAPI::fromJsonValue(m_asset_classification_list, json[QString("assetClassificationList")]);
    m_asset_classification_list_isSet = !json[QString("assetClassificationList")].isNull() && m_asset_classification_list_isValid;
}

QString OAIHoldingAssetClassificationListResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHoldingAssetClassificationListResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_classification_list.size() > 0) {
        obj.insert(QString("assetClassificationList"), ::OpenAPI::toJsonValue(m_asset_classification_list));
    }
    return obj;
}

QList<OAIAssetClassificationList> OAIHoldingAssetClassificationListResponse::getAssetClassificationList() const {
    return m_asset_classification_list;
}
void OAIHoldingAssetClassificationListResponse::setAssetClassificationList(const QList<OAIAssetClassificationList> &asset_classification_list) {
    m_asset_classification_list = asset_classification_list;
    m_asset_classification_list_isSet = true;
}

bool OAIHoldingAssetClassificationListResponse::is_asset_classification_list_Set() const{
    return m_asset_classification_list_isSet;
}

bool OAIHoldingAssetClassificationListResponse::is_asset_classification_list_Valid() const{
    return m_asset_classification_list_isValid;
}

bool OAIHoldingAssetClassificationListResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_classification_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHoldingAssetClassificationListResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
