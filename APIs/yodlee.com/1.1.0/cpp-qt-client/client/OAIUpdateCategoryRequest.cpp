/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateCategoryRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateCategoryRequest::OAIUpdateCategoryRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateCategoryRequest::OAIUpdateCategoryRequest() {
    this->initializeModel();
}

OAIUpdateCategoryRequest::~OAIUpdateCategoryRequest() {}

void OAIUpdateCategoryRequest::initializeModel() {

    m_category_name_isSet = false;
    m_category_name_isValid = false;

    m_high_level_category_name_isSet = false;
    m_high_level_category_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIUpdateCategoryRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateCategoryRequest::fromJsonObject(QJsonObject json) {

    m_category_name_isValid = ::OpenAPI::fromJsonValue(m_category_name, json[QString("categoryName")]);
    m_category_name_isSet = !json[QString("categoryName")].isNull() && m_category_name_isValid;

    m_high_level_category_name_isValid = ::OpenAPI::fromJsonValue(m_high_level_category_name, json[QString("highLevelCategoryName")]);
    m_high_level_category_name_isSet = !json[QString("highLevelCategoryName")].isNull() && m_high_level_category_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIUpdateCategoryRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateCategoryRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_category_name_isSet) {
        obj.insert(QString("categoryName"), ::OpenAPI::toJsonValue(m_category_name));
    }
    if (m_high_level_category_name_isSet) {
        obj.insert(QString("highLevelCategoryName"), ::OpenAPI::toJsonValue(m_high_level_category_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QString OAIUpdateCategoryRequest::getCategoryName() const {
    return m_category_name;
}
void OAIUpdateCategoryRequest::setCategoryName(const QString &category_name) {
    m_category_name = category_name;
    m_category_name_isSet = true;
}

bool OAIUpdateCategoryRequest::is_category_name_Set() const{
    return m_category_name_isSet;
}

bool OAIUpdateCategoryRequest::is_category_name_Valid() const{
    return m_category_name_isValid;
}

QString OAIUpdateCategoryRequest::getHighLevelCategoryName() const {
    return m_high_level_category_name;
}
void OAIUpdateCategoryRequest::setHighLevelCategoryName(const QString &high_level_category_name) {
    m_high_level_category_name = high_level_category_name;
    m_high_level_category_name_isSet = true;
}

bool OAIUpdateCategoryRequest::is_high_level_category_name_Set() const{
    return m_high_level_category_name_isSet;
}

bool OAIUpdateCategoryRequest::is_high_level_category_name_Valid() const{
    return m_high_level_category_name_isValid;
}

qint64 OAIUpdateCategoryRequest::getId() const {
    return m_id;
}
void OAIUpdateCategoryRequest::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdateCategoryRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdateCategoryRequest::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUpdateCategoryRequest::getSource() const {
    return m_source;
}
void OAIUpdateCategoryRequest::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIUpdateCategoryRequest::is_source_Set() const{
    return m_source_isSet;
}

bool OAIUpdateCategoryRequest::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIUpdateCategoryRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_level_category_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateCategoryRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_source_isValid && true;
}

} // namespace OpenAPI
