/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerification::OAIVerification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerification::OAIVerification() {
    this->initializeModel();
}

OAIVerification::~OAIVerification() {}

void OAIVerification::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_provider_account_id_isSet = false;
    m_provider_account_id_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_verification_date_isSet = false;
    m_verification_date_isValid = false;

    m_verification_id_isSet = false;
    m_verification_id_isValid = false;

    m_verification_status_isSet = false;
    m_verification_status_isValid = false;

    m_verification_type_isSet = false;
    m_verification_type_isValid = false;
}

void OAIVerification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerification::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_provider_account_id_isValid = ::OpenAPI::fromJsonValue(m_provider_account_id, json[QString("providerAccountId")]);
    m_provider_account_id_isSet = !json[QString("providerAccountId")].isNull() && m_provider_account_id_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_verification_date_isValid = ::OpenAPI::fromJsonValue(m_verification_date, json[QString("verificationDate")]);
    m_verification_date_isSet = !json[QString("verificationDate")].isNull() && m_verification_date_isValid;

    m_verification_id_isValid = ::OpenAPI::fromJsonValue(m_verification_id, json[QString("verificationId")]);
    m_verification_id_isSet = !json[QString("verificationId")].isNull() && m_verification_id_isValid;

    m_verification_status_isValid = ::OpenAPI::fromJsonValue(m_verification_status, json[QString("verificationStatus")]);
    m_verification_status_isSet = !json[QString("verificationStatus")].isNull() && m_verification_status_isValid;

    m_verification_type_isValid = ::OpenAPI::fromJsonValue(m_verification_type, json[QString("verificationType")]);
    m_verification_type_isSet = !json[QString("verificationType")].isNull() && m_verification_type_isValid;
}

QString OAIVerification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerification::asJsonObject() const {
    QJsonObject obj;
    if (m_account.isSet()) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_provider_account_id_isSet) {
        obj.insert(QString("providerAccountId"), ::OpenAPI::toJsonValue(m_provider_account_id));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_verification_date_isSet) {
        obj.insert(QString("verificationDate"), ::OpenAPI::toJsonValue(m_verification_date));
    }
    if (m_verification_id_isSet) {
        obj.insert(QString("verificationId"), ::OpenAPI::toJsonValue(m_verification_id));
    }
    if (m_verification_status_isSet) {
        obj.insert(QString("verificationStatus"), ::OpenAPI::toJsonValue(m_verification_status));
    }
    if (m_verification_type_isSet) {
        obj.insert(QString("verificationType"), ::OpenAPI::toJsonValue(m_verification_type));
    }
    return obj;
}

OAIVerificationAccount OAIVerification::getAccount() const {
    return m_account;
}
void OAIVerification::setAccount(const OAIVerificationAccount &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIVerification::is_account_Set() const{
    return m_account_isSet;
}

bool OAIVerification::is_account_Valid() const{
    return m_account_isValid;
}

qint64 OAIVerification::getAccountId() const {
    return m_account_id;
}
void OAIVerification::setAccountId(const qint64 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIVerification::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIVerification::is_account_id_Valid() const{
    return m_account_id_isValid;
}

qint64 OAIVerification::getProviderAccountId() const {
    return m_provider_account_id;
}
void OAIVerification::setProviderAccountId(const qint64 &provider_account_id) {
    m_provider_account_id = provider_account_id;
    m_provider_account_id_isSet = true;
}

bool OAIVerification::is_provider_account_id_Set() const{
    return m_provider_account_id_isSet;
}

bool OAIVerification::is_provider_account_id_Valid() const{
    return m_provider_account_id_isValid;
}

QString OAIVerification::getReason() const {
    return m_reason;
}
void OAIVerification::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIVerification::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIVerification::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIVerification::getVerificationDate() const {
    return m_verification_date;
}
void OAIVerification::setVerificationDate(const QString &verification_date) {
    m_verification_date = verification_date;
    m_verification_date_isSet = true;
}

bool OAIVerification::is_verification_date_Set() const{
    return m_verification_date_isSet;
}

bool OAIVerification::is_verification_date_Valid() const{
    return m_verification_date_isValid;
}

qint64 OAIVerification::getVerificationId() const {
    return m_verification_id;
}
void OAIVerification::setVerificationId(const qint64 &verification_id) {
    m_verification_id = verification_id;
    m_verification_id_isSet = true;
}

bool OAIVerification::is_verification_id_Set() const{
    return m_verification_id_isSet;
}

bool OAIVerification::is_verification_id_Valid() const{
    return m_verification_id_isValid;
}

QString OAIVerification::getVerificationStatus() const {
    return m_verification_status;
}
void OAIVerification::setVerificationStatus(const QString &verification_status) {
    m_verification_status = verification_status;
    m_verification_status_isSet = true;
}

bool OAIVerification::is_verification_status_Set() const{
    return m_verification_status_isSet;
}

bool OAIVerification::is_verification_status_Valid() const{
    return m_verification_status_isValid;
}

QString OAIVerification::getVerificationType() const {
    return m_verification_type;
}
void OAIVerification::setVerificationType(const QString &verification_type) {
    m_verification_type = verification_type;
    m_verification_type_isSet = true;
}

bool OAIVerification::is_verification_type_Set() const{
    return m_verification_type_isSet;
}

bool OAIVerification::is_verification_type_Valid() const{
    return m_verification_type_isValid;
}

bool OAIVerification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
