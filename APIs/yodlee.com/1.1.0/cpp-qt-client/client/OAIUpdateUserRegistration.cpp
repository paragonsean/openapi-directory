/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateUserRegistration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateUserRegistration::OAIUpdateUserRegistration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateUserRegistration::OAIUpdateUserRegistration() {
    this->initializeModel();
}

OAIUpdateUserRegistration::~OAIUpdateUserRegistration() {}

void OAIUpdateUserRegistration::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_preferences_isSet = false;
    m_preferences_isValid = false;

    m_segment_name_isSet = false;
    m_segment_name_isValid = false;
}

void OAIUpdateUserRegistration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateUserRegistration::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_preferences_isValid = ::OpenAPI::fromJsonValue(m_preferences, json[QString("preferences")]);
    m_preferences_isSet = !json[QString("preferences")].isNull() && m_preferences_isValid;

    m_segment_name_isValid = ::OpenAPI::fromJsonValue(m_segment_name, json[QString("segmentName")]);
    m_segment_name_isSet = !json[QString("segmentName")].isNull() && m_segment_name_isValid;
}

QString OAIUpdateUserRegistration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateUserRegistration::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_preferences.isSet()) {
        obj.insert(QString("preferences"), ::OpenAPI::toJsonValue(m_preferences));
    }
    if (m_segment_name_isSet) {
        obj.insert(QString("segmentName"), ::OpenAPI::toJsonValue(m_segment_name));
    }
    return obj;
}

OAIUserAddress OAIUpdateUserRegistration::getAddress() const {
    return m_address;
}
void OAIUpdateUserRegistration::setAddress(const OAIUserAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIUpdateUserRegistration::is_address_Set() const{
    return m_address_isSet;
}

bool OAIUpdateUserRegistration::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIUpdateUserRegistration::getEmail() const {
    return m_email;
}
void OAIUpdateUserRegistration::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUpdateUserRegistration::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUpdateUserRegistration::is_email_Valid() const{
    return m_email_isValid;
}

OAIName OAIUpdateUserRegistration::getName() const {
    return m_name;
}
void OAIUpdateUserRegistration::setName(const OAIName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateUserRegistration::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateUserRegistration::is_name_Valid() const{
    return m_name_isValid;
}

OAIUserRequestPreferences OAIUpdateUserRegistration::getPreferences() const {
    return m_preferences;
}
void OAIUpdateUserRegistration::setPreferences(const OAIUserRequestPreferences &preferences) {
    m_preferences = preferences;
    m_preferences_isSet = true;
}

bool OAIUpdateUserRegistration::is_preferences_Set() const{
    return m_preferences_isSet;
}

bool OAIUpdateUserRegistration::is_preferences_Valid() const{
    return m_preferences_isValid;
}

QString OAIUpdateUserRegistration::getSegmentName() const {
    return m_segment_name;
}
void OAIUpdateUserRegistration::setSegmentName(const QString &segment_name) {
    m_segment_name = segment_name;
    m_segment_name_isSet = true;
}

bool OAIUpdateUserRegistration::is_segment_name_Set() const{
    return m_segment_name_isSet;
}

bool OAIUpdateUserRegistration::is_segment_name_Valid() const{
    return m_segment_name_isValid;
}

bool OAIUpdateUserRegistration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateUserRegistration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
