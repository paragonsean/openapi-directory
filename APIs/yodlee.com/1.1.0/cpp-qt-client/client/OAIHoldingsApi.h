/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIHoldingsApi_H
#define OAI_OAIHoldingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHoldingAssetClassificationListResponse.h"
#include "OAIHoldingResponse.h"
#include "OAIHoldingSecuritiesResponse.h"
#include "OAIHoldingTypeListResponse.h"
#include "OAIYodleeError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIHoldingsApi : public QObject {
    Q_OBJECT

public:
    OAIHoldingsApi(const int timeOut = 0);
    ~OAIHoldingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void getAssetClassificationList();


    virtual void getHoldingTypeList();

    /**
    * @param[in]  account_id QString [optional]
    * @param[in]  asset_classification_classification_type QString [optional]
    * @param[in]  classification_value QString [optional]
    * @param[in]  include QString [optional]
    * @param[in]  provider_account_id QString [optional]
    */
    virtual void getHoldings(const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_classification_classification_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &classification_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &provider_account_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  holding_id QString [optional]
    */
    virtual void getSecurities(const ::OpenAPI::OptionalParam<QString> &holding_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAssetClassificationListCallback(OAIHttpRequestWorker *worker);
    void getHoldingTypeListCallback(OAIHttpRequestWorker *worker);
    void getHoldingsCallback(OAIHttpRequestWorker *worker);
    void getSecuritiesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAssetClassificationListSignal(OAIHoldingAssetClassificationListResponse summary);
    void getHoldingTypeListSignal(OAIHoldingTypeListResponse summary);
    void getHoldingsSignal(OAIHoldingResponse summary);
    void getSecuritiesSignal(OAIHoldingSecuritiesResponse summary);


    void getAssetClassificationListSignalFull(OAIHttpRequestWorker *worker, OAIHoldingAssetClassificationListResponse summary);
    void getHoldingTypeListSignalFull(OAIHttpRequestWorker *worker, OAIHoldingTypeListResponse summary);
    void getHoldingsSignalFull(OAIHttpRequestWorker *worker, OAIHoldingResponse summary);
    void getSecuritiesSignalFull(OAIHttpRequestWorker *worker, OAIHoldingSecuritiesResponse summary);

    Q_DECL_DEPRECATED_X("Use getAssetClassificationListSignalError() instead")
    void getAssetClassificationListSignalE(OAIHoldingAssetClassificationListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssetClassificationListSignalError(OAIHoldingAssetClassificationListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHoldingTypeListSignalError() instead")
    void getHoldingTypeListSignalE(OAIHoldingTypeListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHoldingTypeListSignalError(OAIHoldingTypeListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHoldingsSignalError() instead")
    void getHoldingsSignalE(OAIHoldingResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHoldingsSignalError(OAIHoldingResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSecuritiesSignalError() instead")
    void getSecuritiesSignalE(OAIHoldingSecuritiesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSecuritiesSignalError(OAIHoldingSecuritiesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAssetClassificationListSignalErrorFull() instead")
    void getAssetClassificationListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssetClassificationListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHoldingTypeListSignalErrorFull() instead")
    void getHoldingTypeListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHoldingTypeListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHoldingsSignalErrorFull() instead")
    void getHoldingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHoldingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSecuritiesSignalErrorFull() instead")
    void getSecuritiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSecuritiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
