/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICoverage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICoverage::OAICoverage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICoverage::OAICoverage() {
    this->initializeModel();
}

OAICoverage::~OAICoverage() {}

void OAICoverage::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_plan_type_isSet = false;
    m_plan_type_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICoverage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICoverage::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_plan_type_isValid = ::OpenAPI::fromJsonValue(m_plan_type, json[QString("planType")]);
    m_plan_type_isSet = !json[QString("planType")].isNull() && m_plan_type_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICoverage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICoverage::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.size() > 0) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_plan_type_isSet) {
        obj.insert(QString("planType"), ::OpenAPI::toJsonValue(m_plan_type));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAICoverageAmount> OAICoverage::getAmount() const {
    return m_amount;
}
void OAICoverage::setAmount(const QList<OAICoverageAmount> &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAICoverage::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAICoverage::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAICoverage::getEndDate() const {
    return m_end_date;
}
void OAICoverage::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAICoverage::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAICoverage::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAICoverage::getPlanType() const {
    return m_plan_type;
}
void OAICoverage::setPlanType(const QString &plan_type) {
    m_plan_type = plan_type;
    m_plan_type_isSet = true;
}

bool OAICoverage::is_plan_type_Set() const{
    return m_plan_type_isSet;
}

bool OAICoverage::is_plan_type_Valid() const{
    return m_plan_type_isValid;
}

QString OAICoverage::getStartDate() const {
    return m_start_date;
}
void OAICoverage::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAICoverage::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAICoverage::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAICoverage::getType() const {
    return m_type;
}
void OAICoverage::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICoverage::is_type_Set() const{
    return m_type_isSet;
}

bool OAICoverage::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICoverage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICoverage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
