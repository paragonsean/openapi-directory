/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICobrand.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICobrand::OAICobrand(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICobrand::OAICobrand() {
    this->initializeModel();
}

OAICobrand::~OAICobrand() {}

void OAICobrand::initializeModel() {

    m_cobrand_login_isSet = false;
    m_cobrand_login_isValid = false;

    m_cobrand_password_isSet = false;
    m_cobrand_password_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;
}

void OAICobrand::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICobrand::fromJsonObject(QJsonObject json) {

    m_cobrand_login_isValid = ::OpenAPI::fromJsonValue(m_cobrand_login, json[QString("cobrandLogin")]);
    m_cobrand_login_isSet = !json[QString("cobrandLogin")].isNull() && m_cobrand_login_isValid;

    m_cobrand_password_isValid = ::OpenAPI::fromJsonValue(m_cobrand_password, json[QString("cobrandPassword")]);
    m_cobrand_password_isSet = !json[QString("cobrandPassword")].isNull() && m_cobrand_password_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;
}

QString OAICobrand::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICobrand::asJsonObject() const {
    QJsonObject obj;
    if (m_cobrand_login_isSet) {
        obj.insert(QString("cobrandLogin"), ::OpenAPI::toJsonValue(m_cobrand_login));
    }
    if (m_cobrand_password_isSet) {
        obj.insert(QString("cobrandPassword"), ::OpenAPI::toJsonValue(m_cobrand_password));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    return obj;
}

QString OAICobrand::getCobrandLogin() const {
    return m_cobrand_login;
}
void OAICobrand::setCobrandLogin(const QString &cobrand_login) {
    m_cobrand_login = cobrand_login;
    m_cobrand_login_isSet = true;
}

bool OAICobrand::is_cobrand_login_Set() const{
    return m_cobrand_login_isSet;
}

bool OAICobrand::is_cobrand_login_Valid() const{
    return m_cobrand_login_isValid;
}

QString OAICobrand::getCobrandPassword() const {
    return m_cobrand_password;
}
void OAICobrand::setCobrandPassword(const QString &cobrand_password) {
    m_cobrand_password = cobrand_password;
    m_cobrand_password_isSet = true;
}

bool OAICobrand::is_cobrand_password_Set() const{
    return m_cobrand_password_isSet;
}

bool OAICobrand::is_cobrand_password_Valid() const{
    return m_cobrand_password_isValid;
}

QString OAICobrand::getLocale() const {
    return m_locale;
}
void OAICobrand::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAICobrand::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAICobrand::is_locale_Valid() const{
    return m_locale_isValid;
}

bool OAICobrand::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cobrand_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cobrand_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICobrand::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cobrand_login_isValid && m_cobrand_password_isValid && true;
}

} // namespace OpenAPI
