/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionCategorizationRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionCategorizationRule::OAITransactionCategorizationRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionCategorizationRule::OAITransactionCategorizationRule() {
    this->initializeModel();
}

OAITransactionCategorizationRule::~OAITransactionCategorizationRule() {}

void OAITransactionCategorizationRule::initializeModel() {

    m_category_level_id_isSet = false;
    m_category_level_id_isValid = false;

    m_mem_id_isSet = false;
    m_mem_id_isValid = false;

    m_rule_clauses_isSet = false;
    m_rule_clauses_isValid = false;

    m_rule_priority_isSet = false;
    m_rule_priority_isValid = false;

    m_transaction_categorisation_id_isSet = false;
    m_transaction_categorisation_id_isValid = false;

    m_user_defined_rule_id_isSet = false;
    m_user_defined_rule_id_isValid = false;
}

void OAITransactionCategorizationRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactionCategorizationRule::fromJsonObject(QJsonObject json) {

    m_category_level_id_isValid = ::OpenAPI::fromJsonValue(m_category_level_id, json[QString("categoryLevelId")]);
    m_category_level_id_isSet = !json[QString("categoryLevelId")].isNull() && m_category_level_id_isValid;

    m_mem_id_isValid = ::OpenAPI::fromJsonValue(m_mem_id, json[QString("memId")]);
    m_mem_id_isSet = !json[QString("memId")].isNull() && m_mem_id_isValid;

    m_rule_clauses_isValid = ::OpenAPI::fromJsonValue(m_rule_clauses, json[QString("ruleClauses")]);
    m_rule_clauses_isSet = !json[QString("ruleClauses")].isNull() && m_rule_clauses_isValid;

    m_rule_priority_isValid = ::OpenAPI::fromJsonValue(m_rule_priority, json[QString("rulePriority")]);
    m_rule_priority_isSet = !json[QString("rulePriority")].isNull() && m_rule_priority_isValid;

    m_transaction_categorisation_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_categorisation_id, json[QString("transactionCategorisationId")]);
    m_transaction_categorisation_id_isSet = !json[QString("transactionCategorisationId")].isNull() && m_transaction_categorisation_id_isValid;

    m_user_defined_rule_id_isValid = ::OpenAPI::fromJsonValue(m_user_defined_rule_id, json[QString("userDefinedRuleId")]);
    m_user_defined_rule_id_isSet = !json[QString("userDefinedRuleId")].isNull() && m_user_defined_rule_id_isValid;
}

QString OAITransactionCategorizationRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactionCategorizationRule::asJsonObject() const {
    QJsonObject obj;
    if (m_category_level_id_isSet) {
        obj.insert(QString("categoryLevelId"), ::OpenAPI::toJsonValue(m_category_level_id));
    }
    if (m_mem_id_isSet) {
        obj.insert(QString("memId"), ::OpenAPI::toJsonValue(m_mem_id));
    }
    if (m_rule_clauses.size() > 0) {
        obj.insert(QString("ruleClauses"), ::OpenAPI::toJsonValue(m_rule_clauses));
    }
    if (m_rule_priority_isSet) {
        obj.insert(QString("rulePriority"), ::OpenAPI::toJsonValue(m_rule_priority));
    }
    if (m_transaction_categorisation_id_isSet) {
        obj.insert(QString("transactionCategorisationId"), ::OpenAPI::toJsonValue(m_transaction_categorisation_id));
    }
    if (m_user_defined_rule_id_isSet) {
        obj.insert(QString("userDefinedRuleId"), ::OpenAPI::toJsonValue(m_user_defined_rule_id));
    }
    return obj;
}

qint32 OAITransactionCategorizationRule::getCategoryLevelId() const {
    return m_category_level_id;
}
void OAITransactionCategorizationRule::setCategoryLevelId(const qint32 &category_level_id) {
    m_category_level_id = category_level_id;
    m_category_level_id_isSet = true;
}

bool OAITransactionCategorizationRule::is_category_level_id_Set() const{
    return m_category_level_id_isSet;
}

bool OAITransactionCategorizationRule::is_category_level_id_Valid() const{
    return m_category_level_id_isValid;
}

qint64 OAITransactionCategorizationRule::getMemId() const {
    return m_mem_id;
}
void OAITransactionCategorizationRule::setMemId(const qint64 &mem_id) {
    m_mem_id = mem_id;
    m_mem_id_isSet = true;
}

bool OAITransactionCategorizationRule::is_mem_id_Set() const{
    return m_mem_id_isSet;
}

bool OAITransactionCategorizationRule::is_mem_id_Valid() const{
    return m_mem_id_isValid;
}

QList<OAIRuleClause> OAITransactionCategorizationRule::getRuleClauses() const {
    return m_rule_clauses;
}
void OAITransactionCategorizationRule::setRuleClauses(const QList<OAIRuleClause> &rule_clauses) {
    m_rule_clauses = rule_clauses;
    m_rule_clauses_isSet = true;
}

bool OAITransactionCategorizationRule::is_rule_clauses_Set() const{
    return m_rule_clauses_isSet;
}

bool OAITransactionCategorizationRule::is_rule_clauses_Valid() const{
    return m_rule_clauses_isValid;
}

qint32 OAITransactionCategorizationRule::getRulePriority() const {
    return m_rule_priority;
}
void OAITransactionCategorizationRule::setRulePriority(const qint32 &rule_priority) {
    m_rule_priority = rule_priority;
    m_rule_priority_isSet = true;
}

bool OAITransactionCategorizationRule::is_rule_priority_Set() const{
    return m_rule_priority_isSet;
}

bool OAITransactionCategorizationRule::is_rule_priority_Valid() const{
    return m_rule_priority_isValid;
}

qint64 OAITransactionCategorizationRule::getTransactionCategorisationId() const {
    return m_transaction_categorisation_id;
}
void OAITransactionCategorizationRule::setTransactionCategorisationId(const qint64 &transaction_categorisation_id) {
    m_transaction_categorisation_id = transaction_categorisation_id;
    m_transaction_categorisation_id_isSet = true;
}

bool OAITransactionCategorizationRule::is_transaction_categorisation_id_Set() const{
    return m_transaction_categorisation_id_isSet;
}

bool OAITransactionCategorizationRule::is_transaction_categorisation_id_Valid() const{
    return m_transaction_categorisation_id_isValid;
}

qint64 OAITransactionCategorizationRule::getUserDefinedRuleId() const {
    return m_user_defined_rule_id;
}
void OAITransactionCategorizationRule::setUserDefinedRuleId(const qint64 &user_defined_rule_id) {
    m_user_defined_rule_id = user_defined_rule_id;
    m_user_defined_rule_id_isSet = true;
}

bool OAITransactionCategorizationRule::is_user_defined_rule_id_Set() const{
    return m_user_defined_rule_id_isSet;
}

bool OAITransactionCategorizationRule::is_user_defined_rule_id_Valid() const{
    return m_user_defined_rule_id_isValid;
}

bool OAITransactionCategorizationRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_level_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mem_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_clauses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_categorisation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_defined_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactionCategorizationRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
