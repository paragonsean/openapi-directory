/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecurityHolding.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecurityHolding::OAISecurityHolding(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecurityHolding::OAISecurityHolding() {
    this->initializeModel();
}

OAISecurityHolding::~OAISecurityHolding() {}

void OAISecurityHolding::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_security_isSet = false;
    m_security_isValid = false;
}

void OAISecurityHolding::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecurityHolding::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_security_isValid = ::OpenAPI::fromJsonValue(m_security, json[QString("security")]);
    m_security_isSet = !json[QString("security")].isNull() && m_security_isValid;
}

QString OAISecurityHolding::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecurityHolding::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_security.isSet()) {
        obj.insert(QString("security"), ::OpenAPI::toJsonValue(m_security));
    }
    return obj;
}

QString OAISecurityHolding::getId() const {
    return m_id;
}
void OAISecurityHolding::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISecurityHolding::is_id_Set() const{
    return m_id_isSet;
}

bool OAISecurityHolding::is_id_Valid() const{
    return m_id_isValid;
}

OAISecurity OAISecurityHolding::getSecurity() const {
    return m_security;
}
void OAISecurityHolding::setSecurity(const OAISecurity &security) {
    m_security = security;
    m_security_isSet = true;
}

bool OAISecurityHolding::is_security_Set() const{
    return m_security_isSet;
}

bool OAISecurityHolding::is_security_Valid() const{
    return m_security_isValid;
}

bool OAISecurityHolding::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecurityHolding::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
