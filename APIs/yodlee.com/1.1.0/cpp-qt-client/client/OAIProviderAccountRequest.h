/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProviderAccountRequest.h
 *
 * 
 */

#ifndef OAIProviderAccountRequest_H
#define OAIProviderAccountRequest_H

#include <QJsonObject>

#include "OAIField.h"
#include "OAIProviderAccountPreferences.h"
#include "OAIProvidersDataset.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIProvidersDataset;
class OAIField;
class OAIProviderAccountPreferences;

class OAIProviderAccountRequest : public OAIObject {
public:
    OAIProviderAccountRequest();
    OAIProviderAccountRequest(QString json);
    ~OAIProviderAccountRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAggregationSource() const;
    void setAggregationSource(const QString &aggregation_source);
    bool is_aggregation_source_Set() const;
    bool is_aggregation_source_Valid() const;

    qint64 getConsentId() const;
    void setConsentId(const qint64 &consent_id);
    bool is_consent_id_Set() const;
    bool is_consent_id_Valid() const;

    QList<OAIProvidersDataset> getDataset() const;
    void setDataset(const QList<OAIProvidersDataset> &dataset);
    bool is_dataset_Set() const;
    bool is_dataset_Valid() const;

    QList<QString> getDatasetName() const;
    void setDatasetName(const QList<QString> &dataset_name);
    bool is_dataset_name_Set() const;
    bool is_dataset_name_Valid() const;

    QList<OAIField> getField() const;
    void setField(const QList<OAIField> &field);
    bool is_field_Set() const;
    bool is_field_Valid() const;

    OAIProviderAccountPreferences getPreferences() const;
    void setPreferences(const OAIProviderAccountPreferences &preferences);
    bool is_preferences_Set() const;
    bool is_preferences_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_aggregation_source;
    bool m_aggregation_source_isSet;
    bool m_aggregation_source_isValid;

    qint64 m_consent_id;
    bool m_consent_id_isSet;
    bool m_consent_id_isValid;

    QList<OAIProvidersDataset> m_dataset;
    bool m_dataset_isSet;
    bool m_dataset_isValid;

    QList<QString> m_dataset_name;
    bool m_dataset_name_isSet;
    bool m_dataset_name_isValid;

    QList<OAIField> m_field;
    bool m_field_isSet;
    bool m_field_isValid;

    OAIProviderAccountPreferences m_preferences;
    bool m_preferences_isSet;
    bool m_preferences_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProviderAccountRequest)

#endif // OAIProviderAccountRequest_H
