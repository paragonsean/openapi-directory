/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountsApi_H
#define OAI_OAIAccountsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountHistoricalBalancesResponse.h"
#include "OAIAccountResponse.h"
#include "OAICreateAccountRequest.h"
#include "OAICreatedAccountResponse.h"
#include "OAIEvaluateAddressRequest.h"
#include "OAIEvaluateAddressResponse.h"
#include "OAIUpdateAccountRequest.h"
#include "OAIYodleeError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountsApi : public QObject {
    Q_OBJECT

public:
    OAIAccountsApi(const int timeOut = 0);
    ~OAIAccountsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_account_request OAICreateAccountRequest [required]
    */
    virtual void createManualAccount(const OAICreateAccountRequest &oai_create_account_request);

    /**
    * @param[in]  account_id qint64 [required]
    */
    virtual void deleteAccount(const qint64 &account_id);

    /**
    * @param[in]  oai_evaluate_address_request OAIEvaluateAddressRequest [required]
    */
    virtual void evaluateAddress(const OAIEvaluateAddressRequest &oai_evaluate_address_request);

    /**
    * @param[in]  account_id qint64 [required]
    * @param[in]  include QString [optional]
    */
    virtual void getAccount(const qint64 &account_id, const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [optional]
    * @param[in]  container QString [optional]
    * @param[in]  include QString [optional]
    * @param[in]  provider_account_id QString [optional]
    * @param[in]  request_id QString [optional]
    * @param[in]  status QString [optional]
    */
    virtual void getAllAccounts(const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &container = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &provider_account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [optional]
    * @param[in]  from_date QString [optional]
    * @param[in]  include_cf bool [optional]
    * @param[in]  interval QString [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  to_date QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void getHistoricalBalances(const ::OpenAPI::OptionalParam<QString> &account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_cf = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &interval = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &to_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  account_id qint64 [required]
    * @param[in]  oai_update_account_request OAIUpdateAccountRequest [required]
    */
    virtual void updateAccount(const qint64 &account_id, const OAIUpdateAccountRequest &oai_update_account_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createManualAccountCallback(OAIHttpRequestWorker *worker);
    void deleteAccountCallback(OAIHttpRequestWorker *worker);
    void evaluateAddressCallback(OAIHttpRequestWorker *worker);
    void getAccountCallback(OAIHttpRequestWorker *worker);
    void getAllAccountsCallback(OAIHttpRequestWorker *worker);
    void getHistoricalBalancesCallback(OAIHttpRequestWorker *worker);
    void updateAccountCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createManualAccountSignal(OAICreatedAccountResponse summary);
    void deleteAccountSignal();
    void evaluateAddressSignal(OAIEvaluateAddressResponse summary);
    void getAccountSignal(OAIAccountResponse summary);
    void getAllAccountsSignal(OAIAccountResponse summary);
    void getHistoricalBalancesSignal(OAIAccountHistoricalBalancesResponse summary);
    void updateAccountSignal();


    void createManualAccountSignalFull(OAIHttpRequestWorker *worker, OAICreatedAccountResponse summary);
    void deleteAccountSignalFull(OAIHttpRequestWorker *worker);
    void evaluateAddressSignalFull(OAIHttpRequestWorker *worker, OAIEvaluateAddressResponse summary);
    void getAccountSignalFull(OAIHttpRequestWorker *worker, OAIAccountResponse summary);
    void getAllAccountsSignalFull(OAIHttpRequestWorker *worker, OAIAccountResponse summary);
    void getHistoricalBalancesSignalFull(OAIHttpRequestWorker *worker, OAIAccountHistoricalBalancesResponse summary);
    void updateAccountSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createManualAccountSignalError() instead")
    void createManualAccountSignalE(OAICreatedAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createManualAccountSignalError(OAICreatedAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccountSignalError() instead")
    void deleteAccountSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccountSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use evaluateAddressSignalError() instead")
    void evaluateAddressSignalE(OAIEvaluateAddressResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void evaluateAddressSignalError(OAIEvaluateAddressResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountSignalError() instead")
    void getAccountSignalE(OAIAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountSignalError(OAIAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllAccountsSignalError() instead")
    void getAllAccountsSignalE(OAIAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllAccountsSignalError(OAIAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHistoricalBalancesSignalError() instead")
    void getHistoricalBalancesSignalE(OAIAccountHistoricalBalancesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHistoricalBalancesSignalError(OAIAccountHistoricalBalancesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountSignalError() instead")
    void updateAccountSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createManualAccountSignalErrorFull() instead")
    void createManualAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createManualAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccountSignalErrorFull() instead")
    void deleteAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use evaluateAddressSignalErrorFull() instead")
    void evaluateAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void evaluateAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountSignalErrorFull() instead")
    void getAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllAccountsSignalErrorFull() instead")
    void getAllAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHistoricalBalancesSignalErrorFull() instead")
    void getHistoricalBalancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHistoricalBalancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountSignalErrorFull() instead")
    void updateAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
