/**
 * Yodlee Core APIs
 * This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: developer@yodlee.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataExtractsHolding.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataExtractsHolding::OAIDataExtractsHolding(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataExtractsHolding::OAIDataExtractsHolding() {
    this->initializeModel();
}

OAIDataExtractsHolding::~OAIDataExtractsHolding() {}

void OAIDataExtractsHolding::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_accrued_income_isSet = false;
    m_accrued_income_isValid = false;

    m_accrued_interest_isSet = false;
    m_accrued_interest_isValid = false;

    m_contract_quantity_isSet = false;
    m_contract_quantity_isValid = false;

    m_cost_basis_isSet = false;
    m_cost_basis_isValid = false;

    m_coupon_rate_isSet = false;
    m_coupon_rate_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_cusip_number_isSet = false;
    m_cusip_number_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_enriched_description_isSet = false;
    m_enriched_description_isValid = false;

    m_exercised_quantity_isSet = false;
    m_exercised_quantity_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_grant_date_isSet = false;
    m_grant_date_isValid = false;

    m_holding_type_isSet = false;
    m_holding_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_interest_rate_isSet = false;
    m_interest_rate_isValid = false;

    m_is_short_isSet = false;
    m_is_short_isValid = false;

    m_isin_isSet = false;
    m_isin_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_match_status_isSet = false;
    m_match_status_isValid = false;

    m_maturity_date_isSet = false;
    m_maturity_date_isValid = false;

    m_option_type_isSet = false;
    m_option_type_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_provider_account_id_isSet = false;
    m_provider_account_id_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_security_style_isSet = false;
    m_security_style_isValid = false;

    m_security_type_isSet = false;
    m_security_type_isValid = false;

    m_sedol_isSet = false;
    m_sedol_isValid = false;

    m_spread_isSet = false;
    m_spread_isValid = false;

    m_strike_price_isSet = false;
    m_strike_price_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;

    m_term_isSet = false;
    m_term_isValid = false;

    m_unvested_quantity_isSet = false;
    m_unvested_quantity_isValid = false;

    m_unvested_value_isSet = false;
    m_unvested_value_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_vested_quantity_isSet = false;
    m_vested_quantity_isValid = false;

    m_vested_shares_exercisable_isSet = false;
    m_vested_shares_exercisable_isValid = false;

    m_vested_value_isSet = false;
    m_vested_value_isValid = false;

    m_vesting_date_isSet = false;
    m_vesting_date_isValid = false;
}

void OAIDataExtractsHolding::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataExtractsHolding::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_accrued_income_isValid = ::OpenAPI::fromJsonValue(m_accrued_income, json[QString("accruedIncome")]);
    m_accrued_income_isSet = !json[QString("accruedIncome")].isNull() && m_accrued_income_isValid;

    m_accrued_interest_isValid = ::OpenAPI::fromJsonValue(m_accrued_interest, json[QString("accruedInterest")]);
    m_accrued_interest_isSet = !json[QString("accruedInterest")].isNull() && m_accrued_interest_isValid;

    m_contract_quantity_isValid = ::OpenAPI::fromJsonValue(m_contract_quantity, json[QString("contractQuantity")]);
    m_contract_quantity_isSet = !json[QString("contractQuantity")].isNull() && m_contract_quantity_isValid;

    m_cost_basis_isValid = ::OpenAPI::fromJsonValue(m_cost_basis, json[QString("costBasis")]);
    m_cost_basis_isSet = !json[QString("costBasis")].isNull() && m_cost_basis_isValid;

    m_coupon_rate_isValid = ::OpenAPI::fromJsonValue(m_coupon_rate, json[QString("couponRate")]);
    m_coupon_rate_isSet = !json[QString("couponRate")].isNull() && m_coupon_rate_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_cusip_number_isValid = ::OpenAPI::fromJsonValue(m_cusip_number, json[QString("cusipNumber")]);
    m_cusip_number_isSet = !json[QString("cusipNumber")].isNull() && m_cusip_number_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enriched_description_isValid = ::OpenAPI::fromJsonValue(m_enriched_description, json[QString("enrichedDescription")]);
    m_enriched_description_isSet = !json[QString("enrichedDescription")].isNull() && m_enriched_description_isValid;

    m_exercised_quantity_isValid = ::OpenAPI::fromJsonValue(m_exercised_quantity, json[QString("exercisedQuantity")]);
    m_exercised_quantity_isSet = !json[QString("exercisedQuantity")].isNull() && m_exercised_quantity_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_grant_date_isValid = ::OpenAPI::fromJsonValue(m_grant_date, json[QString("grantDate")]);
    m_grant_date_isSet = !json[QString("grantDate")].isNull() && m_grant_date_isValid;

    m_holding_type_isValid = ::OpenAPI::fromJsonValue(m_holding_type, json[QString("holdingType")]);
    m_holding_type_isSet = !json[QString("holdingType")].isNull() && m_holding_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interest_rate_isValid = ::OpenAPI::fromJsonValue(m_interest_rate, json[QString("interestRate")]);
    m_interest_rate_isSet = !json[QString("interestRate")].isNull() && m_interest_rate_isValid;

    m_is_short_isValid = ::OpenAPI::fromJsonValue(m_is_short, json[QString("isShort")]);
    m_is_short_isSet = !json[QString("isShort")].isNull() && m_is_short_isValid;

    m_isin_isValid = ::OpenAPI::fromJsonValue(m_isin, json[QString("isin")]);
    m_isin_isSet = !json[QString("isin")].isNull() && m_isin_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_match_status_isValid = ::OpenAPI::fromJsonValue(m_match_status, json[QString("matchStatus")]);
    m_match_status_isSet = !json[QString("matchStatus")].isNull() && m_match_status_isValid;

    m_maturity_date_isValid = ::OpenAPI::fromJsonValue(m_maturity_date, json[QString("maturityDate")]);
    m_maturity_date_isSet = !json[QString("maturityDate")].isNull() && m_maturity_date_isValid;

    m_option_type_isValid = ::OpenAPI::fromJsonValue(m_option_type, json[QString("optionType")]);
    m_option_type_isSet = !json[QString("optionType")].isNull() && m_option_type_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_provider_account_id_isValid = ::OpenAPI::fromJsonValue(m_provider_account_id, json[QString("providerAccountId")]);
    m_provider_account_id_isSet = !json[QString("providerAccountId")].isNull() && m_provider_account_id_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_security_style_isValid = ::OpenAPI::fromJsonValue(m_security_style, json[QString("securityStyle")]);
    m_security_style_isSet = !json[QString("securityStyle")].isNull() && m_security_style_isValid;

    m_security_type_isValid = ::OpenAPI::fromJsonValue(m_security_type, json[QString("securityType")]);
    m_security_type_isSet = !json[QString("securityType")].isNull() && m_security_type_isValid;

    m_sedol_isValid = ::OpenAPI::fromJsonValue(m_sedol, json[QString("sedol")]);
    m_sedol_isSet = !json[QString("sedol")].isNull() && m_sedol_isValid;

    m_spread_isValid = ::OpenAPI::fromJsonValue(m_spread, json[QString("spread")]);
    m_spread_isSet = !json[QString("spread")].isNull() && m_spread_isValid;

    m_strike_price_isValid = ::OpenAPI::fromJsonValue(m_strike_price, json[QString("strikePrice")]);
    m_strike_price_isSet = !json[QString("strikePrice")].isNull() && m_strike_price_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;

    m_term_isValid = ::OpenAPI::fromJsonValue(m_term, json[QString("term")]);
    m_term_isSet = !json[QString("term")].isNull() && m_term_isValid;

    m_unvested_quantity_isValid = ::OpenAPI::fromJsonValue(m_unvested_quantity, json[QString("unvestedQuantity")]);
    m_unvested_quantity_isSet = !json[QString("unvestedQuantity")].isNull() && m_unvested_quantity_isValid;

    m_unvested_value_isValid = ::OpenAPI::fromJsonValue(m_unvested_value, json[QString("unvestedValue")]);
    m_unvested_value_isSet = !json[QString("unvestedValue")].isNull() && m_unvested_value_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_vested_quantity_isValid = ::OpenAPI::fromJsonValue(m_vested_quantity, json[QString("vestedQuantity")]);
    m_vested_quantity_isSet = !json[QString("vestedQuantity")].isNull() && m_vested_quantity_isValid;

    m_vested_shares_exercisable_isValid = ::OpenAPI::fromJsonValue(m_vested_shares_exercisable, json[QString("vestedSharesExercisable")]);
    m_vested_shares_exercisable_isSet = !json[QString("vestedSharesExercisable")].isNull() && m_vested_shares_exercisable_isValid;

    m_vested_value_isValid = ::OpenAPI::fromJsonValue(m_vested_value, json[QString("vestedValue")]);
    m_vested_value_isSet = !json[QString("vestedValue")].isNull() && m_vested_value_isValid;

    m_vesting_date_isValid = ::OpenAPI::fromJsonValue(m_vesting_date, json[QString("vestingDate")]);
    m_vesting_date_isSet = !json[QString("vestingDate")].isNull() && m_vesting_date_isValid;
}

QString OAIDataExtractsHolding::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataExtractsHolding::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_accrued_income.isSet()) {
        obj.insert(QString("accruedIncome"), ::OpenAPI::toJsonValue(m_accrued_income));
    }
    if (m_accrued_interest.isSet()) {
        obj.insert(QString("accruedInterest"), ::OpenAPI::toJsonValue(m_accrued_interest));
    }
    if (m_contract_quantity_isSet) {
        obj.insert(QString("contractQuantity"), ::OpenAPI::toJsonValue(m_contract_quantity));
    }
    if (m_cost_basis.isSet()) {
        obj.insert(QString("costBasis"), ::OpenAPI::toJsonValue(m_cost_basis));
    }
    if (m_coupon_rate_isSet) {
        obj.insert(QString("couponRate"), ::OpenAPI::toJsonValue(m_coupon_rate));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_cusip_number_isSet) {
        obj.insert(QString("cusipNumber"), ::OpenAPI::toJsonValue(m_cusip_number));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enriched_description_isSet) {
        obj.insert(QString("enrichedDescription"), ::OpenAPI::toJsonValue(m_enriched_description));
    }
    if (m_exercised_quantity_isSet) {
        obj.insert(QString("exercisedQuantity"), ::OpenAPI::toJsonValue(m_exercised_quantity));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_grant_date_isSet) {
        obj.insert(QString("grantDate"), ::OpenAPI::toJsonValue(m_grant_date));
    }
    if (m_holding_type_isSet) {
        obj.insert(QString("holdingType"), ::OpenAPI::toJsonValue(m_holding_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interest_rate_isSet) {
        obj.insert(QString("interestRate"), ::OpenAPI::toJsonValue(m_interest_rate));
    }
    if (m_is_short_isSet) {
        obj.insert(QString("isShort"), ::OpenAPI::toJsonValue(m_is_short));
    }
    if (m_isin_isSet) {
        obj.insert(QString("isin"), ::OpenAPI::toJsonValue(m_isin));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_match_status_isSet) {
        obj.insert(QString("matchStatus"), ::OpenAPI::toJsonValue(m_match_status));
    }
    if (m_maturity_date_isSet) {
        obj.insert(QString("maturityDate"), ::OpenAPI::toJsonValue(m_maturity_date));
    }
    if (m_option_type_isSet) {
        obj.insert(QString("optionType"), ::OpenAPI::toJsonValue(m_option_type));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_provider_account_id_isSet) {
        obj.insert(QString("providerAccountId"), ::OpenAPI::toJsonValue(m_provider_account_id));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_security_style_isSet) {
        obj.insert(QString("securityStyle"), ::OpenAPI::toJsonValue(m_security_style));
    }
    if (m_security_type_isSet) {
        obj.insert(QString("securityType"), ::OpenAPI::toJsonValue(m_security_type));
    }
    if (m_sedol_isSet) {
        obj.insert(QString("sedol"), ::OpenAPI::toJsonValue(m_sedol));
    }
    if (m_spread.isSet()) {
        obj.insert(QString("spread"), ::OpenAPI::toJsonValue(m_spread));
    }
    if (m_strike_price.isSet()) {
        obj.insert(QString("strikePrice"), ::OpenAPI::toJsonValue(m_strike_price));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    if (m_term_isSet) {
        obj.insert(QString("term"), ::OpenAPI::toJsonValue(m_term));
    }
    if (m_unvested_quantity_isSet) {
        obj.insert(QString("unvestedQuantity"), ::OpenAPI::toJsonValue(m_unvested_quantity));
    }
    if (m_unvested_value.isSet()) {
        obj.insert(QString("unvestedValue"), ::OpenAPI::toJsonValue(m_unvested_value));
    }
    if (m_value.isSet()) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_vested_quantity_isSet) {
        obj.insert(QString("vestedQuantity"), ::OpenAPI::toJsonValue(m_vested_quantity));
    }
    if (m_vested_shares_exercisable_isSet) {
        obj.insert(QString("vestedSharesExercisable"), ::OpenAPI::toJsonValue(m_vested_shares_exercisable));
    }
    if (m_vested_value.isSet()) {
        obj.insert(QString("vestedValue"), ::OpenAPI::toJsonValue(m_vested_value));
    }
    if (m_vesting_date_isSet) {
        obj.insert(QString("vestingDate"), ::OpenAPI::toJsonValue(m_vesting_date));
    }
    return obj;
}

qint64 OAIDataExtractsHolding::getAccountId() const {
    return m_account_id;
}
void OAIDataExtractsHolding::setAccountId(const qint64 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIDataExtractsHolding::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIDataExtractsHolding::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAIMoney OAIDataExtractsHolding::getAccruedIncome() const {
    return m_accrued_income;
}
void OAIDataExtractsHolding::setAccruedIncome(const OAIMoney &accrued_income) {
    m_accrued_income = accrued_income;
    m_accrued_income_isSet = true;
}

bool OAIDataExtractsHolding::is_accrued_income_Set() const{
    return m_accrued_income_isSet;
}

bool OAIDataExtractsHolding::is_accrued_income_Valid() const{
    return m_accrued_income_isValid;
}

OAIMoney OAIDataExtractsHolding::getAccruedInterest() const {
    return m_accrued_interest;
}
void OAIDataExtractsHolding::setAccruedInterest(const OAIMoney &accrued_interest) {
    m_accrued_interest = accrued_interest;
    m_accrued_interest_isSet = true;
}

bool OAIDataExtractsHolding::is_accrued_interest_Set() const{
    return m_accrued_interest_isSet;
}

bool OAIDataExtractsHolding::is_accrued_interest_Valid() const{
    return m_accrued_interest_isValid;
}

double OAIDataExtractsHolding::getContractQuantity() const {
    return m_contract_quantity;
}
void OAIDataExtractsHolding::setContractQuantity(const double &contract_quantity) {
    m_contract_quantity = contract_quantity;
    m_contract_quantity_isSet = true;
}

bool OAIDataExtractsHolding::is_contract_quantity_Set() const{
    return m_contract_quantity_isSet;
}

bool OAIDataExtractsHolding::is_contract_quantity_Valid() const{
    return m_contract_quantity_isValid;
}

OAIMoney OAIDataExtractsHolding::getCostBasis() const {
    return m_cost_basis;
}
void OAIDataExtractsHolding::setCostBasis(const OAIMoney &cost_basis) {
    m_cost_basis = cost_basis;
    m_cost_basis_isSet = true;
}

bool OAIDataExtractsHolding::is_cost_basis_Set() const{
    return m_cost_basis_isSet;
}

bool OAIDataExtractsHolding::is_cost_basis_Valid() const{
    return m_cost_basis_isValid;
}

double OAIDataExtractsHolding::getCouponRate() const {
    return m_coupon_rate;
}
void OAIDataExtractsHolding::setCouponRate(const double &coupon_rate) {
    m_coupon_rate = coupon_rate;
    m_coupon_rate_isSet = true;
}

bool OAIDataExtractsHolding::is_coupon_rate_Set() const{
    return m_coupon_rate_isSet;
}

bool OAIDataExtractsHolding::is_coupon_rate_Valid() const{
    return m_coupon_rate_isValid;
}

QString OAIDataExtractsHolding::getCreatedDate() const {
    return m_created_date;
}
void OAIDataExtractsHolding::setCreatedDate(const QString &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIDataExtractsHolding::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIDataExtractsHolding::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIDataExtractsHolding::getCusipNumber() const {
    return m_cusip_number;
}
void OAIDataExtractsHolding::setCusipNumber(const QString &cusip_number) {
    m_cusip_number = cusip_number;
    m_cusip_number_isSet = true;
}

bool OAIDataExtractsHolding::is_cusip_number_Set() const{
    return m_cusip_number_isSet;
}

bool OAIDataExtractsHolding::is_cusip_number_Valid() const{
    return m_cusip_number_isValid;
}

QString OAIDataExtractsHolding::getDescription() const {
    return m_description;
}
void OAIDataExtractsHolding::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDataExtractsHolding::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDataExtractsHolding::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDataExtractsHolding::getEnrichedDescription() const {
    return m_enriched_description;
}
void OAIDataExtractsHolding::setEnrichedDescription(const QString &enriched_description) {
    m_enriched_description = enriched_description;
    m_enriched_description_isSet = true;
}

bool OAIDataExtractsHolding::is_enriched_description_Set() const{
    return m_enriched_description_isSet;
}

bool OAIDataExtractsHolding::is_enriched_description_Valid() const{
    return m_enriched_description_isValid;
}

double OAIDataExtractsHolding::getExercisedQuantity() const {
    return m_exercised_quantity;
}
void OAIDataExtractsHolding::setExercisedQuantity(const double &exercised_quantity) {
    m_exercised_quantity = exercised_quantity;
    m_exercised_quantity_isSet = true;
}

bool OAIDataExtractsHolding::is_exercised_quantity_Set() const{
    return m_exercised_quantity_isSet;
}

bool OAIDataExtractsHolding::is_exercised_quantity_Valid() const{
    return m_exercised_quantity_isValid;
}

QString OAIDataExtractsHolding::getExpirationDate() const {
    return m_expiration_date;
}
void OAIDataExtractsHolding::setExpirationDate(const QString &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIDataExtractsHolding::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIDataExtractsHolding::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QString OAIDataExtractsHolding::getGrantDate() const {
    return m_grant_date;
}
void OAIDataExtractsHolding::setGrantDate(const QString &grant_date) {
    m_grant_date = grant_date;
    m_grant_date_isSet = true;
}

bool OAIDataExtractsHolding::is_grant_date_Set() const{
    return m_grant_date_isSet;
}

bool OAIDataExtractsHolding::is_grant_date_Valid() const{
    return m_grant_date_isValid;
}

QString OAIDataExtractsHolding::getHoldingType() const {
    return m_holding_type;
}
void OAIDataExtractsHolding::setHoldingType(const QString &holding_type) {
    m_holding_type = holding_type;
    m_holding_type_isSet = true;
}

bool OAIDataExtractsHolding::is_holding_type_Set() const{
    return m_holding_type_isSet;
}

bool OAIDataExtractsHolding::is_holding_type_Valid() const{
    return m_holding_type_isValid;
}

qint64 OAIDataExtractsHolding::getId() const {
    return m_id;
}
void OAIDataExtractsHolding::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDataExtractsHolding::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDataExtractsHolding::is_id_Valid() const{
    return m_id_isValid;
}

double OAIDataExtractsHolding::getInterestRate() const {
    return m_interest_rate;
}
void OAIDataExtractsHolding::setInterestRate(const double &interest_rate) {
    m_interest_rate = interest_rate;
    m_interest_rate_isSet = true;
}

bool OAIDataExtractsHolding::is_interest_rate_Set() const{
    return m_interest_rate_isSet;
}

bool OAIDataExtractsHolding::is_interest_rate_Valid() const{
    return m_interest_rate_isValid;
}

bool OAIDataExtractsHolding::isIsShort() const {
    return m_is_short;
}
void OAIDataExtractsHolding::setIsShort(const bool &is_short) {
    m_is_short = is_short;
    m_is_short_isSet = true;
}

bool OAIDataExtractsHolding::is_is_short_Set() const{
    return m_is_short_isSet;
}

bool OAIDataExtractsHolding::is_is_short_Valid() const{
    return m_is_short_isValid;
}

QString OAIDataExtractsHolding::getIsin() const {
    return m_isin;
}
void OAIDataExtractsHolding::setIsin(const QString &isin) {
    m_isin = isin;
    m_isin_isSet = true;
}

bool OAIDataExtractsHolding::is_isin_Set() const{
    return m_isin_isSet;
}

bool OAIDataExtractsHolding::is_isin_Valid() const{
    return m_isin_isValid;
}

QString OAIDataExtractsHolding::getLastUpdated() const {
    return m_last_updated;
}
void OAIDataExtractsHolding::setLastUpdated(const QString &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIDataExtractsHolding::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIDataExtractsHolding::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIDataExtractsHolding::getMatchStatus() const {
    return m_match_status;
}
void OAIDataExtractsHolding::setMatchStatus(const QString &match_status) {
    m_match_status = match_status;
    m_match_status_isSet = true;
}

bool OAIDataExtractsHolding::is_match_status_Set() const{
    return m_match_status_isSet;
}

bool OAIDataExtractsHolding::is_match_status_Valid() const{
    return m_match_status_isValid;
}

QString OAIDataExtractsHolding::getMaturityDate() const {
    return m_maturity_date;
}
void OAIDataExtractsHolding::setMaturityDate(const QString &maturity_date) {
    m_maturity_date = maturity_date;
    m_maturity_date_isSet = true;
}

bool OAIDataExtractsHolding::is_maturity_date_Set() const{
    return m_maturity_date_isSet;
}

bool OAIDataExtractsHolding::is_maturity_date_Valid() const{
    return m_maturity_date_isValid;
}

QString OAIDataExtractsHolding::getOptionType() const {
    return m_option_type;
}
void OAIDataExtractsHolding::setOptionType(const QString &option_type) {
    m_option_type = option_type;
    m_option_type_isSet = true;
}

bool OAIDataExtractsHolding::is_option_type_Set() const{
    return m_option_type_isSet;
}

bool OAIDataExtractsHolding::is_option_type_Valid() const{
    return m_option_type_isValid;
}

OAIMoney OAIDataExtractsHolding::getPrice() const {
    return m_price;
}
void OAIDataExtractsHolding::setPrice(const OAIMoney &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIDataExtractsHolding::is_price_Set() const{
    return m_price_isSet;
}

bool OAIDataExtractsHolding::is_price_Valid() const{
    return m_price_isValid;
}

qint64 OAIDataExtractsHolding::getProviderAccountId() const {
    return m_provider_account_id;
}
void OAIDataExtractsHolding::setProviderAccountId(const qint64 &provider_account_id) {
    m_provider_account_id = provider_account_id;
    m_provider_account_id_isSet = true;
}

bool OAIDataExtractsHolding::is_provider_account_id_Set() const{
    return m_provider_account_id_isSet;
}

bool OAIDataExtractsHolding::is_provider_account_id_Valid() const{
    return m_provider_account_id_isValid;
}

double OAIDataExtractsHolding::getQuantity() const {
    return m_quantity;
}
void OAIDataExtractsHolding::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIDataExtractsHolding::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIDataExtractsHolding::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIDataExtractsHolding::getSecurityStyle() const {
    return m_security_style;
}
void OAIDataExtractsHolding::setSecurityStyle(const QString &security_style) {
    m_security_style = security_style;
    m_security_style_isSet = true;
}

bool OAIDataExtractsHolding::is_security_style_Set() const{
    return m_security_style_isSet;
}

bool OAIDataExtractsHolding::is_security_style_Valid() const{
    return m_security_style_isValid;
}

QString OAIDataExtractsHolding::getSecurityType() const {
    return m_security_type;
}
void OAIDataExtractsHolding::setSecurityType(const QString &security_type) {
    m_security_type = security_type;
    m_security_type_isSet = true;
}

bool OAIDataExtractsHolding::is_security_type_Set() const{
    return m_security_type_isSet;
}

bool OAIDataExtractsHolding::is_security_type_Valid() const{
    return m_security_type_isValid;
}

QString OAIDataExtractsHolding::getSedol() const {
    return m_sedol;
}
void OAIDataExtractsHolding::setSedol(const QString &sedol) {
    m_sedol = sedol;
    m_sedol_isSet = true;
}

bool OAIDataExtractsHolding::is_sedol_Set() const{
    return m_sedol_isSet;
}

bool OAIDataExtractsHolding::is_sedol_Valid() const{
    return m_sedol_isValid;
}

OAIMoney OAIDataExtractsHolding::getSpread() const {
    return m_spread;
}
void OAIDataExtractsHolding::setSpread(const OAIMoney &spread) {
    m_spread = spread;
    m_spread_isSet = true;
}

bool OAIDataExtractsHolding::is_spread_Set() const{
    return m_spread_isSet;
}

bool OAIDataExtractsHolding::is_spread_Valid() const{
    return m_spread_isValid;
}

OAIMoney OAIDataExtractsHolding::getStrikePrice() const {
    return m_strike_price;
}
void OAIDataExtractsHolding::setStrikePrice(const OAIMoney &strike_price) {
    m_strike_price = strike_price;
    m_strike_price_isSet = true;
}

bool OAIDataExtractsHolding::is_strike_price_Set() const{
    return m_strike_price_isSet;
}

bool OAIDataExtractsHolding::is_strike_price_Valid() const{
    return m_strike_price_isValid;
}

QString OAIDataExtractsHolding::getSymbol() const {
    return m_symbol;
}
void OAIDataExtractsHolding::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAIDataExtractsHolding::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAIDataExtractsHolding::is_symbol_Valid() const{
    return m_symbol_isValid;
}

QString OAIDataExtractsHolding::getTerm() const {
    return m_term;
}
void OAIDataExtractsHolding::setTerm(const QString &term) {
    m_term = term;
    m_term_isSet = true;
}

bool OAIDataExtractsHolding::is_term_Set() const{
    return m_term_isSet;
}

bool OAIDataExtractsHolding::is_term_Valid() const{
    return m_term_isValid;
}

double OAIDataExtractsHolding::getUnvestedQuantity() const {
    return m_unvested_quantity;
}
void OAIDataExtractsHolding::setUnvestedQuantity(const double &unvested_quantity) {
    m_unvested_quantity = unvested_quantity;
    m_unvested_quantity_isSet = true;
}

bool OAIDataExtractsHolding::is_unvested_quantity_Set() const{
    return m_unvested_quantity_isSet;
}

bool OAIDataExtractsHolding::is_unvested_quantity_Valid() const{
    return m_unvested_quantity_isValid;
}

OAIMoney OAIDataExtractsHolding::getUnvestedValue() const {
    return m_unvested_value;
}
void OAIDataExtractsHolding::setUnvestedValue(const OAIMoney &unvested_value) {
    m_unvested_value = unvested_value;
    m_unvested_value_isSet = true;
}

bool OAIDataExtractsHolding::is_unvested_value_Set() const{
    return m_unvested_value_isSet;
}

bool OAIDataExtractsHolding::is_unvested_value_Valid() const{
    return m_unvested_value_isValid;
}

OAIMoney OAIDataExtractsHolding::getValue() const {
    return m_value;
}
void OAIDataExtractsHolding::setValue(const OAIMoney &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIDataExtractsHolding::is_value_Set() const{
    return m_value_isSet;
}

bool OAIDataExtractsHolding::is_value_Valid() const{
    return m_value_isValid;
}

double OAIDataExtractsHolding::getVestedQuantity() const {
    return m_vested_quantity;
}
void OAIDataExtractsHolding::setVestedQuantity(const double &vested_quantity) {
    m_vested_quantity = vested_quantity;
    m_vested_quantity_isSet = true;
}

bool OAIDataExtractsHolding::is_vested_quantity_Set() const{
    return m_vested_quantity_isSet;
}

bool OAIDataExtractsHolding::is_vested_quantity_Valid() const{
    return m_vested_quantity_isValid;
}

double OAIDataExtractsHolding::getVestedSharesExercisable() const {
    return m_vested_shares_exercisable;
}
void OAIDataExtractsHolding::setVestedSharesExercisable(const double &vested_shares_exercisable) {
    m_vested_shares_exercisable = vested_shares_exercisable;
    m_vested_shares_exercisable_isSet = true;
}

bool OAIDataExtractsHolding::is_vested_shares_exercisable_Set() const{
    return m_vested_shares_exercisable_isSet;
}

bool OAIDataExtractsHolding::is_vested_shares_exercisable_Valid() const{
    return m_vested_shares_exercisable_isValid;
}

OAIMoney OAIDataExtractsHolding::getVestedValue() const {
    return m_vested_value;
}
void OAIDataExtractsHolding::setVestedValue(const OAIMoney &vested_value) {
    m_vested_value = vested_value;
    m_vested_value_isSet = true;
}

bool OAIDataExtractsHolding::is_vested_value_Set() const{
    return m_vested_value_isSet;
}

bool OAIDataExtractsHolding::is_vested_value_Valid() const{
    return m_vested_value_isValid;
}

QString OAIDataExtractsHolding::getVestingDate() const {
    return m_vesting_date;
}
void OAIDataExtractsHolding::setVestingDate(const QString &vesting_date) {
    m_vesting_date = vesting_date;
    m_vesting_date_isSet = true;
}

bool OAIDataExtractsHolding::is_vesting_date_Set() const{
    return m_vesting_date_isSet;
}

bool OAIDataExtractsHolding::is_vesting_date_Valid() const{
    return m_vesting_date_isValid;
}

bool OAIDataExtractsHolding::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accrued_income.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_accrued_interest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contract_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_basis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_coupon_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cusip_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enriched_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exercised_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holding_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interest_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_short_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_isin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maturity_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sedol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spread.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_strike_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unvested_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unvested_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vested_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vested_shares_exercisable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vested_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vesting_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataExtractsHolding::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
