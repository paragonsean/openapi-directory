/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BroadcastsResponse from '../model/BroadcastsResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* Broadcasts service.
* @module api/BroadcastsApi
* @version 1.0.0
*/
export default class BroadcastsApi {

    /**
    * Constructs a new BroadcastsApi. 
    * @alias module:api/BroadcastsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the broadcastsGet operation.
     * @callback module:api/BroadcastsApi~broadcastsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BroadcastsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Broadcasts
     * All broadcasts 
     * @param {String} xAPIKey API_KEY
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Paginated results offset
     * @param {Number} [limit] Paginated results limit
     * @param {String} [serviceId] Filter by Service ID. E.g. bbc_radio_fourfm
     * @param {String} [date] Filter by date. E.g. 2016-06-17
     * @param {module:model/String} [sort] Sort by provided query. E.g. 'start_at' sorts in ascending order, and '-start_at' sorts in descending order
     * @param {module:api/BroadcastsApi~broadcastsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BroadcastsResponse}
     */
    broadcastsGet(xAPIKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling broadcastsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'service_id': opts['serviceId'],
        'date': opts['date'],
        'sort': opts['sort']
      };
      let headerParams = {
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BroadcastsResponse;
      return this.apiClient.callApi(
        '/broadcasts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the broadcastsLatestGet operation.
     * @callback module:api/BroadcastsApi~broadcastsLatestGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BroadcastsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Latest Broadcasts
     * Broadcasts for the current day 
     * @param {String} xAPIKey API_KEY
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Paginated results offset
     * @param {Number} [limit] Paginated results limit
     * @param {String} [serviceId] Filter by Service ID. E.g. bbc_radio_fourfm
     * @param {module:model/String} [onAir] Filter what is on air. E.g. 'now' returns current programme being broadcasted.
     * @param {String} [next] Filter what will be on air next in minutes. E.g. '240' returns programmes broadcasted in the next four hurs
     * @param {String} [previous] Filter what was on air previously in minutes. E.g. '240' returns programmes broadcasted in the previous four hurs
     * @param {module:model/String} [sort] Sort by provided query. E.g. 'start_at' sorts in ascending order, and '-start_at' sorts in descending order
     * @param {module:api/BroadcastsApi~broadcastsLatestGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BroadcastsResponse}
     */
    broadcastsLatestGet(xAPIKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling broadcastsLatestGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'service_id': opts['serviceId'],
        'on_air': opts['onAir'],
        'next': opts['next'],
        'previous': opts['previous'],
        'sort': opts['sort']
      };
      let headerParams = {
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BroadcastsResponse;
      return this.apiClient.callApi(
        '/broadcasts/latest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBroadcastByPid operation.
     * @callback module:api/BroadcastsApi~getBroadcastByPidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BroadcastsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Broadcasts by PID
     * Find broadcast by PID 
     * @param {String} xAPIKey API_KEY
     * @param {String} pid pid
     * @param {module:api/BroadcastsApi~getBroadcastByPidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BroadcastsResponse}
     */
    getBroadcastByPid(xAPIKey, pid, callback) {
      let postBody = null;
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getBroadcastByPid");
      }
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling getBroadcastByPid");
      }

      let pathParams = {
        'pid': pid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BroadcastsResponse;
      return this.apiClient.callApi(
        '/broadcasts/{pid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
