/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MusicExportErrorResponse from '../model/MusicExportErrorResponse';
import MusicExportJob from '../model/MusicExportJob';
import MusicExportPreferences from '../model/MusicExportPreferences';
import MusicExportPreferencesResponse from '../model/MusicExportPreferencesResponse';
import MusicExportSuccess from '../model/MusicExportSuccess';

/**
* MusicExport service.
* @module api/MusicExportApi
* @version 1.0.0
*/
export default class MusicExportApi {

    /**
    * Constructs a new MusicExportApi. 
    * @alias module:api/MusicExportApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteMusicPreferencesExport operation.
     * @callback module:api/MusicExportApi~deleteMusicPreferencesExportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MusicExportSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Music Export Preferences
     * Remove export preferences (e.g. 3rd party vendors, partner id's) for a given BBC Music user. 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {module:api/MusicExportApi~deleteMusicPreferencesExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MusicExportSuccess}
     */
    deleteMusicPreferencesExport(authorization, xAuthenticationProvider, xAPIKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteMusicPreferencesExport");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling deleteMusicPreferencesExport");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling deleteMusicPreferencesExport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MusicExportSuccess;
      return this.apiClient.callApi(
        '/my/music/preferences/export', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMusicPreferencesExportVendor operation.
     * @callback module:api/MusicExportApi~deleteMusicPreferencesExportVendorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Music Export Vendor Preferences
     * Remove Vendor specific export preferences (e.g. 3rd party vendors, partner id's) for a given BBC Music user. 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {module:model/String} vendor Supported 3rd Party Vendor
     * @param {module:api/MusicExportApi~deleteMusicPreferencesExportVendorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMusicPreferencesExportVendor(authorization, xAuthenticationProvider, xAPIKey, vendor, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteMusicPreferencesExportVendor");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling deleteMusicPreferencesExportVendor");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling deleteMusicPreferencesExportVendor");
      }
      // verify the required parameter 'vendor' is set
      if (vendor === undefined || vendor === null) {
        throw new Error("Missing the required parameter 'vendor' when calling deleteMusicPreferencesExportVendor");
      }

      let pathParams = {
        'vendor': vendor
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/music/preferences/export/{vendor}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMusicExport operation.
     * @callback module:api/MusicExportApi~getMusicExportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MusicExportJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Music Exports
     * Returns status of all previous third party export actions for a given BBC Music user. 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Paginated results offset
     * @param {Number} [limit] Paginated results limit
     * @param {module:api/MusicExportApi~getMusicExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MusicExportJob}
     */
    getMusicExport(authorization, xAuthenticationProvider, xAPIKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getMusicExport");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling getMusicExport");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getMusicExport");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MusicExportJob;
      return this.apiClient.callApi(
        '/my/music/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMusicExportJobs operation.
     * @callback module:api/MusicExportApi~getMusicExportJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MusicExportJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Music Export Jobs
     * All items associated to a users export request 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {Boolean} over16 Boolean age check
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [vendor] Specify Vendor Jobs
     * @param {module:api/MusicExportApi~getMusicExportJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MusicExportJob}
     */
    getMusicExportJobs(authorization, xAuthenticationProvider, xAPIKey, over16, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getMusicExportJobs");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling getMusicExportJobs");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getMusicExportJobs");
      }
      // verify the required parameter 'over16' is set
      if (over16 === undefined || over16 === null) {
        throw new Error("Missing the required parameter 'over16' when calling getMusicExportJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'over16': over16,
        'vendor': opts['vendor']
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MusicExportJob;
      return this.apiClient.callApi(
        '/my/music/exports/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMusicExportTracks operation.
     * @callback module:api/MusicExportApi~getMusicExportTracksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MusicExportJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Music Export Tracks
     * Retrieves vendor and status specific tracks 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {Boolean} over16 Boolean age check
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Paginated results offset
     * @param {Number} [limit] Paginated results limit
     * @param {module:model/String} [vendor] Specify Vendor Tracks
     * @param {module:model/String} [status] Specify Track status
     * @param {module:api/MusicExportApi~getMusicExportTracksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MusicExportJob}
     */
    getMusicExportTracks(authorization, xAuthenticationProvider, xAPIKey, over16, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getMusicExportTracks");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling getMusicExportTracks");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getMusicExportTracks");
      }
      // verify the required parameter 'over16' is set
      if (over16 === undefined || over16 === null) {
        throw new Error("Missing the required parameter 'over16' when calling getMusicExportTracks");
      }

      let pathParams = {
      };
      let queryParams = {
        'over16': over16,
        'offset': opts['offset'],
        'limit': opts['limit'],
        'vendor': opts['vendor'],
        'status': opts['status']
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MusicExportJob;
      return this.apiClient.callApi(
        '/my/music/exports/tracks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMusicPreferencesExport operation.
     * @callback module:api/MusicExportApi~getMusicPreferencesExportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MusicExportPreferencesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Music Export Preferences
     * Returns export preferences (e.g. 3rd party vendors, partner id's) for a given BBC Music user. 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {module:api/MusicExportApi~getMusicPreferencesExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MusicExportPreferencesResponse}
     */
    getMusicPreferencesExport(authorization, xAuthenticationProvider, xAPIKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getMusicPreferencesExport");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling getMusicPreferencesExport");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getMusicPreferencesExport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MusicExportPreferencesResponse;
      return this.apiClient.callApi(
        '/my/music/preferences/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMusicPreferencesExportVendor operation.
     * @callback module:api/MusicExportApi~getMusicPreferencesExportVendorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MusicExportPreferencesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Music Export Vendor Preferences
     * Returns vendor specific export preferences for a given BBC Music user. 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {module:model/String} vendor Supported 3rd Party Vendor
     * @param {module:api/MusicExportApi~getMusicPreferencesExportVendorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MusicExportPreferencesResponse}
     */
    getMusicPreferencesExportVendor(authorization, xAuthenticationProvider, xAPIKey, vendor, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getMusicPreferencesExportVendor");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling getMusicPreferencesExportVendor");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getMusicPreferencesExportVendor");
      }
      // verify the required parameter 'vendor' is set
      if (vendor === undefined || vendor === null) {
        throw new Error("Missing the required parameter 'vendor' when calling getMusicPreferencesExportVendor");
      }

      let pathParams = {
        'vendor': vendor
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MusicExportPreferencesResponse;
      return this.apiClient.callApi(
        '/my/music/preferences/export/{vendor}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postMusicExportJob operation.
     * @callback module:api/MusicExportApi~postMusicExportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MusicExportSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Music Export Jobs
     * Create Export Job for a user 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {Boolean} over16 Boolean age check
     * @param {Array.<module:model/MusicExportJob>} body 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [vendor] Specify Vendor Jobs
     * @param {module:api/MusicExportApi~postMusicExportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MusicExportSuccess}
     */
    postMusicExportJob(authorization, xAuthenticationProvider, xAPIKey, over16, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling postMusicExportJob");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling postMusicExportJob");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling postMusicExportJob");
      }
      // verify the required parameter 'over16' is set
      if (over16 === undefined || over16 === null) {
        throw new Error("Missing the required parameter 'over16' when calling postMusicExportJob");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postMusicExportJob");
      }

      let pathParams = {
      };
      let queryParams = {
        'over16': over16,
        'vendor': opts['vendor']
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MusicExportSuccess;
      return this.apiClient.callApi(
        '/my/music/exports/jobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postMusicPreferencesExport operation.
     * @callback module:api/MusicExportApi~postMusicPreferencesExportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MusicExportSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Music Export Preferences
     * Create export preferences (e.g. 3rd party vendors, partner id's) for a given BBC Music user. 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {module:model/MusicExportPreferences} body 
     * @param {module:api/MusicExportApi~postMusicPreferencesExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MusicExportSuccess}
     */
    postMusicPreferencesExport(authorization, xAuthenticationProvider, xAPIKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling postMusicPreferencesExport");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling postMusicPreferencesExport");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling postMusicPreferencesExport");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postMusicPreferencesExport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MusicExportSuccess;
      return this.apiClient.callApi(
        '/my/music/preferences/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postMusicPreferencesExportVendor operation.
     * @callback module:api/MusicExportApi~postMusicPreferencesExportVendorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Music Export Vendor Preferences
     * Create Vendor specific export preferences (e.g. 3rd party vendors, partner id's) for a given BBC Music user. 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {module:model/String} vendor Supported 3rd Party Vendor
     * @param {module:model/MusicExportPreferences} body 
     * @param {module:api/MusicExportApi~postMusicPreferencesExportVendorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postMusicPreferencesExportVendor(authorization, xAuthenticationProvider, xAPIKey, vendor, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling postMusicPreferencesExportVendor");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling postMusicPreferencesExportVendor");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling postMusicPreferencesExportVendor");
      }
      // verify the required parameter 'vendor' is set
      if (vendor === undefined || vendor === null) {
        throw new Error("Missing the required parameter 'vendor' when calling postMusicPreferencesExportVendor");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postMusicPreferencesExportVendor");
      }

      let pathParams = {
        'vendor': vendor
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/music/preferences/export/{vendor}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putMusicPreferencesExportVendor operation.
     * @callback module:api/MusicExportApi~putMusicPreferencesExportVendorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Music Export Vendor Preferences
     * Update vendor specific export preferences for a given BBC Music user. 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {module:model/String} vendor Supported 3rd Party Vendor
     * @param {module:model/MusicExportPreferences} body 
     * @param {module:api/MusicExportApi~putMusicPreferencesExportVendorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putMusicPreferencesExportVendor(authorization, xAuthenticationProvider, xAPIKey, vendor, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putMusicPreferencesExportVendor");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling putMusicPreferencesExportVendor");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling putMusicPreferencesExportVendor");
      }
      // verify the required parameter 'vendor' is set
      if (vendor === undefined || vendor === null) {
        throw new Error("Missing the required parameter 'vendor' when calling putMusicPreferencesExportVendor");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putMusicPreferencesExportVendor");
      }

      let pathParams = {
        'vendor': vendor
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/music/preferences/export/{vendor}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
