/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import PopularErrorResponse from '../model/PopularErrorResponse';
import PopularResponse from '../model/PopularResponse';
import ProgrammesResponse from '../model/ProgrammesResponse';
import RadioErrorResponse from '../model/RadioErrorResponse';

/**
* Programmes service.
* @module api/ProgrammesApi
* @version 1.0.0
*/
export default class ProgrammesApi {

    /**
    * Constructs a new ProgrammesApi. 
    * @alias module:api/ProgrammesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getPopularEpisodesClips operation.
     * @callback module:api/ProgrammesApi~getPopularEpisodesClipsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PopularResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Popular Episodes & Clips
     * Retrieve Popular Episodes & Clips 
     * @param {String} xAPIKey API_KEY
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [type] Programme type required. Accepts comma separated values
     * @param {module:model/String} [distinct] Filter by deduplication rule. E.g. 'tleo' returns programmes with distinct top level episode objects
     * @param {String} [network] Filter by network master brand ID (mid). Accepts comma separated values
     * @param {String} [networkUrlKey] Filter by network URL key. Accepts comma separated values
     * @param {String} [category] Filter by category. Accepts comma separated values
     * @param {String} [format] Filter by format. Accepts comma separated values
     * @param {module:model/String} [group] Filter by group. Accepts comma separated values
     * @param {module:model/String} [mediaType] Filter by programme media type. Accepts comma separated values
     * @param {String} [container] Filter by container. Accepts any pid e.g. brand,series,episode
     * @param {Array.<module:model/Object>} [mediaSet] Filter by media set name. Accepts comma separated combinations of the following: pc,mobile-download,android-download-high,apple-ios-download-high,mobile-cellular-main,mobile-phone-main,iptv-all
     * @param {String} [q] Search query String
     * @param {module:api/ProgrammesApi~getPopularEpisodesClipsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PopularResponse}
     */
    getPopularEpisodesClips(xAPIKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getPopularEpisodesClips");
      }

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type'],
        'distinct': opts['distinct'],
        'network': opts['network'],
        'network_url_key': opts['networkUrlKey'],
        'category': opts['category'],
        'format': opts['format'],
        'group': opts['group'],
        'media_type': opts['mediaType'],
        'container': opts['container'],
        'media_set': this.apiClient.buildCollectionParam(opts['mediaSet'], 'csv'),
        'q': opts['q']
      };
      let headerParams = {
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PopularResponse;
      return this.apiClient.callApi(
        '/radio/popular', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRadioProgrammes operation.
     * @callback module:api/ProgrammesApi~getRadioProgrammesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProgrammesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Radio programmes
     * Provides a paginated list of programmes by PID (brand, series, episode and clip). Accepts various filters and sorting methods.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining results as an array of Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param {String} xAPIKey API_KEY
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [kind] Filter by provided query. E.g. 'tleo' returns top level objects, ie. brands, orphaned series, and orphaned episodes
     * @param {String} [network] Filter by network master brand ID (mid). Accepts comma separated values
     * @param {String} [networkUrlKey] Filter by network URL key. Accepts comma separated values
     * @param {String} [category] Filter by category id. Accepts comma separated values. See /category endpoint below for the type of response provided
     * @param {module:model/String} [sort] Sort by provided query. E.g. 'title' sorts in ascending order, and -title sorts in descending order
     * @param {String} [container] Filter by container. Accepts any brand or series pid
     * @param {module:model/String} [type] Filter by programme type. Accepts comma separated values
     * @param {module:api/ProgrammesApi~getRadioProgrammesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProgrammesResponse}
     */
    getRadioProgrammes(xAPIKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getRadioProgrammes");
      }

      let pathParams = {
      };
      let queryParams = {
        'kind': opts['kind'],
        'network': opts['network'],
        'network_url_key': opts['networkUrlKey'],
        'category': opts['category'],
        'sort': opts['sort'],
        'container': opts['container'],
        'type': opts['type']
      };
      let headerParams = {
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProgrammesResponse;
      return this.apiClient.callApi(
        '/radio/programmes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRadioProgrammesByPid operation.
     * @callback module:api/ProgrammesApi~getRadioProgrammesByPidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProgrammesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Available radio programme by Pid
     * Find programmes by PID (brand, series, episode and clip)  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining results as an array of Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param {String} xAPIKey API_KEY
     * @param {String} pid pid
     * @param {module:api/ProgrammesApi~getRadioProgrammesByPidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProgrammesResponse}
     */
    getRadioProgrammesByPid(xAPIKey, pid, callback) {
      let postBody = null;
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getRadioProgrammesByPid");
      }
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling getRadioProgrammesByPid");
      }

      let pathParams = {
        'pid': pid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProgrammesResponse;
      return this.apiClient.callApi(
        '/radio/programmes/{pid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecommendations operation.
     * @callback module:api/ProgrammesApi~getRecommendationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProgrammesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recommended Programmes
     * Recommended Programmes from the Audience Platforms' Recomendations Service 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAPIKey API_KEY
     * @param {module:model/String} rights Only return available results for the web/mobile.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Paginated results offset
     * @param {Number} [limit] Paginated results limit
     * @param {module:api/ProgrammesApi~getRecommendationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProgrammesResponse}
     */
    getRecommendations(authorization, xAPIKey, rights, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getRecommendations");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getRecommendations");
      }
      // verify the required parameter 'rights' is set
      if (rights === undefined || rights === null) {
        throw new Error("Missing the required parameter 'rights' when calling getRecommendations");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'rights': rights
      };
      let headerParams = {
        'Authorization': authorization,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProgrammesResponse;
      return this.apiClient.callApi(
        '/my/programmes/recommendations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
