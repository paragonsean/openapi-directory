/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MusicPopularityArtists from '../model/MusicPopularityArtists';
import MusicPopularityError from '../model/MusicPopularityError';
import MusicPopularityPlaylists from '../model/MusicPopularityPlaylists';
import MusicPopularityTracks from '../model/MusicPopularityTracks';
import PersonalisedMusicBatchRequest from '../model/PersonalisedMusicBatchRequest';
import PersonalisedMusicErrorResponse from '../model/PersonalisedMusicErrorResponse';
import PersonalisedMusicRequest from '../model/PersonalisedMusicRequest';
import PersonalisedMusicResponse from '../model/PersonalisedMusicResponse';
import PersonalisedMusicSuccess from '../model/PersonalisedMusicSuccess';

/**
* Music service.
* @module api/MusicApi
* @version 1.0.0
*/
export default class MusicApi {

    /**
    * Constructs a new MusicApi. 
    * @alias module:api/MusicApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deletePersonalisedMusicFavouritesByTypeById operation.
     * @callback module:api/MusicApi~deletePersonalisedMusicFavouritesByTypeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedMusicSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Favourite Track or Clip
     * Delete track or clip from a BBC Music user favourites. 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {module:model/String} type Supported Music favourite types: Clips or Tracks
     * @param {String} id Clip PID or Track ID
     * @param {module:api/MusicApi~deletePersonalisedMusicFavouritesByTypeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedMusicSuccess}
     */
    deletePersonalisedMusicFavouritesByTypeById(authorization, xAuthenticationProvider, xAPIKey, type, id, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deletePersonalisedMusicFavouritesByTypeById");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling deletePersonalisedMusicFavouritesByTypeById");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling deletePersonalisedMusicFavouritesByTypeById");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling deletePersonalisedMusicFavouritesByTypeById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePersonalisedMusicFavouritesByTypeById");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalisedMusicSuccess;
      return this.apiClient.callApi(
        '/my/music/favourites/{type}/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePersonalisedMusicFollowsByTypeById operation.
     * @callback module:api/MusicApi~deletePersonalisedMusicFollowsByTypeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedMusicSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Followed Network, Category, Artist, Playlist and Genre
     * Remove a single network, category, artist, playlist, network, genre or service entity is in a users follows 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {module:model/String} type Supported Music follows types: Playlists, Services, Genres & Artists
     * @param {String} id Playlists, Services, Networks, Genres, Categories or Artists ID
     * @param {Object} opts Optional parameters
     * @param {Boolean} [musicData] Omits music data from the response, defaults to true
     * @param {module:model/String} [musicContext] Specify context to be passed to Music API
     * @param {Boolean} [musicWithinUk] Specify location to be passed to Music API
     * @param {module:api/MusicApi~deletePersonalisedMusicFollowsByTypeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedMusicSuccess}
     */
    deletePersonalisedMusicFollowsByTypeById(authorization, xAuthenticationProvider, xAPIKey, type, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deletePersonalisedMusicFollowsByTypeById");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling deletePersonalisedMusicFollowsByTypeById");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling deletePersonalisedMusicFollowsByTypeById");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling deletePersonalisedMusicFollowsByTypeById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePersonalisedMusicFollowsByTypeById");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
        'music-data': opts['musicData'],
        'music_context': opts['musicContext'],
        'music_within_uk': opts['musicWithinUk']
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalisedMusicSuccess;
      return this.apiClient.callApi(
        '/my/music/follows/{type}/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMusicPopularArtistById operation.
     * @callback module:api/MusicApi~getMusicPopularArtistByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MusicPopularityArtists} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Single Artist Popularity
     * Popularity Artist By Id 
     * @param {String} xAPIKey API_KEY
     * @param {String} id MusicBrainz Id - Used to get single resource score
     * @param {Object} opts Optional parameters
     * @param {String} [since] ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now
     * @param {String} [until] ISO 8601 Date yyyy-mm-dd.  Returns items between given 'since' and 'until' date params
     * @param {Boolean} [decomposed] In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is >= 31 days
     * @param {module:api/MusicApi~getMusicPopularArtistByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MusicPopularityArtists}
     */
    getMusicPopularArtistById(xAPIKey, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getMusicPopularArtistById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMusicPopularArtistById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'since': opts['since'],
        'until': opts['until'],
        'decomposed': opts['decomposed']
      };
      let headerParams = {
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MusicPopularityArtists;
      return this.apiClient.callApi(
        '/music/popular/artists/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMusicPopularArtists operation.
     * @callback module:api/MusicApi~getMusicPopularArtistsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MusicPopularityArtists} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Popular Artists
     * List of Most Popular artists from BBC Music. 
     * @param {String} xAPIKey API_KEY
     * @param {Object} opts Optional parameters
     * @param {String} [since] ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now
     * @param {String} [until] ISO 8601 Date yyyy-mm-dd.  Returns items between given 'since' and 'until' date params
     * @param {Boolean} [decomposed] In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is >= 31 days
     * @param {Number} [offset] Paginated results offset
     * @param {Number} [limit] Paginated results limit
     * @param {module:api/MusicApi~getMusicPopularArtistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MusicPopularityArtists}
     */
    getMusicPopularArtists(xAPIKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getMusicPopularArtists");
      }

      let pathParams = {
      };
      let queryParams = {
        'since': opts['since'],
        'until': opts['until'],
        'decomposed': opts['decomposed'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MusicPopularityArtists;
      return this.apiClient.callApi(
        '/music/popular/artists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMusicPopularPlaylistById operation.
     * @callback module:api/MusicApi~getMusicPopularPlaylistByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MusicPopularityPlaylists} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Single Playlist Popularity
     * Popular playlist by Id 
     * @param {String} xAPIKey API_KEY
     * @param {String} id BBC Music Playlist Id - Used to get single resource score
     * @param {Object} opts Optional parameters
     * @param {String} [since] ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now
     * @param {String} [until] ISO 8601 Date yyyy-mm-dd.  Returns items between given 'since' and 'until' date params
     * @param {Boolean} [decomposed] In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is >= 31 days
     * @param {module:api/MusicApi~getMusicPopularPlaylistByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MusicPopularityPlaylists}
     */
    getMusicPopularPlaylistById(xAPIKey, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getMusicPopularPlaylistById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMusicPopularPlaylistById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'since': opts['since'],
        'until': opts['until'],
        'decomposed': opts['decomposed']
      };
      let headerParams = {
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MusicPopularityPlaylists;
      return this.apiClient.callApi(
        '/music/popular/playlists/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMusicPopularPlaylists operation.
     * @callback module:api/MusicApi~getMusicPopularPlaylistsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MusicPopularityPlaylists} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Popular Playlists
     * List of Most Popular playlists from BBC Music. 
     * @param {String} xAPIKey API_KEY
     * @param {Object} opts Optional parameters
     * @param {String} [since] ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now
     * @param {String} [until] ISO 8601 Date yyyy-mm-dd.  Returns items between given 'since' and 'until' date params
     * @param {Boolean} [decomposed] In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is >= 31 days
     * @param {Number} [offset] Paginated results offset
     * @param {Number} [limit] Paginated results limit
     * @param {module:api/MusicApi~getMusicPopularPlaylistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MusicPopularityPlaylists}
     */
    getMusicPopularPlaylists(xAPIKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getMusicPopularPlaylists");
      }

      let pathParams = {
      };
      let queryParams = {
        'since': opts['since'],
        'until': opts['until'],
        'decomposed': opts['decomposed'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MusicPopularityPlaylists;
      return this.apiClient.callApi(
        '/music/popular/playlists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMusicPopularTrackById operation.
     * @callback module:api/MusicApi~getMusicPopularTrackByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MusicPopularityTracks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Single Track Popularity
     * Popular Track for BBC Music 
     * @param {String} xAPIKey API_KEY
     * @param {String} id BBC Music Track Id - Used to get single resource score
     * @param {Object} opts Optional parameters
     * @param {String} [since] ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now
     * @param {String} [until] ISO 8601 Date yyyy-mm-dd.  Returns items between given 'since' and 'until' date params
     * @param {String} [network] Return items with given Network ID
     * @param {String} [programme] Items with given Programme Pid
     * @param {String} [artist] MusicBrainz artist ID
     * @param {Boolean} [decomposed] In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is >= 31 days
     * @param {module:api/MusicApi~getMusicPopularTrackByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MusicPopularityTracks}
     */
    getMusicPopularTrackById(xAPIKey, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getMusicPopularTrackById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMusicPopularTrackById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'since': opts['since'],
        'until': opts['until'],
        'network': opts['network'],
        'programme': opts['programme'],
        'artist': opts['artist'],
        'decomposed': opts['decomposed']
      };
      let headerParams = {
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MusicPopularityTracks;
      return this.apiClient.callApi(
        '/music/popular/tracks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMusicPopularTracks operation.
     * @callback module:api/MusicApi~getMusicPopularTracksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MusicPopularityTracks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Popular Tracks
     * List of popular tracks for BBC Music. Filter by time, network, artist, playlist or programme. 
     * @param {String} xAPIKey API_KEY
     * @param {Object} opts Optional parameters
     * @param {String} [since] ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now
     * @param {String} [until] ISO 8601 Date yyyy-mm-dd.  Returns items between given 'since' and 'until' date params
     * @param {String} [network] Return items with given Network ID
     * @param {String} [programme] Items with given Programme Pid
     * @param {String} [artist] MusicBrainz artist ID
     * @param {Boolean} [decomposed] In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is >= 31 days
     * @param {Number} [offset] Paginated results offset
     * @param {Number} [limit] Paginated results limit
     * @param {module:api/MusicApi~getMusicPopularTracksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MusicPopularityTracks}
     */
    getMusicPopularTracks(xAPIKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getMusicPopularTracks");
      }

      let pathParams = {
      };
      let queryParams = {
        'since': opts['since'],
        'until': opts['until'],
        'network': opts['network'],
        'programme': opts['programme'],
        'artist': opts['artist'],
        'decomposed': opts['decomposed'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MusicPopularityTracks;
      return this.apiClient.callApi(
        '/music/popular/tracks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPersonalisedMusicFavourites operation.
     * @callback module:api/MusicApi~getPersonalisedMusicFavouritesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedMusicResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Favourite Tracks or Clips
     * List of favourited tracks and clips for a given user for BBC Music. 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Paginated results offset
     * @param {Number} [limit] Paginated results limit
     * @param {module:model/String} [action] Filters activities based on the type of action
     * @param {Boolean} [musicData] Omits music data from the response, defaults to true
     * @param {module:api/MusicApi~getPersonalisedMusicFavouritesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedMusicResponse}
     */
    getPersonalisedMusicFavourites(authorization, xAuthenticationProvider, xAPIKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPersonalisedMusicFavourites");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling getPersonalisedMusicFavourites");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getPersonalisedMusicFavourites");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'action': opts['action'],
        'music-data': opts['musicData']
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalisedMusicResponse;
      return this.apiClient.callApi(
        '/my/music/favourites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPersonalisedMusicFavouritesByType operation.
     * @callback module:api/MusicApi~getPersonalisedMusicFavouritesByTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedMusicResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Favourite Tracks or Clips by Type
     * List of favourited tracks or clips for a given user for BBC Music. 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {module:model/String} type Supported Music favourite types: Clips or Tracks
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [action] Filters activities based on the type of action
     * @param {Number} [offset] Paginated results offset
     * @param {Number} [limit] Paginated results limit
     * @param {module:api/MusicApi~getPersonalisedMusicFavouritesByTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedMusicResponse}
     */
    getPersonalisedMusicFavouritesByType(authorization, xAuthenticationProvider, xAPIKey, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPersonalisedMusicFavouritesByType");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling getPersonalisedMusicFavouritesByType");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getPersonalisedMusicFavouritesByType");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getPersonalisedMusicFavouritesByType");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
        'action': opts['action'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalisedMusicResponse;
      return this.apiClient.callApi(
        '/my/music/favourites/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPersonalisedMusicFavouritesByTypeById operation.
     * @callback module:api/MusicApi~getPersonalisedMusicFavouritesByTypeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedMusicResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Favourite Track or Clip
     * Check to see if a single track or clip entity is in a users favourites - determines UX of add button. 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {module:model/String} type Supported Music favourite types: Clips or Tracks
     * @param {String} id Clip PID or Track ID
     * @param {module:api/MusicApi~getPersonalisedMusicFavouritesByTypeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedMusicResponse}
     */
    getPersonalisedMusicFavouritesByTypeById(authorization, xAuthenticationProvider, xAPIKey, type, id, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPersonalisedMusicFavouritesByTypeById");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling getPersonalisedMusicFavouritesByTypeById");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getPersonalisedMusicFavouritesByTypeById");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getPersonalisedMusicFavouritesByTypeById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPersonalisedMusicFavouritesByTypeById");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalisedMusicResponse;
      return this.apiClient.callApi(
        '/my/music/favourites/{type}/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPersonalisedMusicFollows operation.
     * @callback module:api/MusicApi~getPersonalisedMusicFollowsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedMusicResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Followed Networks, Categories, Artists, Playlists and Genres
     * List of followed networks, categories, artists, playlists and genres for a given user for BBC Music. 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [action] Filters activities based on the type of action
     * @param {Boolean} [musicData] Omits music data from the response, defaults to true
     * @param {module:model/String} [musicContext] Specify context to be passed to Music API
     * @param {Boolean} [musicWithinUk] Specify location to be passed to Music API
     * @param {Number} [offset] Paginated results offset
     * @param {Number} [limit] Paginated results limit
     * @param {module:api/MusicApi~getPersonalisedMusicFollowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedMusicResponse}
     */
    getPersonalisedMusicFollows(authorization, xAuthenticationProvider, xAPIKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPersonalisedMusicFollows");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling getPersonalisedMusicFollows");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getPersonalisedMusicFollows");
      }

      let pathParams = {
      };
      let queryParams = {
        'action': opts['action'],
        'music-data': opts['musicData'],
        'music_context': opts['musicContext'],
        'music_within_uk': opts['musicWithinUk'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalisedMusicResponse;
      return this.apiClient.callApi(
        '/my/music/follows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPersonalisedMusicFollowsByType operation.
     * @callback module:api/MusicApi~getPersonalisedMusicFollowsByTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedMusicResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Followed Networks, Categories, Artists, Playlists and Genres by Type
     * List of followed networks, categories, artists, playlists, networks, genres, categories or services for a given BBC Music user. 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {module:model/String} type Supported Music follows types: Playlists, Services, Genres & Artists
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [action] Filters activities based on the type of action
     * @param {Boolean} [musicData] Omits music data from the response, defaults to true
     * @param {module:model/String} [musicContext] Specify context to be passed to Music API
     * @param {Boolean} [musicWithinUk] Specify location to be passed to Music API
     * @param {Number} [offset] Paginated results offset
     * @param {Number} [limit] Paginated results limit
     * @param {module:api/MusicApi~getPersonalisedMusicFollowsByTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedMusicResponse}
     */
    getPersonalisedMusicFollowsByType(authorization, xAuthenticationProvider, xAPIKey, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPersonalisedMusicFollowsByType");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling getPersonalisedMusicFollowsByType");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getPersonalisedMusicFollowsByType");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getPersonalisedMusicFollowsByType");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
        'action': opts['action'],
        'music-data': opts['musicData'],
        'music_context': opts['musicContext'],
        'music_within_uk': opts['musicWithinUk'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalisedMusicResponse;
      return this.apiClient.callApi(
        '/my/music/follows/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPersonalisedMusicFollowsByTypeById operation.
     * @callback module:api/MusicApi~getPersonalisedMusicFollowsByTypeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedMusicResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Followed Network, Category, Artist, Playlist and Genre
     * Check to see if a single network, category, artist, playlist, network, genre or service entity is in a users follows - determines UX of add button. 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {module:model/String} type Supported Music follows types: Playlists, Services, Genres & Artists
     * @param {String} id Playlists, Services, Networks, Genres, Categories or Artists ID
     * @param {Object} opts Optional parameters
     * @param {Boolean} [musicData] Omits music data from the response, defaults to true
     * @param {module:model/String} [musicContext] Specify context to be passed to Music API
     * @param {Boolean} [musicWithinUk] Specify location to be passed to Music API
     * @param {module:api/MusicApi~getPersonalisedMusicFollowsByTypeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedMusicResponse}
     */
    getPersonalisedMusicFollowsByTypeById(authorization, xAuthenticationProvider, xAPIKey, type, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPersonalisedMusicFollowsByTypeById");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling getPersonalisedMusicFollowsByTypeById");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getPersonalisedMusicFollowsByTypeById");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getPersonalisedMusicFollowsByTypeById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPersonalisedMusicFollowsByTypeById");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
        'music-data': opts['musicData'],
        'music_context': opts['musicContext'],
        'music_within_uk': opts['musicWithinUk']
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalisedMusicResponse;
      return this.apiClient.callApi(
        '/my/music/follows/{type}/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPersonalisedMusicFavouritesBatch operation.
     * @callback module:api/MusicApi~postPersonalisedMusicFavouritesBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedMusicResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Favourite Tracks or Clips
     * Add multiple tracks and/or clips to a BBC Music user's favourites.  N.B. Any HTML tags submitted in metadata will be removed 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {Array.<module:model/PersonalisedMusicBatchRequest>} body Action favourited or unfavourited
     * @param {module:api/MusicApi~postPersonalisedMusicFavouritesBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedMusicResponse}
     */
    postPersonalisedMusicFavouritesBatch(authorization, xAuthenticationProvider, xAPIKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling postPersonalisedMusicFavouritesBatch");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling postPersonalisedMusicFavouritesBatch");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling postPersonalisedMusicFavouritesBatch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postPersonalisedMusicFavouritesBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PersonalisedMusicResponse;
      return this.apiClient.callApi(
        '/my/music/favourites', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPersonalisedMusicFavouritesByTypeById operation.
     * @callback module:api/MusicApi~postPersonalisedMusicFavouritesByTypeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedMusicResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Favourite Track or Clip
     * Add track or clip to a BBC Music user favourites.  N.B. Any HTML tags submitted in metadata will be removed 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {module:model/String} type Supported Music favourite types: Clips or Tracks
     * @param {String} id Clip PID or Track ID
     * @param {module:model/PersonalisedMusicRequest} body Action favourited or unfavourited
     * @param {module:api/MusicApi~postPersonalisedMusicFavouritesByTypeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedMusicResponse}
     */
    postPersonalisedMusicFavouritesByTypeById(authorization, xAuthenticationProvider, xAPIKey, type, id, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling postPersonalisedMusicFavouritesByTypeById");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling postPersonalisedMusicFavouritesByTypeById");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling postPersonalisedMusicFavouritesByTypeById");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling postPersonalisedMusicFavouritesByTypeById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postPersonalisedMusicFavouritesByTypeById");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postPersonalisedMusicFavouritesByTypeById");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PersonalisedMusicResponse;
      return this.apiClient.callApi(
        '/my/music/favourites/{type}/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPersonalisedMusicFollowsBatch operation.
     * @callback module:api/MusicApi~postPersonalisedMusicFollowsBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedMusicSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Followed Networks, Categories, Artists, Playlists and Genres
     * Add networks, categories, artists, playlists, networks, genres or services in a users follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {Array.<module:model/PersonalisedMusicBatchRequest>} body Action followed or unfollowed
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [action] Filters activities based on the type of action
     * @param {Boolean} [musicData] Omits music data from the response, defaults to true
     * @param {module:model/String} [musicContext] Specify context to be passed to Music API
     * @param {Boolean} [musicWithinUk] Specify location to be passed to Music API
     * @param {module:api/MusicApi~postPersonalisedMusicFollowsBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedMusicSuccess}
     */
    postPersonalisedMusicFollowsBatch(authorization, xAuthenticationProvider, xAPIKey, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling postPersonalisedMusicFollowsBatch");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling postPersonalisedMusicFollowsBatch");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling postPersonalisedMusicFollowsBatch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postPersonalisedMusicFollowsBatch");
      }

      let pathParams = {
      };
      let queryParams = {
        'action': opts['action'],
        'music-data': opts['musicData'],
        'music_context': opts['musicContext'],
        'music_within_uk': opts['musicWithinUk']
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PersonalisedMusicSuccess;
      return this.apiClient.callApi(
        '/my/music/follows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPersonalisedMusicFollowsByTypeById operation.
     * @callback module:api/MusicApi~postPersonalisedMusicFollowsByTypeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedMusicSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Followed Network, Category, Artist, Playlist and Genre
     * Add a single network, category, artist, playlist, network, genre or service entity is in a users follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {module:model/String} type Supported Music follows types: Playlists, Services, Genres & Artists
     * @param {String} id Playlists, Services, Networks, Genres, Categories or Artists ID
     * @param {module:model/PersonalisedMusicRequest} body Action followed or unfollowed
     * @param {Object} opts Optional parameters
     * @param {Boolean} [musicData] Omits music data from the response, defaults to true
     * @param {module:model/String} [musicContext] Specify context to be passed to Music API
     * @param {Boolean} [musicWithinUk] Specify location to be passed to Music API
     * @param {module:api/MusicApi~postPersonalisedMusicFollowsByTypeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedMusicSuccess}
     */
    postPersonalisedMusicFollowsByTypeById(authorization, xAuthenticationProvider, xAPIKey, type, id, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling postPersonalisedMusicFollowsByTypeById");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling postPersonalisedMusicFollowsByTypeById");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling postPersonalisedMusicFollowsByTypeById");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling postPersonalisedMusicFollowsByTypeById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postPersonalisedMusicFollowsByTypeById");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postPersonalisedMusicFollowsByTypeById");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
        'music-data': opts['musicData'],
        'music_context': opts['musicContext'],
        'music_within_uk': opts['musicWithinUk']
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PersonalisedMusicSuccess;
      return this.apiClient.callApi(
        '/my/music/follows/{type}/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPersonalisedMusicFavouritesBatch operation.
     * @callback module:api/MusicApi~putPersonalisedMusicFavouritesBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedMusicSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Favourite Tracks or Clips
     * Update tracks or clips from a BBC Music user favourites.  N.B. Any HTML tags submitted in metadata will be removed 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {Array.<module:model/PersonalisedMusicBatchRequest>} body Action favourited or unfavourited
     * @param {module:api/MusicApi~putPersonalisedMusicFavouritesBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedMusicSuccess}
     */
    putPersonalisedMusicFavouritesBatch(authorization, xAuthenticationProvider, xAPIKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putPersonalisedMusicFavouritesBatch");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling putPersonalisedMusicFavouritesBatch");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling putPersonalisedMusicFavouritesBatch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPersonalisedMusicFavouritesBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PersonalisedMusicSuccess;
      return this.apiClient.callApi(
        '/my/music/favourites', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPersonalisedMusicFavouritesByTypeById operation.
     * @callback module:api/MusicApi~putPersonalisedMusicFavouritesByTypeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedMusicSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Favourite Track or Clip
     * Update tracks or clips from a BBC Music user favourites.  N.B. Any HTML tags submitted in metadata will be removed 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {module:model/String} type Supported Music favourite types: Clips or Tracks
     * @param {String} id Clip PID or Track ID
     * @param {module:model/PersonalisedMusicRequest} body Action favourited or unfavourited
     * @param {module:api/MusicApi~putPersonalisedMusicFavouritesByTypeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedMusicSuccess}
     */
    putPersonalisedMusicFavouritesByTypeById(authorization, xAuthenticationProvider, xAPIKey, type, id, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putPersonalisedMusicFavouritesByTypeById");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling putPersonalisedMusicFavouritesByTypeById");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling putPersonalisedMusicFavouritesByTypeById");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling putPersonalisedMusicFavouritesByTypeById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putPersonalisedMusicFavouritesByTypeById");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPersonalisedMusicFavouritesByTypeById");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PersonalisedMusicSuccess;
      return this.apiClient.callApi(
        '/my/music/favourites/{type}/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPersonalisedMusicFollowsBatch operation.
     * @callback module:api/MusicApi~putPersonalisedMusicFollowsBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedMusicSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Followed Networks, Categories, Artists, Playlists and Genres
     * Update networks, categories, artists, playlists, networks, genres or services in a users follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {Array.<module:model/PersonalisedMusicBatchRequest>} body Action followed or unfollowed
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [action] Filters activities based on the type of action
     * @param {Boolean} [musicData] Omits music data from the response, defaults to true
     * @param {module:model/String} [musicContext] Specify context to be passed to Music API
     * @param {Boolean} [musicWithinUk] Specify location to be passed to Music API
     * @param {module:api/MusicApi~putPersonalisedMusicFollowsBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedMusicSuccess}
     */
    putPersonalisedMusicFollowsBatch(authorization, xAuthenticationProvider, xAPIKey, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putPersonalisedMusicFollowsBatch");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling putPersonalisedMusicFollowsBatch");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling putPersonalisedMusicFollowsBatch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPersonalisedMusicFollowsBatch");
      }

      let pathParams = {
      };
      let queryParams = {
        'action': opts['action'],
        'music-data': opts['musicData'],
        'music_context': opts['musicContext'],
        'music_within_uk': opts['musicWithinUk']
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PersonalisedMusicSuccess;
      return this.apiClient.callApi(
        '/my/music/follows', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPersonalisedMusicFollowsByTypeById operation.
     * @callback module:api/MusicApi~putPersonalisedMusicFollowsByTypeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedMusicSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Followed Network, Category, Artist, Playlist and Genre
     * Update a single network, category, artist, playlist, network, genre or service entity is in a users follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {module:model/String} type Supported Music follows types: Playlists, Services, Genres & Artists
     * @param {String} id Playlists, Services, Networks, Genres, Categories or Artists ID
     * @param {module:model/PersonalisedMusicRequest} body Action followed or unfollowed
     * @param {Object} opts Optional parameters
     * @param {Boolean} [musicData] Omits music data from the response, defaults to true
     * @param {module:model/String} [musicContext] Specify context to be passed to Music API
     * @param {Boolean} [musicWithinUk] Specify location to be passed to Music API
     * @param {module:api/MusicApi~putPersonalisedMusicFollowsByTypeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedMusicSuccess}
     */
    putPersonalisedMusicFollowsByTypeById(authorization, xAuthenticationProvider, xAPIKey, type, id, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putPersonalisedMusicFollowsByTypeById");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling putPersonalisedMusicFollowsByTypeById");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling putPersonalisedMusicFollowsByTypeById");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling putPersonalisedMusicFollowsByTypeById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putPersonalisedMusicFollowsByTypeById");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPersonalisedMusicFollowsByTypeById");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
        'music-data': opts['musicData'],
        'music_context': opts['musicContext'],
        'music_within_uk': opts['musicWithinUk']
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PersonalisedMusicSuccess;
      return this.apiClient.callApi(
        '/my/music/follows/{type}/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
