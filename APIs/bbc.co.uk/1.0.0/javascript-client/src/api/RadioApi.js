/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PersonalisedRadioBatchRequest from '../model/PersonalisedRadioBatchRequest';
import PersonalisedRadioErrorResponse from '../model/PersonalisedRadioErrorResponse';
import PersonalisedRadioRequest from '../model/PersonalisedRadioRequest';
import PersonalisedRadioResponse from '../model/PersonalisedRadioResponse';
import PersonalisedRadioSuccessResponse from '../model/PersonalisedRadioSuccessResponse';

/**
* Radio service.
* @module api/RadioApi
* @version 1.0.0
*/
export default class RadioApi {

    /**
    * Constructs a new RadioApi. 
    * @alias module:api/RadioApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deletePersonalisedRadioByActivityTypeById operation.
     * @callback module:api/RadioApi~deletePersonalisedRadioByActivityTypeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedRadioSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Favourite Episode or Clip
     * Remove User favourite 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {module:model/String} type Supported Radio favourite types: Clips or Episodes
     * @param {String} pid pid
     * @param {module:api/RadioApi~deletePersonalisedRadioByActivityTypeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedRadioSuccessResponse}
     */
    deletePersonalisedRadioByActivityTypeById(authorization, xAuthenticationProvider, xAPIKey, type, pid, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deletePersonalisedRadioByActivityTypeById");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling deletePersonalisedRadioByActivityTypeById");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling deletePersonalisedRadioByActivityTypeById");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling deletePersonalisedRadioByActivityTypeById");
      }
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling deletePersonalisedRadioByActivityTypeById");
      }

      let pathParams = {
        'type': type,
        'pid': pid
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalisedRadioSuccessResponse;
      return this.apiClient.callApi(
        '/my/radio/favourites/{type}/{pid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePersonalisedRadioFollowsByTypeById operation.
     * @callback module:api/RadioApi~deletePersonalisedRadioFollowsByTypeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedRadioSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Followed Brand or Series
     * Remove 'brand' or 'series' items from a users iPlayer Radio follows 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {module:model/String} type Supported Radio follows types: Brands or Series
     * @param {String} pid pid
     * @param {module:api/RadioApi~deletePersonalisedRadioFollowsByTypeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedRadioSuccessResponse}
     */
    deletePersonalisedRadioFollowsByTypeById(authorization, xAuthenticationProvider, xAPIKey, type, pid, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deletePersonalisedRadioFollowsByTypeById");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling deletePersonalisedRadioFollowsByTypeById");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling deletePersonalisedRadioFollowsByTypeById");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling deletePersonalisedRadioFollowsByTypeById");
      }
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling deletePersonalisedRadioFollowsByTypeById");
      }

      let pathParams = {
        'type': type,
        'pid': pid
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalisedRadioSuccessResponse;
      return this.apiClient.callApi(
        '/my/radio/follows/{type}/{pid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPersonalisedRadioByActivityTypeById operation.
     * @callback module:api/RadioApi~getPersonalisedRadioByActivityTypeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedRadioResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Favourite Episode or Clip
     * Check to see if a single clip or episode entity is in a users favourites - determines UX of add button.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {module:model/String} type Supported Radio favourite types: Clips or Episodes
     * @param {String} pid pid
     * @param {Object} opts Optional parameters
     * @param {Boolean} [showAllActivity] Include items which have been 'soft' unfavourited in response. I.e items with UAS type of 'unfavourited'
     * @param {module:api/RadioApi~getPersonalisedRadioByActivityTypeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedRadioResponse}
     */
    getPersonalisedRadioByActivityTypeById(authorization, xAuthenticationProvider, xAPIKey, type, pid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPersonalisedRadioByActivityTypeById");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling getPersonalisedRadioByActivityTypeById");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getPersonalisedRadioByActivityTypeById");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getPersonalisedRadioByActivityTypeById");
      }
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling getPersonalisedRadioByActivityTypeById");
      }

      let pathParams = {
        'type': type,
        'pid': pid
      };
      let queryParams = {
        'show_all_activity': opts['showAllActivity']
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalisedRadioResponse;
      return this.apiClient.callApi(
        '/my/radio/favourites/{type}/{pid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPersonalisedRadioFavourites operation.
     * @callback module:api/RadioApi~getPersonalisedRadioFavouritesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedRadioResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Favourite Episodes and Clips
     * List of favourited episodes and clips for a given user for iPlayer Radio.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Paginated results offset
     * @param {Number} [limit] Paginated results limit
     * @param {module:model/String} [sort] Sort order for Personalised Radio results
     * @param {Boolean} [showAllActivity] Include items which have been 'soft' unfavourited in response. I.e items with UAS type of 'unfavourited'
     * @param {module:api/RadioApi~getPersonalisedRadioFavouritesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedRadioResponse}
     */
    getPersonalisedRadioFavourites(authorization, xAuthenticationProvider, xAPIKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPersonalisedRadioFavourites");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling getPersonalisedRadioFavourites");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getPersonalisedRadioFavourites");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'show_all_activity': opts['showAllActivity']
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalisedRadioResponse;
      return this.apiClient.callApi(
        '/my/radio/favourites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPersonalisedRadioFavouritesByType operation.
     * @callback module:api/RadioApi~getPersonalisedRadioFavouritesByTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedRadioResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Favourite Episodes and Clips by Type
     * List of followed 'clips' or 'episode' items for a given iPlayer Radio user  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {module:model/String} type Supported Radio favourite types: Clips or Episodes
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [sort] Sort order for Personalised Radio results
     * @param {Boolean} [showAllActivity] Include items which have been 'soft' unfavourited in response. I.e items with UAS type of 'unfavourited'
     * @param {Number} [offset] Paginated results offset
     * @param {Number} [limit] Paginated results limit
     * @param {module:api/RadioApi~getPersonalisedRadioFavouritesByTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedRadioResponse}
     */
    getPersonalisedRadioFavouritesByType(authorization, xAuthenticationProvider, xAPIKey, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPersonalisedRadioFavouritesByType");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling getPersonalisedRadioFavouritesByType");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getPersonalisedRadioFavouritesByType");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getPersonalisedRadioFavouritesByType");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
        'sort': opts['sort'],
        'show_all_activity': opts['showAllActivity'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalisedRadioResponse;
      return this.apiClient.callApi(
        '/my/radio/favourites/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPersonalisedRadioFollows operation.
     * @callback module:api/RadioApi~getPersonalisedRadioFollowsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedRadioResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Followed Brands and Series
     * List of favourited brands and series for a given user for iPlayer Radio.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Paginated results offset
     * @param {Number} [limit] Paginated results limit
     * @param {module:model/String} [sort] Sort order for Personalised Radio results
     * @param {Boolean} [showAllActivity] Include items which have been 'soft' unfollowed in response. I.e items with UAS type of 'unfollowed'
     * @param {module:api/RadioApi~getPersonalisedRadioFollowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedRadioResponse}
     */
    getPersonalisedRadioFollows(authorization, xAuthenticationProvider, xAPIKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPersonalisedRadioFollows");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling getPersonalisedRadioFollows");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getPersonalisedRadioFollows");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'show_all_activity': opts['showAllActivity']
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalisedRadioResponse;
      return this.apiClient.callApi(
        '/my/radio/follows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPersonalisedRadioFollowsByType operation.
     * @callback module:api/RadioApi~getPersonalisedRadioFollowsByTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedRadioResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Followed Brands or Series by Type
     * List of followed 'brand' or 'series' items for a given iPlayer Radio user  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {module:model/String} type Supported Radio follows types: Brands or Series
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [sort] Sort order for Personalised Radio results
     * @param {Number} [offset] Paginated results offset
     * @param {Number} [limit] Paginated results limit
     * @param {Boolean} [showAllActivity] Include items which have been 'soft' unfollowed in response. I.e items with UAS type of 'unfollowed'
     * @param {module:api/RadioApi~getPersonalisedRadioFollowsByTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedRadioResponse}
     */
    getPersonalisedRadioFollowsByType(authorization, xAuthenticationProvider, xAPIKey, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPersonalisedRadioFollowsByType");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling getPersonalisedRadioFollowsByType");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getPersonalisedRadioFollowsByType");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getPersonalisedRadioFollowsByType");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
        'sort': opts['sort'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'show_all_activity': opts['showAllActivity']
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalisedRadioResponse;
      return this.apiClient.callApi(
        '/my/radio/follows/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPersonalisedRadioFollowsByTypeById operation.
     * @callback module:api/RadioApi~getPersonalisedRadioFollowsByTypeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedRadioResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Followed Brand or Series
     * Check to see if a single brand or series entity is in a users follows - determines UX of add button. 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {module:model/String} type Supported Radio follows types: Brands or Series
     * @param {String} pid pid
     * @param {module:api/RadioApi~getPersonalisedRadioFollowsByTypeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedRadioResponse}
     */
    getPersonalisedRadioFollowsByTypeById(authorization, xAuthenticationProvider, xAPIKey, type, pid, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPersonalisedRadioFollowsByTypeById");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling getPersonalisedRadioFollowsByTypeById");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getPersonalisedRadioFollowsByTypeById");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getPersonalisedRadioFollowsByTypeById");
      }
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling getPersonalisedRadioFollowsByTypeById");
      }

      let pathParams = {
        'type': type,
        'pid': pid
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalisedRadioResponse;
      return this.apiClient.callApi(
        '/my/radio/follows/{type}/{pid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPersonalisedRadioPlays operation.
     * @callback module:api/RadioApi~getPersonalisedRadioPlaysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedRadioResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Played Episode or Clip
     * Returns mixed episode and clip plays for a given BBC iPlayer radio user.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Paginated results offset
     * @param {Number} [limit] Paginated results limit
     * @param {module:model/String} [sort] Sort order for Personalised Radio results
     * @param {Boolean} [showAllActivity] Include expired/unavailable items
     * @param {module:api/RadioApi~getPersonalisedRadioPlaysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedRadioResponse}
     */
    getPersonalisedRadioPlays(authorization, xAuthenticationProvider, xAPIKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getPersonalisedRadioPlays");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling getPersonalisedRadioPlays");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getPersonalisedRadioPlays");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'show_all_activity': opts['showAllActivity']
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalisedRadioResponse;
      return this.apiClient.callApi(
        '/my/radio/plays', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPersonalisedRadioBatch operation.
     * @callback module:api/RadioApi~postPersonalisedRadioBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedRadioSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Favourite Episodes and Clips
     * Add User favourites  N.B. Any HTML tags submitted in metadata will be removed 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {Array.<module:model/PersonalisedRadioBatchRequest>} body Action favourited or unfavourited
     * @param {module:api/RadioApi~postPersonalisedRadioBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedRadioSuccessResponse}
     */
    postPersonalisedRadioBatch(authorization, xAuthenticationProvider, xAPIKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling postPersonalisedRadioBatch");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling postPersonalisedRadioBatch");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling postPersonalisedRadioBatch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postPersonalisedRadioBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PersonalisedRadioSuccessResponse;
      return this.apiClient.callApi(
        '/my/radio/favourites', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPersonalisedRadioByActivityTypeById operation.
     * @callback module:api/RadioApi~postPersonalisedRadioByActivityTypeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedRadioSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Favourite Episode or Clip
     * Add User favourite  N.B. Any HTML tags submitted in metadata will be removed 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {module:model/String} type Supported Radio favourite types: Clips or Episodes
     * @param {String} pid pid
     * @param {module:model/PersonalisedRadioRequest} body Action favourited or unfavourited
     * @param {module:api/RadioApi~postPersonalisedRadioByActivityTypeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedRadioSuccessResponse}
     */
    postPersonalisedRadioByActivityTypeById(authorization, xAuthenticationProvider, xAPIKey, type, pid, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling postPersonalisedRadioByActivityTypeById");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling postPersonalisedRadioByActivityTypeById");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling postPersonalisedRadioByActivityTypeById");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling postPersonalisedRadioByActivityTypeById");
      }
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling postPersonalisedRadioByActivityTypeById");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postPersonalisedRadioByActivityTypeById");
      }

      let pathParams = {
        'type': type,
        'pid': pid
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PersonalisedRadioSuccessResponse;
      return this.apiClient.callApi(
        '/my/radio/favourites/{type}/{pid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPersonalisedRadioFollowsBatch operation.
     * @callback module:api/RadioApi~postPersonalisedRadioFollowsBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedRadioSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Followed Brands and Series
     * Add 'brand' or 'series' items to a users iPlayer Radio follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {Array.<module:model/PersonalisedRadioBatchRequest>} body Action followed or unfollowed
     * @param {module:api/RadioApi~postPersonalisedRadioFollowsBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedRadioSuccessResponse}
     */
    postPersonalisedRadioFollowsBatch(authorization, xAuthenticationProvider, xAPIKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling postPersonalisedRadioFollowsBatch");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling postPersonalisedRadioFollowsBatch");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling postPersonalisedRadioFollowsBatch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postPersonalisedRadioFollowsBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PersonalisedRadioSuccessResponse;
      return this.apiClient.callApi(
        '/my/radio/follows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPersonalisedRadioFollowsByTypeById operation.
     * @callback module:api/RadioApi~postPersonalisedRadioFollowsByTypeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedRadioSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Followed Brand or Series
     * Add 'brand' or 'series' items from a users iPlayer Radio follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {module:model/String} type Supported Radio follows types: Brands or Series
     * @param {String} pid pid
     * @param {module:model/PersonalisedRadioRequest} body Action followed or unfollowed
     * @param {module:api/RadioApi~postPersonalisedRadioFollowsByTypeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedRadioSuccessResponse}
     */
    postPersonalisedRadioFollowsByTypeById(authorization, xAuthenticationProvider, xAPIKey, type, pid, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling postPersonalisedRadioFollowsByTypeById");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling postPersonalisedRadioFollowsByTypeById");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling postPersonalisedRadioFollowsByTypeById");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling postPersonalisedRadioFollowsByTypeById");
      }
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling postPersonalisedRadioFollowsByTypeById");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postPersonalisedRadioFollowsByTypeById");
      }

      let pathParams = {
        'type': type,
        'pid': pid
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PersonalisedRadioSuccessResponse;
      return this.apiClient.callApi(
        '/my/radio/follows/{type}/{pid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPersonalisedRadioBatch operation.
     * @callback module:api/RadioApi~putPersonalisedRadioBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedRadioSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Favourite Episodes and Clips
     * Update user favourites  N.B. Any HTML tags submitted in metadata will be removed 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {Array.<module:model/PersonalisedRadioBatchRequest>} body Action favourited or unfavourited
     * @param {module:api/RadioApi~putPersonalisedRadioBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedRadioSuccessResponse}
     */
    putPersonalisedRadioBatch(authorization, xAuthenticationProvider, xAPIKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putPersonalisedRadioBatch");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling putPersonalisedRadioBatch");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling putPersonalisedRadioBatch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPersonalisedRadioBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PersonalisedRadioSuccessResponse;
      return this.apiClient.callApi(
        '/my/radio/favourites', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPersonalisedRadioByActivityTypeById operation.
     * @callback module:api/RadioApi~putPersonalisedRadioByActivityTypeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedRadioSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Favourite Episode or Clip
     * Update user favourite  N.B. Any HTML tags submitted in metadata will be removed 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {module:model/String} type Supported Radio favourite types: Clips or Episodes
     * @param {String} pid pid
     * @param {module:model/PersonalisedRadioRequest} body Action favourited or unfavourited
     * @param {module:api/RadioApi~putPersonalisedRadioByActivityTypeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedRadioSuccessResponse}
     */
    putPersonalisedRadioByActivityTypeById(authorization, xAuthenticationProvider, xAPIKey, type, pid, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putPersonalisedRadioByActivityTypeById");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling putPersonalisedRadioByActivityTypeById");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling putPersonalisedRadioByActivityTypeById");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling putPersonalisedRadioByActivityTypeById");
      }
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling putPersonalisedRadioByActivityTypeById");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPersonalisedRadioByActivityTypeById");
      }

      let pathParams = {
        'type': type,
        'pid': pid
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PersonalisedRadioSuccessResponse;
      return this.apiClient.callApi(
        '/my/radio/favourites/{type}/{pid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPersonalisedRadioFollowsBatch operation.
     * @callback module:api/RadioApi~putPersonalisedRadioFollowsBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedRadioSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Followed Brands and Series
     * Update 'brands' or 'series' items from a users iPlayer Radio follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {Array.<module:model/PersonalisedRadioBatchRequest>} body Action followed or unfollowed
     * @param {module:api/RadioApi~putPersonalisedRadioFollowsBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedRadioSuccessResponse}
     */
    putPersonalisedRadioFollowsBatch(authorization, xAuthenticationProvider, xAPIKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putPersonalisedRadioFollowsBatch");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling putPersonalisedRadioFollowsBatch");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling putPersonalisedRadioFollowsBatch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPersonalisedRadioFollowsBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PersonalisedRadioSuccessResponse;
      return this.apiClient.callApi(
        '/my/radio/follows', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPersonalisedRadioFollowsByTypeById operation.
     * @callback module:api/RadioApi~putPersonalisedRadioFollowsByTypeByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalisedRadioSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Followed Brand or Series
     * Update 'brand' or 'series' items from a users iPlayer Radio follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param {String} authorization Bearer OAUTH_TOKEN
     * @param {String} xAuthenticationProvider Authentication type
     * @param {String} xAPIKey API_KEY
     * @param {module:model/String} type Supported Radio follows types: Brands or Series
     * @param {String} pid pid
     * @param {module:model/PersonalisedRadioRequest} body Action followed or unfollowed
     * @param {module:api/RadioApi~putPersonalisedRadioFollowsByTypeByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalisedRadioSuccessResponse}
     */
    putPersonalisedRadioFollowsByTypeById(authorization, xAuthenticationProvider, xAPIKey, type, pid, body, callback) {
      let postBody = body;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling putPersonalisedRadioFollowsByTypeById");
      }
      // verify the required parameter 'xAuthenticationProvider' is set
      if (xAuthenticationProvider === undefined || xAuthenticationProvider === null) {
        throw new Error("Missing the required parameter 'xAuthenticationProvider' when calling putPersonalisedRadioFollowsByTypeById");
      }
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling putPersonalisedRadioFollowsByTypeById");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling putPersonalisedRadioFollowsByTypeById");
      }
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling putPersonalisedRadioFollowsByTypeById");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPersonalisedRadioFollowsByTypeById");
      }

      let pathParams = {
        'type': type,
        'pid': pid
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization,
        'X-Authentication-Provider': xAuthenticationProvider,
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PersonalisedRadioSuccessResponse;
      return this.apiClient.callApi(
        '/my/radio/follows/{type}/{pid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
