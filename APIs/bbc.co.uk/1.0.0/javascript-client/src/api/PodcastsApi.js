/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PodcastEpisodesResponse from '../model/PodcastEpisodesResponse';
import PodcastErrorResponse from '../model/PodcastErrorResponse';
import PodcastsFeaturedResponse from '../model/PodcastsFeaturedResponse';
import PodcastsResponse from '../model/PodcastsResponse';

/**
* Podcasts service.
* @module api/PodcastsApi
* @version 1.0.0
*/
export default class PodcastsApi {

    /**
    * Constructs a new PodcastsApi. 
    * @alias module:api/PodcastsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getPodcastByPid operation.
     * @callback module:api/PodcastsApi~getPodcastByPidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PodcastsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Podcast
     * Retrieve data about the podcast with the supplied PID 
     * @param {String} xAPIKey API_KEY
     * @param {String} pid pid
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Paginated results offset
     * @param {Number} [limit] Paginated results limit
     * @param {module:api/PodcastsApi~getPodcastByPidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PodcastsResponse}
     */
    getPodcastByPid(xAPIKey, pid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getPodcastByPid");
      }
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling getPodcastByPid");
      }

      let pathParams = {
        'pid': pid
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PodcastsResponse;
      return this.apiClient.callApi(
        '/podcasts/{pid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPodcastEpisodes operation.
     * @callback module:api/PodcastsApi~getPodcastEpisodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PodcastEpisodesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Podcast Episodes
     * Retrieve all episodes for a specific podcast 
     * @param {String} xAPIKey API_KEY
     * @param {String} pid pid
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Paginated results offset
     * @param {Number} [limit] Paginated results limit
     * @param {module:api/PodcastsApi~getPodcastEpisodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PodcastEpisodesResponse}
     */
    getPodcastEpisodes(xAPIKey, pid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getPodcastEpisodes");
      }
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling getPodcastEpisodes");
      }

      let pathParams = {
        'pid': pid
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PodcastEpisodesResponse;
      return this.apiClient.callApi(
        '/podcasts/{pid}/episodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPodcasts operation.
     * @callback module:api/PodcastsApi~getPodcastsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PodcastsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All Podcasts
     * Retrieve all Podcasts 
     * @param {String} xAPIKey API_KEY
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Paginated results offset
     * @param {Number} [limit] Paginated results limit
     * @param {module:model/String} [sort] Sort order for Podcasts results
     * @param {String} [network] Network Master Brand ID (mid)
     * @param {String} [networkUrlKey] Network URL key
     * @param {String} [category] Category ID
     * @param {String} [q] Search query String
     * @param {module:model/String} [coverage] Local, National or Regional Coverage
     * @param {module:api/PodcastsApi~getPodcastsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PodcastsResponse}
     */
    getPodcasts(xAPIKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getPodcasts");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'network': opts['network'],
        'network_url_key': opts['networkUrlKey'],
        'category': opts['category'],
        'q': opts['q'],
        'coverage': opts['coverage']
      };
      let headerParams = {
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PodcastsResponse;
      return this.apiClient.callApi(
        '/podcasts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPodcastsFeatured operation.
     * @callback module:api/PodcastsApi~getPodcastsFeaturedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PodcastsFeaturedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Featured Podcasts
     * Retrieve featured podcasts 
     * @param {String} xAPIKey API_KEY
     * @param {module:api/PodcastsApi~getPodcastsFeaturedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PodcastsFeaturedResponse}
     */
    getPodcastsFeatured(xAPIKey, callback) {
      let postBody = null;
      // verify the required parameter 'xAPIKey' is set
      if (xAPIKey === undefined || xAPIKey === null) {
        throw new Error("Missing the required parameter 'xAPIKey' when calling getPodcastsFeatured");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-API-Key': xAPIKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PodcastsFeaturedResponse;
      return this.apiClient.callApi(
        '/podcasts/featured', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
