/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MusicTrackArtist model module.
 * @module model/MusicTrackArtist
 * @version 1.0.0
 */
class MusicTrackArtist {
    /**
     * Constructs a new <code>MusicTrackArtist</code>.
     * @alias module:model/MusicTrackArtist
     * @param gid {String} 
     * @param imagePid {String} 
     * @param name {String} 
     * @param role {String} 
     * @param sortName {String} 
     */
    constructor(gid, imagePid, name, role, sortName) { 
        
        MusicTrackArtist.initialize(this, gid, imagePid, name, role, sortName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, gid, imagePid, name, role, sortName) { 
        obj['gid'] = gid;
        obj['imagePid'] = imagePid;
        obj['name'] = name;
        obj['role'] = role;
        obj['sortName'] = sortName;
    }

    /**
     * Constructs a <code>MusicTrackArtist</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MusicTrackArtist} obj Optional instance to populate.
     * @return {module:model/MusicTrackArtist} The populated <code>MusicTrackArtist</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MusicTrackArtist();

            if (data.hasOwnProperty('gid')) {
                obj['gid'] = ApiClient.convertToType(data['gid'], 'String');
            }
            if (data.hasOwnProperty('imagePid')) {
                obj['imagePid'] = ApiClient.convertToType(data['imagePid'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('sortName')) {
                obj['sortName'] = ApiClient.convertToType(data['sortName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MusicTrackArtist</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MusicTrackArtist</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MusicTrackArtist.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['gid'] && !(typeof data['gid'] === 'string' || data['gid'] instanceof String)) {
            throw new Error("Expected the field `gid` to be a primitive type in the JSON string but got " + data['gid']);
        }
        // ensure the json data is a string
        if (data['imagePid'] && !(typeof data['imagePid'] === 'string' || data['imagePid'] instanceof String)) {
            throw new Error("Expected the field `imagePid` to be a primitive type in the JSON string but got " + data['imagePid']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is a string
        if (data['sortName'] && !(typeof data['sortName'] === 'string' || data['sortName'] instanceof String)) {
            throw new Error("Expected the field `sortName` to be a primitive type in the JSON string but got " + data['sortName']);
        }

        return true;
    }


}

MusicTrackArtist.RequiredProperties = ["gid", "imagePid", "name", "role", "sortName"];

/**
 * @member {String} gid
 */
MusicTrackArtist.prototype['gid'] = undefined;

/**
 * @member {String} imagePid
 */
MusicTrackArtist.prototype['imagePid'] = undefined;

/**
 * @member {String} name
 */
MusicTrackArtist.prototype['name'] = undefined;

/**
 * @member {String} role
 */
MusicTrackArtist.prototype['role'] = undefined;

/**
 * @member {String} sortName
 */
MusicTrackArtist.prototype['sortName'] = undefined;






export default MusicTrackArtist;

