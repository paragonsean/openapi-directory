/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PersonalisedMusicImage from './PersonalisedMusicImage';
import PersonalisedMusicPlaylistVersion from './PersonalisedMusicPlaylistVersion';
import PersonalisedMusicTrack from './PersonalisedMusicTrack';

/**
 * The PersonalisedMusicPlaylist model module.
 * @module model/PersonalisedMusicPlaylist
 * @version 1.0.0
 */
class PersonalisedMusicPlaylist {
    /**
     * Constructs a new <code>PersonalisedMusicPlaylist</code>.
     * @alias module:model/PersonalisedMusicPlaylist
     */
    constructor() { 
        
        PersonalisedMusicPlaylist.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PersonalisedMusicPlaylist</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PersonalisedMusicPlaylist} obj Optional instance to populate.
     * @return {module:model/PersonalisedMusicPlaylist} The populated <code>PersonalisedMusicPlaylist</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PersonalisedMusicPlaylist();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [PersonalisedMusicImage]);
            }
            if (data.hasOwnProperty('playback_type')) {
                obj['playback_type'] = ApiClient.convertToType(data['playback_type'], 'String');
            }
            if (data.hasOwnProperty('service_id')) {
                obj['service_id'] = ApiClient.convertToType(data['service_id'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('tracks')) {
                obj['tracks'] = PersonalisedMusicTrack.constructFromObject(data['tracks']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = PersonalisedMusicPlaylistVersion.constructFromObject(data['version']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PersonalisedMusicPlaylist</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PersonalisedMusicPlaylist</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['images']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['images'])) {
                throw new Error("Expected the field `images` to be an array in the JSON data but got " + data['images']);
            }
            // validate the optional field `images` (array)
            for (const item of data['images']) {
                PersonalisedMusicImage.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['playback_type'] && !(typeof data['playback_type'] === 'string' || data['playback_type'] instanceof String)) {
            throw new Error("Expected the field `playback_type` to be a primitive type in the JSON string but got " + data['playback_type']);
        }
        // ensure the json data is a string
        if (data['service_id'] && !(typeof data['service_id'] === 'string' || data['service_id'] instanceof String)) {
            throw new Error("Expected the field `service_id` to be a primitive type in the JSON string but got " + data['service_id']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // validate the optional field `tracks`
        if (data['tracks']) { // data not null
          PersonalisedMusicTrack.validateJSON(data['tracks']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }
        // validate the optional field `version`
        if (data['version']) { // data not null
          PersonalisedMusicPlaylistVersion.validateJSON(data['version']);
        }

        return true;
    }


}



/**
 * @member {String} description
 */
PersonalisedMusicPlaylist.prototype['description'] = undefined;

/**
 * @member {Array.<module:model/PersonalisedMusicImage>} images
 */
PersonalisedMusicPlaylist.prototype['images'] = undefined;

/**
 * @member {String} playback_type
 */
PersonalisedMusicPlaylist.prototype['playback_type'] = undefined;

/**
 * @member {String} service_id
 */
PersonalisedMusicPlaylist.prototype['service_id'] = undefined;

/**
 * @member {String} title
 */
PersonalisedMusicPlaylist.prototype['title'] = undefined;

/**
 * @member {module:model/PersonalisedMusicTrack} tracks
 */
PersonalisedMusicPlaylist.prototype['tracks'] = undefined;

/**
 * @member {String} type
 */
PersonalisedMusicPlaylist.prototype['type'] = undefined;

/**
 * @member {String} updated_at
 */
PersonalisedMusicPlaylist.prototype['updated_at'] = undefined;

/**
 * @member {module:model/PersonalisedMusicPlaylistVersion} version
 */
PersonalisedMusicPlaylist.prototype['version'] = undefined;






export default PersonalisedMusicPlaylist;

