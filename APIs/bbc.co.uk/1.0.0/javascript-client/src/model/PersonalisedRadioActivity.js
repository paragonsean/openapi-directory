/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetaData from './MetaData';
import ProgrammeSummary from './ProgrammeSummary';

/**
 * The PersonalisedRadioActivity model module.
 * @module model/PersonalisedRadioActivity
 * @version 1.0.0
 */
class PersonalisedRadioActivity {
    /**
     * Constructs a new <code>PersonalisedRadioActivity</code>.
     * @alias module:model/PersonalisedRadioActivity
     * @param action {String} 
     * @param activity {String} 
     * @param addedAt {String} 
     * @param data {module:model/ProgrammeSummary} 
     * @param domain {String} 
     * @param id {String} 
     * @param metadata {module:model/MetaData} 
     * @param type {String} 
     * @param uasType {String} 
     * @param urn {String} 
     */
    constructor(action, activity, addedAt, data, domain, id, metadata, type, uasType, urn) { 
        
        PersonalisedRadioActivity.initialize(this, action, activity, addedAt, data, domain, id, metadata, type, uasType, urn);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, action, activity, addedAt, data, domain, id, metadata, type, uasType, urn) { 
        obj['action'] = action;
        obj['activity'] = activity;
        obj['added_at'] = addedAt;
        obj['data'] = data;
        obj['domain'] = domain;
        obj['id'] = id;
        obj['metadata'] = metadata;
        obj['type'] = type;
        obj['uas_type'] = uasType;
        obj['urn'] = urn;
    }

    /**
     * Constructs a <code>PersonalisedRadioActivity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PersonalisedRadioActivity} obj Optional instance to populate.
     * @return {module:model/PersonalisedRadioActivity} The populated <code>PersonalisedRadioActivity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PersonalisedRadioActivity();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('activity')) {
                obj['activity'] = ApiClient.convertToType(data['activity'], 'String');
            }
            if (data.hasOwnProperty('added_at')) {
                obj['added_at'] = ApiClient.convertToType(data['added_at'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ProgrammeSummary.constructFromObject(data['data']);
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = MetaData.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uas_type')) {
                obj['uas_type'] = ApiClient.convertToType(data['uas_type'], 'String');
            }
            if (data.hasOwnProperty('urn')) {
                obj['urn'] = ApiClient.convertToType(data['urn'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PersonalisedRadioActivity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PersonalisedRadioActivity</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PersonalisedRadioActivity.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['activity'] && !(typeof data['activity'] === 'string' || data['activity'] instanceof String)) {
            throw new Error("Expected the field `activity` to be a primitive type in the JSON string but got " + data['activity']);
        }
        // ensure the json data is a string
        if (data['added_at'] && !(typeof data['added_at'] === 'string' || data['added_at'] instanceof String)) {
            throw new Error("Expected the field `added_at` to be a primitive type in the JSON string but got " + data['added_at']);
        }
        // validate the optional field `data`
        if (data['data']) { // data not null
          ProgrammeSummary.validateJSON(data['data']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          MetaData.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uas_type'] && !(typeof data['uas_type'] === 'string' || data['uas_type'] instanceof String)) {
            throw new Error("Expected the field `uas_type` to be a primitive type in the JSON string but got " + data['uas_type']);
        }
        // ensure the json data is a string
        if (data['urn'] && !(typeof data['urn'] === 'string' || data['urn'] instanceof String)) {
            throw new Error("Expected the field `urn` to be a primitive type in the JSON string but got " + data['urn']);
        }

        return true;
    }


}

PersonalisedRadioActivity.RequiredProperties = ["action", "activity", "added_at", "data", "domain", "id", "metadata", "type", "uas_type", "urn"];

/**
 * @member {String} action
 */
PersonalisedRadioActivity.prototype['action'] = undefined;

/**
 * @member {String} activity
 */
PersonalisedRadioActivity.prototype['activity'] = undefined;

/**
 * @member {String} added_at
 */
PersonalisedRadioActivity.prototype['added_at'] = undefined;

/**
 * @member {module:model/ProgrammeSummary} data
 */
PersonalisedRadioActivity.prototype['data'] = undefined;

/**
 * @member {String} domain
 */
PersonalisedRadioActivity.prototype['domain'] = undefined;

/**
 * @member {String} id
 */
PersonalisedRadioActivity.prototype['id'] = undefined;

/**
 * @member {module:model/MetaData} metadata
 */
PersonalisedRadioActivity.prototype['metadata'] = undefined;

/**
 * @member {String} type
 */
PersonalisedRadioActivity.prototype['type'] = undefined;

/**
 * @member {String} uas_type
 */
PersonalisedRadioActivity.prototype['uas_type'] = undefined;

/**
 * @member {String} urn
 */
PersonalisedRadioActivity.prototype['urn'] = undefined;






export default PersonalisedRadioActivity;

