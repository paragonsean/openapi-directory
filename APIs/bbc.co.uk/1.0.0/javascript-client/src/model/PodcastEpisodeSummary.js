/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AvailableVersions from './AvailableVersions';
import Image from './Image';
import NetworkSummary from './NetworkSummary';
import ProgrammeTitles from './ProgrammeTitles';

/**
 * The PodcastEpisodeSummary model module.
 * @module model/PodcastEpisodeSummary
 * @version 1.0.0
 */
class PodcastEpisodeSummary {
    /**
     * Constructs a new <code>PodcastEpisodeSummary</code>.
     * @alias module:model/PodcastEpisodeSummary
     * @param assetUrl {String} 
     * @param availableVersions {Array.<module:model/AvailableVersions>} 
     * @param images {Array.<module:model/Image>} 
     * @param mediaType {String} 
     * @param networkSummary {module:model/NetworkSummary} 
     * @param pid {String} 
     * @param releaseDate {String} 
     * @param shortSynopsis {String} 
     * @param titles {module:model/ProgrammeTitles} 
     * @param type {String} 
     */
    constructor(assetUrl, availableVersions, images, mediaType, networkSummary, pid, releaseDate, shortSynopsis, titles, type) { 
        
        PodcastEpisodeSummary.initialize(this, assetUrl, availableVersions, images, mediaType, networkSummary, pid, releaseDate, shortSynopsis, titles, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, assetUrl, availableVersions, images, mediaType, networkSummary, pid, releaseDate, shortSynopsis, titles, type) { 
        obj['asset_url'] = assetUrl;
        obj['available_versions'] = availableVersions;
        obj['images'] = images;
        obj['media_type'] = mediaType;
        obj['network_summary'] = networkSummary;
        obj['pid'] = pid;
        obj['release_date'] = releaseDate;
        obj['short_synopsis'] = shortSynopsis;
        obj['titles'] = titles;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>PodcastEpisodeSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PodcastEpisodeSummary} obj Optional instance to populate.
     * @return {module:model/PodcastEpisodeSummary} The populated <code>PodcastEpisodeSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PodcastEpisodeSummary();

            if (data.hasOwnProperty('asset_url')) {
                obj['asset_url'] = ApiClient.convertToType(data['asset_url'], 'String');
            }
            if (data.hasOwnProperty('available_versions')) {
                obj['available_versions'] = ApiClient.convertToType(data['available_versions'], [AvailableVersions]);
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [Image]);
            }
            if (data.hasOwnProperty('media_type')) {
                obj['media_type'] = ApiClient.convertToType(data['media_type'], 'String');
            }
            if (data.hasOwnProperty('network_summary')) {
                obj['network_summary'] = NetworkSummary.constructFromObject(data['network_summary']);
            }
            if (data.hasOwnProperty('pid')) {
                obj['pid'] = ApiClient.convertToType(data['pid'], 'String');
            }
            if (data.hasOwnProperty('release_date')) {
                obj['release_date'] = ApiClient.convertToType(data['release_date'], 'String');
            }
            if (data.hasOwnProperty('short_synopsis')) {
                obj['short_synopsis'] = ApiClient.convertToType(data['short_synopsis'], 'String');
            }
            if (data.hasOwnProperty('titles')) {
                obj['titles'] = ProgrammeTitles.constructFromObject(data['titles']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PodcastEpisodeSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PodcastEpisodeSummary</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PodcastEpisodeSummary.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['asset_url'] && !(typeof data['asset_url'] === 'string' || data['asset_url'] instanceof String)) {
            throw new Error("Expected the field `asset_url` to be a primitive type in the JSON string but got " + data['asset_url']);
        }
        if (data['available_versions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['available_versions'])) {
                throw new Error("Expected the field `available_versions` to be an array in the JSON data but got " + data['available_versions']);
            }
            // validate the optional field `available_versions` (array)
            for (const item of data['available_versions']) {
                AvailableVersions.validateJSON(item);
            };
        }
        if (data['images']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['images'])) {
                throw new Error("Expected the field `images` to be an array in the JSON data but got " + data['images']);
            }
            // validate the optional field `images` (array)
            for (const item of data['images']) {
                Image.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['media_type'] && !(typeof data['media_type'] === 'string' || data['media_type'] instanceof String)) {
            throw new Error("Expected the field `media_type` to be a primitive type in the JSON string but got " + data['media_type']);
        }
        // validate the optional field `network_summary`
        if (data['network_summary']) { // data not null
          NetworkSummary.validateJSON(data['network_summary']);
        }
        // ensure the json data is a string
        if (data['pid'] && !(typeof data['pid'] === 'string' || data['pid'] instanceof String)) {
            throw new Error("Expected the field `pid` to be a primitive type in the JSON string but got " + data['pid']);
        }
        // ensure the json data is a string
        if (data['release_date'] && !(typeof data['release_date'] === 'string' || data['release_date'] instanceof String)) {
            throw new Error("Expected the field `release_date` to be a primitive type in the JSON string but got " + data['release_date']);
        }
        // ensure the json data is a string
        if (data['short_synopsis'] && !(typeof data['short_synopsis'] === 'string' || data['short_synopsis'] instanceof String)) {
            throw new Error("Expected the field `short_synopsis` to be a primitive type in the JSON string but got " + data['short_synopsis']);
        }
        // validate the optional field `titles`
        if (data['titles']) { // data not null
          ProgrammeTitles.validateJSON(data['titles']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

PodcastEpisodeSummary.RequiredProperties = ["asset_url", "available_versions", "images", "media_type", "network_summary", "pid", "release_date", "short_synopsis", "titles", "type"];

/**
 * @member {String} asset_url
 */
PodcastEpisodeSummary.prototype['asset_url'] = undefined;

/**
 * @member {Array.<module:model/AvailableVersions>} available_versions
 */
PodcastEpisodeSummary.prototype['available_versions'] = undefined;

/**
 * @member {Array.<module:model/Image>} images
 */
PodcastEpisodeSummary.prototype['images'] = undefined;

/**
 * @member {String} media_type
 */
PodcastEpisodeSummary.prototype['media_type'] = undefined;

/**
 * @member {module:model/NetworkSummary} network_summary
 */
PodcastEpisodeSummary.prototype['network_summary'] = undefined;

/**
 * @member {String} pid
 */
PodcastEpisodeSummary.prototype['pid'] = undefined;

/**
 * @member {String} release_date
 */
PodcastEpisodeSummary.prototype['release_date'] = undefined;

/**
 * @member {String} short_synopsis
 */
PodcastEpisodeSummary.prototype['short_synopsis'] = undefined;

/**
 * @member {module:model/ProgrammeTitles} titles
 */
PodcastEpisodeSummary.prototype['titles'] = undefined;

/**
 * @member {String} type
 */
PodcastEpisodeSummary.prototype['type'] = undefined;






export default PodcastEpisodeSummary;

