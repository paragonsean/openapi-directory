/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MusicRecordAudio model module.
 * @module model/MusicRecordAudio
 * @version 1.0.0
 */
class MusicRecordAudio {
    /**
     * Constructs a new <code>MusicRecordAudio</code>.
     * @alias module:model/MusicRecordAudio
     * @param audioType {String} 
     * @param duration {Number} 
     * @param identifier {String} 
     * @param resourceType {String} 
     */
    constructor(audioType, duration, identifier, resourceType) { 
        
        MusicRecordAudio.initialize(this, audioType, duration, identifier, resourceType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, audioType, duration, identifier, resourceType) { 
        obj['audioType'] = audioType;
        obj['duration'] = duration;
        obj['identifier'] = identifier;
        obj['resourceType'] = resourceType;
    }

    /**
     * Constructs a <code>MusicRecordAudio</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MusicRecordAudio} obj Optional instance to populate.
     * @return {module:model/MusicRecordAudio} The populated <code>MusicRecordAudio</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MusicRecordAudio();

            if (data.hasOwnProperty('audioType')) {
                obj['audioType'] = ApiClient.convertToType(data['audioType'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('resourceType')) {
                obj['resourceType'] = ApiClient.convertToType(data['resourceType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MusicRecordAudio</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MusicRecordAudio</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MusicRecordAudio.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['audioType'] && !(typeof data['audioType'] === 'string' || data['audioType'] instanceof String)) {
            throw new Error("Expected the field `audioType` to be a primitive type in the JSON string but got " + data['audioType']);
        }
        // ensure the json data is a string
        if (data['identifier'] && !(typeof data['identifier'] === 'string' || data['identifier'] instanceof String)) {
            throw new Error("Expected the field `identifier` to be a primitive type in the JSON string but got " + data['identifier']);
        }
        // ensure the json data is a string
        if (data['resourceType'] && !(typeof data['resourceType'] === 'string' || data['resourceType'] instanceof String)) {
            throw new Error("Expected the field `resourceType` to be a primitive type in the JSON string but got " + data['resourceType']);
        }

        return true;
    }


}

MusicRecordAudio.RequiredProperties = ["audioType", "duration", "identifier", "resourceType"];

/**
 * @member {String} audioType
 */
MusicRecordAudio.prototype['audioType'] = undefined;

/**
 * @member {Number} duration
 */
MusicRecordAudio.prototype['duration'] = undefined;

/**
 * @member {String} identifier
 */
MusicRecordAudio.prototype['identifier'] = undefined;

/**
 * @member {String} resourceType
 */
MusicRecordAudio.prototype['resourceType'] = undefined;






export default MusicRecordAudio;

