/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DateRange from './DateRange';

/**
 * The Service model module.
 * @module model/Service
 * @version 1.0.0
 */
class Service {
    /**
     * Constructs a new <code>Service</code>.
     * @alias module:model/Service
     * @param active {Boolean} 
     * @param coverage {String} 
     * @param dateRanges {Array.<module:model/DateRange>} 
     * @param _default {Boolean} 
     * @param defaultLanguage {String} 
     * @param id {String} 
     * @param region {String} 
     * @param shortTitle {String} 
     * @param title {String} 
     * @param type {String} 
     */
    constructor(active, coverage, dateRanges, _default, defaultLanguage, id, region, shortTitle, title, type) { 
        
        Service.initialize(this, active, coverage, dateRanges, _default, defaultLanguage, id, region, shortTitle, title, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, active, coverage, dateRanges, _default, defaultLanguage, id, region, shortTitle, title, type) { 
        obj['active'] = active;
        obj['coverage'] = coverage;
        obj['date_ranges'] = dateRanges;
        obj['default'] = _default;
        obj['default_language'] = defaultLanguage;
        obj['id'] = id;
        obj['region'] = region;
        obj['short_title'] = shortTitle;
        obj['title'] = title;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Service</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Service} obj Optional instance to populate.
     * @return {module:model/Service} The populated <code>Service</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Service();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('coverage')) {
                obj['coverage'] = ApiClient.convertToType(data['coverage'], 'String');
            }
            if (data.hasOwnProperty('date_ranges')) {
                obj['date_ranges'] = ApiClient.convertToType(data['date_ranges'], [DateRange]);
            }
            if (data.hasOwnProperty('default')) {
                obj['default'] = ApiClient.convertToType(data['default'], 'Boolean');
            }
            if (data.hasOwnProperty('default_language')) {
                obj['default_language'] = ApiClient.convertToType(data['default_language'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('short_title')) {
                obj['short_title'] = ApiClient.convertToType(data['short_title'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Service</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Service</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Service.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['coverage'] && !(typeof data['coverage'] === 'string' || data['coverage'] instanceof String)) {
            throw new Error("Expected the field `coverage` to be a primitive type in the JSON string but got " + data['coverage']);
        }
        if (data['date_ranges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['date_ranges'])) {
                throw new Error("Expected the field `date_ranges` to be an array in the JSON data but got " + data['date_ranges']);
            }
            // validate the optional field `date_ranges` (array)
            for (const item of data['date_ranges']) {
                DateRange.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['default_language'] && !(typeof data['default_language'] === 'string' || data['default_language'] instanceof String)) {
            throw new Error("Expected the field `default_language` to be a primitive type in the JSON string but got " + data['default_language']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['short_title'] && !(typeof data['short_title'] === 'string' || data['short_title'] instanceof String)) {
            throw new Error("Expected the field `short_title` to be a primitive type in the JSON string but got " + data['short_title']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Service.RequiredProperties = ["active", "coverage", "date_ranges", "default", "default_language", "id", "region", "short_title", "title", "type"];

/**
 * @member {Boolean} active
 */
Service.prototype['active'] = undefined;

/**
 * @member {String} coverage
 */
Service.prototype['coverage'] = undefined;

/**
 * @member {Array.<module:model/DateRange>} date_ranges
 */
Service.prototype['date_ranges'] = undefined;

/**
 * @member {Boolean} default
 */
Service.prototype['default'] = undefined;

/**
 * @member {String} default_language
 */
Service.prototype['default_language'] = undefined;

/**
 * @member {String} id
 */
Service.prototype['id'] = undefined;

/**
 * @member {String} region
 */
Service.prototype['region'] = undefined;

/**
 * @member {String} short_title
 */
Service.prototype['short_title'] = undefined;

/**
 * @member {String} title
 */
Service.prototype['title'] = undefined;

/**
 * @member {String} type
 */
Service.prototype['type'] = undefined;






export default Service;

