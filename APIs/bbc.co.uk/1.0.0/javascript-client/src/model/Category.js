/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChildCategory from './ChildCategory';

/**
 * The Category model module.
 * @module model/Category
 * @version 1.0.0
 */
class Category {
    /**
     * Constructs a new <code>Category</code>.
     * @alias module:model/Category
     * @param categoryType {String} 
     * @param childCategories {Array.<module:model/ChildCategory>} 
     * @param depth {Number} 
     * @param id {String} 
     * @param pipId {String} 
     * @param title {String} 
     * @param type {String} 
     * @param urlKey {String} 
     */
    constructor(categoryType, childCategories, depth, id, pipId, title, type, urlKey) { 
        
        Category.initialize(this, categoryType, childCategories, depth, id, pipId, title, type, urlKey);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, categoryType, childCategories, depth, id, pipId, title, type, urlKey) { 
        obj['category_type'] = categoryType;
        obj['child_categories'] = childCategories;
        obj['depth'] = depth;
        obj['id'] = id;
        obj['pip_id'] = pipId;
        obj['title'] = title;
        obj['type'] = type;
        obj['url_key'] = urlKey;
    }

    /**
     * Constructs a <code>Category</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Category} obj Optional instance to populate.
     * @return {module:model/Category} The populated <code>Category</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Category();

            if (data.hasOwnProperty('category_type')) {
                obj['category_type'] = ApiClient.convertToType(data['category_type'], 'String');
            }
            if (data.hasOwnProperty('child_categories')) {
                obj['child_categories'] = ApiClient.convertToType(data['child_categories'], [ChildCategory]);
            }
            if (data.hasOwnProperty('depth')) {
                obj['depth'] = ApiClient.convertToType(data['depth'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('pip_id')) {
                obj['pip_id'] = ApiClient.convertToType(data['pip_id'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url_key')) {
                obj['url_key'] = ApiClient.convertToType(data['url_key'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Category</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Category</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Category.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['category_type'] && !(typeof data['category_type'] === 'string' || data['category_type'] instanceof String)) {
            throw new Error("Expected the field `category_type` to be a primitive type in the JSON string but got " + data['category_type']);
        }
        if (data['child_categories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['child_categories'])) {
                throw new Error("Expected the field `child_categories` to be an array in the JSON data but got " + data['child_categories']);
            }
            // validate the optional field `child_categories` (array)
            for (const item of data['child_categories']) {
                ChildCategory.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['pip_id'] && !(typeof data['pip_id'] === 'string' || data['pip_id'] instanceof String)) {
            throw new Error("Expected the field `pip_id` to be a primitive type in the JSON string but got " + data['pip_id']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url_key'] && !(typeof data['url_key'] === 'string' || data['url_key'] instanceof String)) {
            throw new Error("Expected the field `url_key` to be a primitive type in the JSON string but got " + data['url_key']);
        }

        return true;
    }


}

Category.RequiredProperties = ["category_type", "child_categories", "depth", "id", "pip_id", "title", "type", "url_key"];

/**
 * @member {String} category_type
 */
Category.prototype['category_type'] = undefined;

/**
 * @member {Array.<module:model/ChildCategory>} child_categories
 */
Category.prototype['child_categories'] = undefined;

/**
 * @member {Number} depth
 */
Category.prototype['depth'] = undefined;

/**
 * @member {String} id
 */
Category.prototype['id'] = undefined;

/**
 * @member {String} pip_id
 */
Category.prototype['pip_id'] = undefined;

/**
 * @member {String} title
 */
Category.prototype['title'] = undefined;

/**
 * @member {String} type
 */
Category.prototype['type'] = undefined;

/**
 * @member {String} url_key
 */
Category.prototype['url_key'] = undefined;






export default Category;

