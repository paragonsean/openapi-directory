/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AvailableVersions model module.
 * @module model/AvailableVersions
 * @version 1.0.0
 */
class AvailableVersions {
    /**
     * Constructs a new <code>AvailableVersions</code>.
     * @alias module:model/AvailableVersions
     * @param available {String} 
     * @param availableFromDate {String} 
     * @param availableToDate {String} 
     * @param duration {String} 
     * @param hasGuidance {Boolean} 
     * @param mediaSet {String} 
     * @param type {String} 
     * @param versionPid {String} 
     * @param versionType {String} 
     */
    constructor(available, availableFromDate, availableToDate, duration, hasGuidance, mediaSet, type, versionPid, versionType) { 
        
        AvailableVersions.initialize(this, available, availableFromDate, availableToDate, duration, hasGuidance, mediaSet, type, versionPid, versionType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, available, availableFromDate, availableToDate, duration, hasGuidance, mediaSet, type, versionPid, versionType) { 
        obj['available'] = available;
        obj['available_from_date'] = availableFromDate;
        obj['available_to_date'] = availableToDate;
        obj['duration'] = duration;
        obj['has_guidance'] = hasGuidance;
        obj['media_set'] = mediaSet;
        obj['type'] = type;
        obj['version_pid'] = versionPid;
        obj['version_type'] = versionType;
    }

    /**
     * Constructs a <code>AvailableVersions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AvailableVersions} obj Optional instance to populate.
     * @return {module:model/AvailableVersions} The populated <code>AvailableVersions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AvailableVersions();

            if (data.hasOwnProperty('available')) {
                obj['available'] = ApiClient.convertToType(data['available'], 'String');
            }
            if (data.hasOwnProperty('available_from_date')) {
                obj['available_from_date'] = ApiClient.convertToType(data['available_from_date'], 'String');
            }
            if (data.hasOwnProperty('available_to_date')) {
                obj['available_to_date'] = ApiClient.convertToType(data['available_to_date'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'String');
            }
            if (data.hasOwnProperty('has_guidance')) {
                obj['has_guidance'] = ApiClient.convertToType(data['has_guidance'], 'Boolean');
            }
            if (data.hasOwnProperty('media_set')) {
                obj['media_set'] = ApiClient.convertToType(data['media_set'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('version_pid')) {
                obj['version_pid'] = ApiClient.convertToType(data['version_pid'], 'String');
            }
            if (data.hasOwnProperty('version_type')) {
                obj['version_type'] = ApiClient.convertToType(data['version_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AvailableVersions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AvailableVersions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AvailableVersions.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['available'] && !(typeof data['available'] === 'string' || data['available'] instanceof String)) {
            throw new Error("Expected the field `available` to be a primitive type in the JSON string but got " + data['available']);
        }
        // ensure the json data is a string
        if (data['available_from_date'] && !(typeof data['available_from_date'] === 'string' || data['available_from_date'] instanceof String)) {
            throw new Error("Expected the field `available_from_date` to be a primitive type in the JSON string but got " + data['available_from_date']);
        }
        // ensure the json data is a string
        if (data['available_to_date'] && !(typeof data['available_to_date'] === 'string' || data['available_to_date'] instanceof String)) {
            throw new Error("Expected the field `available_to_date` to be a primitive type in the JSON string but got " + data['available_to_date']);
        }
        // ensure the json data is a string
        if (data['duration'] && !(typeof data['duration'] === 'string' || data['duration'] instanceof String)) {
            throw new Error("Expected the field `duration` to be a primitive type in the JSON string but got " + data['duration']);
        }
        // ensure the json data is a string
        if (data['media_set'] && !(typeof data['media_set'] === 'string' || data['media_set'] instanceof String)) {
            throw new Error("Expected the field `media_set` to be a primitive type in the JSON string but got " + data['media_set']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['version_pid'] && !(typeof data['version_pid'] === 'string' || data['version_pid'] instanceof String)) {
            throw new Error("Expected the field `version_pid` to be a primitive type in the JSON string but got " + data['version_pid']);
        }
        // ensure the json data is a string
        if (data['version_type'] && !(typeof data['version_type'] === 'string' || data['version_type'] instanceof String)) {
            throw new Error("Expected the field `version_type` to be a primitive type in the JSON string but got " + data['version_type']);
        }

        return true;
    }


}

AvailableVersions.RequiredProperties = ["available", "available_from_date", "available_to_date", "duration", "has_guidance", "media_set", "type", "version_pid", "version_type"];

/**
 * @member {String} available
 */
AvailableVersions.prototype['available'] = undefined;

/**
 * @member {String} available_from_date
 */
AvailableVersions.prototype['available_from_date'] = undefined;

/**
 * @member {String} available_to_date
 */
AvailableVersions.prototype['available_to_date'] = undefined;

/**
 * @member {String} duration
 */
AvailableVersions.prototype['duration'] = undefined;

/**
 * @member {Boolean} has_guidance
 */
AvailableVersions.prototype['has_guidance'] = undefined;

/**
 * @member {String} media_set
 */
AvailableVersions.prototype['media_set'] = undefined;

/**
 * @member {String} type
 */
AvailableVersions.prototype['type'] = undefined;

/**
 * @member {String} version_pid
 */
AvailableVersions.prototype['version_pid'] = undefined;

/**
 * @member {String} version_type
 */
AvailableVersions.prototype['version_type'] = undefined;






export default AvailableVersions;

