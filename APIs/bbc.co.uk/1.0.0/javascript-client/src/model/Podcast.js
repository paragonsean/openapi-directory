/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CategorySummary from './CategorySummary';
import Image from './Image';
import NetworkSummary from './NetworkSummary';
import PodcastEpisodeSummary from './PodcastEpisodeSummary';
import PodcastSynopses from './PodcastSynopses';
import ProgrammeTitles from './ProgrammeTitles';

/**
 * The Podcast model module.
 * @module model/Podcast
 * @version 1.0.0
 */
class Podcast {
    /**
     * Constructs a new <code>Podcast</code>.
     * @alias module:model/Podcast
     * @param categorySummaries {Array.<module:model/CategorySummary>} 
     * @param daysAvailable {Number} 
     * @param entityType {String} 
     * @param firstPublishedDate {String} 
     * @param frequency {String} 
     * @param images {Array.<module:model/Image>} 
     * @param latestAvailableEpisodes {Array.<module:model/PodcastEpisodeSummary>} 
     * @param networkSummary {module:model/NetworkSummary} 
     * @param pid {String} 
     * @param rssUrl {String} 
     * @param synopses {module:model/PodcastSynopses} 
     * @param territory {String} 
     * @param titles {module:model/ProgrammeTitles} 
     * @param totalAvailableEpisodes {Number} 
     * @param type {String} 
     * @param updatedAt {String} 
     */
    constructor(categorySummaries, daysAvailable, entityType, firstPublishedDate, frequency, images, latestAvailableEpisodes, networkSummary, pid, rssUrl, synopses, territory, titles, totalAvailableEpisodes, type, updatedAt) { 
        
        Podcast.initialize(this, categorySummaries, daysAvailable, entityType, firstPublishedDate, frequency, images, latestAvailableEpisodes, networkSummary, pid, rssUrl, synopses, territory, titles, totalAvailableEpisodes, type, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, categorySummaries, daysAvailable, entityType, firstPublishedDate, frequency, images, latestAvailableEpisodes, networkSummary, pid, rssUrl, synopses, territory, titles, totalAvailableEpisodes, type, updatedAt) { 
        obj['category_summaries'] = categorySummaries;
        obj['days_available'] = daysAvailable;
        obj['entity_type'] = entityType;
        obj['first_published_date'] = firstPublishedDate;
        obj['frequency'] = frequency;
        obj['images'] = images;
        obj['latest_available_episodes'] = latestAvailableEpisodes;
        obj['network_summary'] = networkSummary;
        obj['pid'] = pid;
        obj['rss_url'] = rssUrl;
        obj['synopses'] = synopses;
        obj['territory'] = territory;
        obj['titles'] = titles;
        obj['total_available_episodes'] = totalAvailableEpisodes;
        obj['type'] = type;
        obj['updated_at'] = updatedAt;
    }

    /**
     * Constructs a <code>Podcast</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Podcast} obj Optional instance to populate.
     * @return {module:model/Podcast} The populated <code>Podcast</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Podcast();

            if (data.hasOwnProperty('category_summaries')) {
                obj['category_summaries'] = ApiClient.convertToType(data['category_summaries'], [CategorySummary]);
            }
            if (data.hasOwnProperty('days_available')) {
                obj['days_available'] = ApiClient.convertToType(data['days_available'], 'Number');
            }
            if (data.hasOwnProperty('entity_type')) {
                obj['entity_type'] = ApiClient.convertToType(data['entity_type'], 'String');
            }
            if (data.hasOwnProperty('first_published_date')) {
                obj['first_published_date'] = ApiClient.convertToType(data['first_published_date'], 'String');
            }
            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = ApiClient.convertToType(data['frequency'], 'String');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [Image]);
            }
            if (data.hasOwnProperty('latest_available_episodes')) {
                obj['latest_available_episodes'] = ApiClient.convertToType(data['latest_available_episodes'], [PodcastEpisodeSummary]);
            }
            if (data.hasOwnProperty('network_summary')) {
                obj['network_summary'] = NetworkSummary.constructFromObject(data['network_summary']);
            }
            if (data.hasOwnProperty('pid')) {
                obj['pid'] = ApiClient.convertToType(data['pid'], 'String');
            }
            if (data.hasOwnProperty('rss_url')) {
                obj['rss_url'] = ApiClient.convertToType(data['rss_url'], 'String');
            }
            if (data.hasOwnProperty('synopses')) {
                obj['synopses'] = PodcastSynopses.constructFromObject(data['synopses']);
            }
            if (data.hasOwnProperty('territory')) {
                obj['territory'] = ApiClient.convertToType(data['territory'], 'String');
            }
            if (data.hasOwnProperty('titles')) {
                obj['titles'] = ProgrammeTitles.constructFromObject(data['titles']);
            }
            if (data.hasOwnProperty('total_available_episodes')) {
                obj['total_available_episodes'] = ApiClient.convertToType(data['total_available_episodes'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Podcast</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Podcast</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Podcast.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['category_summaries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['category_summaries'])) {
                throw new Error("Expected the field `category_summaries` to be an array in the JSON data but got " + data['category_summaries']);
            }
            // validate the optional field `category_summaries` (array)
            for (const item of data['category_summaries']) {
                CategorySummary.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['entity_type'] && !(typeof data['entity_type'] === 'string' || data['entity_type'] instanceof String)) {
            throw new Error("Expected the field `entity_type` to be a primitive type in the JSON string but got " + data['entity_type']);
        }
        // ensure the json data is a string
        if (data['first_published_date'] && !(typeof data['first_published_date'] === 'string' || data['first_published_date'] instanceof String)) {
            throw new Error("Expected the field `first_published_date` to be a primitive type in the JSON string but got " + data['first_published_date']);
        }
        // ensure the json data is a string
        if (data['frequency'] && !(typeof data['frequency'] === 'string' || data['frequency'] instanceof String)) {
            throw new Error("Expected the field `frequency` to be a primitive type in the JSON string but got " + data['frequency']);
        }
        if (data['images']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['images'])) {
                throw new Error("Expected the field `images` to be an array in the JSON data but got " + data['images']);
            }
            // validate the optional field `images` (array)
            for (const item of data['images']) {
                Image.validateJSON(item);
            };
        }
        if (data['latest_available_episodes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['latest_available_episodes'])) {
                throw new Error("Expected the field `latest_available_episodes` to be an array in the JSON data but got " + data['latest_available_episodes']);
            }
            // validate the optional field `latest_available_episodes` (array)
            for (const item of data['latest_available_episodes']) {
                PodcastEpisodeSummary.validateJSON(item);
            };
        }
        // validate the optional field `network_summary`
        if (data['network_summary']) { // data not null
          NetworkSummary.validateJSON(data['network_summary']);
        }
        // ensure the json data is a string
        if (data['pid'] && !(typeof data['pid'] === 'string' || data['pid'] instanceof String)) {
            throw new Error("Expected the field `pid` to be a primitive type in the JSON string but got " + data['pid']);
        }
        // ensure the json data is a string
        if (data['rss_url'] && !(typeof data['rss_url'] === 'string' || data['rss_url'] instanceof String)) {
            throw new Error("Expected the field `rss_url` to be a primitive type in the JSON string but got " + data['rss_url']);
        }
        // validate the optional field `synopses`
        if (data['synopses']) { // data not null
          PodcastSynopses.validateJSON(data['synopses']);
        }
        // ensure the json data is a string
        if (data['territory'] && !(typeof data['territory'] === 'string' || data['territory'] instanceof String)) {
            throw new Error("Expected the field `territory` to be a primitive type in the JSON string but got " + data['territory']);
        }
        // validate the optional field `titles`
        if (data['titles']) { // data not null
          ProgrammeTitles.validateJSON(data['titles']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}

Podcast.RequiredProperties = ["category_summaries", "days_available", "entity_type", "first_published_date", "frequency", "images", "latest_available_episodes", "network_summary", "pid", "rss_url", "synopses", "territory", "titles", "total_available_episodes", "type", "updated_at"];

/**
 * @member {Array.<module:model/CategorySummary>} category_summaries
 */
Podcast.prototype['category_summaries'] = undefined;

/**
 * @member {Number} days_available
 */
Podcast.prototype['days_available'] = undefined;

/**
 * @member {String} entity_type
 */
Podcast.prototype['entity_type'] = undefined;

/**
 * @member {String} first_published_date
 */
Podcast.prototype['first_published_date'] = undefined;

/**
 * @member {String} frequency
 */
Podcast.prototype['frequency'] = undefined;

/**
 * @member {Array.<module:model/Image>} images
 */
Podcast.prototype['images'] = undefined;

/**
 * @member {Array.<module:model/PodcastEpisodeSummary>} latest_available_episodes
 */
Podcast.prototype['latest_available_episodes'] = undefined;

/**
 * @member {module:model/NetworkSummary} network_summary
 */
Podcast.prototype['network_summary'] = undefined;

/**
 * @member {String} pid
 */
Podcast.prototype['pid'] = undefined;

/**
 * @member {String} rss_url
 */
Podcast.prototype['rss_url'] = undefined;

/**
 * @member {module:model/PodcastSynopses} synopses
 */
Podcast.prototype['synopses'] = undefined;

/**
 * @member {String} territory
 */
Podcast.prototype['territory'] = undefined;

/**
 * @member {module:model/ProgrammeTitles} titles
 */
Podcast.prototype['titles'] = undefined;

/**
 * @member {Number} total_available_episodes
 */
Podcast.prototype['total_available_episodes'] = undefined;

/**
 * @member {String} type
 */
Podcast.prototype['type'] = undefined;

/**
 * @member {String} updated_at
 */
Podcast.prototype['updated_at'] = undefined;






export default Podcast;

