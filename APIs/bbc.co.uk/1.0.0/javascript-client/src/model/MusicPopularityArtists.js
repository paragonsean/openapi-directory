/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MusicPopularityArtist from './MusicPopularityArtist';

/**
 * The MusicPopularityArtists model module.
 * @module model/MusicPopularityArtists
 * @version 1.0.0
 */
class MusicPopularityArtists {
    /**
     * Constructs a new <code>MusicPopularityArtists</code>.
     * @alias module:model/MusicPopularityArtists
     * @param method {String} 
     * @param repliedAt {String} 
     * @param results {Array.<module:model/MusicPopularityArtist>} 
     * @param schema {String} 
     * @param total {Number} 
     */
    constructor(method, repliedAt, results, schema, total) { 
        
        MusicPopularityArtists.initialize(this, method, repliedAt, results, schema, total);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, method, repliedAt, results, schema, total) { 
        obj['method'] = method;
        obj['repliedAt'] = repliedAt;
        obj['results'] = results;
        obj['schema'] = schema;
        obj['total'] = total;
    }

    /**
     * Constructs a <code>MusicPopularityArtists</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MusicPopularityArtists} obj Optional instance to populate.
     * @return {module:model/MusicPopularityArtists} The populated <code>MusicPopularityArtists</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MusicPopularityArtists();

            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], 'String');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('repliedAt')) {
                obj['repliedAt'] = ApiClient.convertToType(data['repliedAt'], 'String');
            }
            if (data.hasOwnProperty('results')) {
                obj['results'] = ApiClient.convertToType(data['results'], [MusicPopularityArtist]);
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = ApiClient.convertToType(data['schema'], 'String');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MusicPopularityArtists</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MusicPopularityArtists</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MusicPopularityArtists.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['method'] && !(typeof data['method'] === 'string' || data['method'] instanceof String)) {
            throw new Error("Expected the field `method` to be a primitive type in the JSON string but got " + data['method']);
        }
        // ensure the json data is a string
        if (data['repliedAt'] && !(typeof data['repliedAt'] === 'string' || data['repliedAt'] instanceof String)) {
            throw new Error("Expected the field `repliedAt` to be a primitive type in the JSON string but got " + data['repliedAt']);
        }
        if (data['results']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['results'])) {
                throw new Error("Expected the field `results` to be an array in the JSON data but got " + data['results']);
            }
            // validate the optional field `results` (array)
            for (const item of data['results']) {
                MusicPopularityArtist.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['schema'] && !(typeof data['schema'] === 'string' || data['schema'] instanceof String)) {
            throw new Error("Expected the field `schema` to be a primitive type in the JSON string but got " + data['schema']);
        }

        return true;
    }


}

MusicPopularityArtists.RequiredProperties = ["method", "repliedAt", "results", "schema", "total"];

/**
 * @member {Number} limit
 */
MusicPopularityArtists.prototype['limit'] = undefined;

/**
 * @member {String} method
 */
MusicPopularityArtists.prototype['method'] = undefined;

/**
 * @member {Number} offset
 */
MusicPopularityArtists.prototype['offset'] = undefined;

/**
 * @member {String} repliedAt
 */
MusicPopularityArtists.prototype['repliedAt'] = undefined;

/**
 * @member {Array.<module:model/MusicPopularityArtist>} results
 */
MusicPopularityArtists.prototype['results'] = undefined;

/**
 * @member {String} schema
 */
MusicPopularityArtists.prototype['schema'] = undefined;

/**
 * @member {Number} total
 */
MusicPopularityArtists.prototype['total'] = undefined;






export default MusicPopularityArtists;

