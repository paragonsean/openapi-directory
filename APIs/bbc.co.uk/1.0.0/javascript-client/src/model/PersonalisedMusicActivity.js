/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PersonalisedMusicData from './PersonalisedMusicData';
import PersonalisedMusicMetaData from './PersonalisedMusicMetaData';

/**
 * The PersonalisedMusicActivity model module.
 * @module model/PersonalisedMusicActivity
 * @version 1.0.0
 */
class PersonalisedMusicActivity {
    /**
     * Constructs a new <code>PersonalisedMusicActivity</code>.
     * @alias module:model/PersonalisedMusicActivity
     * @param action {String} 
     * @param activity {String} 
     * @param addedAt {String} 
     * @param data {Array.<module:model/PersonalisedMusicData>} 
     * @param domain {String} 
     * @param id {String} 
     * @param metaData {module:model/PersonalisedMusicMetaData} 
     * @param type {String} 
     * @param urn {String} 
     */
    constructor(action, activity, addedAt, data, domain, id, metaData, type, urn) { 
        
        PersonalisedMusicActivity.initialize(this, action, activity, addedAt, data, domain, id, metaData, type, urn);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, action, activity, addedAt, data, domain, id, metaData, type, urn) { 
        obj['action'] = action;
        obj['activity'] = activity;
        obj['added_at'] = addedAt;
        obj['data'] = data;
        obj['domain'] = domain;
        obj['id'] = id;
        obj['meta_data'] = metaData;
        obj['type'] = type;
        obj['urn'] = urn;
    }

    /**
     * Constructs a <code>PersonalisedMusicActivity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PersonalisedMusicActivity} obj Optional instance to populate.
     * @return {module:model/PersonalisedMusicActivity} The populated <code>PersonalisedMusicActivity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PersonalisedMusicActivity();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('activity')) {
                obj['activity'] = ApiClient.convertToType(data['activity'], 'String');
            }
            if (data.hasOwnProperty('added_at')) {
                obj['added_at'] = ApiClient.convertToType(data['added_at'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], [PersonalisedMusicData]);
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('meta_data')) {
                obj['meta_data'] = PersonalisedMusicMetaData.constructFromObject(data['meta_data']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('urn')) {
                obj['urn'] = ApiClient.convertToType(data['urn'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PersonalisedMusicActivity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PersonalisedMusicActivity</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PersonalisedMusicActivity.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['activity'] && !(typeof data['activity'] === 'string' || data['activity'] instanceof String)) {
            throw new Error("Expected the field `activity` to be a primitive type in the JSON string but got " + data['activity']);
        }
        // ensure the json data is a string
        if (data['added_at'] && !(typeof data['added_at'] === 'string' || data['added_at'] instanceof String)) {
            throw new Error("Expected the field `added_at` to be a primitive type in the JSON string but got " + data['added_at']);
        }
        if (data['data']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['data'])) {
                throw new Error("Expected the field `data` to be an array in the JSON data but got " + data['data']);
            }
            // validate the optional field `data` (array)
            for (const item of data['data']) {
                PersonalisedMusicData.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `meta_data`
        if (data['meta_data']) { // data not null
          PersonalisedMusicMetaData.validateJSON(data['meta_data']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['urn'] && !(typeof data['urn'] === 'string' || data['urn'] instanceof String)) {
            throw new Error("Expected the field `urn` to be a primitive type in the JSON string but got " + data['urn']);
        }

        return true;
    }


}

PersonalisedMusicActivity.RequiredProperties = ["action", "activity", "added_at", "data", "domain", "id", "meta_data", "type", "urn"];

/**
 * @member {String} action
 */
PersonalisedMusicActivity.prototype['action'] = undefined;

/**
 * @member {String} activity
 */
PersonalisedMusicActivity.prototype['activity'] = undefined;

/**
 * @member {String} added_at
 */
PersonalisedMusicActivity.prototype['added_at'] = undefined;

/**
 * @member {Array.<module:model/PersonalisedMusicData>} data
 */
PersonalisedMusicActivity.prototype['data'] = undefined;

/**
 * @member {String} domain
 */
PersonalisedMusicActivity.prototype['domain'] = undefined;

/**
 * @member {String} id
 */
PersonalisedMusicActivity.prototype['id'] = undefined;

/**
 * @member {module:model/PersonalisedMusicMetaData} meta_data
 */
PersonalisedMusicActivity.prototype['meta_data'] = undefined;

/**
 * @member {String} type
 */
PersonalisedMusicActivity.prototype['type'] = undefined;

/**
 * @member {String} urn
 */
PersonalisedMusicActivity.prototype['urn'] = undefined;






export default PersonalisedMusicActivity;

