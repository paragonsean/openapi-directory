/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DisplayModule from './DisplayModule';

/**
 * The ExperienceResponse model module.
 * @module model/ExperienceResponse
 * @version 1.0.0
 */
class ExperienceResponse {
    /**
     * Constructs a new <code>ExperienceResponse</code>.
     * @alias module:model/ExperienceResponse
     * @param schema {String} 
     * @param data {Array.<module:model/DisplayModule>} 
     */
    constructor(schema, data) { 
        
        ExperienceResponse.initialize(this, schema, data);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, schema, data) { 
        obj['$schema'] = schema;
        obj['data'] = data;
    }

    /**
     * Constructs a <code>ExperienceResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExperienceResponse} obj Optional instance to populate.
     * @return {module:model/ExperienceResponse} The populated <code>ExperienceResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExperienceResponse();

            if (data.hasOwnProperty('$schema')) {
                obj['$schema'] = ApiClient.convertToType(data['$schema'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], [DisplayModule]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExperienceResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExperienceResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ExperienceResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['$schema'] && !(typeof data['$schema'] === 'string' || data['$schema'] instanceof String)) {
            throw new Error("Expected the field `$schema` to be a primitive type in the JSON string but got " + data['$schema']);
        }
        if (data['data']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['data'])) {
                throw new Error("Expected the field `data` to be an array in the JSON data but got " + data['data']);
            }
            // validate the optional field `data` (array)
            for (const item of data['data']) {
                DisplayModule.validateJSON(item);
            };
        }

        return true;
    }


}

ExperienceResponse.RequiredProperties = ["$schema", "data"];

/**
 * @member {String} $schema
 */
ExperienceResponse.prototype['$schema'] = undefined;

/**
 * @member {Array.<module:model/DisplayModule>} data
 */
ExperienceResponse.prototype['data'] = undefined;






export default ExperienceResponse;

