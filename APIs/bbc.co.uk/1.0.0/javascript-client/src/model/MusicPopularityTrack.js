/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MusicRecordAudio from './MusicRecordAudio';
import MusicTrackArtist from './MusicTrackArtist';

/**
 * The MusicPopularityTrack model module.
 * @module model/MusicPopularityTrack
 * @version 1.0.0
 */
class MusicPopularityTrack {
    /**
     * Constructs a new <code>MusicPopularityTrack</code>.
     * @alias module:model/MusicPopularityTrack
     * @param id {String} 
     * @param score {Number} 
     */
    constructor(id, score) { 
        
        MusicPopularityTrack.initialize(this, id, score);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, score) { 
        obj['id'] = id;
        obj['score'] = score;
    }

    /**
     * Constructs a <code>MusicPopularityTrack</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MusicPopularityTrack} obj Optional instance to populate.
     * @return {module:model/MusicPopularityTrack} The populated <code>MusicPopularityTrack</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MusicPopularityTrack();

            if (data.hasOwnProperty('album')) {
                obj['album'] = ApiClient.convertToType(data['album'], 'String');
            }
            if (data.hasOwnProperty('artistGid')) {
                obj['artistGid'] = ApiClient.convertToType(data['artistGid'], 'String');
            }
            if (data.hasOwnProperty('artistName')) {
                obj['artistName'] = ApiClient.convertToType(data['artistName'], 'String');
            }
            if (data.hasOwnProperty('artists')) {
                obj['artists'] = ApiClient.convertToType(data['artists'], [MusicTrackArtist]);
            }
            if (data.hasOwnProperty('baseTitle')) {
                obj['baseTitle'] = ApiClient.convertToType(data['baseTitle'], 'String');
            }
            if (data.hasOwnProperty('classical')) {
                obj['classical'] = ApiClient.convertToType(data['classical'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('mergedIds')) {
                obj['mergedIds'] = ApiClient.convertToType(data['mergedIds'], ['String']);
            }
            if (data.hasOwnProperty('preferredMultiplayRecordAudio')) {
                obj['preferredMultiplayRecordAudio'] = MusicRecordAudio.constructFromObject(data['preferredMultiplayRecordAudio']);
            }
            if (data.hasOwnProperty('preferredRecordAudio')) {
                obj['preferredRecordAudio'] = MusicRecordAudio.constructFromObject(data['preferredRecordAudio']);
            }
            if (data.hasOwnProperty('radioEdit')) {
                obj['radioEdit'] = ApiClient.convertToType(data['radioEdit'], 'Boolean');
            }
            if (data.hasOwnProperty('recordAudio')) {
                obj['recordAudio'] = ApiClient.convertToType(data['recordAudio'], [MusicRecordAudio]);
            }
            if (data.hasOwnProperty('recordImageHref')) {
                obj['recordImageHref'] = ApiClient.convertToType(data['recordImageHref'], 'String');
            }
            if (data.hasOwnProperty('recordImagePid')) {
                obj['recordImagePid'] = ApiClient.convertToType(data['recordImagePid'], 'String');
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MusicPopularityTrack</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MusicPopularityTrack</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MusicPopularityTrack.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['album'] && !(typeof data['album'] === 'string' || data['album'] instanceof String)) {
            throw new Error("Expected the field `album` to be a primitive type in the JSON string but got " + data['album']);
        }
        // ensure the json data is a string
        if (data['artistGid'] && !(typeof data['artistGid'] === 'string' || data['artistGid'] instanceof String)) {
            throw new Error("Expected the field `artistGid` to be a primitive type in the JSON string but got " + data['artistGid']);
        }
        // ensure the json data is a string
        if (data['artistName'] && !(typeof data['artistName'] === 'string' || data['artistName'] instanceof String)) {
            throw new Error("Expected the field `artistName` to be a primitive type in the JSON string but got " + data['artistName']);
        }
        if (data['artists']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['artists'])) {
                throw new Error("Expected the field `artists` to be an array in the JSON data but got " + data['artists']);
            }
            // validate the optional field `artists` (array)
            for (const item of data['artists']) {
                MusicTrackArtist.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['baseTitle'] && !(typeof data['baseTitle'] === 'string' || data['baseTitle'] instanceof String)) {
            throw new Error("Expected the field `baseTitle` to be a primitive type in the JSON string but got " + data['baseTitle']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['mergedIds'])) {
            throw new Error("Expected the field `mergedIds` to be an array in the JSON data but got " + data['mergedIds']);
        }
        // validate the optional field `preferredMultiplayRecordAudio`
        if (data['preferredMultiplayRecordAudio']) { // data not null
          MusicRecordAudio.validateJSON(data['preferredMultiplayRecordAudio']);
        }
        // validate the optional field `preferredRecordAudio`
        if (data['preferredRecordAudio']) { // data not null
          MusicRecordAudio.validateJSON(data['preferredRecordAudio']);
        }
        if (data['recordAudio']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['recordAudio'])) {
                throw new Error("Expected the field `recordAudio` to be an array in the JSON data but got " + data['recordAudio']);
            }
            // validate the optional field `recordAudio` (array)
            for (const item of data['recordAudio']) {
                MusicRecordAudio.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['recordImageHref'] && !(typeof data['recordImageHref'] === 'string' || data['recordImageHref'] instanceof String)) {
            throw new Error("Expected the field `recordImageHref` to be a primitive type in the JSON string but got " + data['recordImageHref']);
        }
        // ensure the json data is a string
        if (data['recordImagePid'] && !(typeof data['recordImagePid'] === 'string' || data['recordImagePid'] instanceof String)) {
            throw new Error("Expected the field `recordImagePid` to be a primitive type in the JSON string but got " + data['recordImagePid']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

MusicPopularityTrack.RequiredProperties = ["id", "score"];

/**
 * @member {String} album
 */
MusicPopularityTrack.prototype['album'] = undefined;

/**
 * @member {String} artistGid
 */
MusicPopularityTrack.prototype['artistGid'] = undefined;

/**
 * @member {String} artistName
 */
MusicPopularityTrack.prototype['artistName'] = undefined;

/**
 * @member {Array.<module:model/MusicTrackArtist>} artists
 */
MusicPopularityTrack.prototype['artists'] = undefined;

/**
 * @member {String} baseTitle
 */
MusicPopularityTrack.prototype['baseTitle'] = undefined;

/**
 * @member {Boolean} classical
 */
MusicPopularityTrack.prototype['classical'] = undefined;

/**
 * @member {String} id
 */
MusicPopularityTrack.prototype['id'] = undefined;

/**
 * @member {Array.<String>} mergedIds
 */
MusicPopularityTrack.prototype['mergedIds'] = undefined;

/**
 * @member {module:model/MusicRecordAudio} preferredMultiplayRecordAudio
 */
MusicPopularityTrack.prototype['preferredMultiplayRecordAudio'] = undefined;

/**
 * @member {module:model/MusicRecordAudio} preferredRecordAudio
 */
MusicPopularityTrack.prototype['preferredRecordAudio'] = undefined;

/**
 * @member {Boolean} radioEdit
 */
MusicPopularityTrack.prototype['radioEdit'] = undefined;

/**
 * @member {Array.<module:model/MusicRecordAudio>} recordAudio
 */
MusicPopularityTrack.prototype['recordAudio'] = undefined;

/**
 * @member {String} recordImageHref
 */
MusicPopularityTrack.prototype['recordImageHref'] = undefined;

/**
 * @member {String} recordImagePid
 */
MusicPopularityTrack.prototype['recordImagePid'] = undefined;

/**
 * @member {Number} score
 */
MusicPopularityTrack.prototype['score'] = undefined;

/**
 * @member {String} title
 */
MusicPopularityTrack.prototype['title'] = undefined;

/**
 * @member {String} type
 */
MusicPopularityTrack.prototype['type'] = undefined;






export default MusicPopularityTrack;

