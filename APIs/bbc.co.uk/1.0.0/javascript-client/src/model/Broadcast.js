/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProgrammeSummary from './ProgrammeSummary';

/**
 * The Broadcast model module.
 * @module model/Broadcast
 * @version 1.0.0
 */
class Broadcast {
    /**
     * Constructs a new <code>Broadcast</code>.
     * @alias module:model/Broadcast
     * @param duration {Number} 
     * @param end {String} 
     * @param isAudioDescribed {Boolean} 
     * @param isBlanked {Boolean} 
     * @param isCritical {Boolean} 
     * @param isLive {Boolean} 
     * @param isRepeat {Boolean} 
     * @param isWebcast {Boolean} 
     * @param pid {String} 
     * @param serviceId {String} 
     * @param start {String} 
     * @param type {String} 
     * @param versionPid {String} 
     */
    constructor(duration, end, isAudioDescribed, isBlanked, isCritical, isLive, isRepeat, isWebcast, pid, serviceId, start, type, versionPid) { 
        
        Broadcast.initialize(this, duration, end, isAudioDescribed, isBlanked, isCritical, isLive, isRepeat, isWebcast, pid, serviceId, start, type, versionPid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, duration, end, isAudioDescribed, isBlanked, isCritical, isLive, isRepeat, isWebcast, pid, serviceId, start, type, versionPid) { 
        obj['duration'] = duration;
        obj['end'] = end;
        obj['is_audio_described'] = isAudioDescribed;
        obj['is_blanked'] = isBlanked;
        obj['is_critical'] = isCritical;
        obj['is_live'] = isLive;
        obj['is_repeat'] = isRepeat;
        obj['is_webcast'] = isWebcast;
        obj['pid'] = pid;
        obj['service_id'] = serviceId;
        obj['start'] = start;
        obj['type'] = type;
        obj['version_pid'] = versionPid;
    }

    /**
     * Constructs a <code>Broadcast</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Broadcast} obj Optional instance to populate.
     * @return {module:model/Broadcast} The populated <code>Broadcast</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Broadcast();

            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('end')) {
                obj['end'] = ApiClient.convertToType(data['end'], 'String');
            }
            if (data.hasOwnProperty('is_audio_described')) {
                obj['is_audio_described'] = ApiClient.convertToType(data['is_audio_described'], 'Boolean');
            }
            if (data.hasOwnProperty('is_blanked')) {
                obj['is_blanked'] = ApiClient.convertToType(data['is_blanked'], 'Boolean');
            }
            if (data.hasOwnProperty('is_critical')) {
                obj['is_critical'] = ApiClient.convertToType(data['is_critical'], 'Boolean');
            }
            if (data.hasOwnProperty('is_live')) {
                obj['is_live'] = ApiClient.convertToType(data['is_live'], 'Boolean');
            }
            if (data.hasOwnProperty('is_repeat')) {
                obj['is_repeat'] = ApiClient.convertToType(data['is_repeat'], 'Boolean');
            }
            if (data.hasOwnProperty('is_webcast')) {
                obj['is_webcast'] = ApiClient.convertToType(data['is_webcast'], 'Boolean');
            }
            if (data.hasOwnProperty('pid')) {
                obj['pid'] = ApiClient.convertToType(data['pid'], 'String');
            }
            if (data.hasOwnProperty('programme')) {
                obj['programme'] = ProgrammeSummary.constructFromObject(data['programme']);
            }
            if (data.hasOwnProperty('service_id')) {
                obj['service_id'] = ApiClient.convertToType(data['service_id'], 'String');
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('version_pid')) {
                obj['version_pid'] = ApiClient.convertToType(data['version_pid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Broadcast</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Broadcast</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Broadcast.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['end'] && !(typeof data['end'] === 'string' || data['end'] instanceof String)) {
            throw new Error("Expected the field `end` to be a primitive type in the JSON string but got " + data['end']);
        }
        // ensure the json data is a string
        if (data['pid'] && !(typeof data['pid'] === 'string' || data['pid'] instanceof String)) {
            throw new Error("Expected the field `pid` to be a primitive type in the JSON string but got " + data['pid']);
        }
        // validate the optional field `programme`
        if (data['programme']) { // data not null
          ProgrammeSummary.validateJSON(data['programme']);
        }
        // ensure the json data is a string
        if (data['service_id'] && !(typeof data['service_id'] === 'string' || data['service_id'] instanceof String)) {
            throw new Error("Expected the field `service_id` to be a primitive type in the JSON string but got " + data['service_id']);
        }
        // ensure the json data is a string
        if (data['start'] && !(typeof data['start'] === 'string' || data['start'] instanceof String)) {
            throw new Error("Expected the field `start` to be a primitive type in the JSON string but got " + data['start']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['version_pid'] && !(typeof data['version_pid'] === 'string' || data['version_pid'] instanceof String)) {
            throw new Error("Expected the field `version_pid` to be a primitive type in the JSON string but got " + data['version_pid']);
        }

        return true;
    }


}

Broadcast.RequiredProperties = ["duration", "end", "is_audio_described", "is_blanked", "is_critical", "is_live", "is_repeat", "is_webcast", "pid", "service_id", "start", "type", "version_pid"];

/**
 * @member {Number} duration
 */
Broadcast.prototype['duration'] = undefined;

/**
 * @member {String} end
 */
Broadcast.prototype['end'] = undefined;

/**
 * @member {Boolean} is_audio_described
 */
Broadcast.prototype['is_audio_described'] = undefined;

/**
 * @member {Boolean} is_blanked
 */
Broadcast.prototype['is_blanked'] = undefined;

/**
 * @member {Boolean} is_critical
 */
Broadcast.prototype['is_critical'] = undefined;

/**
 * @member {Boolean} is_live
 */
Broadcast.prototype['is_live'] = undefined;

/**
 * @member {Boolean} is_repeat
 */
Broadcast.prototype['is_repeat'] = undefined;

/**
 * @member {Boolean} is_webcast
 */
Broadcast.prototype['is_webcast'] = undefined;

/**
 * @member {String} pid
 */
Broadcast.prototype['pid'] = undefined;

/**
 * @member {module:model/ProgrammeSummary} programme
 */
Broadcast.prototype['programme'] = undefined;

/**
 * @member {String} service_id
 */
Broadcast.prototype['service_id'] = undefined;

/**
 * @member {String} start
 */
Broadcast.prototype['start'] = undefined;

/**
 * @member {String} type
 */
Broadcast.prototype['type'] = undefined;

/**
 * @member {String} version_pid
 */
Broadcast.prototype['version_pid'] = undefined;






export default Broadcast;

