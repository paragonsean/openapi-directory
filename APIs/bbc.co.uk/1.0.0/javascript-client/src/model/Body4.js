/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Body4 model module.
 * @module model/Body4
 * @version 1.0.0
 */
class Body4 {
    /**
     * Constructs a new <code>Body4</code>.
     * @alias module:model/Body4
     * @param action {module:model/Body4.ActionEnum} 
     * @param elapsedTime {Number} 
     * @param pid {String} 
     * @param resourceType {module:model/Body4.ResourceTypeEnum} 
     * @param versionPid {String} 
     */
    constructor(action, elapsedTime, pid, resourceType, versionPid) { 
        
        Body4.initialize(this, action, elapsedTime, pid, resourceType, versionPid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, action, elapsedTime, pid, resourceType, versionPid) { 
        obj['action'] = action;
        obj['elapsed_time'] = elapsedTime;
        obj['pid'] = pid;
        obj['resource_type'] = resourceType;
        obj['version_pid'] = versionPid;
    }

    /**
     * Constructs a <code>Body4</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Body4} obj Optional instance to populate.
     * @return {module:model/Body4} The populated <code>Body4</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Body4();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('elapsed_time')) {
                obj['elapsed_time'] = ApiClient.convertToType(data['elapsed_time'], 'Number');
            }
            if (data.hasOwnProperty('pid')) {
                obj['pid'] = ApiClient.convertToType(data['pid'], 'String');
            }
            if (data.hasOwnProperty('resource_type')) {
                obj['resource_type'] = ApiClient.convertToType(data['resource_type'], 'String');
            }
            if (data.hasOwnProperty('version_pid')) {
                obj['version_pid'] = ApiClient.convertToType(data['version_pid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Body4</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Body4</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Body4.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['pid'] && !(typeof data['pid'] === 'string' || data['pid'] instanceof String)) {
            throw new Error("Expected the field `pid` to be a primitive type in the JSON string but got " + data['pid']);
        }
        // ensure the json data is a string
        if (data['resource_type'] && !(typeof data['resource_type'] === 'string' || data['resource_type'] instanceof String)) {
            throw new Error("Expected the field `resource_type` to be a primitive type in the JSON string but got " + data['resource_type']);
        }
        // ensure the json data is a string
        if (data['version_pid'] && !(typeof data['version_pid'] === 'string' || data['version_pid'] instanceof String)) {
            throw new Error("Expected the field `version_pid` to be a primitive type in the JSON string but got " + data['version_pid']);
        }

        return true;
    }


}

Body4.RequiredProperties = ["action", "elapsed_time", "pid", "resource_type", "version_pid"];

/**
 * @member {module:model/Body4.ActionEnum} action
 */
Body4.prototype['action'] = undefined;

/**
 * @member {Number} elapsed_time
 */
Body4.prototype['elapsed_time'] = undefined;

/**
 * @member {String} pid
 */
Body4.prototype['pid'] = undefined;

/**
 * @member {module:model/Body4.ResourceTypeEnum} resource_type
 */
Body4.prototype['resource_type'] = undefined;

/**
 * @member {String} version_pid
 */
Body4.prototype['version_pid'] = undefined;





/**
 * Allowed values for the <code>action</code> property.
 * @enum {String}
 * @readonly
 */
Body4['ActionEnum'] = {

    /**
     * value: "started"
     * @const
     */
    "started": "started",

    /**
     * value: "ended"
     * @const
     */
    "ended": "ended",

    /**
     * value: "paused"
     * @const
     */
    "paused": "paused",

    /**
     * value: "heartbeat"
     * @const
     */
    "heartbeat": "heartbeat"
};


/**
 * Allowed values for the <code>resource_type</code> property.
 * @enum {String}
 * @readonly
 */
Body4['ResourceTypeEnum'] = {

    /**
     * value: "episode"
     * @const
     */
    "episode": "episode",

    /**
     * value: "clip"
     * @const
     */
    "clip": "clip"
};



export default Body4;

