/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PersonalisedMusicTrackMedia model module.
 * @module model/PersonalisedMusicTrackMedia
 * @version 1.0.0
 */
class PersonalisedMusicTrackMedia {
    /**
     * Constructs a new <code>PersonalisedMusicTrackMedia</code>.
     * @alias module:model/PersonalisedMusicTrackMedia
     * @param duration {Number} 
     * @param format {String} 
     * @param id {String} 
     * @param scope {String} 
     * @param source {String} 
     * @param type {String} 
     */
    constructor(duration, format, id, scope, source, type) { 
        
        PersonalisedMusicTrackMedia.initialize(this, duration, format, id, scope, source, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, duration, format, id, scope, source, type) { 
        obj['duration'] = duration;
        obj['format'] = format;
        obj['id'] = id;
        obj['scope'] = scope;
        obj['source'] = source;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>PersonalisedMusicTrackMedia</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PersonalisedMusicTrackMedia} obj Optional instance to populate.
     * @return {module:model/PersonalisedMusicTrackMedia} The populated <code>PersonalisedMusicTrackMedia</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PersonalisedMusicTrackMedia();

            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PersonalisedMusicTrackMedia</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PersonalisedMusicTrackMedia</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PersonalisedMusicTrackMedia.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

PersonalisedMusicTrackMedia.RequiredProperties = ["duration", "format", "id", "scope", "source", "type"];

/**
 * @member {Number} duration
 */
PersonalisedMusicTrackMedia.prototype['duration'] = undefined;

/**
 * @member {String} format
 */
PersonalisedMusicTrackMedia.prototype['format'] = undefined;

/**
 * @member {String} id
 */
PersonalisedMusicTrackMedia.prototype['id'] = undefined;

/**
 * @member {String} scope
 */
PersonalisedMusicTrackMedia.prototype['scope'] = undefined;

/**
 * @member {String} source
 */
PersonalisedMusicTrackMedia.prototype['source'] = undefined;

/**
 * @member {String} type
 */
PersonalisedMusicTrackMedia.prototype['type'] = undefined;






export default PersonalisedMusicTrackMedia;

