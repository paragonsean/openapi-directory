/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CategorySummary from './CategorySummary';
import Contact from './Contact';
import DateRange from './DateRange';
import Service from './Service';

/**
 * The Network model module.
 * @module model/Network
 * @version 1.0.0
 */
class Network {
    /**
     * Constructs a new <code>Network</code>.
     * @alias module:model/Network
     * @param active {Boolean} 
     * @param contacts {Array.<module:model/Contact>} 
     * @param dateRanges {Array.<module:model/DateRange>} 
     * @param group {String} 
     * @param id {String} 
     * @param international {Boolean} 
     * @param key {String} 
     * @param preset {Boolean} 
     * @param services {Array.<module:model/Service>} 
     * @param shortTitle {String} 
     * @param sort {Number} 
     * @param title {String} 
     * @param type {String} 
     */
    constructor(active, contacts, dateRanges, group, id, international, key, preset, services, shortTitle, sort, title, type) { 
        
        Network.initialize(this, active, contacts, dateRanges, group, id, international, key, preset, services, shortTitle, sort, title, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, active, contacts, dateRanges, group, id, international, key, preset, services, shortTitle, sort, title, type) { 
        obj['active'] = active;
        obj['contacts'] = contacts;
        obj['date_ranges'] = dateRanges;
        obj['group'] = group;
        obj['id'] = id;
        obj['international'] = international;
        obj['key'] = key;
        obj['preset'] = preset;
        obj['services'] = services;
        obj['short_title'] = shortTitle;
        obj['sort'] = sort;
        obj['title'] = title;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Network</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Network} obj Optional instance to populate.
     * @return {module:model/Network} The populated <code>Network</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Network();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('contacts')) {
                obj['contacts'] = ApiClient.convertToType(data['contacts'], [Contact]);
            }
            if (data.hasOwnProperty('date_ranges')) {
                obj['date_ranges'] = ApiClient.convertToType(data['date_ranges'], [DateRange]);
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = ApiClient.convertToType(data['group'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('international')) {
                obj['international'] = ApiClient.convertToType(data['international'], 'Boolean');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('preset')) {
                obj['preset'] = ApiClient.convertToType(data['preset'], 'Boolean');
            }
            if (data.hasOwnProperty('promoted_category_summaries')) {
                obj['promoted_category_summaries'] = ApiClient.convertToType(data['promoted_category_summaries'], [CategorySummary]);
            }
            if (data.hasOwnProperty('services')) {
                obj['services'] = ApiClient.convertToType(data['services'], [Service]);
            }
            if (data.hasOwnProperty('short_title')) {
                obj['short_title'] = ApiClient.convertToType(data['short_title'], 'String');
            }
            if (data.hasOwnProperty('sort')) {
                obj['sort'] = ApiClient.convertToType(data['sort'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Network</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Network</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Network.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['contacts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['contacts'])) {
                throw new Error("Expected the field `contacts` to be an array in the JSON data but got " + data['contacts']);
            }
            // validate the optional field `contacts` (array)
            for (const item of data['contacts']) {
                Contact.validateJSON(item);
            };
        }
        if (data['date_ranges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['date_ranges'])) {
                throw new Error("Expected the field `date_ranges` to be an array in the JSON data but got " + data['date_ranges']);
            }
            // validate the optional field `date_ranges` (array)
            for (const item of data['date_ranges']) {
                DateRange.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['group'] && !(typeof data['group'] === 'string' || data['group'] instanceof String)) {
            throw new Error("Expected the field `group` to be a primitive type in the JSON string but got " + data['group']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        if (data['promoted_category_summaries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['promoted_category_summaries'])) {
                throw new Error("Expected the field `promoted_category_summaries` to be an array in the JSON data but got " + data['promoted_category_summaries']);
            }
            // validate the optional field `promoted_category_summaries` (array)
            for (const item of data['promoted_category_summaries']) {
                CategorySummary.validateJSON(item);
            };
        }
        if (data['services']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['services'])) {
                throw new Error("Expected the field `services` to be an array in the JSON data but got " + data['services']);
            }
            // validate the optional field `services` (array)
            for (const item of data['services']) {
                Service.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['short_title'] && !(typeof data['short_title'] === 'string' || data['short_title'] instanceof String)) {
            throw new Error("Expected the field `short_title` to be a primitive type in the JSON string but got " + data['short_title']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Network.RequiredProperties = ["active", "contacts", "date_ranges", "group", "id", "international", "key", "preset", "services", "short_title", "sort", "title", "type"];

/**
 * @member {Boolean} active
 */
Network.prototype['active'] = undefined;

/**
 * @member {Array.<module:model/Contact>} contacts
 */
Network.prototype['contacts'] = undefined;

/**
 * @member {Array.<module:model/DateRange>} date_ranges
 */
Network.prototype['date_ranges'] = undefined;

/**
 * @member {String} group
 */
Network.prototype['group'] = undefined;

/**
 * @member {String} id
 */
Network.prototype['id'] = undefined;

/**
 * @member {Boolean} international
 */
Network.prototype['international'] = undefined;

/**
 * @member {String} key
 */
Network.prototype['key'] = undefined;

/**
 * @member {Boolean} preset
 */
Network.prototype['preset'] = undefined;

/**
 * @member {Array.<module:model/CategorySummary>} promoted_category_summaries
 */
Network.prototype['promoted_category_summaries'] = undefined;

/**
 * @member {Array.<module:model/Service>} services
 */
Network.prototype['services'] = undefined;

/**
 * @member {String} short_title
 */
Network.prototype['short_title'] = undefined;

/**
 * @member {Number} sort
 */
Network.prototype['sort'] = undefined;

/**
 * @member {String} title
 */
Network.prototype['title'] = undefined;

/**
 * @member {String} type
 */
Network.prototype['type'] = undefined;






export default Network;

