/*
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.PopularErrorResponse;
import org.openapitools.client.model.PopularResponse;
import org.openapitools.client.model.ProgrammesResponse;
import org.openapitools.client.model.RadioErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProgrammesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProgrammesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProgrammesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getPopularEpisodesClips
     * @param xAPIKey API_KEY (required)
     * @param type Programme type required. Accepts comma separated values (optional)
     * @param distinct Filter by deduplication rule. E.g. &#39;tleo&#39; returns programmes with distinct top level episode objects (optional)
     * @param network Filter by network master brand ID (mid). Accepts comma separated values (optional)
     * @param networkUrlKey Filter by network URL key. Accepts comma separated values (optional)
     * @param category Filter by category. Accepts comma separated values (optional)
     * @param format Filter by format. Accepts comma separated values (optional)
     * @param group Filter by group. Accepts comma separated values (optional)
     * @param mediaType Filter by programme media type. Accepts comma separated values (optional)
     * @param container Filter by container. Accepts any pid e.g. brand,series,episode (optional)
     * @param mediaSet Filter by media set name. Accepts comma separated combinations of the following: pc,mobile-download,android-download-high,apple-ios-download-high,mobile-cellular-main,mobile-phone-main,iptv-all (optional)
     * @param q Search query String (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPopularEpisodesClipsCall(String xAPIKey, String type, String distinct, String network, String networkUrlKey, String category, String format, String group, String mediaType, String container, List<Object> mediaSet, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radio/popular";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (distinct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distinct", distinct));
        }

        if (network != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network", network));
        }

        if (networkUrlKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network_url_key", networkUrlKey));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        if (mediaType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media_type", mediaType));
        }

        if (container != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("container", container));
        }

        if (mediaSet != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "media_set", mediaSet));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPopularEpisodesClipsValidateBeforeCall(String xAPIKey, String type, String distinct, String network, String networkUrlKey, String category, String format, String group, String mediaType, String container, List<Object> mediaSet, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getPopularEpisodesClips(Async)");
        }

        return getPopularEpisodesClipsCall(xAPIKey, type, distinct, network, networkUrlKey, category, format, group, mediaType, container, mediaSet, q, _callback);

    }

    /**
     * Popular Episodes &amp; Clips
     * Retrieve Popular Episodes &amp; Clips 
     * @param xAPIKey API_KEY (required)
     * @param type Programme type required. Accepts comma separated values (optional)
     * @param distinct Filter by deduplication rule. E.g. &#39;tleo&#39; returns programmes with distinct top level episode objects (optional)
     * @param network Filter by network master brand ID (mid). Accepts comma separated values (optional)
     * @param networkUrlKey Filter by network URL key. Accepts comma separated values (optional)
     * @param category Filter by category. Accepts comma separated values (optional)
     * @param format Filter by format. Accepts comma separated values (optional)
     * @param group Filter by group. Accepts comma separated values (optional)
     * @param mediaType Filter by programme media type. Accepts comma separated values (optional)
     * @param container Filter by container. Accepts any pid e.g. brand,series,episode (optional)
     * @param mediaSet Filter by media set name. Accepts comma separated combinations of the following: pc,mobile-download,android-download-high,apple-ios-download-high,mobile-cellular-main,mobile-phone-main,iptv-all (optional)
     * @param q Search query String (optional)
     * @return PopularResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PopularResponse getPopularEpisodesClips(String xAPIKey, String type, String distinct, String network, String networkUrlKey, String category, String format, String group, String mediaType, String container, List<Object> mediaSet, String q) throws ApiException {
        ApiResponse<PopularResponse> localVarResp = getPopularEpisodesClipsWithHttpInfo(xAPIKey, type, distinct, network, networkUrlKey, category, format, group, mediaType, container, mediaSet, q);
        return localVarResp.getData();
    }

    /**
     * Popular Episodes &amp; Clips
     * Retrieve Popular Episodes &amp; Clips 
     * @param xAPIKey API_KEY (required)
     * @param type Programme type required. Accepts comma separated values (optional)
     * @param distinct Filter by deduplication rule. E.g. &#39;tleo&#39; returns programmes with distinct top level episode objects (optional)
     * @param network Filter by network master brand ID (mid). Accepts comma separated values (optional)
     * @param networkUrlKey Filter by network URL key. Accepts comma separated values (optional)
     * @param category Filter by category. Accepts comma separated values (optional)
     * @param format Filter by format. Accepts comma separated values (optional)
     * @param group Filter by group. Accepts comma separated values (optional)
     * @param mediaType Filter by programme media type. Accepts comma separated values (optional)
     * @param container Filter by container. Accepts any pid e.g. brand,series,episode (optional)
     * @param mediaSet Filter by media set name. Accepts comma separated combinations of the following: pc,mobile-download,android-download-high,apple-ios-download-high,mobile-cellular-main,mobile-phone-main,iptv-all (optional)
     * @param q Search query String (optional)
     * @return ApiResponse&lt;PopularResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PopularResponse> getPopularEpisodesClipsWithHttpInfo(String xAPIKey, String type, String distinct, String network, String networkUrlKey, String category, String format, String group, String mediaType, String container, List<Object> mediaSet, String q) throws ApiException {
        okhttp3.Call localVarCall = getPopularEpisodesClipsValidateBeforeCall(xAPIKey, type, distinct, network, networkUrlKey, category, format, group, mediaType, container, mediaSet, q, null);
        Type localVarReturnType = new TypeToken<PopularResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Popular Episodes &amp; Clips (asynchronously)
     * Retrieve Popular Episodes &amp; Clips 
     * @param xAPIKey API_KEY (required)
     * @param type Programme type required. Accepts comma separated values (optional)
     * @param distinct Filter by deduplication rule. E.g. &#39;tleo&#39; returns programmes with distinct top level episode objects (optional)
     * @param network Filter by network master brand ID (mid). Accepts comma separated values (optional)
     * @param networkUrlKey Filter by network URL key. Accepts comma separated values (optional)
     * @param category Filter by category. Accepts comma separated values (optional)
     * @param format Filter by format. Accepts comma separated values (optional)
     * @param group Filter by group. Accepts comma separated values (optional)
     * @param mediaType Filter by programme media type. Accepts comma separated values (optional)
     * @param container Filter by container. Accepts any pid e.g. brand,series,episode (optional)
     * @param mediaSet Filter by media set name. Accepts comma separated combinations of the following: pc,mobile-download,android-download-high,apple-ios-download-high,mobile-cellular-main,mobile-phone-main,iptv-all (optional)
     * @param q Search query String (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPopularEpisodesClipsAsync(String xAPIKey, String type, String distinct, String network, String networkUrlKey, String category, String format, String group, String mediaType, String container, List<Object> mediaSet, String q, final ApiCallback<PopularResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPopularEpisodesClipsValidateBeforeCall(xAPIKey, type, distinct, network, networkUrlKey, category, format, group, mediaType, container, mediaSet, q, _callback);
        Type localVarReturnType = new TypeToken<PopularResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRadioProgrammes
     * @param xAPIKey API_KEY (required)
     * @param kind Filter by provided query. E.g. &#39;tleo&#39; returns top level objects, ie. brands, orphaned series, and orphaned episodes (optional)
     * @param network Filter by network master brand ID (mid). Accepts comma separated values (optional)
     * @param networkUrlKey Filter by network URL key. Accepts comma separated values (optional)
     * @param category Filter by category id. Accepts comma separated values. See /category endpoint below for the type of response provided (optional)
     * @param sort Sort by provided query. E.g. &#39;title&#39; sorts in ascending order, and -title sorts in descending order (optional)
     * @param container Filter by container. Accepts any brand or series pid (optional)
     * @param type Filter by programme type. Accepts comma separated values (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRadioProgrammesCall(String xAPIKey, String kind, String network, String networkUrlKey, String category, String sort, String container, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radio/programmes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (kind != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kind", kind));
        }

        if (network != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network", network));
        }

        if (networkUrlKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network_url_key", networkUrlKey));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (container != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("container", container));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRadioProgrammesValidateBeforeCall(String xAPIKey, String kind, String network, String networkUrlKey, String category, String sort, String container, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getRadioProgrammes(Async)");
        }

        return getRadioProgrammesCall(xAPIKey, kind, network, networkUrlKey, category, sort, container, type, _callback);

    }

    /**
     * Radio programmes
     * Provides a paginated list of programmes by PID (brand, series, episode and clip). Accepts various filters and sorting methods.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining results as an array of Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param xAPIKey API_KEY (required)
     * @param kind Filter by provided query. E.g. &#39;tleo&#39; returns top level objects, ie. brands, orphaned series, and orphaned episodes (optional)
     * @param network Filter by network master brand ID (mid). Accepts comma separated values (optional)
     * @param networkUrlKey Filter by network URL key. Accepts comma separated values (optional)
     * @param category Filter by category id. Accepts comma separated values. See /category endpoint below for the type of response provided (optional)
     * @param sort Sort by provided query. E.g. &#39;title&#39; sorts in ascending order, and -title sorts in descending order (optional)
     * @param container Filter by container. Accepts any brand or series pid (optional)
     * @param type Filter by programme type. Accepts comma separated values (optional)
     * @return ProgrammesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ProgrammesResponse getRadioProgrammes(String xAPIKey, String kind, String network, String networkUrlKey, String category, String sort, String container, String type) throws ApiException {
        ApiResponse<ProgrammesResponse> localVarResp = getRadioProgrammesWithHttpInfo(xAPIKey, kind, network, networkUrlKey, category, sort, container, type);
        return localVarResp.getData();
    }

    /**
     * Radio programmes
     * Provides a paginated list of programmes by PID (brand, series, episode and clip). Accepts various filters and sorting methods.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining results as an array of Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param xAPIKey API_KEY (required)
     * @param kind Filter by provided query. E.g. &#39;tleo&#39; returns top level objects, ie. brands, orphaned series, and orphaned episodes (optional)
     * @param network Filter by network master brand ID (mid). Accepts comma separated values (optional)
     * @param networkUrlKey Filter by network URL key. Accepts comma separated values (optional)
     * @param category Filter by category id. Accepts comma separated values. See /category endpoint below for the type of response provided (optional)
     * @param sort Sort by provided query. E.g. &#39;title&#39; sorts in ascending order, and -title sorts in descending order (optional)
     * @param container Filter by container. Accepts any brand or series pid (optional)
     * @param type Filter by programme type. Accepts comma separated values (optional)
     * @return ApiResponse&lt;ProgrammesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProgrammesResponse> getRadioProgrammesWithHttpInfo(String xAPIKey, String kind, String network, String networkUrlKey, String category, String sort, String container, String type) throws ApiException {
        okhttp3.Call localVarCall = getRadioProgrammesValidateBeforeCall(xAPIKey, kind, network, networkUrlKey, category, sort, container, type, null);
        Type localVarReturnType = new TypeToken<ProgrammesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Radio programmes (asynchronously)
     * Provides a paginated list of programmes by PID (brand, series, episode and clip). Accepts various filters and sorting methods.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining results as an array of Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param xAPIKey API_KEY (required)
     * @param kind Filter by provided query. E.g. &#39;tleo&#39; returns top level objects, ie. brands, orphaned series, and orphaned episodes (optional)
     * @param network Filter by network master brand ID (mid). Accepts comma separated values (optional)
     * @param networkUrlKey Filter by network URL key. Accepts comma separated values (optional)
     * @param category Filter by category id. Accepts comma separated values. See /category endpoint below for the type of response provided (optional)
     * @param sort Sort by provided query. E.g. &#39;title&#39; sorts in ascending order, and -title sorts in descending order (optional)
     * @param container Filter by container. Accepts any brand or series pid (optional)
     * @param type Filter by programme type. Accepts comma separated values (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRadioProgrammesAsync(String xAPIKey, String kind, String network, String networkUrlKey, String category, String sort, String container, String type, final ApiCallback<ProgrammesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRadioProgrammesValidateBeforeCall(xAPIKey, kind, network, networkUrlKey, category, sort, container, type, _callback);
        Type localVarReturnType = new TypeToken<ProgrammesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRadioProgrammesByPid
     * @param xAPIKey API_KEY (required)
     * @param pid pid (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRadioProgrammesByPidCall(String xAPIKey, String pid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radio/programmes/{pid}"
            .replace("{" + "pid" + "}", localVarApiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRadioProgrammesByPidValidateBeforeCall(String xAPIKey, String pid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getRadioProgrammesByPid(Async)");
        }

        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling getRadioProgrammesByPid(Async)");
        }

        return getRadioProgrammesByPidCall(xAPIKey, pid, _callback);

    }

    /**
     * Available radio programme by Pid
     * Find programmes by PID (brand, series, episode and clip)  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining results as an array of Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param xAPIKey API_KEY (required)
     * @param pid pid (required)
     * @return ProgrammesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ProgrammesResponse getRadioProgrammesByPid(String xAPIKey, String pid) throws ApiException {
        ApiResponse<ProgrammesResponse> localVarResp = getRadioProgrammesByPidWithHttpInfo(xAPIKey, pid);
        return localVarResp.getData();
    }

    /**
     * Available radio programme by Pid
     * Find programmes by PID (brand, series, episode and clip)  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining results as an array of Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param xAPIKey API_KEY (required)
     * @param pid pid (required)
     * @return ApiResponse&lt;ProgrammesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProgrammesResponse> getRadioProgrammesByPidWithHttpInfo(String xAPIKey, String pid) throws ApiException {
        okhttp3.Call localVarCall = getRadioProgrammesByPidValidateBeforeCall(xAPIKey, pid, null);
        Type localVarReturnType = new TypeToken<ProgrammesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Available radio programme by Pid (asynchronously)
     * Find programmes by PID (brand, series, episode and clip)  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining results as an array of Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param xAPIKey API_KEY (required)
     * @param pid pid (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRadioProgrammesByPidAsync(String xAPIKey, String pid, final ApiCallback<ProgrammesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRadioProgrammesByPidValidateBeforeCall(xAPIKey, pid, _callback);
        Type localVarReturnType = new TypeToken<ProgrammesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecommendations
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAPIKey API_KEY (required)
     * @param rights Only return available results for the web/mobile. (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> There was an error with the supplied &#x60;Authorization&#x60; header. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecommendationsCall(String authorization, String xAPIKey, String rights, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/programmes/recommendations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (rights != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rights", rights));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecommendationsValidateBeforeCall(String authorization, String xAPIKey, String rights, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getRecommendations(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getRecommendations(Async)");
        }

        // verify the required parameter 'rights' is set
        if (rights == null) {
            throw new ApiException("Missing the required parameter 'rights' when calling getRecommendations(Async)");
        }

        return getRecommendationsCall(authorization, xAPIKey, rights, offset, limit, _callback);

    }

    /**
     * Recommended Programmes
     * Recommended Programmes from the Audience Platforms&#39; Recomendations Service 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAPIKey API_KEY (required)
     * @param rights Only return available results for the web/mobile. (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return ProgrammesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> There was an error with the supplied &#x60;Authorization&#x60; header. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ProgrammesResponse getRecommendations(String authorization, String xAPIKey, String rights, Integer offset, Integer limit) throws ApiException {
        ApiResponse<ProgrammesResponse> localVarResp = getRecommendationsWithHttpInfo(authorization, xAPIKey, rights, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Recommended Programmes
     * Recommended Programmes from the Audience Platforms&#39; Recomendations Service 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAPIKey API_KEY (required)
     * @param rights Only return available results for the web/mobile. (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return ApiResponse&lt;ProgrammesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> There was an error with the supplied &#x60;Authorization&#x60; header. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProgrammesResponse> getRecommendationsWithHttpInfo(String authorization, String xAPIKey, String rights, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getRecommendationsValidateBeforeCall(authorization, xAPIKey, rights, offset, limit, null);
        Type localVarReturnType = new TypeToken<ProgrammesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recommended Programmes (asynchronously)
     * Recommended Programmes from the Audience Platforms&#39; Recomendations Service 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAPIKey API_KEY (required)
     * @param rights Only return available results for the web/mobile. (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> There was an error with the supplied &#x60;Authorization&#x60; header. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecommendationsAsync(String authorization, String xAPIKey, String rights, Integer offset, Integer limit, final ApiCallback<ProgrammesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecommendationsValidateBeforeCall(authorization, xAPIKey, rights, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<ProgrammesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
