/*
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AncestorSummary;
import org.openapitools.client.model.AvailableVersions;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.NetworkSummary;
import org.openapitools.client.model.ProgrammeTitles;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EpisodeSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:46.845451-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EpisodeSummary {
  public static final String SERIALIZED_NAME_ANCESTORS = "ancestors";
  @SerializedName(SERIALIZED_NAME_ANCESTORS)
  private List<AncestorSummary> ancestors = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVAILABLE_VERSIONS = "available_versions";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_VERSIONS)
  private List<AvailableVersions> availableVersions = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<Image> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEDIA_TYPE = "media_type";
  @SerializedName(SERIALIZED_NAME_MEDIA_TYPE)
  private String mediaType;

  public static final String SERIALIZED_NAME_NETWORK_SUMMARY = "network_summary";
  @SerializedName(SERIALIZED_NAME_NETWORK_SUMMARY)
  private NetworkSummary networkSummary;

  public static final String SERIALIZED_NAME_PID = "pid";
  @SerializedName(SERIALIZED_NAME_PID)
  private String pid;

  public static final String SERIALIZED_NAME_RELEASE_DATE = "release_date";
  @SerializedName(SERIALIZED_NAME_RELEASE_DATE)
  private String releaseDate;

  public static final String SERIALIZED_NAME_SHORT_SYNOPSIS = "short_synopsis";
  @SerializedName(SERIALIZED_NAME_SHORT_SYNOPSIS)
  private String shortSynopsis;

  public static final String SERIALIZED_NAME_TITLES = "titles";
  @SerializedName(SERIALIZED_NAME_TITLES)
  private ProgrammeTitles titles;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    EPISODE_SUMMARY("episode_summary");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public EpisodeSummary() {
  }

  public EpisodeSummary ancestors(List<AncestorSummary> ancestors) {
    this.ancestors = ancestors;
    return this;
  }

  public EpisodeSummary addAncestorsItem(AncestorSummary ancestorsItem) {
    if (this.ancestors == null) {
      this.ancestors = new ArrayList<>();
    }
    this.ancestors.add(ancestorsItem);
    return this;
  }

  /**
   * Get ancestors
   * @return ancestors
   */
  @javax.annotation.Nonnull
  public List<AncestorSummary> getAncestors() {
    return ancestors;
  }

  public void setAncestors(List<AncestorSummary> ancestors) {
    this.ancestors = ancestors;
  }


  public EpisodeSummary availableVersions(List<AvailableVersions> availableVersions) {
    this.availableVersions = availableVersions;
    return this;
  }

  public EpisodeSummary addAvailableVersionsItem(AvailableVersions availableVersionsItem) {
    if (this.availableVersions == null) {
      this.availableVersions = new ArrayList<>();
    }
    this.availableVersions.add(availableVersionsItem);
    return this;
  }

  /**
   * Get availableVersions
   * @return availableVersions
   */
  @javax.annotation.Nonnull
  public List<AvailableVersions> getAvailableVersions() {
    return availableVersions;
  }

  public void setAvailableVersions(List<AvailableVersions> availableVersions) {
    this.availableVersions = availableVersions;
  }


  public EpisodeSummary images(List<Image> images) {
    this.images = images;
    return this;
  }

  public EpisodeSummary addImagesItem(Image imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * Get images
   * @return images
   */
  @javax.annotation.Nonnull
  public List<Image> getImages() {
    return images;
  }

  public void setImages(List<Image> images) {
    this.images = images;
  }


  public EpisodeSummary mediaType(String mediaType) {
    this.mediaType = mediaType;
    return this;
  }

  /**
   * Get mediaType
   * @return mediaType
   */
  @javax.annotation.Nonnull
  public String getMediaType() {
    return mediaType;
  }

  public void setMediaType(String mediaType) {
    this.mediaType = mediaType;
  }


  public EpisodeSummary networkSummary(NetworkSummary networkSummary) {
    this.networkSummary = networkSummary;
    return this;
  }

  /**
   * Get networkSummary
   * @return networkSummary
   */
  @javax.annotation.Nonnull
  public NetworkSummary getNetworkSummary() {
    return networkSummary;
  }

  public void setNetworkSummary(NetworkSummary networkSummary) {
    this.networkSummary = networkSummary;
  }


  public EpisodeSummary pid(String pid) {
    this.pid = pid;
    return this;
  }

  /**
   * Get pid
   * @return pid
   */
  @javax.annotation.Nonnull
  public String getPid() {
    return pid;
  }

  public void setPid(String pid) {
    this.pid = pid;
  }


  public EpisodeSummary releaseDate(String releaseDate) {
    this.releaseDate = releaseDate;
    return this;
  }

  /**
   * Get releaseDate
   * @return releaseDate
   */
  @javax.annotation.Nonnull
  public String getReleaseDate() {
    return releaseDate;
  }

  public void setReleaseDate(String releaseDate) {
    this.releaseDate = releaseDate;
  }


  public EpisodeSummary shortSynopsis(String shortSynopsis) {
    this.shortSynopsis = shortSynopsis;
    return this;
  }

  /**
   * Get shortSynopsis
   * @return shortSynopsis
   */
  @javax.annotation.Nonnull
  public String getShortSynopsis() {
    return shortSynopsis;
  }

  public void setShortSynopsis(String shortSynopsis) {
    this.shortSynopsis = shortSynopsis;
  }


  public EpisodeSummary titles(ProgrammeTitles titles) {
    this.titles = titles;
    return this;
  }

  /**
   * Get titles
   * @return titles
   */
  @javax.annotation.Nonnull
  public ProgrammeTitles getTitles() {
    return titles;
  }

  public void setTitles(ProgrammeTitles titles) {
    this.titles = titles;
  }


  public EpisodeSummary type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EpisodeSummary episodeSummary = (EpisodeSummary) o;
    return Objects.equals(this.ancestors, episodeSummary.ancestors) &&
        Objects.equals(this.availableVersions, episodeSummary.availableVersions) &&
        Objects.equals(this.images, episodeSummary.images) &&
        Objects.equals(this.mediaType, episodeSummary.mediaType) &&
        Objects.equals(this.networkSummary, episodeSummary.networkSummary) &&
        Objects.equals(this.pid, episodeSummary.pid) &&
        Objects.equals(this.releaseDate, episodeSummary.releaseDate) &&
        Objects.equals(this.shortSynopsis, episodeSummary.shortSynopsis) &&
        Objects.equals(this.titles, episodeSummary.titles) &&
        Objects.equals(this.type, episodeSummary.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ancestors, availableVersions, images, mediaType, networkSummary, pid, releaseDate, shortSynopsis, titles, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EpisodeSummary {\n");
    sb.append("    ancestors: ").append(toIndentedString(ancestors)).append("\n");
    sb.append("    availableVersions: ").append(toIndentedString(availableVersions)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("    networkSummary: ").append(toIndentedString(networkSummary)).append("\n");
    sb.append("    pid: ").append(toIndentedString(pid)).append("\n");
    sb.append("    releaseDate: ").append(toIndentedString(releaseDate)).append("\n");
    sb.append("    shortSynopsis: ").append(toIndentedString(shortSynopsis)).append("\n");
    sb.append("    titles: ").append(toIndentedString(titles)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ancestors");
    openapiFields.add("available_versions");
    openapiFields.add("images");
    openapiFields.add("media_type");
    openapiFields.add("network_summary");
    openapiFields.add("pid");
    openapiFields.add("release_date");
    openapiFields.add("short_synopsis");
    openapiFields.add("titles");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ancestors");
    openapiRequiredFields.add("available_versions");
    openapiRequiredFields.add("images");
    openapiRequiredFields.add("media_type");
    openapiRequiredFields.add("network_summary");
    openapiRequiredFields.add("pid");
    openapiRequiredFields.add("release_date");
    openapiRequiredFields.add("short_synopsis");
    openapiRequiredFields.add("titles");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EpisodeSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EpisodeSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EpisodeSummary is not found in the empty JSON string", EpisodeSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EpisodeSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EpisodeSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EpisodeSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("ancestors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ancestors` to be an array in the JSON string but got `%s`", jsonObj.get("ancestors").toString()));
      }

      JsonArray jsonArrayancestors = jsonObj.getAsJsonArray("ancestors");
      // validate the required field `ancestors` (array)
      for (int i = 0; i < jsonArrayancestors.size(); i++) {
        AncestorSummary.validateJsonElement(jsonArrayancestors.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("available_versions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `available_versions` to be an array in the JSON string but got `%s`", jsonObj.get("available_versions").toString()));
      }

      JsonArray jsonArrayavailableVersions = jsonObj.getAsJsonArray("available_versions");
      // validate the required field `available_versions` (array)
      for (int i = 0; i < jsonArrayavailableVersions.size(); i++) {
        AvailableVersions.validateJsonElement(jsonArrayavailableVersions.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("images").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
      }

      JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
      // validate the required field `images` (array)
      for (int i = 0; i < jsonArrayimages.size(); i++) {
        Image.validateJsonElement(jsonArrayimages.get(i));
      };
      if (!jsonObj.get("media_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `media_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("media_type").toString()));
      }
      // validate the required field `network_summary`
      NetworkSummary.validateJsonElement(jsonObj.get("network_summary"));
      if (!jsonObj.get("pid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pid").toString()));
      }
      if (!jsonObj.get("release_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release_date").toString()));
      }
      if (!jsonObj.get("short_synopsis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `short_synopsis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("short_synopsis").toString()));
      }
      // validate the required field `titles`
      ProgrammeTitles.validateJsonElement(jsonObj.get("titles"));
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EpisodeSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EpisodeSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EpisodeSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EpisodeSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<EpisodeSummary>() {
           @Override
           public void write(JsonWriter out, EpisodeSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EpisodeSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EpisodeSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EpisodeSummary
   * @throws IOException if the JSON string is invalid with respect to EpisodeSummary
   */
  public static EpisodeSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EpisodeSummary.class);
  }

  /**
   * Convert an instance of EpisodeSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

