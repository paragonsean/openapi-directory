/*
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MusicPopularityArtists;
import org.openapitools.client.model.MusicPopularityError;
import org.openapitools.client.model.MusicPopularityPlaylists;
import org.openapitools.client.model.MusicPopularityTracks;
import org.openapitools.client.model.PersonalisedMusicBatchRequest;
import org.openapitools.client.model.PersonalisedMusicErrorResponse;
import org.openapitools.client.model.PersonalisedMusicRequest;
import org.openapitools.client.model.PersonalisedMusicResponse;
import org.openapitools.client.model.PersonalisedMusicSuccess;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MusicApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MusicApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MusicApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deletePersonalisedMusicFavouritesByTypeById
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music favourite types: Clips or Tracks (required)
     * @param id Clip PID or Track ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePersonalisedMusicFavouritesByTypeByIdCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/music/favourites/{type}/{id}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePersonalisedMusicFavouritesByTypeByIdValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deletePersonalisedMusicFavouritesByTypeById(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling deletePersonalisedMusicFavouritesByTypeById(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling deletePersonalisedMusicFavouritesByTypeById(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling deletePersonalisedMusicFavouritesByTypeById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deletePersonalisedMusicFavouritesByTypeById(Async)");
        }

        return deletePersonalisedMusicFavouritesByTypeByIdCall(authorization, xAuthenticationProvider, xAPIKey, type, id, _callback);

    }

    /**
     * Favourite Track or Clip
     * Delete track or clip from a BBC Music user favourites. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music favourite types: Clips or Tracks (required)
     * @param id Clip PID or Track ID (required)
     * @return PersonalisedMusicSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedMusicSuccess deletePersonalisedMusicFavouritesByTypeById(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id) throws ApiException {
        ApiResponse<PersonalisedMusicSuccess> localVarResp = deletePersonalisedMusicFavouritesByTypeByIdWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, type, id);
        return localVarResp.getData();
    }

    /**
     * Favourite Track or Clip
     * Delete track or clip from a BBC Music user favourites. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music favourite types: Clips or Tracks (required)
     * @param id Clip PID or Track ID (required)
     * @return ApiResponse&lt;PersonalisedMusicSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedMusicSuccess> deletePersonalisedMusicFavouritesByTypeByIdWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id) throws ApiException {
        okhttp3.Call localVarCall = deletePersonalisedMusicFavouritesByTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, id, null);
        Type localVarReturnType = new TypeToken<PersonalisedMusicSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Favourite Track or Clip (asynchronously)
     * Delete track or clip from a BBC Music user favourites. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music favourite types: Clips or Tracks (required)
     * @param id Clip PID or Track ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePersonalisedMusicFavouritesByTypeByIdAsync(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, final ApiCallback<PersonalisedMusicSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePersonalisedMusicFavouritesByTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, id, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedMusicSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePersonalisedMusicFollowsByTypeById
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music follows types: Playlists, Services, Genres &amp; Artists (required)
     * @param id Playlists, Services, Networks, Genres, Categories or Artists ID (required)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePersonalisedMusicFollowsByTypeByIdCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, Boolean musicData, String musicContext, Boolean musicWithinUk, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/music/follows/{type}/{id}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (musicData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music-data", musicData));
        }

        if (musicContext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music_context", musicContext));
        }

        if (musicWithinUk != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music_within_uk", musicWithinUk));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePersonalisedMusicFollowsByTypeByIdValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, Boolean musicData, String musicContext, Boolean musicWithinUk, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deletePersonalisedMusicFollowsByTypeById(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling deletePersonalisedMusicFollowsByTypeById(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling deletePersonalisedMusicFollowsByTypeById(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling deletePersonalisedMusicFollowsByTypeById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deletePersonalisedMusicFollowsByTypeById(Async)");
        }

        return deletePersonalisedMusicFollowsByTypeByIdCall(authorization, xAuthenticationProvider, xAPIKey, type, id, musicData, musicContext, musicWithinUk, _callback);

    }

    /**
     * Followed Network, Category, Artist, Playlist and Genre
     * Remove a single network, category, artist, playlist, network, genre or service entity is in a users follows 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music follows types: Playlists, Services, Genres &amp; Artists (required)
     * @param id Playlists, Services, Networks, Genres, Categories or Artists ID (required)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @return PersonalisedMusicSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedMusicSuccess deletePersonalisedMusicFollowsByTypeById(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, Boolean musicData, String musicContext, Boolean musicWithinUk) throws ApiException {
        ApiResponse<PersonalisedMusicSuccess> localVarResp = deletePersonalisedMusicFollowsByTypeByIdWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, type, id, musicData, musicContext, musicWithinUk);
        return localVarResp.getData();
    }

    /**
     * Followed Network, Category, Artist, Playlist and Genre
     * Remove a single network, category, artist, playlist, network, genre or service entity is in a users follows 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music follows types: Playlists, Services, Genres &amp; Artists (required)
     * @param id Playlists, Services, Networks, Genres, Categories or Artists ID (required)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @return ApiResponse&lt;PersonalisedMusicSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedMusicSuccess> deletePersonalisedMusicFollowsByTypeByIdWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, Boolean musicData, String musicContext, Boolean musicWithinUk) throws ApiException {
        okhttp3.Call localVarCall = deletePersonalisedMusicFollowsByTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, id, musicData, musicContext, musicWithinUk, null);
        Type localVarReturnType = new TypeToken<PersonalisedMusicSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Followed Network, Category, Artist, Playlist and Genre (asynchronously)
     * Remove a single network, category, artist, playlist, network, genre or service entity is in a users follows 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music follows types: Playlists, Services, Genres &amp; Artists (required)
     * @param id Playlists, Services, Networks, Genres, Categories or Artists ID (required)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePersonalisedMusicFollowsByTypeByIdAsync(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, Boolean musicData, String musicContext, Boolean musicWithinUk, final ApiCallback<PersonalisedMusicSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePersonalisedMusicFollowsByTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, id, musicData, musicContext, musicWithinUk, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedMusicSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMusicPopularArtistById
     * @param xAPIKey API_KEY (required)
     * @param id MusicBrainz Id - Used to get single resource score (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMusicPopularArtistByIdCall(String xAPIKey, String id, String since, String until, Boolean decomposed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/music/popular/artists/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (until != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until", until));
        }

        if (decomposed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("decomposed", decomposed));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMusicPopularArtistByIdValidateBeforeCall(String xAPIKey, String id, String since, String until, Boolean decomposed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getMusicPopularArtistById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getMusicPopularArtistById(Async)");
        }

        return getMusicPopularArtistByIdCall(xAPIKey, id, since, until, decomposed, _callback);

    }

    /**
     * Single Artist Popularity
     * Popularity Artist By Id 
     * @param xAPIKey API_KEY (required)
     * @param id MusicBrainz Id - Used to get single resource score (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @return MusicPopularityArtists
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public MusicPopularityArtists getMusicPopularArtistById(String xAPIKey, String id, String since, String until, Boolean decomposed) throws ApiException {
        ApiResponse<MusicPopularityArtists> localVarResp = getMusicPopularArtistByIdWithHttpInfo(xAPIKey, id, since, until, decomposed);
        return localVarResp.getData();
    }

    /**
     * Single Artist Popularity
     * Popularity Artist By Id 
     * @param xAPIKey API_KEY (required)
     * @param id MusicBrainz Id - Used to get single resource score (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @return ApiResponse&lt;MusicPopularityArtists&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MusicPopularityArtists> getMusicPopularArtistByIdWithHttpInfo(String xAPIKey, String id, String since, String until, Boolean decomposed) throws ApiException {
        okhttp3.Call localVarCall = getMusicPopularArtistByIdValidateBeforeCall(xAPIKey, id, since, until, decomposed, null);
        Type localVarReturnType = new TypeToken<MusicPopularityArtists>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Single Artist Popularity (asynchronously)
     * Popularity Artist By Id 
     * @param xAPIKey API_KEY (required)
     * @param id MusicBrainz Id - Used to get single resource score (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMusicPopularArtistByIdAsync(String xAPIKey, String id, String since, String until, Boolean decomposed, final ApiCallback<MusicPopularityArtists> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMusicPopularArtistByIdValidateBeforeCall(xAPIKey, id, since, until, decomposed, _callback);
        Type localVarReturnType = new TypeToken<MusicPopularityArtists>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMusicPopularArtists
     * @param xAPIKey API_KEY (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMusicPopularArtistsCall(String xAPIKey, String since, String until, Boolean decomposed, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/music/popular/artists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (until != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until", until));
        }

        if (decomposed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("decomposed", decomposed));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMusicPopularArtistsValidateBeforeCall(String xAPIKey, String since, String until, Boolean decomposed, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getMusicPopularArtists(Async)");
        }

        return getMusicPopularArtistsCall(xAPIKey, since, until, decomposed, offset, limit, _callback);

    }

    /**
     * Popular Artists
     * List of Most Popular artists from BBC Music. 
     * @param xAPIKey API_KEY (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return MusicPopularityArtists
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public MusicPopularityArtists getMusicPopularArtists(String xAPIKey, String since, String until, Boolean decomposed, Integer offset, Integer limit) throws ApiException {
        ApiResponse<MusicPopularityArtists> localVarResp = getMusicPopularArtistsWithHttpInfo(xAPIKey, since, until, decomposed, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Popular Artists
     * List of Most Popular artists from BBC Music. 
     * @param xAPIKey API_KEY (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return ApiResponse&lt;MusicPopularityArtists&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MusicPopularityArtists> getMusicPopularArtistsWithHttpInfo(String xAPIKey, String since, String until, Boolean decomposed, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getMusicPopularArtistsValidateBeforeCall(xAPIKey, since, until, decomposed, offset, limit, null);
        Type localVarReturnType = new TypeToken<MusicPopularityArtists>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Popular Artists (asynchronously)
     * List of Most Popular artists from BBC Music. 
     * @param xAPIKey API_KEY (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMusicPopularArtistsAsync(String xAPIKey, String since, String until, Boolean decomposed, Integer offset, Integer limit, final ApiCallback<MusicPopularityArtists> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMusicPopularArtistsValidateBeforeCall(xAPIKey, since, until, decomposed, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<MusicPopularityArtists>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMusicPopularPlaylistById
     * @param xAPIKey API_KEY (required)
     * @param id BBC Music Playlist Id - Used to get single resource score (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMusicPopularPlaylistByIdCall(String xAPIKey, String id, String since, String until, Boolean decomposed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/music/popular/playlists/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (until != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until", until));
        }

        if (decomposed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("decomposed", decomposed));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMusicPopularPlaylistByIdValidateBeforeCall(String xAPIKey, String id, String since, String until, Boolean decomposed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getMusicPopularPlaylistById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getMusicPopularPlaylistById(Async)");
        }

        return getMusicPopularPlaylistByIdCall(xAPIKey, id, since, until, decomposed, _callback);

    }

    /**
     * Single Playlist Popularity
     * Popular playlist by Id 
     * @param xAPIKey API_KEY (required)
     * @param id BBC Music Playlist Id - Used to get single resource score (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @return MusicPopularityPlaylists
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public MusicPopularityPlaylists getMusicPopularPlaylistById(String xAPIKey, String id, String since, String until, Boolean decomposed) throws ApiException {
        ApiResponse<MusicPopularityPlaylists> localVarResp = getMusicPopularPlaylistByIdWithHttpInfo(xAPIKey, id, since, until, decomposed);
        return localVarResp.getData();
    }

    /**
     * Single Playlist Popularity
     * Popular playlist by Id 
     * @param xAPIKey API_KEY (required)
     * @param id BBC Music Playlist Id - Used to get single resource score (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @return ApiResponse&lt;MusicPopularityPlaylists&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MusicPopularityPlaylists> getMusicPopularPlaylistByIdWithHttpInfo(String xAPIKey, String id, String since, String until, Boolean decomposed) throws ApiException {
        okhttp3.Call localVarCall = getMusicPopularPlaylistByIdValidateBeforeCall(xAPIKey, id, since, until, decomposed, null);
        Type localVarReturnType = new TypeToken<MusicPopularityPlaylists>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Single Playlist Popularity (asynchronously)
     * Popular playlist by Id 
     * @param xAPIKey API_KEY (required)
     * @param id BBC Music Playlist Id - Used to get single resource score (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMusicPopularPlaylistByIdAsync(String xAPIKey, String id, String since, String until, Boolean decomposed, final ApiCallback<MusicPopularityPlaylists> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMusicPopularPlaylistByIdValidateBeforeCall(xAPIKey, id, since, until, decomposed, _callback);
        Type localVarReturnType = new TypeToken<MusicPopularityPlaylists>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMusicPopularPlaylists
     * @param xAPIKey API_KEY (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMusicPopularPlaylistsCall(String xAPIKey, String since, String until, Boolean decomposed, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/music/popular/playlists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (until != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until", until));
        }

        if (decomposed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("decomposed", decomposed));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMusicPopularPlaylistsValidateBeforeCall(String xAPIKey, String since, String until, Boolean decomposed, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getMusicPopularPlaylists(Async)");
        }

        return getMusicPopularPlaylistsCall(xAPIKey, since, until, decomposed, offset, limit, _callback);

    }

    /**
     * Popular Playlists
     * List of Most Popular playlists from BBC Music. 
     * @param xAPIKey API_KEY (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return MusicPopularityPlaylists
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public MusicPopularityPlaylists getMusicPopularPlaylists(String xAPIKey, String since, String until, Boolean decomposed, Integer offset, Integer limit) throws ApiException {
        ApiResponse<MusicPopularityPlaylists> localVarResp = getMusicPopularPlaylistsWithHttpInfo(xAPIKey, since, until, decomposed, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Popular Playlists
     * List of Most Popular playlists from BBC Music. 
     * @param xAPIKey API_KEY (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return ApiResponse&lt;MusicPopularityPlaylists&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MusicPopularityPlaylists> getMusicPopularPlaylistsWithHttpInfo(String xAPIKey, String since, String until, Boolean decomposed, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getMusicPopularPlaylistsValidateBeforeCall(xAPIKey, since, until, decomposed, offset, limit, null);
        Type localVarReturnType = new TypeToken<MusicPopularityPlaylists>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Popular Playlists (asynchronously)
     * List of Most Popular playlists from BBC Music. 
     * @param xAPIKey API_KEY (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMusicPopularPlaylistsAsync(String xAPIKey, String since, String until, Boolean decomposed, Integer offset, Integer limit, final ApiCallback<MusicPopularityPlaylists> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMusicPopularPlaylistsValidateBeforeCall(xAPIKey, since, until, decomposed, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<MusicPopularityPlaylists>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMusicPopularTrackById
     * @param xAPIKey API_KEY (required)
     * @param id BBC Music Track Id - Used to get single resource score (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param network Return items with given Network ID (optional)
     * @param programme Items with given Programme Pid (optional)
     * @param artist MusicBrainz artist ID (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMusicPopularTrackByIdCall(String xAPIKey, String id, String since, String until, String network, String programme, String artist, Boolean decomposed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/music/popular/tracks/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (until != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until", until));
        }

        if (network != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network", network));
        }

        if (programme != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("programme", programme));
        }

        if (artist != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("artist", artist));
        }

        if (decomposed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("decomposed", decomposed));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMusicPopularTrackByIdValidateBeforeCall(String xAPIKey, String id, String since, String until, String network, String programme, String artist, Boolean decomposed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getMusicPopularTrackById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getMusicPopularTrackById(Async)");
        }

        return getMusicPopularTrackByIdCall(xAPIKey, id, since, until, network, programme, artist, decomposed, _callback);

    }

    /**
     * Single Track Popularity
     * Popular Track for BBC Music 
     * @param xAPIKey API_KEY (required)
     * @param id BBC Music Track Id - Used to get single resource score (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param network Return items with given Network ID (optional)
     * @param programme Items with given Programme Pid (optional)
     * @param artist MusicBrainz artist ID (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @return MusicPopularityTracks
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public MusicPopularityTracks getMusicPopularTrackById(String xAPIKey, String id, String since, String until, String network, String programme, String artist, Boolean decomposed) throws ApiException {
        ApiResponse<MusicPopularityTracks> localVarResp = getMusicPopularTrackByIdWithHttpInfo(xAPIKey, id, since, until, network, programme, artist, decomposed);
        return localVarResp.getData();
    }

    /**
     * Single Track Popularity
     * Popular Track for BBC Music 
     * @param xAPIKey API_KEY (required)
     * @param id BBC Music Track Id - Used to get single resource score (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param network Return items with given Network ID (optional)
     * @param programme Items with given Programme Pid (optional)
     * @param artist MusicBrainz artist ID (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @return ApiResponse&lt;MusicPopularityTracks&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MusicPopularityTracks> getMusicPopularTrackByIdWithHttpInfo(String xAPIKey, String id, String since, String until, String network, String programme, String artist, Boolean decomposed) throws ApiException {
        okhttp3.Call localVarCall = getMusicPopularTrackByIdValidateBeforeCall(xAPIKey, id, since, until, network, programme, artist, decomposed, null);
        Type localVarReturnType = new TypeToken<MusicPopularityTracks>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Single Track Popularity (asynchronously)
     * Popular Track for BBC Music 
     * @param xAPIKey API_KEY (required)
     * @param id BBC Music Track Id - Used to get single resource score (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param network Return items with given Network ID (optional)
     * @param programme Items with given Programme Pid (optional)
     * @param artist MusicBrainz artist ID (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMusicPopularTrackByIdAsync(String xAPIKey, String id, String since, String until, String network, String programme, String artist, Boolean decomposed, final ApiCallback<MusicPopularityTracks> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMusicPopularTrackByIdValidateBeforeCall(xAPIKey, id, since, until, network, programme, artist, decomposed, _callback);
        Type localVarReturnType = new TypeToken<MusicPopularityTracks>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMusicPopularTracks
     * @param xAPIKey API_KEY (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param network Return items with given Network ID (optional)
     * @param programme Items with given Programme Pid (optional)
     * @param artist MusicBrainz artist ID (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMusicPopularTracksCall(String xAPIKey, String since, String until, String network, String programme, String artist, Boolean decomposed, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/music/popular/tracks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (until != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until", until));
        }

        if (network != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network", network));
        }

        if (programme != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("programme", programme));
        }

        if (artist != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("artist", artist));
        }

        if (decomposed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("decomposed", decomposed));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMusicPopularTracksValidateBeforeCall(String xAPIKey, String since, String until, String network, String programme, String artist, Boolean decomposed, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getMusicPopularTracks(Async)");
        }

        return getMusicPopularTracksCall(xAPIKey, since, until, network, programme, artist, decomposed, offset, limit, _callback);

    }

    /**
     * Popular Tracks
     * List of popular tracks for BBC Music. Filter by time, network, artist, playlist or programme. 
     * @param xAPIKey API_KEY (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param network Return items with given Network ID (optional)
     * @param programme Items with given Programme Pid (optional)
     * @param artist MusicBrainz artist ID (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return MusicPopularityTracks
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public MusicPopularityTracks getMusicPopularTracks(String xAPIKey, String since, String until, String network, String programme, String artist, Boolean decomposed, Integer offset, Integer limit) throws ApiException {
        ApiResponse<MusicPopularityTracks> localVarResp = getMusicPopularTracksWithHttpInfo(xAPIKey, since, until, network, programme, artist, decomposed, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Popular Tracks
     * List of popular tracks for BBC Music. Filter by time, network, artist, playlist or programme. 
     * @param xAPIKey API_KEY (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param network Return items with given Network ID (optional)
     * @param programme Items with given Programme Pid (optional)
     * @param artist MusicBrainz artist ID (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return ApiResponse&lt;MusicPopularityTracks&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MusicPopularityTracks> getMusicPopularTracksWithHttpInfo(String xAPIKey, String since, String until, String network, String programme, String artist, Boolean decomposed, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getMusicPopularTracksValidateBeforeCall(xAPIKey, since, until, network, programme, artist, decomposed, offset, limit, null);
        Type localVarReturnType = new TypeToken<MusicPopularityTracks>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Popular Tracks (asynchronously)
     * List of popular tracks for BBC Music. Filter by time, network, artist, playlist or programme. 
     * @param xAPIKey API_KEY (required)
     * @param since ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now (optional)
     * @param until ISO 8601 Date yyyy-mm-dd.  Returns items between given &#39;since&#39; and &#39;until&#39; date params (optional)
     * @param network Return items with given Network ID (optional)
     * @param programme Items with given Programme Pid (optional)
     * @param artist MusicBrainz artist ID (optional)
     * @param decomposed In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is &gt;&#x3D; 31 days (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMusicPopularTracksAsync(String xAPIKey, String since, String until, String network, String programme, String artist, Boolean decomposed, Integer offset, Integer limit, final ApiCallback<MusicPopularityTracks> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMusicPopularTracksValidateBeforeCall(xAPIKey, since, until, network, programme, artist, decomposed, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<MusicPopularityTracks>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPersonalisedMusicFavourites
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param action Filters activities based on the type of action (optional)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonalisedMusicFavouritesCall(String authorization, String xAuthenticationProvider, String xAPIKey, Integer offset, Integer limit, String action, Boolean musicData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/music/favourites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        if (musicData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music-data", musicData));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonalisedMusicFavouritesValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, Integer offset, Integer limit, String action, Boolean musicData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPersonalisedMusicFavourites(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling getPersonalisedMusicFavourites(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getPersonalisedMusicFavourites(Async)");
        }

        return getPersonalisedMusicFavouritesCall(authorization, xAuthenticationProvider, xAPIKey, offset, limit, action, musicData, _callback);

    }

    /**
     * Favourite Tracks or Clips
     * List of favourited tracks and clips for a given user for BBC Music. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param action Filters activities based on the type of action (optional)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @return PersonalisedMusicResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedMusicResponse getPersonalisedMusicFavourites(String authorization, String xAuthenticationProvider, String xAPIKey, Integer offset, Integer limit, String action, Boolean musicData) throws ApiException {
        ApiResponse<PersonalisedMusicResponse> localVarResp = getPersonalisedMusicFavouritesWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, offset, limit, action, musicData);
        return localVarResp.getData();
    }

    /**
     * Favourite Tracks or Clips
     * List of favourited tracks and clips for a given user for BBC Music. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param action Filters activities based on the type of action (optional)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @return ApiResponse&lt;PersonalisedMusicResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedMusicResponse> getPersonalisedMusicFavouritesWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, Integer offset, Integer limit, String action, Boolean musicData) throws ApiException {
        okhttp3.Call localVarCall = getPersonalisedMusicFavouritesValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, offset, limit, action, musicData, null);
        Type localVarReturnType = new TypeToken<PersonalisedMusicResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Favourite Tracks or Clips (asynchronously)
     * List of favourited tracks and clips for a given user for BBC Music. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param action Filters activities based on the type of action (optional)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonalisedMusicFavouritesAsync(String authorization, String xAuthenticationProvider, String xAPIKey, Integer offset, Integer limit, String action, Boolean musicData, final ApiCallback<PersonalisedMusicResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonalisedMusicFavouritesValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, offset, limit, action, musicData, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedMusicResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPersonalisedMusicFavouritesByType
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music favourite types: Clips or Tracks (required)
     * @param action Filters activities based on the type of action (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonalisedMusicFavouritesByTypeCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String action, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/music/favourites/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonalisedMusicFavouritesByTypeValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String action, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPersonalisedMusicFavouritesByType(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling getPersonalisedMusicFavouritesByType(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getPersonalisedMusicFavouritesByType(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getPersonalisedMusicFavouritesByType(Async)");
        }

        return getPersonalisedMusicFavouritesByTypeCall(authorization, xAuthenticationProvider, xAPIKey, type, action, offset, limit, _callback);

    }

    /**
     * Favourite Tracks or Clips by Type
     * List of favourited tracks or clips for a given user for BBC Music. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music favourite types: Clips or Tracks (required)
     * @param action Filters activities based on the type of action (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return PersonalisedMusicResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedMusicResponse getPersonalisedMusicFavouritesByType(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String action, Integer offset, Integer limit) throws ApiException {
        ApiResponse<PersonalisedMusicResponse> localVarResp = getPersonalisedMusicFavouritesByTypeWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, type, action, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Favourite Tracks or Clips by Type
     * List of favourited tracks or clips for a given user for BBC Music. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music favourite types: Clips or Tracks (required)
     * @param action Filters activities based on the type of action (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return ApiResponse&lt;PersonalisedMusicResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedMusicResponse> getPersonalisedMusicFavouritesByTypeWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String action, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getPersonalisedMusicFavouritesByTypeValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, action, offset, limit, null);
        Type localVarReturnType = new TypeToken<PersonalisedMusicResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Favourite Tracks or Clips by Type (asynchronously)
     * List of favourited tracks or clips for a given user for BBC Music. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music favourite types: Clips or Tracks (required)
     * @param action Filters activities based on the type of action (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonalisedMusicFavouritesByTypeAsync(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String action, Integer offset, Integer limit, final ApiCallback<PersonalisedMusicResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonalisedMusicFavouritesByTypeValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, action, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedMusicResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPersonalisedMusicFavouritesByTypeById
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music favourite types: Clips or Tracks (required)
     * @param id Clip PID or Track ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonalisedMusicFavouritesByTypeByIdCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/music/favourites/{type}/{id}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonalisedMusicFavouritesByTypeByIdValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPersonalisedMusicFavouritesByTypeById(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling getPersonalisedMusicFavouritesByTypeById(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getPersonalisedMusicFavouritesByTypeById(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getPersonalisedMusicFavouritesByTypeById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPersonalisedMusicFavouritesByTypeById(Async)");
        }

        return getPersonalisedMusicFavouritesByTypeByIdCall(authorization, xAuthenticationProvider, xAPIKey, type, id, _callback);

    }

    /**
     * Favourite Track or Clip
     * Check to see if a single track or clip entity is in a users favourites - determines UX of add button. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music favourite types: Clips or Tracks (required)
     * @param id Clip PID or Track ID (required)
     * @return PersonalisedMusicResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedMusicResponse getPersonalisedMusicFavouritesByTypeById(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id) throws ApiException {
        ApiResponse<PersonalisedMusicResponse> localVarResp = getPersonalisedMusicFavouritesByTypeByIdWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, type, id);
        return localVarResp.getData();
    }

    /**
     * Favourite Track or Clip
     * Check to see if a single track or clip entity is in a users favourites - determines UX of add button. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music favourite types: Clips or Tracks (required)
     * @param id Clip PID or Track ID (required)
     * @return ApiResponse&lt;PersonalisedMusicResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedMusicResponse> getPersonalisedMusicFavouritesByTypeByIdWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id) throws ApiException {
        okhttp3.Call localVarCall = getPersonalisedMusicFavouritesByTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, id, null);
        Type localVarReturnType = new TypeToken<PersonalisedMusicResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Favourite Track or Clip (asynchronously)
     * Check to see if a single track or clip entity is in a users favourites - determines UX of add button. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music favourite types: Clips or Tracks (required)
     * @param id Clip PID or Track ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonalisedMusicFavouritesByTypeByIdAsync(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, final ApiCallback<PersonalisedMusicResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonalisedMusicFavouritesByTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, id, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedMusicResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPersonalisedMusicFollows
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param action Filters activities based on the type of action (optional)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonalisedMusicFollowsCall(String authorization, String xAuthenticationProvider, String xAPIKey, String action, Boolean musicData, String musicContext, Boolean musicWithinUk, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/music/follows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        if (musicData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music-data", musicData));
        }

        if (musicContext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music_context", musicContext));
        }

        if (musicWithinUk != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music_within_uk", musicWithinUk));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonalisedMusicFollowsValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, String action, Boolean musicData, String musicContext, Boolean musicWithinUk, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPersonalisedMusicFollows(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling getPersonalisedMusicFollows(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getPersonalisedMusicFollows(Async)");
        }

        return getPersonalisedMusicFollowsCall(authorization, xAuthenticationProvider, xAPIKey, action, musicData, musicContext, musicWithinUk, offset, limit, _callback);

    }

    /**
     * Followed Networks, Categories, Artists, Playlists and Genres
     * List of followed networks, categories, artists, playlists and genres for a given user for BBC Music. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param action Filters activities based on the type of action (optional)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return PersonalisedMusicResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedMusicResponse getPersonalisedMusicFollows(String authorization, String xAuthenticationProvider, String xAPIKey, String action, Boolean musicData, String musicContext, Boolean musicWithinUk, Integer offset, Integer limit) throws ApiException {
        ApiResponse<PersonalisedMusicResponse> localVarResp = getPersonalisedMusicFollowsWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, action, musicData, musicContext, musicWithinUk, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Followed Networks, Categories, Artists, Playlists and Genres
     * List of followed networks, categories, artists, playlists and genres for a given user for BBC Music. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param action Filters activities based on the type of action (optional)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return ApiResponse&lt;PersonalisedMusicResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedMusicResponse> getPersonalisedMusicFollowsWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, String action, Boolean musicData, String musicContext, Boolean musicWithinUk, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getPersonalisedMusicFollowsValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, action, musicData, musicContext, musicWithinUk, offset, limit, null);
        Type localVarReturnType = new TypeToken<PersonalisedMusicResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Followed Networks, Categories, Artists, Playlists and Genres (asynchronously)
     * List of followed networks, categories, artists, playlists and genres for a given user for BBC Music. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param action Filters activities based on the type of action (optional)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonalisedMusicFollowsAsync(String authorization, String xAuthenticationProvider, String xAPIKey, String action, Boolean musicData, String musicContext, Boolean musicWithinUk, Integer offset, Integer limit, final ApiCallback<PersonalisedMusicResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonalisedMusicFollowsValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, action, musicData, musicContext, musicWithinUk, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedMusicResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPersonalisedMusicFollowsByType
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music follows types: Playlists, Services, Genres &amp; Artists (required)
     * @param action Filters activities based on the type of action (optional)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonalisedMusicFollowsByTypeCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String action, Boolean musicData, String musicContext, Boolean musicWithinUk, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/music/follows/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        if (musicData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music-data", musicData));
        }

        if (musicContext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music_context", musicContext));
        }

        if (musicWithinUk != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music_within_uk", musicWithinUk));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonalisedMusicFollowsByTypeValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String action, Boolean musicData, String musicContext, Boolean musicWithinUk, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPersonalisedMusicFollowsByType(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling getPersonalisedMusicFollowsByType(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getPersonalisedMusicFollowsByType(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getPersonalisedMusicFollowsByType(Async)");
        }

        return getPersonalisedMusicFollowsByTypeCall(authorization, xAuthenticationProvider, xAPIKey, type, action, musicData, musicContext, musicWithinUk, offset, limit, _callback);

    }

    /**
     * Followed Networks, Categories, Artists, Playlists and Genres by Type
     * List of followed networks, categories, artists, playlists, networks, genres, categories or services for a given BBC Music user. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music follows types: Playlists, Services, Genres &amp; Artists (required)
     * @param action Filters activities based on the type of action (optional)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return PersonalisedMusicResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedMusicResponse getPersonalisedMusicFollowsByType(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String action, Boolean musicData, String musicContext, Boolean musicWithinUk, Integer offset, Integer limit) throws ApiException {
        ApiResponse<PersonalisedMusicResponse> localVarResp = getPersonalisedMusicFollowsByTypeWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, type, action, musicData, musicContext, musicWithinUk, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Followed Networks, Categories, Artists, Playlists and Genres by Type
     * List of followed networks, categories, artists, playlists, networks, genres, categories or services for a given BBC Music user. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music follows types: Playlists, Services, Genres &amp; Artists (required)
     * @param action Filters activities based on the type of action (optional)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return ApiResponse&lt;PersonalisedMusicResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedMusicResponse> getPersonalisedMusicFollowsByTypeWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String action, Boolean musicData, String musicContext, Boolean musicWithinUk, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getPersonalisedMusicFollowsByTypeValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, action, musicData, musicContext, musicWithinUk, offset, limit, null);
        Type localVarReturnType = new TypeToken<PersonalisedMusicResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Followed Networks, Categories, Artists, Playlists and Genres by Type (asynchronously)
     * List of followed networks, categories, artists, playlists, networks, genres, categories or services for a given BBC Music user. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music follows types: Playlists, Services, Genres &amp; Artists (required)
     * @param action Filters activities based on the type of action (optional)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonalisedMusicFollowsByTypeAsync(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String action, Boolean musicData, String musicContext, Boolean musicWithinUk, Integer offset, Integer limit, final ApiCallback<PersonalisedMusicResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonalisedMusicFollowsByTypeValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, action, musicData, musicContext, musicWithinUk, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedMusicResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPersonalisedMusicFollowsByTypeById
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music follows types: Playlists, Services, Genres &amp; Artists (required)
     * @param id Playlists, Services, Networks, Genres, Categories or Artists ID (required)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonalisedMusicFollowsByTypeByIdCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, Boolean musicData, String musicContext, Boolean musicWithinUk, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/music/follows/{type}/{id}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (musicData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music-data", musicData));
        }

        if (musicContext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music_context", musicContext));
        }

        if (musicWithinUk != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music_within_uk", musicWithinUk));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonalisedMusicFollowsByTypeByIdValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, Boolean musicData, String musicContext, Boolean musicWithinUk, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPersonalisedMusicFollowsByTypeById(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling getPersonalisedMusicFollowsByTypeById(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getPersonalisedMusicFollowsByTypeById(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getPersonalisedMusicFollowsByTypeById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPersonalisedMusicFollowsByTypeById(Async)");
        }

        return getPersonalisedMusicFollowsByTypeByIdCall(authorization, xAuthenticationProvider, xAPIKey, type, id, musicData, musicContext, musicWithinUk, _callback);

    }

    /**
     * Followed Network, Category, Artist, Playlist and Genre
     * Check to see if a single network, category, artist, playlist, network, genre or service entity is in a users follows - determines UX of add button. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music follows types: Playlists, Services, Genres &amp; Artists (required)
     * @param id Playlists, Services, Networks, Genres, Categories or Artists ID (required)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @return PersonalisedMusicResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedMusicResponse getPersonalisedMusicFollowsByTypeById(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, Boolean musicData, String musicContext, Boolean musicWithinUk) throws ApiException {
        ApiResponse<PersonalisedMusicResponse> localVarResp = getPersonalisedMusicFollowsByTypeByIdWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, type, id, musicData, musicContext, musicWithinUk);
        return localVarResp.getData();
    }

    /**
     * Followed Network, Category, Artist, Playlist and Genre
     * Check to see if a single network, category, artist, playlist, network, genre or service entity is in a users follows - determines UX of add button. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music follows types: Playlists, Services, Genres &amp; Artists (required)
     * @param id Playlists, Services, Networks, Genres, Categories or Artists ID (required)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @return ApiResponse&lt;PersonalisedMusicResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedMusicResponse> getPersonalisedMusicFollowsByTypeByIdWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, Boolean musicData, String musicContext, Boolean musicWithinUk) throws ApiException {
        okhttp3.Call localVarCall = getPersonalisedMusicFollowsByTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, id, musicData, musicContext, musicWithinUk, null);
        Type localVarReturnType = new TypeToken<PersonalisedMusicResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Followed Network, Category, Artist, Playlist and Genre (asynchronously)
     * Check to see if a single network, category, artist, playlist, network, genre or service entity is in a users follows - determines UX of add button. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music follows types: Playlists, Services, Genres &amp; Artists (required)
     * @param id Playlists, Services, Networks, Genres, Categories or Artists ID (required)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonalisedMusicFollowsByTypeByIdAsync(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, Boolean musicData, String musicContext, Boolean musicWithinUk, final ApiCallback<PersonalisedMusicResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonalisedMusicFollowsByTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, id, musicData, musicContext, musicWithinUk, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedMusicResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPersonalisedMusicFavouritesBatch
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action favourited or unfavourited (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPersonalisedMusicFavouritesBatchCall(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedMusicBatchRequest> body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/my/music/favourites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPersonalisedMusicFavouritesBatchValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedMusicBatchRequest> body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling postPersonalisedMusicFavouritesBatch(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling postPersonalisedMusicFavouritesBatch(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling postPersonalisedMusicFavouritesBatch(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postPersonalisedMusicFavouritesBatch(Async)");
        }

        return postPersonalisedMusicFavouritesBatchCall(authorization, xAuthenticationProvider, xAPIKey, body, _callback);

    }

    /**
     * Favourite Tracks or Clips
     * Add multiple tracks and/or clips to a BBC Music user&#39;s favourites.  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action favourited or unfavourited (required)
     * @return PersonalisedMusicResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedMusicResponse postPersonalisedMusicFavouritesBatch(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedMusicBatchRequest> body) throws ApiException {
        ApiResponse<PersonalisedMusicResponse> localVarResp = postPersonalisedMusicFavouritesBatchWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, body);
        return localVarResp.getData();
    }

    /**
     * Favourite Tracks or Clips
     * Add multiple tracks and/or clips to a BBC Music user&#39;s favourites.  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action favourited or unfavourited (required)
     * @return ApiResponse&lt;PersonalisedMusicResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedMusicResponse> postPersonalisedMusicFavouritesBatchWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedMusicBatchRequest> body) throws ApiException {
        okhttp3.Call localVarCall = postPersonalisedMusicFavouritesBatchValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, body, null);
        Type localVarReturnType = new TypeToken<PersonalisedMusicResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Favourite Tracks or Clips (asynchronously)
     * Add multiple tracks and/or clips to a BBC Music user&#39;s favourites.  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action favourited or unfavourited (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPersonalisedMusicFavouritesBatchAsync(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedMusicBatchRequest> body, final ApiCallback<PersonalisedMusicResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPersonalisedMusicFavouritesBatchValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, body, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedMusicResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPersonalisedMusicFavouritesByTypeById
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music favourite types: Clips or Tracks (required)
     * @param id Clip PID or Track ID (required)
     * @param body Action favourited or unfavourited (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPersonalisedMusicFavouritesByTypeByIdCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, PersonalisedMusicRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/my/music/favourites/{type}/{id}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPersonalisedMusicFavouritesByTypeByIdValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, PersonalisedMusicRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling postPersonalisedMusicFavouritesByTypeById(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling postPersonalisedMusicFavouritesByTypeById(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling postPersonalisedMusicFavouritesByTypeById(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling postPersonalisedMusicFavouritesByTypeById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postPersonalisedMusicFavouritesByTypeById(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postPersonalisedMusicFavouritesByTypeById(Async)");
        }

        return postPersonalisedMusicFavouritesByTypeByIdCall(authorization, xAuthenticationProvider, xAPIKey, type, id, body, _callback);

    }

    /**
     * Favourite Track or Clip
     * Add track or clip to a BBC Music user favourites.  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music favourite types: Clips or Tracks (required)
     * @param id Clip PID or Track ID (required)
     * @param body Action favourited or unfavourited (required)
     * @return PersonalisedMusicResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedMusicResponse postPersonalisedMusicFavouritesByTypeById(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, PersonalisedMusicRequest body) throws ApiException {
        ApiResponse<PersonalisedMusicResponse> localVarResp = postPersonalisedMusicFavouritesByTypeByIdWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, type, id, body);
        return localVarResp.getData();
    }

    /**
     * Favourite Track or Clip
     * Add track or clip to a BBC Music user favourites.  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music favourite types: Clips or Tracks (required)
     * @param id Clip PID or Track ID (required)
     * @param body Action favourited or unfavourited (required)
     * @return ApiResponse&lt;PersonalisedMusicResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedMusicResponse> postPersonalisedMusicFavouritesByTypeByIdWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, PersonalisedMusicRequest body) throws ApiException {
        okhttp3.Call localVarCall = postPersonalisedMusicFavouritesByTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, id, body, null);
        Type localVarReturnType = new TypeToken<PersonalisedMusicResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Favourite Track or Clip (asynchronously)
     * Add track or clip to a BBC Music user favourites.  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music favourite types: Clips or Tracks (required)
     * @param id Clip PID or Track ID (required)
     * @param body Action favourited or unfavourited (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPersonalisedMusicFavouritesByTypeByIdAsync(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, PersonalisedMusicRequest body, final ApiCallback<PersonalisedMusicResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPersonalisedMusicFavouritesByTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, id, body, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedMusicResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPersonalisedMusicFollowsBatch
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action followed or unfollowed (required)
     * @param action Filters activities based on the type of action (optional)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPersonalisedMusicFollowsBatchCall(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedMusicBatchRequest> body, String action, Boolean musicData, String musicContext, Boolean musicWithinUk, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/my/music/follows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        if (musicData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music-data", musicData));
        }

        if (musicContext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music_context", musicContext));
        }

        if (musicWithinUk != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music_within_uk", musicWithinUk));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPersonalisedMusicFollowsBatchValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedMusicBatchRequest> body, String action, Boolean musicData, String musicContext, Boolean musicWithinUk, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling postPersonalisedMusicFollowsBatch(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling postPersonalisedMusicFollowsBatch(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling postPersonalisedMusicFollowsBatch(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postPersonalisedMusicFollowsBatch(Async)");
        }

        return postPersonalisedMusicFollowsBatchCall(authorization, xAuthenticationProvider, xAPIKey, body, action, musicData, musicContext, musicWithinUk, _callback);

    }

    /**
     * Followed Networks, Categories, Artists, Playlists and Genres
     * Add networks, categories, artists, playlists, networks, genres or services in a users follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action followed or unfollowed (required)
     * @param action Filters activities based on the type of action (optional)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @return PersonalisedMusicSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedMusicSuccess postPersonalisedMusicFollowsBatch(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedMusicBatchRequest> body, String action, Boolean musicData, String musicContext, Boolean musicWithinUk) throws ApiException {
        ApiResponse<PersonalisedMusicSuccess> localVarResp = postPersonalisedMusicFollowsBatchWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, body, action, musicData, musicContext, musicWithinUk);
        return localVarResp.getData();
    }

    /**
     * Followed Networks, Categories, Artists, Playlists and Genres
     * Add networks, categories, artists, playlists, networks, genres or services in a users follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action followed or unfollowed (required)
     * @param action Filters activities based on the type of action (optional)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @return ApiResponse&lt;PersonalisedMusicSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedMusicSuccess> postPersonalisedMusicFollowsBatchWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedMusicBatchRequest> body, String action, Boolean musicData, String musicContext, Boolean musicWithinUk) throws ApiException {
        okhttp3.Call localVarCall = postPersonalisedMusicFollowsBatchValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, body, action, musicData, musicContext, musicWithinUk, null);
        Type localVarReturnType = new TypeToken<PersonalisedMusicSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Followed Networks, Categories, Artists, Playlists and Genres (asynchronously)
     * Add networks, categories, artists, playlists, networks, genres or services in a users follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action followed or unfollowed (required)
     * @param action Filters activities based on the type of action (optional)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPersonalisedMusicFollowsBatchAsync(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedMusicBatchRequest> body, String action, Boolean musicData, String musicContext, Boolean musicWithinUk, final ApiCallback<PersonalisedMusicSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPersonalisedMusicFollowsBatchValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, body, action, musicData, musicContext, musicWithinUk, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedMusicSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPersonalisedMusicFollowsByTypeById
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music follows types: Playlists, Services, Genres &amp; Artists (required)
     * @param id Playlists, Services, Networks, Genres, Categories or Artists ID (required)
     * @param body Action followed or unfollowed (required)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPersonalisedMusicFollowsByTypeByIdCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, PersonalisedMusicRequest body, Boolean musicData, String musicContext, Boolean musicWithinUk, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/my/music/follows/{type}/{id}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (musicData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music-data", musicData));
        }

        if (musicContext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music_context", musicContext));
        }

        if (musicWithinUk != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music_within_uk", musicWithinUk));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPersonalisedMusicFollowsByTypeByIdValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, PersonalisedMusicRequest body, Boolean musicData, String musicContext, Boolean musicWithinUk, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling postPersonalisedMusicFollowsByTypeById(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling postPersonalisedMusicFollowsByTypeById(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling postPersonalisedMusicFollowsByTypeById(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling postPersonalisedMusicFollowsByTypeById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postPersonalisedMusicFollowsByTypeById(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postPersonalisedMusicFollowsByTypeById(Async)");
        }

        return postPersonalisedMusicFollowsByTypeByIdCall(authorization, xAuthenticationProvider, xAPIKey, type, id, body, musicData, musicContext, musicWithinUk, _callback);

    }

    /**
     * Followed Network, Category, Artist, Playlist and Genre
     * Add a single network, category, artist, playlist, network, genre or service entity is in a users follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music follows types: Playlists, Services, Genres &amp; Artists (required)
     * @param id Playlists, Services, Networks, Genres, Categories or Artists ID (required)
     * @param body Action followed or unfollowed (required)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @return PersonalisedMusicSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedMusicSuccess postPersonalisedMusicFollowsByTypeById(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, PersonalisedMusicRequest body, Boolean musicData, String musicContext, Boolean musicWithinUk) throws ApiException {
        ApiResponse<PersonalisedMusicSuccess> localVarResp = postPersonalisedMusicFollowsByTypeByIdWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, type, id, body, musicData, musicContext, musicWithinUk);
        return localVarResp.getData();
    }

    /**
     * Followed Network, Category, Artist, Playlist and Genre
     * Add a single network, category, artist, playlist, network, genre or service entity is in a users follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music follows types: Playlists, Services, Genres &amp; Artists (required)
     * @param id Playlists, Services, Networks, Genres, Categories or Artists ID (required)
     * @param body Action followed or unfollowed (required)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @return ApiResponse&lt;PersonalisedMusicSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedMusicSuccess> postPersonalisedMusicFollowsByTypeByIdWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, PersonalisedMusicRequest body, Boolean musicData, String musicContext, Boolean musicWithinUk) throws ApiException {
        okhttp3.Call localVarCall = postPersonalisedMusicFollowsByTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, id, body, musicData, musicContext, musicWithinUk, null);
        Type localVarReturnType = new TypeToken<PersonalisedMusicSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Followed Network, Category, Artist, Playlist and Genre (asynchronously)
     * Add a single network, category, artist, playlist, network, genre or service entity is in a users follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music follows types: Playlists, Services, Genres &amp; Artists (required)
     * @param id Playlists, Services, Networks, Genres, Categories or Artists ID (required)
     * @param body Action followed or unfollowed (required)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPersonalisedMusicFollowsByTypeByIdAsync(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, PersonalisedMusicRequest body, Boolean musicData, String musicContext, Boolean musicWithinUk, final ApiCallback<PersonalisedMusicSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPersonalisedMusicFollowsByTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, id, body, musicData, musicContext, musicWithinUk, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedMusicSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putPersonalisedMusicFavouritesBatch
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action favourited or unfavourited (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPersonalisedMusicFavouritesBatchCall(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedMusicBatchRequest> body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/my/music/favourites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPersonalisedMusicFavouritesBatchValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedMusicBatchRequest> body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling putPersonalisedMusicFavouritesBatch(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling putPersonalisedMusicFavouritesBatch(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling putPersonalisedMusicFavouritesBatch(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putPersonalisedMusicFavouritesBatch(Async)");
        }

        return putPersonalisedMusicFavouritesBatchCall(authorization, xAuthenticationProvider, xAPIKey, body, _callback);

    }

    /**
     * Favourite Tracks or Clips
     * Update tracks or clips from a BBC Music user favourites.  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action favourited or unfavourited (required)
     * @return PersonalisedMusicSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedMusicSuccess putPersonalisedMusicFavouritesBatch(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedMusicBatchRequest> body) throws ApiException {
        ApiResponse<PersonalisedMusicSuccess> localVarResp = putPersonalisedMusicFavouritesBatchWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, body);
        return localVarResp.getData();
    }

    /**
     * Favourite Tracks or Clips
     * Update tracks or clips from a BBC Music user favourites.  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action favourited or unfavourited (required)
     * @return ApiResponse&lt;PersonalisedMusicSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedMusicSuccess> putPersonalisedMusicFavouritesBatchWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedMusicBatchRequest> body) throws ApiException {
        okhttp3.Call localVarCall = putPersonalisedMusicFavouritesBatchValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, body, null);
        Type localVarReturnType = new TypeToken<PersonalisedMusicSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Favourite Tracks or Clips (asynchronously)
     * Update tracks or clips from a BBC Music user favourites.  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action favourited or unfavourited (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPersonalisedMusicFavouritesBatchAsync(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedMusicBatchRequest> body, final ApiCallback<PersonalisedMusicSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPersonalisedMusicFavouritesBatchValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, body, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedMusicSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putPersonalisedMusicFavouritesByTypeById
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music favourite types: Clips or Tracks (required)
     * @param id Clip PID or Track ID (required)
     * @param body Action favourited or unfavourited (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPersonalisedMusicFavouritesByTypeByIdCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, PersonalisedMusicRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/my/music/favourites/{type}/{id}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPersonalisedMusicFavouritesByTypeByIdValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, PersonalisedMusicRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling putPersonalisedMusicFavouritesByTypeById(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling putPersonalisedMusicFavouritesByTypeById(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling putPersonalisedMusicFavouritesByTypeById(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling putPersonalisedMusicFavouritesByTypeById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putPersonalisedMusicFavouritesByTypeById(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putPersonalisedMusicFavouritesByTypeById(Async)");
        }

        return putPersonalisedMusicFavouritesByTypeByIdCall(authorization, xAuthenticationProvider, xAPIKey, type, id, body, _callback);

    }

    /**
     * Favourite Track or Clip
     * Update tracks or clips from a BBC Music user favourites.  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music favourite types: Clips or Tracks (required)
     * @param id Clip PID or Track ID (required)
     * @param body Action favourited or unfavourited (required)
     * @return PersonalisedMusicSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedMusicSuccess putPersonalisedMusicFavouritesByTypeById(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, PersonalisedMusicRequest body) throws ApiException {
        ApiResponse<PersonalisedMusicSuccess> localVarResp = putPersonalisedMusicFavouritesByTypeByIdWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, type, id, body);
        return localVarResp.getData();
    }

    /**
     * Favourite Track or Clip
     * Update tracks or clips from a BBC Music user favourites.  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music favourite types: Clips or Tracks (required)
     * @param id Clip PID or Track ID (required)
     * @param body Action favourited or unfavourited (required)
     * @return ApiResponse&lt;PersonalisedMusicSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedMusicSuccess> putPersonalisedMusicFavouritesByTypeByIdWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, PersonalisedMusicRequest body) throws ApiException {
        okhttp3.Call localVarCall = putPersonalisedMusicFavouritesByTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, id, body, null);
        Type localVarReturnType = new TypeToken<PersonalisedMusicSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Favourite Track or Clip (asynchronously)
     * Update tracks or clips from a BBC Music user favourites.  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music favourite types: Clips or Tracks (required)
     * @param id Clip PID or Track ID (required)
     * @param body Action favourited or unfavourited (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPersonalisedMusicFavouritesByTypeByIdAsync(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, PersonalisedMusicRequest body, final ApiCallback<PersonalisedMusicSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPersonalisedMusicFavouritesByTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, id, body, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedMusicSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putPersonalisedMusicFollowsBatch
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action followed or unfollowed (required)
     * @param action Filters activities based on the type of action (optional)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPersonalisedMusicFollowsBatchCall(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedMusicBatchRequest> body, String action, Boolean musicData, String musicContext, Boolean musicWithinUk, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/my/music/follows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        if (musicData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music-data", musicData));
        }

        if (musicContext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music_context", musicContext));
        }

        if (musicWithinUk != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music_within_uk", musicWithinUk));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPersonalisedMusicFollowsBatchValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedMusicBatchRequest> body, String action, Boolean musicData, String musicContext, Boolean musicWithinUk, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling putPersonalisedMusicFollowsBatch(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling putPersonalisedMusicFollowsBatch(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling putPersonalisedMusicFollowsBatch(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putPersonalisedMusicFollowsBatch(Async)");
        }

        return putPersonalisedMusicFollowsBatchCall(authorization, xAuthenticationProvider, xAPIKey, body, action, musicData, musicContext, musicWithinUk, _callback);

    }

    /**
     * Followed Networks, Categories, Artists, Playlists and Genres
     * Update networks, categories, artists, playlists, networks, genres or services in a users follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action followed or unfollowed (required)
     * @param action Filters activities based on the type of action (optional)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @return PersonalisedMusicSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedMusicSuccess putPersonalisedMusicFollowsBatch(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedMusicBatchRequest> body, String action, Boolean musicData, String musicContext, Boolean musicWithinUk) throws ApiException {
        ApiResponse<PersonalisedMusicSuccess> localVarResp = putPersonalisedMusicFollowsBatchWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, body, action, musicData, musicContext, musicWithinUk);
        return localVarResp.getData();
    }

    /**
     * Followed Networks, Categories, Artists, Playlists and Genres
     * Update networks, categories, artists, playlists, networks, genres or services in a users follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action followed or unfollowed (required)
     * @param action Filters activities based on the type of action (optional)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @return ApiResponse&lt;PersonalisedMusicSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedMusicSuccess> putPersonalisedMusicFollowsBatchWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedMusicBatchRequest> body, String action, Boolean musicData, String musicContext, Boolean musicWithinUk) throws ApiException {
        okhttp3.Call localVarCall = putPersonalisedMusicFollowsBatchValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, body, action, musicData, musicContext, musicWithinUk, null);
        Type localVarReturnType = new TypeToken<PersonalisedMusicSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Followed Networks, Categories, Artists, Playlists and Genres (asynchronously)
     * Update networks, categories, artists, playlists, networks, genres or services in a users follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action followed or unfollowed (required)
     * @param action Filters activities based on the type of action (optional)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPersonalisedMusicFollowsBatchAsync(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedMusicBatchRequest> body, String action, Boolean musicData, String musicContext, Boolean musicWithinUk, final ApiCallback<PersonalisedMusicSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPersonalisedMusicFollowsBatchValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, body, action, musicData, musicContext, musicWithinUk, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedMusicSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putPersonalisedMusicFollowsByTypeById
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music follows types: Playlists, Services, Genres &amp; Artists (required)
     * @param id Playlists, Services, Networks, Genres, Categories or Artists ID (required)
     * @param body Action followed or unfollowed (required)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPersonalisedMusicFollowsByTypeByIdCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, PersonalisedMusicRequest body, Boolean musicData, String musicContext, Boolean musicWithinUk, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/my/music/follows/{type}/{id}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (musicData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music-data", musicData));
        }

        if (musicContext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music_context", musicContext));
        }

        if (musicWithinUk != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music_within_uk", musicWithinUk));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPersonalisedMusicFollowsByTypeByIdValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, PersonalisedMusicRequest body, Boolean musicData, String musicContext, Boolean musicWithinUk, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling putPersonalisedMusicFollowsByTypeById(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling putPersonalisedMusicFollowsByTypeById(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling putPersonalisedMusicFollowsByTypeById(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling putPersonalisedMusicFollowsByTypeById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putPersonalisedMusicFollowsByTypeById(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putPersonalisedMusicFollowsByTypeById(Async)");
        }

        return putPersonalisedMusicFollowsByTypeByIdCall(authorization, xAuthenticationProvider, xAPIKey, type, id, body, musicData, musicContext, musicWithinUk, _callback);

    }

    /**
     * Followed Network, Category, Artist, Playlist and Genre
     * Update a single network, category, artist, playlist, network, genre or service entity is in a users follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music follows types: Playlists, Services, Genres &amp; Artists (required)
     * @param id Playlists, Services, Networks, Genres, Categories or Artists ID (required)
     * @param body Action followed or unfollowed (required)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @return PersonalisedMusicSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedMusicSuccess putPersonalisedMusicFollowsByTypeById(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, PersonalisedMusicRequest body, Boolean musicData, String musicContext, Boolean musicWithinUk) throws ApiException {
        ApiResponse<PersonalisedMusicSuccess> localVarResp = putPersonalisedMusicFollowsByTypeByIdWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, type, id, body, musicData, musicContext, musicWithinUk);
        return localVarResp.getData();
    }

    /**
     * Followed Network, Category, Artist, Playlist and Genre
     * Update a single network, category, artist, playlist, network, genre or service entity is in a users follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music follows types: Playlists, Services, Genres &amp; Artists (required)
     * @param id Playlists, Services, Networks, Genres, Categories or Artists ID (required)
     * @param body Action followed or unfollowed (required)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @return ApiResponse&lt;PersonalisedMusicSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedMusicSuccess> putPersonalisedMusicFollowsByTypeByIdWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, PersonalisedMusicRequest body, Boolean musicData, String musicContext, Boolean musicWithinUk) throws ApiException {
        okhttp3.Call localVarCall = putPersonalisedMusicFollowsByTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, id, body, musicData, musicContext, musicWithinUk, null);
        Type localVarReturnType = new TypeToken<PersonalisedMusicSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Followed Network, Category, Artist, Playlist and Genre (asynchronously)
     * Update a single network, category, artist, playlist, network, genre or service entity is in a users follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Music follows types: Playlists, Services, Genres &amp; Artists (required)
     * @param id Playlists, Services, Networks, Genres, Categories or Artists ID (required)
     * @param body Action followed or unfollowed (required)
     * @param musicData Omits music data from the response, defaults to true (optional)
     * @param musicContext Specify context to be passed to Music API (optional)
     * @param musicWithinUk Specify location to be passed to Music API (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPersonalisedMusicFollowsByTypeByIdAsync(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String id, PersonalisedMusicRequest body, Boolean musicData, String musicContext, Boolean musicWithinUk, final ApiCallback<PersonalisedMusicSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPersonalisedMusicFollowsByTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, id, body, musicData, musicContext, musicWithinUk, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedMusicSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
