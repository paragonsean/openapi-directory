/*
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MusicExportPreferences
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:46.845451-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MusicExportPreferences {
  public static final String SERIALIZED_NAME_ACCESS_EXPIRES_AT = "access_expires_at";
  @SerializedName(SERIALIZED_NAME_ACCESS_EXPIRES_AT)
  private String accessExpiresAt;

  public static final String SERIALIZED_NAME_ACCESS_TOKEN = "access_token";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN)
  private String accessToken;

  public static final String SERIALIZED_NAME_ADD_PLUS_EXPORT = "add_plus_export";
  @SerializedName(SERIALIZED_NAME_ADD_PLUS_EXPORT)
  private Boolean addPlusExport;

  public static final String SERIALIZED_NAME_AUTHORIZATION_CODE = "authorization_code";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_CODE)
  private String authorizationCode;

  public static final String SERIALIZED_NAME_LAST_EXPORT = "last_export";
  @SerializedName(SERIALIZED_NAME_LAST_EXPORT)
  private String lastExport;

  public static final String SERIALIZED_NAME_LEGACY_STATE = "legacy_state";
  @SerializedName(SERIALIZED_NAME_LEGACY_STATE)
  private String legacyState;

  public static final String SERIALIZED_NAME_PARTNER_ID = "partner_id";
  @SerializedName(SERIALIZED_NAME_PARTNER_ID)
  private String partnerId;

  public static final String SERIALIZED_NAME_REFRESH_TOKEN = "refresh_token";
  @SerializedName(SERIALIZED_NAME_REFRESH_TOKEN)
  private String refreshToken;

  public static final String SERIALIZED_NAME_TERMS = "terms";
  @SerializedName(SERIALIZED_NAME_TERMS)
  private Boolean terms;

  public static final String SERIALIZED_NAME_VENDOR = "vendor";
  @SerializedName(SERIALIZED_NAME_VENDOR)
  private String vendor;

  public MusicExportPreferences() {
  }

  public MusicExportPreferences accessExpiresAt(String accessExpiresAt) {
    this.accessExpiresAt = accessExpiresAt;
    return this;
  }

  /**
   * Get accessExpiresAt
   * @return accessExpiresAt
   */
  @javax.annotation.Nonnull
  public String getAccessExpiresAt() {
    return accessExpiresAt;
  }

  public void setAccessExpiresAt(String accessExpiresAt) {
    this.accessExpiresAt = accessExpiresAt;
  }


  public MusicExportPreferences accessToken(String accessToken) {
    this.accessToken = accessToken;
    return this;
  }

  /**
   * Get accessToken
   * @return accessToken
   */
  @javax.annotation.Nonnull
  public String getAccessToken() {
    return accessToken;
  }

  public void setAccessToken(String accessToken) {
    this.accessToken = accessToken;
  }


  public MusicExportPreferences addPlusExport(Boolean addPlusExport) {
    this.addPlusExport = addPlusExport;
    return this;
  }

  /**
   * Get addPlusExport
   * @return addPlusExport
   */
  @javax.annotation.Nonnull
  public Boolean getAddPlusExport() {
    return addPlusExport;
  }

  public void setAddPlusExport(Boolean addPlusExport) {
    this.addPlusExport = addPlusExport;
  }


  public MusicExportPreferences authorizationCode(String authorizationCode) {
    this.authorizationCode = authorizationCode;
    return this;
  }

  /**
   * Get authorizationCode
   * @return authorizationCode
   */
  @javax.annotation.Nonnull
  public String getAuthorizationCode() {
    return authorizationCode;
  }

  public void setAuthorizationCode(String authorizationCode) {
    this.authorizationCode = authorizationCode;
  }


  public MusicExportPreferences lastExport(String lastExport) {
    this.lastExport = lastExport;
    return this;
  }

  /**
   * Get lastExport
   * @return lastExport
   */
  @javax.annotation.Nonnull
  public String getLastExport() {
    return lastExport;
  }

  public void setLastExport(String lastExport) {
    this.lastExport = lastExport;
  }


  public MusicExportPreferences legacyState(String legacyState) {
    this.legacyState = legacyState;
    return this;
  }

  /**
   * Get legacyState
   * @return legacyState
   */
  @javax.annotation.Nonnull
  public String getLegacyState() {
    return legacyState;
  }

  public void setLegacyState(String legacyState) {
    this.legacyState = legacyState;
  }


  public MusicExportPreferences partnerId(String partnerId) {
    this.partnerId = partnerId;
    return this;
  }

  /**
   * Get partnerId
   * @return partnerId
   */
  @javax.annotation.Nonnull
  public String getPartnerId() {
    return partnerId;
  }

  public void setPartnerId(String partnerId) {
    this.partnerId = partnerId;
  }


  public MusicExportPreferences refreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
    return this;
  }

  /**
   * Get refreshToken
   * @return refreshToken
   */
  @javax.annotation.Nonnull
  public String getRefreshToken() {
    return refreshToken;
  }

  public void setRefreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
  }


  public MusicExportPreferences terms(Boolean terms) {
    this.terms = terms;
    return this;
  }

  /**
   * Get terms
   * @return terms
   */
  @javax.annotation.Nonnull
  public Boolean getTerms() {
    return terms;
  }

  public void setTerms(Boolean terms) {
    this.terms = terms;
  }


  public MusicExportPreferences vendor(String vendor) {
    this.vendor = vendor;
    return this;
  }

  /**
   * Get vendor
   * @return vendor
   */
  @javax.annotation.Nonnull
  public String getVendor() {
    return vendor;
  }

  public void setVendor(String vendor) {
    this.vendor = vendor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MusicExportPreferences musicExportPreferences = (MusicExportPreferences) o;
    return Objects.equals(this.accessExpiresAt, musicExportPreferences.accessExpiresAt) &&
        Objects.equals(this.accessToken, musicExportPreferences.accessToken) &&
        Objects.equals(this.addPlusExport, musicExportPreferences.addPlusExport) &&
        Objects.equals(this.authorizationCode, musicExportPreferences.authorizationCode) &&
        Objects.equals(this.lastExport, musicExportPreferences.lastExport) &&
        Objects.equals(this.legacyState, musicExportPreferences.legacyState) &&
        Objects.equals(this.partnerId, musicExportPreferences.partnerId) &&
        Objects.equals(this.refreshToken, musicExportPreferences.refreshToken) &&
        Objects.equals(this.terms, musicExportPreferences.terms) &&
        Objects.equals(this.vendor, musicExportPreferences.vendor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessExpiresAt, accessToken, addPlusExport, authorizationCode, lastExport, legacyState, partnerId, refreshToken, terms, vendor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MusicExportPreferences {\n");
    sb.append("    accessExpiresAt: ").append(toIndentedString(accessExpiresAt)).append("\n");
    sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
    sb.append("    addPlusExport: ").append(toIndentedString(addPlusExport)).append("\n");
    sb.append("    authorizationCode: ").append(toIndentedString(authorizationCode)).append("\n");
    sb.append("    lastExport: ").append(toIndentedString(lastExport)).append("\n");
    sb.append("    legacyState: ").append(toIndentedString(legacyState)).append("\n");
    sb.append("    partnerId: ").append(toIndentedString(partnerId)).append("\n");
    sb.append("    refreshToken: ").append(toIndentedString(refreshToken)).append("\n");
    sb.append("    terms: ").append(toIndentedString(terms)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access_expires_at");
    openapiFields.add("access_token");
    openapiFields.add("add_plus_export");
    openapiFields.add("authorization_code");
    openapiFields.add("last_export");
    openapiFields.add("legacy_state");
    openapiFields.add("partner_id");
    openapiFields.add("refresh_token");
    openapiFields.add("terms");
    openapiFields.add("vendor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("access_expires_at");
    openapiRequiredFields.add("access_token");
    openapiRequiredFields.add("add_plus_export");
    openapiRequiredFields.add("authorization_code");
    openapiRequiredFields.add("last_export");
    openapiRequiredFields.add("legacy_state");
    openapiRequiredFields.add("partner_id");
    openapiRequiredFields.add("refresh_token");
    openapiRequiredFields.add("terms");
    openapiRequiredFields.add("vendor");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MusicExportPreferences
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MusicExportPreferences.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MusicExportPreferences is not found in the empty JSON string", MusicExportPreferences.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MusicExportPreferences.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MusicExportPreferences` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MusicExportPreferences.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("access_expires_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_expires_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_expires_at").toString()));
      }
      if (!jsonObj.get("access_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_token").toString()));
      }
      if (!jsonObj.get("authorization_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorization_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorization_code").toString()));
      }
      if (!jsonObj.get("last_export").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_export` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_export").toString()));
      }
      if (!jsonObj.get("legacy_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legacy_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legacy_state").toString()));
      }
      if (!jsonObj.get("partner_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partner_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partner_id").toString()));
      }
      if (!jsonObj.get("refresh_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refresh_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refresh_token").toString()));
      }
      if (!jsonObj.get("vendor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MusicExportPreferences.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MusicExportPreferences' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MusicExportPreferences> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MusicExportPreferences.class));

       return (TypeAdapter<T>) new TypeAdapter<MusicExportPreferences>() {
           @Override
           public void write(JsonWriter out, MusicExportPreferences value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MusicExportPreferences read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MusicExportPreferences given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MusicExportPreferences
   * @throws IOException if the JSON string is invalid with respect to MusicExportPreferences
   */
  public static MusicExportPreferences fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MusicExportPreferences.class);
  }

  /**
   * Convert an instance of MusicExportPreferences to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

