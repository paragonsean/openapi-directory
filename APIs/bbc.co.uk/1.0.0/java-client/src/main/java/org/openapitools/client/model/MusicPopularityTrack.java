/*
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MusicRecordAudio;
import org.openapitools.client.model.MusicTrackArtist;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MusicPopularityTrack
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:46.845451-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MusicPopularityTrack {
  public static final String SERIALIZED_NAME_ALBUM = "album";
  @SerializedName(SERIALIZED_NAME_ALBUM)
  private String album;

  public static final String SERIALIZED_NAME_ARTIST_GID = "artistGid";
  @SerializedName(SERIALIZED_NAME_ARTIST_GID)
  private String artistGid;

  public static final String SERIALIZED_NAME_ARTIST_NAME = "artistName";
  @SerializedName(SERIALIZED_NAME_ARTIST_NAME)
  private String artistName;

  public static final String SERIALIZED_NAME_ARTISTS = "artists";
  @SerializedName(SERIALIZED_NAME_ARTISTS)
  private List<MusicTrackArtist> artists = new ArrayList<>();

  public static final String SERIALIZED_NAME_BASE_TITLE = "baseTitle";
  @SerializedName(SERIALIZED_NAME_BASE_TITLE)
  private String baseTitle;

  public static final String SERIALIZED_NAME_CLASSICAL = "classical";
  @SerializedName(SERIALIZED_NAME_CLASSICAL)
  private Boolean classical;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MERGED_IDS = "mergedIds";
  @SerializedName(SERIALIZED_NAME_MERGED_IDS)
  private List<String> mergedIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREFERRED_MULTIPLAY_RECORD_AUDIO = "preferredMultiplayRecordAudio";
  @SerializedName(SERIALIZED_NAME_PREFERRED_MULTIPLAY_RECORD_AUDIO)
  private MusicRecordAudio preferredMultiplayRecordAudio;

  public static final String SERIALIZED_NAME_PREFERRED_RECORD_AUDIO = "preferredRecordAudio";
  @SerializedName(SERIALIZED_NAME_PREFERRED_RECORD_AUDIO)
  private MusicRecordAudio preferredRecordAudio;

  public static final String SERIALIZED_NAME_RADIO_EDIT = "radioEdit";
  @SerializedName(SERIALIZED_NAME_RADIO_EDIT)
  private Boolean radioEdit;

  public static final String SERIALIZED_NAME_RECORD_AUDIO = "recordAudio";
  @SerializedName(SERIALIZED_NAME_RECORD_AUDIO)
  private List<MusicRecordAudio> recordAudio = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECORD_IMAGE_HREF = "recordImageHref";
  @SerializedName(SERIALIZED_NAME_RECORD_IMAGE_HREF)
  private String recordImageHref;

  public static final String SERIALIZED_NAME_RECORD_IMAGE_PID = "recordImagePid";
  @SerializedName(SERIALIZED_NAME_RECORD_IMAGE_PID)
  private String recordImagePid;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Integer score;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public MusicPopularityTrack() {
  }

  public MusicPopularityTrack album(String album) {
    this.album = album;
    return this;
  }

  /**
   * Get album
   * @return album
   */
  @javax.annotation.Nullable
  public String getAlbum() {
    return album;
  }

  public void setAlbum(String album) {
    this.album = album;
  }


  public MusicPopularityTrack artistGid(String artistGid) {
    this.artistGid = artistGid;
    return this;
  }

  /**
   * Get artistGid
   * @return artistGid
   */
  @javax.annotation.Nullable
  public String getArtistGid() {
    return artistGid;
  }

  public void setArtistGid(String artistGid) {
    this.artistGid = artistGid;
  }


  public MusicPopularityTrack artistName(String artistName) {
    this.artistName = artistName;
    return this;
  }

  /**
   * Get artistName
   * @return artistName
   */
  @javax.annotation.Nullable
  public String getArtistName() {
    return artistName;
  }

  public void setArtistName(String artistName) {
    this.artistName = artistName;
  }


  public MusicPopularityTrack artists(List<MusicTrackArtist> artists) {
    this.artists = artists;
    return this;
  }

  public MusicPopularityTrack addArtistsItem(MusicTrackArtist artistsItem) {
    if (this.artists == null) {
      this.artists = new ArrayList<>();
    }
    this.artists.add(artistsItem);
    return this;
  }

  /**
   * Get artists
   * @return artists
   */
  @javax.annotation.Nullable
  public List<MusicTrackArtist> getArtists() {
    return artists;
  }

  public void setArtists(List<MusicTrackArtist> artists) {
    this.artists = artists;
  }


  public MusicPopularityTrack baseTitle(String baseTitle) {
    this.baseTitle = baseTitle;
    return this;
  }

  /**
   * Get baseTitle
   * @return baseTitle
   */
  @javax.annotation.Nullable
  public String getBaseTitle() {
    return baseTitle;
  }

  public void setBaseTitle(String baseTitle) {
    this.baseTitle = baseTitle;
  }


  public MusicPopularityTrack classical(Boolean classical) {
    this.classical = classical;
    return this;
  }

  /**
   * Get classical
   * @return classical
   */
  @javax.annotation.Nullable
  public Boolean getClassical() {
    return classical;
  }

  public void setClassical(Boolean classical) {
    this.classical = classical;
  }


  public MusicPopularityTrack id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MusicPopularityTrack mergedIds(List<String> mergedIds) {
    this.mergedIds = mergedIds;
    return this;
  }

  public MusicPopularityTrack addMergedIdsItem(String mergedIdsItem) {
    if (this.mergedIds == null) {
      this.mergedIds = new ArrayList<>();
    }
    this.mergedIds.add(mergedIdsItem);
    return this;
  }

  /**
   * Get mergedIds
   * @return mergedIds
   */
  @javax.annotation.Nullable
  public List<String> getMergedIds() {
    return mergedIds;
  }

  public void setMergedIds(List<String> mergedIds) {
    this.mergedIds = mergedIds;
  }


  public MusicPopularityTrack preferredMultiplayRecordAudio(MusicRecordAudio preferredMultiplayRecordAudio) {
    this.preferredMultiplayRecordAudio = preferredMultiplayRecordAudio;
    return this;
  }

  /**
   * Get preferredMultiplayRecordAudio
   * @return preferredMultiplayRecordAudio
   */
  @javax.annotation.Nullable
  public MusicRecordAudio getPreferredMultiplayRecordAudio() {
    return preferredMultiplayRecordAudio;
  }

  public void setPreferredMultiplayRecordAudio(MusicRecordAudio preferredMultiplayRecordAudio) {
    this.preferredMultiplayRecordAudio = preferredMultiplayRecordAudio;
  }


  public MusicPopularityTrack preferredRecordAudio(MusicRecordAudio preferredRecordAudio) {
    this.preferredRecordAudio = preferredRecordAudio;
    return this;
  }

  /**
   * Get preferredRecordAudio
   * @return preferredRecordAudio
   */
  @javax.annotation.Nullable
  public MusicRecordAudio getPreferredRecordAudio() {
    return preferredRecordAudio;
  }

  public void setPreferredRecordAudio(MusicRecordAudio preferredRecordAudio) {
    this.preferredRecordAudio = preferredRecordAudio;
  }


  public MusicPopularityTrack radioEdit(Boolean radioEdit) {
    this.radioEdit = radioEdit;
    return this;
  }

  /**
   * Get radioEdit
   * @return radioEdit
   */
  @javax.annotation.Nullable
  public Boolean getRadioEdit() {
    return radioEdit;
  }

  public void setRadioEdit(Boolean radioEdit) {
    this.radioEdit = radioEdit;
  }


  public MusicPopularityTrack recordAudio(List<MusicRecordAudio> recordAudio) {
    this.recordAudio = recordAudio;
    return this;
  }

  public MusicPopularityTrack addRecordAudioItem(MusicRecordAudio recordAudioItem) {
    if (this.recordAudio == null) {
      this.recordAudio = new ArrayList<>();
    }
    this.recordAudio.add(recordAudioItem);
    return this;
  }

  /**
   * Get recordAudio
   * @return recordAudio
   */
  @javax.annotation.Nullable
  public List<MusicRecordAudio> getRecordAudio() {
    return recordAudio;
  }

  public void setRecordAudio(List<MusicRecordAudio> recordAudio) {
    this.recordAudio = recordAudio;
  }


  public MusicPopularityTrack recordImageHref(String recordImageHref) {
    this.recordImageHref = recordImageHref;
    return this;
  }

  /**
   * Get recordImageHref
   * @return recordImageHref
   */
  @javax.annotation.Nullable
  public String getRecordImageHref() {
    return recordImageHref;
  }

  public void setRecordImageHref(String recordImageHref) {
    this.recordImageHref = recordImageHref;
  }


  public MusicPopularityTrack recordImagePid(String recordImagePid) {
    this.recordImagePid = recordImagePid;
    return this;
  }

  /**
   * Get recordImagePid
   * @return recordImagePid
   */
  @javax.annotation.Nullable
  public String getRecordImagePid() {
    return recordImagePid;
  }

  public void setRecordImagePid(String recordImagePid) {
    this.recordImagePid = recordImagePid;
  }


  public MusicPopularityTrack score(Integer score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nonnull
  public Integer getScore() {
    return score;
  }

  public void setScore(Integer score) {
    this.score = score;
  }


  public MusicPopularityTrack title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public MusicPopularityTrack type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MusicPopularityTrack musicPopularityTrack = (MusicPopularityTrack) o;
    return Objects.equals(this.album, musicPopularityTrack.album) &&
        Objects.equals(this.artistGid, musicPopularityTrack.artistGid) &&
        Objects.equals(this.artistName, musicPopularityTrack.artistName) &&
        Objects.equals(this.artists, musicPopularityTrack.artists) &&
        Objects.equals(this.baseTitle, musicPopularityTrack.baseTitle) &&
        Objects.equals(this.classical, musicPopularityTrack.classical) &&
        Objects.equals(this.id, musicPopularityTrack.id) &&
        Objects.equals(this.mergedIds, musicPopularityTrack.mergedIds) &&
        Objects.equals(this.preferredMultiplayRecordAudio, musicPopularityTrack.preferredMultiplayRecordAudio) &&
        Objects.equals(this.preferredRecordAudio, musicPopularityTrack.preferredRecordAudio) &&
        Objects.equals(this.radioEdit, musicPopularityTrack.radioEdit) &&
        Objects.equals(this.recordAudio, musicPopularityTrack.recordAudio) &&
        Objects.equals(this.recordImageHref, musicPopularityTrack.recordImageHref) &&
        Objects.equals(this.recordImagePid, musicPopularityTrack.recordImagePid) &&
        Objects.equals(this.score, musicPopularityTrack.score) &&
        Objects.equals(this.title, musicPopularityTrack.title) &&
        Objects.equals(this.type, musicPopularityTrack.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(album, artistGid, artistName, artists, baseTitle, classical, id, mergedIds, preferredMultiplayRecordAudio, preferredRecordAudio, radioEdit, recordAudio, recordImageHref, recordImagePid, score, title, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MusicPopularityTrack {\n");
    sb.append("    album: ").append(toIndentedString(album)).append("\n");
    sb.append("    artistGid: ").append(toIndentedString(artistGid)).append("\n");
    sb.append("    artistName: ").append(toIndentedString(artistName)).append("\n");
    sb.append("    artists: ").append(toIndentedString(artists)).append("\n");
    sb.append("    baseTitle: ").append(toIndentedString(baseTitle)).append("\n");
    sb.append("    classical: ").append(toIndentedString(classical)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mergedIds: ").append(toIndentedString(mergedIds)).append("\n");
    sb.append("    preferredMultiplayRecordAudio: ").append(toIndentedString(preferredMultiplayRecordAudio)).append("\n");
    sb.append("    preferredRecordAudio: ").append(toIndentedString(preferredRecordAudio)).append("\n");
    sb.append("    radioEdit: ").append(toIndentedString(radioEdit)).append("\n");
    sb.append("    recordAudio: ").append(toIndentedString(recordAudio)).append("\n");
    sb.append("    recordImageHref: ").append(toIndentedString(recordImageHref)).append("\n");
    sb.append("    recordImagePid: ").append(toIndentedString(recordImagePid)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("album");
    openapiFields.add("artistGid");
    openapiFields.add("artistName");
    openapiFields.add("artists");
    openapiFields.add("baseTitle");
    openapiFields.add("classical");
    openapiFields.add("id");
    openapiFields.add("mergedIds");
    openapiFields.add("preferredMultiplayRecordAudio");
    openapiFields.add("preferredRecordAudio");
    openapiFields.add("radioEdit");
    openapiFields.add("recordAudio");
    openapiFields.add("recordImageHref");
    openapiFields.add("recordImagePid");
    openapiFields.add("score");
    openapiFields.add("title");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("score");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MusicPopularityTrack
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MusicPopularityTrack.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MusicPopularityTrack is not found in the empty JSON string", MusicPopularityTrack.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MusicPopularityTrack.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MusicPopularityTrack` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MusicPopularityTrack.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("album") != null && !jsonObj.get("album").isJsonNull()) && !jsonObj.get("album").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `album` to be a primitive type in the JSON string but got `%s`", jsonObj.get("album").toString()));
      }
      if ((jsonObj.get("artistGid") != null && !jsonObj.get("artistGid").isJsonNull()) && !jsonObj.get("artistGid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artistGid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artistGid").toString()));
      }
      if ((jsonObj.get("artistName") != null && !jsonObj.get("artistName").isJsonNull()) && !jsonObj.get("artistName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artistName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artistName").toString()));
      }
      if (jsonObj.get("artists") != null && !jsonObj.get("artists").isJsonNull()) {
        JsonArray jsonArrayartists = jsonObj.getAsJsonArray("artists");
        if (jsonArrayartists != null) {
          // ensure the json data is an array
          if (!jsonObj.get("artists").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `artists` to be an array in the JSON string but got `%s`", jsonObj.get("artists").toString()));
          }

          // validate the optional field `artists` (array)
          for (int i = 0; i < jsonArrayartists.size(); i++) {
            MusicTrackArtist.validateJsonElement(jsonArrayartists.get(i));
          };
        }
      }
      if ((jsonObj.get("baseTitle") != null && !jsonObj.get("baseTitle").isJsonNull()) && !jsonObj.get("baseTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseTitle").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("mergedIds") != null && !jsonObj.get("mergedIds").isJsonNull() && !jsonObj.get("mergedIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mergedIds` to be an array in the JSON string but got `%s`", jsonObj.get("mergedIds").toString()));
      }
      // validate the optional field `preferredMultiplayRecordAudio`
      if (jsonObj.get("preferredMultiplayRecordAudio") != null && !jsonObj.get("preferredMultiplayRecordAudio").isJsonNull()) {
        MusicRecordAudio.validateJsonElement(jsonObj.get("preferredMultiplayRecordAudio"));
      }
      // validate the optional field `preferredRecordAudio`
      if (jsonObj.get("preferredRecordAudio") != null && !jsonObj.get("preferredRecordAudio").isJsonNull()) {
        MusicRecordAudio.validateJsonElement(jsonObj.get("preferredRecordAudio"));
      }
      if (jsonObj.get("recordAudio") != null && !jsonObj.get("recordAudio").isJsonNull()) {
        JsonArray jsonArrayrecordAudio = jsonObj.getAsJsonArray("recordAudio");
        if (jsonArrayrecordAudio != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recordAudio").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recordAudio` to be an array in the JSON string but got `%s`", jsonObj.get("recordAudio").toString()));
          }

          // validate the optional field `recordAudio` (array)
          for (int i = 0; i < jsonArrayrecordAudio.size(); i++) {
            MusicRecordAudio.validateJsonElement(jsonArrayrecordAudio.get(i));
          };
        }
      }
      if ((jsonObj.get("recordImageHref") != null && !jsonObj.get("recordImageHref").isJsonNull()) && !jsonObj.get("recordImageHref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recordImageHref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recordImageHref").toString()));
      }
      if ((jsonObj.get("recordImagePid") != null && !jsonObj.get("recordImagePid").isJsonNull()) && !jsonObj.get("recordImagePid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recordImagePid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recordImagePid").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MusicPopularityTrack.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MusicPopularityTrack' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MusicPopularityTrack> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MusicPopularityTrack.class));

       return (TypeAdapter<T>) new TypeAdapter<MusicPopularityTrack>() {
           @Override
           public void write(JsonWriter out, MusicPopularityTrack value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MusicPopularityTrack read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MusicPopularityTrack given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MusicPopularityTrack
   * @throws IOException if the JSON string is invalid with respect to MusicPopularityTrack
   */
  public static MusicPopularityTrack fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MusicPopularityTrack.class);
  }

  /**
   * Convert an instance of MusicPopularityTrack to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

