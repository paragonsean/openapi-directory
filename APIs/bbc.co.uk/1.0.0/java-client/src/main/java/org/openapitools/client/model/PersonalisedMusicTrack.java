/*
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PersonalisedMusicTrackContribution;
import org.openapitools.client.model.PersonalisedMusicTrackImage;
import org.openapitools.client.model.PersonalisedMusicTrackMedia;
import org.openapitools.client.model.PersonalisedMusicVersion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PersonalisedMusicTrack
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:46.845451-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PersonalisedMusicTrack {
  public static final String SERIALIZED_NAME_CONTRIBUTIONS = "contributions";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTIONS)
  private List<PersonalisedMusicTrackContribution> contributions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<PersonalisedMusicTrackImage> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEDIA = "media";
  @SerializedName(SERIALIZED_NAME_MEDIA)
  private List<PersonalisedMusicTrackMedia> media = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private PersonalisedMusicVersion version;

  public PersonalisedMusicTrack() {
  }

  public PersonalisedMusicTrack contributions(List<PersonalisedMusicTrackContribution> contributions) {
    this.contributions = contributions;
    return this;
  }

  public PersonalisedMusicTrack addContributionsItem(PersonalisedMusicTrackContribution contributionsItem) {
    if (this.contributions == null) {
      this.contributions = new ArrayList<>();
    }
    this.contributions.add(contributionsItem);
    return this;
  }

  /**
   * Get contributions
   * @return contributions
   */
  @javax.annotation.Nonnull
  public List<PersonalisedMusicTrackContribution> getContributions() {
    return contributions;
  }

  public void setContributions(List<PersonalisedMusicTrackContribution> contributions) {
    this.contributions = contributions;
  }


  public PersonalisedMusicTrack id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PersonalisedMusicTrack images(List<PersonalisedMusicTrackImage> images) {
    this.images = images;
    return this;
  }

  public PersonalisedMusicTrack addImagesItem(PersonalisedMusicTrackImage imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * Get images
   * @return images
   */
  @javax.annotation.Nonnull
  public List<PersonalisedMusicTrackImage> getImages() {
    return images;
  }

  public void setImages(List<PersonalisedMusicTrackImage> images) {
    this.images = images;
  }


  public PersonalisedMusicTrack media(List<PersonalisedMusicTrackMedia> media) {
    this.media = media;
    return this;
  }

  public PersonalisedMusicTrack addMediaItem(PersonalisedMusicTrackMedia mediaItem) {
    if (this.media == null) {
      this.media = new ArrayList<>();
    }
    this.media.add(mediaItem);
    return this;
  }

  /**
   * Get media
   * @return media
   */
  @javax.annotation.Nonnull
  public List<PersonalisedMusicTrackMedia> getMedia() {
    return media;
  }

  public void setMedia(List<PersonalisedMusicTrackMedia> media) {
    this.media = media;
  }


  public PersonalisedMusicTrack title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public PersonalisedMusicTrack type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public PersonalisedMusicTrack version(PersonalisedMusicVersion version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nonnull
  public PersonalisedMusicVersion getVersion() {
    return version;
  }

  public void setVersion(PersonalisedMusicVersion version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersonalisedMusicTrack personalisedMusicTrack = (PersonalisedMusicTrack) o;
    return Objects.equals(this.contributions, personalisedMusicTrack.contributions) &&
        Objects.equals(this.id, personalisedMusicTrack.id) &&
        Objects.equals(this.images, personalisedMusicTrack.images) &&
        Objects.equals(this.media, personalisedMusicTrack.media) &&
        Objects.equals(this.title, personalisedMusicTrack.title) &&
        Objects.equals(this.type, personalisedMusicTrack.type) &&
        Objects.equals(this.version, personalisedMusicTrack.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contributions, id, images, media, title, type, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersonalisedMusicTrack {\n");
    sb.append("    contributions: ").append(toIndentedString(contributions)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    media: ").append(toIndentedString(media)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contributions");
    openapiFields.add("id");
    openapiFields.add("images");
    openapiFields.add("media");
    openapiFields.add("title");
    openapiFields.add("type");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contributions");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("images");
    openapiRequiredFields.add("media");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("version");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PersonalisedMusicTrack
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PersonalisedMusicTrack.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PersonalisedMusicTrack is not found in the empty JSON string", PersonalisedMusicTrack.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PersonalisedMusicTrack.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PersonalisedMusicTrack` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PersonalisedMusicTrack.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("contributions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `contributions` to be an array in the JSON string but got `%s`", jsonObj.get("contributions").toString()));
      }

      JsonArray jsonArraycontributions = jsonObj.getAsJsonArray("contributions");
      // validate the required field `contributions` (array)
      for (int i = 0; i < jsonArraycontributions.size(); i++) {
        PersonalisedMusicTrackContribution.validateJsonElement(jsonArraycontributions.get(i));
      };
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("images").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
      }

      JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
      // validate the required field `images` (array)
      for (int i = 0; i < jsonArrayimages.size(); i++) {
        PersonalisedMusicTrackImage.validateJsonElement(jsonArrayimages.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("media").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `media` to be an array in the JSON string but got `%s`", jsonObj.get("media").toString()));
      }

      JsonArray jsonArraymedia = jsonObj.getAsJsonArray("media");
      // validate the required field `media` (array)
      for (int i = 0; i < jsonArraymedia.size(); i++) {
        PersonalisedMusicTrackMedia.validateJsonElement(jsonArraymedia.get(i));
      };
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `version`
      PersonalisedMusicVersion.validateJsonElement(jsonObj.get("version"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PersonalisedMusicTrack.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PersonalisedMusicTrack' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PersonalisedMusicTrack> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PersonalisedMusicTrack.class));

       return (TypeAdapter<T>) new TypeAdapter<PersonalisedMusicTrack>() {
           @Override
           public void write(JsonWriter out, PersonalisedMusicTrack value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PersonalisedMusicTrack read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PersonalisedMusicTrack given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PersonalisedMusicTrack
   * @throws IOException if the JSON string is invalid with respect to PersonalisedMusicTrack
   */
  public static PersonalisedMusicTrack fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PersonalisedMusicTrack.class);
  }

  /**
   * Convert an instance of PersonalisedMusicTrack to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

