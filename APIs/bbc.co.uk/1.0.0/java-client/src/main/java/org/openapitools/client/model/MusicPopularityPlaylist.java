/*
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExternalPartner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MusicPopularityPlaylist
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:46.845451-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MusicPopularityPlaylist {
  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<String> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMENTS_ENABLED = "commentsEnabled";
  @SerializedName(SERIALIZED_NAME_COMMENTS_ENABLED)
  private Boolean commentsEnabled;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXTERNAL_PARTNERS = "externalPartners";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_PARTNERS)
  private List<ExternalPartner> externalPartners = new ArrayList<>();

  public static final String SERIALIZED_NAME_GENRE = "genre";
  @SerializedName(SERIALIZED_NAME_GENRE)
  private String genre;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE_PID = "imagePid";
  @SerializedName(SERIALIZED_NAME_IMAGE_PID)
  private String imagePid;

  public static final String SERIALIZED_NAME_IMAGE_URL = "imageUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_MOOD = "mood";
  @SerializedName(SERIALIZED_NAME_MOOD)
  private String mood;

  public static final String SERIALIZED_NAME_ONE_OFF = "oneOff";
  @SerializedName(SERIALIZED_NAME_ONE_OFF)
  private Boolean oneOff;

  public static final String SERIALIZED_NAME_PLAYLIST_PLAYBACK_TYPE = "playlistPlaybackType";
  @SerializedName(SERIALIZED_NAME_PLAYLIST_PLAYBACK_TYPE)
  private String playlistPlaybackType;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Integer score;

  public static final String SERIALIZED_NAME_SERVICE_ID = "serviceId";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private String serviceId;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private String visibility;

  public static final String SERIALIZED_NAME_WIDE_IMAGE_PID = "wideImagePid";
  @SerializedName(SERIALIZED_NAME_WIDE_IMAGE_PID)
  private String wideImagePid;

  public static final String SERIALIZED_NAME_WIDE_IMAGE_URL = "wideImageUrl";
  @SerializedName(SERIALIZED_NAME_WIDE_IMAGE_URL)
  private String wideImageUrl;

  public MusicPopularityPlaylist() {
  }

  public MusicPopularityPlaylist categories(List<String> categories) {
    this.categories = categories;
    return this;
  }

  public MusicPopularityPlaylist addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * Get categories
   * @return categories
   */
  @javax.annotation.Nonnull
  public List<String> getCategories() {
    return categories;
  }

  public void setCategories(List<String> categories) {
    this.categories = categories;
  }


  public MusicPopularityPlaylist commentsEnabled(Boolean commentsEnabled) {
    this.commentsEnabled = commentsEnabled;
    return this;
  }

  /**
   * Get commentsEnabled
   * @return commentsEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getCommentsEnabled() {
    return commentsEnabled;
  }

  public void setCommentsEnabled(Boolean commentsEnabled) {
    this.commentsEnabled = commentsEnabled;
  }


  public MusicPopularityPlaylist description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public MusicPopularityPlaylist externalPartners(List<ExternalPartner> externalPartners) {
    this.externalPartners = externalPartners;
    return this;
  }

  public MusicPopularityPlaylist addExternalPartnersItem(ExternalPartner externalPartnersItem) {
    if (this.externalPartners == null) {
      this.externalPartners = new ArrayList<>();
    }
    this.externalPartners.add(externalPartnersItem);
    return this;
  }

  /**
   * Get externalPartners
   * @return externalPartners
   */
  @javax.annotation.Nonnull
  public List<ExternalPartner> getExternalPartners() {
    return externalPartners;
  }

  public void setExternalPartners(List<ExternalPartner> externalPartners) {
    this.externalPartners = externalPartners;
  }


  public MusicPopularityPlaylist genre(String genre) {
    this.genre = genre;
    return this;
  }

  /**
   * Get genre
   * @return genre
   */
  @javax.annotation.Nonnull
  public String getGenre() {
    return genre;
  }

  public void setGenre(String genre) {
    this.genre = genre;
  }


  public MusicPopularityPlaylist id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MusicPopularityPlaylist imagePid(String imagePid) {
    this.imagePid = imagePid;
    return this;
  }

  /**
   * Get imagePid
   * @return imagePid
   */
  @javax.annotation.Nonnull
  public String getImagePid() {
    return imagePid;
  }

  public void setImagePid(String imagePid) {
    this.imagePid = imagePid;
  }


  public MusicPopularityPlaylist imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Get imageUrl
   * @return imageUrl
   */
  @javax.annotation.Nonnull
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public MusicPopularityPlaylist kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Get kind
   * @return kind
   */
  @javax.annotation.Nonnull
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public MusicPopularityPlaylist mood(String mood) {
    this.mood = mood;
    return this;
  }

  /**
   * Get mood
   * @return mood
   */
  @javax.annotation.Nonnull
  public String getMood() {
    return mood;
  }

  public void setMood(String mood) {
    this.mood = mood;
  }


  public MusicPopularityPlaylist oneOff(Boolean oneOff) {
    this.oneOff = oneOff;
    return this;
  }

  /**
   * Get oneOff
   * @return oneOff
   */
  @javax.annotation.Nonnull
  public Boolean getOneOff() {
    return oneOff;
  }

  public void setOneOff(Boolean oneOff) {
    this.oneOff = oneOff;
  }


  public MusicPopularityPlaylist playlistPlaybackType(String playlistPlaybackType) {
    this.playlistPlaybackType = playlistPlaybackType;
    return this;
  }

  /**
   * Get playlistPlaybackType
   * @return playlistPlaybackType
   */
  @javax.annotation.Nonnull
  public String getPlaylistPlaybackType() {
    return playlistPlaybackType;
  }

  public void setPlaylistPlaybackType(String playlistPlaybackType) {
    this.playlistPlaybackType = playlistPlaybackType;
  }


  public MusicPopularityPlaylist score(Integer score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nonnull
  public Integer getScore() {
    return score;
  }

  public void setScore(Integer score) {
    this.score = score;
  }


  public MusicPopularityPlaylist serviceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  /**
   * Get serviceId
   * @return serviceId
   */
  @javax.annotation.Nonnull
  public String getServiceId() {
    return serviceId;
  }

  public void setServiceId(String serviceId) {
    this.serviceId = serviceId;
  }


  public MusicPopularityPlaylist title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public MusicPopularityPlaylist updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public MusicPopularityPlaylist visibility(String visibility) {
    this.visibility = visibility;
    return this;
  }

  /**
   * Get visibility
   * @return visibility
   */
  @javax.annotation.Nonnull
  public String getVisibility() {
    return visibility;
  }

  public void setVisibility(String visibility) {
    this.visibility = visibility;
  }


  public MusicPopularityPlaylist wideImagePid(String wideImagePid) {
    this.wideImagePid = wideImagePid;
    return this;
  }

  /**
   * Get wideImagePid
   * @return wideImagePid
   */
  @javax.annotation.Nonnull
  public String getWideImagePid() {
    return wideImagePid;
  }

  public void setWideImagePid(String wideImagePid) {
    this.wideImagePid = wideImagePid;
  }


  public MusicPopularityPlaylist wideImageUrl(String wideImageUrl) {
    this.wideImageUrl = wideImageUrl;
    return this;
  }

  /**
   * Get wideImageUrl
   * @return wideImageUrl
   */
  @javax.annotation.Nonnull
  public String getWideImageUrl() {
    return wideImageUrl;
  }

  public void setWideImageUrl(String wideImageUrl) {
    this.wideImageUrl = wideImageUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MusicPopularityPlaylist musicPopularityPlaylist = (MusicPopularityPlaylist) o;
    return Objects.equals(this.categories, musicPopularityPlaylist.categories) &&
        Objects.equals(this.commentsEnabled, musicPopularityPlaylist.commentsEnabled) &&
        Objects.equals(this.description, musicPopularityPlaylist.description) &&
        Objects.equals(this.externalPartners, musicPopularityPlaylist.externalPartners) &&
        Objects.equals(this.genre, musicPopularityPlaylist.genre) &&
        Objects.equals(this.id, musicPopularityPlaylist.id) &&
        Objects.equals(this.imagePid, musicPopularityPlaylist.imagePid) &&
        Objects.equals(this.imageUrl, musicPopularityPlaylist.imageUrl) &&
        Objects.equals(this.kind, musicPopularityPlaylist.kind) &&
        Objects.equals(this.mood, musicPopularityPlaylist.mood) &&
        Objects.equals(this.oneOff, musicPopularityPlaylist.oneOff) &&
        Objects.equals(this.playlistPlaybackType, musicPopularityPlaylist.playlistPlaybackType) &&
        Objects.equals(this.score, musicPopularityPlaylist.score) &&
        Objects.equals(this.serviceId, musicPopularityPlaylist.serviceId) &&
        Objects.equals(this.title, musicPopularityPlaylist.title) &&
        Objects.equals(this.updatedAt, musicPopularityPlaylist.updatedAt) &&
        Objects.equals(this.visibility, musicPopularityPlaylist.visibility) &&
        Objects.equals(this.wideImagePid, musicPopularityPlaylist.wideImagePid) &&
        Objects.equals(this.wideImageUrl, musicPopularityPlaylist.wideImageUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categories, commentsEnabled, description, externalPartners, genre, id, imagePid, imageUrl, kind, mood, oneOff, playlistPlaybackType, score, serviceId, title, updatedAt, visibility, wideImagePid, wideImageUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MusicPopularityPlaylist {\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    commentsEnabled: ").append(toIndentedString(commentsEnabled)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    externalPartners: ").append(toIndentedString(externalPartners)).append("\n");
    sb.append("    genre: ").append(toIndentedString(genre)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imagePid: ").append(toIndentedString(imagePid)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    mood: ").append(toIndentedString(mood)).append("\n");
    sb.append("    oneOff: ").append(toIndentedString(oneOff)).append("\n");
    sb.append("    playlistPlaybackType: ").append(toIndentedString(playlistPlaybackType)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    wideImagePid: ").append(toIndentedString(wideImagePid)).append("\n");
    sb.append("    wideImageUrl: ").append(toIndentedString(wideImageUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categories");
    openapiFields.add("commentsEnabled");
    openapiFields.add("description");
    openapiFields.add("externalPartners");
    openapiFields.add("genre");
    openapiFields.add("id");
    openapiFields.add("imagePid");
    openapiFields.add("imageUrl");
    openapiFields.add("kind");
    openapiFields.add("mood");
    openapiFields.add("oneOff");
    openapiFields.add("playlistPlaybackType");
    openapiFields.add("score");
    openapiFields.add("serviceId");
    openapiFields.add("title");
    openapiFields.add("updatedAt");
    openapiFields.add("visibility");
    openapiFields.add("wideImagePid");
    openapiFields.add("wideImageUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("categories");
    openapiRequiredFields.add("commentsEnabled");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("externalPartners");
    openapiRequiredFields.add("genre");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("imagePid");
    openapiRequiredFields.add("imageUrl");
    openapiRequiredFields.add("kind");
    openapiRequiredFields.add("mood");
    openapiRequiredFields.add("oneOff");
    openapiRequiredFields.add("playlistPlaybackType");
    openapiRequiredFields.add("score");
    openapiRequiredFields.add("serviceId");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("updatedAt");
    openapiRequiredFields.add("visibility");
    openapiRequiredFields.add("wideImagePid");
    openapiRequiredFields.add("wideImageUrl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MusicPopularityPlaylist
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MusicPopularityPlaylist.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MusicPopularityPlaylist is not found in the empty JSON string", MusicPopularityPlaylist.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MusicPopularityPlaylist.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MusicPopularityPlaylist` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MusicPopularityPlaylist.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("categories") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("externalPartners").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalPartners` to be an array in the JSON string but got `%s`", jsonObj.get("externalPartners").toString()));
      }

      JsonArray jsonArrayexternalPartners = jsonObj.getAsJsonArray("externalPartners");
      // validate the required field `externalPartners` (array)
      for (int i = 0; i < jsonArrayexternalPartners.size(); i++) {
        ExternalPartner.validateJsonElement(jsonArrayexternalPartners.get(i));
      };
      if (!jsonObj.get("genre").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `genre` to be a primitive type in the JSON string but got `%s`", jsonObj.get("genre").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("imagePid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imagePid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imagePid").toString()));
      }
      if (!jsonObj.get("imageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUrl").toString()));
      }
      if (!jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if (!jsonObj.get("mood").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mood` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mood").toString()));
      }
      if (!jsonObj.get("playlistPlaybackType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `playlistPlaybackType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("playlistPlaybackType").toString()));
      }
      if (!jsonObj.get("serviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceId").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("updatedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedAt").toString()));
      }
      if (!jsonObj.get("visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visibility").toString()));
      }
      if (!jsonObj.get("wideImagePid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wideImagePid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wideImagePid").toString()));
      }
      if (!jsonObj.get("wideImageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wideImageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wideImageUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MusicPopularityPlaylist.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MusicPopularityPlaylist' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MusicPopularityPlaylist> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MusicPopularityPlaylist.class));

       return (TypeAdapter<T>) new TypeAdapter<MusicPopularityPlaylist>() {
           @Override
           public void write(JsonWriter out, MusicPopularityPlaylist value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MusicPopularityPlaylist read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MusicPopularityPlaylist given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MusicPopularityPlaylist
   * @throws IOException if the JSON string is invalid with respect to MusicPopularityPlaylist
   */
  public static MusicPopularityPlaylist fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MusicPopularityPlaylist.class);
  }

  /**
   * Convert an instance of MusicPopularityPlaylist to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

