/*
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PodcastEpisodesResponse;
import org.openapitools.client.model.PodcastErrorResponse;
import org.openapitools.client.model.PodcastsFeaturedResponse;
import org.openapitools.client.model.PodcastsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PodcastsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PodcastsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PodcastsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getPodcastByPid
     * @param xAPIKey API_KEY (required)
     * @param pid pid (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastByPidCall(String xAPIKey, String pid, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/podcasts/{pid}"
            .replace("{" + "pid" + "}", localVarApiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPodcastByPidValidateBeforeCall(String xAPIKey, String pid, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getPodcastByPid(Async)");
        }

        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling getPodcastByPid(Async)");
        }

        return getPodcastByPidCall(xAPIKey, pid, offset, limit, _callback);

    }

    /**
     * Podcast
     * Retrieve data about the podcast with the supplied PID 
     * @param xAPIKey API_KEY (required)
     * @param pid pid (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return PodcastsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PodcastsResponse getPodcastByPid(String xAPIKey, String pid, Integer offset, Integer limit) throws ApiException {
        ApiResponse<PodcastsResponse> localVarResp = getPodcastByPidWithHttpInfo(xAPIKey, pid, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Podcast
     * Retrieve data about the podcast with the supplied PID 
     * @param xAPIKey API_KEY (required)
     * @param pid pid (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return ApiResponse&lt;PodcastsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PodcastsResponse> getPodcastByPidWithHttpInfo(String xAPIKey, String pid, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getPodcastByPidValidateBeforeCall(xAPIKey, pid, offset, limit, null);
        Type localVarReturnType = new TypeToken<PodcastsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Podcast (asynchronously)
     * Retrieve data about the podcast with the supplied PID 
     * @param xAPIKey API_KEY (required)
     * @param pid pid (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastByPidAsync(String xAPIKey, String pid, Integer offset, Integer limit, final ApiCallback<PodcastsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPodcastByPidValidateBeforeCall(xAPIKey, pid, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<PodcastsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPodcastEpisodes
     * @param xAPIKey API_KEY (required)
     * @param pid pid (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastEpisodesCall(String xAPIKey, String pid, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/podcasts/{pid}/episodes"
            .replace("{" + "pid" + "}", localVarApiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPodcastEpisodesValidateBeforeCall(String xAPIKey, String pid, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getPodcastEpisodes(Async)");
        }

        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling getPodcastEpisodes(Async)");
        }

        return getPodcastEpisodesCall(xAPIKey, pid, offset, limit, _callback);

    }

    /**
     * Podcast Episodes
     * Retrieve all episodes for a specific podcast 
     * @param xAPIKey API_KEY (required)
     * @param pid pid (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return PodcastEpisodesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PodcastEpisodesResponse getPodcastEpisodes(String xAPIKey, String pid, Integer offset, Integer limit) throws ApiException {
        ApiResponse<PodcastEpisodesResponse> localVarResp = getPodcastEpisodesWithHttpInfo(xAPIKey, pid, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Podcast Episodes
     * Retrieve all episodes for a specific podcast 
     * @param xAPIKey API_KEY (required)
     * @param pid pid (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return ApiResponse&lt;PodcastEpisodesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PodcastEpisodesResponse> getPodcastEpisodesWithHttpInfo(String xAPIKey, String pid, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getPodcastEpisodesValidateBeforeCall(xAPIKey, pid, offset, limit, null);
        Type localVarReturnType = new TypeToken<PodcastEpisodesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Podcast Episodes (asynchronously)
     * Retrieve all episodes for a specific podcast 
     * @param xAPIKey API_KEY (required)
     * @param pid pid (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastEpisodesAsync(String xAPIKey, String pid, Integer offset, Integer limit, final ApiCallback<PodcastEpisodesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPodcastEpisodesValidateBeforeCall(xAPIKey, pid, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<PodcastEpisodesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPodcasts
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param sort Sort order for Podcasts results (optional)
     * @param network Network Master Brand ID (mid) (optional)
     * @param networkUrlKey Network URL key (optional)
     * @param category Category ID (optional)
     * @param q Search query String (optional)
     * @param coverage Local, National or Regional Coverage (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastsCall(String xAPIKey, Integer offset, Integer limit, String sort, String network, String networkUrlKey, String category, String q, String coverage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/podcasts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (network != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network", network));
        }

        if (networkUrlKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network_url_key", networkUrlKey));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (coverage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coverage", coverage));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPodcastsValidateBeforeCall(String xAPIKey, Integer offset, Integer limit, String sort, String network, String networkUrlKey, String category, String q, String coverage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getPodcasts(Async)");
        }

        return getPodcastsCall(xAPIKey, offset, limit, sort, network, networkUrlKey, category, q, coverage, _callback);

    }

    /**
     * All Podcasts
     * Retrieve all Podcasts 
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param sort Sort order for Podcasts results (optional)
     * @param network Network Master Brand ID (mid) (optional)
     * @param networkUrlKey Network URL key (optional)
     * @param category Category ID (optional)
     * @param q Search query String (optional)
     * @param coverage Local, National or Regional Coverage (optional)
     * @return PodcastsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PodcastsResponse getPodcasts(String xAPIKey, Integer offset, Integer limit, String sort, String network, String networkUrlKey, String category, String q, String coverage) throws ApiException {
        ApiResponse<PodcastsResponse> localVarResp = getPodcastsWithHttpInfo(xAPIKey, offset, limit, sort, network, networkUrlKey, category, q, coverage);
        return localVarResp.getData();
    }

    /**
     * All Podcasts
     * Retrieve all Podcasts 
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param sort Sort order for Podcasts results (optional)
     * @param network Network Master Brand ID (mid) (optional)
     * @param networkUrlKey Network URL key (optional)
     * @param category Category ID (optional)
     * @param q Search query String (optional)
     * @param coverage Local, National or Regional Coverage (optional)
     * @return ApiResponse&lt;PodcastsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PodcastsResponse> getPodcastsWithHttpInfo(String xAPIKey, Integer offset, Integer limit, String sort, String network, String networkUrlKey, String category, String q, String coverage) throws ApiException {
        okhttp3.Call localVarCall = getPodcastsValidateBeforeCall(xAPIKey, offset, limit, sort, network, networkUrlKey, category, q, coverage, null);
        Type localVarReturnType = new TypeToken<PodcastsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * All Podcasts (asynchronously)
     * Retrieve all Podcasts 
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param sort Sort order for Podcasts results (optional)
     * @param network Network Master Brand ID (mid) (optional)
     * @param networkUrlKey Network URL key (optional)
     * @param category Category ID (optional)
     * @param q Search query String (optional)
     * @param coverage Local, National or Regional Coverage (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastsAsync(String xAPIKey, Integer offset, Integer limit, String sort, String network, String networkUrlKey, String category, String q, String coverage, final ApiCallback<PodcastsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPodcastsValidateBeforeCall(xAPIKey, offset, limit, sort, network, networkUrlKey, category, q, coverage, _callback);
        Type localVarReturnType = new TypeToken<PodcastsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPodcastsFeatured
     * @param xAPIKey API_KEY (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastsFeaturedCall(String xAPIKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/podcasts/featured";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPodcastsFeaturedValidateBeforeCall(String xAPIKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getPodcastsFeatured(Async)");
        }

        return getPodcastsFeaturedCall(xAPIKey, _callback);

    }

    /**
     * Featured Podcasts
     * Retrieve featured podcasts 
     * @param xAPIKey API_KEY (required)
     * @return PodcastsFeaturedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PodcastsFeaturedResponse getPodcastsFeatured(String xAPIKey) throws ApiException {
        ApiResponse<PodcastsFeaturedResponse> localVarResp = getPodcastsFeaturedWithHttpInfo(xAPIKey);
        return localVarResp.getData();
    }

    /**
     * Featured Podcasts
     * Retrieve featured podcasts 
     * @param xAPIKey API_KEY (required)
     * @return ApiResponse&lt;PodcastsFeaturedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PodcastsFeaturedResponse> getPodcastsFeaturedWithHttpInfo(String xAPIKey) throws ApiException {
        okhttp3.Call localVarCall = getPodcastsFeaturedValidateBeforeCall(xAPIKey, null);
        Type localVarReturnType = new TypeToken<PodcastsFeaturedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Featured Podcasts (asynchronously)
     * Retrieve featured podcasts 
     * @param xAPIKey API_KEY (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastsFeaturedAsync(String xAPIKey, final ApiCallback<PodcastsFeaturedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPodcastsFeaturedValidateBeforeCall(xAPIKey, _callback);
        Type localVarReturnType = new TypeToken<PodcastsFeaturedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
