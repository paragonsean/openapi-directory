/*
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ProgrammeSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Broadcast
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:46.845451-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Broadcast {
  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private String end;

  public static final String SERIALIZED_NAME_IS_AUDIO_DESCRIBED = "is_audio_described";
  @SerializedName(SERIALIZED_NAME_IS_AUDIO_DESCRIBED)
  private Boolean isAudioDescribed;

  public static final String SERIALIZED_NAME_IS_BLANKED = "is_blanked";
  @SerializedName(SERIALIZED_NAME_IS_BLANKED)
  private Boolean isBlanked;

  public static final String SERIALIZED_NAME_IS_CRITICAL = "is_critical";
  @SerializedName(SERIALIZED_NAME_IS_CRITICAL)
  private Boolean isCritical;

  public static final String SERIALIZED_NAME_IS_LIVE = "is_live";
  @SerializedName(SERIALIZED_NAME_IS_LIVE)
  private Boolean isLive;

  public static final String SERIALIZED_NAME_IS_REPEAT = "is_repeat";
  @SerializedName(SERIALIZED_NAME_IS_REPEAT)
  private Boolean isRepeat;

  public static final String SERIALIZED_NAME_IS_WEBCAST = "is_webcast";
  @SerializedName(SERIALIZED_NAME_IS_WEBCAST)
  private Boolean isWebcast;

  public static final String SERIALIZED_NAME_PID = "pid";
  @SerializedName(SERIALIZED_NAME_PID)
  private String pid;

  public static final String SERIALIZED_NAME_PROGRAMME = "programme";
  @SerializedName(SERIALIZED_NAME_PROGRAMME)
  private ProgrammeSummary programme;

  public static final String SERIALIZED_NAME_SERVICE_ID = "service_id";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private String serviceId;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private String start;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VERSION_PID = "version_pid";
  @SerializedName(SERIALIZED_NAME_VERSION_PID)
  private String versionPid;

  public Broadcast() {
  }

  public Broadcast duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nonnull
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public Broadcast end(String end) {
    this.end = end;
    return this;
  }

  /**
   * Get end
   * @return end
   */
  @javax.annotation.Nonnull
  public String getEnd() {
    return end;
  }

  public void setEnd(String end) {
    this.end = end;
  }


  public Broadcast isAudioDescribed(Boolean isAudioDescribed) {
    this.isAudioDescribed = isAudioDescribed;
    return this;
  }

  /**
   * Get isAudioDescribed
   * @return isAudioDescribed
   */
  @javax.annotation.Nonnull
  public Boolean getIsAudioDescribed() {
    return isAudioDescribed;
  }

  public void setIsAudioDescribed(Boolean isAudioDescribed) {
    this.isAudioDescribed = isAudioDescribed;
  }


  public Broadcast isBlanked(Boolean isBlanked) {
    this.isBlanked = isBlanked;
    return this;
  }

  /**
   * Get isBlanked
   * @return isBlanked
   */
  @javax.annotation.Nonnull
  public Boolean getIsBlanked() {
    return isBlanked;
  }

  public void setIsBlanked(Boolean isBlanked) {
    this.isBlanked = isBlanked;
  }


  public Broadcast isCritical(Boolean isCritical) {
    this.isCritical = isCritical;
    return this;
  }

  /**
   * Get isCritical
   * @return isCritical
   */
  @javax.annotation.Nonnull
  public Boolean getIsCritical() {
    return isCritical;
  }

  public void setIsCritical(Boolean isCritical) {
    this.isCritical = isCritical;
  }


  public Broadcast isLive(Boolean isLive) {
    this.isLive = isLive;
    return this;
  }

  /**
   * Get isLive
   * @return isLive
   */
  @javax.annotation.Nonnull
  public Boolean getIsLive() {
    return isLive;
  }

  public void setIsLive(Boolean isLive) {
    this.isLive = isLive;
  }


  public Broadcast isRepeat(Boolean isRepeat) {
    this.isRepeat = isRepeat;
    return this;
  }

  /**
   * Get isRepeat
   * @return isRepeat
   */
  @javax.annotation.Nonnull
  public Boolean getIsRepeat() {
    return isRepeat;
  }

  public void setIsRepeat(Boolean isRepeat) {
    this.isRepeat = isRepeat;
  }


  public Broadcast isWebcast(Boolean isWebcast) {
    this.isWebcast = isWebcast;
    return this;
  }

  /**
   * Get isWebcast
   * @return isWebcast
   */
  @javax.annotation.Nonnull
  public Boolean getIsWebcast() {
    return isWebcast;
  }

  public void setIsWebcast(Boolean isWebcast) {
    this.isWebcast = isWebcast;
  }


  public Broadcast pid(String pid) {
    this.pid = pid;
    return this;
  }

  /**
   * Get pid
   * @return pid
   */
  @javax.annotation.Nonnull
  public String getPid() {
    return pid;
  }

  public void setPid(String pid) {
    this.pid = pid;
  }


  public Broadcast programme(ProgrammeSummary programme) {
    this.programme = programme;
    return this;
  }

  /**
   * Get programme
   * @return programme
   */
  @javax.annotation.Nullable
  public ProgrammeSummary getProgramme() {
    return programme;
  }

  public void setProgramme(ProgrammeSummary programme) {
    this.programme = programme;
  }


  public Broadcast serviceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  /**
   * Get serviceId
   * @return serviceId
   */
  @javax.annotation.Nonnull
  public String getServiceId() {
    return serviceId;
  }

  public void setServiceId(String serviceId) {
    this.serviceId = serviceId;
  }


  public Broadcast start(String start) {
    this.start = start;
    return this;
  }

  /**
   * Get start
   * @return start
   */
  @javax.annotation.Nonnull
  public String getStart() {
    return start;
  }

  public void setStart(String start) {
    this.start = start;
  }


  public Broadcast type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Broadcast versionPid(String versionPid) {
    this.versionPid = versionPid;
    return this;
  }

  /**
   * Get versionPid
   * @return versionPid
   */
  @javax.annotation.Nonnull
  public String getVersionPid() {
    return versionPid;
  }

  public void setVersionPid(String versionPid) {
    this.versionPid = versionPid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Broadcast broadcast = (Broadcast) o;
    return Objects.equals(this.duration, broadcast.duration) &&
        Objects.equals(this.end, broadcast.end) &&
        Objects.equals(this.isAudioDescribed, broadcast.isAudioDescribed) &&
        Objects.equals(this.isBlanked, broadcast.isBlanked) &&
        Objects.equals(this.isCritical, broadcast.isCritical) &&
        Objects.equals(this.isLive, broadcast.isLive) &&
        Objects.equals(this.isRepeat, broadcast.isRepeat) &&
        Objects.equals(this.isWebcast, broadcast.isWebcast) &&
        Objects.equals(this.pid, broadcast.pid) &&
        Objects.equals(this.programme, broadcast.programme) &&
        Objects.equals(this.serviceId, broadcast.serviceId) &&
        Objects.equals(this.start, broadcast.start) &&
        Objects.equals(this.type, broadcast.type) &&
        Objects.equals(this.versionPid, broadcast.versionPid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(duration, end, isAudioDescribed, isBlanked, isCritical, isLive, isRepeat, isWebcast, pid, programme, serviceId, start, type, versionPid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Broadcast {\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    isAudioDescribed: ").append(toIndentedString(isAudioDescribed)).append("\n");
    sb.append("    isBlanked: ").append(toIndentedString(isBlanked)).append("\n");
    sb.append("    isCritical: ").append(toIndentedString(isCritical)).append("\n");
    sb.append("    isLive: ").append(toIndentedString(isLive)).append("\n");
    sb.append("    isRepeat: ").append(toIndentedString(isRepeat)).append("\n");
    sb.append("    isWebcast: ").append(toIndentedString(isWebcast)).append("\n");
    sb.append("    pid: ").append(toIndentedString(pid)).append("\n");
    sb.append("    programme: ").append(toIndentedString(programme)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    versionPid: ").append(toIndentedString(versionPid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("duration");
    openapiFields.add("end");
    openapiFields.add("is_audio_described");
    openapiFields.add("is_blanked");
    openapiFields.add("is_critical");
    openapiFields.add("is_live");
    openapiFields.add("is_repeat");
    openapiFields.add("is_webcast");
    openapiFields.add("pid");
    openapiFields.add("programme");
    openapiFields.add("service_id");
    openapiFields.add("start");
    openapiFields.add("type");
    openapiFields.add("version_pid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("end");
    openapiRequiredFields.add("is_audio_described");
    openapiRequiredFields.add("is_blanked");
    openapiRequiredFields.add("is_critical");
    openapiRequiredFields.add("is_live");
    openapiRequiredFields.add("is_repeat");
    openapiRequiredFields.add("is_webcast");
    openapiRequiredFields.add("pid");
    openapiRequiredFields.add("service_id");
    openapiRequiredFields.add("start");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("version_pid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Broadcast
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Broadcast.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Broadcast is not found in the empty JSON string", Broadcast.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Broadcast.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Broadcast` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Broadcast.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end").toString()));
      }
      if (!jsonObj.get("pid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pid").toString()));
      }
      // validate the optional field `programme`
      if (jsonObj.get("programme") != null && !jsonObj.get("programme").isJsonNull()) {
        ProgrammeSummary.validateJsonElement(jsonObj.get("programme"));
      }
      if (!jsonObj.get("service_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_id").toString()));
      }
      if (!jsonObj.get("start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("version_pid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version_pid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version_pid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Broadcast.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Broadcast' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Broadcast> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Broadcast.class));

       return (TypeAdapter<T>) new TypeAdapter<Broadcast>() {
           @Override
           public void write(JsonWriter out, Broadcast value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Broadcast read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Broadcast given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Broadcast
   * @throws IOException if the JSON string is invalid with respect to Broadcast
   */
  public static Broadcast fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Broadcast.class);
  }

  /**
   * Convert an instance of Broadcast to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

