/*
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChildCategory
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:46.845451-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChildCategory {
  public static final String SERIALIZED_NAME_CATEGORY_TYPE = "category_type";
  @SerializedName(SERIALIZED_NAME_CATEGORY_TYPE)
  private String categoryType;

  public static final String SERIALIZED_NAME_CHILD_CATEGORIES = "child_categories";
  @SerializedName(SERIALIZED_NAME_CHILD_CATEGORIES)
  private List<ChildCategory> childCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEPTH = "depth";
  @SerializedName(SERIALIZED_NAME_DEPTH)
  private Integer depth;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PIP_ID = "pip_id";
  @SerializedName(SERIALIZED_NAME_PIP_ID)
  private String pipId;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_URL_KEY = "url_key";
  @SerializedName(SERIALIZED_NAME_URL_KEY)
  private String urlKey;

  public ChildCategory() {
  }

  public ChildCategory categoryType(String categoryType) {
    this.categoryType = categoryType;
    return this;
  }

  /**
   * Get categoryType
   * @return categoryType
   */
  @javax.annotation.Nonnull
  public String getCategoryType() {
    return categoryType;
  }

  public void setCategoryType(String categoryType) {
    this.categoryType = categoryType;
  }


  public ChildCategory childCategories(List<ChildCategory> childCategories) {
    this.childCategories = childCategories;
    return this;
  }

  public ChildCategory addChildCategoriesItem(ChildCategory childCategoriesItem) {
    if (this.childCategories == null) {
      this.childCategories = new ArrayList<>();
    }
    this.childCategories.add(childCategoriesItem);
    return this;
  }

  /**
   * Get childCategories
   * @return childCategories
   */
  @javax.annotation.Nonnull
  public List<ChildCategory> getChildCategories() {
    return childCategories;
  }

  public void setChildCategories(List<ChildCategory> childCategories) {
    this.childCategories = childCategories;
  }


  public ChildCategory depth(Integer depth) {
    this.depth = depth;
    return this;
  }

  /**
   * Get depth
   * @return depth
   */
  @javax.annotation.Nonnull
  public Integer getDepth() {
    return depth;
  }

  public void setDepth(Integer depth) {
    this.depth = depth;
  }


  public ChildCategory id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ChildCategory pipId(String pipId) {
    this.pipId = pipId;
    return this;
  }

  /**
   * Get pipId
   * @return pipId
   */
  @javax.annotation.Nonnull
  public String getPipId() {
    return pipId;
  }

  public void setPipId(String pipId) {
    this.pipId = pipId;
  }


  public ChildCategory title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ChildCategory type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public ChildCategory urlKey(String urlKey) {
    this.urlKey = urlKey;
    return this;
  }

  /**
   * Get urlKey
   * @return urlKey
   */
  @javax.annotation.Nonnull
  public String getUrlKey() {
    return urlKey;
  }

  public void setUrlKey(String urlKey) {
    this.urlKey = urlKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChildCategory childCategory = (ChildCategory) o;
    return Objects.equals(this.categoryType, childCategory.categoryType) &&
        Objects.equals(this.childCategories, childCategory.childCategories) &&
        Objects.equals(this.depth, childCategory.depth) &&
        Objects.equals(this.id, childCategory.id) &&
        Objects.equals(this.pipId, childCategory.pipId) &&
        Objects.equals(this.title, childCategory.title) &&
        Objects.equals(this.type, childCategory.type) &&
        Objects.equals(this.urlKey, childCategory.urlKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryType, childCategories, depth, id, pipId, title, type, urlKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChildCategory {\n");
    sb.append("    categoryType: ").append(toIndentedString(categoryType)).append("\n");
    sb.append("    childCategories: ").append(toIndentedString(childCategories)).append("\n");
    sb.append("    depth: ").append(toIndentedString(depth)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    pipId: ").append(toIndentedString(pipId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    urlKey: ").append(toIndentedString(urlKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category_type");
    openapiFields.add("child_categories");
    openapiFields.add("depth");
    openapiFields.add("id");
    openapiFields.add("pip_id");
    openapiFields.add("title");
    openapiFields.add("type");
    openapiFields.add("url_key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("category_type");
    openapiRequiredFields.add("child_categories");
    openapiRequiredFields.add("depth");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("pip_id");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("url_key");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChildCategory
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChildCategory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChildCategory is not found in the empty JSON string", ChildCategory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChildCategory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChildCategory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChildCategory.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("category_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category_type").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("child_categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `child_categories` to be an array in the JSON string but got `%s`", jsonObj.get("child_categories").toString()));
      }

      JsonArray jsonArraychildCategories = jsonObj.getAsJsonArray("child_categories");
      // validate the required field `child_categories` (array)
      for (int i = 0; i < jsonArraychildCategories.size(); i++) {
        ChildCategory.validateJsonElement(jsonArraychildCategories.get(i));
      };
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("pip_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pip_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pip_id").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("url_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url_key").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChildCategory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChildCategory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChildCategory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChildCategory.class));

       return (TypeAdapter<T>) new TypeAdapter<ChildCategory>() {
           @Override
           public void write(JsonWriter out, ChildCategory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChildCategory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChildCategory given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChildCategory
   * @throws IOException if the JSON string is invalid with respect to ChildCategory
   */
  public static ChildCategory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChildCategory.class);
  }

  /**
   * Convert an instance of ChildCategory to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

