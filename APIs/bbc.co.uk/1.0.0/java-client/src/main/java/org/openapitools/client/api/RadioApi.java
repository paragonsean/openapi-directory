/*
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PersonalisedRadioBatchRequest;
import org.openapitools.client.model.PersonalisedRadioErrorResponse;
import org.openapitools.client.model.PersonalisedRadioRequest;
import org.openapitools.client.model.PersonalisedRadioResponse;
import org.openapitools.client.model.PersonalisedRadioSuccessResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RadioApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RadioApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RadioApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deletePersonalisedRadioByActivityTypeById
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio favourite types: Clips or Episodes (required)
     * @param pid pid (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePersonalisedRadioByActivityTypeByIdCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/radio/favourites/{type}/{pid}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "pid" + "}", localVarApiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePersonalisedRadioByActivityTypeByIdValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deletePersonalisedRadioByActivityTypeById(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling deletePersonalisedRadioByActivityTypeById(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling deletePersonalisedRadioByActivityTypeById(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling deletePersonalisedRadioByActivityTypeById(Async)");
        }

        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling deletePersonalisedRadioByActivityTypeById(Async)");
        }

        return deletePersonalisedRadioByActivityTypeByIdCall(authorization, xAuthenticationProvider, xAPIKey, type, pid, _callback);

    }

    /**
     * Favourite Episode or Clip
     * Remove User favourite 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio favourite types: Clips or Episodes (required)
     * @param pid pid (required)
     * @return PersonalisedRadioSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedRadioSuccessResponse deletePersonalisedRadioByActivityTypeById(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid) throws ApiException {
        ApiResponse<PersonalisedRadioSuccessResponse> localVarResp = deletePersonalisedRadioByActivityTypeByIdWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, type, pid);
        return localVarResp.getData();
    }

    /**
     * Favourite Episode or Clip
     * Remove User favourite 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio favourite types: Clips or Episodes (required)
     * @param pid pid (required)
     * @return ApiResponse&lt;PersonalisedRadioSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedRadioSuccessResponse> deletePersonalisedRadioByActivityTypeByIdWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid) throws ApiException {
        okhttp3.Call localVarCall = deletePersonalisedRadioByActivityTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, pid, null);
        Type localVarReturnType = new TypeToken<PersonalisedRadioSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Favourite Episode or Clip (asynchronously)
     * Remove User favourite 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio favourite types: Clips or Episodes (required)
     * @param pid pid (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePersonalisedRadioByActivityTypeByIdAsync(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, final ApiCallback<PersonalisedRadioSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePersonalisedRadioByActivityTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, pid, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedRadioSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePersonalisedRadioFollowsByTypeById
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio follows types: Brands or Series (required)
     * @param pid pid (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePersonalisedRadioFollowsByTypeByIdCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/radio/follows/{type}/{pid}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "pid" + "}", localVarApiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePersonalisedRadioFollowsByTypeByIdValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deletePersonalisedRadioFollowsByTypeById(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling deletePersonalisedRadioFollowsByTypeById(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling deletePersonalisedRadioFollowsByTypeById(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling deletePersonalisedRadioFollowsByTypeById(Async)");
        }

        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling deletePersonalisedRadioFollowsByTypeById(Async)");
        }

        return deletePersonalisedRadioFollowsByTypeByIdCall(authorization, xAuthenticationProvider, xAPIKey, type, pid, _callback);

    }

    /**
     * Followed Brand or Series
     * Remove &#39;brand&#39; or &#39;series&#39; items from a users iPlayer Radio follows 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio follows types: Brands or Series (required)
     * @param pid pid (required)
     * @return PersonalisedRadioSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedRadioSuccessResponse deletePersonalisedRadioFollowsByTypeById(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid) throws ApiException {
        ApiResponse<PersonalisedRadioSuccessResponse> localVarResp = deletePersonalisedRadioFollowsByTypeByIdWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, type, pid);
        return localVarResp.getData();
    }

    /**
     * Followed Brand or Series
     * Remove &#39;brand&#39; or &#39;series&#39; items from a users iPlayer Radio follows 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio follows types: Brands or Series (required)
     * @param pid pid (required)
     * @return ApiResponse&lt;PersonalisedRadioSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedRadioSuccessResponse> deletePersonalisedRadioFollowsByTypeByIdWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid) throws ApiException {
        okhttp3.Call localVarCall = deletePersonalisedRadioFollowsByTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, pid, null);
        Type localVarReturnType = new TypeToken<PersonalisedRadioSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Followed Brand or Series (asynchronously)
     * Remove &#39;brand&#39; or &#39;series&#39; items from a users iPlayer Radio follows 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio follows types: Brands or Series (required)
     * @param pid pid (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePersonalisedRadioFollowsByTypeByIdAsync(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, final ApiCallback<PersonalisedRadioSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePersonalisedRadioFollowsByTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, pid, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedRadioSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPersonalisedRadioByActivityTypeById
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio favourite types: Clips or Episodes (required)
     * @param pid pid (required)
     * @param showAllActivity Include items which have been &#39;soft&#39; unfavourited in response. I.e items with UAS type of &#39;unfavourited&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonalisedRadioByActivityTypeByIdCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, Boolean showAllActivity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/radio/favourites/{type}/{pid}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "pid" + "}", localVarApiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (showAllActivity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_all_activity", showAllActivity));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonalisedRadioByActivityTypeByIdValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, Boolean showAllActivity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPersonalisedRadioByActivityTypeById(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling getPersonalisedRadioByActivityTypeById(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getPersonalisedRadioByActivityTypeById(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getPersonalisedRadioByActivityTypeById(Async)");
        }

        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling getPersonalisedRadioByActivityTypeById(Async)");
        }

        return getPersonalisedRadioByActivityTypeByIdCall(authorization, xAuthenticationProvider, xAPIKey, type, pid, showAllActivity, _callback);

    }

    /**
     * Favourite Episode or Clip
     * Check to see if a single clip or episode entity is in a users favourites - determines UX of add button.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio favourite types: Clips or Episodes (required)
     * @param pid pid (required)
     * @param showAllActivity Include items which have been &#39;soft&#39; unfavourited in response. I.e items with UAS type of &#39;unfavourited&#39; (optional)
     * @return PersonalisedRadioResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedRadioResponse getPersonalisedRadioByActivityTypeById(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, Boolean showAllActivity) throws ApiException {
        ApiResponse<PersonalisedRadioResponse> localVarResp = getPersonalisedRadioByActivityTypeByIdWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, type, pid, showAllActivity);
        return localVarResp.getData();
    }

    /**
     * Favourite Episode or Clip
     * Check to see if a single clip or episode entity is in a users favourites - determines UX of add button.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio favourite types: Clips or Episodes (required)
     * @param pid pid (required)
     * @param showAllActivity Include items which have been &#39;soft&#39; unfavourited in response. I.e items with UAS type of &#39;unfavourited&#39; (optional)
     * @return ApiResponse&lt;PersonalisedRadioResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedRadioResponse> getPersonalisedRadioByActivityTypeByIdWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, Boolean showAllActivity) throws ApiException {
        okhttp3.Call localVarCall = getPersonalisedRadioByActivityTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, pid, showAllActivity, null);
        Type localVarReturnType = new TypeToken<PersonalisedRadioResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Favourite Episode or Clip (asynchronously)
     * Check to see if a single clip or episode entity is in a users favourites - determines UX of add button.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio favourite types: Clips or Episodes (required)
     * @param pid pid (required)
     * @param showAllActivity Include items which have been &#39;soft&#39; unfavourited in response. I.e items with UAS type of &#39;unfavourited&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonalisedRadioByActivityTypeByIdAsync(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, Boolean showAllActivity, final ApiCallback<PersonalisedRadioResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonalisedRadioByActivityTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, pid, showAllActivity, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedRadioResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPersonalisedRadioFavourites
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param sort Sort order for Personalised Radio results (optional)
     * @param showAllActivity Include items which have been &#39;soft&#39; unfavourited in response. I.e items with UAS type of &#39;unfavourited&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonalisedRadioFavouritesCall(String authorization, String xAuthenticationProvider, String xAPIKey, Integer offset, Integer limit, String sort, Boolean showAllActivity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/radio/favourites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (showAllActivity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_all_activity", showAllActivity));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonalisedRadioFavouritesValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, Integer offset, Integer limit, String sort, Boolean showAllActivity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPersonalisedRadioFavourites(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling getPersonalisedRadioFavourites(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getPersonalisedRadioFavourites(Async)");
        }

        return getPersonalisedRadioFavouritesCall(authorization, xAuthenticationProvider, xAPIKey, offset, limit, sort, showAllActivity, _callback);

    }

    /**
     * Favourite Episodes and Clips
     * List of favourited episodes and clips for a given user for iPlayer Radio.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param sort Sort order for Personalised Radio results (optional)
     * @param showAllActivity Include items which have been &#39;soft&#39; unfavourited in response. I.e items with UAS type of &#39;unfavourited&#39; (optional)
     * @return PersonalisedRadioResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedRadioResponse getPersonalisedRadioFavourites(String authorization, String xAuthenticationProvider, String xAPIKey, Integer offset, Integer limit, String sort, Boolean showAllActivity) throws ApiException {
        ApiResponse<PersonalisedRadioResponse> localVarResp = getPersonalisedRadioFavouritesWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, offset, limit, sort, showAllActivity);
        return localVarResp.getData();
    }

    /**
     * Favourite Episodes and Clips
     * List of favourited episodes and clips for a given user for iPlayer Radio.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param sort Sort order for Personalised Radio results (optional)
     * @param showAllActivity Include items which have been &#39;soft&#39; unfavourited in response. I.e items with UAS type of &#39;unfavourited&#39; (optional)
     * @return ApiResponse&lt;PersonalisedRadioResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedRadioResponse> getPersonalisedRadioFavouritesWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, Integer offset, Integer limit, String sort, Boolean showAllActivity) throws ApiException {
        okhttp3.Call localVarCall = getPersonalisedRadioFavouritesValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, offset, limit, sort, showAllActivity, null);
        Type localVarReturnType = new TypeToken<PersonalisedRadioResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Favourite Episodes and Clips (asynchronously)
     * List of favourited episodes and clips for a given user for iPlayer Radio.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param sort Sort order for Personalised Radio results (optional)
     * @param showAllActivity Include items which have been &#39;soft&#39; unfavourited in response. I.e items with UAS type of &#39;unfavourited&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonalisedRadioFavouritesAsync(String authorization, String xAuthenticationProvider, String xAPIKey, Integer offset, Integer limit, String sort, Boolean showAllActivity, final ApiCallback<PersonalisedRadioResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonalisedRadioFavouritesValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, offset, limit, sort, showAllActivity, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedRadioResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPersonalisedRadioFavouritesByType
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio favourite types: Clips or Episodes (required)
     * @param sort Sort order for Personalised Radio results (optional)
     * @param showAllActivity Include items which have been &#39;soft&#39; unfavourited in response. I.e items with UAS type of &#39;unfavourited&#39; (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonalisedRadioFavouritesByTypeCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String sort, Boolean showAllActivity, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/radio/favourites/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (showAllActivity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_all_activity", showAllActivity));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonalisedRadioFavouritesByTypeValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String sort, Boolean showAllActivity, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPersonalisedRadioFavouritesByType(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling getPersonalisedRadioFavouritesByType(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getPersonalisedRadioFavouritesByType(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getPersonalisedRadioFavouritesByType(Async)");
        }

        return getPersonalisedRadioFavouritesByTypeCall(authorization, xAuthenticationProvider, xAPIKey, type, sort, showAllActivity, offset, limit, _callback);

    }

    /**
     * Favourite Episodes and Clips by Type
     * List of followed &#39;clips&#39; or &#39;episode&#39; items for a given iPlayer Radio user  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio favourite types: Clips or Episodes (required)
     * @param sort Sort order for Personalised Radio results (optional)
     * @param showAllActivity Include items which have been &#39;soft&#39; unfavourited in response. I.e items with UAS type of &#39;unfavourited&#39; (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return PersonalisedRadioResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedRadioResponse getPersonalisedRadioFavouritesByType(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String sort, Boolean showAllActivity, Integer offset, Integer limit) throws ApiException {
        ApiResponse<PersonalisedRadioResponse> localVarResp = getPersonalisedRadioFavouritesByTypeWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, type, sort, showAllActivity, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Favourite Episodes and Clips by Type
     * List of followed &#39;clips&#39; or &#39;episode&#39; items for a given iPlayer Radio user  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio favourite types: Clips or Episodes (required)
     * @param sort Sort order for Personalised Radio results (optional)
     * @param showAllActivity Include items which have been &#39;soft&#39; unfavourited in response. I.e items with UAS type of &#39;unfavourited&#39; (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return ApiResponse&lt;PersonalisedRadioResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedRadioResponse> getPersonalisedRadioFavouritesByTypeWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String sort, Boolean showAllActivity, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getPersonalisedRadioFavouritesByTypeValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, sort, showAllActivity, offset, limit, null);
        Type localVarReturnType = new TypeToken<PersonalisedRadioResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Favourite Episodes and Clips by Type (asynchronously)
     * List of followed &#39;clips&#39; or &#39;episode&#39; items for a given iPlayer Radio user  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio favourite types: Clips or Episodes (required)
     * @param sort Sort order for Personalised Radio results (optional)
     * @param showAllActivity Include items which have been &#39;soft&#39; unfavourited in response. I.e items with UAS type of &#39;unfavourited&#39; (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonalisedRadioFavouritesByTypeAsync(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String sort, Boolean showAllActivity, Integer offset, Integer limit, final ApiCallback<PersonalisedRadioResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonalisedRadioFavouritesByTypeValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, sort, showAllActivity, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedRadioResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPersonalisedRadioFollows
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param sort Sort order for Personalised Radio results (optional)
     * @param showAllActivity Include items which have been &#39;soft&#39; unfollowed in response. I.e items with UAS type of &#39;unfollowed&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonalisedRadioFollowsCall(String authorization, String xAuthenticationProvider, String xAPIKey, Integer offset, Integer limit, String sort, Boolean showAllActivity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/radio/follows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (showAllActivity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_all_activity", showAllActivity));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonalisedRadioFollowsValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, Integer offset, Integer limit, String sort, Boolean showAllActivity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPersonalisedRadioFollows(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling getPersonalisedRadioFollows(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getPersonalisedRadioFollows(Async)");
        }

        return getPersonalisedRadioFollowsCall(authorization, xAuthenticationProvider, xAPIKey, offset, limit, sort, showAllActivity, _callback);

    }

    /**
     * Followed Brands and Series
     * List of favourited brands and series for a given user for iPlayer Radio.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param sort Sort order for Personalised Radio results (optional)
     * @param showAllActivity Include items which have been &#39;soft&#39; unfollowed in response. I.e items with UAS type of &#39;unfollowed&#39; (optional)
     * @return PersonalisedRadioResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedRadioResponse getPersonalisedRadioFollows(String authorization, String xAuthenticationProvider, String xAPIKey, Integer offset, Integer limit, String sort, Boolean showAllActivity) throws ApiException {
        ApiResponse<PersonalisedRadioResponse> localVarResp = getPersonalisedRadioFollowsWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, offset, limit, sort, showAllActivity);
        return localVarResp.getData();
    }

    /**
     * Followed Brands and Series
     * List of favourited brands and series for a given user for iPlayer Radio.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param sort Sort order for Personalised Radio results (optional)
     * @param showAllActivity Include items which have been &#39;soft&#39; unfollowed in response. I.e items with UAS type of &#39;unfollowed&#39; (optional)
     * @return ApiResponse&lt;PersonalisedRadioResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedRadioResponse> getPersonalisedRadioFollowsWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, Integer offset, Integer limit, String sort, Boolean showAllActivity) throws ApiException {
        okhttp3.Call localVarCall = getPersonalisedRadioFollowsValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, offset, limit, sort, showAllActivity, null);
        Type localVarReturnType = new TypeToken<PersonalisedRadioResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Followed Brands and Series (asynchronously)
     * List of favourited brands and series for a given user for iPlayer Radio.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param sort Sort order for Personalised Radio results (optional)
     * @param showAllActivity Include items which have been &#39;soft&#39; unfollowed in response. I.e items with UAS type of &#39;unfollowed&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonalisedRadioFollowsAsync(String authorization, String xAuthenticationProvider, String xAPIKey, Integer offset, Integer limit, String sort, Boolean showAllActivity, final ApiCallback<PersonalisedRadioResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonalisedRadioFollowsValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, offset, limit, sort, showAllActivity, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedRadioResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPersonalisedRadioFollowsByType
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio follows types: Brands or Series (required)
     * @param sort Sort order for Personalised Radio results (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param showAllActivity Include items which have been &#39;soft&#39; unfollowed in response. I.e items with UAS type of &#39;unfollowed&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonalisedRadioFollowsByTypeCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String sort, Integer offset, Integer limit, Boolean showAllActivity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/radio/follows/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (showAllActivity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_all_activity", showAllActivity));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonalisedRadioFollowsByTypeValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String sort, Integer offset, Integer limit, Boolean showAllActivity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPersonalisedRadioFollowsByType(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling getPersonalisedRadioFollowsByType(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getPersonalisedRadioFollowsByType(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getPersonalisedRadioFollowsByType(Async)");
        }

        return getPersonalisedRadioFollowsByTypeCall(authorization, xAuthenticationProvider, xAPIKey, type, sort, offset, limit, showAllActivity, _callback);

    }

    /**
     * Followed Brands or Series by Type
     * List of followed &#39;brand&#39; or &#39;series&#39; items for a given iPlayer Radio user  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio follows types: Brands or Series (required)
     * @param sort Sort order for Personalised Radio results (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param showAllActivity Include items which have been &#39;soft&#39; unfollowed in response. I.e items with UAS type of &#39;unfollowed&#39; (optional)
     * @return PersonalisedRadioResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedRadioResponse getPersonalisedRadioFollowsByType(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String sort, Integer offset, Integer limit, Boolean showAllActivity) throws ApiException {
        ApiResponse<PersonalisedRadioResponse> localVarResp = getPersonalisedRadioFollowsByTypeWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, type, sort, offset, limit, showAllActivity);
        return localVarResp.getData();
    }

    /**
     * Followed Brands or Series by Type
     * List of followed &#39;brand&#39; or &#39;series&#39; items for a given iPlayer Radio user  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio follows types: Brands or Series (required)
     * @param sort Sort order for Personalised Radio results (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param showAllActivity Include items which have been &#39;soft&#39; unfollowed in response. I.e items with UAS type of &#39;unfollowed&#39; (optional)
     * @return ApiResponse&lt;PersonalisedRadioResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedRadioResponse> getPersonalisedRadioFollowsByTypeWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String sort, Integer offset, Integer limit, Boolean showAllActivity) throws ApiException {
        okhttp3.Call localVarCall = getPersonalisedRadioFollowsByTypeValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, sort, offset, limit, showAllActivity, null);
        Type localVarReturnType = new TypeToken<PersonalisedRadioResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Followed Brands or Series by Type (asynchronously)
     * List of followed &#39;brand&#39; or &#39;series&#39; items for a given iPlayer Radio user  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio follows types: Brands or Series (required)
     * @param sort Sort order for Personalised Radio results (optional)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param showAllActivity Include items which have been &#39;soft&#39; unfollowed in response. I.e items with UAS type of &#39;unfollowed&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonalisedRadioFollowsByTypeAsync(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String sort, Integer offset, Integer limit, Boolean showAllActivity, final ApiCallback<PersonalisedRadioResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonalisedRadioFollowsByTypeValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, sort, offset, limit, showAllActivity, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedRadioResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPersonalisedRadioFollowsByTypeById
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio follows types: Brands or Series (required)
     * @param pid pid (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonalisedRadioFollowsByTypeByIdCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/radio/follows/{type}/{pid}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "pid" + "}", localVarApiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonalisedRadioFollowsByTypeByIdValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPersonalisedRadioFollowsByTypeById(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling getPersonalisedRadioFollowsByTypeById(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getPersonalisedRadioFollowsByTypeById(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getPersonalisedRadioFollowsByTypeById(Async)");
        }

        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling getPersonalisedRadioFollowsByTypeById(Async)");
        }

        return getPersonalisedRadioFollowsByTypeByIdCall(authorization, xAuthenticationProvider, xAPIKey, type, pid, _callback);

    }

    /**
     * Followed Brand or Series
     * Check to see if a single brand or series entity is in a users follows - determines UX of add button. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio follows types: Brands or Series (required)
     * @param pid pid (required)
     * @return PersonalisedRadioResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedRadioResponse getPersonalisedRadioFollowsByTypeById(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid) throws ApiException {
        ApiResponse<PersonalisedRadioResponse> localVarResp = getPersonalisedRadioFollowsByTypeByIdWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, type, pid);
        return localVarResp.getData();
    }

    /**
     * Followed Brand or Series
     * Check to see if a single brand or series entity is in a users follows - determines UX of add button. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio follows types: Brands or Series (required)
     * @param pid pid (required)
     * @return ApiResponse&lt;PersonalisedRadioResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedRadioResponse> getPersonalisedRadioFollowsByTypeByIdWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid) throws ApiException {
        okhttp3.Call localVarCall = getPersonalisedRadioFollowsByTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, pid, null);
        Type localVarReturnType = new TypeToken<PersonalisedRadioResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Followed Brand or Series (asynchronously)
     * Check to see if a single brand or series entity is in a users follows - determines UX of add button. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio follows types: Brands or Series (required)
     * @param pid pid (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonalisedRadioFollowsByTypeByIdAsync(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, final ApiCallback<PersonalisedRadioResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonalisedRadioFollowsByTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, pid, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedRadioResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPersonalisedRadioPlays
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param sort Sort order for Personalised Radio results (optional)
     * @param showAllActivity Include expired/unavailable items (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonalisedRadioPlaysCall(String authorization, String xAuthenticationProvider, String xAPIKey, Integer offset, Integer limit, String sort, Boolean showAllActivity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/radio/plays";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (showAllActivity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_all_activity", showAllActivity));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonalisedRadioPlaysValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, Integer offset, Integer limit, String sort, Boolean showAllActivity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPersonalisedRadioPlays(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling getPersonalisedRadioPlays(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getPersonalisedRadioPlays(Async)");
        }

        return getPersonalisedRadioPlaysCall(authorization, xAuthenticationProvider, xAPIKey, offset, limit, sort, showAllActivity, _callback);

    }

    /**
     * Played Episode or Clip
     * Returns mixed episode and clip plays for a given BBC iPlayer radio user.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param sort Sort order for Personalised Radio results (optional)
     * @param showAllActivity Include expired/unavailable items (optional)
     * @return PersonalisedRadioResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedRadioResponse getPersonalisedRadioPlays(String authorization, String xAuthenticationProvider, String xAPIKey, Integer offset, Integer limit, String sort, Boolean showAllActivity) throws ApiException {
        ApiResponse<PersonalisedRadioResponse> localVarResp = getPersonalisedRadioPlaysWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, offset, limit, sort, showAllActivity);
        return localVarResp.getData();
    }

    /**
     * Played Episode or Clip
     * Returns mixed episode and clip plays for a given BBC iPlayer radio user.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param sort Sort order for Personalised Radio results (optional)
     * @param showAllActivity Include expired/unavailable items (optional)
     * @return ApiResponse&lt;PersonalisedRadioResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedRadioResponse> getPersonalisedRadioPlaysWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, Integer offset, Integer limit, String sort, Boolean showAllActivity) throws ApiException {
        okhttp3.Call localVarCall = getPersonalisedRadioPlaysValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, offset, limit, sort, showAllActivity, null);
        Type localVarReturnType = new TypeToken<PersonalisedRadioResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Played Episode or Clip (asynchronously)
     * Returns mixed episode and clip plays for a given BBC iPlayer radio user.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param sort Sort order for Personalised Radio results (optional)
     * @param showAllActivity Include expired/unavailable items (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonalisedRadioPlaysAsync(String authorization, String xAuthenticationProvider, String xAPIKey, Integer offset, Integer limit, String sort, Boolean showAllActivity, final ApiCallback<PersonalisedRadioResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonalisedRadioPlaysValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, offset, limit, sort, showAllActivity, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedRadioResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPersonalisedRadioBatch
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action favourited or unfavourited (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPersonalisedRadioBatchCall(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedRadioBatchRequest> body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/my/radio/favourites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPersonalisedRadioBatchValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedRadioBatchRequest> body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling postPersonalisedRadioBatch(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling postPersonalisedRadioBatch(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling postPersonalisedRadioBatch(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postPersonalisedRadioBatch(Async)");
        }

        return postPersonalisedRadioBatchCall(authorization, xAuthenticationProvider, xAPIKey, body, _callback);

    }

    /**
     * Favourite Episodes and Clips
     * Add User favourites  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action favourited or unfavourited (required)
     * @return PersonalisedRadioSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedRadioSuccessResponse postPersonalisedRadioBatch(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedRadioBatchRequest> body) throws ApiException {
        ApiResponse<PersonalisedRadioSuccessResponse> localVarResp = postPersonalisedRadioBatchWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, body);
        return localVarResp.getData();
    }

    /**
     * Favourite Episodes and Clips
     * Add User favourites  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action favourited or unfavourited (required)
     * @return ApiResponse&lt;PersonalisedRadioSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedRadioSuccessResponse> postPersonalisedRadioBatchWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedRadioBatchRequest> body) throws ApiException {
        okhttp3.Call localVarCall = postPersonalisedRadioBatchValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, body, null);
        Type localVarReturnType = new TypeToken<PersonalisedRadioSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Favourite Episodes and Clips (asynchronously)
     * Add User favourites  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action favourited or unfavourited (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPersonalisedRadioBatchAsync(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedRadioBatchRequest> body, final ApiCallback<PersonalisedRadioSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPersonalisedRadioBatchValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, body, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedRadioSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPersonalisedRadioByActivityTypeById
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio favourite types: Clips or Episodes (required)
     * @param pid pid (required)
     * @param body Action favourited or unfavourited (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPersonalisedRadioByActivityTypeByIdCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, PersonalisedRadioRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/my/radio/favourites/{type}/{pid}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "pid" + "}", localVarApiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPersonalisedRadioByActivityTypeByIdValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, PersonalisedRadioRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling postPersonalisedRadioByActivityTypeById(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling postPersonalisedRadioByActivityTypeById(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling postPersonalisedRadioByActivityTypeById(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling postPersonalisedRadioByActivityTypeById(Async)");
        }

        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling postPersonalisedRadioByActivityTypeById(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postPersonalisedRadioByActivityTypeById(Async)");
        }

        return postPersonalisedRadioByActivityTypeByIdCall(authorization, xAuthenticationProvider, xAPIKey, type, pid, body, _callback);

    }

    /**
     * Favourite Episode or Clip
     * Add User favourite  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio favourite types: Clips or Episodes (required)
     * @param pid pid (required)
     * @param body Action favourited or unfavourited (required)
     * @return PersonalisedRadioSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedRadioSuccessResponse postPersonalisedRadioByActivityTypeById(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, PersonalisedRadioRequest body) throws ApiException {
        ApiResponse<PersonalisedRadioSuccessResponse> localVarResp = postPersonalisedRadioByActivityTypeByIdWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, type, pid, body);
        return localVarResp.getData();
    }

    /**
     * Favourite Episode or Clip
     * Add User favourite  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio favourite types: Clips or Episodes (required)
     * @param pid pid (required)
     * @param body Action favourited or unfavourited (required)
     * @return ApiResponse&lt;PersonalisedRadioSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedRadioSuccessResponse> postPersonalisedRadioByActivityTypeByIdWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, PersonalisedRadioRequest body) throws ApiException {
        okhttp3.Call localVarCall = postPersonalisedRadioByActivityTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, pid, body, null);
        Type localVarReturnType = new TypeToken<PersonalisedRadioSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Favourite Episode or Clip (asynchronously)
     * Add User favourite  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio favourite types: Clips or Episodes (required)
     * @param pid pid (required)
     * @param body Action favourited or unfavourited (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPersonalisedRadioByActivityTypeByIdAsync(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, PersonalisedRadioRequest body, final ApiCallback<PersonalisedRadioSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPersonalisedRadioByActivityTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, pid, body, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedRadioSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPersonalisedRadioFollowsBatch
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action followed or unfollowed (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPersonalisedRadioFollowsBatchCall(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedRadioBatchRequest> body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/my/radio/follows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPersonalisedRadioFollowsBatchValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedRadioBatchRequest> body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling postPersonalisedRadioFollowsBatch(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling postPersonalisedRadioFollowsBatch(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling postPersonalisedRadioFollowsBatch(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postPersonalisedRadioFollowsBatch(Async)");
        }

        return postPersonalisedRadioFollowsBatchCall(authorization, xAuthenticationProvider, xAPIKey, body, _callback);

    }

    /**
     * Followed Brands and Series
     * Add &#39;brand&#39; or &#39;series&#39; items to a users iPlayer Radio follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action followed or unfollowed (required)
     * @return PersonalisedRadioSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedRadioSuccessResponse postPersonalisedRadioFollowsBatch(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedRadioBatchRequest> body) throws ApiException {
        ApiResponse<PersonalisedRadioSuccessResponse> localVarResp = postPersonalisedRadioFollowsBatchWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, body);
        return localVarResp.getData();
    }

    /**
     * Followed Brands and Series
     * Add &#39;brand&#39; or &#39;series&#39; items to a users iPlayer Radio follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action followed or unfollowed (required)
     * @return ApiResponse&lt;PersonalisedRadioSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedRadioSuccessResponse> postPersonalisedRadioFollowsBatchWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedRadioBatchRequest> body) throws ApiException {
        okhttp3.Call localVarCall = postPersonalisedRadioFollowsBatchValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, body, null);
        Type localVarReturnType = new TypeToken<PersonalisedRadioSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Followed Brands and Series (asynchronously)
     * Add &#39;brand&#39; or &#39;series&#39; items to a users iPlayer Radio follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action followed or unfollowed (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPersonalisedRadioFollowsBatchAsync(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedRadioBatchRequest> body, final ApiCallback<PersonalisedRadioSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPersonalisedRadioFollowsBatchValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, body, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedRadioSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPersonalisedRadioFollowsByTypeById
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio follows types: Brands or Series (required)
     * @param pid pid (required)
     * @param body Action followed or unfollowed (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPersonalisedRadioFollowsByTypeByIdCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, PersonalisedRadioRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/my/radio/follows/{type}/{pid}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "pid" + "}", localVarApiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPersonalisedRadioFollowsByTypeByIdValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, PersonalisedRadioRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling postPersonalisedRadioFollowsByTypeById(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling postPersonalisedRadioFollowsByTypeById(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling postPersonalisedRadioFollowsByTypeById(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling postPersonalisedRadioFollowsByTypeById(Async)");
        }

        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling postPersonalisedRadioFollowsByTypeById(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postPersonalisedRadioFollowsByTypeById(Async)");
        }

        return postPersonalisedRadioFollowsByTypeByIdCall(authorization, xAuthenticationProvider, xAPIKey, type, pid, body, _callback);

    }

    /**
     * Followed Brand or Series
     * Add &#39;brand&#39; or &#39;series&#39; items from a users iPlayer Radio follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio follows types: Brands or Series (required)
     * @param pid pid (required)
     * @param body Action followed or unfollowed (required)
     * @return PersonalisedRadioSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedRadioSuccessResponse postPersonalisedRadioFollowsByTypeById(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, PersonalisedRadioRequest body) throws ApiException {
        ApiResponse<PersonalisedRadioSuccessResponse> localVarResp = postPersonalisedRadioFollowsByTypeByIdWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, type, pid, body);
        return localVarResp.getData();
    }

    /**
     * Followed Brand or Series
     * Add &#39;brand&#39; or &#39;series&#39; items from a users iPlayer Radio follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio follows types: Brands or Series (required)
     * @param pid pid (required)
     * @param body Action followed or unfollowed (required)
     * @return ApiResponse&lt;PersonalisedRadioSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedRadioSuccessResponse> postPersonalisedRadioFollowsByTypeByIdWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, PersonalisedRadioRequest body) throws ApiException {
        okhttp3.Call localVarCall = postPersonalisedRadioFollowsByTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, pid, body, null);
        Type localVarReturnType = new TypeToken<PersonalisedRadioSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Followed Brand or Series (asynchronously)
     * Add &#39;brand&#39; or &#39;series&#39; items from a users iPlayer Radio follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio follows types: Brands or Series (required)
     * @param pid pid (required)
     * @param body Action followed or unfollowed (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPersonalisedRadioFollowsByTypeByIdAsync(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, PersonalisedRadioRequest body, final ApiCallback<PersonalisedRadioSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPersonalisedRadioFollowsByTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, pid, body, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedRadioSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putPersonalisedRadioBatch
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action favourited or unfavourited (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPersonalisedRadioBatchCall(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedRadioBatchRequest> body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/my/radio/favourites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPersonalisedRadioBatchValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedRadioBatchRequest> body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling putPersonalisedRadioBatch(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling putPersonalisedRadioBatch(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling putPersonalisedRadioBatch(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putPersonalisedRadioBatch(Async)");
        }

        return putPersonalisedRadioBatchCall(authorization, xAuthenticationProvider, xAPIKey, body, _callback);

    }

    /**
     * Favourite Episodes and Clips
     * Update user favourites  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action favourited or unfavourited (required)
     * @return PersonalisedRadioSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedRadioSuccessResponse putPersonalisedRadioBatch(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedRadioBatchRequest> body) throws ApiException {
        ApiResponse<PersonalisedRadioSuccessResponse> localVarResp = putPersonalisedRadioBatchWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, body);
        return localVarResp.getData();
    }

    /**
     * Favourite Episodes and Clips
     * Update user favourites  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action favourited or unfavourited (required)
     * @return ApiResponse&lt;PersonalisedRadioSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedRadioSuccessResponse> putPersonalisedRadioBatchWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedRadioBatchRequest> body) throws ApiException {
        okhttp3.Call localVarCall = putPersonalisedRadioBatchValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, body, null);
        Type localVarReturnType = new TypeToken<PersonalisedRadioSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Favourite Episodes and Clips (asynchronously)
     * Update user favourites  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action favourited or unfavourited (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPersonalisedRadioBatchAsync(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedRadioBatchRequest> body, final ApiCallback<PersonalisedRadioSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPersonalisedRadioBatchValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, body, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedRadioSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putPersonalisedRadioByActivityTypeById
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio favourite types: Clips or Episodes (required)
     * @param pid pid (required)
     * @param body Action favourited or unfavourited (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPersonalisedRadioByActivityTypeByIdCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, PersonalisedRadioRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/my/radio/favourites/{type}/{pid}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "pid" + "}", localVarApiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPersonalisedRadioByActivityTypeByIdValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, PersonalisedRadioRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling putPersonalisedRadioByActivityTypeById(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling putPersonalisedRadioByActivityTypeById(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling putPersonalisedRadioByActivityTypeById(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling putPersonalisedRadioByActivityTypeById(Async)");
        }

        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling putPersonalisedRadioByActivityTypeById(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putPersonalisedRadioByActivityTypeById(Async)");
        }

        return putPersonalisedRadioByActivityTypeByIdCall(authorization, xAuthenticationProvider, xAPIKey, type, pid, body, _callback);

    }

    /**
     * Favourite Episode or Clip
     * Update user favourite  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio favourite types: Clips or Episodes (required)
     * @param pid pid (required)
     * @param body Action favourited or unfavourited (required)
     * @return PersonalisedRadioSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedRadioSuccessResponse putPersonalisedRadioByActivityTypeById(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, PersonalisedRadioRequest body) throws ApiException {
        ApiResponse<PersonalisedRadioSuccessResponse> localVarResp = putPersonalisedRadioByActivityTypeByIdWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, type, pid, body);
        return localVarResp.getData();
    }

    /**
     * Favourite Episode or Clip
     * Update user favourite  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio favourite types: Clips or Episodes (required)
     * @param pid pid (required)
     * @param body Action favourited or unfavourited (required)
     * @return ApiResponse&lt;PersonalisedRadioSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedRadioSuccessResponse> putPersonalisedRadioByActivityTypeByIdWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, PersonalisedRadioRequest body) throws ApiException {
        okhttp3.Call localVarCall = putPersonalisedRadioByActivityTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, pid, body, null);
        Type localVarReturnType = new TypeToken<PersonalisedRadioSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Favourite Episode or Clip (asynchronously)
     * Update user favourite  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio favourite types: Clips or Episodes (required)
     * @param pid pid (required)
     * @param body Action favourited or unfavourited (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPersonalisedRadioByActivityTypeByIdAsync(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, PersonalisedRadioRequest body, final ApiCallback<PersonalisedRadioSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPersonalisedRadioByActivityTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, pid, body, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedRadioSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putPersonalisedRadioFollowsBatch
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action followed or unfollowed (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPersonalisedRadioFollowsBatchCall(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedRadioBatchRequest> body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/my/radio/follows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPersonalisedRadioFollowsBatchValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedRadioBatchRequest> body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling putPersonalisedRadioFollowsBatch(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling putPersonalisedRadioFollowsBatch(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling putPersonalisedRadioFollowsBatch(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putPersonalisedRadioFollowsBatch(Async)");
        }

        return putPersonalisedRadioFollowsBatchCall(authorization, xAuthenticationProvider, xAPIKey, body, _callback);

    }

    /**
     * Followed Brands and Series
     * Update &#39;brands&#39; or &#39;series&#39; items from a users iPlayer Radio follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action followed or unfollowed (required)
     * @return PersonalisedRadioSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedRadioSuccessResponse putPersonalisedRadioFollowsBatch(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedRadioBatchRequest> body) throws ApiException {
        ApiResponse<PersonalisedRadioSuccessResponse> localVarResp = putPersonalisedRadioFollowsBatchWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, body);
        return localVarResp.getData();
    }

    /**
     * Followed Brands and Series
     * Update &#39;brands&#39; or &#39;series&#39; items from a users iPlayer Radio follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action followed or unfollowed (required)
     * @return ApiResponse&lt;PersonalisedRadioSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedRadioSuccessResponse> putPersonalisedRadioFollowsBatchWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedRadioBatchRequest> body) throws ApiException {
        okhttp3.Call localVarCall = putPersonalisedRadioFollowsBatchValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, body, null);
        Type localVarReturnType = new TypeToken<PersonalisedRadioSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Followed Brands and Series (asynchronously)
     * Update &#39;brands&#39; or &#39;series&#39; items from a users iPlayer Radio follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body Action followed or unfollowed (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPersonalisedRadioFollowsBatchAsync(String authorization, String xAuthenticationProvider, String xAPIKey, List<PersonalisedRadioBatchRequest> body, final ApiCallback<PersonalisedRadioSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPersonalisedRadioFollowsBatchValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, body, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedRadioSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putPersonalisedRadioFollowsByTypeById
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio follows types: Brands or Series (required)
     * @param pid pid (required)
     * @param body Action followed or unfollowed (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPersonalisedRadioFollowsByTypeByIdCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, PersonalisedRadioRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/my/radio/follows/{type}/{pid}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "pid" + "}", localVarApiClient.escapeString(pid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPersonalisedRadioFollowsByTypeByIdValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, PersonalisedRadioRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling putPersonalisedRadioFollowsByTypeById(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling putPersonalisedRadioFollowsByTypeById(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling putPersonalisedRadioFollowsByTypeById(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling putPersonalisedRadioFollowsByTypeById(Async)");
        }

        // verify the required parameter 'pid' is set
        if (pid == null) {
            throw new ApiException("Missing the required parameter 'pid' when calling putPersonalisedRadioFollowsByTypeById(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putPersonalisedRadioFollowsByTypeById(Async)");
        }

        return putPersonalisedRadioFollowsByTypeByIdCall(authorization, xAuthenticationProvider, xAPIKey, type, pid, body, _callback);

    }

    /**
     * Followed Brand or Series
     * Update &#39;brand&#39; or &#39;series&#39; items from a users iPlayer Radio follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio follows types: Brands or Series (required)
     * @param pid pid (required)
     * @param body Action followed or unfollowed (required)
     * @return PersonalisedRadioSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public PersonalisedRadioSuccessResponse putPersonalisedRadioFollowsByTypeById(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, PersonalisedRadioRequest body) throws ApiException {
        ApiResponse<PersonalisedRadioSuccessResponse> localVarResp = putPersonalisedRadioFollowsByTypeByIdWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, type, pid, body);
        return localVarResp.getData();
    }

    /**
     * Followed Brand or Series
     * Update &#39;brand&#39; or &#39;series&#39; items from a users iPlayer Radio follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio follows types: Brands or Series (required)
     * @param pid pid (required)
     * @param body Action followed or unfollowed (required)
     * @return ApiResponse&lt;PersonalisedRadioSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalisedRadioSuccessResponse> putPersonalisedRadioFollowsByTypeByIdWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, PersonalisedRadioRequest body) throws ApiException {
        okhttp3.Call localVarCall = putPersonalisedRadioFollowsByTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, pid, body, null);
        Type localVarReturnType = new TypeToken<PersonalisedRadioSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Followed Brand or Series (asynchronously)
     * Update &#39;brand&#39; or &#39;series&#39; items from a users iPlayer Radio follows  N.B. Any HTML tags submitted in metadata will be removed 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param type Supported Radio follows types: Brands or Series (required)
     * @param pid pid (required)
     * @param body Action followed or unfollowed (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPersonalisedRadioFollowsByTypeByIdAsync(String authorization, String xAuthenticationProvider, String xAPIKey, String type, String pid, PersonalisedRadioRequest body, final ApiCallback<PersonalisedRadioSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPersonalisedRadioFollowsByTypeByIdValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, type, pid, body, _callback);
        Type localVarReturnType = new TypeToken<PersonalisedRadioSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
