/*
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CategorySummary;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.NetworkSummary;
import org.openapitools.client.model.PodcastEpisodeSummary;
import org.openapitools.client.model.PodcastSynopses;
import org.openapitools.client.model.ProgrammeTitles;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Podcast
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:46.845451-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Podcast {
  public static final String SERIALIZED_NAME_CATEGORY_SUMMARIES = "category_summaries";
  @SerializedName(SERIALIZED_NAME_CATEGORY_SUMMARIES)
  private List<CategorySummary> categorySummaries = new ArrayList<>();

  public static final String SERIALIZED_NAME_DAYS_AVAILABLE = "days_available";
  @SerializedName(SERIALIZED_NAME_DAYS_AVAILABLE)
  private Integer daysAvailable;

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entity_type";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private String entityType;

  public static final String SERIALIZED_NAME_FIRST_PUBLISHED_DATE = "first_published_date";
  @SerializedName(SERIALIZED_NAME_FIRST_PUBLISHED_DATE)
  private String firstPublishedDate;

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private String frequency;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<Image> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_LATEST_AVAILABLE_EPISODES = "latest_available_episodes";
  @SerializedName(SERIALIZED_NAME_LATEST_AVAILABLE_EPISODES)
  private List<PodcastEpisodeSummary> latestAvailableEpisodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_NETWORK_SUMMARY = "network_summary";
  @SerializedName(SERIALIZED_NAME_NETWORK_SUMMARY)
  private NetworkSummary networkSummary;

  public static final String SERIALIZED_NAME_PID = "pid";
  @SerializedName(SERIALIZED_NAME_PID)
  private String pid;

  public static final String SERIALIZED_NAME_RSS_URL = "rss_url";
  @SerializedName(SERIALIZED_NAME_RSS_URL)
  private String rssUrl;

  public static final String SERIALIZED_NAME_SYNOPSES = "synopses";
  @SerializedName(SERIALIZED_NAME_SYNOPSES)
  private PodcastSynopses synopses;

  public static final String SERIALIZED_NAME_TERRITORY = "territory";
  @SerializedName(SERIALIZED_NAME_TERRITORY)
  private String territory;

  public static final String SERIALIZED_NAME_TITLES = "titles";
  @SerializedName(SERIALIZED_NAME_TITLES)
  private ProgrammeTitles titles;

  public static final String SERIALIZED_NAME_TOTAL_AVAILABLE_EPISODES = "total_available_episodes";
  @SerializedName(SERIALIZED_NAME_TOTAL_AVAILABLE_EPISODES)
  private Integer totalAvailableEpisodes;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public Podcast() {
  }

  public Podcast categorySummaries(List<CategorySummary> categorySummaries) {
    this.categorySummaries = categorySummaries;
    return this;
  }

  public Podcast addCategorySummariesItem(CategorySummary categorySummariesItem) {
    if (this.categorySummaries == null) {
      this.categorySummaries = new ArrayList<>();
    }
    this.categorySummaries.add(categorySummariesItem);
    return this;
  }

  /**
   * Get categorySummaries
   * @return categorySummaries
   */
  @javax.annotation.Nonnull
  public List<CategorySummary> getCategorySummaries() {
    return categorySummaries;
  }

  public void setCategorySummaries(List<CategorySummary> categorySummaries) {
    this.categorySummaries = categorySummaries;
  }


  public Podcast daysAvailable(Integer daysAvailable) {
    this.daysAvailable = daysAvailable;
    return this;
  }

  /**
   * Get daysAvailable
   * @return daysAvailable
   */
  @javax.annotation.Nonnull
  public Integer getDaysAvailable() {
    return daysAvailable;
  }

  public void setDaysAvailable(Integer daysAvailable) {
    this.daysAvailable = daysAvailable;
  }


  public Podcast entityType(String entityType) {
    this.entityType = entityType;
    return this;
  }

  /**
   * Get entityType
   * @return entityType
   */
  @javax.annotation.Nonnull
  public String getEntityType() {
    return entityType;
  }

  public void setEntityType(String entityType) {
    this.entityType = entityType;
  }


  public Podcast firstPublishedDate(String firstPublishedDate) {
    this.firstPublishedDate = firstPublishedDate;
    return this;
  }

  /**
   * Get firstPublishedDate
   * @return firstPublishedDate
   */
  @javax.annotation.Nonnull
  public String getFirstPublishedDate() {
    return firstPublishedDate;
  }

  public void setFirstPublishedDate(String firstPublishedDate) {
    this.firstPublishedDate = firstPublishedDate;
  }


  public Podcast frequency(String frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * Get frequency
   * @return frequency
   */
  @javax.annotation.Nonnull
  public String getFrequency() {
    return frequency;
  }

  public void setFrequency(String frequency) {
    this.frequency = frequency;
  }


  public Podcast images(List<Image> images) {
    this.images = images;
    return this;
  }

  public Podcast addImagesItem(Image imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * Get images
   * @return images
   */
  @javax.annotation.Nonnull
  public List<Image> getImages() {
    return images;
  }

  public void setImages(List<Image> images) {
    this.images = images;
  }


  public Podcast latestAvailableEpisodes(List<PodcastEpisodeSummary> latestAvailableEpisodes) {
    this.latestAvailableEpisodes = latestAvailableEpisodes;
    return this;
  }

  public Podcast addLatestAvailableEpisodesItem(PodcastEpisodeSummary latestAvailableEpisodesItem) {
    if (this.latestAvailableEpisodes == null) {
      this.latestAvailableEpisodes = new ArrayList<>();
    }
    this.latestAvailableEpisodes.add(latestAvailableEpisodesItem);
    return this;
  }

  /**
   * Get latestAvailableEpisodes
   * @return latestAvailableEpisodes
   */
  @javax.annotation.Nonnull
  public List<PodcastEpisodeSummary> getLatestAvailableEpisodes() {
    return latestAvailableEpisodes;
  }

  public void setLatestAvailableEpisodes(List<PodcastEpisodeSummary> latestAvailableEpisodes) {
    this.latestAvailableEpisodes = latestAvailableEpisodes;
  }


  public Podcast networkSummary(NetworkSummary networkSummary) {
    this.networkSummary = networkSummary;
    return this;
  }

  /**
   * Get networkSummary
   * @return networkSummary
   */
  @javax.annotation.Nonnull
  public NetworkSummary getNetworkSummary() {
    return networkSummary;
  }

  public void setNetworkSummary(NetworkSummary networkSummary) {
    this.networkSummary = networkSummary;
  }


  public Podcast pid(String pid) {
    this.pid = pid;
    return this;
  }

  /**
   * Get pid
   * @return pid
   */
  @javax.annotation.Nonnull
  public String getPid() {
    return pid;
  }

  public void setPid(String pid) {
    this.pid = pid;
  }


  public Podcast rssUrl(String rssUrl) {
    this.rssUrl = rssUrl;
    return this;
  }

  /**
   * Get rssUrl
   * @return rssUrl
   */
  @javax.annotation.Nonnull
  public String getRssUrl() {
    return rssUrl;
  }

  public void setRssUrl(String rssUrl) {
    this.rssUrl = rssUrl;
  }


  public Podcast synopses(PodcastSynopses synopses) {
    this.synopses = synopses;
    return this;
  }

  /**
   * Get synopses
   * @return synopses
   */
  @javax.annotation.Nonnull
  public PodcastSynopses getSynopses() {
    return synopses;
  }

  public void setSynopses(PodcastSynopses synopses) {
    this.synopses = synopses;
  }


  public Podcast territory(String territory) {
    this.territory = territory;
    return this;
  }

  /**
   * Get territory
   * @return territory
   */
  @javax.annotation.Nonnull
  public String getTerritory() {
    return territory;
  }

  public void setTerritory(String territory) {
    this.territory = territory;
  }


  public Podcast titles(ProgrammeTitles titles) {
    this.titles = titles;
    return this;
  }

  /**
   * Get titles
   * @return titles
   */
  @javax.annotation.Nonnull
  public ProgrammeTitles getTitles() {
    return titles;
  }

  public void setTitles(ProgrammeTitles titles) {
    this.titles = titles;
  }


  public Podcast totalAvailableEpisodes(Integer totalAvailableEpisodes) {
    this.totalAvailableEpisodes = totalAvailableEpisodes;
    return this;
  }

  /**
   * Get totalAvailableEpisodes
   * @return totalAvailableEpisodes
   */
  @javax.annotation.Nonnull
  public Integer getTotalAvailableEpisodes() {
    return totalAvailableEpisodes;
  }

  public void setTotalAvailableEpisodes(Integer totalAvailableEpisodes) {
    this.totalAvailableEpisodes = totalAvailableEpisodes;
  }


  public Podcast type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Podcast updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Podcast podcast = (Podcast) o;
    return Objects.equals(this.categorySummaries, podcast.categorySummaries) &&
        Objects.equals(this.daysAvailable, podcast.daysAvailable) &&
        Objects.equals(this.entityType, podcast.entityType) &&
        Objects.equals(this.firstPublishedDate, podcast.firstPublishedDate) &&
        Objects.equals(this.frequency, podcast.frequency) &&
        Objects.equals(this.images, podcast.images) &&
        Objects.equals(this.latestAvailableEpisodes, podcast.latestAvailableEpisodes) &&
        Objects.equals(this.networkSummary, podcast.networkSummary) &&
        Objects.equals(this.pid, podcast.pid) &&
        Objects.equals(this.rssUrl, podcast.rssUrl) &&
        Objects.equals(this.synopses, podcast.synopses) &&
        Objects.equals(this.territory, podcast.territory) &&
        Objects.equals(this.titles, podcast.titles) &&
        Objects.equals(this.totalAvailableEpisodes, podcast.totalAvailableEpisodes) &&
        Objects.equals(this.type, podcast.type) &&
        Objects.equals(this.updatedAt, podcast.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categorySummaries, daysAvailable, entityType, firstPublishedDate, frequency, images, latestAvailableEpisodes, networkSummary, pid, rssUrl, synopses, territory, titles, totalAvailableEpisodes, type, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Podcast {\n");
    sb.append("    categorySummaries: ").append(toIndentedString(categorySummaries)).append("\n");
    sb.append("    daysAvailable: ").append(toIndentedString(daysAvailable)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    firstPublishedDate: ").append(toIndentedString(firstPublishedDate)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    latestAvailableEpisodes: ").append(toIndentedString(latestAvailableEpisodes)).append("\n");
    sb.append("    networkSummary: ").append(toIndentedString(networkSummary)).append("\n");
    sb.append("    pid: ").append(toIndentedString(pid)).append("\n");
    sb.append("    rssUrl: ").append(toIndentedString(rssUrl)).append("\n");
    sb.append("    synopses: ").append(toIndentedString(synopses)).append("\n");
    sb.append("    territory: ").append(toIndentedString(territory)).append("\n");
    sb.append("    titles: ").append(toIndentedString(titles)).append("\n");
    sb.append("    totalAvailableEpisodes: ").append(toIndentedString(totalAvailableEpisodes)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category_summaries");
    openapiFields.add("days_available");
    openapiFields.add("entity_type");
    openapiFields.add("first_published_date");
    openapiFields.add("frequency");
    openapiFields.add("images");
    openapiFields.add("latest_available_episodes");
    openapiFields.add("network_summary");
    openapiFields.add("pid");
    openapiFields.add("rss_url");
    openapiFields.add("synopses");
    openapiFields.add("territory");
    openapiFields.add("titles");
    openapiFields.add("total_available_episodes");
    openapiFields.add("type");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("category_summaries");
    openapiRequiredFields.add("days_available");
    openapiRequiredFields.add("entity_type");
    openapiRequiredFields.add("first_published_date");
    openapiRequiredFields.add("frequency");
    openapiRequiredFields.add("images");
    openapiRequiredFields.add("latest_available_episodes");
    openapiRequiredFields.add("network_summary");
    openapiRequiredFields.add("pid");
    openapiRequiredFields.add("rss_url");
    openapiRequiredFields.add("synopses");
    openapiRequiredFields.add("territory");
    openapiRequiredFields.add("titles");
    openapiRequiredFields.add("total_available_episodes");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("updated_at");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Podcast
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Podcast.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Podcast is not found in the empty JSON string", Podcast.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Podcast.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Podcast` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Podcast.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("category_summaries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `category_summaries` to be an array in the JSON string but got `%s`", jsonObj.get("category_summaries").toString()));
      }

      JsonArray jsonArraycategorySummaries = jsonObj.getAsJsonArray("category_summaries");
      // validate the required field `category_summaries` (array)
      for (int i = 0; i < jsonArraycategorySummaries.size(); i++) {
        CategorySummary.validateJsonElement(jsonArraycategorySummaries.get(i));
      };
      if (!jsonObj.get("entity_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entity_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entity_type").toString()));
      }
      if (!jsonObj.get("first_published_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_published_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_published_date").toString()));
      }
      if (!jsonObj.get("frequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frequency").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("images").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
      }

      JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
      // validate the required field `images` (array)
      for (int i = 0; i < jsonArrayimages.size(); i++) {
        Image.validateJsonElement(jsonArrayimages.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("latest_available_episodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `latest_available_episodes` to be an array in the JSON string but got `%s`", jsonObj.get("latest_available_episodes").toString()));
      }

      JsonArray jsonArraylatestAvailableEpisodes = jsonObj.getAsJsonArray("latest_available_episodes");
      // validate the required field `latest_available_episodes` (array)
      for (int i = 0; i < jsonArraylatestAvailableEpisodes.size(); i++) {
        PodcastEpisodeSummary.validateJsonElement(jsonArraylatestAvailableEpisodes.get(i));
      };
      // validate the required field `network_summary`
      NetworkSummary.validateJsonElement(jsonObj.get("network_summary"));
      if (!jsonObj.get("pid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pid").toString()));
      }
      if (!jsonObj.get("rss_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rss_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rss_url").toString()));
      }
      // validate the required field `synopses`
      PodcastSynopses.validateJsonElement(jsonObj.get("synopses"));
      if (!jsonObj.get("territory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `territory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("territory").toString()));
      }
      // validate the required field `titles`
      ProgrammeTitles.validateJsonElement(jsonObj.get("titles"));
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Podcast.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Podcast' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Podcast> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Podcast.class));

       return (TypeAdapter<T>) new TypeAdapter<Podcast>() {
           @Override
           public void write(JsonWriter out, Podcast value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Podcast read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Podcast given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Podcast
   * @throws IOException if the JSON string is invalid with respect to Podcast
   */
  public static Podcast fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Podcast.class);
  }

  /**
   * Convert an instance of Podcast to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

