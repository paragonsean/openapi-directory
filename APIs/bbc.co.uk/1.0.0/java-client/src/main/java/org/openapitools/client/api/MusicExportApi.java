/*
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MusicExportErrorResponse;
import org.openapitools.client.model.MusicExportJob;
import org.openapitools.client.model.MusicExportPreferences;
import org.openapitools.client.model.MusicExportPreferencesResponse;
import org.openapitools.client.model.MusicExportSuccess;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MusicExportApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MusicExportApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MusicExportApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteMusicPreferencesExport
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMusicPreferencesExportCall(String authorization, String xAuthenticationProvider, String xAPIKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/music/preferences/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMusicPreferencesExportValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteMusicPreferencesExport(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling deleteMusicPreferencesExport(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling deleteMusicPreferencesExport(Async)");
        }

        return deleteMusicPreferencesExportCall(authorization, xAuthenticationProvider, xAPIKey, _callback);

    }

    /**
     * Music Export Preferences
     * Remove export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @return MusicExportSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public MusicExportSuccess deleteMusicPreferencesExport(String authorization, String xAuthenticationProvider, String xAPIKey) throws ApiException {
        ApiResponse<MusicExportSuccess> localVarResp = deleteMusicPreferencesExportWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey);
        return localVarResp.getData();
    }

    /**
     * Music Export Preferences
     * Remove export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @return ApiResponse&lt;MusicExportSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MusicExportSuccess> deleteMusicPreferencesExportWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey) throws ApiException {
        okhttp3.Call localVarCall = deleteMusicPreferencesExportValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, null);
        Type localVarReturnType = new TypeToken<MusicExportSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Music Export Preferences (asynchronously)
     * Remove export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMusicPreferencesExportAsync(String authorization, String xAuthenticationProvider, String xAPIKey, final ApiCallback<MusicExportSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMusicPreferencesExportValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, _callback);
        Type localVarReturnType = new TypeToken<MusicExportSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMusicPreferencesExportVendor
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param vendor Supported 3rd Party Vendor (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMusicPreferencesExportVendorCall(String authorization, String xAuthenticationProvider, String xAPIKey, String vendor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/music/preferences/export/{vendor}"
            .replace("{" + "vendor" + "}", localVarApiClient.escapeString(vendor.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMusicPreferencesExportVendorValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, String vendor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteMusicPreferencesExportVendor(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling deleteMusicPreferencesExportVendor(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling deleteMusicPreferencesExportVendor(Async)");
        }

        // verify the required parameter 'vendor' is set
        if (vendor == null) {
            throw new ApiException("Missing the required parameter 'vendor' when calling deleteMusicPreferencesExportVendor(Async)");
        }

        return deleteMusicPreferencesExportVendorCall(authorization, xAuthenticationProvider, xAPIKey, vendor, _callback);

    }

    /**
     * Music Export Vendor Preferences
     * Remove Vendor specific export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param vendor Supported 3rd Party Vendor (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteMusicPreferencesExportVendor(String authorization, String xAuthenticationProvider, String xAPIKey, String vendor) throws ApiException {
        deleteMusicPreferencesExportVendorWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, vendor);
    }

    /**
     * Music Export Vendor Preferences
     * Remove Vendor specific export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param vendor Supported 3rd Party Vendor (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMusicPreferencesExportVendorWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, String vendor) throws ApiException {
        okhttp3.Call localVarCall = deleteMusicPreferencesExportVendorValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, vendor, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Music Export Vendor Preferences (asynchronously)
     * Remove Vendor specific export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param vendor Supported 3rd Party Vendor (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMusicPreferencesExportVendorAsync(String authorization, String xAuthenticationProvider, String xAPIKey, String vendor, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMusicPreferencesExportVendorValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, vendor, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMusicExport
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMusicExportCall(String authorization, String xAuthenticationProvider, String xAPIKey, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/music/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMusicExportValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getMusicExport(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling getMusicExport(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getMusicExport(Async)");
        }

        return getMusicExportCall(authorization, xAuthenticationProvider, xAPIKey, offset, limit, _callback);

    }

    /**
     * Music Exports
     * Returns status of all previous third party export actions for a given BBC Music user. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return MusicExportJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public MusicExportJob getMusicExport(String authorization, String xAuthenticationProvider, String xAPIKey, Integer offset, Integer limit) throws ApiException {
        ApiResponse<MusicExportJob> localVarResp = getMusicExportWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Music Exports
     * Returns status of all previous third party export actions for a given BBC Music user. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @return ApiResponse&lt;MusicExportJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MusicExportJob> getMusicExportWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getMusicExportValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, offset, limit, null);
        Type localVarReturnType = new TypeToken<MusicExportJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Music Exports (asynchronously)
     * Returns status of all previous third party export actions for a given BBC Music user. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMusicExportAsync(String authorization, String xAuthenticationProvider, String xAPIKey, Integer offset, Integer limit, final ApiCallback<MusicExportJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMusicExportValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<MusicExportJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMusicExportJobs
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param over16 Boolean age check (required)
     * @param vendor Specify Vendor Jobs (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMusicExportJobsCall(String authorization, String xAuthenticationProvider, String xAPIKey, Boolean over16, String vendor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/music/exports/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (over16 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("over16", over16));
        }

        if (vendor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vendor", vendor));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMusicExportJobsValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, Boolean over16, String vendor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getMusicExportJobs(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling getMusicExportJobs(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getMusicExportJobs(Async)");
        }

        // verify the required parameter 'over16' is set
        if (over16 == null) {
            throw new ApiException("Missing the required parameter 'over16' when calling getMusicExportJobs(Async)");
        }

        return getMusicExportJobsCall(authorization, xAuthenticationProvider, xAPIKey, over16, vendor, _callback);

    }

    /**
     * Music Export Jobs
     * All items associated to a users export request 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param over16 Boolean age check (required)
     * @param vendor Specify Vendor Jobs (optional)
     * @return MusicExportJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public MusicExportJob getMusicExportJobs(String authorization, String xAuthenticationProvider, String xAPIKey, Boolean over16, String vendor) throws ApiException {
        ApiResponse<MusicExportJob> localVarResp = getMusicExportJobsWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, over16, vendor);
        return localVarResp.getData();
    }

    /**
     * Music Export Jobs
     * All items associated to a users export request 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param over16 Boolean age check (required)
     * @param vendor Specify Vendor Jobs (optional)
     * @return ApiResponse&lt;MusicExportJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MusicExportJob> getMusicExportJobsWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, Boolean over16, String vendor) throws ApiException {
        okhttp3.Call localVarCall = getMusicExportJobsValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, over16, vendor, null);
        Type localVarReturnType = new TypeToken<MusicExportJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Music Export Jobs (asynchronously)
     * All items associated to a users export request 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param over16 Boolean age check (required)
     * @param vendor Specify Vendor Jobs (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMusicExportJobsAsync(String authorization, String xAuthenticationProvider, String xAPIKey, Boolean over16, String vendor, final ApiCallback<MusicExportJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMusicExportJobsValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, over16, vendor, _callback);
        Type localVarReturnType = new TypeToken<MusicExportJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMusicExportTracks
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param over16 Boolean age check (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param vendor Specify Vendor Tracks (optional)
     * @param status Specify Track status (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMusicExportTracksCall(String authorization, String xAuthenticationProvider, String xAPIKey, Boolean over16, Integer offset, Integer limit, String vendor, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/music/exports/tracks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (over16 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("over16", over16));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (vendor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vendor", vendor));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMusicExportTracksValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, Boolean over16, Integer offset, Integer limit, String vendor, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getMusicExportTracks(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling getMusicExportTracks(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getMusicExportTracks(Async)");
        }

        // verify the required parameter 'over16' is set
        if (over16 == null) {
            throw new ApiException("Missing the required parameter 'over16' when calling getMusicExportTracks(Async)");
        }

        return getMusicExportTracksCall(authorization, xAuthenticationProvider, xAPIKey, over16, offset, limit, vendor, status, _callback);

    }

    /**
     * Music Export Tracks
     * Retrieves vendor and status specific tracks 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param over16 Boolean age check (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param vendor Specify Vendor Tracks (optional)
     * @param status Specify Track status (optional)
     * @return MusicExportJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public MusicExportJob getMusicExportTracks(String authorization, String xAuthenticationProvider, String xAPIKey, Boolean over16, Integer offset, Integer limit, String vendor, String status) throws ApiException {
        ApiResponse<MusicExportJob> localVarResp = getMusicExportTracksWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, over16, offset, limit, vendor, status);
        return localVarResp.getData();
    }

    /**
     * Music Export Tracks
     * Retrieves vendor and status specific tracks 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param over16 Boolean age check (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param vendor Specify Vendor Tracks (optional)
     * @param status Specify Track status (optional)
     * @return ApiResponse&lt;MusicExportJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MusicExportJob> getMusicExportTracksWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, Boolean over16, Integer offset, Integer limit, String vendor, String status) throws ApiException {
        okhttp3.Call localVarCall = getMusicExportTracksValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, over16, offset, limit, vendor, status, null);
        Type localVarReturnType = new TypeToken<MusicExportJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Music Export Tracks (asynchronously)
     * Retrieves vendor and status specific tracks 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param over16 Boolean age check (required)
     * @param offset Paginated results offset (optional)
     * @param limit Paginated results limit (optional)
     * @param vendor Specify Vendor Tracks (optional)
     * @param status Specify Track status (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMusicExportTracksAsync(String authorization, String xAuthenticationProvider, String xAPIKey, Boolean over16, Integer offset, Integer limit, String vendor, String status, final ApiCallback<MusicExportJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMusicExportTracksValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, over16, offset, limit, vendor, status, _callback);
        Type localVarReturnType = new TypeToken<MusicExportJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMusicPreferencesExport
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMusicPreferencesExportCall(String authorization, String xAuthenticationProvider, String xAPIKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/music/preferences/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMusicPreferencesExportValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getMusicPreferencesExport(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling getMusicPreferencesExport(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getMusicPreferencesExport(Async)");
        }

        return getMusicPreferencesExportCall(authorization, xAuthenticationProvider, xAPIKey, _callback);

    }

    /**
     * Music Export Preferences
     * Returns export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @return MusicExportPreferencesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public MusicExportPreferencesResponse getMusicPreferencesExport(String authorization, String xAuthenticationProvider, String xAPIKey) throws ApiException {
        ApiResponse<MusicExportPreferencesResponse> localVarResp = getMusicPreferencesExportWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey);
        return localVarResp.getData();
    }

    /**
     * Music Export Preferences
     * Returns export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @return ApiResponse&lt;MusicExportPreferencesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MusicExportPreferencesResponse> getMusicPreferencesExportWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey) throws ApiException {
        okhttp3.Call localVarCall = getMusicPreferencesExportValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, null);
        Type localVarReturnType = new TypeToken<MusicExportPreferencesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Music Export Preferences (asynchronously)
     * Returns export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMusicPreferencesExportAsync(String authorization, String xAuthenticationProvider, String xAPIKey, final ApiCallback<MusicExportPreferencesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMusicPreferencesExportValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, _callback);
        Type localVarReturnType = new TypeToken<MusicExportPreferencesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMusicPreferencesExportVendor
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param vendor Supported 3rd Party Vendor (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMusicPreferencesExportVendorCall(String authorization, String xAuthenticationProvider, String xAPIKey, String vendor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/music/preferences/export/{vendor}"
            .replace("{" + "vendor" + "}", localVarApiClient.escapeString(vendor.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMusicPreferencesExportVendorValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, String vendor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getMusicPreferencesExportVendor(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling getMusicPreferencesExportVendor(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling getMusicPreferencesExportVendor(Async)");
        }

        // verify the required parameter 'vendor' is set
        if (vendor == null) {
            throw new ApiException("Missing the required parameter 'vendor' when calling getMusicPreferencesExportVendor(Async)");
        }

        return getMusicPreferencesExportVendorCall(authorization, xAuthenticationProvider, xAPIKey, vendor, _callback);

    }

    /**
     * Music Export Vendor Preferences
     * Returns vendor specific export preferences for a given BBC Music user. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param vendor Supported 3rd Party Vendor (required)
     * @return MusicExportPreferencesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public MusicExportPreferencesResponse getMusicPreferencesExportVendor(String authorization, String xAuthenticationProvider, String xAPIKey, String vendor) throws ApiException {
        ApiResponse<MusicExportPreferencesResponse> localVarResp = getMusicPreferencesExportVendorWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, vendor);
        return localVarResp.getData();
    }

    /**
     * Music Export Vendor Preferences
     * Returns vendor specific export preferences for a given BBC Music user. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param vendor Supported 3rd Party Vendor (required)
     * @return ApiResponse&lt;MusicExportPreferencesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MusicExportPreferencesResponse> getMusicPreferencesExportVendorWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, String vendor) throws ApiException {
        okhttp3.Call localVarCall = getMusicPreferencesExportVendorValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, vendor, null);
        Type localVarReturnType = new TypeToken<MusicExportPreferencesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Music Export Vendor Preferences (asynchronously)
     * Returns vendor specific export preferences for a given BBC Music user. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param vendor Supported 3rd Party Vendor (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMusicPreferencesExportVendorAsync(String authorization, String xAuthenticationProvider, String xAPIKey, String vendor, final ApiCallback<MusicExportPreferencesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMusicPreferencesExportVendorValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, vendor, _callback);
        Type localVarReturnType = new TypeToken<MusicExportPreferencesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postMusicExportJob
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param over16 Boolean age check (required)
     * @param body  (required)
     * @param vendor Specify Vendor Jobs (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postMusicExportJobCall(String authorization, String xAuthenticationProvider, String xAPIKey, Boolean over16, List<MusicExportJob> body, String vendor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/my/music/exports/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (over16 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("over16", over16));
        }

        if (vendor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vendor", vendor));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postMusicExportJobValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, Boolean over16, List<MusicExportJob> body, String vendor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling postMusicExportJob(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling postMusicExportJob(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling postMusicExportJob(Async)");
        }

        // verify the required parameter 'over16' is set
        if (over16 == null) {
            throw new ApiException("Missing the required parameter 'over16' when calling postMusicExportJob(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postMusicExportJob(Async)");
        }

        return postMusicExportJobCall(authorization, xAuthenticationProvider, xAPIKey, over16, body, vendor, _callback);

    }

    /**
     * Music Export Jobs
     * Create Export Job for a user 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param over16 Boolean age check (required)
     * @param body  (required)
     * @param vendor Specify Vendor Jobs (optional)
     * @return MusicExportSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public MusicExportSuccess postMusicExportJob(String authorization, String xAuthenticationProvider, String xAPIKey, Boolean over16, List<MusicExportJob> body, String vendor) throws ApiException {
        ApiResponse<MusicExportSuccess> localVarResp = postMusicExportJobWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, over16, body, vendor);
        return localVarResp.getData();
    }

    /**
     * Music Export Jobs
     * Create Export Job for a user 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param over16 Boolean age check (required)
     * @param body  (required)
     * @param vendor Specify Vendor Jobs (optional)
     * @return ApiResponse&lt;MusicExportSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MusicExportSuccess> postMusicExportJobWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, Boolean over16, List<MusicExportJob> body, String vendor) throws ApiException {
        okhttp3.Call localVarCall = postMusicExportJobValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, over16, body, vendor, null);
        Type localVarReturnType = new TypeToken<MusicExportSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Music Export Jobs (asynchronously)
     * Create Export Job for a user 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param over16 Boolean age check (required)
     * @param body  (required)
     * @param vendor Specify Vendor Jobs (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postMusicExportJobAsync(String authorization, String xAuthenticationProvider, String xAPIKey, Boolean over16, List<MusicExportJob> body, String vendor, final ApiCallback<MusicExportSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = postMusicExportJobValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, over16, body, vendor, _callback);
        Type localVarReturnType = new TypeToken<MusicExportSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postMusicPreferencesExport
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postMusicPreferencesExportCall(String authorization, String xAuthenticationProvider, String xAPIKey, MusicExportPreferences body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/my/music/preferences/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postMusicPreferencesExportValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, MusicExportPreferences body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling postMusicPreferencesExport(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling postMusicPreferencesExport(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling postMusicPreferencesExport(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postMusicPreferencesExport(Async)");
        }

        return postMusicPreferencesExportCall(authorization, xAuthenticationProvider, xAPIKey, body, _callback);

    }

    /**
     * Music Export Preferences
     * Create export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body  (required)
     * @return MusicExportSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public MusicExportSuccess postMusicPreferencesExport(String authorization, String xAuthenticationProvider, String xAPIKey, MusicExportPreferences body) throws ApiException {
        ApiResponse<MusicExportSuccess> localVarResp = postMusicPreferencesExportWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, body);
        return localVarResp.getData();
    }

    /**
     * Music Export Preferences
     * Create export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body  (required)
     * @return ApiResponse&lt;MusicExportSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MusicExportSuccess> postMusicPreferencesExportWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, MusicExportPreferences body) throws ApiException {
        okhttp3.Call localVarCall = postMusicPreferencesExportValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, body, null);
        Type localVarReturnType = new TypeToken<MusicExportSuccess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Music Export Preferences (asynchronously)
     * Create export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postMusicPreferencesExportAsync(String authorization, String xAuthenticationProvider, String xAPIKey, MusicExportPreferences body, final ApiCallback<MusicExportSuccess> _callback) throws ApiException {

        okhttp3.Call localVarCall = postMusicPreferencesExportValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, body, _callback);
        Type localVarReturnType = new TypeToken<MusicExportSuccess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postMusicPreferencesExportVendor
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param vendor Supported 3rd Party Vendor (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postMusicPreferencesExportVendorCall(String authorization, String xAuthenticationProvider, String xAPIKey, String vendor, MusicExportPreferences body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/my/music/preferences/export/{vendor}"
            .replace("{" + "vendor" + "}", localVarApiClient.escapeString(vendor.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postMusicPreferencesExportVendorValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, String vendor, MusicExportPreferences body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling postMusicPreferencesExportVendor(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling postMusicPreferencesExportVendor(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling postMusicPreferencesExportVendor(Async)");
        }

        // verify the required parameter 'vendor' is set
        if (vendor == null) {
            throw new ApiException("Missing the required parameter 'vendor' when calling postMusicPreferencesExportVendor(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postMusicPreferencesExportVendor(Async)");
        }

        return postMusicPreferencesExportVendorCall(authorization, xAuthenticationProvider, xAPIKey, vendor, body, _callback);

    }

    /**
     * Music Export Vendor Preferences
     * Create Vendor specific export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param vendor Supported 3rd Party Vendor (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void postMusicPreferencesExportVendor(String authorization, String xAuthenticationProvider, String xAPIKey, String vendor, MusicExportPreferences body) throws ApiException {
        postMusicPreferencesExportVendorWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, vendor, body);
    }

    /**
     * Music Export Vendor Preferences
     * Create Vendor specific export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param vendor Supported 3rd Party Vendor (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postMusicPreferencesExportVendorWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, String vendor, MusicExportPreferences body) throws ApiException {
        okhttp3.Call localVarCall = postMusicPreferencesExportVendorValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, vendor, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Music Export Vendor Preferences (asynchronously)
     * Create Vendor specific export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param vendor Supported 3rd Party Vendor (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postMusicPreferencesExportVendorAsync(String authorization, String xAuthenticationProvider, String xAPIKey, String vendor, MusicExportPreferences body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postMusicPreferencesExportVendorValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, vendor, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putMusicPreferencesExportVendor
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param vendor Supported 3rd Party Vendor (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putMusicPreferencesExportVendorCall(String authorization, String xAuthenticationProvider, String xAPIKey, String vendor, MusicExportPreferences body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/my/music/preferences/export/{vendor}"
            .replace("{" + "vendor" + "}", localVarApiClient.escapeString(vendor.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xAuthenticationProvider != null) {
            localVarHeaderParams.put("X-Authentication-Provider", localVarApiClient.parameterToString(xAuthenticationProvider));
        }

        if (xAPIKey != null) {
            localVarHeaderParams.put("X-API-Key", localVarApiClient.parameterToString(xAPIKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putMusicPreferencesExportVendorValidateBeforeCall(String authorization, String xAuthenticationProvider, String xAPIKey, String vendor, MusicExportPreferences body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling putMusicPreferencesExportVendor(Async)");
        }

        // verify the required parameter 'xAuthenticationProvider' is set
        if (xAuthenticationProvider == null) {
            throw new ApiException("Missing the required parameter 'xAuthenticationProvider' when calling putMusicPreferencesExportVendor(Async)");
        }

        // verify the required parameter 'xAPIKey' is set
        if (xAPIKey == null) {
            throw new ApiException("Missing the required parameter 'xAPIKey' when calling putMusicPreferencesExportVendor(Async)");
        }

        // verify the required parameter 'vendor' is set
        if (vendor == null) {
            throw new ApiException("Missing the required parameter 'vendor' when calling putMusicPreferencesExportVendor(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putMusicPreferencesExportVendor(Async)");
        }

        return putMusicPreferencesExportVendorCall(authorization, xAuthenticationProvider, xAPIKey, vendor, body, _callback);

    }

    /**
     * Music Export Vendor Preferences
     * Update vendor specific export preferences for a given BBC Music user. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param vendor Supported 3rd Party Vendor (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void putMusicPreferencesExportVendor(String authorization, String xAuthenticationProvider, String xAPIKey, String vendor, MusicExportPreferences body) throws ApiException {
        putMusicPreferencesExportVendorWithHttpInfo(authorization, xAuthenticationProvider, xAPIKey, vendor, body);
    }

    /**
     * Music Export Vendor Preferences
     * Update vendor specific export preferences for a given BBC Music user. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param vendor Supported 3rd Party Vendor (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putMusicPreferencesExportVendorWithHttpInfo(String authorization, String xAuthenticationProvider, String xAPIKey, String vendor, MusicExportPreferences body) throws ApiException {
        okhttp3.Call localVarCall = putMusicPreferencesExportVendorValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, vendor, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Music Export Vendor Preferences (asynchronously)
     * Update vendor specific export preferences for a given BBC Music user. 
     * @param authorization Bearer OAUTH_TOKEN (required)
     * @param xAuthenticationProvider Authentication type (required)
     * @param xAPIKey API_KEY (required)
     * @param vendor Supported 3rd Party Vendor (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putMusicPreferencesExportVendorAsync(String authorization, String xAuthenticationProvider, String xAPIKey, String vendor, MusicExportPreferences body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putMusicPreferencesExportVendorValidateBeforeCall(authorization, xAuthenticationProvider, xAPIKey, vendor, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
