/*
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PersonalisedMusicArtist;
import org.openapitools.client.model.PersonalisedMusicClip;
import org.openapitools.client.model.PersonalisedMusicGenre;
import org.openapitools.client.model.PersonalisedMusicPlaylist;
import org.openapitools.client.model.PersonalisedMusicService;
import org.openapitools.client.model.PersonalisedMusicTrack;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PersonalisedMusicData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:46.845451-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PersonalisedMusicData {
  public static final String SERIALIZED_NAME_ARTIST = "artist";
  @SerializedName(SERIALIZED_NAME_ARTIST)
  private PersonalisedMusicArtist artist;

  public static final String SERIALIZED_NAME_CLIP = "clip";
  @SerializedName(SERIALIZED_NAME_CLIP)
  private PersonalisedMusicClip clip;

  public static final String SERIALIZED_NAME_GENRE = "genre";
  @SerializedName(SERIALIZED_NAME_GENRE)
  private PersonalisedMusicGenre genre;

  public static final String SERIALIZED_NAME_PLAYLIST = "playlist";
  @SerializedName(SERIALIZED_NAME_PLAYLIST)
  private PersonalisedMusicPlaylist playlist;

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private PersonalisedMusicService service;

  public static final String SERIALIZED_NAME_TRACK = "track";
  @SerializedName(SERIALIZED_NAME_TRACK)
  private PersonalisedMusicTrack track;

  public PersonalisedMusicData() {
  }

  public PersonalisedMusicData artist(PersonalisedMusicArtist artist) {
    this.artist = artist;
    return this;
  }

  /**
   * Get artist
   * @return artist
   */
  @javax.annotation.Nullable
  public PersonalisedMusicArtist getArtist() {
    return artist;
  }

  public void setArtist(PersonalisedMusicArtist artist) {
    this.artist = artist;
  }


  public PersonalisedMusicData clip(PersonalisedMusicClip clip) {
    this.clip = clip;
    return this;
  }

  /**
   * Get clip
   * @return clip
   */
  @javax.annotation.Nullable
  public PersonalisedMusicClip getClip() {
    return clip;
  }

  public void setClip(PersonalisedMusicClip clip) {
    this.clip = clip;
  }


  public PersonalisedMusicData genre(PersonalisedMusicGenre genre) {
    this.genre = genre;
    return this;
  }

  /**
   * Get genre
   * @return genre
   */
  @javax.annotation.Nullable
  public PersonalisedMusicGenre getGenre() {
    return genre;
  }

  public void setGenre(PersonalisedMusicGenre genre) {
    this.genre = genre;
  }


  public PersonalisedMusicData playlist(PersonalisedMusicPlaylist playlist) {
    this.playlist = playlist;
    return this;
  }

  /**
   * Get playlist
   * @return playlist
   */
  @javax.annotation.Nullable
  public PersonalisedMusicPlaylist getPlaylist() {
    return playlist;
  }

  public void setPlaylist(PersonalisedMusicPlaylist playlist) {
    this.playlist = playlist;
  }


  public PersonalisedMusicData service(PersonalisedMusicService service) {
    this.service = service;
    return this;
  }

  /**
   * Get service
   * @return service
   */
  @javax.annotation.Nullable
  public PersonalisedMusicService getService() {
    return service;
  }

  public void setService(PersonalisedMusicService service) {
    this.service = service;
  }


  public PersonalisedMusicData track(PersonalisedMusicTrack track) {
    this.track = track;
    return this;
  }

  /**
   * Get track
   * @return track
   */
  @javax.annotation.Nullable
  public PersonalisedMusicTrack getTrack() {
    return track;
  }

  public void setTrack(PersonalisedMusicTrack track) {
    this.track = track;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersonalisedMusicData personalisedMusicData = (PersonalisedMusicData) o;
    return Objects.equals(this.artist, personalisedMusicData.artist) &&
        Objects.equals(this.clip, personalisedMusicData.clip) &&
        Objects.equals(this.genre, personalisedMusicData.genre) &&
        Objects.equals(this.playlist, personalisedMusicData.playlist) &&
        Objects.equals(this.service, personalisedMusicData.service) &&
        Objects.equals(this.track, personalisedMusicData.track);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artist, clip, genre, playlist, service, track);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersonalisedMusicData {\n");
    sb.append("    artist: ").append(toIndentedString(artist)).append("\n");
    sb.append("    clip: ").append(toIndentedString(clip)).append("\n");
    sb.append("    genre: ").append(toIndentedString(genre)).append("\n");
    sb.append("    playlist: ").append(toIndentedString(playlist)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    track: ").append(toIndentedString(track)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("artist");
    openapiFields.add("clip");
    openapiFields.add("genre");
    openapiFields.add("playlist");
    openapiFields.add("service");
    openapiFields.add("track");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PersonalisedMusicData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PersonalisedMusicData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PersonalisedMusicData is not found in the empty JSON string", PersonalisedMusicData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PersonalisedMusicData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PersonalisedMusicData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `artist`
      if (jsonObj.get("artist") != null && !jsonObj.get("artist").isJsonNull()) {
        PersonalisedMusicArtist.validateJsonElement(jsonObj.get("artist"));
      }
      // validate the optional field `clip`
      if (jsonObj.get("clip") != null && !jsonObj.get("clip").isJsonNull()) {
        PersonalisedMusicClip.validateJsonElement(jsonObj.get("clip"));
      }
      // validate the optional field `genre`
      if (jsonObj.get("genre") != null && !jsonObj.get("genre").isJsonNull()) {
        PersonalisedMusicGenre.validateJsonElement(jsonObj.get("genre"));
      }
      // validate the optional field `playlist`
      if (jsonObj.get("playlist") != null && !jsonObj.get("playlist").isJsonNull()) {
        PersonalisedMusicPlaylist.validateJsonElement(jsonObj.get("playlist"));
      }
      // validate the optional field `service`
      if (jsonObj.get("service") != null && !jsonObj.get("service").isJsonNull()) {
        PersonalisedMusicService.validateJsonElement(jsonObj.get("service"));
      }
      // validate the optional field `track`
      if (jsonObj.get("track") != null && !jsonObj.get("track").isJsonNull()) {
        PersonalisedMusicTrack.validateJsonElement(jsonObj.get("track"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PersonalisedMusicData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PersonalisedMusicData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PersonalisedMusicData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PersonalisedMusicData.class));

       return (TypeAdapter<T>) new TypeAdapter<PersonalisedMusicData>() {
           @Override
           public void write(JsonWriter out, PersonalisedMusicData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PersonalisedMusicData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PersonalisedMusicData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PersonalisedMusicData
   * @throws IOException if the JSON string is invalid with respect to PersonalisedMusicData
   */
  public static PersonalisedMusicData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PersonalisedMusicData.class);
  }

  /**
   * Convert an instance of PersonalisedMusicData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

