/*
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MusicPopularityArtist
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:46.845451-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MusicPopularityArtist {
  public static final String SERIALIZED_NAME_GID = "gid";
  @SerializedName(SERIALIZED_NAME_GID)
  private String gid;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE_PID = "imagePid";
  @SerializedName(SERIALIZED_NAME_IMAGE_PID)
  private String imagePid;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Integer score;

  public static final String SERIALIZED_NAME_SORT_NAME = "sortName";
  @SerializedName(SERIALIZED_NAME_SORT_NAME)
  private String sortName;

  public MusicPopularityArtist() {
  }

  public MusicPopularityArtist gid(String gid) {
    this.gid = gid;
    return this;
  }

  /**
   * Get gid
   * @return gid
   */
  @javax.annotation.Nonnull
  public String getGid() {
    return gid;
  }

  public void setGid(String gid) {
    this.gid = gid;
  }


  public MusicPopularityArtist id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MusicPopularityArtist imagePid(String imagePid) {
    this.imagePid = imagePid;
    return this;
  }

  /**
   * Get imagePid
   * @return imagePid
   */
  @javax.annotation.Nonnull
  public String getImagePid() {
    return imagePid;
  }

  public void setImagePid(String imagePid) {
    this.imagePid = imagePid;
  }


  public MusicPopularityArtist name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MusicPopularityArtist score(Integer score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nonnull
  public Integer getScore() {
    return score;
  }

  public void setScore(Integer score) {
    this.score = score;
  }


  public MusicPopularityArtist sortName(String sortName) {
    this.sortName = sortName;
    return this;
  }

  /**
   * Get sortName
   * @return sortName
   */
  @javax.annotation.Nonnull
  public String getSortName() {
    return sortName;
  }

  public void setSortName(String sortName) {
    this.sortName = sortName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MusicPopularityArtist musicPopularityArtist = (MusicPopularityArtist) o;
    return Objects.equals(this.gid, musicPopularityArtist.gid) &&
        Objects.equals(this.id, musicPopularityArtist.id) &&
        Objects.equals(this.imagePid, musicPopularityArtist.imagePid) &&
        Objects.equals(this.name, musicPopularityArtist.name) &&
        Objects.equals(this.score, musicPopularityArtist.score) &&
        Objects.equals(this.sortName, musicPopularityArtist.sortName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gid, id, imagePid, name, score, sortName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MusicPopularityArtist {\n");
    sb.append("    gid: ").append(toIndentedString(gid)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imagePid: ").append(toIndentedString(imagePid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    sortName: ").append(toIndentedString(sortName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gid");
    openapiFields.add("id");
    openapiFields.add("imagePid");
    openapiFields.add("name");
    openapiFields.add("score");
    openapiFields.add("sortName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("gid");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("imagePid");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("score");
    openapiRequiredFields.add("sortName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MusicPopularityArtist
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MusicPopularityArtist.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MusicPopularityArtist is not found in the empty JSON string", MusicPopularityArtist.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MusicPopularityArtist.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MusicPopularityArtist` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MusicPopularityArtist.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("gid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gid").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("imagePid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imagePid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imagePid").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("sortName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MusicPopularityArtist.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MusicPopularityArtist' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MusicPopularityArtist> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MusicPopularityArtist.class));

       return (TypeAdapter<T>) new TypeAdapter<MusicPopularityArtist>() {
           @Override
           public void write(JsonWriter out, MusicPopularityArtist value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MusicPopularityArtist read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MusicPopularityArtist given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MusicPopularityArtist
   * @throws IOException if the JSON string is invalid with respect to MusicPopularityArtist
   */
  public static MusicPopularityArtist fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MusicPopularityArtist.class);
  }

  /**
   * Convert an instance of MusicPopularityArtist to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

