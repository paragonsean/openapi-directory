/*
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PersonalisedMusicImage;
import org.openapitools.client.model.PersonalisedMusicPlaylistVersion;
import org.openapitools.client.model.PersonalisedMusicTrack;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PersonalisedMusicPlaylist
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:46.845451-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PersonalisedMusicPlaylist {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<PersonalisedMusicImage> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLAYBACK_TYPE = "playback_type";
  @SerializedName(SERIALIZED_NAME_PLAYBACK_TYPE)
  private String playbackType;

  public static final String SERIALIZED_NAME_SERVICE_ID = "service_id";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private String serviceId;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TRACKS = "tracks";
  @SerializedName(SERIALIZED_NAME_TRACKS)
  private PersonalisedMusicTrack tracks;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private PersonalisedMusicPlaylistVersion version;

  public PersonalisedMusicPlaylist() {
  }

  public PersonalisedMusicPlaylist description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PersonalisedMusicPlaylist images(List<PersonalisedMusicImage> images) {
    this.images = images;
    return this;
  }

  public PersonalisedMusicPlaylist addImagesItem(PersonalisedMusicImage imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * Get images
   * @return images
   */
  @javax.annotation.Nullable
  public List<PersonalisedMusicImage> getImages() {
    return images;
  }

  public void setImages(List<PersonalisedMusicImage> images) {
    this.images = images;
  }


  public PersonalisedMusicPlaylist playbackType(String playbackType) {
    this.playbackType = playbackType;
    return this;
  }

  /**
   * Get playbackType
   * @return playbackType
   */
  @javax.annotation.Nullable
  public String getPlaybackType() {
    return playbackType;
  }

  public void setPlaybackType(String playbackType) {
    this.playbackType = playbackType;
  }


  public PersonalisedMusicPlaylist serviceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  /**
   * Get serviceId
   * @return serviceId
   */
  @javax.annotation.Nullable
  public String getServiceId() {
    return serviceId;
  }

  public void setServiceId(String serviceId) {
    this.serviceId = serviceId;
  }


  public PersonalisedMusicPlaylist title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public PersonalisedMusicPlaylist tracks(PersonalisedMusicTrack tracks) {
    this.tracks = tracks;
    return this;
  }

  /**
   * Get tracks
   * @return tracks
   */
  @javax.annotation.Nullable
  public PersonalisedMusicTrack getTracks() {
    return tracks;
  }

  public void setTracks(PersonalisedMusicTrack tracks) {
    this.tracks = tracks;
  }


  public PersonalisedMusicPlaylist type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public PersonalisedMusicPlaylist updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public PersonalisedMusicPlaylist version(PersonalisedMusicPlaylistVersion version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public PersonalisedMusicPlaylistVersion getVersion() {
    return version;
  }

  public void setVersion(PersonalisedMusicPlaylistVersion version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersonalisedMusicPlaylist personalisedMusicPlaylist = (PersonalisedMusicPlaylist) o;
    return Objects.equals(this.description, personalisedMusicPlaylist.description) &&
        Objects.equals(this.images, personalisedMusicPlaylist.images) &&
        Objects.equals(this.playbackType, personalisedMusicPlaylist.playbackType) &&
        Objects.equals(this.serviceId, personalisedMusicPlaylist.serviceId) &&
        Objects.equals(this.title, personalisedMusicPlaylist.title) &&
        Objects.equals(this.tracks, personalisedMusicPlaylist.tracks) &&
        Objects.equals(this.type, personalisedMusicPlaylist.type) &&
        Objects.equals(this.updatedAt, personalisedMusicPlaylist.updatedAt) &&
        Objects.equals(this.version, personalisedMusicPlaylist.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, images, playbackType, serviceId, title, tracks, type, updatedAt, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersonalisedMusicPlaylist {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    playbackType: ").append(toIndentedString(playbackType)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    tracks: ").append(toIndentedString(tracks)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("images");
    openapiFields.add("playback_type");
    openapiFields.add("service_id");
    openapiFields.add("title");
    openapiFields.add("tracks");
    openapiFields.add("type");
    openapiFields.add("updated_at");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PersonalisedMusicPlaylist
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PersonalisedMusicPlaylist.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PersonalisedMusicPlaylist is not found in the empty JSON string", PersonalisedMusicPlaylist.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PersonalisedMusicPlaylist.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PersonalisedMusicPlaylist` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
        JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
        if (jsonArrayimages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("images").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
          }

          // validate the optional field `images` (array)
          for (int i = 0; i < jsonArrayimages.size(); i++) {
            PersonalisedMusicImage.validateJsonElement(jsonArrayimages.get(i));
          };
        }
      }
      if ((jsonObj.get("playback_type") != null && !jsonObj.get("playback_type").isJsonNull()) && !jsonObj.get("playback_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `playback_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("playback_type").toString()));
      }
      if ((jsonObj.get("service_id") != null && !jsonObj.get("service_id").isJsonNull()) && !jsonObj.get("service_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_id").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the optional field `tracks`
      if (jsonObj.get("tracks") != null && !jsonObj.get("tracks").isJsonNull()) {
        PersonalisedMusicTrack.validateJsonElement(jsonObj.get("tracks"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
      // validate the optional field `version`
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        PersonalisedMusicPlaylistVersion.validateJsonElement(jsonObj.get("version"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PersonalisedMusicPlaylist.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PersonalisedMusicPlaylist' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PersonalisedMusicPlaylist> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PersonalisedMusicPlaylist.class));

       return (TypeAdapter<T>) new TypeAdapter<PersonalisedMusicPlaylist>() {
           @Override
           public void write(JsonWriter out, PersonalisedMusicPlaylist value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PersonalisedMusicPlaylist read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PersonalisedMusicPlaylist given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PersonalisedMusicPlaylist
   * @throws IOException if the JSON string is invalid with respect to PersonalisedMusicPlaylist
   */
  public static PersonalisedMusicPlaylist fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PersonalisedMusicPlaylist.class);
  }

  /**
   * Convert an instance of PersonalisedMusicPlaylist to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

