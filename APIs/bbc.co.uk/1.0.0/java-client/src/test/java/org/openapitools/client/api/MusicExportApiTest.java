/*
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.MusicExportErrorResponse;
import org.openapitools.client.model.MusicExportJob;
import org.openapitools.client.model.MusicExportPreferences;
import org.openapitools.client.model.MusicExportPreferencesResponse;
import org.openapitools.client.model.MusicExportSuccess;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MusicExportApi
 */
@Disabled
public class MusicExportApiTest {

    private final MusicExportApi api = new MusicExportApi();

    /**
     * Music Export Preferences
     *
     * Remove export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMusicPreferencesExportTest() throws ApiException {
        String authorization = null;
        String xAuthenticationProvider = null;
        String xAPIKey = null;
        MusicExportSuccess response = api.deleteMusicPreferencesExport(authorization, xAuthenticationProvider, xAPIKey);
        // TODO: test validations
    }

    /**
     * Music Export Vendor Preferences
     *
     * Remove Vendor specific export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMusicPreferencesExportVendorTest() throws ApiException {
        String authorization = null;
        String xAuthenticationProvider = null;
        String xAPIKey = null;
        String vendor = null;
        api.deleteMusicPreferencesExportVendor(authorization, xAuthenticationProvider, xAPIKey, vendor);
        // TODO: test validations
    }

    /**
     * Music Exports
     *
     * Returns status of all previous third party export actions for a given BBC Music user. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMusicExportTest() throws ApiException {
        String authorization = null;
        String xAuthenticationProvider = null;
        String xAPIKey = null;
        Integer offset = null;
        Integer limit = null;
        MusicExportJob response = api.getMusicExport(authorization, xAuthenticationProvider, xAPIKey, offset, limit);
        // TODO: test validations
    }

    /**
     * Music Export Jobs
     *
     * All items associated to a users export request 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMusicExportJobsTest() throws ApiException {
        String authorization = null;
        String xAuthenticationProvider = null;
        String xAPIKey = null;
        Boolean over16 = null;
        String vendor = null;
        MusicExportJob response = api.getMusicExportJobs(authorization, xAuthenticationProvider, xAPIKey, over16, vendor);
        // TODO: test validations
    }

    /**
     * Music Export Tracks
     *
     * Retrieves vendor and status specific tracks 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMusicExportTracksTest() throws ApiException {
        String authorization = null;
        String xAuthenticationProvider = null;
        String xAPIKey = null;
        Boolean over16 = null;
        Integer offset = null;
        Integer limit = null;
        String vendor = null;
        String status = null;
        MusicExportJob response = api.getMusicExportTracks(authorization, xAuthenticationProvider, xAPIKey, over16, offset, limit, vendor, status);
        // TODO: test validations
    }

    /**
     * Music Export Preferences
     *
     * Returns export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMusicPreferencesExportTest() throws ApiException {
        String authorization = null;
        String xAuthenticationProvider = null;
        String xAPIKey = null;
        MusicExportPreferencesResponse response = api.getMusicPreferencesExport(authorization, xAuthenticationProvider, xAPIKey);
        // TODO: test validations
    }

    /**
     * Music Export Vendor Preferences
     *
     * Returns vendor specific export preferences for a given BBC Music user. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMusicPreferencesExportVendorTest() throws ApiException {
        String authorization = null;
        String xAuthenticationProvider = null;
        String xAPIKey = null;
        String vendor = null;
        MusicExportPreferencesResponse response = api.getMusicPreferencesExportVendor(authorization, xAuthenticationProvider, xAPIKey, vendor);
        // TODO: test validations
    }

    /**
     * Music Export Jobs
     *
     * Create Export Job for a user 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postMusicExportJobTest() throws ApiException {
        String authorization = null;
        String xAuthenticationProvider = null;
        String xAPIKey = null;
        Boolean over16 = null;
        List<MusicExportJob> body = null;
        String vendor = null;
        MusicExportSuccess response = api.postMusicExportJob(authorization, xAuthenticationProvider, xAPIKey, over16, body, vendor);
        // TODO: test validations
    }

    /**
     * Music Export Preferences
     *
     * Create export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postMusicPreferencesExportTest() throws ApiException {
        String authorization = null;
        String xAuthenticationProvider = null;
        String xAPIKey = null;
        MusicExportPreferences body = null;
        MusicExportSuccess response = api.postMusicPreferencesExport(authorization, xAuthenticationProvider, xAPIKey, body);
        // TODO: test validations
    }

    /**
     * Music Export Vendor Preferences
     *
     * Create Vendor specific export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postMusicPreferencesExportVendorTest() throws ApiException {
        String authorization = null;
        String xAuthenticationProvider = null;
        String xAPIKey = null;
        String vendor = null;
        MusicExportPreferences body = null;
        api.postMusicPreferencesExportVendor(authorization, xAuthenticationProvider, xAPIKey, vendor, body);
        // TODO: test validations
    }

    /**
     * Music Export Vendor Preferences
     *
     * Update vendor specific export preferences for a given BBC Music user. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putMusicPreferencesExportVendorTest() throws ApiException {
        String authorization = null;
        String xAuthenticationProvider = null;
        String xAPIKey = null;
        String vendor = null;
        MusicExportPreferences body = null;
        api.putMusicPreferencesExportVendor(authorization, xAuthenticationProvider, xAPIKey, vendor, body);
        // TODO: test validations
    }

}
