/*
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.MusicPopularityArtists;
import org.openapitools.client.model.MusicPopularityError;
import org.openapitools.client.model.MusicPopularityPlaylists;
import org.openapitools.client.model.MusicPopularityTracks;
import org.openapitools.client.model.PersonalisedMusicBatchRequest;
import org.openapitools.client.model.PersonalisedMusicErrorResponse;
import org.openapitools.client.model.PersonalisedMusicRequest;
import org.openapitools.client.model.PersonalisedMusicResponse;
import org.openapitools.client.model.PersonalisedMusicSuccess;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MusicApi
 */
@Disabled
public class MusicApiTest {

    private final MusicApi api = new MusicApi();

    /**
     * Favourite Track or Clip
     *
     * Delete track or clip from a BBC Music user favourites. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePersonalisedMusicFavouritesByTypeByIdTest() throws ApiException {
        String authorization = null;
        String xAuthenticationProvider = null;
        String xAPIKey = null;
        String type = null;
        String id = null;
        PersonalisedMusicSuccess response = api.deletePersonalisedMusicFavouritesByTypeById(authorization, xAuthenticationProvider, xAPIKey, type, id);
        // TODO: test validations
    }

    /**
     * Followed Network, Category, Artist, Playlist and Genre
     *
     * Remove a single network, category, artist, playlist, network, genre or service entity is in a users follows 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePersonalisedMusicFollowsByTypeByIdTest() throws ApiException {
        String authorization = null;
        String xAuthenticationProvider = null;
        String xAPIKey = null;
        String type = null;
        String id = null;
        Boolean musicData = null;
        String musicContext = null;
        Boolean musicWithinUk = null;
        PersonalisedMusicSuccess response = api.deletePersonalisedMusicFollowsByTypeById(authorization, xAuthenticationProvider, xAPIKey, type, id, musicData, musicContext, musicWithinUk);
        // TODO: test validations
    }

    /**
     * Single Artist Popularity
     *
     * Popularity Artist By Id 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMusicPopularArtistByIdTest() throws ApiException {
        String xAPIKey = null;
        String id = null;
        String since = null;
        String until = null;
        Boolean decomposed = null;
        MusicPopularityArtists response = api.getMusicPopularArtistById(xAPIKey, id, since, until, decomposed);
        // TODO: test validations
    }

    /**
     * Popular Artists
     *
     * List of Most Popular artists from BBC Music. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMusicPopularArtistsTest() throws ApiException {
        String xAPIKey = null;
        String since = null;
        String until = null;
        Boolean decomposed = null;
        Integer offset = null;
        Integer limit = null;
        MusicPopularityArtists response = api.getMusicPopularArtists(xAPIKey, since, until, decomposed, offset, limit);
        // TODO: test validations
    }

    /**
     * Single Playlist Popularity
     *
     * Popular playlist by Id 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMusicPopularPlaylistByIdTest() throws ApiException {
        String xAPIKey = null;
        String id = null;
        String since = null;
        String until = null;
        Boolean decomposed = null;
        MusicPopularityPlaylists response = api.getMusicPopularPlaylistById(xAPIKey, id, since, until, decomposed);
        // TODO: test validations
    }

    /**
     * Popular Playlists
     *
     * List of Most Popular playlists from BBC Music. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMusicPopularPlaylistsTest() throws ApiException {
        String xAPIKey = null;
        String since = null;
        String until = null;
        Boolean decomposed = null;
        Integer offset = null;
        Integer limit = null;
        MusicPopularityPlaylists response = api.getMusicPopularPlaylists(xAPIKey, since, until, decomposed, offset, limit);
        // TODO: test validations
    }

    /**
     * Single Track Popularity
     *
     * Popular Track for BBC Music 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMusicPopularTrackByIdTest() throws ApiException {
        String xAPIKey = null;
        String id = null;
        String since = null;
        String until = null;
        String network = null;
        String programme = null;
        String artist = null;
        Boolean decomposed = null;
        MusicPopularityTracks response = api.getMusicPopularTrackById(xAPIKey, id, since, until, network, programme, artist, decomposed);
        // TODO: test validations
    }

    /**
     * Popular Tracks
     *
     * List of popular tracks for BBC Music. Filter by time, network, artist, playlist or programme. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMusicPopularTracksTest() throws ApiException {
        String xAPIKey = null;
        String since = null;
        String until = null;
        String network = null;
        String programme = null;
        String artist = null;
        Boolean decomposed = null;
        Integer offset = null;
        Integer limit = null;
        MusicPopularityTracks response = api.getMusicPopularTracks(xAPIKey, since, until, network, programme, artist, decomposed, offset, limit);
        // TODO: test validations
    }

    /**
     * Favourite Tracks or Clips
     *
     * List of favourited tracks and clips for a given user for BBC Music. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPersonalisedMusicFavouritesTest() throws ApiException {
        String authorization = null;
        String xAuthenticationProvider = null;
        String xAPIKey = null;
        Integer offset = null;
        Integer limit = null;
        String action = null;
        Boolean musicData = null;
        PersonalisedMusicResponse response = api.getPersonalisedMusicFavourites(authorization, xAuthenticationProvider, xAPIKey, offset, limit, action, musicData);
        // TODO: test validations
    }

    /**
     * Favourite Tracks or Clips by Type
     *
     * List of favourited tracks or clips for a given user for BBC Music. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPersonalisedMusicFavouritesByTypeTest() throws ApiException {
        String authorization = null;
        String xAuthenticationProvider = null;
        String xAPIKey = null;
        String type = null;
        String action = null;
        Integer offset = null;
        Integer limit = null;
        PersonalisedMusicResponse response = api.getPersonalisedMusicFavouritesByType(authorization, xAuthenticationProvider, xAPIKey, type, action, offset, limit);
        // TODO: test validations
    }

    /**
     * Favourite Track or Clip
     *
     * Check to see if a single track or clip entity is in a users favourites - determines UX of add button. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPersonalisedMusicFavouritesByTypeByIdTest() throws ApiException {
        String authorization = null;
        String xAuthenticationProvider = null;
        String xAPIKey = null;
        String type = null;
        String id = null;
        PersonalisedMusicResponse response = api.getPersonalisedMusicFavouritesByTypeById(authorization, xAuthenticationProvider, xAPIKey, type, id);
        // TODO: test validations
    }

    /**
     * Followed Networks, Categories, Artists, Playlists and Genres
     *
     * List of followed networks, categories, artists, playlists and genres for a given user for BBC Music. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPersonalisedMusicFollowsTest() throws ApiException {
        String authorization = null;
        String xAuthenticationProvider = null;
        String xAPIKey = null;
        String action = null;
        Boolean musicData = null;
        String musicContext = null;
        Boolean musicWithinUk = null;
        Integer offset = null;
        Integer limit = null;
        PersonalisedMusicResponse response = api.getPersonalisedMusicFollows(authorization, xAuthenticationProvider, xAPIKey, action, musicData, musicContext, musicWithinUk, offset, limit);
        // TODO: test validations
    }

    /**
     * Followed Networks, Categories, Artists, Playlists and Genres by Type
     *
     * List of followed networks, categories, artists, playlists, networks, genres, categories or services for a given BBC Music user. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPersonalisedMusicFollowsByTypeTest() throws ApiException {
        String authorization = null;
        String xAuthenticationProvider = null;
        String xAPIKey = null;
        String type = null;
        String action = null;
        Boolean musicData = null;
        String musicContext = null;
        Boolean musicWithinUk = null;
        Integer offset = null;
        Integer limit = null;
        PersonalisedMusicResponse response = api.getPersonalisedMusicFollowsByType(authorization, xAuthenticationProvider, xAPIKey, type, action, musicData, musicContext, musicWithinUk, offset, limit);
        // TODO: test validations
    }

    /**
     * Followed Network, Category, Artist, Playlist and Genre
     *
     * Check to see if a single network, category, artist, playlist, network, genre or service entity is in a users follows - determines UX of add button. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPersonalisedMusicFollowsByTypeByIdTest() throws ApiException {
        String authorization = null;
        String xAuthenticationProvider = null;
        String xAPIKey = null;
        String type = null;
        String id = null;
        Boolean musicData = null;
        String musicContext = null;
        Boolean musicWithinUk = null;
        PersonalisedMusicResponse response = api.getPersonalisedMusicFollowsByTypeById(authorization, xAuthenticationProvider, xAPIKey, type, id, musicData, musicContext, musicWithinUk);
        // TODO: test validations
    }

    /**
     * Favourite Tracks or Clips
     *
     * Add multiple tracks and/or clips to a BBC Music user&#39;s favourites.  N.B. Any HTML tags submitted in metadata will be removed 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postPersonalisedMusicFavouritesBatchTest() throws ApiException {
        String authorization = null;
        String xAuthenticationProvider = null;
        String xAPIKey = null;
        List<PersonalisedMusicBatchRequest> body = null;
        PersonalisedMusicResponse response = api.postPersonalisedMusicFavouritesBatch(authorization, xAuthenticationProvider, xAPIKey, body);
        // TODO: test validations
    }

    /**
     * Favourite Track or Clip
     *
     * Add track or clip to a BBC Music user favourites.  N.B. Any HTML tags submitted in metadata will be removed 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postPersonalisedMusicFavouritesByTypeByIdTest() throws ApiException {
        String authorization = null;
        String xAuthenticationProvider = null;
        String xAPIKey = null;
        String type = null;
        String id = null;
        PersonalisedMusicRequest body = null;
        PersonalisedMusicResponse response = api.postPersonalisedMusicFavouritesByTypeById(authorization, xAuthenticationProvider, xAPIKey, type, id, body);
        // TODO: test validations
    }

    /**
     * Followed Networks, Categories, Artists, Playlists and Genres
     *
     * Add networks, categories, artists, playlists, networks, genres or services in a users follows  N.B. Any HTML tags submitted in metadata will be removed 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postPersonalisedMusicFollowsBatchTest() throws ApiException {
        String authorization = null;
        String xAuthenticationProvider = null;
        String xAPIKey = null;
        List<PersonalisedMusicBatchRequest> body = null;
        String action = null;
        Boolean musicData = null;
        String musicContext = null;
        Boolean musicWithinUk = null;
        PersonalisedMusicSuccess response = api.postPersonalisedMusicFollowsBatch(authorization, xAuthenticationProvider, xAPIKey, body, action, musicData, musicContext, musicWithinUk);
        // TODO: test validations
    }

    /**
     * Followed Network, Category, Artist, Playlist and Genre
     *
     * Add a single network, category, artist, playlist, network, genre or service entity is in a users follows  N.B. Any HTML tags submitted in metadata will be removed 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postPersonalisedMusicFollowsByTypeByIdTest() throws ApiException {
        String authorization = null;
        String xAuthenticationProvider = null;
        String xAPIKey = null;
        String type = null;
        String id = null;
        PersonalisedMusicRequest body = null;
        Boolean musicData = null;
        String musicContext = null;
        Boolean musicWithinUk = null;
        PersonalisedMusicSuccess response = api.postPersonalisedMusicFollowsByTypeById(authorization, xAuthenticationProvider, xAPIKey, type, id, body, musicData, musicContext, musicWithinUk);
        // TODO: test validations
    }

    /**
     * Favourite Tracks or Clips
     *
     * Update tracks or clips from a BBC Music user favourites.  N.B. Any HTML tags submitted in metadata will be removed 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putPersonalisedMusicFavouritesBatchTest() throws ApiException {
        String authorization = null;
        String xAuthenticationProvider = null;
        String xAPIKey = null;
        List<PersonalisedMusicBatchRequest> body = null;
        PersonalisedMusicSuccess response = api.putPersonalisedMusicFavouritesBatch(authorization, xAuthenticationProvider, xAPIKey, body);
        // TODO: test validations
    }

    /**
     * Favourite Track or Clip
     *
     * Update tracks or clips from a BBC Music user favourites.  N.B. Any HTML tags submitted in metadata will be removed 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putPersonalisedMusicFavouritesByTypeByIdTest() throws ApiException {
        String authorization = null;
        String xAuthenticationProvider = null;
        String xAPIKey = null;
        String type = null;
        String id = null;
        PersonalisedMusicRequest body = null;
        PersonalisedMusicSuccess response = api.putPersonalisedMusicFavouritesByTypeById(authorization, xAuthenticationProvider, xAPIKey, type, id, body);
        // TODO: test validations
    }

    /**
     * Followed Networks, Categories, Artists, Playlists and Genres
     *
     * Update networks, categories, artists, playlists, networks, genres or services in a users follows  N.B. Any HTML tags submitted in metadata will be removed 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putPersonalisedMusicFollowsBatchTest() throws ApiException {
        String authorization = null;
        String xAuthenticationProvider = null;
        String xAPIKey = null;
        List<PersonalisedMusicBatchRequest> body = null;
        String action = null;
        Boolean musicData = null;
        String musicContext = null;
        Boolean musicWithinUk = null;
        PersonalisedMusicSuccess response = api.putPersonalisedMusicFollowsBatch(authorization, xAuthenticationProvider, xAPIKey, body, action, musicData, musicContext, musicWithinUk);
        // TODO: test validations
    }

    /**
     * Followed Network, Category, Artist, Playlist and Genre
     *
     * Update a single network, category, artist, playlist, network, genre or service entity is in a users follows  N.B. Any HTML tags submitted in metadata will be removed 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putPersonalisedMusicFollowsByTypeByIdTest() throws ApiException {
        String authorization = null;
        String xAuthenticationProvider = null;
        String xAPIKey = null;
        String type = null;
        String id = null;
        PersonalisedMusicRequest body = null;
        Boolean musicData = null;
        String musicContext = null;
        Boolean musicWithinUk = null;
        PersonalisedMusicSuccess response = api.putPersonalisedMusicFollowsByTypeById(authorization, xAuthenticationProvider, xAPIKey, type, id, body, musicData, musicContext, musicWithinUk);
        // TODO: test validations
    }

}
