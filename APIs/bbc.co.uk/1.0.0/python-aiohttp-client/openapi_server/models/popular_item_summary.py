# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.programme_summary import ProgrammeSummary
from openapi_server import util


class PopularItemSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: ProgrammeSummary=None, id: str=None, score: int=None, type: str=None):
        """PopularItemSummary - a model defined in OpenAPI

        :param data: The data of this PopularItemSummary.
        :param id: The id of this PopularItemSummary.
        :param score: The score of this PopularItemSummary.
        :param type: The type of this PopularItemSummary.
        """
        self.openapi_types = {
            'data': ProgrammeSummary,
            'id': str,
            'score': int,
            'type': str
        }

        self.attribute_map = {
            'data': 'data',
            'id': 'id',
            'score': 'score',
            'type': 'type'
        }

        self._data = data
        self._id = id
        self._score = score
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PopularItemSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PopularItemSummary of this PopularItemSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this PopularItemSummary.


        :return: The data of this PopularItemSummary.
        :rtype: ProgrammeSummary
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this PopularItemSummary.


        :param data: The data of this PopularItemSummary.
        :type data: ProgrammeSummary
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def id(self):
        """Gets the id of this PopularItemSummary.


        :return: The id of this PopularItemSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PopularItemSummary.


        :param id: The id of this PopularItemSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def score(self):
        """Gets the score of this PopularItemSummary.


        :return: The score of this PopularItemSummary.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this PopularItemSummary.


        :param score: The score of this PopularItemSummary.
        :type score: int
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")

        self._score = score

    @property
    def type(self):
        """Gets the type of this PopularItemSummary.


        :return: The type of this PopularItemSummary.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PopularItemSummary.


        :param type: The type of this PopularItemSummary.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
