# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PersonalisedCategories(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: str=None, type: str=None):
        """PersonalisedCategories - a model defined in OpenAPI

        :param created: The created of this PersonalisedCategories.
        :param type: The type of this PersonalisedCategories.
        """
        self.openapi_types = {
            'created': str,
            'type': str
        }

        self.attribute_map = {
            'created': 'created',
            'type': 'type'
        }

        self._created = created
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PersonalisedCategories':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PersonalisedCategories of this PersonalisedCategories.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this PersonalisedCategories.


        :return: The created of this PersonalisedCategories.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this PersonalisedCategories.


        :param created: The created of this PersonalisedCategories.
        :type created: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def type(self):
        """Gets the type of this PersonalisedCategories.


        :return: The type of this PersonalisedCategories.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PersonalisedCategories.


        :param type: The type of this PersonalisedCategories.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
