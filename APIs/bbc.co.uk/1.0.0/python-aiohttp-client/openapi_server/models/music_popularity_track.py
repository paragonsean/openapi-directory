# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.music_record_audio import MusicRecordAudio
from openapi_server.models.music_track_artist import MusicTrackArtist
from openapi_server import util


class MusicPopularityTrack(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, album: str=None, artist_gid: str=None, artist_name: str=None, artists: List[MusicTrackArtist]=None, base_title: str=None, classical: bool=None, id: str=None, merged_ids: List[str]=None, preferred_multiplay_record_audio: MusicRecordAudio=None, preferred_record_audio: MusicRecordAudio=None, radio_edit: bool=None, record_audio: List[MusicRecordAudio]=None, record_image_href: str=None, record_image_pid: str=None, score: int=None, title: str=None, type: str=None):
        """MusicPopularityTrack - a model defined in OpenAPI

        :param album: The album of this MusicPopularityTrack.
        :param artist_gid: The artist_gid of this MusicPopularityTrack.
        :param artist_name: The artist_name of this MusicPopularityTrack.
        :param artists: The artists of this MusicPopularityTrack.
        :param base_title: The base_title of this MusicPopularityTrack.
        :param classical: The classical of this MusicPopularityTrack.
        :param id: The id of this MusicPopularityTrack.
        :param merged_ids: The merged_ids of this MusicPopularityTrack.
        :param preferred_multiplay_record_audio: The preferred_multiplay_record_audio of this MusicPopularityTrack.
        :param preferred_record_audio: The preferred_record_audio of this MusicPopularityTrack.
        :param radio_edit: The radio_edit of this MusicPopularityTrack.
        :param record_audio: The record_audio of this MusicPopularityTrack.
        :param record_image_href: The record_image_href of this MusicPopularityTrack.
        :param record_image_pid: The record_image_pid of this MusicPopularityTrack.
        :param score: The score of this MusicPopularityTrack.
        :param title: The title of this MusicPopularityTrack.
        :param type: The type of this MusicPopularityTrack.
        """
        self.openapi_types = {
            'album': str,
            'artist_gid': str,
            'artist_name': str,
            'artists': List[MusicTrackArtist],
            'base_title': str,
            'classical': bool,
            'id': str,
            'merged_ids': List[str],
            'preferred_multiplay_record_audio': MusicRecordAudio,
            'preferred_record_audio': MusicRecordAudio,
            'radio_edit': bool,
            'record_audio': List[MusicRecordAudio],
            'record_image_href': str,
            'record_image_pid': str,
            'score': int,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'album': 'album',
            'artist_gid': 'artistGid',
            'artist_name': 'artistName',
            'artists': 'artists',
            'base_title': 'baseTitle',
            'classical': 'classical',
            'id': 'id',
            'merged_ids': 'mergedIds',
            'preferred_multiplay_record_audio': 'preferredMultiplayRecordAudio',
            'preferred_record_audio': 'preferredRecordAudio',
            'radio_edit': 'radioEdit',
            'record_audio': 'recordAudio',
            'record_image_href': 'recordImageHref',
            'record_image_pid': 'recordImagePid',
            'score': 'score',
            'title': 'title',
            'type': 'type'
        }

        self._album = album
        self._artist_gid = artist_gid
        self._artist_name = artist_name
        self._artists = artists
        self._base_title = base_title
        self._classical = classical
        self._id = id
        self._merged_ids = merged_ids
        self._preferred_multiplay_record_audio = preferred_multiplay_record_audio
        self._preferred_record_audio = preferred_record_audio
        self._radio_edit = radio_edit
        self._record_audio = record_audio
        self._record_image_href = record_image_href
        self._record_image_pid = record_image_pid
        self._score = score
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MusicPopularityTrack':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MusicPopularityTrack of this MusicPopularityTrack.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def album(self):
        """Gets the album of this MusicPopularityTrack.


        :return: The album of this MusicPopularityTrack.
        :rtype: str
        """
        return self._album

    @album.setter
    def album(self, album):
        """Sets the album of this MusicPopularityTrack.


        :param album: The album of this MusicPopularityTrack.
        :type album: str
        """

        self._album = album

    @property
    def artist_gid(self):
        """Gets the artist_gid of this MusicPopularityTrack.


        :return: The artist_gid of this MusicPopularityTrack.
        :rtype: str
        """
        return self._artist_gid

    @artist_gid.setter
    def artist_gid(self, artist_gid):
        """Sets the artist_gid of this MusicPopularityTrack.


        :param artist_gid: The artist_gid of this MusicPopularityTrack.
        :type artist_gid: str
        """

        self._artist_gid = artist_gid

    @property
    def artist_name(self):
        """Gets the artist_name of this MusicPopularityTrack.


        :return: The artist_name of this MusicPopularityTrack.
        :rtype: str
        """
        return self._artist_name

    @artist_name.setter
    def artist_name(self, artist_name):
        """Sets the artist_name of this MusicPopularityTrack.


        :param artist_name: The artist_name of this MusicPopularityTrack.
        :type artist_name: str
        """

        self._artist_name = artist_name

    @property
    def artists(self):
        """Gets the artists of this MusicPopularityTrack.


        :return: The artists of this MusicPopularityTrack.
        :rtype: List[MusicTrackArtist]
        """
        return self._artists

    @artists.setter
    def artists(self, artists):
        """Sets the artists of this MusicPopularityTrack.


        :param artists: The artists of this MusicPopularityTrack.
        :type artists: List[MusicTrackArtist]
        """

        self._artists = artists

    @property
    def base_title(self):
        """Gets the base_title of this MusicPopularityTrack.


        :return: The base_title of this MusicPopularityTrack.
        :rtype: str
        """
        return self._base_title

    @base_title.setter
    def base_title(self, base_title):
        """Sets the base_title of this MusicPopularityTrack.


        :param base_title: The base_title of this MusicPopularityTrack.
        :type base_title: str
        """

        self._base_title = base_title

    @property
    def classical(self):
        """Gets the classical of this MusicPopularityTrack.


        :return: The classical of this MusicPopularityTrack.
        :rtype: bool
        """
        return self._classical

    @classical.setter
    def classical(self, classical):
        """Sets the classical of this MusicPopularityTrack.


        :param classical: The classical of this MusicPopularityTrack.
        :type classical: bool
        """

        self._classical = classical

    @property
    def id(self):
        """Gets the id of this MusicPopularityTrack.


        :return: The id of this MusicPopularityTrack.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MusicPopularityTrack.


        :param id: The id of this MusicPopularityTrack.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def merged_ids(self):
        """Gets the merged_ids of this MusicPopularityTrack.


        :return: The merged_ids of this MusicPopularityTrack.
        :rtype: List[str]
        """
        return self._merged_ids

    @merged_ids.setter
    def merged_ids(self, merged_ids):
        """Sets the merged_ids of this MusicPopularityTrack.


        :param merged_ids: The merged_ids of this MusicPopularityTrack.
        :type merged_ids: List[str]
        """

        self._merged_ids = merged_ids

    @property
    def preferred_multiplay_record_audio(self):
        """Gets the preferred_multiplay_record_audio of this MusicPopularityTrack.


        :return: The preferred_multiplay_record_audio of this MusicPopularityTrack.
        :rtype: MusicRecordAudio
        """
        return self._preferred_multiplay_record_audio

    @preferred_multiplay_record_audio.setter
    def preferred_multiplay_record_audio(self, preferred_multiplay_record_audio):
        """Sets the preferred_multiplay_record_audio of this MusicPopularityTrack.


        :param preferred_multiplay_record_audio: The preferred_multiplay_record_audio of this MusicPopularityTrack.
        :type preferred_multiplay_record_audio: MusicRecordAudio
        """

        self._preferred_multiplay_record_audio = preferred_multiplay_record_audio

    @property
    def preferred_record_audio(self):
        """Gets the preferred_record_audio of this MusicPopularityTrack.


        :return: The preferred_record_audio of this MusicPopularityTrack.
        :rtype: MusicRecordAudio
        """
        return self._preferred_record_audio

    @preferred_record_audio.setter
    def preferred_record_audio(self, preferred_record_audio):
        """Sets the preferred_record_audio of this MusicPopularityTrack.


        :param preferred_record_audio: The preferred_record_audio of this MusicPopularityTrack.
        :type preferred_record_audio: MusicRecordAudio
        """

        self._preferred_record_audio = preferred_record_audio

    @property
    def radio_edit(self):
        """Gets the radio_edit of this MusicPopularityTrack.


        :return: The radio_edit of this MusicPopularityTrack.
        :rtype: bool
        """
        return self._radio_edit

    @radio_edit.setter
    def radio_edit(self, radio_edit):
        """Sets the radio_edit of this MusicPopularityTrack.


        :param radio_edit: The radio_edit of this MusicPopularityTrack.
        :type radio_edit: bool
        """

        self._radio_edit = radio_edit

    @property
    def record_audio(self):
        """Gets the record_audio of this MusicPopularityTrack.


        :return: The record_audio of this MusicPopularityTrack.
        :rtype: List[MusicRecordAudio]
        """
        return self._record_audio

    @record_audio.setter
    def record_audio(self, record_audio):
        """Sets the record_audio of this MusicPopularityTrack.


        :param record_audio: The record_audio of this MusicPopularityTrack.
        :type record_audio: List[MusicRecordAudio]
        """

        self._record_audio = record_audio

    @property
    def record_image_href(self):
        """Gets the record_image_href of this MusicPopularityTrack.


        :return: The record_image_href of this MusicPopularityTrack.
        :rtype: str
        """
        return self._record_image_href

    @record_image_href.setter
    def record_image_href(self, record_image_href):
        """Sets the record_image_href of this MusicPopularityTrack.


        :param record_image_href: The record_image_href of this MusicPopularityTrack.
        :type record_image_href: str
        """

        self._record_image_href = record_image_href

    @property
    def record_image_pid(self):
        """Gets the record_image_pid of this MusicPopularityTrack.


        :return: The record_image_pid of this MusicPopularityTrack.
        :rtype: str
        """
        return self._record_image_pid

    @record_image_pid.setter
    def record_image_pid(self, record_image_pid):
        """Sets the record_image_pid of this MusicPopularityTrack.


        :param record_image_pid: The record_image_pid of this MusicPopularityTrack.
        :type record_image_pid: str
        """

        self._record_image_pid = record_image_pid

    @property
    def score(self):
        """Gets the score of this MusicPopularityTrack.


        :return: The score of this MusicPopularityTrack.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this MusicPopularityTrack.


        :param score: The score of this MusicPopularityTrack.
        :type score: int
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")

        self._score = score

    @property
    def title(self):
        """Gets the title of this MusicPopularityTrack.


        :return: The title of this MusicPopularityTrack.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MusicPopularityTrack.


        :param title: The title of this MusicPopularityTrack.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this MusicPopularityTrack.


        :return: The type of this MusicPopularityTrack.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MusicPopularityTrack.


        :param type: The type of this MusicPopularityTrack.
        :type type: str
        """

        self._type = type
