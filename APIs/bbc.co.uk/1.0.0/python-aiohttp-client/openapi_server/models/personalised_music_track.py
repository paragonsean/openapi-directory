# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.personalised_music_track_contribution import PersonalisedMusicTrackContribution
from openapi_server.models.personalised_music_track_image import PersonalisedMusicTrackImage
from openapi_server.models.personalised_music_track_media import PersonalisedMusicTrackMedia
from openapi_server.models.personalised_music_version import PersonalisedMusicVersion
from openapi_server import util


class PersonalisedMusicTrack(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contributions: List[PersonalisedMusicTrackContribution]=None, id: str=None, images: List[PersonalisedMusicTrackImage]=None, media: List[PersonalisedMusicTrackMedia]=None, title: str=None, type: str=None, version: PersonalisedMusicVersion=None):
        """PersonalisedMusicTrack - a model defined in OpenAPI

        :param contributions: The contributions of this PersonalisedMusicTrack.
        :param id: The id of this PersonalisedMusicTrack.
        :param images: The images of this PersonalisedMusicTrack.
        :param media: The media of this PersonalisedMusicTrack.
        :param title: The title of this PersonalisedMusicTrack.
        :param type: The type of this PersonalisedMusicTrack.
        :param version: The version of this PersonalisedMusicTrack.
        """
        self.openapi_types = {
            'contributions': List[PersonalisedMusicTrackContribution],
            'id': str,
            'images': List[PersonalisedMusicTrackImage],
            'media': List[PersonalisedMusicTrackMedia],
            'title': str,
            'type': str,
            'version': PersonalisedMusicVersion
        }

        self.attribute_map = {
            'contributions': 'contributions',
            'id': 'id',
            'images': 'images',
            'media': 'media',
            'title': 'title',
            'type': 'type',
            'version': 'version'
        }

        self._contributions = contributions
        self._id = id
        self._images = images
        self._media = media
        self._title = title
        self._type = type
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PersonalisedMusicTrack':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PersonalisedMusicTrack of this PersonalisedMusicTrack.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contributions(self):
        """Gets the contributions of this PersonalisedMusicTrack.


        :return: The contributions of this PersonalisedMusicTrack.
        :rtype: List[PersonalisedMusicTrackContribution]
        """
        return self._contributions

    @contributions.setter
    def contributions(self, contributions):
        """Sets the contributions of this PersonalisedMusicTrack.


        :param contributions: The contributions of this PersonalisedMusicTrack.
        :type contributions: List[PersonalisedMusicTrackContribution]
        """
        if contributions is None:
            raise ValueError("Invalid value for `contributions`, must not be `None`")

        self._contributions = contributions

    @property
    def id(self):
        """Gets the id of this PersonalisedMusicTrack.


        :return: The id of this PersonalisedMusicTrack.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PersonalisedMusicTrack.


        :param id: The id of this PersonalisedMusicTrack.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def images(self):
        """Gets the images of this PersonalisedMusicTrack.


        :return: The images of this PersonalisedMusicTrack.
        :rtype: List[PersonalisedMusicTrackImage]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this PersonalisedMusicTrack.


        :param images: The images of this PersonalisedMusicTrack.
        :type images: List[PersonalisedMusicTrackImage]
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")

        self._images = images

    @property
    def media(self):
        """Gets the media of this PersonalisedMusicTrack.


        :return: The media of this PersonalisedMusicTrack.
        :rtype: List[PersonalisedMusicTrackMedia]
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this PersonalisedMusicTrack.


        :param media: The media of this PersonalisedMusicTrack.
        :type media: List[PersonalisedMusicTrackMedia]
        """
        if media is None:
            raise ValueError("Invalid value for `media`, must not be `None`")

        self._media = media

    @property
    def title(self):
        """Gets the title of this PersonalisedMusicTrack.


        :return: The title of this PersonalisedMusicTrack.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PersonalisedMusicTrack.


        :param title: The title of this PersonalisedMusicTrack.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this PersonalisedMusicTrack.


        :return: The type of this PersonalisedMusicTrack.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PersonalisedMusicTrack.


        :param type: The type of this PersonalisedMusicTrack.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def version(self):
        """Gets the version of this PersonalisedMusicTrack.


        :return: The version of this PersonalisedMusicTrack.
        :rtype: PersonalisedMusicVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PersonalisedMusicTrack.


        :param version: The version of this PersonalisedMusicTrack.
        :type version: PersonalisedMusicVersion
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
