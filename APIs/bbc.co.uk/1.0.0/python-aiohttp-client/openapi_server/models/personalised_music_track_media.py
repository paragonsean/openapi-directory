# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PersonalisedMusicTrackMedia(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: int=None, format: str=None, id: str=None, scope: str=None, source: str=None, type: str=None):
        """PersonalisedMusicTrackMedia - a model defined in OpenAPI

        :param duration: The duration of this PersonalisedMusicTrackMedia.
        :param format: The format of this PersonalisedMusicTrackMedia.
        :param id: The id of this PersonalisedMusicTrackMedia.
        :param scope: The scope of this PersonalisedMusicTrackMedia.
        :param source: The source of this PersonalisedMusicTrackMedia.
        :param type: The type of this PersonalisedMusicTrackMedia.
        """
        self.openapi_types = {
            'duration': int,
            'format': str,
            'id': str,
            'scope': str,
            'source': str,
            'type': str
        }

        self.attribute_map = {
            'duration': 'duration',
            'format': 'format',
            'id': 'id',
            'scope': 'scope',
            'source': 'source',
            'type': 'type'
        }

        self._duration = duration
        self._format = format
        self._id = id
        self._scope = scope
        self._source = source
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PersonalisedMusicTrackMedia':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PersonalisedMusicTrackMedia of this PersonalisedMusicTrackMedia.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this PersonalisedMusicTrackMedia.


        :return: The duration of this PersonalisedMusicTrackMedia.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this PersonalisedMusicTrackMedia.


        :param duration: The duration of this PersonalisedMusicTrackMedia.
        :type duration: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def format(self):
        """Gets the format of this PersonalisedMusicTrackMedia.


        :return: The format of this PersonalisedMusicTrackMedia.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this PersonalisedMusicTrackMedia.


        :param format: The format of this PersonalisedMusicTrackMedia.
        :type format: str
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")

        self._format = format

    @property
    def id(self):
        """Gets the id of this PersonalisedMusicTrackMedia.


        :return: The id of this PersonalisedMusicTrackMedia.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PersonalisedMusicTrackMedia.


        :param id: The id of this PersonalisedMusicTrackMedia.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def scope(self):
        """Gets the scope of this PersonalisedMusicTrackMedia.


        :return: The scope of this PersonalisedMusicTrackMedia.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this PersonalisedMusicTrackMedia.


        :param scope: The scope of this PersonalisedMusicTrackMedia.
        :type scope: str
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")

        self._scope = scope

    @property
    def source(self):
        """Gets the source of this PersonalisedMusicTrackMedia.


        :return: The source of this PersonalisedMusicTrackMedia.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this PersonalisedMusicTrackMedia.


        :param source: The source of this PersonalisedMusicTrackMedia.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def type(self):
        """Gets the type of this PersonalisedMusicTrackMedia.


        :return: The type of this PersonalisedMusicTrackMedia.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PersonalisedMusicTrackMedia.


        :param type: The type of this PersonalisedMusicTrackMedia.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
