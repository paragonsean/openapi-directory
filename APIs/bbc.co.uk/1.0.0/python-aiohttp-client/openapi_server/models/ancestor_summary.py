# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ancestor_titles import AncestorTitles
from openapi_server.models.image import Image
from openapi_server import util


class AncestorSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ancestor_type: str=None, id: str=None, images: List[Image]=None, titles: AncestorTitles=None, type: str=None):
        """AncestorSummary - a model defined in OpenAPI

        :param ancestor_type: The ancestor_type of this AncestorSummary.
        :param id: The id of this AncestorSummary.
        :param images: The images of this AncestorSummary.
        :param titles: The titles of this AncestorSummary.
        :param type: The type of this AncestorSummary.
        """
        self.openapi_types = {
            'ancestor_type': str,
            'id': str,
            'images': List[Image],
            'titles': AncestorTitles,
            'type': str
        }

        self.attribute_map = {
            'ancestor_type': 'ancestor_type',
            'id': 'id',
            'images': 'images',
            'titles': 'titles',
            'type': 'type'
        }

        self._ancestor_type = ancestor_type
        self._id = id
        self._images = images
        self._titles = titles
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AncestorSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AncestorSummary of this AncestorSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ancestor_type(self):
        """Gets the ancestor_type of this AncestorSummary.


        :return: The ancestor_type of this AncestorSummary.
        :rtype: str
        """
        return self._ancestor_type

    @ancestor_type.setter
    def ancestor_type(self, ancestor_type):
        """Sets the ancestor_type of this AncestorSummary.


        :param ancestor_type: The ancestor_type of this AncestorSummary.
        :type ancestor_type: str
        """
        if ancestor_type is None:
            raise ValueError("Invalid value for `ancestor_type`, must not be `None`")

        self._ancestor_type = ancestor_type

    @property
    def id(self):
        """Gets the id of this AncestorSummary.


        :return: The id of this AncestorSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AncestorSummary.


        :param id: The id of this AncestorSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def images(self):
        """Gets the images of this AncestorSummary.


        :return: The images of this AncestorSummary.
        :rtype: List[Image]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this AncestorSummary.


        :param images: The images of this AncestorSummary.
        :type images: List[Image]
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")

        self._images = images

    @property
    def titles(self):
        """Gets the titles of this AncestorSummary.


        :return: The titles of this AncestorSummary.
        :rtype: AncestorTitles
        """
        return self._titles

    @titles.setter
    def titles(self, titles):
        """Sets the titles of this AncestorSummary.


        :param titles: The titles of this AncestorSummary.
        :type titles: AncestorTitles
        """
        if titles is None:
            raise ValueError("Invalid value for `titles`, must not be `None`")

        self._titles = titles

    @property
    def type(self):
        """Gets the type of this AncestorSummary.


        :return: The type of this AncestorSummary.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AncestorSummary.


        :param type: The type of this AncestorSummary.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
