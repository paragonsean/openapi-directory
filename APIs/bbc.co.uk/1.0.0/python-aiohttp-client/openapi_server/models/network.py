# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.category_summary import CategorySummary
from openapi_server.models.contact import Contact
from openapi_server.models.date_range import DateRange
from openapi_server.models.service import Service
from openapi_server import util


class Network(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, contacts: List[Contact]=None, date_ranges: List[DateRange]=None, group: str=None, id: str=None, international: bool=None, key: str=None, preset: bool=None, promoted_category_summaries: List[CategorySummary]=None, services: List[Service]=None, short_title: str=None, sort: int=None, title: str=None, type: str=None):
        """Network - a model defined in OpenAPI

        :param active: The active of this Network.
        :param contacts: The contacts of this Network.
        :param date_ranges: The date_ranges of this Network.
        :param group: The group of this Network.
        :param id: The id of this Network.
        :param international: The international of this Network.
        :param key: The key of this Network.
        :param preset: The preset of this Network.
        :param promoted_category_summaries: The promoted_category_summaries of this Network.
        :param services: The services of this Network.
        :param short_title: The short_title of this Network.
        :param sort: The sort of this Network.
        :param title: The title of this Network.
        :param type: The type of this Network.
        """
        self.openapi_types = {
            'active': bool,
            'contacts': List[Contact],
            'date_ranges': List[DateRange],
            'group': str,
            'id': str,
            'international': bool,
            'key': str,
            'preset': bool,
            'promoted_category_summaries': List[CategorySummary],
            'services': List[Service],
            'short_title': str,
            'sort': int,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'active': 'active',
            'contacts': 'contacts',
            'date_ranges': 'date_ranges',
            'group': 'group',
            'id': 'id',
            'international': 'international',
            'key': 'key',
            'preset': 'preset',
            'promoted_category_summaries': 'promoted_category_summaries',
            'services': 'services',
            'short_title': 'short_title',
            'sort': 'sort',
            'title': 'title',
            'type': 'type'
        }

        self._active = active
        self._contacts = contacts
        self._date_ranges = date_ranges
        self._group = group
        self._id = id
        self._international = international
        self._key = key
        self._preset = preset
        self._promoted_category_summaries = promoted_category_summaries
        self._services = services
        self._short_title = short_title
        self._sort = sort
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Network':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Network of this Network.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this Network.


        :return: The active of this Network.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Network.


        :param active: The active of this Network.
        :type active: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")

        self._active = active

    @property
    def contacts(self):
        """Gets the contacts of this Network.


        :return: The contacts of this Network.
        :rtype: List[Contact]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this Network.


        :param contacts: The contacts of this Network.
        :type contacts: List[Contact]
        """
        if contacts is None:
            raise ValueError("Invalid value for `contacts`, must not be `None`")

        self._contacts = contacts

    @property
    def date_ranges(self):
        """Gets the date_ranges of this Network.


        :return: The date_ranges of this Network.
        :rtype: List[DateRange]
        """
        return self._date_ranges

    @date_ranges.setter
    def date_ranges(self, date_ranges):
        """Sets the date_ranges of this Network.


        :param date_ranges: The date_ranges of this Network.
        :type date_ranges: List[DateRange]
        """
        if date_ranges is None:
            raise ValueError("Invalid value for `date_ranges`, must not be `None`")

        self._date_ranges = date_ranges

    @property
    def group(self):
        """Gets the group of this Network.


        :return: The group of this Network.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Network.


        :param group: The group of this Network.
        :type group: str
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")

        self._group = group

    @property
    def id(self):
        """Gets the id of this Network.


        :return: The id of this Network.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Network.


        :param id: The id of this Network.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def international(self):
        """Gets the international of this Network.


        :return: The international of this Network.
        :rtype: bool
        """
        return self._international

    @international.setter
    def international(self, international):
        """Sets the international of this Network.


        :param international: The international of this Network.
        :type international: bool
        """
        if international is None:
            raise ValueError("Invalid value for `international`, must not be `None`")

        self._international = international

    @property
    def key(self):
        """Gets the key of this Network.


        :return: The key of this Network.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Network.


        :param key: The key of this Network.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def preset(self):
        """Gets the preset of this Network.


        :return: The preset of this Network.
        :rtype: bool
        """
        return self._preset

    @preset.setter
    def preset(self, preset):
        """Sets the preset of this Network.


        :param preset: The preset of this Network.
        :type preset: bool
        """
        if preset is None:
            raise ValueError("Invalid value for `preset`, must not be `None`")

        self._preset = preset

    @property
    def promoted_category_summaries(self):
        """Gets the promoted_category_summaries of this Network.


        :return: The promoted_category_summaries of this Network.
        :rtype: List[CategorySummary]
        """
        return self._promoted_category_summaries

    @promoted_category_summaries.setter
    def promoted_category_summaries(self, promoted_category_summaries):
        """Sets the promoted_category_summaries of this Network.


        :param promoted_category_summaries: The promoted_category_summaries of this Network.
        :type promoted_category_summaries: List[CategorySummary]
        """

        self._promoted_category_summaries = promoted_category_summaries

    @property
    def services(self):
        """Gets the services of this Network.


        :return: The services of this Network.
        :rtype: List[Service]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this Network.


        :param services: The services of this Network.
        :type services: List[Service]
        """
        if services is None:
            raise ValueError("Invalid value for `services`, must not be `None`")

        self._services = services

    @property
    def short_title(self):
        """Gets the short_title of this Network.


        :return: The short_title of this Network.
        :rtype: str
        """
        return self._short_title

    @short_title.setter
    def short_title(self, short_title):
        """Sets the short_title of this Network.


        :param short_title: The short_title of this Network.
        :type short_title: str
        """
        if short_title is None:
            raise ValueError("Invalid value for `short_title`, must not be `None`")

        self._short_title = short_title

    @property
    def sort(self):
        """Gets the sort of this Network.


        :return: The sort of this Network.
        :rtype: int
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this Network.


        :param sort: The sort of this Network.
        :type sort: int
        """
        if sort is None:
            raise ValueError("Invalid value for `sort`, must not be `None`")

        self._sort = sort

    @property
    def title(self):
        """Gets the title of this Network.


        :return: The title of this Network.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Network.


        :param title: The title of this Network.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this Network.


        :return: The type of this Network.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Network.


        :param type: The type of this Network.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
