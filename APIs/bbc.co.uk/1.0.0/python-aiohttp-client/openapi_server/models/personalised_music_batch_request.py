# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.personalised_music_meta_data import PersonalisedMusicMetaData
from openapi_server import util


class PersonalisedMusicBatchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, added_at: str=None, context: str=None, domain: str=None, id: str=None, meta_data: PersonalisedMusicMetaData=None, type: str=None):
        """PersonalisedMusicBatchRequest - a model defined in OpenAPI

        :param action: The action of this PersonalisedMusicBatchRequest.
        :param added_at: The added_at of this PersonalisedMusicBatchRequest.
        :param context: The context of this PersonalisedMusicBatchRequest.
        :param domain: The domain of this PersonalisedMusicBatchRequest.
        :param id: The id of this PersonalisedMusicBatchRequest.
        :param meta_data: The meta_data of this PersonalisedMusicBatchRequest.
        :param type: The type of this PersonalisedMusicBatchRequest.
        """
        self.openapi_types = {
            'action': str,
            'added_at': str,
            'context': str,
            'domain': str,
            'id': str,
            'meta_data': PersonalisedMusicMetaData,
            'type': str
        }

        self.attribute_map = {
            'action': 'action',
            'added_at': 'added_at',
            'context': 'context',
            'domain': 'domain',
            'id': 'id',
            'meta_data': 'meta_data',
            'type': 'type'
        }

        self._action = action
        self._added_at = added_at
        self._context = context
        self._domain = domain
        self._id = id
        self._meta_data = meta_data
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PersonalisedMusicBatchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PersonalisedMusicBatchRequest of this PersonalisedMusicBatchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this PersonalisedMusicBatchRequest.


        :return: The action of this PersonalisedMusicBatchRequest.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this PersonalisedMusicBatchRequest.


        :param action: The action of this PersonalisedMusicBatchRequest.
        :type action: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def added_at(self):
        """Gets the added_at of this PersonalisedMusicBatchRequest.


        :return: The added_at of this PersonalisedMusicBatchRequest.
        :rtype: str
        """
        return self._added_at

    @added_at.setter
    def added_at(self, added_at):
        """Sets the added_at of this PersonalisedMusicBatchRequest.


        :param added_at: The added_at of this PersonalisedMusicBatchRequest.
        :type added_at: str
        """

        self._added_at = added_at

    @property
    def context(self):
        """Gets the context of this PersonalisedMusicBatchRequest.


        :return: The context of this PersonalisedMusicBatchRequest.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this PersonalisedMusicBatchRequest.


        :param context: The context of this PersonalisedMusicBatchRequest.
        :type context: str
        """

        self._context = context

    @property
    def domain(self):
        """Gets the domain of this PersonalisedMusicBatchRequest.


        :return: The domain of this PersonalisedMusicBatchRequest.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this PersonalisedMusicBatchRequest.


        :param domain: The domain of this PersonalisedMusicBatchRequest.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def id(self):
        """Gets the id of this PersonalisedMusicBatchRequest.


        :return: The id of this PersonalisedMusicBatchRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PersonalisedMusicBatchRequest.


        :param id: The id of this PersonalisedMusicBatchRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def meta_data(self):
        """Gets the meta_data of this PersonalisedMusicBatchRequest.


        :return: The meta_data of this PersonalisedMusicBatchRequest.
        :rtype: PersonalisedMusicMetaData
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this PersonalisedMusicBatchRequest.


        :param meta_data: The meta_data of this PersonalisedMusicBatchRequest.
        :type meta_data: PersonalisedMusicMetaData
        """

        self._meta_data = meta_data

    @property
    def type(self):
        """Gets the type of this PersonalisedMusicBatchRequest.


        :return: The type of this PersonalisedMusicBatchRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PersonalisedMusicBatchRequest.


        :param type: The type of this PersonalisedMusicBatchRequest.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
