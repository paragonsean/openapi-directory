# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProgrammeTitles(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_title: str=None, entity_title: str=None, primary_title: str=None, secondary_title: str=None, type: str=None):
        """ProgrammeTitles - a model defined in OpenAPI

        :param display_title: The display_title of this ProgrammeTitles.
        :param entity_title: The entity_title of this ProgrammeTitles.
        :param primary_title: The primary_title of this ProgrammeTitles.
        :param secondary_title: The secondary_title of this ProgrammeTitles.
        :param type: The type of this ProgrammeTitles.
        """
        self.openapi_types = {
            'display_title': str,
            'entity_title': str,
            'primary_title': str,
            'secondary_title': str,
            'type': str
        }

        self.attribute_map = {
            'display_title': 'display_title',
            'entity_title': 'entity_title',
            'primary_title': 'primary_title',
            'secondary_title': 'secondary_title',
            'type': 'type'
        }

        self._display_title = display_title
        self._entity_title = entity_title
        self._primary_title = primary_title
        self._secondary_title = secondary_title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProgrammeTitles':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProgrammeTitles of this ProgrammeTitles.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_title(self):
        """Gets the display_title of this ProgrammeTitles.


        :return: The display_title of this ProgrammeTitles.
        :rtype: str
        """
        return self._display_title

    @display_title.setter
    def display_title(self, display_title):
        """Sets the display_title of this ProgrammeTitles.


        :param display_title: The display_title of this ProgrammeTitles.
        :type display_title: str
        """

        self._display_title = display_title

    @property
    def entity_title(self):
        """Gets the entity_title of this ProgrammeTitles.


        :return: The entity_title of this ProgrammeTitles.
        :rtype: str
        """
        return self._entity_title

    @entity_title.setter
    def entity_title(self, entity_title):
        """Sets the entity_title of this ProgrammeTitles.


        :param entity_title: The entity_title of this ProgrammeTitles.
        :type entity_title: str
        """

        self._entity_title = entity_title

    @property
    def primary_title(self):
        """Gets the primary_title of this ProgrammeTitles.


        :return: The primary_title of this ProgrammeTitles.
        :rtype: str
        """
        return self._primary_title

    @primary_title.setter
    def primary_title(self, primary_title):
        """Sets the primary_title of this ProgrammeTitles.


        :param primary_title: The primary_title of this ProgrammeTitles.
        :type primary_title: str
        """

        self._primary_title = primary_title

    @property
    def secondary_title(self):
        """Gets the secondary_title of this ProgrammeTitles.


        :return: The secondary_title of this ProgrammeTitles.
        :rtype: str
        """
        return self._secondary_title

    @secondary_title.setter
    def secondary_title(self, secondary_title):
        """Sets the secondary_title of this ProgrammeTitles.


        :param secondary_title: The secondary_title of this ProgrammeTitles.
        :type secondary_title: str
        """

        self._secondary_title = secondary_title

    @property
    def type(self):
        """Gets the type of this ProgrammeTitles.


        :return: The type of this ProgrammeTitles.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProgrammeTitles.


        :param type: The type of this ProgrammeTitles.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
