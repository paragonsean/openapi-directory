# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.meta_data import MetaData
from openapi_server.models.programme_summary import ProgrammeSummary
from openapi_server import util


class PersonalisedRadioActivity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, activity: str=None, added_at: str=None, data: ProgrammeSummary=None, domain: str=None, id: str=None, metadata: MetaData=None, type: str=None, uas_type: str=None, urn: str=None):
        """PersonalisedRadioActivity - a model defined in OpenAPI

        :param action: The action of this PersonalisedRadioActivity.
        :param activity: The activity of this PersonalisedRadioActivity.
        :param added_at: The added_at of this PersonalisedRadioActivity.
        :param data: The data of this PersonalisedRadioActivity.
        :param domain: The domain of this PersonalisedRadioActivity.
        :param id: The id of this PersonalisedRadioActivity.
        :param metadata: The metadata of this PersonalisedRadioActivity.
        :param type: The type of this PersonalisedRadioActivity.
        :param uas_type: The uas_type of this PersonalisedRadioActivity.
        :param urn: The urn of this PersonalisedRadioActivity.
        """
        self.openapi_types = {
            'action': str,
            'activity': str,
            'added_at': str,
            'data': ProgrammeSummary,
            'domain': str,
            'id': str,
            'metadata': MetaData,
            'type': str,
            'uas_type': str,
            'urn': str
        }

        self.attribute_map = {
            'action': 'action',
            'activity': 'activity',
            'added_at': 'added_at',
            'data': 'data',
            'domain': 'domain',
            'id': 'id',
            'metadata': 'metadata',
            'type': 'type',
            'uas_type': 'uas_type',
            'urn': 'urn'
        }

        self._action = action
        self._activity = activity
        self._added_at = added_at
        self._data = data
        self._domain = domain
        self._id = id
        self._metadata = metadata
        self._type = type
        self._uas_type = uas_type
        self._urn = urn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PersonalisedRadioActivity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PersonalisedRadioActivity of this PersonalisedRadioActivity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this PersonalisedRadioActivity.


        :return: The action of this PersonalisedRadioActivity.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this PersonalisedRadioActivity.


        :param action: The action of this PersonalisedRadioActivity.
        :type action: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def activity(self):
        """Gets the activity of this PersonalisedRadioActivity.


        :return: The activity of this PersonalisedRadioActivity.
        :rtype: str
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this PersonalisedRadioActivity.


        :param activity: The activity of this PersonalisedRadioActivity.
        :type activity: str
        """
        if activity is None:
            raise ValueError("Invalid value for `activity`, must not be `None`")

        self._activity = activity

    @property
    def added_at(self):
        """Gets the added_at of this PersonalisedRadioActivity.


        :return: The added_at of this PersonalisedRadioActivity.
        :rtype: str
        """
        return self._added_at

    @added_at.setter
    def added_at(self, added_at):
        """Sets the added_at of this PersonalisedRadioActivity.


        :param added_at: The added_at of this PersonalisedRadioActivity.
        :type added_at: str
        """
        if added_at is None:
            raise ValueError("Invalid value for `added_at`, must not be `None`")

        self._added_at = added_at

    @property
    def data(self):
        """Gets the data of this PersonalisedRadioActivity.


        :return: The data of this PersonalisedRadioActivity.
        :rtype: ProgrammeSummary
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this PersonalisedRadioActivity.


        :param data: The data of this PersonalisedRadioActivity.
        :type data: ProgrammeSummary
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def domain(self):
        """Gets the domain of this PersonalisedRadioActivity.


        :return: The domain of this PersonalisedRadioActivity.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this PersonalisedRadioActivity.


        :param domain: The domain of this PersonalisedRadioActivity.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def id(self):
        """Gets the id of this PersonalisedRadioActivity.


        :return: The id of this PersonalisedRadioActivity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PersonalisedRadioActivity.


        :param id: The id of this PersonalisedRadioActivity.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this PersonalisedRadioActivity.


        :return: The metadata of this PersonalisedRadioActivity.
        :rtype: MetaData
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PersonalisedRadioActivity.


        :param metadata: The metadata of this PersonalisedRadioActivity.
        :type metadata: MetaData
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def type(self):
        """Gets the type of this PersonalisedRadioActivity.


        :return: The type of this PersonalisedRadioActivity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PersonalisedRadioActivity.


        :param type: The type of this PersonalisedRadioActivity.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def uas_type(self):
        """Gets the uas_type of this PersonalisedRadioActivity.


        :return: The uas_type of this PersonalisedRadioActivity.
        :rtype: str
        """
        return self._uas_type

    @uas_type.setter
    def uas_type(self, uas_type):
        """Sets the uas_type of this PersonalisedRadioActivity.


        :param uas_type: The uas_type of this PersonalisedRadioActivity.
        :type uas_type: str
        """
        if uas_type is None:
            raise ValueError("Invalid value for `uas_type`, must not be `None`")

        self._uas_type = uas_type

    @property
    def urn(self):
        """Gets the urn of this PersonalisedRadioActivity.


        :return: The urn of this PersonalisedRadioActivity.
        :rtype: str
        """
        return self._urn

    @urn.setter
    def urn(self, urn):
        """Sets the urn of this PersonalisedRadioActivity.


        :param urn: The urn of this PersonalisedRadioActivity.
        :type urn: str
        """
        if urn is None:
            raise ValueError("Invalid value for `urn`, must not be `None`")

        self._urn = urn
