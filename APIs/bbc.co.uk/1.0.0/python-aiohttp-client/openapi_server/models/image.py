# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Image(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, image_type: str=None, template_url: str=None, type: str=None):
        """Image - a model defined in OpenAPI

        :param id: The id of this Image.
        :param image_type: The image_type of this Image.
        :param template_url: The template_url of this Image.
        :param type: The type of this Image.
        """
        self.openapi_types = {
            'id': str,
            'image_type': str,
            'template_url': str,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'image_type': 'image_type',
            'template_url': 'template_url',
            'type': 'type'
        }

        self._id = id
        self._image_type = image_type
        self._template_url = template_url
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Image':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Image of this Image.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Image.


        :return: The id of this Image.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Image.


        :param id: The id of this Image.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def image_type(self):
        """Gets the image_type of this Image.


        :return: The image_type of this Image.
        :rtype: str
        """
        return self._image_type

    @image_type.setter
    def image_type(self, image_type):
        """Sets the image_type of this Image.


        :param image_type: The image_type of this Image.
        :type image_type: str
        """
        if image_type is None:
            raise ValueError("Invalid value for `image_type`, must not be `None`")

        self._image_type = image_type

    @property
    def template_url(self):
        """Gets the template_url of this Image.


        :return: The template_url of this Image.
        :rtype: str
        """
        return self._template_url

    @template_url.setter
    def template_url(self, template_url):
        """Sets the template_url of this Image.


        :param template_url: The template_url of this Image.
        :type template_url: str
        """
        if template_url is None:
            raise ValueError("Invalid value for `template_url`, must not be `None`")

        self._template_url = template_url

    @property
    def type(self):
        """Gets the type of this Image.


        :return: The type of this Image.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Image.


        :param type: The type of this Image.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
