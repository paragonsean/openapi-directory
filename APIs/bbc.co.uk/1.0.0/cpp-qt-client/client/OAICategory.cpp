/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategory::OAICategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategory::OAICategory() {
    this->initializeModel();
}

OAICategory::~OAICategory() {}

void OAICategory::initializeModel() {

    m_category_type_isSet = false;
    m_category_type_isValid = false;

    m_child_categories_isSet = false;
    m_child_categories_isValid = false;

    m_depth_isSet = false;
    m_depth_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_pip_id_isSet = false;
    m_pip_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_key_isSet = false;
    m_url_key_isValid = false;
}

void OAICategory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategory::fromJsonObject(QJsonObject json) {

    m_category_type_isValid = ::OpenAPI::fromJsonValue(m_category_type, json[QString("category_type")]);
    m_category_type_isSet = !json[QString("category_type")].isNull() && m_category_type_isValid;

    m_child_categories_isValid = ::OpenAPI::fromJsonValue(m_child_categories, json[QString("child_categories")]);
    m_child_categories_isSet = !json[QString("child_categories")].isNull() && m_child_categories_isValid;

    m_depth_isValid = ::OpenAPI::fromJsonValue(m_depth, json[QString("depth")]);
    m_depth_isSet = !json[QString("depth")].isNull() && m_depth_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_pip_id_isValid = ::OpenAPI::fromJsonValue(m_pip_id, json[QString("pip_id")]);
    m_pip_id_isSet = !json[QString("pip_id")].isNull() && m_pip_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_key_isValid = ::OpenAPI::fromJsonValue(m_url_key, json[QString("url_key")]);
    m_url_key_isSet = !json[QString("url_key")].isNull() && m_url_key_isValid;
}

QString OAICategory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategory::asJsonObject() const {
    QJsonObject obj;
    if (m_category_type_isSet) {
        obj.insert(QString("category_type"), ::OpenAPI::toJsonValue(m_category_type));
    }
    if (m_child_categories.size() > 0) {
        obj.insert(QString("child_categories"), ::OpenAPI::toJsonValue(m_child_categories));
    }
    if (m_depth_isSet) {
        obj.insert(QString("depth"), ::OpenAPI::toJsonValue(m_depth));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_pip_id_isSet) {
        obj.insert(QString("pip_id"), ::OpenAPI::toJsonValue(m_pip_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_key_isSet) {
        obj.insert(QString("url_key"), ::OpenAPI::toJsonValue(m_url_key));
    }
    return obj;
}

QString OAICategory::getCategoryType() const {
    return m_category_type;
}
void OAICategory::setCategoryType(const QString &category_type) {
    m_category_type = category_type;
    m_category_type_isSet = true;
}

bool OAICategory::is_category_type_Set() const{
    return m_category_type_isSet;
}

bool OAICategory::is_category_type_Valid() const{
    return m_category_type_isValid;
}

QList<OAIChildCategory> OAICategory::getChildCategories() const {
    return m_child_categories;
}
void OAICategory::setChildCategories(const QList<OAIChildCategory> &child_categories) {
    m_child_categories = child_categories;
    m_child_categories_isSet = true;
}

bool OAICategory::is_child_categories_Set() const{
    return m_child_categories_isSet;
}

bool OAICategory::is_child_categories_Valid() const{
    return m_child_categories_isValid;
}

qint32 OAICategory::getDepth() const {
    return m_depth;
}
void OAICategory::setDepth(const qint32 &depth) {
    m_depth = depth;
    m_depth_isSet = true;
}

bool OAICategory::is_depth_Set() const{
    return m_depth_isSet;
}

bool OAICategory::is_depth_Valid() const{
    return m_depth_isValid;
}

QString OAICategory::getId() const {
    return m_id;
}
void OAICategory::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICategory::is_id_Set() const{
    return m_id_isSet;
}

bool OAICategory::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICategory::getPipId() const {
    return m_pip_id;
}
void OAICategory::setPipId(const QString &pip_id) {
    m_pip_id = pip_id;
    m_pip_id_isSet = true;
}

bool OAICategory::is_pip_id_Set() const{
    return m_pip_id_isSet;
}

bool OAICategory::is_pip_id_Valid() const{
    return m_pip_id_isValid;
}

QString OAICategory::getTitle() const {
    return m_title;
}
void OAICategory::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICategory::is_title_Set() const{
    return m_title_isSet;
}

bool OAICategory::is_title_Valid() const{
    return m_title_isValid;
}

QString OAICategory::getType() const {
    return m_type;
}
void OAICategory::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICategory::is_type_Set() const{
    return m_type_isSet;
}

bool OAICategory::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICategory::getUrlKey() const {
    return m_url_key;
}
void OAICategory::setUrlKey(const QString &url_key) {
    m_url_key = url_key;
    m_url_key_isSet = true;
}

bool OAICategory::is_url_key_Set() const{
    return m_url_key_isSet;
}

bool OAICategory::is_url_key_Valid() const{
    return m_url_key_isValid;
}

bool OAICategory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pip_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_category_type_isValid && m_child_categories_isValid && m_depth_isValid && m_id_isValid && m_pip_id_isValid && m_title_isValid && m_type_isValid && m_url_key_isValid && true;
}

} // namespace OpenAPI
