/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPersonalisedMusicPlaylist.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPersonalisedMusicPlaylist::OAIPersonalisedMusicPlaylist(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPersonalisedMusicPlaylist::OAIPersonalisedMusicPlaylist() {
    this->initializeModel();
}

OAIPersonalisedMusicPlaylist::~OAIPersonalisedMusicPlaylist() {}

void OAIPersonalisedMusicPlaylist::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_playback_type_isSet = false;
    m_playback_type_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_tracks_isSet = false;
    m_tracks_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIPersonalisedMusicPlaylist::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPersonalisedMusicPlaylist::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_playback_type_isValid = ::OpenAPI::fromJsonValue(m_playback_type, json[QString("playback_type")]);
    m_playback_type_isSet = !json[QString("playback_type")].isNull() && m_playback_type_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("service_id")]);
    m_service_id_isSet = !json[QString("service_id")].isNull() && m_service_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_tracks_isValid = ::OpenAPI::fromJsonValue(m_tracks, json[QString("tracks")]);
    m_tracks_isSet = !json[QString("tracks")].isNull() && m_tracks_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIPersonalisedMusicPlaylist::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPersonalisedMusicPlaylist::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_playback_type_isSet) {
        obj.insert(QString("playback_type"), ::OpenAPI::toJsonValue(m_playback_type));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("service_id"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_tracks.isSet()) {
        obj.insert(QString("tracks"), ::OpenAPI::toJsonValue(m_tracks));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_version.isSet()) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIPersonalisedMusicPlaylist::getDescription() const {
    return m_description;
}
void OAIPersonalisedMusicPlaylist::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPersonalisedMusicPlaylist::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPersonalisedMusicPlaylist::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIPersonalisedMusicImage> OAIPersonalisedMusicPlaylist::getImages() const {
    return m_images;
}
void OAIPersonalisedMusicPlaylist::setImages(const QList<OAIPersonalisedMusicImage> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIPersonalisedMusicPlaylist::is_images_Set() const{
    return m_images_isSet;
}

bool OAIPersonalisedMusicPlaylist::is_images_Valid() const{
    return m_images_isValid;
}

QString OAIPersonalisedMusicPlaylist::getPlaybackType() const {
    return m_playback_type;
}
void OAIPersonalisedMusicPlaylist::setPlaybackType(const QString &playback_type) {
    m_playback_type = playback_type;
    m_playback_type_isSet = true;
}

bool OAIPersonalisedMusicPlaylist::is_playback_type_Set() const{
    return m_playback_type_isSet;
}

bool OAIPersonalisedMusicPlaylist::is_playback_type_Valid() const{
    return m_playback_type_isValid;
}

QString OAIPersonalisedMusicPlaylist::getServiceId() const {
    return m_service_id;
}
void OAIPersonalisedMusicPlaylist::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIPersonalisedMusicPlaylist::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIPersonalisedMusicPlaylist::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAIPersonalisedMusicPlaylist::getTitle() const {
    return m_title;
}
void OAIPersonalisedMusicPlaylist::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPersonalisedMusicPlaylist::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPersonalisedMusicPlaylist::is_title_Valid() const{
    return m_title_isValid;
}

OAIPersonalisedMusicTrack OAIPersonalisedMusicPlaylist::getTracks() const {
    return m_tracks;
}
void OAIPersonalisedMusicPlaylist::setTracks(const OAIPersonalisedMusicTrack &tracks) {
    m_tracks = tracks;
    m_tracks_isSet = true;
}

bool OAIPersonalisedMusicPlaylist::is_tracks_Set() const{
    return m_tracks_isSet;
}

bool OAIPersonalisedMusicPlaylist::is_tracks_Valid() const{
    return m_tracks_isValid;
}

QString OAIPersonalisedMusicPlaylist::getType() const {
    return m_type;
}
void OAIPersonalisedMusicPlaylist::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPersonalisedMusicPlaylist::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPersonalisedMusicPlaylist::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPersonalisedMusicPlaylist::getUpdatedAt() const {
    return m_updated_at;
}
void OAIPersonalisedMusicPlaylist::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIPersonalisedMusicPlaylist::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIPersonalisedMusicPlaylist::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIPersonalisedMusicPlaylistVersion OAIPersonalisedMusicPlaylist::getVersion() const {
    return m_version;
}
void OAIPersonalisedMusicPlaylist::setVersion(const OAIPersonalisedMusicPlaylistVersion &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIPersonalisedMusicPlaylist::is_version_Set() const{
    return m_version_isSet;
}

bool OAIPersonalisedMusicPlaylist::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIPersonalisedMusicPlaylist::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_playback_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPersonalisedMusicPlaylist::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
