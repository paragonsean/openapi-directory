/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBody_3.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBody_3::OAIBody_3(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBody_3::OAIBody_3() {
    this->initializeModel();
}

OAIBody_3::~OAIBody_3() {}

void OAIBody_3::initializeModel() {

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;
}

void OAIBody_3::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBody_3::fromJsonObject(QJsonObject json) {

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("service_id")]);
    m_service_id_isSet = !json[QString("service_id")].isNull() && m_service_id_isValid;
}

QString OAIBody_3::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBody_3::asJsonObject() const {
    QJsonObject obj;
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("service_id"), ::OpenAPI::toJsonValue(m_service_id));
    }
    return obj;
}

QString OAIBody_3::getPlatform() const {
    return m_platform;
}
void OAIBody_3::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIBody_3::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIBody_3::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIBody_3::getServiceId() const {
    return m_service_id;
}
void OAIBody_3::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIBody_3::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIBody_3::is_service_id_Valid() const{
    return m_service_id_isValid;
}

bool OAIBody_3::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBody_3::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_platform_isValid && m_service_id_isValid && true;
}

} // namespace OpenAPI
