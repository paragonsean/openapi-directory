/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIService::OAIService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIService::OAIService() {
    this->initializeModel();
}

OAIService::~OAIService() {}

void OAIService::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_coverage_isSet = false;
    m_coverage_isValid = false;

    m_date_ranges_isSet = false;
    m_date_ranges_isValid = false;

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_default_language_isSet = false;
    m_default_language_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_short_title_isSet = false;
    m_short_title_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIService::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_coverage_isValid = ::OpenAPI::fromJsonValue(m_coverage, json[QString("coverage")]);
    m_coverage_isSet = !json[QString("coverage")].isNull() && m_coverage_isValid;

    m_date_ranges_isValid = ::OpenAPI::fromJsonValue(m_date_ranges, json[QString("date_ranges")]);
    m_date_ranges_isSet = !json[QString("date_ranges")].isNull() && m_date_ranges_isValid;

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_default_language_isValid = ::OpenAPI::fromJsonValue(m_default_language, json[QString("default_language")]);
    m_default_language_isSet = !json[QString("default_language")].isNull() && m_default_language_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_short_title_isValid = ::OpenAPI::fromJsonValue(m_short_title, json[QString("short_title")]);
    m_short_title_isSet = !json[QString("short_title")].isNull() && m_short_title_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIService::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_coverage_isSet) {
        obj.insert(QString("coverage"), ::OpenAPI::toJsonValue(m_coverage));
    }
    if (m_date_ranges.size() > 0) {
        obj.insert(QString("date_ranges"), ::OpenAPI::toJsonValue(m_date_ranges));
    }
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_default_language_isSet) {
        obj.insert(QString("default_language"), ::OpenAPI::toJsonValue(m_default_language));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_short_title_isSet) {
        obj.insert(QString("short_title"), ::OpenAPI::toJsonValue(m_short_title));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIService::isActive() const {
    return m_active;
}
void OAIService::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIService::is_active_Set() const{
    return m_active_isSet;
}

bool OAIService::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIService::getCoverage() const {
    return m_coverage;
}
void OAIService::setCoverage(const QString &coverage) {
    m_coverage = coverage;
    m_coverage_isSet = true;
}

bool OAIService::is_coverage_Set() const{
    return m_coverage_isSet;
}

bool OAIService::is_coverage_Valid() const{
    return m_coverage_isValid;
}

QList<OAIDateRange> OAIService::getDateRanges() const {
    return m_date_ranges;
}
void OAIService::setDateRanges(const QList<OAIDateRange> &date_ranges) {
    m_date_ranges = date_ranges;
    m_date_ranges_isSet = true;
}

bool OAIService::is_date_ranges_Set() const{
    return m_date_ranges_isSet;
}

bool OAIService::is_date_ranges_Valid() const{
    return m_date_ranges_isValid;
}

bool OAIService::isRDefault() const {
    return m_r_default;
}
void OAIService::setRDefault(const bool &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAIService::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAIService::is_r_default_Valid() const{
    return m_r_default_isValid;
}

QString OAIService::getDefaultLanguage() const {
    return m_default_language;
}
void OAIService::setDefaultLanguage(const QString &default_language) {
    m_default_language = default_language;
    m_default_language_isSet = true;
}

bool OAIService::is_default_language_Set() const{
    return m_default_language_isSet;
}

bool OAIService::is_default_language_Valid() const{
    return m_default_language_isValid;
}

QString OAIService::getId() const {
    return m_id;
}
void OAIService::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIService::is_id_Set() const{
    return m_id_isSet;
}

bool OAIService::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIService::getRegion() const {
    return m_region;
}
void OAIService::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIService::is_region_Set() const{
    return m_region_isSet;
}

bool OAIService::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIService::getShortTitle() const {
    return m_short_title;
}
void OAIService::setShortTitle(const QString &short_title) {
    m_short_title = short_title;
    m_short_title_isSet = true;
}

bool OAIService::is_short_title_Set() const{
    return m_short_title_isSet;
}

bool OAIService::is_short_title_Valid() const{
    return m_short_title_isValid;
}

QString OAIService::getTitle() const {
    return m_title;
}
void OAIService::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIService::is_title_Set() const{
    return m_title_isSet;
}

bool OAIService::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIService::getType() const {
    return m_type;
}
void OAIService::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIService::is_type_Set() const{
    return m_type_isSet;
}

bool OAIService::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coverage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIService::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_active_isValid && m_coverage_isValid && m_date_ranges_isValid && m_r_default_isValid && m_default_language_isValid && m_id_isValid && m_region_isValid && m_short_title_isValid && m_title_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
