/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategorySummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategorySummary::OAICategorySummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategorySummary::OAICategorySummary() {
    this->initializeModel();
}

OAICategorySummary::~OAICategorySummary() {}

void OAICategorySummary::initializeModel() {

    m_category_type_isSet = false;
    m_category_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICategorySummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategorySummary::fromJsonObject(QJsonObject json) {

    m_category_type_isValid = ::OpenAPI::fromJsonValue(m_category_type, json[QString("category_type")]);
    m_category_type_isSet = !json[QString("category_type")].isNull() && m_category_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICategorySummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategorySummary::asJsonObject() const {
    QJsonObject obj;
    if (m_category_type_isSet) {
        obj.insert(QString("category_type"), ::OpenAPI::toJsonValue(m_category_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAICategorySummary::getCategoryType() const {
    return m_category_type;
}
void OAICategorySummary::setCategoryType(const QString &category_type) {
    m_category_type = category_type;
    m_category_type_isSet = true;
}

bool OAICategorySummary::is_category_type_Set() const{
    return m_category_type_isSet;
}

bool OAICategorySummary::is_category_type_Valid() const{
    return m_category_type_isValid;
}

QString OAICategorySummary::getId() const {
    return m_id;
}
void OAICategorySummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICategorySummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAICategorySummary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICategorySummary::getKey() const {
    return m_key;
}
void OAICategorySummary::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAICategorySummary::is_key_Set() const{
    return m_key_isSet;
}

bool OAICategorySummary::is_key_Valid() const{
    return m_key_isValid;
}

QString OAICategorySummary::getTitle() const {
    return m_title;
}
void OAICategorySummary::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICategorySummary::is_title_Set() const{
    return m_title_isSet;
}

bool OAICategorySummary::is_title_Valid() const{
    return m_title_isValid;
}

QString OAICategorySummary::getType() const {
    return m_type;
}
void OAICategorySummary::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICategorySummary::is_type_Set() const{
    return m_type_isSet;
}

bool OAICategorySummary::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICategorySummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategorySummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_category_type_isValid && m_id_isValid && m_key_isValid && m_title_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
