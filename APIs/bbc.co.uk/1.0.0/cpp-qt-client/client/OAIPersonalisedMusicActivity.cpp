/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPersonalisedMusicActivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPersonalisedMusicActivity::OAIPersonalisedMusicActivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPersonalisedMusicActivity::OAIPersonalisedMusicActivity() {
    this->initializeModel();
}

OAIPersonalisedMusicActivity::~OAIPersonalisedMusicActivity() {}

void OAIPersonalisedMusicActivity::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_activity_isSet = false;
    m_activity_isValid = false;

    m_added_at_isSet = false;
    m_added_at_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_meta_data_isSet = false;
    m_meta_data_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_urn_isSet = false;
    m_urn_isValid = false;
}

void OAIPersonalisedMusicActivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPersonalisedMusicActivity::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_activity_isValid = ::OpenAPI::fromJsonValue(m_activity, json[QString("activity")]);
    m_activity_isSet = !json[QString("activity")].isNull() && m_activity_isValid;

    m_added_at_isValid = ::OpenAPI::fromJsonValue(m_added_at, json[QString("added_at")]);
    m_added_at_isSet = !json[QString("added_at")].isNull() && m_added_at_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_meta_data_isValid = ::OpenAPI::fromJsonValue(m_meta_data, json[QString("meta_data")]);
    m_meta_data_isSet = !json[QString("meta_data")].isNull() && m_meta_data_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_urn_isValid = ::OpenAPI::fromJsonValue(m_urn, json[QString("urn")]);
    m_urn_isSet = !json[QString("urn")].isNull() && m_urn_isValid;
}

QString OAIPersonalisedMusicActivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPersonalisedMusicActivity::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_activity_isSet) {
        obj.insert(QString("activity"), ::OpenAPI::toJsonValue(m_activity));
    }
    if (m_added_at_isSet) {
        obj.insert(QString("added_at"), ::OpenAPI::toJsonValue(m_added_at));
    }
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_meta_data.isSet()) {
        obj.insert(QString("meta_data"), ::OpenAPI::toJsonValue(m_meta_data));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_urn_isSet) {
        obj.insert(QString("urn"), ::OpenAPI::toJsonValue(m_urn));
    }
    return obj;
}

QString OAIPersonalisedMusicActivity::getAction() const {
    return m_action;
}
void OAIPersonalisedMusicActivity::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIPersonalisedMusicActivity::is_action_Set() const{
    return m_action_isSet;
}

bool OAIPersonalisedMusicActivity::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIPersonalisedMusicActivity::getActivity() const {
    return m_activity;
}
void OAIPersonalisedMusicActivity::setActivity(const QString &activity) {
    m_activity = activity;
    m_activity_isSet = true;
}

bool OAIPersonalisedMusicActivity::is_activity_Set() const{
    return m_activity_isSet;
}

bool OAIPersonalisedMusicActivity::is_activity_Valid() const{
    return m_activity_isValid;
}

QString OAIPersonalisedMusicActivity::getAddedAt() const {
    return m_added_at;
}
void OAIPersonalisedMusicActivity::setAddedAt(const QString &added_at) {
    m_added_at = added_at;
    m_added_at_isSet = true;
}

bool OAIPersonalisedMusicActivity::is_added_at_Set() const{
    return m_added_at_isSet;
}

bool OAIPersonalisedMusicActivity::is_added_at_Valid() const{
    return m_added_at_isValid;
}

QList<OAIPersonalisedMusicData> OAIPersonalisedMusicActivity::getData() const {
    return m_data;
}
void OAIPersonalisedMusicActivity::setData(const QList<OAIPersonalisedMusicData> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIPersonalisedMusicActivity::is_data_Set() const{
    return m_data_isSet;
}

bool OAIPersonalisedMusicActivity::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIPersonalisedMusicActivity::getDomain() const {
    return m_domain;
}
void OAIPersonalisedMusicActivity::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIPersonalisedMusicActivity::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIPersonalisedMusicActivity::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIPersonalisedMusicActivity::getId() const {
    return m_id;
}
void OAIPersonalisedMusicActivity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPersonalisedMusicActivity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPersonalisedMusicActivity::is_id_Valid() const{
    return m_id_isValid;
}

OAIPersonalisedMusicMetaData OAIPersonalisedMusicActivity::getMetaData() const {
    return m_meta_data;
}
void OAIPersonalisedMusicActivity::setMetaData(const OAIPersonalisedMusicMetaData &meta_data) {
    m_meta_data = meta_data;
    m_meta_data_isSet = true;
}

bool OAIPersonalisedMusicActivity::is_meta_data_Set() const{
    return m_meta_data_isSet;
}

bool OAIPersonalisedMusicActivity::is_meta_data_Valid() const{
    return m_meta_data_isValid;
}

QString OAIPersonalisedMusicActivity::getType() const {
    return m_type;
}
void OAIPersonalisedMusicActivity::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPersonalisedMusicActivity::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPersonalisedMusicActivity::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPersonalisedMusicActivity::getUrn() const {
    return m_urn;
}
void OAIPersonalisedMusicActivity::setUrn(const QString &urn) {
    m_urn = urn;
    m_urn_isSet = true;
}

bool OAIPersonalisedMusicActivity::is_urn_Set() const{
    return m_urn_isSet;
}

bool OAIPersonalisedMusicActivity::is_urn_Valid() const{
    return m_urn_isValid;
}

bool OAIPersonalisedMusicActivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_added_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_urn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPersonalisedMusicActivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_activity_isValid && m_added_at_isValid && m_data_isValid && m_domain_isValid && m_id_isValid && m_meta_data_isValid && m_type_isValid && m_urn_isValid && true;
}

} // namespace OpenAPI
