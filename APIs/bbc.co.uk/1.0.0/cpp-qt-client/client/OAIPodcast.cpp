/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPodcast.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPodcast::OAIPodcast(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPodcast::OAIPodcast() {
    this->initializeModel();
}

OAIPodcast::~OAIPodcast() {}

void OAIPodcast::initializeModel() {

    m_category_summaries_isSet = false;
    m_category_summaries_isValid = false;

    m_days_available_isSet = false;
    m_days_available_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_first_published_date_isSet = false;
    m_first_published_date_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_latest_available_episodes_isSet = false;
    m_latest_available_episodes_isValid = false;

    m_network_summary_isSet = false;
    m_network_summary_isValid = false;

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_rss_url_isSet = false;
    m_rss_url_isValid = false;

    m_synopses_isSet = false;
    m_synopses_isValid = false;

    m_territory_isSet = false;
    m_territory_isValid = false;

    m_titles_isSet = false;
    m_titles_isValid = false;

    m_total_available_episodes_isSet = false;
    m_total_available_episodes_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIPodcast::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPodcast::fromJsonObject(QJsonObject json) {

    m_category_summaries_isValid = ::OpenAPI::fromJsonValue(m_category_summaries, json[QString("category_summaries")]);
    m_category_summaries_isSet = !json[QString("category_summaries")].isNull() && m_category_summaries_isValid;

    m_days_available_isValid = ::OpenAPI::fromJsonValue(m_days_available, json[QString("days_available")]);
    m_days_available_isSet = !json[QString("days_available")].isNull() && m_days_available_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entity_type")]);
    m_entity_type_isSet = !json[QString("entity_type")].isNull() && m_entity_type_isValid;

    m_first_published_date_isValid = ::OpenAPI::fromJsonValue(m_first_published_date, json[QString("first_published_date")]);
    m_first_published_date_isSet = !json[QString("first_published_date")].isNull() && m_first_published_date_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_latest_available_episodes_isValid = ::OpenAPI::fromJsonValue(m_latest_available_episodes, json[QString("latest_available_episodes")]);
    m_latest_available_episodes_isSet = !json[QString("latest_available_episodes")].isNull() && m_latest_available_episodes_isValid;

    m_network_summary_isValid = ::OpenAPI::fromJsonValue(m_network_summary, json[QString("network_summary")]);
    m_network_summary_isSet = !json[QString("network_summary")].isNull() && m_network_summary_isValid;

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_rss_url_isValid = ::OpenAPI::fromJsonValue(m_rss_url, json[QString("rss_url")]);
    m_rss_url_isSet = !json[QString("rss_url")].isNull() && m_rss_url_isValid;

    m_synopses_isValid = ::OpenAPI::fromJsonValue(m_synopses, json[QString("synopses")]);
    m_synopses_isSet = !json[QString("synopses")].isNull() && m_synopses_isValid;

    m_territory_isValid = ::OpenAPI::fromJsonValue(m_territory, json[QString("territory")]);
    m_territory_isSet = !json[QString("territory")].isNull() && m_territory_isValid;

    m_titles_isValid = ::OpenAPI::fromJsonValue(m_titles, json[QString("titles")]);
    m_titles_isSet = !json[QString("titles")].isNull() && m_titles_isValid;

    m_total_available_episodes_isValid = ::OpenAPI::fromJsonValue(m_total_available_episodes, json[QString("total_available_episodes")]);
    m_total_available_episodes_isSet = !json[QString("total_available_episodes")].isNull() && m_total_available_episodes_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIPodcast::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPodcast::asJsonObject() const {
    QJsonObject obj;
    if (m_category_summaries.size() > 0) {
        obj.insert(QString("category_summaries"), ::OpenAPI::toJsonValue(m_category_summaries));
    }
    if (m_days_available_isSet) {
        obj.insert(QString("days_available"), ::OpenAPI::toJsonValue(m_days_available));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entity_type"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_first_published_date_isSet) {
        obj.insert(QString("first_published_date"), ::OpenAPI::toJsonValue(m_first_published_date));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_latest_available_episodes.size() > 0) {
        obj.insert(QString("latest_available_episodes"), ::OpenAPI::toJsonValue(m_latest_available_episodes));
    }
    if (m_network_summary.isSet()) {
        obj.insert(QString("network_summary"), ::OpenAPI::toJsonValue(m_network_summary));
    }
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_rss_url_isSet) {
        obj.insert(QString("rss_url"), ::OpenAPI::toJsonValue(m_rss_url));
    }
    if (m_synopses.isSet()) {
        obj.insert(QString("synopses"), ::OpenAPI::toJsonValue(m_synopses));
    }
    if (m_territory_isSet) {
        obj.insert(QString("territory"), ::OpenAPI::toJsonValue(m_territory));
    }
    if (m_titles.isSet()) {
        obj.insert(QString("titles"), ::OpenAPI::toJsonValue(m_titles));
    }
    if (m_total_available_episodes_isSet) {
        obj.insert(QString("total_available_episodes"), ::OpenAPI::toJsonValue(m_total_available_episodes));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QList<OAICategorySummary> OAIPodcast::getCategorySummaries() const {
    return m_category_summaries;
}
void OAIPodcast::setCategorySummaries(const QList<OAICategorySummary> &category_summaries) {
    m_category_summaries = category_summaries;
    m_category_summaries_isSet = true;
}

bool OAIPodcast::is_category_summaries_Set() const{
    return m_category_summaries_isSet;
}

bool OAIPodcast::is_category_summaries_Valid() const{
    return m_category_summaries_isValid;
}

qint32 OAIPodcast::getDaysAvailable() const {
    return m_days_available;
}
void OAIPodcast::setDaysAvailable(const qint32 &days_available) {
    m_days_available = days_available;
    m_days_available_isSet = true;
}

bool OAIPodcast::is_days_available_Set() const{
    return m_days_available_isSet;
}

bool OAIPodcast::is_days_available_Valid() const{
    return m_days_available_isValid;
}

QString OAIPodcast::getEntityType() const {
    return m_entity_type;
}
void OAIPodcast::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIPodcast::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIPodcast::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIPodcast::getFirstPublishedDate() const {
    return m_first_published_date;
}
void OAIPodcast::setFirstPublishedDate(const QString &first_published_date) {
    m_first_published_date = first_published_date;
    m_first_published_date_isSet = true;
}

bool OAIPodcast::is_first_published_date_Set() const{
    return m_first_published_date_isSet;
}

bool OAIPodcast::is_first_published_date_Valid() const{
    return m_first_published_date_isValid;
}

QString OAIPodcast::getFrequency() const {
    return m_frequency;
}
void OAIPodcast::setFrequency(const QString &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIPodcast::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIPodcast::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QList<OAIImage> OAIPodcast::getImages() const {
    return m_images;
}
void OAIPodcast::setImages(const QList<OAIImage> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIPodcast::is_images_Set() const{
    return m_images_isSet;
}

bool OAIPodcast::is_images_Valid() const{
    return m_images_isValid;
}

QList<OAIPodcastEpisodeSummary> OAIPodcast::getLatestAvailableEpisodes() const {
    return m_latest_available_episodes;
}
void OAIPodcast::setLatestAvailableEpisodes(const QList<OAIPodcastEpisodeSummary> &latest_available_episodes) {
    m_latest_available_episodes = latest_available_episodes;
    m_latest_available_episodes_isSet = true;
}

bool OAIPodcast::is_latest_available_episodes_Set() const{
    return m_latest_available_episodes_isSet;
}

bool OAIPodcast::is_latest_available_episodes_Valid() const{
    return m_latest_available_episodes_isValid;
}

OAINetworkSummary OAIPodcast::getNetworkSummary() const {
    return m_network_summary;
}
void OAIPodcast::setNetworkSummary(const OAINetworkSummary &network_summary) {
    m_network_summary = network_summary;
    m_network_summary_isSet = true;
}

bool OAIPodcast::is_network_summary_Set() const{
    return m_network_summary_isSet;
}

bool OAIPodcast::is_network_summary_Valid() const{
    return m_network_summary_isValid;
}

QString OAIPodcast::getPid() const {
    return m_pid;
}
void OAIPodcast::setPid(const QString &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAIPodcast::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAIPodcast::is_pid_Valid() const{
    return m_pid_isValid;
}

QString OAIPodcast::getRssUrl() const {
    return m_rss_url;
}
void OAIPodcast::setRssUrl(const QString &rss_url) {
    m_rss_url = rss_url;
    m_rss_url_isSet = true;
}

bool OAIPodcast::is_rss_url_Set() const{
    return m_rss_url_isSet;
}

bool OAIPodcast::is_rss_url_Valid() const{
    return m_rss_url_isValid;
}

OAIPodcastSynopses OAIPodcast::getSynopses() const {
    return m_synopses;
}
void OAIPodcast::setSynopses(const OAIPodcastSynopses &synopses) {
    m_synopses = synopses;
    m_synopses_isSet = true;
}

bool OAIPodcast::is_synopses_Set() const{
    return m_synopses_isSet;
}

bool OAIPodcast::is_synopses_Valid() const{
    return m_synopses_isValid;
}

QString OAIPodcast::getTerritory() const {
    return m_territory;
}
void OAIPodcast::setTerritory(const QString &territory) {
    m_territory = territory;
    m_territory_isSet = true;
}

bool OAIPodcast::is_territory_Set() const{
    return m_territory_isSet;
}

bool OAIPodcast::is_territory_Valid() const{
    return m_territory_isValid;
}

OAIProgrammeTitles OAIPodcast::getTitles() const {
    return m_titles;
}
void OAIPodcast::setTitles(const OAIProgrammeTitles &titles) {
    m_titles = titles;
    m_titles_isSet = true;
}

bool OAIPodcast::is_titles_Set() const{
    return m_titles_isSet;
}

bool OAIPodcast::is_titles_Valid() const{
    return m_titles_isValid;
}

qint32 OAIPodcast::getTotalAvailableEpisodes() const {
    return m_total_available_episodes;
}
void OAIPodcast::setTotalAvailableEpisodes(const qint32 &total_available_episodes) {
    m_total_available_episodes = total_available_episodes;
    m_total_available_episodes_isSet = true;
}

bool OAIPodcast::is_total_available_episodes_Set() const{
    return m_total_available_episodes_isSet;
}

bool OAIPodcast::is_total_available_episodes_Valid() const{
    return m_total_available_episodes_isValid;
}

QString OAIPodcast::getType() const {
    return m_type;
}
void OAIPodcast::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPodcast::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPodcast::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPodcast::getUpdatedAt() const {
    return m_updated_at;
}
void OAIPodcast::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIPodcast::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIPodcast::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIPodcast::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_summaries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_days_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_published_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_available_episodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rss_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synopses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_territory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_titles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_available_episodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPodcast::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_category_summaries_isValid && m_days_available_isValid && m_entity_type_isValid && m_first_published_date_isValid && m_frequency_isValid && m_images_isValid && m_latest_available_episodes_isValid && m_network_summary_isValid && m_pid_isValid && m_rss_url_isValid && m_synopses_isValid && m_territory_isValid && m_titles_isValid && m_total_available_episodes_isValid && m_type_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
