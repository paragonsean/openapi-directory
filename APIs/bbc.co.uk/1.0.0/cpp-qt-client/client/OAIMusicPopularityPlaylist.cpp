/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMusicPopularityPlaylist.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMusicPopularityPlaylist::OAIMusicPopularityPlaylist(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMusicPopularityPlaylist::OAIMusicPopularityPlaylist() {
    this->initializeModel();
}

OAIMusicPopularityPlaylist::~OAIMusicPopularityPlaylist() {}

void OAIMusicPopularityPlaylist::initializeModel() {

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_comments_enabled_isSet = false;
    m_comments_enabled_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_external_partners_isSet = false;
    m_external_partners_isValid = false;

    m_genre_isSet = false;
    m_genre_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_pid_isSet = false;
    m_image_pid_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_mood_isSet = false;
    m_mood_isValid = false;

    m_one_off_isSet = false;
    m_one_off_isValid = false;

    m_playlist_playback_type_isSet = false;
    m_playlist_playback_type_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;

    m_wide_image_pid_isSet = false;
    m_wide_image_pid_isValid = false;

    m_wide_image_url_isSet = false;
    m_wide_image_url_isValid = false;
}

void OAIMusicPopularityPlaylist::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMusicPopularityPlaylist::fromJsonObject(QJsonObject json) {

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_comments_enabled_isValid = ::OpenAPI::fromJsonValue(m_comments_enabled, json[QString("commentsEnabled")]);
    m_comments_enabled_isSet = !json[QString("commentsEnabled")].isNull() && m_comments_enabled_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_external_partners_isValid = ::OpenAPI::fromJsonValue(m_external_partners, json[QString("externalPartners")]);
    m_external_partners_isSet = !json[QString("externalPartners")].isNull() && m_external_partners_isValid;

    m_genre_isValid = ::OpenAPI::fromJsonValue(m_genre, json[QString("genre")]);
    m_genre_isSet = !json[QString("genre")].isNull() && m_genre_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_pid_isValid = ::OpenAPI::fromJsonValue(m_image_pid, json[QString("imagePid")]);
    m_image_pid_isSet = !json[QString("imagePid")].isNull() && m_image_pid_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_mood_isValid = ::OpenAPI::fromJsonValue(m_mood, json[QString("mood")]);
    m_mood_isSet = !json[QString("mood")].isNull() && m_mood_isValid;

    m_one_off_isValid = ::OpenAPI::fromJsonValue(m_one_off, json[QString("oneOff")]);
    m_one_off_isSet = !json[QString("oneOff")].isNull() && m_one_off_isValid;

    m_playlist_playback_type_isValid = ::OpenAPI::fromJsonValue(m_playlist_playback_type, json[QString("playlistPlaybackType")]);
    m_playlist_playback_type_isSet = !json[QString("playlistPlaybackType")].isNull() && m_playlist_playback_type_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("serviceId")]);
    m_service_id_isSet = !json[QString("serviceId")].isNull() && m_service_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;

    m_wide_image_pid_isValid = ::OpenAPI::fromJsonValue(m_wide_image_pid, json[QString("wideImagePid")]);
    m_wide_image_pid_isSet = !json[QString("wideImagePid")].isNull() && m_wide_image_pid_isValid;

    m_wide_image_url_isValid = ::OpenAPI::fromJsonValue(m_wide_image_url, json[QString("wideImageUrl")]);
    m_wide_image_url_isSet = !json[QString("wideImageUrl")].isNull() && m_wide_image_url_isValid;
}

QString OAIMusicPopularityPlaylist::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMusicPopularityPlaylist::asJsonObject() const {
    QJsonObject obj;
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_comments_enabled_isSet) {
        obj.insert(QString("commentsEnabled"), ::OpenAPI::toJsonValue(m_comments_enabled));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_external_partners.size() > 0) {
        obj.insert(QString("externalPartners"), ::OpenAPI::toJsonValue(m_external_partners));
    }
    if (m_genre_isSet) {
        obj.insert(QString("genre"), ::OpenAPI::toJsonValue(m_genre));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_pid_isSet) {
        obj.insert(QString("imagePid"), ::OpenAPI::toJsonValue(m_image_pid));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_mood_isSet) {
        obj.insert(QString("mood"), ::OpenAPI::toJsonValue(m_mood));
    }
    if (m_one_off_isSet) {
        obj.insert(QString("oneOff"), ::OpenAPI::toJsonValue(m_one_off));
    }
    if (m_playlist_playback_type_isSet) {
        obj.insert(QString("playlistPlaybackType"), ::OpenAPI::toJsonValue(m_playlist_playback_type));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("serviceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    if (m_wide_image_pid_isSet) {
        obj.insert(QString("wideImagePid"), ::OpenAPI::toJsonValue(m_wide_image_pid));
    }
    if (m_wide_image_url_isSet) {
        obj.insert(QString("wideImageUrl"), ::OpenAPI::toJsonValue(m_wide_image_url));
    }
    return obj;
}

QList<QString> OAIMusicPopularityPlaylist::getCategories() const {
    return m_categories;
}
void OAIMusicPopularityPlaylist::setCategories(const QList<QString> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIMusicPopularityPlaylist::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIMusicPopularityPlaylist::is_categories_Valid() const{
    return m_categories_isValid;
}

bool OAIMusicPopularityPlaylist::isCommentsEnabled() const {
    return m_comments_enabled;
}
void OAIMusicPopularityPlaylist::setCommentsEnabled(const bool &comments_enabled) {
    m_comments_enabled = comments_enabled;
    m_comments_enabled_isSet = true;
}

bool OAIMusicPopularityPlaylist::is_comments_enabled_Set() const{
    return m_comments_enabled_isSet;
}

bool OAIMusicPopularityPlaylist::is_comments_enabled_Valid() const{
    return m_comments_enabled_isValid;
}

QString OAIMusicPopularityPlaylist::getDescription() const {
    return m_description;
}
void OAIMusicPopularityPlaylist::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMusicPopularityPlaylist::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMusicPopularityPlaylist::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIExternalPartner> OAIMusicPopularityPlaylist::getExternalPartners() const {
    return m_external_partners;
}
void OAIMusicPopularityPlaylist::setExternalPartners(const QList<OAIExternalPartner> &external_partners) {
    m_external_partners = external_partners;
    m_external_partners_isSet = true;
}

bool OAIMusicPopularityPlaylist::is_external_partners_Set() const{
    return m_external_partners_isSet;
}

bool OAIMusicPopularityPlaylist::is_external_partners_Valid() const{
    return m_external_partners_isValid;
}

QString OAIMusicPopularityPlaylist::getGenre() const {
    return m_genre;
}
void OAIMusicPopularityPlaylist::setGenre(const QString &genre) {
    m_genre = genre;
    m_genre_isSet = true;
}

bool OAIMusicPopularityPlaylist::is_genre_Set() const{
    return m_genre_isSet;
}

bool OAIMusicPopularityPlaylist::is_genre_Valid() const{
    return m_genre_isValid;
}

QString OAIMusicPopularityPlaylist::getId() const {
    return m_id;
}
void OAIMusicPopularityPlaylist::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMusicPopularityPlaylist::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMusicPopularityPlaylist::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMusicPopularityPlaylist::getImagePid() const {
    return m_image_pid;
}
void OAIMusicPopularityPlaylist::setImagePid(const QString &image_pid) {
    m_image_pid = image_pid;
    m_image_pid_isSet = true;
}

bool OAIMusicPopularityPlaylist::is_image_pid_Set() const{
    return m_image_pid_isSet;
}

bool OAIMusicPopularityPlaylist::is_image_pid_Valid() const{
    return m_image_pid_isValid;
}

QString OAIMusicPopularityPlaylist::getImageUrl() const {
    return m_image_url;
}
void OAIMusicPopularityPlaylist::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIMusicPopularityPlaylist::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIMusicPopularityPlaylist::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAIMusicPopularityPlaylist::getKind() const {
    return m_kind;
}
void OAIMusicPopularityPlaylist::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIMusicPopularityPlaylist::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIMusicPopularityPlaylist::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIMusicPopularityPlaylist::getMood() const {
    return m_mood;
}
void OAIMusicPopularityPlaylist::setMood(const QString &mood) {
    m_mood = mood;
    m_mood_isSet = true;
}

bool OAIMusicPopularityPlaylist::is_mood_Set() const{
    return m_mood_isSet;
}

bool OAIMusicPopularityPlaylist::is_mood_Valid() const{
    return m_mood_isValid;
}

bool OAIMusicPopularityPlaylist::isOneOff() const {
    return m_one_off;
}
void OAIMusicPopularityPlaylist::setOneOff(const bool &one_off) {
    m_one_off = one_off;
    m_one_off_isSet = true;
}

bool OAIMusicPopularityPlaylist::is_one_off_Set() const{
    return m_one_off_isSet;
}

bool OAIMusicPopularityPlaylist::is_one_off_Valid() const{
    return m_one_off_isValid;
}

QString OAIMusicPopularityPlaylist::getPlaylistPlaybackType() const {
    return m_playlist_playback_type;
}
void OAIMusicPopularityPlaylist::setPlaylistPlaybackType(const QString &playlist_playback_type) {
    m_playlist_playback_type = playlist_playback_type;
    m_playlist_playback_type_isSet = true;
}

bool OAIMusicPopularityPlaylist::is_playlist_playback_type_Set() const{
    return m_playlist_playback_type_isSet;
}

bool OAIMusicPopularityPlaylist::is_playlist_playback_type_Valid() const{
    return m_playlist_playback_type_isValid;
}

qint32 OAIMusicPopularityPlaylist::getScore() const {
    return m_score;
}
void OAIMusicPopularityPlaylist::setScore(const qint32 &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIMusicPopularityPlaylist::is_score_Set() const{
    return m_score_isSet;
}

bool OAIMusicPopularityPlaylist::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIMusicPopularityPlaylist::getServiceId() const {
    return m_service_id;
}
void OAIMusicPopularityPlaylist::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIMusicPopularityPlaylist::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIMusicPopularityPlaylist::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAIMusicPopularityPlaylist::getTitle() const {
    return m_title;
}
void OAIMusicPopularityPlaylist::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIMusicPopularityPlaylist::is_title_Set() const{
    return m_title_isSet;
}

bool OAIMusicPopularityPlaylist::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIMusicPopularityPlaylist::getUpdatedAt() const {
    return m_updated_at;
}
void OAIMusicPopularityPlaylist::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIMusicPopularityPlaylist::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIMusicPopularityPlaylist::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIMusicPopularityPlaylist::getVisibility() const {
    return m_visibility;
}
void OAIMusicPopularityPlaylist::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIMusicPopularityPlaylist::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIMusicPopularityPlaylist::is_visibility_Valid() const{
    return m_visibility_isValid;
}

QString OAIMusicPopularityPlaylist::getWideImagePid() const {
    return m_wide_image_pid;
}
void OAIMusicPopularityPlaylist::setWideImagePid(const QString &wide_image_pid) {
    m_wide_image_pid = wide_image_pid;
    m_wide_image_pid_isSet = true;
}

bool OAIMusicPopularityPlaylist::is_wide_image_pid_Set() const{
    return m_wide_image_pid_isSet;
}

bool OAIMusicPopularityPlaylist::is_wide_image_pid_Valid() const{
    return m_wide_image_pid_isValid;
}

QString OAIMusicPopularityPlaylist::getWideImageUrl() const {
    return m_wide_image_url;
}
void OAIMusicPopularityPlaylist::setWideImageUrl(const QString &wide_image_url) {
    m_wide_image_url = wide_image_url;
    m_wide_image_url_isSet = true;
}

bool OAIMusicPopularityPlaylist::is_wide_image_url_Set() const{
    return m_wide_image_url_isSet;
}

bool OAIMusicPopularityPlaylist::is_wide_image_url_Valid() const{
    return m_wide_image_url_isValid;
}

bool OAIMusicPopularityPlaylist::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_partners.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_genre_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mood_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_one_off_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playlist_playback_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wide_image_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wide_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMusicPopularityPlaylist::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_categories_isValid && m_comments_enabled_isValid && m_description_isValid && m_external_partners_isValid && m_genre_isValid && m_id_isValid && m_image_pid_isValid && m_image_url_isValid && m_kind_isValid && m_mood_isValid && m_one_off_isValid && m_playlist_playback_type_isValid && m_score_isValid && m_service_id_isValid && m_title_isValid && m_updated_at_isValid && m_visibility_isValid && m_wide_image_pid_isValid && m_wide_image_url_isValid && true;
}

} // namespace OpenAPI
