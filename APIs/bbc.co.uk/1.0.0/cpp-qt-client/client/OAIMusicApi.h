/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMusicApi_H
#define OAI_OAIMusicApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIMusicPopularityArtists.h"
#include "OAIMusicPopularityError.h"
#include "OAIMusicPopularityPlaylists.h"
#include "OAIMusicPopularityTracks.h"
#include "OAIPersonalisedMusicBatchRequest.h"
#include "OAIPersonalisedMusicErrorResponse.h"
#include "OAIPersonalisedMusicRequest.h"
#include "OAIPersonalisedMusicResponse.h"
#include "OAIPersonalisedMusicSuccess.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMusicApi : public QObject {
    Q_OBJECT

public:
    OAIMusicApi(const int timeOut = 0);
    ~OAIMusicApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    */
    virtual void deletePersonalisedMusicFavouritesByTypeById(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QString &type, const QString &id);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  music_data bool [optional]
    * @param[in]  music_context QString [optional]
    * @param[in]  music_within_uk bool [optional]
    */
    virtual void deletePersonalisedMusicFollowsByTypeById(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QString &type, const QString &id, const ::OpenAPI::OptionalParam<bool> &music_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &music_context = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &music_within_uk = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  id QString [required]
    * @param[in]  since QString [optional]
    * @param[in]  until QString [optional]
    * @param[in]  decomposed bool [optional]
    */
    virtual void getMusicPopularArtistById(const QString &x_api_key, const QString &id, const ::OpenAPI::OptionalParam<QString> &since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &until = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &decomposed = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  since QString [optional]
    * @param[in]  until QString [optional]
    * @param[in]  decomposed bool [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getMusicPopularArtists(const QString &x_api_key, const ::OpenAPI::OptionalParam<QString> &since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &until = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &decomposed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  id QString [required]
    * @param[in]  since QString [optional]
    * @param[in]  until QString [optional]
    * @param[in]  decomposed bool [optional]
    */
    virtual void getMusicPopularPlaylistById(const QString &x_api_key, const QString &id, const ::OpenAPI::OptionalParam<QString> &since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &until = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &decomposed = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  since QString [optional]
    * @param[in]  until QString [optional]
    * @param[in]  decomposed bool [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getMusicPopularPlaylists(const QString &x_api_key, const ::OpenAPI::OptionalParam<QString> &since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &until = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &decomposed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  id QString [required]
    * @param[in]  since QString [optional]
    * @param[in]  until QString [optional]
    * @param[in]  network QString [optional]
    * @param[in]  programme QString [optional]
    * @param[in]  artist QString [optional]
    * @param[in]  decomposed bool [optional]
    */
    virtual void getMusicPopularTrackById(const QString &x_api_key, const QString &id, const ::OpenAPI::OptionalParam<QString> &since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &until = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &network = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &programme = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &artist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &decomposed = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  since QString [optional]
    * @param[in]  until QString [optional]
    * @param[in]  network QString [optional]
    * @param[in]  programme QString [optional]
    * @param[in]  artist QString [optional]
    * @param[in]  decomposed bool [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getMusicPopularTracks(const QString &x_api_key, const ::OpenAPI::OptionalParam<QString> &since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &until = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &network = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &programme = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &artist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &decomposed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  action QString [optional]
    * @param[in]  music_data bool [optional]
    */
    virtual void getPersonalisedMusicFavourites(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &music_data = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  type QString [required]
    * @param[in]  action QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getPersonalisedMusicFavouritesByType(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QString &type, const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getPersonalisedMusicFavouritesByTypeById(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QString &type, const QString &id);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  action QString [optional]
    * @param[in]  music_data bool [optional]
    * @param[in]  music_context QString [optional]
    * @param[in]  music_within_uk bool [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getPersonalisedMusicFollows(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &music_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &music_context = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &music_within_uk = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  type QString [required]
    * @param[in]  action QString [optional]
    * @param[in]  music_data bool [optional]
    * @param[in]  music_context QString [optional]
    * @param[in]  music_within_uk bool [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getPersonalisedMusicFollowsByType(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QString &type, const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &music_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &music_context = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &music_within_uk = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  music_data bool [optional]
    * @param[in]  music_context QString [optional]
    * @param[in]  music_within_uk bool [optional]
    */
    virtual void getPersonalisedMusicFollowsByTypeById(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QString &type, const QString &id, const ::OpenAPI::OptionalParam<bool> &music_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &music_context = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &music_within_uk = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  body QList<OAIPersonalisedMusicBatchRequest> [required]
    */
    virtual void postPersonalisedMusicFavouritesBatch(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QList<OAIPersonalisedMusicBatchRequest> &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  body OAIPersonalisedMusicRequest [required]
    */
    virtual void postPersonalisedMusicFavouritesByTypeById(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QString &type, const QString &id, const OAIPersonalisedMusicRequest &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  body QList<OAIPersonalisedMusicBatchRequest> [required]
    * @param[in]  action QString [optional]
    * @param[in]  music_data bool [optional]
    * @param[in]  music_context QString [optional]
    * @param[in]  music_within_uk bool [optional]
    */
    virtual void postPersonalisedMusicFollowsBatch(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QList<OAIPersonalisedMusicBatchRequest> &body, const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &music_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &music_context = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &music_within_uk = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  body OAIPersonalisedMusicRequest [required]
    * @param[in]  music_data bool [optional]
    * @param[in]  music_context QString [optional]
    * @param[in]  music_within_uk bool [optional]
    */
    virtual void postPersonalisedMusicFollowsByTypeById(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QString &type, const QString &id, const OAIPersonalisedMusicRequest &body, const ::OpenAPI::OptionalParam<bool> &music_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &music_context = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &music_within_uk = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  body QList<OAIPersonalisedMusicBatchRequest> [required]
    */
    virtual void putPersonalisedMusicFavouritesBatch(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QList<OAIPersonalisedMusicBatchRequest> &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  body OAIPersonalisedMusicRequest [required]
    */
    virtual void putPersonalisedMusicFavouritesByTypeById(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QString &type, const QString &id, const OAIPersonalisedMusicRequest &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  body QList<OAIPersonalisedMusicBatchRequest> [required]
    * @param[in]  action QString [optional]
    * @param[in]  music_data bool [optional]
    * @param[in]  music_context QString [optional]
    * @param[in]  music_within_uk bool [optional]
    */
    virtual void putPersonalisedMusicFollowsBatch(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QList<OAIPersonalisedMusicBatchRequest> &body, const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &music_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &music_context = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &music_within_uk = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  body OAIPersonalisedMusicRequest [required]
    * @param[in]  music_data bool [optional]
    * @param[in]  music_context QString [optional]
    * @param[in]  music_within_uk bool [optional]
    */
    virtual void putPersonalisedMusicFollowsByTypeById(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QString &type, const QString &id, const OAIPersonalisedMusicRequest &body, const ::OpenAPI::OptionalParam<bool> &music_data = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &music_context = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &music_within_uk = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deletePersonalisedMusicFavouritesByTypeByIdCallback(OAIHttpRequestWorker *worker);
    void deletePersonalisedMusicFollowsByTypeByIdCallback(OAIHttpRequestWorker *worker);
    void getMusicPopularArtistByIdCallback(OAIHttpRequestWorker *worker);
    void getMusicPopularArtistsCallback(OAIHttpRequestWorker *worker);
    void getMusicPopularPlaylistByIdCallback(OAIHttpRequestWorker *worker);
    void getMusicPopularPlaylistsCallback(OAIHttpRequestWorker *worker);
    void getMusicPopularTrackByIdCallback(OAIHttpRequestWorker *worker);
    void getMusicPopularTracksCallback(OAIHttpRequestWorker *worker);
    void getPersonalisedMusicFavouritesCallback(OAIHttpRequestWorker *worker);
    void getPersonalisedMusicFavouritesByTypeCallback(OAIHttpRequestWorker *worker);
    void getPersonalisedMusicFavouritesByTypeByIdCallback(OAIHttpRequestWorker *worker);
    void getPersonalisedMusicFollowsCallback(OAIHttpRequestWorker *worker);
    void getPersonalisedMusicFollowsByTypeCallback(OAIHttpRequestWorker *worker);
    void getPersonalisedMusicFollowsByTypeByIdCallback(OAIHttpRequestWorker *worker);
    void postPersonalisedMusicFavouritesBatchCallback(OAIHttpRequestWorker *worker);
    void postPersonalisedMusicFavouritesByTypeByIdCallback(OAIHttpRequestWorker *worker);
    void postPersonalisedMusicFollowsBatchCallback(OAIHttpRequestWorker *worker);
    void postPersonalisedMusicFollowsByTypeByIdCallback(OAIHttpRequestWorker *worker);
    void putPersonalisedMusicFavouritesBatchCallback(OAIHttpRequestWorker *worker);
    void putPersonalisedMusicFavouritesByTypeByIdCallback(OAIHttpRequestWorker *worker);
    void putPersonalisedMusicFollowsBatchCallback(OAIHttpRequestWorker *worker);
    void putPersonalisedMusicFollowsByTypeByIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deletePersonalisedMusicFavouritesByTypeByIdSignal(OAIPersonalisedMusicSuccess summary);
    void deletePersonalisedMusicFollowsByTypeByIdSignal(OAIPersonalisedMusicSuccess summary);
    void getMusicPopularArtistByIdSignal(OAIMusicPopularityArtists summary);
    void getMusicPopularArtistsSignal(OAIMusicPopularityArtists summary);
    void getMusicPopularPlaylistByIdSignal(OAIMusicPopularityPlaylists summary);
    void getMusicPopularPlaylistsSignal(OAIMusicPopularityPlaylists summary);
    void getMusicPopularTrackByIdSignal(OAIMusicPopularityTracks summary);
    void getMusicPopularTracksSignal(OAIMusicPopularityTracks summary);
    void getPersonalisedMusicFavouritesSignal(OAIPersonalisedMusicResponse summary);
    void getPersonalisedMusicFavouritesByTypeSignal(OAIPersonalisedMusicResponse summary);
    void getPersonalisedMusicFavouritesByTypeByIdSignal(OAIPersonalisedMusicResponse summary);
    void getPersonalisedMusicFollowsSignal(OAIPersonalisedMusicResponse summary);
    void getPersonalisedMusicFollowsByTypeSignal(OAIPersonalisedMusicResponse summary);
    void getPersonalisedMusicFollowsByTypeByIdSignal(OAIPersonalisedMusicResponse summary);
    void postPersonalisedMusicFavouritesBatchSignal(OAIPersonalisedMusicResponse summary);
    void postPersonalisedMusicFavouritesByTypeByIdSignal(OAIPersonalisedMusicResponse summary);
    void postPersonalisedMusicFollowsBatchSignal(OAIPersonalisedMusicSuccess summary);
    void postPersonalisedMusicFollowsByTypeByIdSignal(OAIPersonalisedMusicSuccess summary);
    void putPersonalisedMusicFavouritesBatchSignal(OAIPersonalisedMusicSuccess summary);
    void putPersonalisedMusicFavouritesByTypeByIdSignal(OAIPersonalisedMusicSuccess summary);
    void putPersonalisedMusicFollowsBatchSignal(OAIPersonalisedMusicSuccess summary);
    void putPersonalisedMusicFollowsByTypeByIdSignal(OAIPersonalisedMusicSuccess summary);


    void deletePersonalisedMusicFavouritesByTypeByIdSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedMusicSuccess summary);
    void deletePersonalisedMusicFollowsByTypeByIdSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedMusicSuccess summary);
    void getMusicPopularArtistByIdSignalFull(OAIHttpRequestWorker *worker, OAIMusicPopularityArtists summary);
    void getMusicPopularArtistsSignalFull(OAIHttpRequestWorker *worker, OAIMusicPopularityArtists summary);
    void getMusicPopularPlaylistByIdSignalFull(OAIHttpRequestWorker *worker, OAIMusicPopularityPlaylists summary);
    void getMusicPopularPlaylistsSignalFull(OAIHttpRequestWorker *worker, OAIMusicPopularityPlaylists summary);
    void getMusicPopularTrackByIdSignalFull(OAIHttpRequestWorker *worker, OAIMusicPopularityTracks summary);
    void getMusicPopularTracksSignalFull(OAIHttpRequestWorker *worker, OAIMusicPopularityTracks summary);
    void getPersonalisedMusicFavouritesSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedMusicResponse summary);
    void getPersonalisedMusicFavouritesByTypeSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedMusicResponse summary);
    void getPersonalisedMusicFavouritesByTypeByIdSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedMusicResponse summary);
    void getPersonalisedMusicFollowsSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedMusicResponse summary);
    void getPersonalisedMusicFollowsByTypeSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedMusicResponse summary);
    void getPersonalisedMusicFollowsByTypeByIdSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedMusicResponse summary);
    void postPersonalisedMusicFavouritesBatchSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedMusicResponse summary);
    void postPersonalisedMusicFavouritesByTypeByIdSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedMusicResponse summary);
    void postPersonalisedMusicFollowsBatchSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedMusicSuccess summary);
    void postPersonalisedMusicFollowsByTypeByIdSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedMusicSuccess summary);
    void putPersonalisedMusicFavouritesBatchSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedMusicSuccess summary);
    void putPersonalisedMusicFavouritesByTypeByIdSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedMusicSuccess summary);
    void putPersonalisedMusicFollowsBatchSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedMusicSuccess summary);
    void putPersonalisedMusicFollowsByTypeByIdSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedMusicSuccess summary);

    Q_DECL_DEPRECATED_X("Use deletePersonalisedMusicFavouritesByTypeByIdSignalError() instead")
    void deletePersonalisedMusicFavouritesByTypeByIdSignalE(OAIPersonalisedMusicSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePersonalisedMusicFavouritesByTypeByIdSignalError(OAIPersonalisedMusicSuccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePersonalisedMusicFollowsByTypeByIdSignalError() instead")
    void deletePersonalisedMusicFollowsByTypeByIdSignalE(OAIPersonalisedMusicSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePersonalisedMusicFollowsByTypeByIdSignalError(OAIPersonalisedMusicSuccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicPopularArtistByIdSignalError() instead")
    void getMusicPopularArtistByIdSignalE(OAIMusicPopularityArtists summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicPopularArtistByIdSignalError(OAIMusicPopularityArtists summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicPopularArtistsSignalError() instead")
    void getMusicPopularArtistsSignalE(OAIMusicPopularityArtists summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicPopularArtistsSignalError(OAIMusicPopularityArtists summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicPopularPlaylistByIdSignalError() instead")
    void getMusicPopularPlaylistByIdSignalE(OAIMusicPopularityPlaylists summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicPopularPlaylistByIdSignalError(OAIMusicPopularityPlaylists summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicPopularPlaylistsSignalError() instead")
    void getMusicPopularPlaylistsSignalE(OAIMusicPopularityPlaylists summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicPopularPlaylistsSignalError(OAIMusicPopularityPlaylists summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicPopularTrackByIdSignalError() instead")
    void getMusicPopularTrackByIdSignalE(OAIMusicPopularityTracks summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicPopularTrackByIdSignalError(OAIMusicPopularityTracks summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicPopularTracksSignalError() instead")
    void getMusicPopularTracksSignalE(OAIMusicPopularityTracks summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicPopularTracksSignalError(OAIMusicPopularityTracks summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonalisedMusicFavouritesSignalError() instead")
    void getPersonalisedMusicFavouritesSignalE(OAIPersonalisedMusicResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonalisedMusicFavouritesSignalError(OAIPersonalisedMusicResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonalisedMusicFavouritesByTypeSignalError() instead")
    void getPersonalisedMusicFavouritesByTypeSignalE(OAIPersonalisedMusicResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonalisedMusicFavouritesByTypeSignalError(OAIPersonalisedMusicResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonalisedMusicFavouritesByTypeByIdSignalError() instead")
    void getPersonalisedMusicFavouritesByTypeByIdSignalE(OAIPersonalisedMusicResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonalisedMusicFavouritesByTypeByIdSignalError(OAIPersonalisedMusicResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonalisedMusicFollowsSignalError() instead")
    void getPersonalisedMusicFollowsSignalE(OAIPersonalisedMusicResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonalisedMusicFollowsSignalError(OAIPersonalisedMusicResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonalisedMusicFollowsByTypeSignalError() instead")
    void getPersonalisedMusicFollowsByTypeSignalE(OAIPersonalisedMusicResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonalisedMusicFollowsByTypeSignalError(OAIPersonalisedMusicResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonalisedMusicFollowsByTypeByIdSignalError() instead")
    void getPersonalisedMusicFollowsByTypeByIdSignalE(OAIPersonalisedMusicResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonalisedMusicFollowsByTypeByIdSignalError(OAIPersonalisedMusicResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPersonalisedMusicFavouritesBatchSignalError() instead")
    void postPersonalisedMusicFavouritesBatchSignalE(OAIPersonalisedMusicResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPersonalisedMusicFavouritesBatchSignalError(OAIPersonalisedMusicResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPersonalisedMusicFavouritesByTypeByIdSignalError() instead")
    void postPersonalisedMusicFavouritesByTypeByIdSignalE(OAIPersonalisedMusicResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPersonalisedMusicFavouritesByTypeByIdSignalError(OAIPersonalisedMusicResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPersonalisedMusicFollowsBatchSignalError() instead")
    void postPersonalisedMusicFollowsBatchSignalE(OAIPersonalisedMusicSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPersonalisedMusicFollowsBatchSignalError(OAIPersonalisedMusicSuccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPersonalisedMusicFollowsByTypeByIdSignalError() instead")
    void postPersonalisedMusicFollowsByTypeByIdSignalE(OAIPersonalisedMusicSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPersonalisedMusicFollowsByTypeByIdSignalError(OAIPersonalisedMusicSuccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPersonalisedMusicFavouritesBatchSignalError() instead")
    void putPersonalisedMusicFavouritesBatchSignalE(OAIPersonalisedMusicSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putPersonalisedMusicFavouritesBatchSignalError(OAIPersonalisedMusicSuccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPersonalisedMusicFavouritesByTypeByIdSignalError() instead")
    void putPersonalisedMusicFavouritesByTypeByIdSignalE(OAIPersonalisedMusicSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putPersonalisedMusicFavouritesByTypeByIdSignalError(OAIPersonalisedMusicSuccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPersonalisedMusicFollowsBatchSignalError() instead")
    void putPersonalisedMusicFollowsBatchSignalE(OAIPersonalisedMusicSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putPersonalisedMusicFollowsBatchSignalError(OAIPersonalisedMusicSuccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPersonalisedMusicFollowsByTypeByIdSignalError() instead")
    void putPersonalisedMusicFollowsByTypeByIdSignalE(OAIPersonalisedMusicSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putPersonalisedMusicFollowsByTypeByIdSignalError(OAIPersonalisedMusicSuccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deletePersonalisedMusicFavouritesByTypeByIdSignalErrorFull() instead")
    void deletePersonalisedMusicFavouritesByTypeByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePersonalisedMusicFavouritesByTypeByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePersonalisedMusicFollowsByTypeByIdSignalErrorFull() instead")
    void deletePersonalisedMusicFollowsByTypeByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePersonalisedMusicFollowsByTypeByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicPopularArtistByIdSignalErrorFull() instead")
    void getMusicPopularArtistByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicPopularArtistByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicPopularArtistsSignalErrorFull() instead")
    void getMusicPopularArtistsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicPopularArtistsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicPopularPlaylistByIdSignalErrorFull() instead")
    void getMusicPopularPlaylistByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicPopularPlaylistByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicPopularPlaylistsSignalErrorFull() instead")
    void getMusicPopularPlaylistsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicPopularPlaylistsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicPopularTrackByIdSignalErrorFull() instead")
    void getMusicPopularTrackByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicPopularTrackByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicPopularTracksSignalErrorFull() instead")
    void getMusicPopularTracksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicPopularTracksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonalisedMusicFavouritesSignalErrorFull() instead")
    void getPersonalisedMusicFavouritesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonalisedMusicFavouritesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonalisedMusicFavouritesByTypeSignalErrorFull() instead")
    void getPersonalisedMusicFavouritesByTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonalisedMusicFavouritesByTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonalisedMusicFavouritesByTypeByIdSignalErrorFull() instead")
    void getPersonalisedMusicFavouritesByTypeByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonalisedMusicFavouritesByTypeByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonalisedMusicFollowsSignalErrorFull() instead")
    void getPersonalisedMusicFollowsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonalisedMusicFollowsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonalisedMusicFollowsByTypeSignalErrorFull() instead")
    void getPersonalisedMusicFollowsByTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonalisedMusicFollowsByTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonalisedMusicFollowsByTypeByIdSignalErrorFull() instead")
    void getPersonalisedMusicFollowsByTypeByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonalisedMusicFollowsByTypeByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPersonalisedMusicFavouritesBatchSignalErrorFull() instead")
    void postPersonalisedMusicFavouritesBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPersonalisedMusicFavouritesBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPersonalisedMusicFavouritesByTypeByIdSignalErrorFull() instead")
    void postPersonalisedMusicFavouritesByTypeByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPersonalisedMusicFavouritesByTypeByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPersonalisedMusicFollowsBatchSignalErrorFull() instead")
    void postPersonalisedMusicFollowsBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPersonalisedMusicFollowsBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPersonalisedMusicFollowsByTypeByIdSignalErrorFull() instead")
    void postPersonalisedMusicFollowsByTypeByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPersonalisedMusicFollowsByTypeByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPersonalisedMusicFavouritesBatchSignalErrorFull() instead")
    void putPersonalisedMusicFavouritesBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putPersonalisedMusicFavouritesBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPersonalisedMusicFavouritesByTypeByIdSignalErrorFull() instead")
    void putPersonalisedMusicFavouritesByTypeByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putPersonalisedMusicFavouritesByTypeByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPersonalisedMusicFollowsBatchSignalErrorFull() instead")
    void putPersonalisedMusicFollowsBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putPersonalisedMusicFollowsBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPersonalisedMusicFollowsByTypeByIdSignalErrorFull() instead")
    void putPersonalisedMusicFollowsByTypeByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putPersonalisedMusicFollowsByTypeByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
