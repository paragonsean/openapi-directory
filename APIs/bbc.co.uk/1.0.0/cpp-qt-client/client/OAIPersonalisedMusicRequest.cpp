/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPersonalisedMusicRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPersonalisedMusicRequest::OAIPersonalisedMusicRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPersonalisedMusicRequest::OAIPersonalisedMusicRequest() {
    this->initializeModel();
}

OAIPersonalisedMusicRequest::~OAIPersonalisedMusicRequest() {}

void OAIPersonalisedMusicRequest::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_added_at_isSet = false;
    m_added_at_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_meta_data_isSet = false;
    m_meta_data_isValid = false;
}

void OAIPersonalisedMusicRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPersonalisedMusicRequest::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_added_at_isValid = ::OpenAPI::fromJsonValue(m_added_at, json[QString("added_at")]);
    m_added_at_isSet = !json[QString("added_at")].isNull() && m_added_at_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_meta_data_isValid = ::OpenAPI::fromJsonValue(m_meta_data, json[QString("meta_data")]);
    m_meta_data_isSet = !json[QString("meta_data")].isNull() && m_meta_data_isValid;
}

QString OAIPersonalisedMusicRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPersonalisedMusicRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_added_at_isSet) {
        obj.insert(QString("added_at"), ::OpenAPI::toJsonValue(m_added_at));
    }
    if (m_context_isSet) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_meta_data.isSet()) {
        obj.insert(QString("meta_data"), ::OpenAPI::toJsonValue(m_meta_data));
    }
    return obj;
}

QString OAIPersonalisedMusicRequest::getAction() const {
    return m_action;
}
void OAIPersonalisedMusicRequest::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIPersonalisedMusicRequest::is_action_Set() const{
    return m_action_isSet;
}

bool OAIPersonalisedMusicRequest::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIPersonalisedMusicRequest::getAddedAt() const {
    return m_added_at;
}
void OAIPersonalisedMusicRequest::setAddedAt(const QString &added_at) {
    m_added_at = added_at;
    m_added_at_isSet = true;
}

bool OAIPersonalisedMusicRequest::is_added_at_Set() const{
    return m_added_at_isSet;
}

bool OAIPersonalisedMusicRequest::is_added_at_Valid() const{
    return m_added_at_isValid;
}

QString OAIPersonalisedMusicRequest::getContext() const {
    return m_context;
}
void OAIPersonalisedMusicRequest::setContext(const QString &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIPersonalisedMusicRequest::is_context_Set() const{
    return m_context_isSet;
}

bool OAIPersonalisedMusicRequest::is_context_Valid() const{
    return m_context_isValid;
}

OAIPersonalisedMusicMetaData OAIPersonalisedMusicRequest::getMetaData() const {
    return m_meta_data;
}
void OAIPersonalisedMusicRequest::setMetaData(const OAIPersonalisedMusicMetaData &meta_data) {
    m_meta_data = meta_data;
    m_meta_data_isSet = true;
}

bool OAIPersonalisedMusicRequest::is_meta_data_Set() const{
    return m_meta_data_isSet;
}

bool OAIPersonalisedMusicRequest::is_meta_data_Valid() const{
    return m_meta_data_isValid;
}

bool OAIPersonalisedMusicRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_added_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPersonalisedMusicRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && true;
}

} // namespace OpenAPI
