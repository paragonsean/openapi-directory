/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPersonalisedMusicBatchRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPersonalisedMusicBatchRequest::OAIPersonalisedMusicBatchRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPersonalisedMusicBatchRequest::OAIPersonalisedMusicBatchRequest() {
    this->initializeModel();
}

OAIPersonalisedMusicBatchRequest::~OAIPersonalisedMusicBatchRequest() {}

void OAIPersonalisedMusicBatchRequest::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_added_at_isSet = false;
    m_added_at_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_meta_data_isSet = false;
    m_meta_data_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPersonalisedMusicBatchRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPersonalisedMusicBatchRequest::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_added_at_isValid = ::OpenAPI::fromJsonValue(m_added_at, json[QString("added_at")]);
    m_added_at_isSet = !json[QString("added_at")].isNull() && m_added_at_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_meta_data_isValid = ::OpenAPI::fromJsonValue(m_meta_data, json[QString("meta_data")]);
    m_meta_data_isSet = !json[QString("meta_data")].isNull() && m_meta_data_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPersonalisedMusicBatchRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPersonalisedMusicBatchRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_added_at_isSet) {
        obj.insert(QString("added_at"), ::OpenAPI::toJsonValue(m_added_at));
    }
    if (m_context_isSet) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_meta_data.isSet()) {
        obj.insert(QString("meta_data"), ::OpenAPI::toJsonValue(m_meta_data));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIPersonalisedMusicBatchRequest::getAction() const {
    return m_action;
}
void OAIPersonalisedMusicBatchRequest::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIPersonalisedMusicBatchRequest::is_action_Set() const{
    return m_action_isSet;
}

bool OAIPersonalisedMusicBatchRequest::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIPersonalisedMusicBatchRequest::getAddedAt() const {
    return m_added_at;
}
void OAIPersonalisedMusicBatchRequest::setAddedAt(const QString &added_at) {
    m_added_at = added_at;
    m_added_at_isSet = true;
}

bool OAIPersonalisedMusicBatchRequest::is_added_at_Set() const{
    return m_added_at_isSet;
}

bool OAIPersonalisedMusicBatchRequest::is_added_at_Valid() const{
    return m_added_at_isValid;
}

QString OAIPersonalisedMusicBatchRequest::getContext() const {
    return m_context;
}
void OAIPersonalisedMusicBatchRequest::setContext(const QString &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIPersonalisedMusicBatchRequest::is_context_Set() const{
    return m_context_isSet;
}

bool OAIPersonalisedMusicBatchRequest::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIPersonalisedMusicBatchRequest::getDomain() const {
    return m_domain;
}
void OAIPersonalisedMusicBatchRequest::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIPersonalisedMusicBatchRequest::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIPersonalisedMusicBatchRequest::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIPersonalisedMusicBatchRequest::getId() const {
    return m_id;
}
void OAIPersonalisedMusicBatchRequest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPersonalisedMusicBatchRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPersonalisedMusicBatchRequest::is_id_Valid() const{
    return m_id_isValid;
}

OAIPersonalisedMusicMetaData OAIPersonalisedMusicBatchRequest::getMetaData() const {
    return m_meta_data;
}
void OAIPersonalisedMusicBatchRequest::setMetaData(const OAIPersonalisedMusicMetaData &meta_data) {
    m_meta_data = meta_data;
    m_meta_data_isSet = true;
}

bool OAIPersonalisedMusicBatchRequest::is_meta_data_Set() const{
    return m_meta_data_isSet;
}

bool OAIPersonalisedMusicBatchRequest::is_meta_data_Valid() const{
    return m_meta_data_isValid;
}

QString OAIPersonalisedMusicBatchRequest::getType() const {
    return m_type;
}
void OAIPersonalisedMusicBatchRequest::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPersonalisedMusicBatchRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPersonalisedMusicBatchRequest::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPersonalisedMusicBatchRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_added_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPersonalisedMusicBatchRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_domain_isValid && m_id_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
