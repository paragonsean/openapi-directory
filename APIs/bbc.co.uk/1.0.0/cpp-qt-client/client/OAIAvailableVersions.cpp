/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailableVersions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailableVersions::OAIAvailableVersions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailableVersions::OAIAvailableVersions() {
    this->initializeModel();
}

OAIAvailableVersions::~OAIAvailableVersions() {}

void OAIAvailableVersions::initializeModel() {

    m_available_isSet = false;
    m_available_isValid = false;

    m_available_from_date_isSet = false;
    m_available_from_date_isValid = false;

    m_available_to_date_isSet = false;
    m_available_to_date_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_has_guidance_isSet = false;
    m_has_guidance_isValid = false;

    m_media_set_isSet = false;
    m_media_set_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_version_pid_isSet = false;
    m_version_pid_isValid = false;

    m_version_type_isSet = false;
    m_version_type_isValid = false;
}

void OAIAvailableVersions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailableVersions::fromJsonObject(QJsonObject json) {

    m_available_isValid = ::OpenAPI::fromJsonValue(m_available, json[QString("available")]);
    m_available_isSet = !json[QString("available")].isNull() && m_available_isValid;

    m_available_from_date_isValid = ::OpenAPI::fromJsonValue(m_available_from_date, json[QString("available_from_date")]);
    m_available_from_date_isSet = !json[QString("available_from_date")].isNull() && m_available_from_date_isValid;

    m_available_to_date_isValid = ::OpenAPI::fromJsonValue(m_available_to_date, json[QString("available_to_date")]);
    m_available_to_date_isSet = !json[QString("available_to_date")].isNull() && m_available_to_date_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_has_guidance_isValid = ::OpenAPI::fromJsonValue(m_has_guidance, json[QString("has_guidance")]);
    m_has_guidance_isSet = !json[QString("has_guidance")].isNull() && m_has_guidance_isValid;

    m_media_set_isValid = ::OpenAPI::fromJsonValue(m_media_set, json[QString("media_set")]);
    m_media_set_isSet = !json[QString("media_set")].isNull() && m_media_set_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_version_pid_isValid = ::OpenAPI::fromJsonValue(m_version_pid, json[QString("version_pid")]);
    m_version_pid_isSet = !json[QString("version_pid")].isNull() && m_version_pid_isValid;

    m_version_type_isValid = ::OpenAPI::fromJsonValue(m_version_type, json[QString("version_type")]);
    m_version_type_isSet = !json[QString("version_type")].isNull() && m_version_type_isValid;
}

QString OAIAvailableVersions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailableVersions::asJsonObject() const {
    QJsonObject obj;
    if (m_available_isSet) {
        obj.insert(QString("available"), ::OpenAPI::toJsonValue(m_available));
    }
    if (m_available_from_date_isSet) {
        obj.insert(QString("available_from_date"), ::OpenAPI::toJsonValue(m_available_from_date));
    }
    if (m_available_to_date_isSet) {
        obj.insert(QString("available_to_date"), ::OpenAPI::toJsonValue(m_available_to_date));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_has_guidance_isSet) {
        obj.insert(QString("has_guidance"), ::OpenAPI::toJsonValue(m_has_guidance));
    }
    if (m_media_set_isSet) {
        obj.insert(QString("media_set"), ::OpenAPI::toJsonValue(m_media_set));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_version_pid_isSet) {
        obj.insert(QString("version_pid"), ::OpenAPI::toJsonValue(m_version_pid));
    }
    if (m_version_type_isSet) {
        obj.insert(QString("version_type"), ::OpenAPI::toJsonValue(m_version_type));
    }
    return obj;
}

QString OAIAvailableVersions::getAvailable() const {
    return m_available;
}
void OAIAvailableVersions::setAvailable(const QString &available) {
    m_available = available;
    m_available_isSet = true;
}

bool OAIAvailableVersions::is_available_Set() const{
    return m_available_isSet;
}

bool OAIAvailableVersions::is_available_Valid() const{
    return m_available_isValid;
}

QString OAIAvailableVersions::getAvailableFromDate() const {
    return m_available_from_date;
}
void OAIAvailableVersions::setAvailableFromDate(const QString &available_from_date) {
    m_available_from_date = available_from_date;
    m_available_from_date_isSet = true;
}

bool OAIAvailableVersions::is_available_from_date_Set() const{
    return m_available_from_date_isSet;
}

bool OAIAvailableVersions::is_available_from_date_Valid() const{
    return m_available_from_date_isValid;
}

QString OAIAvailableVersions::getAvailableToDate() const {
    return m_available_to_date;
}
void OAIAvailableVersions::setAvailableToDate(const QString &available_to_date) {
    m_available_to_date = available_to_date;
    m_available_to_date_isSet = true;
}

bool OAIAvailableVersions::is_available_to_date_Set() const{
    return m_available_to_date_isSet;
}

bool OAIAvailableVersions::is_available_to_date_Valid() const{
    return m_available_to_date_isValid;
}

QString OAIAvailableVersions::getDuration() const {
    return m_duration;
}
void OAIAvailableVersions::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIAvailableVersions::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIAvailableVersions::is_duration_Valid() const{
    return m_duration_isValid;
}

bool OAIAvailableVersions::isHasGuidance() const {
    return m_has_guidance;
}
void OAIAvailableVersions::setHasGuidance(const bool &has_guidance) {
    m_has_guidance = has_guidance;
    m_has_guidance_isSet = true;
}

bool OAIAvailableVersions::is_has_guidance_Set() const{
    return m_has_guidance_isSet;
}

bool OAIAvailableVersions::is_has_guidance_Valid() const{
    return m_has_guidance_isValid;
}

QString OAIAvailableVersions::getMediaSet() const {
    return m_media_set;
}
void OAIAvailableVersions::setMediaSet(const QString &media_set) {
    m_media_set = media_set;
    m_media_set_isSet = true;
}

bool OAIAvailableVersions::is_media_set_Set() const{
    return m_media_set_isSet;
}

bool OAIAvailableVersions::is_media_set_Valid() const{
    return m_media_set_isValid;
}

QString OAIAvailableVersions::getType() const {
    return m_type;
}
void OAIAvailableVersions::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAvailableVersions::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAvailableVersions::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAvailableVersions::getVersionPid() const {
    return m_version_pid;
}
void OAIAvailableVersions::setVersionPid(const QString &version_pid) {
    m_version_pid = version_pid;
    m_version_pid_isSet = true;
}

bool OAIAvailableVersions::is_version_pid_Set() const{
    return m_version_pid_isSet;
}

bool OAIAvailableVersions::is_version_pid_Valid() const{
    return m_version_pid_isValid;
}

QString OAIAvailableVersions::getVersionType() const {
    return m_version_type;
}
void OAIAvailableVersions::setVersionType(const QString &version_type) {
    m_version_type = version_type;
    m_version_type_isSet = true;
}

bool OAIAvailableVersions::is_version_type_Set() const{
    return m_version_type_isSet;
}

bool OAIAvailableVersions::is_version_type_Valid() const{
    return m_version_type_isValid;
}

bool OAIAvailableVersions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_from_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_to_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_guidance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailableVersions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_available_isValid && m_available_from_date_isValid && m_available_to_date_isValid && m_duration_isValid && m_has_guidance_isValid && m_media_set_isValid && m_type_isValid && m_version_pid_isValid && m_version_type_isValid && true;
}

} // namespace OpenAPI
