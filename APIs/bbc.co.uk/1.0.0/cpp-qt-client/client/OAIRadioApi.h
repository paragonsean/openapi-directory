/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRadioApi_H
#define OAI_OAIRadioApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPersonalisedRadioBatchRequest.h"
#include "OAIPersonalisedRadioErrorResponse.h"
#include "OAIPersonalisedRadioRequest.h"
#include "OAIPersonalisedRadioResponse.h"
#include "OAIPersonalisedRadioSuccessResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRadioApi : public QObject {
    Q_OBJECT

public:
    OAIRadioApi(const int timeOut = 0);
    ~OAIRadioApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  type QString [required]
    * @param[in]  pid QString [required]
    */
    virtual void deletePersonalisedRadioByActivityTypeById(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QString &type, const QString &pid);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  type QString [required]
    * @param[in]  pid QString [required]
    */
    virtual void deletePersonalisedRadioFollowsByTypeById(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QString &type, const QString &pid);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  type QString [required]
    * @param[in]  pid QString [required]
    * @param[in]  show_all_activity bool [optional]
    */
    virtual void getPersonalisedRadioByActivityTypeById(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QString &type, const QString &pid, const ::OpenAPI::OptionalParam<bool> &show_all_activity = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  show_all_activity bool [optional]
    */
    virtual void getPersonalisedRadioFavourites(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_all_activity = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  type QString [required]
    * @param[in]  sort QString [optional]
    * @param[in]  show_all_activity bool [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getPersonalisedRadioFavouritesByType(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QString &type, const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_all_activity = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  show_all_activity bool [optional]
    */
    virtual void getPersonalisedRadioFollows(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_all_activity = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  type QString [required]
    * @param[in]  sort QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  show_all_activity bool [optional]
    */
    virtual void getPersonalisedRadioFollowsByType(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QString &type, const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &show_all_activity = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  type QString [required]
    * @param[in]  pid QString [required]
    */
    virtual void getPersonalisedRadioFollowsByTypeById(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QString &type, const QString &pid);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  show_all_activity bool [optional]
    */
    virtual void getPersonalisedRadioPlays(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_all_activity = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  body QList<OAIPersonalisedRadioBatchRequest> [required]
    */
    virtual void postPersonalisedRadioBatch(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QList<OAIPersonalisedRadioBatchRequest> &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  type QString [required]
    * @param[in]  pid QString [required]
    * @param[in]  body OAIPersonalisedRadioRequest [required]
    */
    virtual void postPersonalisedRadioByActivityTypeById(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QString &type, const QString &pid, const OAIPersonalisedRadioRequest &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  body QList<OAIPersonalisedRadioBatchRequest> [required]
    */
    virtual void postPersonalisedRadioFollowsBatch(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QList<OAIPersonalisedRadioBatchRequest> &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  type QString [required]
    * @param[in]  pid QString [required]
    * @param[in]  body OAIPersonalisedRadioRequest [required]
    */
    virtual void postPersonalisedRadioFollowsByTypeById(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QString &type, const QString &pid, const OAIPersonalisedRadioRequest &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  body QList<OAIPersonalisedRadioBatchRequest> [required]
    */
    virtual void putPersonalisedRadioBatch(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QList<OAIPersonalisedRadioBatchRequest> &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  type QString [required]
    * @param[in]  pid QString [required]
    * @param[in]  body OAIPersonalisedRadioRequest [required]
    */
    virtual void putPersonalisedRadioByActivityTypeById(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QString &type, const QString &pid, const OAIPersonalisedRadioRequest &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  body QList<OAIPersonalisedRadioBatchRequest> [required]
    */
    virtual void putPersonalisedRadioFollowsBatch(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QList<OAIPersonalisedRadioBatchRequest> &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  type QString [required]
    * @param[in]  pid QString [required]
    * @param[in]  body OAIPersonalisedRadioRequest [required]
    */
    virtual void putPersonalisedRadioFollowsByTypeById(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QString &type, const QString &pid, const OAIPersonalisedRadioRequest &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deletePersonalisedRadioByActivityTypeByIdCallback(OAIHttpRequestWorker *worker);
    void deletePersonalisedRadioFollowsByTypeByIdCallback(OAIHttpRequestWorker *worker);
    void getPersonalisedRadioByActivityTypeByIdCallback(OAIHttpRequestWorker *worker);
    void getPersonalisedRadioFavouritesCallback(OAIHttpRequestWorker *worker);
    void getPersonalisedRadioFavouritesByTypeCallback(OAIHttpRequestWorker *worker);
    void getPersonalisedRadioFollowsCallback(OAIHttpRequestWorker *worker);
    void getPersonalisedRadioFollowsByTypeCallback(OAIHttpRequestWorker *worker);
    void getPersonalisedRadioFollowsByTypeByIdCallback(OAIHttpRequestWorker *worker);
    void getPersonalisedRadioPlaysCallback(OAIHttpRequestWorker *worker);
    void postPersonalisedRadioBatchCallback(OAIHttpRequestWorker *worker);
    void postPersonalisedRadioByActivityTypeByIdCallback(OAIHttpRequestWorker *worker);
    void postPersonalisedRadioFollowsBatchCallback(OAIHttpRequestWorker *worker);
    void postPersonalisedRadioFollowsByTypeByIdCallback(OAIHttpRequestWorker *worker);
    void putPersonalisedRadioBatchCallback(OAIHttpRequestWorker *worker);
    void putPersonalisedRadioByActivityTypeByIdCallback(OAIHttpRequestWorker *worker);
    void putPersonalisedRadioFollowsBatchCallback(OAIHttpRequestWorker *worker);
    void putPersonalisedRadioFollowsByTypeByIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deletePersonalisedRadioByActivityTypeByIdSignal(OAIPersonalisedRadioSuccessResponse summary);
    void deletePersonalisedRadioFollowsByTypeByIdSignal(OAIPersonalisedRadioSuccessResponse summary);
    void getPersonalisedRadioByActivityTypeByIdSignal(OAIPersonalisedRadioResponse summary);
    void getPersonalisedRadioFavouritesSignal(OAIPersonalisedRadioResponse summary);
    void getPersonalisedRadioFavouritesByTypeSignal(OAIPersonalisedRadioResponse summary);
    void getPersonalisedRadioFollowsSignal(OAIPersonalisedRadioResponse summary);
    void getPersonalisedRadioFollowsByTypeSignal(OAIPersonalisedRadioResponse summary);
    void getPersonalisedRadioFollowsByTypeByIdSignal(OAIPersonalisedRadioResponse summary);
    void getPersonalisedRadioPlaysSignal(OAIPersonalisedRadioResponse summary);
    void postPersonalisedRadioBatchSignal(OAIPersonalisedRadioSuccessResponse summary);
    void postPersonalisedRadioByActivityTypeByIdSignal(OAIPersonalisedRadioSuccessResponse summary);
    void postPersonalisedRadioFollowsBatchSignal(OAIPersonalisedRadioSuccessResponse summary);
    void postPersonalisedRadioFollowsByTypeByIdSignal(OAIPersonalisedRadioSuccessResponse summary);
    void putPersonalisedRadioBatchSignal(OAIPersonalisedRadioSuccessResponse summary);
    void putPersonalisedRadioByActivityTypeByIdSignal(OAIPersonalisedRadioSuccessResponse summary);
    void putPersonalisedRadioFollowsBatchSignal(OAIPersonalisedRadioSuccessResponse summary);
    void putPersonalisedRadioFollowsByTypeByIdSignal(OAIPersonalisedRadioSuccessResponse summary);


    void deletePersonalisedRadioByActivityTypeByIdSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedRadioSuccessResponse summary);
    void deletePersonalisedRadioFollowsByTypeByIdSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedRadioSuccessResponse summary);
    void getPersonalisedRadioByActivityTypeByIdSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedRadioResponse summary);
    void getPersonalisedRadioFavouritesSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedRadioResponse summary);
    void getPersonalisedRadioFavouritesByTypeSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedRadioResponse summary);
    void getPersonalisedRadioFollowsSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedRadioResponse summary);
    void getPersonalisedRadioFollowsByTypeSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedRadioResponse summary);
    void getPersonalisedRadioFollowsByTypeByIdSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedRadioResponse summary);
    void getPersonalisedRadioPlaysSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedRadioResponse summary);
    void postPersonalisedRadioBatchSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedRadioSuccessResponse summary);
    void postPersonalisedRadioByActivityTypeByIdSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedRadioSuccessResponse summary);
    void postPersonalisedRadioFollowsBatchSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedRadioSuccessResponse summary);
    void postPersonalisedRadioFollowsByTypeByIdSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedRadioSuccessResponse summary);
    void putPersonalisedRadioBatchSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedRadioSuccessResponse summary);
    void putPersonalisedRadioByActivityTypeByIdSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedRadioSuccessResponse summary);
    void putPersonalisedRadioFollowsBatchSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedRadioSuccessResponse summary);
    void putPersonalisedRadioFollowsByTypeByIdSignalFull(OAIHttpRequestWorker *worker, OAIPersonalisedRadioSuccessResponse summary);

    Q_DECL_DEPRECATED_X("Use deletePersonalisedRadioByActivityTypeByIdSignalError() instead")
    void deletePersonalisedRadioByActivityTypeByIdSignalE(OAIPersonalisedRadioSuccessResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePersonalisedRadioByActivityTypeByIdSignalError(OAIPersonalisedRadioSuccessResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePersonalisedRadioFollowsByTypeByIdSignalError() instead")
    void deletePersonalisedRadioFollowsByTypeByIdSignalE(OAIPersonalisedRadioSuccessResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePersonalisedRadioFollowsByTypeByIdSignalError(OAIPersonalisedRadioSuccessResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonalisedRadioByActivityTypeByIdSignalError() instead")
    void getPersonalisedRadioByActivityTypeByIdSignalE(OAIPersonalisedRadioResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonalisedRadioByActivityTypeByIdSignalError(OAIPersonalisedRadioResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonalisedRadioFavouritesSignalError() instead")
    void getPersonalisedRadioFavouritesSignalE(OAIPersonalisedRadioResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonalisedRadioFavouritesSignalError(OAIPersonalisedRadioResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonalisedRadioFavouritesByTypeSignalError() instead")
    void getPersonalisedRadioFavouritesByTypeSignalE(OAIPersonalisedRadioResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonalisedRadioFavouritesByTypeSignalError(OAIPersonalisedRadioResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonalisedRadioFollowsSignalError() instead")
    void getPersonalisedRadioFollowsSignalE(OAIPersonalisedRadioResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonalisedRadioFollowsSignalError(OAIPersonalisedRadioResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonalisedRadioFollowsByTypeSignalError() instead")
    void getPersonalisedRadioFollowsByTypeSignalE(OAIPersonalisedRadioResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonalisedRadioFollowsByTypeSignalError(OAIPersonalisedRadioResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonalisedRadioFollowsByTypeByIdSignalError() instead")
    void getPersonalisedRadioFollowsByTypeByIdSignalE(OAIPersonalisedRadioResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonalisedRadioFollowsByTypeByIdSignalError(OAIPersonalisedRadioResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonalisedRadioPlaysSignalError() instead")
    void getPersonalisedRadioPlaysSignalE(OAIPersonalisedRadioResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonalisedRadioPlaysSignalError(OAIPersonalisedRadioResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPersonalisedRadioBatchSignalError() instead")
    void postPersonalisedRadioBatchSignalE(OAIPersonalisedRadioSuccessResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPersonalisedRadioBatchSignalError(OAIPersonalisedRadioSuccessResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPersonalisedRadioByActivityTypeByIdSignalError() instead")
    void postPersonalisedRadioByActivityTypeByIdSignalE(OAIPersonalisedRadioSuccessResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPersonalisedRadioByActivityTypeByIdSignalError(OAIPersonalisedRadioSuccessResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPersonalisedRadioFollowsBatchSignalError() instead")
    void postPersonalisedRadioFollowsBatchSignalE(OAIPersonalisedRadioSuccessResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPersonalisedRadioFollowsBatchSignalError(OAIPersonalisedRadioSuccessResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPersonalisedRadioFollowsByTypeByIdSignalError() instead")
    void postPersonalisedRadioFollowsByTypeByIdSignalE(OAIPersonalisedRadioSuccessResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPersonalisedRadioFollowsByTypeByIdSignalError(OAIPersonalisedRadioSuccessResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPersonalisedRadioBatchSignalError() instead")
    void putPersonalisedRadioBatchSignalE(OAIPersonalisedRadioSuccessResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putPersonalisedRadioBatchSignalError(OAIPersonalisedRadioSuccessResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPersonalisedRadioByActivityTypeByIdSignalError() instead")
    void putPersonalisedRadioByActivityTypeByIdSignalE(OAIPersonalisedRadioSuccessResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putPersonalisedRadioByActivityTypeByIdSignalError(OAIPersonalisedRadioSuccessResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPersonalisedRadioFollowsBatchSignalError() instead")
    void putPersonalisedRadioFollowsBatchSignalE(OAIPersonalisedRadioSuccessResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putPersonalisedRadioFollowsBatchSignalError(OAIPersonalisedRadioSuccessResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPersonalisedRadioFollowsByTypeByIdSignalError() instead")
    void putPersonalisedRadioFollowsByTypeByIdSignalE(OAIPersonalisedRadioSuccessResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putPersonalisedRadioFollowsByTypeByIdSignalError(OAIPersonalisedRadioSuccessResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deletePersonalisedRadioByActivityTypeByIdSignalErrorFull() instead")
    void deletePersonalisedRadioByActivityTypeByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePersonalisedRadioByActivityTypeByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePersonalisedRadioFollowsByTypeByIdSignalErrorFull() instead")
    void deletePersonalisedRadioFollowsByTypeByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePersonalisedRadioFollowsByTypeByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonalisedRadioByActivityTypeByIdSignalErrorFull() instead")
    void getPersonalisedRadioByActivityTypeByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonalisedRadioByActivityTypeByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonalisedRadioFavouritesSignalErrorFull() instead")
    void getPersonalisedRadioFavouritesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonalisedRadioFavouritesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonalisedRadioFavouritesByTypeSignalErrorFull() instead")
    void getPersonalisedRadioFavouritesByTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonalisedRadioFavouritesByTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonalisedRadioFollowsSignalErrorFull() instead")
    void getPersonalisedRadioFollowsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonalisedRadioFollowsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonalisedRadioFollowsByTypeSignalErrorFull() instead")
    void getPersonalisedRadioFollowsByTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonalisedRadioFollowsByTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonalisedRadioFollowsByTypeByIdSignalErrorFull() instead")
    void getPersonalisedRadioFollowsByTypeByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonalisedRadioFollowsByTypeByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonalisedRadioPlaysSignalErrorFull() instead")
    void getPersonalisedRadioPlaysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonalisedRadioPlaysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPersonalisedRadioBatchSignalErrorFull() instead")
    void postPersonalisedRadioBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPersonalisedRadioBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPersonalisedRadioByActivityTypeByIdSignalErrorFull() instead")
    void postPersonalisedRadioByActivityTypeByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPersonalisedRadioByActivityTypeByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPersonalisedRadioFollowsBatchSignalErrorFull() instead")
    void postPersonalisedRadioFollowsBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPersonalisedRadioFollowsBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPersonalisedRadioFollowsByTypeByIdSignalErrorFull() instead")
    void postPersonalisedRadioFollowsByTypeByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPersonalisedRadioFollowsByTypeByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPersonalisedRadioBatchSignalErrorFull() instead")
    void putPersonalisedRadioBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putPersonalisedRadioBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPersonalisedRadioByActivityTypeByIdSignalErrorFull() instead")
    void putPersonalisedRadioByActivityTypeByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putPersonalisedRadioByActivityTypeByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPersonalisedRadioFollowsBatchSignalErrorFull() instead")
    void putPersonalisedRadioFollowsBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putPersonalisedRadioFollowsBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPersonalisedRadioFollowsByTypeByIdSignalErrorFull() instead")
    void putPersonalisedRadioFollowsByTypeByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putPersonalisedRadioFollowsByTypeByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
