/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBody_4.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBody_4::OAIBody_4(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBody_4::OAIBody_4() {
    this->initializeModel();
}

OAIBody_4::~OAIBody_4() {}

void OAIBody_4::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_elapsed_time_isSet = false;
    m_elapsed_time_isValid = false;

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_version_pid_isSet = false;
    m_version_pid_isValid = false;
}

void OAIBody_4::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBody_4::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_elapsed_time_isValid = ::OpenAPI::fromJsonValue(m_elapsed_time, json[QString("elapsed_time")]);
    m_elapsed_time_isSet = !json[QString("elapsed_time")].isNull() && m_elapsed_time_isValid;

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resource_type")]);
    m_resource_type_isSet = !json[QString("resource_type")].isNull() && m_resource_type_isValid;

    m_version_pid_isValid = ::OpenAPI::fromJsonValue(m_version_pid, json[QString("version_pid")]);
    m_version_pid_isSet = !json[QString("version_pid")].isNull() && m_version_pid_isValid;
}

QString OAIBody_4::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBody_4::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_elapsed_time_isSet) {
        obj.insert(QString("elapsed_time"), ::OpenAPI::toJsonValue(m_elapsed_time));
    }
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resource_type"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_version_pid_isSet) {
        obj.insert(QString("version_pid"), ::OpenAPI::toJsonValue(m_version_pid));
    }
    return obj;
}

QString OAIBody_4::getAction() const {
    return m_action;
}
void OAIBody_4::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIBody_4::is_action_Set() const{
    return m_action_isSet;
}

bool OAIBody_4::is_action_Valid() const{
    return m_action_isValid;
}

qint32 OAIBody_4::getElapsedTime() const {
    return m_elapsed_time;
}
void OAIBody_4::setElapsedTime(const qint32 &elapsed_time) {
    m_elapsed_time = elapsed_time;
    m_elapsed_time_isSet = true;
}

bool OAIBody_4::is_elapsed_time_Set() const{
    return m_elapsed_time_isSet;
}

bool OAIBody_4::is_elapsed_time_Valid() const{
    return m_elapsed_time_isValid;
}

QString OAIBody_4::getPid() const {
    return m_pid;
}
void OAIBody_4::setPid(const QString &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAIBody_4::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAIBody_4::is_pid_Valid() const{
    return m_pid_isValid;
}

QString OAIBody_4::getResourceType() const {
    return m_resource_type;
}
void OAIBody_4::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIBody_4::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIBody_4::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIBody_4::getVersionPid() const {
    return m_version_pid;
}
void OAIBody_4::setVersionPid(const QString &version_pid) {
    m_version_pid = version_pid;
    m_version_pid_isSet = true;
}

bool OAIBody_4::is_version_pid_Set() const{
    return m_version_pid_isSet;
}

bool OAIBody_4::is_version_pid_Valid() const{
    return m_version_pid_isValid;
}

bool OAIBody_4::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elapsed_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_pid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBody_4::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_elapsed_time_isValid && m_pid_isValid && m_resource_type_isValid && m_version_pid_isValid && true;
}

} // namespace OpenAPI
