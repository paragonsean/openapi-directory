/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPersonalisedMusicData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPersonalisedMusicData::OAIPersonalisedMusicData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPersonalisedMusicData::OAIPersonalisedMusicData() {
    this->initializeModel();
}

OAIPersonalisedMusicData::~OAIPersonalisedMusicData() {}

void OAIPersonalisedMusicData::initializeModel() {

    m_artist_isSet = false;
    m_artist_isValid = false;

    m_clip_isSet = false;
    m_clip_isValid = false;

    m_genre_isSet = false;
    m_genre_isValid = false;

    m_playlist_isSet = false;
    m_playlist_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_track_isSet = false;
    m_track_isValid = false;
}

void OAIPersonalisedMusicData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPersonalisedMusicData::fromJsonObject(QJsonObject json) {

    m_artist_isValid = ::OpenAPI::fromJsonValue(m_artist, json[QString("artist")]);
    m_artist_isSet = !json[QString("artist")].isNull() && m_artist_isValid;

    m_clip_isValid = ::OpenAPI::fromJsonValue(m_clip, json[QString("clip")]);
    m_clip_isSet = !json[QString("clip")].isNull() && m_clip_isValid;

    m_genre_isValid = ::OpenAPI::fromJsonValue(m_genre, json[QString("genre")]);
    m_genre_isSet = !json[QString("genre")].isNull() && m_genre_isValid;

    m_playlist_isValid = ::OpenAPI::fromJsonValue(m_playlist, json[QString("playlist")]);
    m_playlist_isSet = !json[QString("playlist")].isNull() && m_playlist_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_track_isValid = ::OpenAPI::fromJsonValue(m_track, json[QString("track")]);
    m_track_isSet = !json[QString("track")].isNull() && m_track_isValid;
}

QString OAIPersonalisedMusicData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPersonalisedMusicData::asJsonObject() const {
    QJsonObject obj;
    if (m_artist.isSet()) {
        obj.insert(QString("artist"), ::OpenAPI::toJsonValue(m_artist));
    }
    if (m_clip.isSet()) {
        obj.insert(QString("clip"), ::OpenAPI::toJsonValue(m_clip));
    }
    if (m_genre.isSet()) {
        obj.insert(QString("genre"), ::OpenAPI::toJsonValue(m_genre));
    }
    if (m_playlist.isSet()) {
        obj.insert(QString("playlist"), ::OpenAPI::toJsonValue(m_playlist));
    }
    if (m_service.isSet()) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_track.isSet()) {
        obj.insert(QString("track"), ::OpenAPI::toJsonValue(m_track));
    }
    return obj;
}

OAIPersonalisedMusicArtist OAIPersonalisedMusicData::getArtist() const {
    return m_artist;
}
void OAIPersonalisedMusicData::setArtist(const OAIPersonalisedMusicArtist &artist) {
    m_artist = artist;
    m_artist_isSet = true;
}

bool OAIPersonalisedMusicData::is_artist_Set() const{
    return m_artist_isSet;
}

bool OAIPersonalisedMusicData::is_artist_Valid() const{
    return m_artist_isValid;
}

OAIPersonalisedMusicClip OAIPersonalisedMusicData::getClip() const {
    return m_clip;
}
void OAIPersonalisedMusicData::setClip(const OAIPersonalisedMusicClip &clip) {
    m_clip = clip;
    m_clip_isSet = true;
}

bool OAIPersonalisedMusicData::is_clip_Set() const{
    return m_clip_isSet;
}

bool OAIPersonalisedMusicData::is_clip_Valid() const{
    return m_clip_isValid;
}

OAIPersonalisedMusicGenre OAIPersonalisedMusicData::getGenre() const {
    return m_genre;
}
void OAIPersonalisedMusicData::setGenre(const OAIPersonalisedMusicGenre &genre) {
    m_genre = genre;
    m_genre_isSet = true;
}

bool OAIPersonalisedMusicData::is_genre_Set() const{
    return m_genre_isSet;
}

bool OAIPersonalisedMusicData::is_genre_Valid() const{
    return m_genre_isValid;
}

OAIPersonalisedMusicPlaylist OAIPersonalisedMusicData::getPlaylist() const {
    return m_playlist;
}
void OAIPersonalisedMusicData::setPlaylist(const OAIPersonalisedMusicPlaylist &playlist) {
    m_playlist = playlist;
    m_playlist_isSet = true;
}

bool OAIPersonalisedMusicData::is_playlist_Set() const{
    return m_playlist_isSet;
}

bool OAIPersonalisedMusicData::is_playlist_Valid() const{
    return m_playlist_isValid;
}

OAIPersonalisedMusicService OAIPersonalisedMusicData::getService() const {
    return m_service;
}
void OAIPersonalisedMusicData::setService(const OAIPersonalisedMusicService &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIPersonalisedMusicData::is_service_Set() const{
    return m_service_isSet;
}

bool OAIPersonalisedMusicData::is_service_Valid() const{
    return m_service_isValid;
}

OAIPersonalisedMusicTrack OAIPersonalisedMusicData::getTrack() const {
    return m_track;
}
void OAIPersonalisedMusicData::setTrack(const OAIPersonalisedMusicTrack &track) {
    m_track = track;
    m_track_isSet = true;
}

bool OAIPersonalisedMusicData::is_track_Set() const{
    return m_track_isSet;
}

bool OAIPersonalisedMusicData::is_track_Valid() const{
    return m_track_isValid;
}

bool OAIPersonalisedMusicData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artist.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_clip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_genre.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_playlist.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_track.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPersonalisedMusicData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
