/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetaData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetaData::OAIMetaData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetaData::OAIMetaData() {
    this->initializeModel();
}

OAIMetaData::~OAIMetaData() {}

void OAIMetaData::initializeModel() {

    m_miscellaneous_isSet = false;
    m_miscellaneous_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_programme_type_isSet = false;
    m_programme_type_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIMetaData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetaData::fromJsonObject(QJsonObject json) {

    m_miscellaneous_isValid = ::OpenAPI::fromJsonValue(m_miscellaneous, json[QString("miscellaneous")]);
    m_miscellaneous_isSet = !json[QString("miscellaneous")].isNull() && m_miscellaneous_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_programme_type_isValid = ::OpenAPI::fromJsonValue(m_programme_type, json[QString("programme_type")]);
    m_programme_type_isSet = !json[QString("programme_type")].isNull() && m_programme_type_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIMetaData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetaData::asJsonObject() const {
    QJsonObject obj;
    if (m_miscellaneous.isSet()) {
        obj.insert(QString("miscellaneous"), ::OpenAPI::toJsonValue(m_miscellaneous));
    }
    if (m_origin.isSet()) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_programme_type_isSet) {
        obj.insert(QString("programme_type"), ::OpenAPI::toJsonValue(m_programme_type));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIMiscellaneous OAIMetaData::getMiscellaneous() const {
    return m_miscellaneous;
}
void OAIMetaData::setMiscellaneous(const OAIMiscellaneous &miscellaneous) {
    m_miscellaneous = miscellaneous;
    m_miscellaneous_isSet = true;
}

bool OAIMetaData::is_miscellaneous_Set() const{
    return m_miscellaneous_isSet;
}

bool OAIMetaData::is_miscellaneous_Valid() const{
    return m_miscellaneous_isValid;
}

OAIOrigin OAIMetaData::getOrigin() const {
    return m_origin;
}
void OAIMetaData::setOrigin(const OAIOrigin &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIMetaData::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIMetaData::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAIMetaData::getProgrammeType() const {
    return m_programme_type;
}
void OAIMetaData::setProgrammeType(const QString &programme_type) {
    m_programme_type = programme_type;
    m_programme_type_isSet = true;
}

bool OAIMetaData::is_programme_type_Set() const{
    return m_programme_type_isSet;
}

bool OAIMetaData::is_programme_type_Valid() const{
    return m_programme_type_isValid;
}

QString OAIMetaData::getType() const {
    return m_type;
}
void OAIMetaData::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMetaData::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMetaData::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIMetaData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_miscellaneous.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_programme_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetaData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_miscellaneous_isValid && m_origin_isValid && m_programme_type_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
