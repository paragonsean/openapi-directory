/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPopularItemSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPopularItemSummary::OAIPopularItemSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPopularItemSummary::OAIPopularItemSummary() {
    this->initializeModel();
}

OAIPopularItemSummary::~OAIPopularItemSummary() {}

void OAIPopularItemSummary::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPopularItemSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPopularItemSummary::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPopularItemSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPopularItemSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIProgrammeSummary OAIPopularItemSummary::getData() const {
    return m_data;
}
void OAIPopularItemSummary::setData(const OAIProgrammeSummary &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIPopularItemSummary::is_data_Set() const{
    return m_data_isSet;
}

bool OAIPopularItemSummary::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIPopularItemSummary::getId() const {
    return m_id;
}
void OAIPopularItemSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPopularItemSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPopularItemSummary::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIPopularItemSummary::getScore() const {
    return m_score;
}
void OAIPopularItemSummary::setScore(const qint32 &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIPopularItemSummary::is_score_Set() const{
    return m_score_isSet;
}

bool OAIPopularItemSummary::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIPopularItemSummary::getType() const {
    return m_type;
}
void OAIPopularItemSummary::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPopularItemSummary::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPopularItemSummary::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPopularItemSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPopularItemSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_isValid && m_id_isValid && m_score_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
