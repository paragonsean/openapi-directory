/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetwork.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetwork::OAINetwork(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetwork::OAINetwork() {
    this->initializeModel();
}

OAINetwork::~OAINetwork() {}

void OAINetwork::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_contacts_isSet = false;
    m_contacts_isValid = false;

    m_date_ranges_isSet = false;
    m_date_ranges_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_international_isSet = false;
    m_international_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_preset_isSet = false;
    m_preset_isValid = false;

    m_promoted_category_summaries_isSet = false;
    m_promoted_category_summaries_isValid = false;

    m_services_isSet = false;
    m_services_isValid = false;

    m_short_title_isSet = false;
    m_short_title_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAINetwork::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetwork::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_contacts_isValid = ::OpenAPI::fromJsonValue(m_contacts, json[QString("contacts")]);
    m_contacts_isSet = !json[QString("contacts")].isNull() && m_contacts_isValid;

    m_date_ranges_isValid = ::OpenAPI::fromJsonValue(m_date_ranges, json[QString("date_ranges")]);
    m_date_ranges_isSet = !json[QString("date_ranges")].isNull() && m_date_ranges_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_international_isValid = ::OpenAPI::fromJsonValue(m_international, json[QString("international")]);
    m_international_isSet = !json[QString("international")].isNull() && m_international_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_preset_isValid = ::OpenAPI::fromJsonValue(m_preset, json[QString("preset")]);
    m_preset_isSet = !json[QString("preset")].isNull() && m_preset_isValid;

    m_promoted_category_summaries_isValid = ::OpenAPI::fromJsonValue(m_promoted_category_summaries, json[QString("promoted_category_summaries")]);
    m_promoted_category_summaries_isSet = !json[QString("promoted_category_summaries")].isNull() && m_promoted_category_summaries_isValid;

    m_services_isValid = ::OpenAPI::fromJsonValue(m_services, json[QString("services")]);
    m_services_isSet = !json[QString("services")].isNull() && m_services_isValid;

    m_short_title_isValid = ::OpenAPI::fromJsonValue(m_short_title, json[QString("short_title")]);
    m_short_title_isSet = !json[QString("short_title")].isNull() && m_short_title_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAINetwork::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetwork::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_contacts.size() > 0) {
        obj.insert(QString("contacts"), ::OpenAPI::toJsonValue(m_contacts));
    }
    if (m_date_ranges.size() > 0) {
        obj.insert(QString("date_ranges"), ::OpenAPI::toJsonValue(m_date_ranges));
    }
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_international_isSet) {
        obj.insert(QString("international"), ::OpenAPI::toJsonValue(m_international));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_preset_isSet) {
        obj.insert(QString("preset"), ::OpenAPI::toJsonValue(m_preset));
    }
    if (m_promoted_category_summaries.size() > 0) {
        obj.insert(QString("promoted_category_summaries"), ::OpenAPI::toJsonValue(m_promoted_category_summaries));
    }
    if (m_services.size() > 0) {
        obj.insert(QString("services"), ::OpenAPI::toJsonValue(m_services));
    }
    if (m_short_title_isSet) {
        obj.insert(QString("short_title"), ::OpenAPI::toJsonValue(m_short_title));
    }
    if (m_sort_isSet) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAINetwork::isActive() const {
    return m_active;
}
void OAINetwork::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAINetwork::is_active_Set() const{
    return m_active_isSet;
}

bool OAINetwork::is_active_Valid() const{
    return m_active_isValid;
}

QList<OAIContact> OAINetwork::getContacts() const {
    return m_contacts;
}
void OAINetwork::setContacts(const QList<OAIContact> &contacts) {
    m_contacts = contacts;
    m_contacts_isSet = true;
}

bool OAINetwork::is_contacts_Set() const{
    return m_contacts_isSet;
}

bool OAINetwork::is_contacts_Valid() const{
    return m_contacts_isValid;
}

QList<OAIDateRange> OAINetwork::getDateRanges() const {
    return m_date_ranges;
}
void OAINetwork::setDateRanges(const QList<OAIDateRange> &date_ranges) {
    m_date_ranges = date_ranges;
    m_date_ranges_isSet = true;
}

bool OAINetwork::is_date_ranges_Set() const{
    return m_date_ranges_isSet;
}

bool OAINetwork::is_date_ranges_Valid() const{
    return m_date_ranges_isValid;
}

QString OAINetwork::getGroup() const {
    return m_group;
}
void OAINetwork::setGroup(const QString &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAINetwork::is_group_Set() const{
    return m_group_isSet;
}

bool OAINetwork::is_group_Valid() const{
    return m_group_isValid;
}

QString OAINetwork::getId() const {
    return m_id;
}
void OAINetwork::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINetwork::is_id_Set() const{
    return m_id_isSet;
}

bool OAINetwork::is_id_Valid() const{
    return m_id_isValid;
}

bool OAINetwork::isInternational() const {
    return m_international;
}
void OAINetwork::setInternational(const bool &international) {
    m_international = international;
    m_international_isSet = true;
}

bool OAINetwork::is_international_Set() const{
    return m_international_isSet;
}

bool OAINetwork::is_international_Valid() const{
    return m_international_isValid;
}

QString OAINetwork::getKey() const {
    return m_key;
}
void OAINetwork::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAINetwork::is_key_Set() const{
    return m_key_isSet;
}

bool OAINetwork::is_key_Valid() const{
    return m_key_isValid;
}

bool OAINetwork::isPreset() const {
    return m_preset;
}
void OAINetwork::setPreset(const bool &preset) {
    m_preset = preset;
    m_preset_isSet = true;
}

bool OAINetwork::is_preset_Set() const{
    return m_preset_isSet;
}

bool OAINetwork::is_preset_Valid() const{
    return m_preset_isValid;
}

QList<OAICategorySummary> OAINetwork::getPromotedCategorySummaries() const {
    return m_promoted_category_summaries;
}
void OAINetwork::setPromotedCategorySummaries(const QList<OAICategorySummary> &promoted_category_summaries) {
    m_promoted_category_summaries = promoted_category_summaries;
    m_promoted_category_summaries_isSet = true;
}

bool OAINetwork::is_promoted_category_summaries_Set() const{
    return m_promoted_category_summaries_isSet;
}

bool OAINetwork::is_promoted_category_summaries_Valid() const{
    return m_promoted_category_summaries_isValid;
}

QList<OAIService> OAINetwork::getServices() const {
    return m_services;
}
void OAINetwork::setServices(const QList<OAIService> &services) {
    m_services = services;
    m_services_isSet = true;
}

bool OAINetwork::is_services_Set() const{
    return m_services_isSet;
}

bool OAINetwork::is_services_Valid() const{
    return m_services_isValid;
}

QString OAINetwork::getShortTitle() const {
    return m_short_title;
}
void OAINetwork::setShortTitle(const QString &short_title) {
    m_short_title = short_title;
    m_short_title_isSet = true;
}

bool OAINetwork::is_short_title_Set() const{
    return m_short_title_isSet;
}

bool OAINetwork::is_short_title_Valid() const{
    return m_short_title_isValid;
}

qint32 OAINetwork::getSort() const {
    return m_sort;
}
void OAINetwork::setSort(const qint32 &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAINetwork::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAINetwork::is_sort_Valid() const{
    return m_sort_isValid;
}

QString OAINetwork::getTitle() const {
    return m_title;
}
void OAINetwork::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAINetwork::is_title_Set() const{
    return m_title_isSet;
}

bool OAINetwork::is_title_Valid() const{
    return m_title_isValid;
}

QString OAINetwork::getType() const {
    return m_type;
}
void OAINetwork::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINetwork::is_type_Set() const{
    return m_type_isSet;
}

bool OAINetwork::is_type_Valid() const{
    return m_type_isValid;
}

bool OAINetwork::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_international_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promoted_category_summaries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetwork::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_active_isValid && m_contacts_isValid && m_date_ranges_isValid && m_group_isValid && m_id_isValid && m_international_isValid && m_key_isValid && m_preset_isValid && m_services_isValid && m_short_title_isValid && m_sort_isValid && m_title_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
