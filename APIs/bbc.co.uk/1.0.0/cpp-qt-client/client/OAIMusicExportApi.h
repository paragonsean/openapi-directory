/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMusicExportApi_H
#define OAI_OAIMusicExportApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIMusicExportErrorResponse.h"
#include "OAIMusicExportJob.h"
#include "OAIMusicExportPreferences.h"
#include "OAIMusicExportPreferencesResponse.h"
#include "OAIMusicExportSuccess.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMusicExportApi : public QObject {
    Q_OBJECT

public:
    OAIMusicExportApi(const int timeOut = 0);
    ~OAIMusicExportApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    */
    virtual void deleteMusicPreferencesExport(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  vendor QString [required]
    */
    virtual void deleteMusicPreferencesExportVendor(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QString &vendor);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getMusicExport(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  over16 bool [required]
    * @param[in]  vendor QString [optional]
    */
    virtual void getMusicExportJobs(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const bool &over16, const ::OpenAPI::OptionalParam<QString> &vendor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  over16 bool [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  vendor QString [optional]
    * @param[in]  status QString [optional]
    */
    virtual void getMusicExportTracks(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const bool &over16, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &vendor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    */
    virtual void getMusicPreferencesExport(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  vendor QString [required]
    */
    virtual void getMusicPreferencesExportVendor(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QString &vendor);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  over16 bool [required]
    * @param[in]  body QList<OAIMusicExportJob> [required]
    * @param[in]  vendor QString [optional]
    */
    virtual void postMusicExportJob(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const bool &over16, const QList<OAIMusicExportJob> &body, const ::OpenAPI::OptionalParam<QString> &vendor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  body OAIMusicExportPreferences [required]
    */
    virtual void postMusicPreferencesExport(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const OAIMusicExportPreferences &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  vendor QString [required]
    * @param[in]  body OAIMusicExportPreferences [required]
    */
    virtual void postMusicPreferencesExportVendor(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QString &vendor, const OAIMusicExportPreferences &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_authentication_provider QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  vendor QString [required]
    * @param[in]  body OAIMusicExportPreferences [required]
    */
    virtual void putMusicPreferencesExportVendor(const QString &authorization, const QString &x_authentication_provider, const QString &x_api_key, const QString &vendor, const OAIMusicExportPreferences &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteMusicPreferencesExportCallback(OAIHttpRequestWorker *worker);
    void deleteMusicPreferencesExportVendorCallback(OAIHttpRequestWorker *worker);
    void getMusicExportCallback(OAIHttpRequestWorker *worker);
    void getMusicExportJobsCallback(OAIHttpRequestWorker *worker);
    void getMusicExportTracksCallback(OAIHttpRequestWorker *worker);
    void getMusicPreferencesExportCallback(OAIHttpRequestWorker *worker);
    void getMusicPreferencesExportVendorCallback(OAIHttpRequestWorker *worker);
    void postMusicExportJobCallback(OAIHttpRequestWorker *worker);
    void postMusicPreferencesExportCallback(OAIHttpRequestWorker *worker);
    void postMusicPreferencesExportVendorCallback(OAIHttpRequestWorker *worker);
    void putMusicPreferencesExportVendorCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteMusicPreferencesExportSignal(OAIMusicExportSuccess summary);
    void deleteMusicPreferencesExportVendorSignal();
    void getMusicExportSignal(OAIMusicExportJob summary);
    void getMusicExportJobsSignal(OAIMusicExportJob summary);
    void getMusicExportTracksSignal(OAIMusicExportJob summary);
    void getMusicPreferencesExportSignal(OAIMusicExportPreferencesResponse summary);
    void getMusicPreferencesExportVendorSignal(OAIMusicExportPreferencesResponse summary);
    void postMusicExportJobSignal(OAIMusicExportSuccess summary);
    void postMusicPreferencesExportSignal(OAIMusicExportSuccess summary);
    void postMusicPreferencesExportVendorSignal();
    void putMusicPreferencesExportVendorSignal();


    void deleteMusicPreferencesExportSignalFull(OAIHttpRequestWorker *worker, OAIMusicExportSuccess summary);
    void deleteMusicPreferencesExportVendorSignalFull(OAIHttpRequestWorker *worker);
    void getMusicExportSignalFull(OAIHttpRequestWorker *worker, OAIMusicExportJob summary);
    void getMusicExportJobsSignalFull(OAIHttpRequestWorker *worker, OAIMusicExportJob summary);
    void getMusicExportTracksSignalFull(OAIHttpRequestWorker *worker, OAIMusicExportJob summary);
    void getMusicPreferencesExportSignalFull(OAIHttpRequestWorker *worker, OAIMusicExportPreferencesResponse summary);
    void getMusicPreferencesExportVendorSignalFull(OAIHttpRequestWorker *worker, OAIMusicExportPreferencesResponse summary);
    void postMusicExportJobSignalFull(OAIHttpRequestWorker *worker, OAIMusicExportSuccess summary);
    void postMusicPreferencesExportSignalFull(OAIHttpRequestWorker *worker, OAIMusicExportSuccess summary);
    void postMusicPreferencesExportVendorSignalFull(OAIHttpRequestWorker *worker);
    void putMusicPreferencesExportVendorSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteMusicPreferencesExportSignalError() instead")
    void deleteMusicPreferencesExportSignalE(OAIMusicExportSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMusicPreferencesExportSignalError(OAIMusicExportSuccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMusicPreferencesExportVendorSignalError() instead")
    void deleteMusicPreferencesExportVendorSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMusicPreferencesExportVendorSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicExportSignalError() instead")
    void getMusicExportSignalE(OAIMusicExportJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicExportSignalError(OAIMusicExportJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicExportJobsSignalError() instead")
    void getMusicExportJobsSignalE(OAIMusicExportJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicExportJobsSignalError(OAIMusicExportJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicExportTracksSignalError() instead")
    void getMusicExportTracksSignalE(OAIMusicExportJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicExportTracksSignalError(OAIMusicExportJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicPreferencesExportSignalError() instead")
    void getMusicPreferencesExportSignalE(OAIMusicExportPreferencesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicPreferencesExportSignalError(OAIMusicExportPreferencesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicPreferencesExportVendorSignalError() instead")
    void getMusicPreferencesExportVendorSignalE(OAIMusicExportPreferencesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicPreferencesExportVendorSignalError(OAIMusicExportPreferencesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMusicExportJobSignalError() instead")
    void postMusicExportJobSignalE(OAIMusicExportSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postMusicExportJobSignalError(OAIMusicExportSuccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMusicPreferencesExportSignalError() instead")
    void postMusicPreferencesExportSignalE(OAIMusicExportSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postMusicPreferencesExportSignalError(OAIMusicExportSuccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMusicPreferencesExportVendorSignalError() instead")
    void postMusicPreferencesExportVendorSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postMusicPreferencesExportVendorSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putMusicPreferencesExportVendorSignalError() instead")
    void putMusicPreferencesExportVendorSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putMusicPreferencesExportVendorSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteMusicPreferencesExportSignalErrorFull() instead")
    void deleteMusicPreferencesExportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMusicPreferencesExportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMusicPreferencesExportVendorSignalErrorFull() instead")
    void deleteMusicPreferencesExportVendorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMusicPreferencesExportVendorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicExportSignalErrorFull() instead")
    void getMusicExportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicExportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicExportJobsSignalErrorFull() instead")
    void getMusicExportJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicExportJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicExportTracksSignalErrorFull() instead")
    void getMusicExportTracksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicExportTracksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicPreferencesExportSignalErrorFull() instead")
    void getMusicPreferencesExportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicPreferencesExportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMusicPreferencesExportVendorSignalErrorFull() instead")
    void getMusicPreferencesExportVendorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMusicPreferencesExportVendorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMusicExportJobSignalErrorFull() instead")
    void postMusicExportJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postMusicExportJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMusicPreferencesExportSignalErrorFull() instead")
    void postMusicPreferencesExportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postMusicPreferencesExportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMusicPreferencesExportVendorSignalErrorFull() instead")
    void postMusicPreferencesExportVendorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postMusicPreferencesExportVendorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putMusicPreferencesExportVendorSignalErrorFull() instead")
    void putMusicPreferencesExportVendorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putMusicPreferencesExportVendorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
