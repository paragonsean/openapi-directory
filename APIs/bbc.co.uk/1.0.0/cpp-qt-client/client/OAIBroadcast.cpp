/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBroadcast.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBroadcast::OAIBroadcast(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBroadcast::OAIBroadcast() {
    this->initializeModel();
}

OAIBroadcast::~OAIBroadcast() {}

void OAIBroadcast::initializeModel() {

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_is_audio_described_isSet = false;
    m_is_audio_described_isValid = false;

    m_is_blanked_isSet = false;
    m_is_blanked_isValid = false;

    m_is_critical_isSet = false;
    m_is_critical_isValid = false;

    m_is_live_isSet = false;
    m_is_live_isValid = false;

    m_is_repeat_isSet = false;
    m_is_repeat_isValid = false;

    m_is_webcast_isSet = false;
    m_is_webcast_isValid = false;

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_programme_isSet = false;
    m_programme_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_version_pid_isSet = false;
    m_version_pid_isValid = false;
}

void OAIBroadcast::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBroadcast::fromJsonObject(QJsonObject json) {

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_is_audio_described_isValid = ::OpenAPI::fromJsonValue(m_is_audio_described, json[QString("is_audio_described")]);
    m_is_audio_described_isSet = !json[QString("is_audio_described")].isNull() && m_is_audio_described_isValid;

    m_is_blanked_isValid = ::OpenAPI::fromJsonValue(m_is_blanked, json[QString("is_blanked")]);
    m_is_blanked_isSet = !json[QString("is_blanked")].isNull() && m_is_blanked_isValid;

    m_is_critical_isValid = ::OpenAPI::fromJsonValue(m_is_critical, json[QString("is_critical")]);
    m_is_critical_isSet = !json[QString("is_critical")].isNull() && m_is_critical_isValid;

    m_is_live_isValid = ::OpenAPI::fromJsonValue(m_is_live, json[QString("is_live")]);
    m_is_live_isSet = !json[QString("is_live")].isNull() && m_is_live_isValid;

    m_is_repeat_isValid = ::OpenAPI::fromJsonValue(m_is_repeat, json[QString("is_repeat")]);
    m_is_repeat_isSet = !json[QString("is_repeat")].isNull() && m_is_repeat_isValid;

    m_is_webcast_isValid = ::OpenAPI::fromJsonValue(m_is_webcast, json[QString("is_webcast")]);
    m_is_webcast_isSet = !json[QString("is_webcast")].isNull() && m_is_webcast_isValid;

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_programme_isValid = ::OpenAPI::fromJsonValue(m_programme, json[QString("programme")]);
    m_programme_isSet = !json[QString("programme")].isNull() && m_programme_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("service_id")]);
    m_service_id_isSet = !json[QString("service_id")].isNull() && m_service_id_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_version_pid_isValid = ::OpenAPI::fromJsonValue(m_version_pid, json[QString("version_pid")]);
    m_version_pid_isSet = !json[QString("version_pid")].isNull() && m_version_pid_isValid;
}

QString OAIBroadcast::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBroadcast::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_is_audio_described_isSet) {
        obj.insert(QString("is_audio_described"), ::OpenAPI::toJsonValue(m_is_audio_described));
    }
    if (m_is_blanked_isSet) {
        obj.insert(QString("is_blanked"), ::OpenAPI::toJsonValue(m_is_blanked));
    }
    if (m_is_critical_isSet) {
        obj.insert(QString("is_critical"), ::OpenAPI::toJsonValue(m_is_critical));
    }
    if (m_is_live_isSet) {
        obj.insert(QString("is_live"), ::OpenAPI::toJsonValue(m_is_live));
    }
    if (m_is_repeat_isSet) {
        obj.insert(QString("is_repeat"), ::OpenAPI::toJsonValue(m_is_repeat));
    }
    if (m_is_webcast_isSet) {
        obj.insert(QString("is_webcast"), ::OpenAPI::toJsonValue(m_is_webcast));
    }
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_programme.isSet()) {
        obj.insert(QString("programme"), ::OpenAPI::toJsonValue(m_programme));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("service_id"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_version_pid_isSet) {
        obj.insert(QString("version_pid"), ::OpenAPI::toJsonValue(m_version_pid));
    }
    return obj;
}

qint32 OAIBroadcast::getDuration() const {
    return m_duration;
}
void OAIBroadcast::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIBroadcast::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIBroadcast::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIBroadcast::getEnd() const {
    return m_end;
}
void OAIBroadcast::setEnd(const QString &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIBroadcast::is_end_Set() const{
    return m_end_isSet;
}

bool OAIBroadcast::is_end_Valid() const{
    return m_end_isValid;
}

bool OAIBroadcast::isIsAudioDescribed() const {
    return m_is_audio_described;
}
void OAIBroadcast::setIsAudioDescribed(const bool &is_audio_described) {
    m_is_audio_described = is_audio_described;
    m_is_audio_described_isSet = true;
}

bool OAIBroadcast::is_is_audio_described_Set() const{
    return m_is_audio_described_isSet;
}

bool OAIBroadcast::is_is_audio_described_Valid() const{
    return m_is_audio_described_isValid;
}

bool OAIBroadcast::isIsBlanked() const {
    return m_is_blanked;
}
void OAIBroadcast::setIsBlanked(const bool &is_blanked) {
    m_is_blanked = is_blanked;
    m_is_blanked_isSet = true;
}

bool OAIBroadcast::is_is_blanked_Set() const{
    return m_is_blanked_isSet;
}

bool OAIBroadcast::is_is_blanked_Valid() const{
    return m_is_blanked_isValid;
}

bool OAIBroadcast::isIsCritical() const {
    return m_is_critical;
}
void OAIBroadcast::setIsCritical(const bool &is_critical) {
    m_is_critical = is_critical;
    m_is_critical_isSet = true;
}

bool OAIBroadcast::is_is_critical_Set() const{
    return m_is_critical_isSet;
}

bool OAIBroadcast::is_is_critical_Valid() const{
    return m_is_critical_isValid;
}

bool OAIBroadcast::isIsLive() const {
    return m_is_live;
}
void OAIBroadcast::setIsLive(const bool &is_live) {
    m_is_live = is_live;
    m_is_live_isSet = true;
}

bool OAIBroadcast::is_is_live_Set() const{
    return m_is_live_isSet;
}

bool OAIBroadcast::is_is_live_Valid() const{
    return m_is_live_isValid;
}

bool OAIBroadcast::isIsRepeat() const {
    return m_is_repeat;
}
void OAIBroadcast::setIsRepeat(const bool &is_repeat) {
    m_is_repeat = is_repeat;
    m_is_repeat_isSet = true;
}

bool OAIBroadcast::is_is_repeat_Set() const{
    return m_is_repeat_isSet;
}

bool OAIBroadcast::is_is_repeat_Valid() const{
    return m_is_repeat_isValid;
}

bool OAIBroadcast::isIsWebcast() const {
    return m_is_webcast;
}
void OAIBroadcast::setIsWebcast(const bool &is_webcast) {
    m_is_webcast = is_webcast;
    m_is_webcast_isSet = true;
}

bool OAIBroadcast::is_is_webcast_Set() const{
    return m_is_webcast_isSet;
}

bool OAIBroadcast::is_is_webcast_Valid() const{
    return m_is_webcast_isValid;
}

QString OAIBroadcast::getPid() const {
    return m_pid;
}
void OAIBroadcast::setPid(const QString &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAIBroadcast::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAIBroadcast::is_pid_Valid() const{
    return m_pid_isValid;
}

OAIProgrammeSummary OAIBroadcast::getProgramme() const {
    return m_programme;
}
void OAIBroadcast::setProgramme(const OAIProgrammeSummary &programme) {
    m_programme = programme;
    m_programme_isSet = true;
}

bool OAIBroadcast::is_programme_Set() const{
    return m_programme_isSet;
}

bool OAIBroadcast::is_programme_Valid() const{
    return m_programme_isValid;
}

QString OAIBroadcast::getServiceId() const {
    return m_service_id;
}
void OAIBroadcast::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIBroadcast::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIBroadcast::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAIBroadcast::getStart() const {
    return m_start;
}
void OAIBroadcast::setStart(const QString &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIBroadcast::is_start_Set() const{
    return m_start_isSet;
}

bool OAIBroadcast::is_start_Valid() const{
    return m_start_isValid;
}

QString OAIBroadcast::getType() const {
    return m_type;
}
void OAIBroadcast::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBroadcast::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBroadcast::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIBroadcast::getVersionPid() const {
    return m_version_pid;
}
void OAIBroadcast::setVersionPid(const QString &version_pid) {
    m_version_pid = version_pid;
    m_version_pid_isSet = true;
}

bool OAIBroadcast::is_version_pid_Set() const{
    return m_version_pid_isSet;
}

bool OAIBroadcast::is_version_pid_Valid() const{
    return m_version_pid_isValid;
}

bool OAIBroadcast::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_audio_described_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_blanked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_critical_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_live_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_repeat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_webcast_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_programme.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_pid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBroadcast::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_duration_isValid && m_end_isValid && m_is_audio_described_isValid && m_is_blanked_isValid && m_is_critical_isValid && m_is_live_isValid && m_is_repeat_isValid && m_is_webcast_isValid && m_pid_isValid && m_service_id_isValid && m_start_isValid && m_type_isValid && m_version_pid_isValid && true;
}

} // namespace OpenAPI
