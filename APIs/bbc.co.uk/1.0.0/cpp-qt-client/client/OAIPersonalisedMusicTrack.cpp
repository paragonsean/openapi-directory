/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPersonalisedMusicTrack.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPersonalisedMusicTrack::OAIPersonalisedMusicTrack(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPersonalisedMusicTrack::OAIPersonalisedMusicTrack() {
    this->initializeModel();
}

OAIPersonalisedMusicTrack::~OAIPersonalisedMusicTrack() {}

void OAIPersonalisedMusicTrack::initializeModel() {

    m_contributions_isSet = false;
    m_contributions_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_media_isSet = false;
    m_media_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIPersonalisedMusicTrack::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPersonalisedMusicTrack::fromJsonObject(QJsonObject json) {

    m_contributions_isValid = ::OpenAPI::fromJsonValue(m_contributions, json[QString("contributions")]);
    m_contributions_isSet = !json[QString("contributions")].isNull() && m_contributions_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_media_isValid = ::OpenAPI::fromJsonValue(m_media, json[QString("media")]);
    m_media_isSet = !json[QString("media")].isNull() && m_media_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIPersonalisedMusicTrack::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPersonalisedMusicTrack::asJsonObject() const {
    QJsonObject obj;
    if (m_contributions.size() > 0) {
        obj.insert(QString("contributions"), ::OpenAPI::toJsonValue(m_contributions));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_media.size() > 0) {
        obj.insert(QString("media"), ::OpenAPI::toJsonValue(m_media));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_version.isSet()) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<OAIPersonalisedMusicTrackContribution> OAIPersonalisedMusicTrack::getContributions() const {
    return m_contributions;
}
void OAIPersonalisedMusicTrack::setContributions(const QList<OAIPersonalisedMusicTrackContribution> &contributions) {
    m_contributions = contributions;
    m_contributions_isSet = true;
}

bool OAIPersonalisedMusicTrack::is_contributions_Set() const{
    return m_contributions_isSet;
}

bool OAIPersonalisedMusicTrack::is_contributions_Valid() const{
    return m_contributions_isValid;
}

QString OAIPersonalisedMusicTrack::getId() const {
    return m_id;
}
void OAIPersonalisedMusicTrack::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPersonalisedMusicTrack::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPersonalisedMusicTrack::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIPersonalisedMusicTrackImage> OAIPersonalisedMusicTrack::getImages() const {
    return m_images;
}
void OAIPersonalisedMusicTrack::setImages(const QList<OAIPersonalisedMusicTrackImage> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIPersonalisedMusicTrack::is_images_Set() const{
    return m_images_isSet;
}

bool OAIPersonalisedMusicTrack::is_images_Valid() const{
    return m_images_isValid;
}

QList<OAIPersonalisedMusicTrackMedia> OAIPersonalisedMusicTrack::getMedia() const {
    return m_media;
}
void OAIPersonalisedMusicTrack::setMedia(const QList<OAIPersonalisedMusicTrackMedia> &media) {
    m_media = media;
    m_media_isSet = true;
}

bool OAIPersonalisedMusicTrack::is_media_Set() const{
    return m_media_isSet;
}

bool OAIPersonalisedMusicTrack::is_media_Valid() const{
    return m_media_isValid;
}

QString OAIPersonalisedMusicTrack::getTitle() const {
    return m_title;
}
void OAIPersonalisedMusicTrack::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPersonalisedMusicTrack::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPersonalisedMusicTrack::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIPersonalisedMusicTrack::getType() const {
    return m_type;
}
void OAIPersonalisedMusicTrack::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPersonalisedMusicTrack::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPersonalisedMusicTrack::is_type_Valid() const{
    return m_type_isValid;
}

OAIPersonalisedMusicVersion OAIPersonalisedMusicTrack::getVersion() const {
    return m_version;
}
void OAIPersonalisedMusicTrack::setVersion(const OAIPersonalisedMusicVersion &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIPersonalisedMusicTrack::is_version_Set() const{
    return m_version_isSet;
}

bool OAIPersonalisedMusicTrack::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIPersonalisedMusicTrack::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contributions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_media.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPersonalisedMusicTrack::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contributions_isValid && m_id_isValid && m_images_isValid && m_media_isValid && m_title_isValid && m_type_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
