/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClipSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClipSummary::OAIClipSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClipSummary::OAIClipSummary() {
    this->initializeModel();
}

OAIClipSummary::~OAIClipSummary() {}

void OAIClipSummary::initializeModel() {

    m_ancestors_isSet = false;
    m_ancestors_isValid = false;

    m_available_versions_isSet = false;
    m_available_versions_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_network_summary_isSet = false;
    m_network_summary_isValid = false;

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_release_date_isSet = false;
    m_release_date_isValid = false;

    m_short_synopsis_isSet = false;
    m_short_synopsis_isValid = false;

    m_titles_isSet = false;
    m_titles_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIClipSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClipSummary::fromJsonObject(QJsonObject json) {

    m_ancestors_isValid = ::OpenAPI::fromJsonValue(m_ancestors, json[QString("ancestors")]);
    m_ancestors_isSet = !json[QString("ancestors")].isNull() && m_ancestors_isValid;

    m_available_versions_isValid = ::OpenAPI::fromJsonValue(m_available_versions, json[QString("available_versions")]);
    m_available_versions_isSet = !json[QString("available_versions")].isNull() && m_available_versions_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("media_type")]);
    m_media_type_isSet = !json[QString("media_type")].isNull() && m_media_type_isValid;

    m_network_summary_isValid = ::OpenAPI::fromJsonValue(m_network_summary, json[QString("network_summary")]);
    m_network_summary_isSet = !json[QString("network_summary")].isNull() && m_network_summary_isValid;

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_release_date_isValid = ::OpenAPI::fromJsonValue(m_release_date, json[QString("release_date")]);
    m_release_date_isSet = !json[QString("release_date")].isNull() && m_release_date_isValid;

    m_short_synopsis_isValid = ::OpenAPI::fromJsonValue(m_short_synopsis, json[QString("short_synopsis")]);
    m_short_synopsis_isSet = !json[QString("short_synopsis")].isNull() && m_short_synopsis_isValid;

    m_titles_isValid = ::OpenAPI::fromJsonValue(m_titles, json[QString("titles")]);
    m_titles_isSet = !json[QString("titles")].isNull() && m_titles_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIClipSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClipSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_ancestors.size() > 0) {
        obj.insert(QString("ancestors"), ::OpenAPI::toJsonValue(m_ancestors));
    }
    if (m_available_versions.size() > 0) {
        obj.insert(QString("available_versions"), ::OpenAPI::toJsonValue(m_available_versions));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_media_type_isSet) {
        obj.insert(QString("media_type"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_network_summary.isSet()) {
        obj.insert(QString("network_summary"), ::OpenAPI::toJsonValue(m_network_summary));
    }
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_release_date_isSet) {
        obj.insert(QString("release_date"), ::OpenAPI::toJsonValue(m_release_date));
    }
    if (m_short_synopsis_isSet) {
        obj.insert(QString("short_synopsis"), ::OpenAPI::toJsonValue(m_short_synopsis));
    }
    if (m_titles.isSet()) {
        obj.insert(QString("titles"), ::OpenAPI::toJsonValue(m_titles));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIAncestorSummary> OAIClipSummary::getAncestors() const {
    return m_ancestors;
}
void OAIClipSummary::setAncestors(const QList<OAIAncestorSummary> &ancestors) {
    m_ancestors = ancestors;
    m_ancestors_isSet = true;
}

bool OAIClipSummary::is_ancestors_Set() const{
    return m_ancestors_isSet;
}

bool OAIClipSummary::is_ancestors_Valid() const{
    return m_ancestors_isValid;
}

QList<OAIAvailableVersions> OAIClipSummary::getAvailableVersions() const {
    return m_available_versions;
}
void OAIClipSummary::setAvailableVersions(const QList<OAIAvailableVersions> &available_versions) {
    m_available_versions = available_versions;
    m_available_versions_isSet = true;
}

bool OAIClipSummary::is_available_versions_Set() const{
    return m_available_versions_isSet;
}

bool OAIClipSummary::is_available_versions_Valid() const{
    return m_available_versions_isValid;
}

QList<OAIImage> OAIClipSummary::getImages() const {
    return m_images;
}
void OAIClipSummary::setImages(const QList<OAIImage> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIClipSummary::is_images_Set() const{
    return m_images_isSet;
}

bool OAIClipSummary::is_images_Valid() const{
    return m_images_isValid;
}

QString OAIClipSummary::getMediaType() const {
    return m_media_type;
}
void OAIClipSummary::setMediaType(const QString &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAIClipSummary::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAIClipSummary::is_media_type_Valid() const{
    return m_media_type_isValid;
}

OAINetworkSummary OAIClipSummary::getNetworkSummary() const {
    return m_network_summary;
}
void OAIClipSummary::setNetworkSummary(const OAINetworkSummary &network_summary) {
    m_network_summary = network_summary;
    m_network_summary_isSet = true;
}

bool OAIClipSummary::is_network_summary_Set() const{
    return m_network_summary_isSet;
}

bool OAIClipSummary::is_network_summary_Valid() const{
    return m_network_summary_isValid;
}

QString OAIClipSummary::getPid() const {
    return m_pid;
}
void OAIClipSummary::setPid(const QString &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAIClipSummary::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAIClipSummary::is_pid_Valid() const{
    return m_pid_isValid;
}

QString OAIClipSummary::getReleaseDate() const {
    return m_release_date;
}
void OAIClipSummary::setReleaseDate(const QString &release_date) {
    m_release_date = release_date;
    m_release_date_isSet = true;
}

bool OAIClipSummary::is_release_date_Set() const{
    return m_release_date_isSet;
}

bool OAIClipSummary::is_release_date_Valid() const{
    return m_release_date_isValid;
}

QString OAIClipSummary::getShortSynopsis() const {
    return m_short_synopsis;
}
void OAIClipSummary::setShortSynopsis(const QString &short_synopsis) {
    m_short_synopsis = short_synopsis;
    m_short_synopsis_isSet = true;
}

bool OAIClipSummary::is_short_synopsis_Set() const{
    return m_short_synopsis_isSet;
}

bool OAIClipSummary::is_short_synopsis_Valid() const{
    return m_short_synopsis_isValid;
}

OAIProgrammeTitles OAIClipSummary::getTitles() const {
    return m_titles;
}
void OAIClipSummary::setTitles(const OAIProgrammeTitles &titles) {
    m_titles = titles;
    m_titles_isSet = true;
}

bool OAIClipSummary::is_titles_Set() const{
    return m_titles_isSet;
}

bool OAIClipSummary::is_titles_Valid() const{
    return m_titles_isValid;
}

QString OAIClipSummary::getType() const {
    return m_type;
}
void OAIClipSummary::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIClipSummary::is_type_Set() const{
    return m_type_isSet;
}

bool OAIClipSummary::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIClipSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ancestors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_synopsis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_titles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClipSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ancestors_isValid && m_available_versions_isValid && m_images_isValid && m_media_type_isValid && m_network_summary_isValid && m_pid_isValid && m_release_date_isValid && m_short_synopsis_isValid && m_titles_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
