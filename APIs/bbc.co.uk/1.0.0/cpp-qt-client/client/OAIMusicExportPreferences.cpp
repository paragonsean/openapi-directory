/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMusicExportPreferences.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMusicExportPreferences::OAIMusicExportPreferences(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMusicExportPreferences::OAIMusicExportPreferences() {
    this->initializeModel();
}

OAIMusicExportPreferences::~OAIMusicExportPreferences() {}

void OAIMusicExportPreferences::initializeModel() {

    m_access_expires_at_isSet = false;
    m_access_expires_at_isValid = false;

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_add_plus_export_isSet = false;
    m_add_plus_export_isValid = false;

    m_authorization_code_isSet = false;
    m_authorization_code_isValid = false;

    m_last_export_isSet = false;
    m_last_export_isValid = false;

    m_legacy_state_isSet = false;
    m_legacy_state_isValid = false;

    m_partner_id_isSet = false;
    m_partner_id_isValid = false;

    m_refresh_token_isSet = false;
    m_refresh_token_isValid = false;

    m_terms_isSet = false;
    m_terms_isValid = false;

    m_vendor_isSet = false;
    m_vendor_isValid = false;
}

void OAIMusicExportPreferences::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMusicExportPreferences::fromJsonObject(QJsonObject json) {

    m_access_expires_at_isValid = ::OpenAPI::fromJsonValue(m_access_expires_at, json[QString("access_expires_at")]);
    m_access_expires_at_isSet = !json[QString("access_expires_at")].isNull() && m_access_expires_at_isValid;

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("access_token")]);
    m_access_token_isSet = !json[QString("access_token")].isNull() && m_access_token_isValid;

    m_add_plus_export_isValid = ::OpenAPI::fromJsonValue(m_add_plus_export, json[QString("add_plus_export")]);
    m_add_plus_export_isSet = !json[QString("add_plus_export")].isNull() && m_add_plus_export_isValid;

    m_authorization_code_isValid = ::OpenAPI::fromJsonValue(m_authorization_code, json[QString("authorization_code")]);
    m_authorization_code_isSet = !json[QString("authorization_code")].isNull() && m_authorization_code_isValid;

    m_last_export_isValid = ::OpenAPI::fromJsonValue(m_last_export, json[QString("last_export")]);
    m_last_export_isSet = !json[QString("last_export")].isNull() && m_last_export_isValid;

    m_legacy_state_isValid = ::OpenAPI::fromJsonValue(m_legacy_state, json[QString("legacy_state")]);
    m_legacy_state_isSet = !json[QString("legacy_state")].isNull() && m_legacy_state_isValid;

    m_partner_id_isValid = ::OpenAPI::fromJsonValue(m_partner_id, json[QString("partner_id")]);
    m_partner_id_isSet = !json[QString("partner_id")].isNull() && m_partner_id_isValid;

    m_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_refresh_token, json[QString("refresh_token")]);
    m_refresh_token_isSet = !json[QString("refresh_token")].isNull() && m_refresh_token_isValid;

    m_terms_isValid = ::OpenAPI::fromJsonValue(m_terms, json[QString("terms")]);
    m_terms_isSet = !json[QString("terms")].isNull() && m_terms_isValid;

    m_vendor_isValid = ::OpenAPI::fromJsonValue(m_vendor, json[QString("vendor")]);
    m_vendor_isSet = !json[QString("vendor")].isNull() && m_vendor_isValid;
}

QString OAIMusicExportPreferences::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMusicExportPreferences::asJsonObject() const {
    QJsonObject obj;
    if (m_access_expires_at_isSet) {
        obj.insert(QString("access_expires_at"), ::OpenAPI::toJsonValue(m_access_expires_at));
    }
    if (m_access_token_isSet) {
        obj.insert(QString("access_token"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_add_plus_export_isSet) {
        obj.insert(QString("add_plus_export"), ::OpenAPI::toJsonValue(m_add_plus_export));
    }
    if (m_authorization_code_isSet) {
        obj.insert(QString("authorization_code"), ::OpenAPI::toJsonValue(m_authorization_code));
    }
    if (m_last_export_isSet) {
        obj.insert(QString("last_export"), ::OpenAPI::toJsonValue(m_last_export));
    }
    if (m_legacy_state_isSet) {
        obj.insert(QString("legacy_state"), ::OpenAPI::toJsonValue(m_legacy_state));
    }
    if (m_partner_id_isSet) {
        obj.insert(QString("partner_id"), ::OpenAPI::toJsonValue(m_partner_id));
    }
    if (m_refresh_token_isSet) {
        obj.insert(QString("refresh_token"), ::OpenAPI::toJsonValue(m_refresh_token));
    }
    if (m_terms_isSet) {
        obj.insert(QString("terms"), ::OpenAPI::toJsonValue(m_terms));
    }
    if (m_vendor_isSet) {
        obj.insert(QString("vendor"), ::OpenAPI::toJsonValue(m_vendor));
    }
    return obj;
}

QString OAIMusicExportPreferences::getAccessExpiresAt() const {
    return m_access_expires_at;
}
void OAIMusicExportPreferences::setAccessExpiresAt(const QString &access_expires_at) {
    m_access_expires_at = access_expires_at;
    m_access_expires_at_isSet = true;
}

bool OAIMusicExportPreferences::is_access_expires_at_Set() const{
    return m_access_expires_at_isSet;
}

bool OAIMusicExportPreferences::is_access_expires_at_Valid() const{
    return m_access_expires_at_isValid;
}

QString OAIMusicExportPreferences::getAccessToken() const {
    return m_access_token;
}
void OAIMusicExportPreferences::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAIMusicExportPreferences::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAIMusicExportPreferences::is_access_token_Valid() const{
    return m_access_token_isValid;
}

bool OAIMusicExportPreferences::isAddPlusExport() const {
    return m_add_plus_export;
}
void OAIMusicExportPreferences::setAddPlusExport(const bool &add_plus_export) {
    m_add_plus_export = add_plus_export;
    m_add_plus_export_isSet = true;
}

bool OAIMusicExportPreferences::is_add_plus_export_Set() const{
    return m_add_plus_export_isSet;
}

bool OAIMusicExportPreferences::is_add_plus_export_Valid() const{
    return m_add_plus_export_isValid;
}

QString OAIMusicExportPreferences::getAuthorizationCode() const {
    return m_authorization_code;
}
void OAIMusicExportPreferences::setAuthorizationCode(const QString &authorization_code) {
    m_authorization_code = authorization_code;
    m_authorization_code_isSet = true;
}

bool OAIMusicExportPreferences::is_authorization_code_Set() const{
    return m_authorization_code_isSet;
}

bool OAIMusicExportPreferences::is_authorization_code_Valid() const{
    return m_authorization_code_isValid;
}

QString OAIMusicExportPreferences::getLastExport() const {
    return m_last_export;
}
void OAIMusicExportPreferences::setLastExport(const QString &last_export) {
    m_last_export = last_export;
    m_last_export_isSet = true;
}

bool OAIMusicExportPreferences::is_last_export_Set() const{
    return m_last_export_isSet;
}

bool OAIMusicExportPreferences::is_last_export_Valid() const{
    return m_last_export_isValid;
}

QString OAIMusicExportPreferences::getLegacyState() const {
    return m_legacy_state;
}
void OAIMusicExportPreferences::setLegacyState(const QString &legacy_state) {
    m_legacy_state = legacy_state;
    m_legacy_state_isSet = true;
}

bool OAIMusicExportPreferences::is_legacy_state_Set() const{
    return m_legacy_state_isSet;
}

bool OAIMusicExportPreferences::is_legacy_state_Valid() const{
    return m_legacy_state_isValid;
}

QString OAIMusicExportPreferences::getPartnerId() const {
    return m_partner_id;
}
void OAIMusicExportPreferences::setPartnerId(const QString &partner_id) {
    m_partner_id = partner_id;
    m_partner_id_isSet = true;
}

bool OAIMusicExportPreferences::is_partner_id_Set() const{
    return m_partner_id_isSet;
}

bool OAIMusicExportPreferences::is_partner_id_Valid() const{
    return m_partner_id_isValid;
}

QString OAIMusicExportPreferences::getRefreshToken() const {
    return m_refresh_token;
}
void OAIMusicExportPreferences::setRefreshToken(const QString &refresh_token) {
    m_refresh_token = refresh_token;
    m_refresh_token_isSet = true;
}

bool OAIMusicExportPreferences::is_refresh_token_Set() const{
    return m_refresh_token_isSet;
}

bool OAIMusicExportPreferences::is_refresh_token_Valid() const{
    return m_refresh_token_isValid;
}

bool OAIMusicExportPreferences::isTerms() const {
    return m_terms;
}
void OAIMusicExportPreferences::setTerms(const bool &terms) {
    m_terms = terms;
    m_terms_isSet = true;
}

bool OAIMusicExportPreferences::is_terms_Set() const{
    return m_terms_isSet;
}

bool OAIMusicExportPreferences::is_terms_Valid() const{
    return m_terms_isValid;
}

QString OAIMusicExportPreferences::getVendor() const {
    return m_vendor;
}
void OAIMusicExportPreferences::setVendor(const QString &vendor) {
    m_vendor = vendor;
    m_vendor_isSet = true;
}

bool OAIMusicExportPreferences::is_vendor_Set() const{
    return m_vendor_isSet;
}

bool OAIMusicExportPreferences::is_vendor_Valid() const{
    return m_vendor_isValid;
}

bool OAIMusicExportPreferences::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_plus_export_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_export_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legacy_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMusicExportPreferences::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_expires_at_isValid && m_access_token_isValid && m_add_plus_export_isValid && m_authorization_code_isValid && m_last_export_isValid && m_legacy_state_isValid && m_partner_id_isValid && m_refresh_token_isValid && m_terms_isValid && m_vendor_isValid && true;
}

} // namespace OpenAPI
