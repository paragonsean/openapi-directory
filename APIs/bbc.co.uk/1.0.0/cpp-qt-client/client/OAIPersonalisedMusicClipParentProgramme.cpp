/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPersonalisedMusicClipParentProgramme.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPersonalisedMusicClipParentProgramme::OAIPersonalisedMusicClipParentProgramme(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPersonalisedMusicClipParentProgramme::OAIPersonalisedMusicClipParentProgramme() {
    this->initializeModel();
}

OAIPersonalisedMusicClipParentProgramme::~OAIPersonalisedMusicClipParentProgramme() {}

void OAIPersonalisedMusicClipParentProgramme::initializeModel() {

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIPersonalisedMusicClipParentProgramme::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPersonalisedMusicClipParentProgramme::fromJsonObject(QJsonObject json) {

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entityType")]);
    m_entity_type_isSet = !json[QString("entityType")].isNull() && m_entity_type_isValid;

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIPersonalisedMusicClipParentProgramme::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPersonalisedMusicClipParentProgramme::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_type_isSet) {
        obj.insert(QString("entityType"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIPersonalisedMusicClipParentProgramme::getEntityType() const {
    return m_entity_type;
}
void OAIPersonalisedMusicClipParentProgramme::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIPersonalisedMusicClipParentProgramme::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIPersonalisedMusicClipParentProgramme::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIPersonalisedMusicClipParentProgramme::getPid() const {
    return m_pid;
}
void OAIPersonalisedMusicClipParentProgramme::setPid(const QString &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAIPersonalisedMusicClipParentProgramme::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAIPersonalisedMusicClipParentProgramme::is_pid_Valid() const{
    return m_pid_isValid;
}

QString OAIPersonalisedMusicClipParentProgramme::getTitle() const {
    return m_title;
}
void OAIPersonalisedMusicClipParentProgramme::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPersonalisedMusicClipParentProgramme::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPersonalisedMusicClipParentProgramme::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIPersonalisedMusicClipParentProgramme::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPersonalisedMusicClipParentProgramme::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
