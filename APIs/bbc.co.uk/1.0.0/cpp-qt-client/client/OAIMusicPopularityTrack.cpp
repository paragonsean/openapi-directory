/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMusicPopularityTrack.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMusicPopularityTrack::OAIMusicPopularityTrack(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMusicPopularityTrack::OAIMusicPopularityTrack() {
    this->initializeModel();
}

OAIMusicPopularityTrack::~OAIMusicPopularityTrack() {}

void OAIMusicPopularityTrack::initializeModel() {

    m_album_isSet = false;
    m_album_isValid = false;

    m_artist_gid_isSet = false;
    m_artist_gid_isValid = false;

    m_artist_name_isSet = false;
    m_artist_name_isValid = false;

    m_artists_isSet = false;
    m_artists_isValid = false;

    m_base_title_isSet = false;
    m_base_title_isValid = false;

    m_classical_isSet = false;
    m_classical_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_merged_ids_isSet = false;
    m_merged_ids_isValid = false;

    m_preferred_multiplay_record_audio_isSet = false;
    m_preferred_multiplay_record_audio_isValid = false;

    m_preferred_record_audio_isSet = false;
    m_preferred_record_audio_isValid = false;

    m_radio_edit_isSet = false;
    m_radio_edit_isValid = false;

    m_record_audio_isSet = false;
    m_record_audio_isValid = false;

    m_record_image_href_isSet = false;
    m_record_image_href_isValid = false;

    m_record_image_pid_isSet = false;
    m_record_image_pid_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIMusicPopularityTrack::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMusicPopularityTrack::fromJsonObject(QJsonObject json) {

    m_album_isValid = ::OpenAPI::fromJsonValue(m_album, json[QString("album")]);
    m_album_isSet = !json[QString("album")].isNull() && m_album_isValid;

    m_artist_gid_isValid = ::OpenAPI::fromJsonValue(m_artist_gid, json[QString("artistGid")]);
    m_artist_gid_isSet = !json[QString("artistGid")].isNull() && m_artist_gid_isValid;

    m_artist_name_isValid = ::OpenAPI::fromJsonValue(m_artist_name, json[QString("artistName")]);
    m_artist_name_isSet = !json[QString("artistName")].isNull() && m_artist_name_isValid;

    m_artists_isValid = ::OpenAPI::fromJsonValue(m_artists, json[QString("artists")]);
    m_artists_isSet = !json[QString("artists")].isNull() && m_artists_isValid;

    m_base_title_isValid = ::OpenAPI::fromJsonValue(m_base_title, json[QString("baseTitle")]);
    m_base_title_isSet = !json[QString("baseTitle")].isNull() && m_base_title_isValid;

    m_classical_isValid = ::OpenAPI::fromJsonValue(m_classical, json[QString("classical")]);
    m_classical_isSet = !json[QString("classical")].isNull() && m_classical_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_merged_ids_isValid = ::OpenAPI::fromJsonValue(m_merged_ids, json[QString("mergedIds")]);
    m_merged_ids_isSet = !json[QString("mergedIds")].isNull() && m_merged_ids_isValid;

    m_preferred_multiplay_record_audio_isValid = ::OpenAPI::fromJsonValue(m_preferred_multiplay_record_audio, json[QString("preferredMultiplayRecordAudio")]);
    m_preferred_multiplay_record_audio_isSet = !json[QString("preferredMultiplayRecordAudio")].isNull() && m_preferred_multiplay_record_audio_isValid;

    m_preferred_record_audio_isValid = ::OpenAPI::fromJsonValue(m_preferred_record_audio, json[QString("preferredRecordAudio")]);
    m_preferred_record_audio_isSet = !json[QString("preferredRecordAudio")].isNull() && m_preferred_record_audio_isValid;

    m_radio_edit_isValid = ::OpenAPI::fromJsonValue(m_radio_edit, json[QString("radioEdit")]);
    m_radio_edit_isSet = !json[QString("radioEdit")].isNull() && m_radio_edit_isValid;

    m_record_audio_isValid = ::OpenAPI::fromJsonValue(m_record_audio, json[QString("recordAudio")]);
    m_record_audio_isSet = !json[QString("recordAudio")].isNull() && m_record_audio_isValid;

    m_record_image_href_isValid = ::OpenAPI::fromJsonValue(m_record_image_href, json[QString("recordImageHref")]);
    m_record_image_href_isSet = !json[QString("recordImageHref")].isNull() && m_record_image_href_isValid;

    m_record_image_pid_isValid = ::OpenAPI::fromJsonValue(m_record_image_pid, json[QString("recordImagePid")]);
    m_record_image_pid_isSet = !json[QString("recordImagePid")].isNull() && m_record_image_pid_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIMusicPopularityTrack::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMusicPopularityTrack::asJsonObject() const {
    QJsonObject obj;
    if (m_album_isSet) {
        obj.insert(QString("album"), ::OpenAPI::toJsonValue(m_album));
    }
    if (m_artist_gid_isSet) {
        obj.insert(QString("artistGid"), ::OpenAPI::toJsonValue(m_artist_gid));
    }
    if (m_artist_name_isSet) {
        obj.insert(QString("artistName"), ::OpenAPI::toJsonValue(m_artist_name));
    }
    if (m_artists.size() > 0) {
        obj.insert(QString("artists"), ::OpenAPI::toJsonValue(m_artists));
    }
    if (m_base_title_isSet) {
        obj.insert(QString("baseTitle"), ::OpenAPI::toJsonValue(m_base_title));
    }
    if (m_classical_isSet) {
        obj.insert(QString("classical"), ::OpenAPI::toJsonValue(m_classical));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_merged_ids.size() > 0) {
        obj.insert(QString("mergedIds"), ::OpenAPI::toJsonValue(m_merged_ids));
    }
    if (m_preferred_multiplay_record_audio.isSet()) {
        obj.insert(QString("preferredMultiplayRecordAudio"), ::OpenAPI::toJsonValue(m_preferred_multiplay_record_audio));
    }
    if (m_preferred_record_audio.isSet()) {
        obj.insert(QString("preferredRecordAudio"), ::OpenAPI::toJsonValue(m_preferred_record_audio));
    }
    if (m_radio_edit_isSet) {
        obj.insert(QString("radioEdit"), ::OpenAPI::toJsonValue(m_radio_edit));
    }
    if (m_record_audio.size() > 0) {
        obj.insert(QString("recordAudio"), ::OpenAPI::toJsonValue(m_record_audio));
    }
    if (m_record_image_href_isSet) {
        obj.insert(QString("recordImageHref"), ::OpenAPI::toJsonValue(m_record_image_href));
    }
    if (m_record_image_pid_isSet) {
        obj.insert(QString("recordImagePid"), ::OpenAPI::toJsonValue(m_record_image_pid));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIMusicPopularityTrack::getAlbum() const {
    return m_album;
}
void OAIMusicPopularityTrack::setAlbum(const QString &album) {
    m_album = album;
    m_album_isSet = true;
}

bool OAIMusicPopularityTrack::is_album_Set() const{
    return m_album_isSet;
}

bool OAIMusicPopularityTrack::is_album_Valid() const{
    return m_album_isValid;
}

QString OAIMusicPopularityTrack::getArtistGid() const {
    return m_artist_gid;
}
void OAIMusicPopularityTrack::setArtistGid(const QString &artist_gid) {
    m_artist_gid = artist_gid;
    m_artist_gid_isSet = true;
}

bool OAIMusicPopularityTrack::is_artist_gid_Set() const{
    return m_artist_gid_isSet;
}

bool OAIMusicPopularityTrack::is_artist_gid_Valid() const{
    return m_artist_gid_isValid;
}

QString OAIMusicPopularityTrack::getArtistName() const {
    return m_artist_name;
}
void OAIMusicPopularityTrack::setArtistName(const QString &artist_name) {
    m_artist_name = artist_name;
    m_artist_name_isSet = true;
}

bool OAIMusicPopularityTrack::is_artist_name_Set() const{
    return m_artist_name_isSet;
}

bool OAIMusicPopularityTrack::is_artist_name_Valid() const{
    return m_artist_name_isValid;
}

QList<OAIMusicTrackArtist> OAIMusicPopularityTrack::getArtists() const {
    return m_artists;
}
void OAIMusicPopularityTrack::setArtists(const QList<OAIMusicTrackArtist> &artists) {
    m_artists = artists;
    m_artists_isSet = true;
}

bool OAIMusicPopularityTrack::is_artists_Set() const{
    return m_artists_isSet;
}

bool OAIMusicPopularityTrack::is_artists_Valid() const{
    return m_artists_isValid;
}

QString OAIMusicPopularityTrack::getBaseTitle() const {
    return m_base_title;
}
void OAIMusicPopularityTrack::setBaseTitle(const QString &base_title) {
    m_base_title = base_title;
    m_base_title_isSet = true;
}

bool OAIMusicPopularityTrack::is_base_title_Set() const{
    return m_base_title_isSet;
}

bool OAIMusicPopularityTrack::is_base_title_Valid() const{
    return m_base_title_isValid;
}

bool OAIMusicPopularityTrack::isClassical() const {
    return m_classical;
}
void OAIMusicPopularityTrack::setClassical(const bool &classical) {
    m_classical = classical;
    m_classical_isSet = true;
}

bool OAIMusicPopularityTrack::is_classical_Set() const{
    return m_classical_isSet;
}

bool OAIMusicPopularityTrack::is_classical_Valid() const{
    return m_classical_isValid;
}

QString OAIMusicPopularityTrack::getId() const {
    return m_id;
}
void OAIMusicPopularityTrack::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMusicPopularityTrack::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMusicPopularityTrack::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIMusicPopularityTrack::getMergedIds() const {
    return m_merged_ids;
}
void OAIMusicPopularityTrack::setMergedIds(const QList<QString> &merged_ids) {
    m_merged_ids = merged_ids;
    m_merged_ids_isSet = true;
}

bool OAIMusicPopularityTrack::is_merged_ids_Set() const{
    return m_merged_ids_isSet;
}

bool OAIMusicPopularityTrack::is_merged_ids_Valid() const{
    return m_merged_ids_isValid;
}

OAIMusicRecordAudio OAIMusicPopularityTrack::getPreferredMultiplayRecordAudio() const {
    return m_preferred_multiplay_record_audio;
}
void OAIMusicPopularityTrack::setPreferredMultiplayRecordAudio(const OAIMusicRecordAudio &preferred_multiplay_record_audio) {
    m_preferred_multiplay_record_audio = preferred_multiplay_record_audio;
    m_preferred_multiplay_record_audio_isSet = true;
}

bool OAIMusicPopularityTrack::is_preferred_multiplay_record_audio_Set() const{
    return m_preferred_multiplay_record_audio_isSet;
}

bool OAIMusicPopularityTrack::is_preferred_multiplay_record_audio_Valid() const{
    return m_preferred_multiplay_record_audio_isValid;
}

OAIMusicRecordAudio OAIMusicPopularityTrack::getPreferredRecordAudio() const {
    return m_preferred_record_audio;
}
void OAIMusicPopularityTrack::setPreferredRecordAudio(const OAIMusicRecordAudio &preferred_record_audio) {
    m_preferred_record_audio = preferred_record_audio;
    m_preferred_record_audio_isSet = true;
}

bool OAIMusicPopularityTrack::is_preferred_record_audio_Set() const{
    return m_preferred_record_audio_isSet;
}

bool OAIMusicPopularityTrack::is_preferred_record_audio_Valid() const{
    return m_preferred_record_audio_isValid;
}

bool OAIMusicPopularityTrack::isRadioEdit() const {
    return m_radio_edit;
}
void OAIMusicPopularityTrack::setRadioEdit(const bool &radio_edit) {
    m_radio_edit = radio_edit;
    m_radio_edit_isSet = true;
}

bool OAIMusicPopularityTrack::is_radio_edit_Set() const{
    return m_radio_edit_isSet;
}

bool OAIMusicPopularityTrack::is_radio_edit_Valid() const{
    return m_radio_edit_isValid;
}

QList<OAIMusicRecordAudio> OAIMusicPopularityTrack::getRecordAudio() const {
    return m_record_audio;
}
void OAIMusicPopularityTrack::setRecordAudio(const QList<OAIMusicRecordAudio> &record_audio) {
    m_record_audio = record_audio;
    m_record_audio_isSet = true;
}

bool OAIMusicPopularityTrack::is_record_audio_Set() const{
    return m_record_audio_isSet;
}

bool OAIMusicPopularityTrack::is_record_audio_Valid() const{
    return m_record_audio_isValid;
}

QString OAIMusicPopularityTrack::getRecordImageHref() const {
    return m_record_image_href;
}
void OAIMusicPopularityTrack::setRecordImageHref(const QString &record_image_href) {
    m_record_image_href = record_image_href;
    m_record_image_href_isSet = true;
}

bool OAIMusicPopularityTrack::is_record_image_href_Set() const{
    return m_record_image_href_isSet;
}

bool OAIMusicPopularityTrack::is_record_image_href_Valid() const{
    return m_record_image_href_isValid;
}

QString OAIMusicPopularityTrack::getRecordImagePid() const {
    return m_record_image_pid;
}
void OAIMusicPopularityTrack::setRecordImagePid(const QString &record_image_pid) {
    m_record_image_pid = record_image_pid;
    m_record_image_pid_isSet = true;
}

bool OAIMusicPopularityTrack::is_record_image_pid_Set() const{
    return m_record_image_pid_isSet;
}

bool OAIMusicPopularityTrack::is_record_image_pid_Valid() const{
    return m_record_image_pid_isValid;
}

qint32 OAIMusicPopularityTrack::getScore() const {
    return m_score;
}
void OAIMusicPopularityTrack::setScore(const qint32 &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIMusicPopularityTrack::is_score_Set() const{
    return m_score_isSet;
}

bool OAIMusicPopularityTrack::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIMusicPopularityTrack::getTitle() const {
    return m_title;
}
void OAIMusicPopularityTrack::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIMusicPopularityTrack::is_title_Set() const{
    return m_title_isSet;
}

bool OAIMusicPopularityTrack::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIMusicPopularityTrack::getType() const {
    return m_type;
}
void OAIMusicPopularityTrack::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMusicPopularityTrack::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMusicPopularityTrack::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIMusicPopularityTrack::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_album_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_gid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classical_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merged_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_multiplay_record_audio.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_record_audio.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_radio_edit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_audio.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_image_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_image_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMusicPopularityTrack::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_score_isValid && true;
}

} // namespace OpenAPI
