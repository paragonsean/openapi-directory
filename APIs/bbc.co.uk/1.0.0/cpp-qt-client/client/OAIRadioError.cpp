/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRadioError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRadioError::OAIRadioError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRadioError::OAIRadioError() {
    this->initializeModel();
}

OAIRadioError::~OAIRadioError() {}

void OAIRadioError::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIRadioError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRadioError::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIRadioError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRadioError::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIRadioError::getCode() const {
    return m_code;
}
void OAIRadioError::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIRadioError::is_code_Set() const{
    return m_code_isSet;
}

bool OAIRadioError::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIRadioError::getDetail() const {
    return m_detail;
}
void OAIRadioError::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIRadioError::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIRadioError::is_detail_Valid() const{
    return m_detail_isValid;
}

QString OAIRadioError::getHref() const {
    return m_href;
}
void OAIRadioError::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIRadioError::is_href_Set() const{
    return m_href_isSet;
}

bool OAIRadioError::is_href_Valid() const{
    return m_href_isValid;
}

QString OAIRadioError::getId() const {
    return m_id;
}
void OAIRadioError::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRadioError::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRadioError::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIRadioError::getStatus() const {
    return m_status;
}
void OAIRadioError::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRadioError::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRadioError::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIRadioError::getTimestamp() const {
    return m_timestamp;
}
void OAIRadioError::setTimestamp(const qint32 &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIRadioError::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIRadioError::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIRadioError::getTitle() const {
    return m_title;
}
void OAIRadioError::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIRadioError::is_title_Set() const{
    return m_title_isSet;
}

bool OAIRadioError::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIRadioError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRadioError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_detail_isValid && m_href_isValid && m_id_isValid && m_status_isValid && m_timestamp_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
