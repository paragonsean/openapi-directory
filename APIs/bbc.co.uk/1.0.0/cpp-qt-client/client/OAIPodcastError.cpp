/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPodcastError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPodcastError::OAIPodcastError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPodcastError::OAIPodcastError() {
    this->initializeModel();
}

OAIPodcastError::~OAIPodcastError() {}

void OAIPodcastError::initializeModel() {

    m_href_isSet = false;
    m_href_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_replied_at_isSet = false;
    m_replied_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIPodcastError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPodcastError::fromJsonObject(QJsonObject json) {

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_replied_at_isValid = ::OpenAPI::fromJsonValue(m_replied_at, json[QString("replied_at")]);
    m_replied_at_isSet = !json[QString("replied_at")].isNull() && m_replied_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIPodcastError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPodcastError::asJsonObject() const {
    QJsonObject obj;
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_replied_at_isSet) {
        obj.insert(QString("replied_at"), ::OpenAPI::toJsonValue(m_replied_at));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIPodcastError::getHref() const {
    return m_href;
}
void OAIPodcastError::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIPodcastError::is_href_Set() const{
    return m_href_isSet;
}

bool OAIPodcastError::is_href_Valid() const{
    return m_href_isValid;
}

QString OAIPodcastError::getId() const {
    return m_id;
}
void OAIPodcastError::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPodcastError::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPodcastError::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPodcastError::getMessage() const {
    return m_message;
}
void OAIPodcastError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIPodcastError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIPodcastError::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIPodcastError::getRepliedAt() const {
    return m_replied_at;
}
void OAIPodcastError::setRepliedAt(const QString &replied_at) {
    m_replied_at = replied_at;
    m_replied_at_isSet = true;
}

bool OAIPodcastError::is_replied_at_Set() const{
    return m_replied_at_isSet;
}

bool OAIPodcastError::is_replied_at_Valid() const{
    return m_replied_at_isValid;
}

double OAIPodcastError::getStatus() const {
    return m_status;
}
void OAIPodcastError::setStatus(const double &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPodcastError::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPodcastError::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIPodcastError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replied_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPodcastError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
