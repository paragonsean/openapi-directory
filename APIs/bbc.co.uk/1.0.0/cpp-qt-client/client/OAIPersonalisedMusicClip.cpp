/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPersonalisedMusicClip.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPersonalisedMusicClip::OAIPersonalisedMusicClip(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPersonalisedMusicClip::OAIPersonalisedMusicClip() {
    this->initializeModel();
}

OAIPersonalisedMusicClip::~OAIPersonalisedMusicClip() {}

void OAIPersonalisedMusicClip::initializeModel() {

    m_contributors_isSet = false;
    m_contributors_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_masterbrand_mid_isSet = false;
    m_masterbrand_mid_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_parent_programme_isSet = false;
    m_parent_programme_isValid = false;

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_synopsis_isSet = false;
    m_synopsis_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIPersonalisedMusicClip::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPersonalisedMusicClip::fromJsonObject(QJsonObject json) {

    m_contributors_isValid = ::OpenAPI::fromJsonValue(m_contributors, json[QString("contributors")]);
    m_contributors_isSet = !json[QString("contributors")].isNull() && m_contributors_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entityType")]);
    m_entity_type_isSet = !json[QString("entityType")].isNull() && m_entity_type_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_masterbrand_mid_isValid = ::OpenAPI::fromJsonValue(m_masterbrand_mid, json[QString("masterbrandMid")]);
    m_masterbrand_mid_isSet = !json[QString("masterbrandMid")].isNull() && m_masterbrand_mid_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("mediaType")]);
    m_media_type_isSet = !json[QString("mediaType")].isNull() && m_media_type_isValid;

    m_parent_programme_isValid = ::OpenAPI::fromJsonValue(m_parent_programme, json[QString("parentProgramme")]);
    m_parent_programme_isSet = !json[QString("parentProgramme")].isNull() && m_parent_programme_isValid;

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_synopsis_isValid = ::OpenAPI::fromJsonValue(m_synopsis, json[QString("synopsis")]);
    m_synopsis_isSet = !json[QString("synopsis")].isNull() && m_synopsis_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIPersonalisedMusicClip::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPersonalisedMusicClip::asJsonObject() const {
    QJsonObject obj;
    if (m_contributors.size() > 0) {
        obj.insert(QString("contributors"), ::OpenAPI::toJsonValue(m_contributors));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entityType"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_masterbrand_mid_isSet) {
        obj.insert(QString("masterbrandMid"), ::OpenAPI::toJsonValue(m_masterbrand_mid));
    }
    if (m_media_type_isSet) {
        obj.insert(QString("mediaType"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_parent_programme.isSet()) {
        obj.insert(QString("parentProgramme"), ::OpenAPI::toJsonValue(m_parent_programme));
    }
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_synopsis_isSet) {
        obj.insert(QString("synopsis"), ::OpenAPI::toJsonValue(m_synopsis));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_version.isSet()) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<QString> OAIPersonalisedMusicClip::getContributors() const {
    return m_contributors;
}
void OAIPersonalisedMusicClip::setContributors(const QList<QString> &contributors) {
    m_contributors = contributors;
    m_contributors_isSet = true;
}

bool OAIPersonalisedMusicClip::is_contributors_Set() const{
    return m_contributors_isSet;
}

bool OAIPersonalisedMusicClip::is_contributors_Valid() const{
    return m_contributors_isValid;
}

QString OAIPersonalisedMusicClip::getEndDate() const {
    return m_end_date;
}
void OAIPersonalisedMusicClip::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIPersonalisedMusicClip::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIPersonalisedMusicClip::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIPersonalisedMusicClip::getEntityType() const {
    return m_entity_type;
}
void OAIPersonalisedMusicClip::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIPersonalisedMusicClip::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIPersonalisedMusicClip::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIPersonalisedMusicClip::getImageUrl() const {
    return m_image_url;
}
void OAIPersonalisedMusicClip::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIPersonalisedMusicClip::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIPersonalisedMusicClip::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAIPersonalisedMusicClip::getMasterbrandMid() const {
    return m_masterbrand_mid;
}
void OAIPersonalisedMusicClip::setMasterbrandMid(const QString &masterbrand_mid) {
    m_masterbrand_mid = masterbrand_mid;
    m_masterbrand_mid_isSet = true;
}

bool OAIPersonalisedMusicClip::is_masterbrand_mid_Set() const{
    return m_masterbrand_mid_isSet;
}

bool OAIPersonalisedMusicClip::is_masterbrand_mid_Valid() const{
    return m_masterbrand_mid_isValid;
}

QString OAIPersonalisedMusicClip::getMediaType() const {
    return m_media_type;
}
void OAIPersonalisedMusicClip::setMediaType(const QString &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAIPersonalisedMusicClip::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAIPersonalisedMusicClip::is_media_type_Valid() const{
    return m_media_type_isValid;
}

OAIPersonalisedMusicClipParentProgramme OAIPersonalisedMusicClip::getParentProgramme() const {
    return m_parent_programme;
}
void OAIPersonalisedMusicClip::setParentProgramme(const OAIPersonalisedMusicClipParentProgramme &parent_programme) {
    m_parent_programme = parent_programme;
    m_parent_programme_isSet = true;
}

bool OAIPersonalisedMusicClip::is_parent_programme_Set() const{
    return m_parent_programme_isSet;
}

bool OAIPersonalisedMusicClip::is_parent_programme_Valid() const{
    return m_parent_programme_isValid;
}

QString OAIPersonalisedMusicClip::getPid() const {
    return m_pid;
}
void OAIPersonalisedMusicClip::setPid(const QString &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAIPersonalisedMusicClip::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAIPersonalisedMusicClip::is_pid_Valid() const{
    return m_pid_isValid;
}

QString OAIPersonalisedMusicClip::getStartDate() const {
    return m_start_date;
}
void OAIPersonalisedMusicClip::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIPersonalisedMusicClip::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIPersonalisedMusicClip::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIPersonalisedMusicClip::getSynopsis() const {
    return m_synopsis;
}
void OAIPersonalisedMusicClip::setSynopsis(const QString &synopsis) {
    m_synopsis = synopsis;
    m_synopsis_isSet = true;
}

bool OAIPersonalisedMusicClip::is_synopsis_Set() const{
    return m_synopsis_isSet;
}

bool OAIPersonalisedMusicClip::is_synopsis_Valid() const{
    return m_synopsis_isValid;
}

QString OAIPersonalisedMusicClip::getTitle() const {
    return m_title;
}
void OAIPersonalisedMusicClip::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPersonalisedMusicClip::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPersonalisedMusicClip::is_title_Valid() const{
    return m_title_isValid;
}

OAIPersonalisedMusicVersion OAIPersonalisedMusicClip::getVersion() const {
    return m_version;
}
void OAIPersonalisedMusicClip::setVersion(const OAIPersonalisedMusicVersion &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIPersonalisedMusicClip::is_version_Set() const{
    return m_version_isSet;
}

bool OAIPersonalisedMusicClip::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIPersonalisedMusicClip::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contributors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_masterbrand_mid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_programme.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synopsis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPersonalisedMusicClip::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
