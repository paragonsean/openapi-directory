/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMusicRecordAudio.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMusicRecordAudio::OAIMusicRecordAudio(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMusicRecordAudio::OAIMusicRecordAudio() {
    this->initializeModel();
}

OAIMusicRecordAudio::~OAIMusicRecordAudio() {}

void OAIMusicRecordAudio::initializeModel() {

    m_audio_type_isSet = false;
    m_audio_type_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;
}

void OAIMusicRecordAudio::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMusicRecordAudio::fromJsonObject(QJsonObject json) {

    m_audio_type_isValid = ::OpenAPI::fromJsonValue(m_audio_type, json[QString("audioType")]);
    m_audio_type_isSet = !json[QString("audioType")].isNull() && m_audio_type_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;
}

QString OAIMusicRecordAudio::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMusicRecordAudio::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_type_isSet) {
        obj.insert(QString("audioType"), ::OpenAPI::toJsonValue(m_audio_type));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    return obj;
}

QString OAIMusicRecordAudio::getAudioType() const {
    return m_audio_type;
}
void OAIMusicRecordAudio::setAudioType(const QString &audio_type) {
    m_audio_type = audio_type;
    m_audio_type_isSet = true;
}

bool OAIMusicRecordAudio::is_audio_type_Set() const{
    return m_audio_type_isSet;
}

bool OAIMusicRecordAudio::is_audio_type_Valid() const{
    return m_audio_type_isValid;
}

qint32 OAIMusicRecordAudio::getDuration() const {
    return m_duration;
}
void OAIMusicRecordAudio::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIMusicRecordAudio::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIMusicRecordAudio::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIMusicRecordAudio::getIdentifier() const {
    return m_identifier;
}
void OAIMusicRecordAudio::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIMusicRecordAudio::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIMusicRecordAudio::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAIMusicRecordAudio::getResourceType() const {
    return m_resource_type;
}
void OAIMusicRecordAudio::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIMusicRecordAudio::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIMusicRecordAudio::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

bool OAIMusicRecordAudio::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMusicRecordAudio::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_audio_type_isValid && m_duration_isValid && m_identifier_isValid && m_resource_type_isValid && true;
}

} // namespace OpenAPI
