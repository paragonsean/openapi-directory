/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisplayModule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisplayModule::OAIDisplayModule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisplayModule::OAIDisplayModule() {
    this->initializeModel();
}

OAIDisplayModule::~OAIDisplayModule() {}

void OAIDisplayModule::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIDisplayModule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDisplayModule::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIDisplayModule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDisplayModule::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAIDisplayModule::getDescription() const {
    return m_description;
}
void OAIDisplayModule::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDisplayModule::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDisplayModule::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDisplayModule::getTitle() const {
    return m_title;
}
void OAIDisplayModule::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIDisplayModule::is_title_Set() const{
    return m_title_isSet;
}

bool OAIDisplayModule::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIDisplayModule::getType() const {
    return m_type;
}
void OAIDisplayModule::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDisplayModule::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDisplayModule::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIDisplayModule::getUri() const {
    return m_uri;
}
void OAIDisplayModule::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIDisplayModule::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIDisplayModule::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIDisplayModule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDisplayModule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
