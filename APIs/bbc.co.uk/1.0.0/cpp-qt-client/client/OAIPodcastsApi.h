/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPodcastsApi_H
#define OAI_OAIPodcastsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPodcastEpisodesResponse.h"
#include "OAIPodcastErrorResponse.h"
#include "OAIPodcastsFeaturedResponse.h"
#include "OAIPodcastsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPodcastsApi : public QObject {
    Q_OBJECT

public:
    OAIPodcastsApi(const int timeOut = 0);
    ~OAIPodcastsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  pid QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getPodcastByPid(const QString &x_api_key, const QString &pid, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  pid QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getPodcastEpisodes(const QString &x_api_key, const QString &pid, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  network QString [optional]
    * @param[in]  network_url_key QString [optional]
    * @param[in]  category QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  coverage QString [optional]
    */
    virtual void getPodcasts(const QString &x_api_key, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &network = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &network_url_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &coverage = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api_key QString [required]
    */
    virtual void getPodcastsFeatured(const QString &x_api_key);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getPodcastByPidCallback(OAIHttpRequestWorker *worker);
    void getPodcastEpisodesCallback(OAIHttpRequestWorker *worker);
    void getPodcastsCallback(OAIHttpRequestWorker *worker);
    void getPodcastsFeaturedCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getPodcastByPidSignal(OAIPodcastsResponse summary);
    void getPodcastEpisodesSignal(OAIPodcastEpisodesResponse summary);
    void getPodcastsSignal(OAIPodcastsResponse summary);
    void getPodcastsFeaturedSignal(OAIPodcastsFeaturedResponse summary);


    void getPodcastByPidSignalFull(OAIHttpRequestWorker *worker, OAIPodcastsResponse summary);
    void getPodcastEpisodesSignalFull(OAIHttpRequestWorker *worker, OAIPodcastEpisodesResponse summary);
    void getPodcastsSignalFull(OAIHttpRequestWorker *worker, OAIPodcastsResponse summary);
    void getPodcastsFeaturedSignalFull(OAIHttpRequestWorker *worker, OAIPodcastsFeaturedResponse summary);

    Q_DECL_DEPRECATED_X("Use getPodcastByPidSignalError() instead")
    void getPodcastByPidSignalE(OAIPodcastsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPodcastByPidSignalError(OAIPodcastsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPodcastEpisodesSignalError() instead")
    void getPodcastEpisodesSignalE(OAIPodcastEpisodesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPodcastEpisodesSignalError(OAIPodcastEpisodesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPodcastsSignalError() instead")
    void getPodcastsSignalE(OAIPodcastsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPodcastsSignalError(OAIPodcastsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPodcastsFeaturedSignalError() instead")
    void getPodcastsFeaturedSignalE(OAIPodcastsFeaturedResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPodcastsFeaturedSignalError(OAIPodcastsFeaturedResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getPodcastByPidSignalErrorFull() instead")
    void getPodcastByPidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPodcastByPidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPodcastEpisodesSignalErrorFull() instead")
    void getPodcastEpisodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPodcastEpisodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPodcastsSignalErrorFull() instead")
    void getPodcastsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPodcastsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPodcastsFeaturedSignalErrorFull() instead")
    void getPodcastsFeaturedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPodcastsFeaturedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
