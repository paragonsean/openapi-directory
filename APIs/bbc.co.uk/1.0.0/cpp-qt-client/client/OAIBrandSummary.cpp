/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBrandSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBrandSummary::OAIBrandSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBrandSummary::OAIBrandSummary() {
    this->initializeModel();
}

OAIBrandSummary::~OAIBrandSummary() {}

void OAIBrandSummary::initializeModel() {

    m_available_versions_isSet = false;
    m_available_versions_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_latest_available_episodes_isSet = false;
    m_latest_available_episodes_isValid = false;

    m_network_summary_isSet = false;
    m_network_summary_isValid = false;

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_short_synopsis_isSet = false;
    m_short_synopsis_isValid = false;

    m_titles_isSet = false;
    m_titles_isValid = false;

    m_total_available_episodes_isSet = false;
    m_total_available_episodes_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIBrandSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBrandSummary::fromJsonObject(QJsonObject json) {

    m_available_versions_isValid = ::OpenAPI::fromJsonValue(m_available_versions, json[QString("available_versions")]);
    m_available_versions_isSet = !json[QString("available_versions")].isNull() && m_available_versions_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_latest_available_episodes_isValid = ::OpenAPI::fromJsonValue(m_latest_available_episodes, json[QString("latest_available_episodes")]);
    m_latest_available_episodes_isSet = !json[QString("latest_available_episodes")].isNull() && m_latest_available_episodes_isValid;

    m_network_summary_isValid = ::OpenAPI::fromJsonValue(m_network_summary, json[QString("network_summary")]);
    m_network_summary_isSet = !json[QString("network_summary")].isNull() && m_network_summary_isValid;

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_short_synopsis_isValid = ::OpenAPI::fromJsonValue(m_short_synopsis, json[QString("short_synopsis")]);
    m_short_synopsis_isSet = !json[QString("short_synopsis")].isNull() && m_short_synopsis_isValid;

    m_titles_isValid = ::OpenAPI::fromJsonValue(m_titles, json[QString("titles")]);
    m_titles_isSet = !json[QString("titles")].isNull() && m_titles_isValid;

    m_total_available_episodes_isValid = ::OpenAPI::fromJsonValue(m_total_available_episodes, json[QString("total_available_episodes")]);
    m_total_available_episodes_isSet = !json[QString("total_available_episodes")].isNull() && m_total_available_episodes_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIBrandSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBrandSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_available_versions.size() > 0) {
        obj.insert(QString("available_versions"), ::OpenAPI::toJsonValue(m_available_versions));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_latest_available_episodes.size() > 0) {
        obj.insert(QString("latest_available_episodes"), ::OpenAPI::toJsonValue(m_latest_available_episodes));
    }
    if (m_network_summary.isSet()) {
        obj.insert(QString("network_summary"), ::OpenAPI::toJsonValue(m_network_summary));
    }
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_short_synopsis_isSet) {
        obj.insert(QString("short_synopsis"), ::OpenAPI::toJsonValue(m_short_synopsis));
    }
    if (m_titles.isSet()) {
        obj.insert(QString("titles"), ::OpenAPI::toJsonValue(m_titles));
    }
    if (m_total_available_episodes_isSet) {
        obj.insert(QString("total_available_episodes"), ::OpenAPI::toJsonValue(m_total_available_episodes));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIAvailableVersions> OAIBrandSummary::getAvailableVersions() const {
    return m_available_versions;
}
void OAIBrandSummary::setAvailableVersions(const QList<OAIAvailableVersions> &available_versions) {
    m_available_versions = available_versions;
    m_available_versions_isSet = true;
}

bool OAIBrandSummary::is_available_versions_Set() const{
    return m_available_versions_isSet;
}

bool OAIBrandSummary::is_available_versions_Valid() const{
    return m_available_versions_isValid;
}

QList<OAIImage> OAIBrandSummary::getImages() const {
    return m_images;
}
void OAIBrandSummary::setImages(const QList<OAIImage> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIBrandSummary::is_images_Set() const{
    return m_images_isSet;
}

bool OAIBrandSummary::is_images_Valid() const{
    return m_images_isValid;
}

QList<OAIEpisodeSummary> OAIBrandSummary::getLatestAvailableEpisodes() const {
    return m_latest_available_episodes;
}
void OAIBrandSummary::setLatestAvailableEpisodes(const QList<OAIEpisodeSummary> &latest_available_episodes) {
    m_latest_available_episodes = latest_available_episodes;
    m_latest_available_episodes_isSet = true;
}

bool OAIBrandSummary::is_latest_available_episodes_Set() const{
    return m_latest_available_episodes_isSet;
}

bool OAIBrandSummary::is_latest_available_episodes_Valid() const{
    return m_latest_available_episodes_isValid;
}

OAINetworkSummary OAIBrandSummary::getNetworkSummary() const {
    return m_network_summary;
}
void OAIBrandSummary::setNetworkSummary(const OAINetworkSummary &network_summary) {
    m_network_summary = network_summary;
    m_network_summary_isSet = true;
}

bool OAIBrandSummary::is_network_summary_Set() const{
    return m_network_summary_isSet;
}

bool OAIBrandSummary::is_network_summary_Valid() const{
    return m_network_summary_isValid;
}

QString OAIBrandSummary::getPid() const {
    return m_pid;
}
void OAIBrandSummary::setPid(const QString &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAIBrandSummary::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAIBrandSummary::is_pid_Valid() const{
    return m_pid_isValid;
}

QString OAIBrandSummary::getShortSynopsis() const {
    return m_short_synopsis;
}
void OAIBrandSummary::setShortSynopsis(const QString &short_synopsis) {
    m_short_synopsis = short_synopsis;
    m_short_synopsis_isSet = true;
}

bool OAIBrandSummary::is_short_synopsis_Set() const{
    return m_short_synopsis_isSet;
}

bool OAIBrandSummary::is_short_synopsis_Valid() const{
    return m_short_synopsis_isValid;
}

OAIProgrammeTitles OAIBrandSummary::getTitles() const {
    return m_titles;
}
void OAIBrandSummary::setTitles(const OAIProgrammeTitles &titles) {
    m_titles = titles;
    m_titles_isSet = true;
}

bool OAIBrandSummary::is_titles_Set() const{
    return m_titles_isSet;
}

bool OAIBrandSummary::is_titles_Valid() const{
    return m_titles_isValid;
}

qint32 OAIBrandSummary::getTotalAvailableEpisodes() const {
    return m_total_available_episodes;
}
void OAIBrandSummary::setTotalAvailableEpisodes(const qint32 &total_available_episodes) {
    m_total_available_episodes = total_available_episodes;
    m_total_available_episodes_isSet = true;
}

bool OAIBrandSummary::is_total_available_episodes_Set() const{
    return m_total_available_episodes_isSet;
}

bool OAIBrandSummary::is_total_available_episodes_Valid() const{
    return m_total_available_episodes_isValid;
}

QString OAIBrandSummary::getType() const {
    return m_type;
}
void OAIBrandSummary::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBrandSummary::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBrandSummary::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIBrandSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_available_episodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_synopsis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_titles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_available_episodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBrandSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_images_isValid && m_latest_available_episodes_isValid && m_network_summary_isValid && m_pid_isValid && m_short_synopsis_isValid && m_titles_isValid && m_total_available_episodes_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
