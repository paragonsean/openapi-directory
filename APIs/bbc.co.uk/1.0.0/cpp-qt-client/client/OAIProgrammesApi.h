/**
 * Radio & Music Services
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProgrammesApi_H
#define OAI_OAIProgrammesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIObject.h"
#include "OAIPopularErrorResponse.h"
#include "OAIPopularResponse.h"
#include "OAIProgrammesResponse.h"
#include "OAIRadioErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProgrammesApi : public QObject {
    Q_OBJECT

public:
    OAIProgrammesApi(const int timeOut = 0);
    ~OAIProgrammesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  type QString [optional]
    * @param[in]  distinct QString [optional]
    * @param[in]  network QString [optional]
    * @param[in]  network_url_key QString [optional]
    * @param[in]  category QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  group QString [optional]
    * @param[in]  media_type QString [optional]
    * @param[in]  container QString [optional]
    * @param[in]  media_set QList<OAIObject> [optional]
    * @param[in]  q QString [optional]
    */
    virtual void getPopularEpisodesClips(const QString &x_api_key, const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &distinct = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &network = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &network_url_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &media_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &container = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIObject>> &media_set = ::OpenAPI::OptionalParam<QList<OAIObject>>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  kind QString [optional]
    * @param[in]  network QString [optional]
    * @param[in]  network_url_key QString [optional]
    * @param[in]  category QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  container QString [optional]
    * @param[in]  type QString [optional]
    */
    virtual void getRadioProgrammes(const QString &x_api_key, const ::OpenAPI::OptionalParam<QString> &kind = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &network = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &network_url_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &container = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  pid QString [required]
    */
    virtual void getRadioProgrammesByPid(const QString &x_api_key, const QString &pid);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  x_api_key QString [required]
    * @param[in]  rights QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getRecommendations(const QString &authorization, const QString &x_api_key, const QString &rights, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getPopularEpisodesClipsCallback(OAIHttpRequestWorker *worker);
    void getRadioProgrammesCallback(OAIHttpRequestWorker *worker);
    void getRadioProgrammesByPidCallback(OAIHttpRequestWorker *worker);
    void getRecommendationsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getPopularEpisodesClipsSignal(OAIPopularResponse summary);
    void getRadioProgrammesSignal(OAIProgrammesResponse summary);
    void getRadioProgrammesByPidSignal(OAIProgrammesResponse summary);
    void getRecommendationsSignal(OAIProgrammesResponse summary);


    void getPopularEpisodesClipsSignalFull(OAIHttpRequestWorker *worker, OAIPopularResponse summary);
    void getRadioProgrammesSignalFull(OAIHttpRequestWorker *worker, OAIProgrammesResponse summary);
    void getRadioProgrammesByPidSignalFull(OAIHttpRequestWorker *worker, OAIProgrammesResponse summary);
    void getRecommendationsSignalFull(OAIHttpRequestWorker *worker, OAIProgrammesResponse summary);

    Q_DECL_DEPRECATED_X("Use getPopularEpisodesClipsSignalError() instead")
    void getPopularEpisodesClipsSignalE(OAIPopularResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPopularEpisodesClipsSignalError(OAIPopularResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRadioProgrammesSignalError() instead")
    void getRadioProgrammesSignalE(OAIProgrammesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRadioProgrammesSignalError(OAIProgrammesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRadioProgrammesByPidSignalError() instead")
    void getRadioProgrammesByPidSignalE(OAIProgrammesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRadioProgrammesByPidSignalError(OAIProgrammesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecommendationsSignalError() instead")
    void getRecommendationsSignalE(OAIProgrammesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecommendationsSignalError(OAIProgrammesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getPopularEpisodesClipsSignalErrorFull() instead")
    void getPopularEpisodesClipsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPopularEpisodesClipsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRadioProgrammesSignalErrorFull() instead")
    void getRadioProgrammesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRadioProgrammesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRadioProgrammesByPidSignalErrorFull() instead")
    void getRadioProgrammesByPidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRadioProgrammesByPidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecommendationsSignalErrorFull() instead")
    void getRecommendationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecommendationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
