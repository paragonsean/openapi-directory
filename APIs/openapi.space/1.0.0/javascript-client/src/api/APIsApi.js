/**
 * OpenAPI space
 * This is the API for OpenAPI space.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@apinf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIMeta from '../model/APIMeta';

/**
* APIs service.
* @module api/APIsApi
* @version 1.0.0
*/
export default class APIsApi {

    /**
    * Constructs a new APIsApi. 
    * @alias module:api/APIsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteApi operation.
     * @callback module:api/APIsApi~deleteApiCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/APIMeta>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified API
     * @param {String} owner API owner identifier
     * @param {String} api API identifier
     * @param {module:api/APIsApi~deleteApiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/APIMeta>}
     */
    deleteApi(owner, api, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling deleteApi");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling deleteApi");
      }

      let pathParams = {
        'owner': owner,
        'api': api
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AuthToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [APIMeta];
      return this.apiClient.callApi(
        '/apis/{owner}/{api}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApiVersion operation.
     * @callback module:api/APIsApi~deleteApiVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIMeta} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a particular version of the specified API
     * @param {String} owner API owner identifier
     * @param {String} api API identifier
     * @param {String} version version identifier
     * @param {module:api/APIsApi~deleteApiVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIMeta}
     */
    deleteApiVersion(owner, api, version, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling deleteApiVersion");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling deleteApiVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling deleteApiVersion");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AuthToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APIMeta;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiVersions operation.
     * @callback module:api/APIsApi~getApiVersionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/APIMeta>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves an API meta listing for all API versions for this owner and API
     * @param {String} owner API owner identifier
     * @param {String} api API identifier
     * @param {module:api/APIsApi~getApiVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/APIMeta>}
     */
    getApiVersions(owner, api, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getApiVersions");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling getApiVersions");
      }

      let pathParams = {
        'owner': owner,
        'api': api
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AuthToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [APIMeta];
      return this.apiClient.callApi(
        '/apis/{owner}/{api}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJsonDefinition operation.
     * @callback module:api/APIsApi~getJsonDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the Swagger definition for the specified API and version in JSON format
     * @param {String} owner API owner identifier
     * @param {String} api API identifier
     * @param {String} version version identifier
     * @param {module:api/APIsApi~getJsonDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getJsonDefinition(owner, api, version, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getJsonDefinition");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling getJsonDefinition");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getJsonDefinition");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AuthToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}/swagger.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOwnerApis operation.
     * @callback module:api/APIsApi~getOwnerApisCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/APIMeta>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves an API meta listing of all APIs defined for this owner
     * @param {String} owner API owner identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [sort = 'NAME')] sort criteria or result set * NAME - * UPATED * CREATED * OWNER 
     * @param {module:model/String} [order = 'ASC')] sort order
     * @param {module:api/APIsApi~getOwnerApisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/APIMeta>}
     */
    getOwnerApis(owner, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getOwnerApis");
      }

      let pathParams = {
        'owner': owner
      };
      let queryParams = {
        'sort': opts['sort'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AuthToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [APIMeta];
      return this.apiClient.callApi(
        '/apis/{owner}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getYamlDefinition operation.
     * @callback module:api/APIsApi~getYamlDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the Swagger definition for the specified API and version in YAML format
     * @param {String} owner API owner identifier
     * @param {String} api API identifier
     * @param {String} version version identifier
     * @param {module:api/APIsApi~getYamlDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getYamlDefinition(owner, api, version, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getYamlDefinition");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling getYamlDefinition");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getYamlDefinition");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AuthToken'];
      let contentTypes = [];
      let accepts = ['text/vnd.yaml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}/swagger.yaml', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publishApiVersion operation.
     * @callback module:api/APIsApi~publishApiVersionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publish a particular version of the specified API
     * @param {String} owner API owner identifier
     * @param {String} api API identifier
     * @param {String} version version identifier
     * @param {module:api/APIsApi~publishApiVersionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    publishApiVersion(owner, api, version, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling publishApiVersion");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling publishApiVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling publishApiVersion");
      }

      let pathParams = {
        'owner': owner,
        'api': api,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}/{version}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveDefinition operation.
     * @callback module:api/APIsApi~saveDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIMeta} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves the provided Swagger definition
     * Saves the provided Swagger definition; the owner must match the token owner. The version will be extracted from the Swagger definitions itself.
     * @param {String} owner API owner identifier
     * @param {String} api API identifier
     * @param {Object.<String, Object>} definition the Swagger definition of this API
     * @param {Object} opts Optional parameters
     * @param {Boolean} [_private = false)] Defines whether the API has to be private
     * @param {Boolean} [force = false)] force update
     * @param {module:api/APIsApi~saveDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIMeta}
     */
    saveDefinition(owner, api, definition, opts, callback) {
      opts = opts || {};
      let postBody = definition;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling saveDefinition");
      }
      // verify the required parameter 'api' is set
      if (api === undefined || api === null) {
        throw new Error("Missing the required parameter 'api' when calling saveDefinition");
      }
      // verify the required parameter 'definition' is set
      if (definition === undefined || definition === null) {
        throw new Error("Missing the required parameter 'definition' when calling saveDefinition");
      }

      let pathParams = {
        'owner': owner,
        'api': api
      };
      let queryParams = {
        'private': opts['_private'],
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AuthToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = APIMeta;
      return this.apiClient.callApi(
        '/apis/{owner}/{api}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchApis operation.
     * @callback module:api/APIsApi~searchApisCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/APIMeta>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of currently defined APIs in API meta list format.
     * @param {Object} opts Optional parameters
     * @param {String} [query] free text query to match
     * @param {Number} [limit = 10)] the maximum number of APIs to return
     * @param {Number} [offset = 0)] the offset where to start from when fetching a limited number of APIs
     * @param {module:model/String} [sort = 'NAME')] sort criteria or result set * NAME - * UPATED * CREATED * OWNER 
     * @param {module:model/String} [order = 'ASC')] sort order
     * @param {module:api/APIsApi~searchApisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/APIMeta>}
     */
    searchApis(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AuthToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [APIMeta];
      return this.apiClient.callApi(
        '/apis', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
