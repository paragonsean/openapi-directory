/**
 * OpenAPI space
 * This is the API for OpenAPI space.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@apinf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Credentials from '../model/Credentials';
import LoginApinfRequest from '../model/LoginApinfRequest';
import LoginApinfTokenRequest from '../model/LoginApinfTokenRequest';
import LoginToken from '../model/LoginToken';
import Registration from '../model/Registration';

/**
* Auth service.
* @module api/AuthApi
* @version 1.0.0
*/
export default class AuthApi {

    /**
    * Constructs a new AuthApi. 
    * @alias module:api/AuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/AuthApi~loginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log in to OpenAPI space
     * @param {Object} opts Optional parameters
     * @param {module:model/Credentials} [body] the user credentials
     * @param {module:api/AuthApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginToken}
     */
    login(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoginToken;
      return this.apiClient.callApi(
        '/auth/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginApinf operation.
     * @callback module:api/AuthApi~loginApinfCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log in to OpenAPI space using an APInf account
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginApinfRequest} [body] the APInf username and password
     * @param {module:api/AuthApi~loginApinfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginToken}
     */
    loginApinf(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoginToken;
      return this.apiClient.callApi(
        '/auth/login/apinf', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginApinfToken operation.
     * @callback module:api/AuthApi~loginApinfTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log in to OpenAPI space using an APInf authentication token
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginApinfTokenRequest} [body] the APInf authentication token and user ID
     * @param {module:api/AuthApi~loginApinfTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginToken}
     */
    loginApinfToken(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoginToken;
      return this.apiClient.callApi(
        '/auth/login/apinf_token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logout operation.
     * @callback module:api/AuthApi~logoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log out from OpenAPI space
     * @param {module:api/AuthApi~logoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logout(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AuthToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/auth/logout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ping operation.
     * @callback module:api/AuthApi~pingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Registration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check whether or not you are authenticated
     * @param {module:api/AuthApi~pingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Registration}
     */
    ping(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AuthToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Registration;
      return this.apiClient.callApi(
        '/auth/ping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the register operation.
     * @callback module:api/AuthApi~registerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register to OpenAPI space
     * @param {Object} opts Optional parameters
     * @param {module:model/Registration} [body] registration details
     * @param {module:api/AuthApi~registerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginToken}
     */
    register(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoginToken;
      return this.apiClient.callApi(
        '/auth/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
