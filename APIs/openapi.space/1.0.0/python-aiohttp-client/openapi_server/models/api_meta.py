# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class APIMeta(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, description: str=None, modified: datetime=None, name: str=None, owner: str=None, swagger: object=None, url: str=None, versions: List[object]=None):
        """APIMeta - a model defined in OpenAPI

        :param created: The created of this APIMeta.
        :param description: The description of this APIMeta.
        :param modified: The modified of this APIMeta.
        :param name: The name of this APIMeta.
        :param owner: The owner of this APIMeta.
        :param swagger: The swagger of this APIMeta.
        :param url: The url of this APIMeta.
        :param versions: The versions of this APIMeta.
        """
        self.openapi_types = {
            'created': datetime,
            'description': str,
            'modified': datetime,
            'name': str,
            'owner': str,
            'swagger': object,
            'url': str,
            'versions': List[object]
        }

        self.attribute_map = {
            'created': 'created',
            'description': 'description',
            'modified': 'modified',
            'name': 'name',
            'owner': 'owner',
            'swagger': 'swagger',
            'url': 'url',
            'versions': 'versions'
        }

        self._created = created
        self._description = description
        self._modified = modified
        self._name = name
        self._owner = owner
        self._swagger = swagger
        self._url = url
        self._versions = versions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APIMeta':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The APIMeta of this APIMeta.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this APIMeta.


        :return: The created of this APIMeta.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this APIMeta.


        :param created: The created of this APIMeta.
        :type created: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this APIMeta.


        :return: The description of this APIMeta.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this APIMeta.


        :param description: The description of this APIMeta.
        :type description: str
        """

        self._description = description

    @property
    def modified(self):
        """Gets the modified of this APIMeta.


        :return: The modified of this APIMeta.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this APIMeta.


        :param modified: The modified of this APIMeta.
        :type modified: datetime
        """

        self._modified = modified

    @property
    def name(self):
        """Gets the name of this APIMeta.


        :return: The name of this APIMeta.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this APIMeta.


        :param name: The name of this APIMeta.
        :type name: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this APIMeta.


        :return: The owner of this APIMeta.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this APIMeta.


        :param owner: The owner of this APIMeta.
        :type owner: str
        """

        self._owner = owner

    @property
    def swagger(self):
        """Gets the swagger of this APIMeta.

        An optional Swagger spec. Not included in meta lists.

        :return: The swagger of this APIMeta.
        :rtype: object
        """
        return self._swagger

    @swagger.setter
    def swagger(self, swagger):
        """Sets the swagger of this APIMeta.

        An optional Swagger spec. Not included in meta lists.

        :param swagger: The swagger of this APIMeta.
        :type swagger: object
        """

        self._swagger = swagger

    @property
    def url(self):
        """Gets the url of this APIMeta.


        :return: The url of this APIMeta.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this APIMeta.


        :param url: The url of this APIMeta.
        :type url: str
        """

        self._url = url

    @property
    def versions(self):
        """Gets the versions of this APIMeta.


        :return: The versions of this APIMeta.
        :rtype: List[object]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this APIMeta.


        :param versions: The versions of this APIMeta.
        :type versions: List[object]
        """

        self._versions = versions
