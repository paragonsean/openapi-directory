# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LoginApinfTokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_token: str=None, user_id: str=None):
        """LoginApinfTokenRequest - a model defined in OpenAPI

        :param auth_token: The auth_token of this LoginApinfTokenRequest.
        :param user_id: The user_id of this LoginApinfTokenRequest.
        """
        self.openapi_types = {
            'auth_token': str,
            'user_id': str
        }

        self.attribute_map = {
            'auth_token': 'auth_token',
            'user_id': 'user_id'
        }

        self._auth_token = auth_token
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoginApinfTokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The login_apinf_token_request of this LoginApinfTokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_token(self):
        """Gets the auth_token of this LoginApinfTokenRequest.


        :return: The auth_token of this LoginApinfTokenRequest.
        :rtype: str
        """
        return self._auth_token

    @auth_token.setter
    def auth_token(self, auth_token):
        """Sets the auth_token of this LoginApinfTokenRequest.


        :param auth_token: The auth_token of this LoginApinfTokenRequest.
        :type auth_token: str
        """
        if auth_token is None:
            raise ValueError("Invalid value for `auth_token`, must not be `None`")

        self._auth_token = auth_token

    @property
    def user_id(self):
        """Gets the user_id of this LoginApinfTokenRequest.


        :return: The user_id of this LoginApinfTokenRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this LoginApinfTokenRequest.


        :param user_id: The user_id of this LoginApinfTokenRequest.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
