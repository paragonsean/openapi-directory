/*
 * OpenAPI space
 * This is the API for OpenAPI space.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@apinf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Credentials;
import org.openapitools.client.model.LoginApinfRequest;
import org.openapitools.client.model.LoginApinfTokenRequest;
import org.openapitools.client.model.LoginToken;
import org.openapitools.client.model.Registration;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for login
     * @param body the user credentials (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> login successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> invalid password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginCall(Credentials body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/auth/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loginValidateBeforeCall(Credentials body, final ApiCallback _callback) throws ApiException {
        return loginCall(body, _callback);

    }

    /**
     * Log in to OpenAPI space
     * 
     * @param body the user credentials (optional)
     * @return LoginToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> login successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> invalid password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user not found </td><td>  -  </td></tr>
     </table>
     */
    public LoginToken login(Credentials body) throws ApiException {
        ApiResponse<LoginToken> localVarResp = loginWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Log in to OpenAPI space
     * 
     * @param body the user credentials (optional)
     * @return ApiResponse&lt;LoginToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> login successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> invalid password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginToken> loginWithHttpInfo(Credentials body) throws ApiException {
        okhttp3.Call localVarCall = loginValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<LoginToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Log in to OpenAPI space (asynchronously)
     * 
     * @param body the user credentials (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> login successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> invalid password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginAsync(Credentials body, final ApiCallback<LoginToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = loginValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<LoginToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loginApinf
     * @param body the APInf username and password (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> login successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> invalid username or password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginApinfCall(LoginApinfRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/auth/login/apinf";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loginApinfValidateBeforeCall(LoginApinfRequest body, final ApiCallback _callback) throws ApiException {
        return loginApinfCall(body, _callback);

    }

    /**
     * Log in to OpenAPI space using an APInf account
     * 
     * @param body the APInf username and password (optional)
     * @return LoginToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> login successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> invalid username or password </td><td>  -  </td></tr>
     </table>
     */
    public LoginToken loginApinf(LoginApinfRequest body) throws ApiException {
        ApiResponse<LoginToken> localVarResp = loginApinfWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Log in to OpenAPI space using an APInf account
     * 
     * @param body the APInf username and password (optional)
     * @return ApiResponse&lt;LoginToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> login successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> invalid username or password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginToken> loginApinfWithHttpInfo(LoginApinfRequest body) throws ApiException {
        okhttp3.Call localVarCall = loginApinfValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<LoginToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Log in to OpenAPI space using an APInf account (asynchronously)
     * 
     * @param body the APInf username and password (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> login successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> invalid username or password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginApinfAsync(LoginApinfRequest body, final ApiCallback<LoginToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = loginApinfValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<LoginToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loginApinfToken
     * @param body the APInf authentication token and user ID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> login successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> invalid user ID or auth token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginApinfTokenCall(LoginApinfTokenRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/auth/login/apinf_token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loginApinfTokenValidateBeforeCall(LoginApinfTokenRequest body, final ApiCallback _callback) throws ApiException {
        return loginApinfTokenCall(body, _callback);

    }

    /**
     * Log in to OpenAPI space using an APInf authentication token
     * 
     * @param body the APInf authentication token and user ID (optional)
     * @return LoginToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> login successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> invalid user ID or auth token </td><td>  -  </td></tr>
     </table>
     */
    public LoginToken loginApinfToken(LoginApinfTokenRequest body) throws ApiException {
        ApiResponse<LoginToken> localVarResp = loginApinfTokenWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Log in to OpenAPI space using an APInf authentication token
     * 
     * @param body the APInf authentication token and user ID (optional)
     * @return ApiResponse&lt;LoginToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> login successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> invalid user ID or auth token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginToken> loginApinfTokenWithHttpInfo(LoginApinfTokenRequest body) throws ApiException {
        okhttp3.Call localVarCall = loginApinfTokenValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<LoginToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Log in to OpenAPI space using an APInf authentication token (asynchronously)
     * 
     * @param body the APInf authentication token and user ID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> login successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> invalid user ID or auth token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginApinfTokenAsync(LoginApinfTokenRequest body, final ApiCallback<LoginToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = loginApinfTokenValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<LoginToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logout
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> logout successful </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> user was not logged in </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logoutCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/logout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logoutValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return logoutCall(_callback);

    }

    /**
     * Log out from OpenAPI space
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> logout successful </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> user was not logged in </td><td>  -  </td></tr>
     </table>
     */
    public void logout() throws ApiException {
        logoutWithHttpInfo();
    }

    /**
     * Log out from OpenAPI space
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> logout successful </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> user was not logged in </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logoutWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = logoutValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Log out from OpenAPI space (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> logout successful </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> user was not logged in </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logoutAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logoutValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ping
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not logged in </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pingCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/ping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pingValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return pingCall(_callback);

    }

    /**
     * Check whether or not you are authenticated
     * 
     * @return Registration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not logged in </td><td>  -  </td></tr>
     </table>
     */
    public Registration ping() throws ApiException {
        ApiResponse<Registration> localVarResp = pingWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Check whether or not you are authenticated
     * 
     * @return ApiResponse&lt;Registration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not logged in </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Registration> pingWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = pingValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Registration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check whether or not you are authenticated (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> logged in </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not logged in </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pingAsync(final ApiCallback<Registration> _callback) throws ApiException {

        okhttp3.Call localVarCall = pingValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Registration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for register
     * @param body registration details (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> registration successful </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> username or email taken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerCall(Registration body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/auth/register";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerValidateBeforeCall(Registration body, final ApiCallback _callback) throws ApiException {
        return registerCall(body, _callback);

    }

    /**
     * Register to OpenAPI space
     * 
     * @param body registration details (optional)
     * @return LoginToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> registration successful </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> username or email taken </td><td>  -  </td></tr>
     </table>
     */
    public LoginToken register(Registration body) throws ApiException {
        ApiResponse<LoginToken> localVarResp = registerWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Register to OpenAPI space
     * 
     * @param body registration details (optional)
     * @return ApiResponse&lt;LoginToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> registration successful </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> username or email taken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginToken> registerWithHttpInfo(Registration body) throws ApiException {
        okhttp3.Call localVarCall = registerValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<LoginToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register to OpenAPI space (asynchronously)
     * 
     * @param body registration details (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> registration successful </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> username or email taken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerAsync(Registration body, final ApiCallback<LoginToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<LoginToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
