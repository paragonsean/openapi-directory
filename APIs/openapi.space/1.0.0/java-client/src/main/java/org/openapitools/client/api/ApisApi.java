/*
 * OpenAPI space
 * This is the API for OpenAPI space.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@apinf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIMeta;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApisApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApisApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApisApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteApi
     * @param owner API owner identifier (required)
     * @param api API identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the API was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> specified API not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiCall(String owner, String api, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteApiValidateBeforeCall(String owner, String api, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling deleteApi(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling deleteApi(Async)");
        }

        return deleteApiCall(owner, api, _callback);

    }

    /**
     * Deletes the specified API
     * 
     * @param owner API owner identifier (required)
     * @param api API identifier (required)
     * @return List&lt;APIMeta&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the API was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> specified API not found </td><td>  -  </td></tr>
     </table>
     */
    public List<APIMeta> deleteApi(String owner, String api) throws ApiException {
        ApiResponse<List<APIMeta>> localVarResp = deleteApiWithHttpInfo(owner, api);
        return localVarResp.getData();
    }

    /**
     * Deletes the specified API
     * 
     * @param owner API owner identifier (required)
     * @param api API identifier (required)
     * @return ApiResponse&lt;List&lt;APIMeta&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the API was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> specified API not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<APIMeta>> deleteApiWithHttpInfo(String owner, String api) throws ApiException {
        okhttp3.Call localVarCall = deleteApiValidateBeforeCall(owner, api, null);
        Type localVarReturnType = new TypeToken<List<APIMeta>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes the specified API (asynchronously)
     * 
     * @param owner API owner identifier (required)
     * @param api API identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the API was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> specified API not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiAsync(String owner, String api, final ApiCallback<List<APIMeta>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteApiValidateBeforeCall(owner, api, _callback);
        Type localVarReturnType = new TypeToken<List<APIMeta>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteApiVersion
     * @param owner API owner identifier (required)
     * @param api API identifier (required)
     * @param version version identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the API version was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> specified API not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> the API version is the only version of this API </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiVersionCall(String owner, String api, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteApiVersionValidateBeforeCall(String owner, String api, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling deleteApiVersion(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling deleteApiVersion(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling deleteApiVersion(Async)");
        }

        return deleteApiVersionCall(owner, api, version, _callback);

    }

    /**
     * Deletes a particular version of the specified API
     * 
     * @param owner API owner identifier (required)
     * @param api API identifier (required)
     * @param version version identifier (required)
     * @return APIMeta
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the API version was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> specified API not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> the API version is the only version of this API </td><td>  -  </td></tr>
     </table>
     */
    public APIMeta deleteApiVersion(String owner, String api, String version) throws ApiException {
        ApiResponse<APIMeta> localVarResp = deleteApiVersionWithHttpInfo(owner, api, version);
        return localVarResp.getData();
    }

    /**
     * Deletes a particular version of the specified API
     * 
     * @param owner API owner identifier (required)
     * @param api API identifier (required)
     * @param version version identifier (required)
     * @return ApiResponse&lt;APIMeta&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the API version was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> specified API not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> the API version is the only version of this API </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIMeta> deleteApiVersionWithHttpInfo(String owner, String api, String version) throws ApiException {
        okhttp3.Call localVarCall = deleteApiVersionValidateBeforeCall(owner, api, version, null);
        Type localVarReturnType = new TypeToken<APIMeta>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a particular version of the specified API (asynchronously)
     * 
     * @param owner API owner identifier (required)
     * @param api API identifier (required)
     * @param version version identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the API version was successfully deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> specified API not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> the API version is the only version of this API </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiVersionAsync(String owner, String api, String version, final ApiCallback<APIMeta> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteApiVersionValidateBeforeCall(owner, api, version, _callback);
        Type localVarReturnType = new TypeToken<APIMeta>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiVersions
     * @param owner API owner identifier (required)
     * @param api API identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a list of API versions in API meta format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiVersionsCall(String owner, String api, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiVersionsValidateBeforeCall(String owner, String api, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getApiVersions(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling getApiVersions(Async)");
        }

        return getApiVersionsCall(owner, api, _callback);

    }

    /**
     * Retrieves an API meta listing for all API versions for this owner and API
     * 
     * @param owner API owner identifier (required)
     * @param api API identifier (required)
     * @return List&lt;APIMeta&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a list of API versions in API meta format </td><td>  -  </td></tr>
     </table>
     */
    public List<APIMeta> getApiVersions(String owner, String api) throws ApiException {
        ApiResponse<List<APIMeta>> localVarResp = getApiVersionsWithHttpInfo(owner, api);
        return localVarResp.getData();
    }

    /**
     * Retrieves an API meta listing for all API versions for this owner and API
     * 
     * @param owner API owner identifier (required)
     * @param api API identifier (required)
     * @return ApiResponse&lt;List&lt;APIMeta&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a list of API versions in API meta format </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<APIMeta>> getApiVersionsWithHttpInfo(String owner, String api) throws ApiException {
        okhttp3.Call localVarCall = getApiVersionsValidateBeforeCall(owner, api, null);
        Type localVarReturnType = new TypeToken<List<APIMeta>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves an API meta listing for all API versions for this owner and API (asynchronously)
     * 
     * @param owner API owner identifier (required)
     * @param api API identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a list of API versions in API meta format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiVersionsAsync(String owner, String api, final ApiCallback<List<APIMeta>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiVersionsValidateBeforeCall(owner, api, _callback);
        Type localVarReturnType = new TypeToken<List<APIMeta>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJsonDefinition
     * @param owner API owner identifier (required)
     * @param api API identifier (required)
     * @param version version identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Swagger API in JSON format </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access denied: api is private </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> specified API not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJsonDefinitionCall(String owner, String api, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}/swagger.json"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJsonDefinitionValidateBeforeCall(String owner, String api, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getJsonDefinition(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling getJsonDefinition(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getJsonDefinition(Async)");
        }

        return getJsonDefinitionCall(owner, api, version, _callback);

    }

    /**
     * Retrieves the Swagger definition for the specified API and version in JSON format
     * 
     * @param owner API owner identifier (required)
     * @param api API identifier (required)
     * @param version version identifier (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Swagger API in JSON format </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access denied: api is private </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> specified API not found </td><td>  -  </td></tr>
     </table>
     */
    public Object getJsonDefinition(String owner, String api, String version) throws ApiException {
        ApiResponse<Object> localVarResp = getJsonDefinitionWithHttpInfo(owner, api, version);
        return localVarResp.getData();
    }

    /**
     * Retrieves the Swagger definition for the specified API and version in JSON format
     * 
     * @param owner API owner identifier (required)
     * @param api API identifier (required)
     * @param version version identifier (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Swagger API in JSON format </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access denied: api is private </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> specified API not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getJsonDefinitionWithHttpInfo(String owner, String api, String version) throws ApiException {
        okhttp3.Call localVarCall = getJsonDefinitionValidateBeforeCall(owner, api, version, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the Swagger definition for the specified API and version in JSON format (asynchronously)
     * 
     * @param owner API owner identifier (required)
     * @param api API identifier (required)
     * @param version version identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Swagger API in JSON format </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access denied: api is private </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> specified API not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJsonDefinitionAsync(String owner, String api, String version, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJsonDefinitionValidateBeforeCall(owner, api, version, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOwnerApis
     * @param owner API owner identifier (required)
     * @param sort sort criteria or result set * NAME - * UPATED * CREATED * OWNER  (optional, default to NAME)
     * @param order sort order (optional, default to ASC)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a list of APIs in API meta list format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOwnerApisCall(String owner, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{owner}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOwnerApisValidateBeforeCall(String owner, String sort, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getOwnerApis(Async)");
        }

        return getOwnerApisCall(owner, sort, order, _callback);

    }

    /**
     * Retrieves an API meta listing of all APIs defined for this owner
     * 
     * @param owner API owner identifier (required)
     * @param sort sort criteria or result set * NAME - * UPATED * CREATED * OWNER  (optional, default to NAME)
     * @param order sort order (optional, default to ASC)
     * @return List&lt;APIMeta&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a list of APIs in API meta list format </td><td>  -  </td></tr>
     </table>
     */
    public List<APIMeta> getOwnerApis(String owner, String sort, String order) throws ApiException {
        ApiResponse<List<APIMeta>> localVarResp = getOwnerApisWithHttpInfo(owner, sort, order);
        return localVarResp.getData();
    }

    /**
     * Retrieves an API meta listing of all APIs defined for this owner
     * 
     * @param owner API owner identifier (required)
     * @param sort sort criteria or result set * NAME - * UPATED * CREATED * OWNER  (optional, default to NAME)
     * @param order sort order (optional, default to ASC)
     * @return ApiResponse&lt;List&lt;APIMeta&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a list of APIs in API meta list format </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<APIMeta>> getOwnerApisWithHttpInfo(String owner, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getOwnerApisValidateBeforeCall(owner, sort, order, null);
        Type localVarReturnType = new TypeToken<List<APIMeta>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves an API meta listing of all APIs defined for this owner (asynchronously)
     * 
     * @param owner API owner identifier (required)
     * @param sort sort criteria or result set * NAME - * UPATED * CREATED * OWNER  (optional, default to NAME)
     * @param order sort order (optional, default to ASC)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a list of APIs in API meta list format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOwnerApisAsync(String owner, String sort, String order, final ApiCallback<List<APIMeta>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOwnerApisValidateBeforeCall(owner, sort, order, _callback);
        Type localVarReturnType = new TypeToken<List<APIMeta>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getYamlDefinition
     * @param owner API owner identifier (required)
     * @param api API identifier (required)
     * @param version version identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Swagger API in YAML format </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access denied: api is private </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> specified API not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getYamlDefinitionCall(String owner, String api, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}/swagger.yaml"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/vnd.yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getYamlDefinitionValidateBeforeCall(String owner, String api, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getYamlDefinition(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling getYamlDefinition(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getYamlDefinition(Async)");
        }

        return getYamlDefinitionCall(owner, api, version, _callback);

    }

    /**
     * Retrieves the Swagger definition for the specified API and version in YAML format
     * 
     * @param owner API owner identifier (required)
     * @param api API identifier (required)
     * @param version version identifier (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Swagger API in YAML format </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access denied: api is private </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> specified API not found </td><td>  -  </td></tr>
     </table>
     */
    public Object getYamlDefinition(String owner, String api, String version) throws ApiException {
        ApiResponse<Object> localVarResp = getYamlDefinitionWithHttpInfo(owner, api, version);
        return localVarResp.getData();
    }

    /**
     * Retrieves the Swagger definition for the specified API and version in YAML format
     * 
     * @param owner API owner identifier (required)
     * @param api API identifier (required)
     * @param version version identifier (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Swagger API in YAML format </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access denied: api is private </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> specified API not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getYamlDefinitionWithHttpInfo(String owner, String api, String version) throws ApiException {
        okhttp3.Call localVarCall = getYamlDefinitionValidateBeforeCall(owner, api, version, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the Swagger definition for the specified API and version in YAML format (asynchronously)
     * 
     * @param owner API owner identifier (required)
     * @param api API identifier (required)
     * @param version version identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the Swagger API in YAML format </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access denied: api is private </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> specified API not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getYamlDefinitionAsync(String owner, String api, String version, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getYamlDefinitionValidateBeforeCall(owner, api, version, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for publishApiVersion
     * @param owner API owner identifier (required)
     * @param api API identifier (required)
     * @param version version identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the API version was successfully published </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> specified API not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> the API version is already published </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishApiVersionCall(String owner, String api, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}/{version}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publishApiVersionValidateBeforeCall(String owner, String api, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling publishApiVersion(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling publishApiVersion(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling publishApiVersion(Async)");
        }

        return publishApiVersionCall(owner, api, version, _callback);

    }

    /**
     * Publish a particular version of the specified API
     * 
     * @param owner API owner identifier (required)
     * @param api API identifier (required)
     * @param version version identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the API version was successfully published </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> specified API not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> the API version is already published </td><td>  -  </td></tr>
     </table>
     */
    public void publishApiVersion(String owner, String api, String version) throws ApiException {
        publishApiVersionWithHttpInfo(owner, api, version);
    }

    /**
     * Publish a particular version of the specified API
     * 
     * @param owner API owner identifier (required)
     * @param api API identifier (required)
     * @param version version identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the API version was successfully published </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> specified API not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> the API version is already published </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> publishApiVersionWithHttpInfo(String owner, String api, String version) throws ApiException {
        okhttp3.Call localVarCall = publishApiVersionValidateBeforeCall(owner, api, version, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Publish a particular version of the specified API (asynchronously)
     * 
     * @param owner API owner identifier (required)
     * @param api API identifier (required)
     * @param version version identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the API version was successfully published </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> specified API not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> the API version is already published </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishApiVersionAsync(String owner, String api, String version, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = publishApiVersionValidateBeforeCall(owner, api, version, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveDefinition
     * @param owner API owner identifier (required)
     * @param api API identifier (required)
     * @param definition the Swagger definition of this API (required)
     * @param _private Defines whether the API has to be private (optional, default to false)
     * @param force force update (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the API was successfully saved </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> new API was successfully saved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> the Swagger definition was invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> the API is not owned by the user </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> can not overwrite a published API version without force&#x3D;true </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> invalid content type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveDefinitionCall(String owner, String api, Object definition, Boolean _private, Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = definition;

        // create path and map variables
        String localVarPath = "/apis/{owner}/{api}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "api" + "}", localVarApiClient.escapeString(api.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_private != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("private", _private));
        }

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveDefinitionValidateBeforeCall(String owner, String api, Object definition, Boolean _private, Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling saveDefinition(Async)");
        }

        // verify the required parameter 'api' is set
        if (api == null) {
            throw new ApiException("Missing the required parameter 'api' when calling saveDefinition(Async)");
        }

        // verify the required parameter 'definition' is set
        if (definition == null) {
            throw new ApiException("Missing the required parameter 'definition' when calling saveDefinition(Async)");
        }

        return saveDefinitionCall(owner, api, definition, _private, force, _callback);

    }

    /**
     * Saves the provided Swagger definition
     * Saves the provided Swagger definition; the owner must match the token owner. The version will be extracted from the Swagger definitions itself.
     * @param owner API owner identifier (required)
     * @param api API identifier (required)
     * @param definition the Swagger definition of this API (required)
     * @param _private Defines whether the API has to be private (optional, default to false)
     * @param force force update (optional, default to false)
     * @return APIMeta
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the API was successfully saved </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> new API was successfully saved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> the Swagger definition was invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> the API is not owned by the user </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> can not overwrite a published API version without force&#x3D;true </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> invalid content type </td><td>  -  </td></tr>
     </table>
     */
    public APIMeta saveDefinition(String owner, String api, Object definition, Boolean _private, Boolean force) throws ApiException {
        ApiResponse<APIMeta> localVarResp = saveDefinitionWithHttpInfo(owner, api, definition, _private, force);
        return localVarResp.getData();
    }

    /**
     * Saves the provided Swagger definition
     * Saves the provided Swagger definition; the owner must match the token owner. The version will be extracted from the Swagger definitions itself.
     * @param owner API owner identifier (required)
     * @param api API identifier (required)
     * @param definition the Swagger definition of this API (required)
     * @param _private Defines whether the API has to be private (optional, default to false)
     * @param force force update (optional, default to false)
     * @return ApiResponse&lt;APIMeta&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the API was successfully saved </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> new API was successfully saved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> the Swagger definition was invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> the API is not owned by the user </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> can not overwrite a published API version without force&#x3D;true </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> invalid content type </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIMeta> saveDefinitionWithHttpInfo(String owner, String api, Object definition, Boolean _private, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = saveDefinitionValidateBeforeCall(owner, api, definition, _private, force, null);
        Type localVarReturnType = new TypeToken<APIMeta>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves the provided Swagger definition (asynchronously)
     * Saves the provided Swagger definition; the owner must match the token owner. The version will be extracted from the Swagger definitions itself.
     * @param owner API owner identifier (required)
     * @param api API identifier (required)
     * @param definition the Swagger definition of this API (required)
     * @param _private Defines whether the API has to be private (optional, default to false)
     * @param force force update (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the API was successfully saved </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> new API was successfully saved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> the Swagger definition was invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> the API is not owned by the user </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> can not overwrite a published API version without force&#x3D;true </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> invalid content type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveDefinitionAsync(String owner, String api, Object definition, Boolean _private, Boolean force, final ApiCallback<APIMeta> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveDefinitionValidateBeforeCall(owner, api, definition, _private, force, _callback);
        Type localVarReturnType = new TypeToken<APIMeta>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchApis
     * @param query free text query to match (optional)
     * @param limit the maximum number of APIs to return (optional, default to 10)
     * @param offset the offset where to start from when fetching a limited number of APIs (optional, default to 0)
     * @param sort sort criteria or result set * NAME - * UPATED * CREATED * OWNER  (optional, default to NAME)
     * @param order sort order (optional, default to ASC)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a list of APIs in API meta list format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchApisCall(String query, Integer limit, Integer offset, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchApisValidateBeforeCall(String query, Integer limit, Integer offset, String sort, String order, final ApiCallback _callback) throws ApiException {
        return searchApisCall(query, limit, offset, sort, order, _callback);

    }

    /**
     * Retrieves a list of currently defined APIs in API meta list format.
     * 
     * @param query free text query to match (optional)
     * @param limit the maximum number of APIs to return (optional, default to 10)
     * @param offset the offset where to start from when fetching a limited number of APIs (optional, default to 0)
     * @param sort sort criteria or result set * NAME - * UPATED * CREATED * OWNER  (optional, default to NAME)
     * @param order sort order (optional, default to ASC)
     * @return List&lt;APIMeta&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a list of APIs in API meta list format </td><td>  -  </td></tr>
     </table>
     */
    public List<APIMeta> searchApis(String query, Integer limit, Integer offset, String sort, String order) throws ApiException {
        ApiResponse<List<APIMeta>> localVarResp = searchApisWithHttpInfo(query, limit, offset, sort, order);
        return localVarResp.getData();
    }

    /**
     * Retrieves a list of currently defined APIs in API meta list format.
     * 
     * @param query free text query to match (optional)
     * @param limit the maximum number of APIs to return (optional, default to 10)
     * @param offset the offset where to start from when fetching a limited number of APIs (optional, default to 0)
     * @param sort sort criteria or result set * NAME - * UPATED * CREATED * OWNER  (optional, default to NAME)
     * @param order sort order (optional, default to ASC)
     * @return ApiResponse&lt;List&lt;APIMeta&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a list of APIs in API meta list format </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<APIMeta>> searchApisWithHttpInfo(String query, Integer limit, Integer offset, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = searchApisValidateBeforeCall(query, limit, offset, sort, order, null);
        Type localVarReturnType = new TypeToken<List<APIMeta>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a list of currently defined APIs in API meta list format. (asynchronously)
     * 
     * @param query free text query to match (optional)
     * @param limit the maximum number of APIs to return (optional, default to 10)
     * @param offset the offset where to start from when fetching a limited number of APIs (optional, default to 0)
     * @param sort sort criteria or result set * NAME - * UPATED * CREATED * OWNER  (optional, default to NAME)
     * @param order sort order (optional, default to ASC)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a list of APIs in API meta list format </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchApisAsync(String query, Integer limit, Integer offset, String sort, String order, final ApiCallback<List<APIMeta>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchApisValidateBeforeCall(query, limit, offset, sort, order, _callback);
        Type localVarReturnType = new TypeToken<List<APIMeta>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
