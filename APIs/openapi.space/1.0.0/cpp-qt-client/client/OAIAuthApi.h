/**
 * OpenAPI space
 * This is the API for OpenAPI space.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@apinf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAuthApi_H
#define OAI_OAIAuthApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICredentials.h"
#include "OAILoginToken.h"
#include "OAILogin_apinf_request.h"
#include "OAILogin_apinf_token_request.h"
#include "OAIRegistration.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAuthApi : public QObject {
    Q_OBJECT

public:
    OAIAuthApi(const int timeOut = 0);
    ~OAIAuthApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  body OAICredentials [optional]
    */
    virtual void login(const ::OpenAPI::OptionalParam<OAICredentials> &body = ::OpenAPI::OptionalParam<OAICredentials>());

    /**
    * @param[in]  body OAILogin_apinf_request [optional]
    */
    virtual void loginApinf(const ::OpenAPI::OptionalParam<OAILogin_apinf_request> &body = ::OpenAPI::OptionalParam<OAILogin_apinf_request>());

    /**
    * @param[in]  body OAILogin_apinf_token_request [optional]
    */
    virtual void loginApinfToken(const ::OpenAPI::OptionalParam<OAILogin_apinf_token_request> &body = ::OpenAPI::OptionalParam<OAILogin_apinf_token_request>());


    virtual void logout();


    virtual void ping();

    /**
    * @param[in]  body OAIRegistration [optional]
    */
    virtual void r_register(const ::OpenAPI::OptionalParam<OAIRegistration> &body = ::OpenAPI::OptionalParam<OAIRegistration>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void loginCallback(OAIHttpRequestWorker *worker);
    void loginApinfCallback(OAIHttpRequestWorker *worker);
    void loginApinfTokenCallback(OAIHttpRequestWorker *worker);
    void logoutCallback(OAIHttpRequestWorker *worker);
    void pingCallback(OAIHttpRequestWorker *worker);
    void r_registerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void loginSignal(OAILoginToken summary);
    void loginApinfSignal(OAILoginToken summary);
    void loginApinfTokenSignal(OAILoginToken summary);
    void logoutSignal();
    void pingSignal(OAIRegistration summary);
    void r_registerSignal(OAILoginToken summary);


    void loginSignalFull(OAIHttpRequestWorker *worker, OAILoginToken summary);
    void loginApinfSignalFull(OAIHttpRequestWorker *worker, OAILoginToken summary);
    void loginApinfTokenSignalFull(OAIHttpRequestWorker *worker, OAILoginToken summary);
    void logoutSignalFull(OAIHttpRequestWorker *worker);
    void pingSignalFull(OAIHttpRequestWorker *worker, OAIRegistration summary);
    void r_registerSignalFull(OAIHttpRequestWorker *worker, OAILoginToken summary);

    Q_DECL_DEPRECATED_X("Use loginSignalError() instead")
    void loginSignalE(OAILoginToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void loginSignalError(OAILoginToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginApinfSignalError() instead")
    void loginApinfSignalE(OAILoginToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void loginApinfSignalError(OAILoginToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginApinfTokenSignalError() instead")
    void loginApinfTokenSignalE(OAILoginToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void loginApinfTokenSignalError(OAILoginToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logoutSignalError() instead")
    void logoutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void logoutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pingSignalError() instead")
    void pingSignalE(OAIRegistration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pingSignalError(OAIRegistration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use r_registerSignalError() instead")
    void r_registerSignalE(OAILoginToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void r_registerSignalError(OAILoginToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use loginSignalErrorFull() instead")
    void loginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginApinfSignalErrorFull() instead")
    void loginApinfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loginApinfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginApinfTokenSignalErrorFull() instead")
    void loginApinfTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loginApinfTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logoutSignalErrorFull() instead")
    void logoutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logoutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pingSignalErrorFull() instead")
    void pingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use r_registerSignalErrorFull() instead")
    void r_registerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void r_registerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
