/**
 * OpenAPI space
 * This is the API for OpenAPI space.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@apinf.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAPIsApi_H
#define OAI_OAIAPIsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPIMeta.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAPIsApi : public QObject {
    Q_OBJECT

public:
    OAIAPIsApi(const int timeOut = 0);
    ~OAIAPIsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    */
    virtual void deleteApi(const QString &owner, const QString &api);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    */
    virtual void deleteApiVersion(const QString &owner, const QString &api, const QString &version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    */
    virtual void getApiVersions(const QString &owner, const QString &api);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    */
    virtual void getJsonDefinition(const QString &owner, const QString &api, const QString &version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  sort QString [optional]
    * @param[in]  order QString [optional]
    */
    virtual void getOwnerApis(const QString &owner, const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    */
    virtual void getYamlDefinition(const QString &owner, const QString &api, const QString &version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  version QString [required]
    */
    virtual void publishApiVersion(const QString &owner, const QString &api, const QString &version);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  api QString [required]
    * @param[in]  definition OAIObject [required]
    * @param[in]  r_private bool [optional]
    * @param[in]  force bool [optional]
    */
    virtual void saveDefinition(const QString &owner, const QString &api, const OAIObject &definition, const ::OpenAPI::OptionalParam<bool> &r_private = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  order QString [optional]
    */
    virtual void searchApis(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteApiCallback(OAIHttpRequestWorker *worker);
    void deleteApiVersionCallback(OAIHttpRequestWorker *worker);
    void getApiVersionsCallback(OAIHttpRequestWorker *worker);
    void getJsonDefinitionCallback(OAIHttpRequestWorker *worker);
    void getOwnerApisCallback(OAIHttpRequestWorker *worker);
    void getYamlDefinitionCallback(OAIHttpRequestWorker *worker);
    void publishApiVersionCallback(OAIHttpRequestWorker *worker);
    void saveDefinitionCallback(OAIHttpRequestWorker *worker);
    void searchApisCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteApiSignal(QList<OAIAPIMeta> summary);
    void deleteApiVersionSignal(OAIAPIMeta summary);
    void getApiVersionsSignal(QList<OAIAPIMeta> summary);
    void getJsonDefinitionSignal(OAIObject summary);
    void getOwnerApisSignal(QList<OAIAPIMeta> summary);
    void getYamlDefinitionSignal(OAIObject summary);
    void publishApiVersionSignal();
    void saveDefinitionSignal(OAIAPIMeta summary);
    void searchApisSignal(QList<OAIAPIMeta> summary);


    void deleteApiSignalFull(OAIHttpRequestWorker *worker, QList<OAIAPIMeta> summary);
    void deleteApiVersionSignalFull(OAIHttpRequestWorker *worker, OAIAPIMeta summary);
    void getApiVersionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAPIMeta> summary);
    void getJsonDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOwnerApisSignalFull(OAIHttpRequestWorker *worker, QList<OAIAPIMeta> summary);
    void getYamlDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void publishApiVersionSignalFull(OAIHttpRequestWorker *worker);
    void saveDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIAPIMeta summary);
    void searchApisSignalFull(OAIHttpRequestWorker *worker, QList<OAIAPIMeta> summary);

    Q_DECL_DEPRECATED_X("Use deleteApiSignalError() instead")
    void deleteApiSignalE(QList<OAIAPIMeta> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApiSignalError(QList<OAIAPIMeta> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApiVersionSignalError() instead")
    void deleteApiVersionSignalE(OAIAPIMeta summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApiVersionSignalError(OAIAPIMeta summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApiVersionsSignalError() instead")
    void getApiVersionsSignalE(QList<OAIAPIMeta> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApiVersionsSignalError(QList<OAIAPIMeta> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJsonDefinitionSignalError() instead")
    void getJsonDefinitionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJsonDefinitionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOwnerApisSignalError() instead")
    void getOwnerApisSignalE(QList<OAIAPIMeta> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOwnerApisSignalError(QList<OAIAPIMeta> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getYamlDefinitionSignalError() instead")
    void getYamlDefinitionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getYamlDefinitionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishApiVersionSignalError() instead")
    void publishApiVersionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void publishApiVersionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveDefinitionSignalError() instead")
    void saveDefinitionSignalE(OAIAPIMeta summary, QNetworkReply::NetworkError error_type, QString error_str);
    void saveDefinitionSignalError(OAIAPIMeta summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchApisSignalError() instead")
    void searchApisSignalE(QList<OAIAPIMeta> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchApisSignalError(QList<OAIAPIMeta> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteApiSignalErrorFull() instead")
    void deleteApiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApiVersionSignalErrorFull() instead")
    void deleteApiVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApiVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApiVersionsSignalErrorFull() instead")
    void getApiVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApiVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJsonDefinitionSignalErrorFull() instead")
    void getJsonDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJsonDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOwnerApisSignalErrorFull() instead")
    void getOwnerApisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOwnerApisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getYamlDefinitionSignalErrorFull() instead")
    void getYamlDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getYamlDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishApiVersionSignalErrorFull() instead")
    void publishApiVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publishApiVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveDefinitionSignalErrorFull() instead")
    void saveDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saveDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchApisSignalErrorFull() instead")
    void searchApisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchApisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
