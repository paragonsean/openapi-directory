/**
 * Vehicle Enquiry API
 * Interface specification for the DVLA Vehicle Enquiry API
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: DvlaAPIAccess@dvla.gov.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Vehicle model module.
 * @module model/Vehicle
 * @version 1.1.0
 */
class Vehicle {
    /**
     * Constructs a new <code>Vehicle</code>.
     * @alias module:model/Vehicle
     * @param registrationNumber {String} Registration number of the vehicle
     */
    constructor(registrationNumber) { 
        
        Vehicle.initialize(this, registrationNumber);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, registrationNumber) { 
        obj['registrationNumber'] = registrationNumber;
    }

    /**
     * Constructs a <code>Vehicle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Vehicle} obj Optional instance to populate.
     * @return {module:model/Vehicle} The populated <code>Vehicle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Vehicle();

            if (data.hasOwnProperty('artEndDate')) {
                obj['artEndDate'] = ApiClient.convertToType(data['artEndDate'], 'Date');
            }
            if (data.hasOwnProperty('co2Emissions')) {
                obj['co2Emissions'] = ApiClient.convertToType(data['co2Emissions'], 'Number');
            }
            if (data.hasOwnProperty('colour')) {
                obj['colour'] = ApiClient.convertToType(data['colour'], 'String');
            }
            if (data.hasOwnProperty('dateOfLastV5CIssued')) {
                obj['dateOfLastV5CIssued'] = ApiClient.convertToType(data['dateOfLastV5CIssued'], 'Date');
            }
            if (data.hasOwnProperty('engineCapacity')) {
                obj['engineCapacity'] = ApiClient.convertToType(data['engineCapacity'], 'Number');
            }
            if (data.hasOwnProperty('euroStatus')) {
                obj['euroStatus'] = ApiClient.convertToType(data['euroStatus'], 'String');
            }
            if (data.hasOwnProperty('fuelType')) {
                obj['fuelType'] = ApiClient.convertToType(data['fuelType'], 'String');
            }
            if (data.hasOwnProperty('make')) {
                obj['make'] = ApiClient.convertToType(data['make'], 'String');
            }
            if (data.hasOwnProperty('markedForExport')) {
                obj['markedForExport'] = ApiClient.convertToType(data['markedForExport'], 'Boolean');
            }
            if (data.hasOwnProperty('monthOfFirstDvlaRegistration')) {
                obj['monthOfFirstDvlaRegistration'] = ApiClient.convertToType(data['monthOfFirstDvlaRegistration'], 'Date');
            }
            if (data.hasOwnProperty('monthOfFirstRegistration')) {
                obj['monthOfFirstRegistration'] = ApiClient.convertToType(data['monthOfFirstRegistration'], 'Date');
            }
            if (data.hasOwnProperty('motExpiryDate')) {
                obj['motExpiryDate'] = ApiClient.convertToType(data['motExpiryDate'], 'Date');
            }
            if (data.hasOwnProperty('motStatus')) {
                obj['motStatus'] = ApiClient.convertToType(data['motStatus'], 'String');
            }
            if (data.hasOwnProperty('realDrivingEmissions')) {
                obj['realDrivingEmissions'] = ApiClient.convertToType(data['realDrivingEmissions'], 'String');
            }
            if (data.hasOwnProperty('registrationNumber')) {
                obj['registrationNumber'] = ApiClient.convertToType(data['registrationNumber'], 'String');
            }
            if (data.hasOwnProperty('revenueWeight')) {
                obj['revenueWeight'] = ApiClient.convertToType(data['revenueWeight'], 'Number');
            }
            if (data.hasOwnProperty('taxDueDate')) {
                obj['taxDueDate'] = ApiClient.convertToType(data['taxDueDate'], 'Date');
            }
            if (data.hasOwnProperty('taxStatus')) {
                obj['taxStatus'] = ApiClient.convertToType(data['taxStatus'], 'String');
            }
            if (data.hasOwnProperty('typeApproval')) {
                obj['typeApproval'] = ApiClient.convertToType(data['typeApproval'], 'String');
            }
            if (data.hasOwnProperty('wheelplan')) {
                obj['wheelplan'] = ApiClient.convertToType(data['wheelplan'], 'String');
            }
            if (data.hasOwnProperty('yearOfManufacture')) {
                obj['yearOfManufacture'] = ApiClient.convertToType(data['yearOfManufacture'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Vehicle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Vehicle</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Vehicle.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['colour'] && !(typeof data['colour'] === 'string' || data['colour'] instanceof String)) {
            throw new Error("Expected the field `colour` to be a primitive type in the JSON string but got " + data['colour']);
        }
        // ensure the json data is a string
        if (data['euroStatus'] && !(typeof data['euroStatus'] === 'string' || data['euroStatus'] instanceof String)) {
            throw new Error("Expected the field `euroStatus` to be a primitive type in the JSON string but got " + data['euroStatus']);
        }
        // ensure the json data is a string
        if (data['fuelType'] && !(typeof data['fuelType'] === 'string' || data['fuelType'] instanceof String)) {
            throw new Error("Expected the field `fuelType` to be a primitive type in the JSON string but got " + data['fuelType']);
        }
        // ensure the json data is a string
        if (data['make'] && !(typeof data['make'] === 'string' || data['make'] instanceof String)) {
            throw new Error("Expected the field `make` to be a primitive type in the JSON string but got " + data['make']);
        }
        // ensure the json data is a string
        if (data['motStatus'] && !(typeof data['motStatus'] === 'string' || data['motStatus'] instanceof String)) {
            throw new Error("Expected the field `motStatus` to be a primitive type in the JSON string but got " + data['motStatus']);
        }
        // ensure the json data is a string
        if (data['realDrivingEmissions'] && !(typeof data['realDrivingEmissions'] === 'string' || data['realDrivingEmissions'] instanceof String)) {
            throw new Error("Expected the field `realDrivingEmissions` to be a primitive type in the JSON string but got " + data['realDrivingEmissions']);
        }
        // ensure the json data is a string
        if (data['registrationNumber'] && !(typeof data['registrationNumber'] === 'string' || data['registrationNumber'] instanceof String)) {
            throw new Error("Expected the field `registrationNumber` to be a primitive type in the JSON string but got " + data['registrationNumber']);
        }
        // ensure the json data is a string
        if (data['taxStatus'] && !(typeof data['taxStatus'] === 'string' || data['taxStatus'] instanceof String)) {
            throw new Error("Expected the field `taxStatus` to be a primitive type in the JSON string but got " + data['taxStatus']);
        }
        // ensure the json data is a string
        if (data['typeApproval'] && !(typeof data['typeApproval'] === 'string' || data['typeApproval'] instanceof String)) {
            throw new Error("Expected the field `typeApproval` to be a primitive type in the JSON string but got " + data['typeApproval']);
        }
        // ensure the json data is a string
        if (data['wheelplan'] && !(typeof data['wheelplan'] === 'string' || data['wheelplan'] instanceof String)) {
            throw new Error("Expected the field `wheelplan` to be a primitive type in the JSON string but got " + data['wheelplan']);
        }

        return true;
    }


}

Vehicle.RequiredProperties = ["registrationNumber"];

/**
 * Additional Rate of Tax End Date, format: YYYY-MM-DD
 * @member {Date} artEndDate
 */
Vehicle.prototype['artEndDate'] = undefined;

/**
 * Carbon Dioxide emissions in grams per kilometre
 * @member {Number} co2Emissions
 */
Vehicle.prototype['co2Emissions'] = undefined;

/**
 * Vehicle colour
 * @member {String} colour
 */
Vehicle.prototype['colour'] = undefined;

/**
 * Date of last V5C issued
 * @member {Date} dateOfLastV5CIssued
 */
Vehicle.prototype['dateOfLastV5CIssued'] = undefined;

/**
 * Engine capacity in cubic centimetres
 * @member {Number} engineCapacity
 */
Vehicle.prototype['engineCapacity'] = undefined;

/**
 * Euro Status (Dealer / Customer Provided (new vehicles))
 * @member {String} euroStatus
 */
Vehicle.prototype['euroStatus'] = undefined;

/**
 * Fuel type (Method of Propulsion)
 * @member {String} fuelType
 */
Vehicle.prototype['fuelType'] = undefined;

/**
 * Vehicle make
 * @member {String} make
 */
Vehicle.prototype['make'] = undefined;

/**
 * True only if vehicle has been export marked
 * @member {Boolean} markedForExport
 */
Vehicle.prototype['markedForExport'] = undefined;

/**
 * Month of First DVLA Registration
 * @member {Date} monthOfFirstDvlaRegistration
 */
Vehicle.prototype['monthOfFirstDvlaRegistration'] = undefined;

/**
 * Month of First Registration
 * @member {Date} monthOfFirstRegistration
 */
Vehicle.prototype['monthOfFirstRegistration'] = undefined;

/**
 * Mot Expiry Date
 * @member {Date} motExpiryDate
 */
Vehicle.prototype['motExpiryDate'] = undefined;

/**
 * MOT Status of the vehicle
 * @member {module:model/Vehicle.MotStatusEnum} motStatus
 */
Vehicle.prototype['motStatus'] = undefined;

/**
 * Real Driving Emissions value
 * @member {String} realDrivingEmissions
 */
Vehicle.prototype['realDrivingEmissions'] = undefined;

/**
 * Registration number of the vehicle
 * @member {String} registrationNumber
 */
Vehicle.prototype['registrationNumber'] = undefined;

/**
 * Revenue weight in kilograms
 * @member {Number} revenueWeight
 */
Vehicle.prototype['revenueWeight'] = undefined;

/**
 * Date of tax liablity, Used in calculating licence information presented to user
 * @member {Date} taxDueDate
 */
Vehicle.prototype['taxDueDate'] = undefined;

/**
 * Tax status of the vehicle
 * @member {module:model/Vehicle.TaxStatusEnum} taxStatus
 */
Vehicle.prototype['taxStatus'] = undefined;

/**
 * Vehicle Type Approval Category
 * @member {String} typeApproval
 */
Vehicle.prototype['typeApproval'] = undefined;

/**
 * Vehicle wheel plan
 * @member {String} wheelplan
 */
Vehicle.prototype['wheelplan'] = undefined;

/**
 * Year of Manufacture
 * @member {Number} yearOfManufacture
 */
Vehicle.prototype['yearOfManufacture'] = undefined;





/**
 * Allowed values for the <code>motStatus</code> property.
 * @enum {String}
 * @readonly
 */
Vehicle['MotStatusEnum'] = {

    /**
     * value: "No details held by DVLA"
     * @const
     */
    "No details held by DVLA": "No details held by DVLA",

    /**
     * value: "No results returned"
     * @const
     */
    "No results returned": "No results returned",

    /**
     * value: "Not valid"
     * @const
     */
    "Not valid": "Not valid",

    /**
     * value: "Valid"
     * @const
     */
    "Valid": "Valid"
};


/**
 * Allowed values for the <code>taxStatus</code> property.
 * @enum {String}
 * @readonly
 */
Vehicle['TaxStatusEnum'] = {

    /**
     * value: "Not Taxed for on Road Use"
     * @const
     */
    "Not Taxed for on Road Use": "Not Taxed for on Road Use",

    /**
     * value: "SORN"
     * @const
     */
    "SORN": "SORN",

    /**
     * value: "Taxed"
     * @const
     */
    "Taxed": "Taxed",

    /**
     * value: "Untaxed"
     * @const
     */
    "Untaxed": "Untaxed"
};



export default Vehicle;

