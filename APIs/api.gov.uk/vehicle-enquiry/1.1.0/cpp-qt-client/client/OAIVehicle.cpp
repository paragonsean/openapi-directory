/**
 * Vehicle Enquiry API
 * Interface specification for the DVLA Vehicle Enquiry API
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: DvlaAPIAccess@dvla.gov.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVehicle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVehicle::OAIVehicle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVehicle::OAIVehicle() {
    this->initializeModel();
}

OAIVehicle::~OAIVehicle() {}

void OAIVehicle::initializeModel() {

    m_art_end_date_isSet = false;
    m_art_end_date_isValid = false;

    m_co2_emissions_isSet = false;
    m_co2_emissions_isValid = false;

    m_colour_isSet = false;
    m_colour_isValid = false;

    m_date_of_last_v5_c_issued_isSet = false;
    m_date_of_last_v5_c_issued_isValid = false;

    m_engine_capacity_isSet = false;
    m_engine_capacity_isValid = false;

    m_euro_status_isSet = false;
    m_euro_status_isValid = false;

    m_fuel_type_isSet = false;
    m_fuel_type_isValid = false;

    m_make_isSet = false;
    m_make_isValid = false;

    m_marked_for_export_isSet = false;
    m_marked_for_export_isValid = false;

    m_month_of_first_dvla_registration_isSet = false;
    m_month_of_first_dvla_registration_isValid = false;

    m_month_of_first_registration_isSet = false;
    m_month_of_first_registration_isValid = false;

    m_mot_expiry_date_isSet = false;
    m_mot_expiry_date_isValid = false;

    m_mot_status_isSet = false;
    m_mot_status_isValid = false;

    m_real_driving_emissions_isSet = false;
    m_real_driving_emissions_isValid = false;

    m_registration_number_isSet = false;
    m_registration_number_isValid = false;

    m_revenue_weight_isSet = false;
    m_revenue_weight_isValid = false;

    m_tax_due_date_isSet = false;
    m_tax_due_date_isValid = false;

    m_tax_status_isSet = false;
    m_tax_status_isValid = false;

    m_type_approval_isSet = false;
    m_type_approval_isValid = false;

    m_wheelplan_isSet = false;
    m_wheelplan_isValid = false;

    m_year_of_manufacture_isSet = false;
    m_year_of_manufacture_isValid = false;
}

void OAIVehicle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVehicle::fromJsonObject(QJsonObject json) {

    m_art_end_date_isValid = ::OpenAPI::fromJsonValue(m_art_end_date, json[QString("artEndDate")]);
    m_art_end_date_isSet = !json[QString("artEndDate")].isNull() && m_art_end_date_isValid;

    m_co2_emissions_isValid = ::OpenAPI::fromJsonValue(m_co2_emissions, json[QString("co2Emissions")]);
    m_co2_emissions_isSet = !json[QString("co2Emissions")].isNull() && m_co2_emissions_isValid;

    m_colour_isValid = ::OpenAPI::fromJsonValue(m_colour, json[QString("colour")]);
    m_colour_isSet = !json[QString("colour")].isNull() && m_colour_isValid;

    m_date_of_last_v5_c_issued_isValid = ::OpenAPI::fromJsonValue(m_date_of_last_v5_c_issued, json[QString("dateOfLastV5CIssued")]);
    m_date_of_last_v5_c_issued_isSet = !json[QString("dateOfLastV5CIssued")].isNull() && m_date_of_last_v5_c_issued_isValid;

    m_engine_capacity_isValid = ::OpenAPI::fromJsonValue(m_engine_capacity, json[QString("engineCapacity")]);
    m_engine_capacity_isSet = !json[QString("engineCapacity")].isNull() && m_engine_capacity_isValid;

    m_euro_status_isValid = ::OpenAPI::fromJsonValue(m_euro_status, json[QString("euroStatus")]);
    m_euro_status_isSet = !json[QString("euroStatus")].isNull() && m_euro_status_isValid;

    m_fuel_type_isValid = ::OpenAPI::fromJsonValue(m_fuel_type, json[QString("fuelType")]);
    m_fuel_type_isSet = !json[QString("fuelType")].isNull() && m_fuel_type_isValid;

    m_make_isValid = ::OpenAPI::fromJsonValue(m_make, json[QString("make")]);
    m_make_isSet = !json[QString("make")].isNull() && m_make_isValid;

    m_marked_for_export_isValid = ::OpenAPI::fromJsonValue(m_marked_for_export, json[QString("markedForExport")]);
    m_marked_for_export_isSet = !json[QString("markedForExport")].isNull() && m_marked_for_export_isValid;

    m_month_of_first_dvla_registration_isValid = ::OpenAPI::fromJsonValue(m_month_of_first_dvla_registration, json[QString("monthOfFirstDvlaRegistration")]);
    m_month_of_first_dvla_registration_isSet = !json[QString("monthOfFirstDvlaRegistration")].isNull() && m_month_of_first_dvla_registration_isValid;

    m_month_of_first_registration_isValid = ::OpenAPI::fromJsonValue(m_month_of_first_registration, json[QString("monthOfFirstRegistration")]);
    m_month_of_first_registration_isSet = !json[QString("monthOfFirstRegistration")].isNull() && m_month_of_first_registration_isValid;

    m_mot_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_mot_expiry_date, json[QString("motExpiryDate")]);
    m_mot_expiry_date_isSet = !json[QString("motExpiryDate")].isNull() && m_mot_expiry_date_isValid;

    m_mot_status_isValid = ::OpenAPI::fromJsonValue(m_mot_status, json[QString("motStatus")]);
    m_mot_status_isSet = !json[QString("motStatus")].isNull() && m_mot_status_isValid;

    m_real_driving_emissions_isValid = ::OpenAPI::fromJsonValue(m_real_driving_emissions, json[QString("realDrivingEmissions")]);
    m_real_driving_emissions_isSet = !json[QString("realDrivingEmissions")].isNull() && m_real_driving_emissions_isValid;

    m_registration_number_isValid = ::OpenAPI::fromJsonValue(m_registration_number, json[QString("registrationNumber")]);
    m_registration_number_isSet = !json[QString("registrationNumber")].isNull() && m_registration_number_isValid;

    m_revenue_weight_isValid = ::OpenAPI::fromJsonValue(m_revenue_weight, json[QString("revenueWeight")]);
    m_revenue_weight_isSet = !json[QString("revenueWeight")].isNull() && m_revenue_weight_isValid;

    m_tax_due_date_isValid = ::OpenAPI::fromJsonValue(m_tax_due_date, json[QString("taxDueDate")]);
    m_tax_due_date_isSet = !json[QString("taxDueDate")].isNull() && m_tax_due_date_isValid;

    m_tax_status_isValid = ::OpenAPI::fromJsonValue(m_tax_status, json[QString("taxStatus")]);
    m_tax_status_isSet = !json[QString("taxStatus")].isNull() && m_tax_status_isValid;

    m_type_approval_isValid = ::OpenAPI::fromJsonValue(m_type_approval, json[QString("typeApproval")]);
    m_type_approval_isSet = !json[QString("typeApproval")].isNull() && m_type_approval_isValid;

    m_wheelplan_isValid = ::OpenAPI::fromJsonValue(m_wheelplan, json[QString("wheelplan")]);
    m_wheelplan_isSet = !json[QString("wheelplan")].isNull() && m_wheelplan_isValid;

    m_year_of_manufacture_isValid = ::OpenAPI::fromJsonValue(m_year_of_manufacture, json[QString("yearOfManufacture")]);
    m_year_of_manufacture_isSet = !json[QString("yearOfManufacture")].isNull() && m_year_of_manufacture_isValid;
}

QString OAIVehicle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVehicle::asJsonObject() const {
    QJsonObject obj;
    if (m_art_end_date_isSet) {
        obj.insert(QString("artEndDate"), ::OpenAPI::toJsonValue(m_art_end_date));
    }
    if (m_co2_emissions_isSet) {
        obj.insert(QString("co2Emissions"), ::OpenAPI::toJsonValue(m_co2_emissions));
    }
    if (m_colour_isSet) {
        obj.insert(QString("colour"), ::OpenAPI::toJsonValue(m_colour));
    }
    if (m_date_of_last_v5_c_issued_isSet) {
        obj.insert(QString("dateOfLastV5CIssued"), ::OpenAPI::toJsonValue(m_date_of_last_v5_c_issued));
    }
    if (m_engine_capacity_isSet) {
        obj.insert(QString("engineCapacity"), ::OpenAPI::toJsonValue(m_engine_capacity));
    }
    if (m_euro_status_isSet) {
        obj.insert(QString("euroStatus"), ::OpenAPI::toJsonValue(m_euro_status));
    }
    if (m_fuel_type_isSet) {
        obj.insert(QString("fuelType"), ::OpenAPI::toJsonValue(m_fuel_type));
    }
    if (m_make_isSet) {
        obj.insert(QString("make"), ::OpenAPI::toJsonValue(m_make));
    }
    if (m_marked_for_export_isSet) {
        obj.insert(QString("markedForExport"), ::OpenAPI::toJsonValue(m_marked_for_export));
    }
    if (m_month_of_first_dvla_registration_isSet) {
        obj.insert(QString("monthOfFirstDvlaRegistration"), ::OpenAPI::toJsonValue(m_month_of_first_dvla_registration));
    }
    if (m_month_of_first_registration_isSet) {
        obj.insert(QString("monthOfFirstRegistration"), ::OpenAPI::toJsonValue(m_month_of_first_registration));
    }
    if (m_mot_expiry_date_isSet) {
        obj.insert(QString("motExpiryDate"), ::OpenAPI::toJsonValue(m_mot_expiry_date));
    }
    if (m_mot_status_isSet) {
        obj.insert(QString("motStatus"), ::OpenAPI::toJsonValue(m_mot_status));
    }
    if (m_real_driving_emissions_isSet) {
        obj.insert(QString("realDrivingEmissions"), ::OpenAPI::toJsonValue(m_real_driving_emissions));
    }
    if (m_registration_number_isSet) {
        obj.insert(QString("registrationNumber"), ::OpenAPI::toJsonValue(m_registration_number));
    }
    if (m_revenue_weight_isSet) {
        obj.insert(QString("revenueWeight"), ::OpenAPI::toJsonValue(m_revenue_weight));
    }
    if (m_tax_due_date_isSet) {
        obj.insert(QString("taxDueDate"), ::OpenAPI::toJsonValue(m_tax_due_date));
    }
    if (m_tax_status_isSet) {
        obj.insert(QString("taxStatus"), ::OpenAPI::toJsonValue(m_tax_status));
    }
    if (m_type_approval_isSet) {
        obj.insert(QString("typeApproval"), ::OpenAPI::toJsonValue(m_type_approval));
    }
    if (m_wheelplan_isSet) {
        obj.insert(QString("wheelplan"), ::OpenAPI::toJsonValue(m_wheelplan));
    }
    if (m_year_of_manufacture_isSet) {
        obj.insert(QString("yearOfManufacture"), ::OpenAPI::toJsonValue(m_year_of_manufacture));
    }
    return obj;
}

QDate OAIVehicle::getArtEndDate() const {
    return m_art_end_date;
}
void OAIVehicle::setArtEndDate(const QDate &art_end_date) {
    m_art_end_date = art_end_date;
    m_art_end_date_isSet = true;
}

bool OAIVehicle::is_art_end_date_Set() const{
    return m_art_end_date_isSet;
}

bool OAIVehicle::is_art_end_date_Valid() const{
    return m_art_end_date_isValid;
}

qint32 OAIVehicle::getCo2Emissions() const {
    return m_co2_emissions;
}
void OAIVehicle::setCo2Emissions(const qint32 &co2_emissions) {
    m_co2_emissions = co2_emissions;
    m_co2_emissions_isSet = true;
}

bool OAIVehicle::is_co2_emissions_Set() const{
    return m_co2_emissions_isSet;
}

bool OAIVehicle::is_co2_emissions_Valid() const{
    return m_co2_emissions_isValid;
}

QString OAIVehicle::getColour() const {
    return m_colour;
}
void OAIVehicle::setColour(const QString &colour) {
    m_colour = colour;
    m_colour_isSet = true;
}

bool OAIVehicle::is_colour_Set() const{
    return m_colour_isSet;
}

bool OAIVehicle::is_colour_Valid() const{
    return m_colour_isValid;
}

QDate OAIVehicle::getDateOfLastV5CIssued() const {
    return m_date_of_last_v5_c_issued;
}
void OAIVehicle::setDateOfLastV5CIssued(const QDate &date_of_last_v5_c_issued) {
    m_date_of_last_v5_c_issued = date_of_last_v5_c_issued;
    m_date_of_last_v5_c_issued_isSet = true;
}

bool OAIVehicle::is_date_of_last_v5_c_issued_Set() const{
    return m_date_of_last_v5_c_issued_isSet;
}

bool OAIVehicle::is_date_of_last_v5_c_issued_Valid() const{
    return m_date_of_last_v5_c_issued_isValid;
}

qint32 OAIVehicle::getEngineCapacity() const {
    return m_engine_capacity;
}
void OAIVehicle::setEngineCapacity(const qint32 &engine_capacity) {
    m_engine_capacity = engine_capacity;
    m_engine_capacity_isSet = true;
}

bool OAIVehicle::is_engine_capacity_Set() const{
    return m_engine_capacity_isSet;
}

bool OAIVehicle::is_engine_capacity_Valid() const{
    return m_engine_capacity_isValid;
}

QString OAIVehicle::getEuroStatus() const {
    return m_euro_status;
}
void OAIVehicle::setEuroStatus(const QString &euro_status) {
    m_euro_status = euro_status;
    m_euro_status_isSet = true;
}

bool OAIVehicle::is_euro_status_Set() const{
    return m_euro_status_isSet;
}

bool OAIVehicle::is_euro_status_Valid() const{
    return m_euro_status_isValid;
}

QString OAIVehicle::getFuelType() const {
    return m_fuel_type;
}
void OAIVehicle::setFuelType(const QString &fuel_type) {
    m_fuel_type = fuel_type;
    m_fuel_type_isSet = true;
}

bool OAIVehicle::is_fuel_type_Set() const{
    return m_fuel_type_isSet;
}

bool OAIVehicle::is_fuel_type_Valid() const{
    return m_fuel_type_isValid;
}

QString OAIVehicle::getMake() const {
    return m_make;
}
void OAIVehicle::setMake(const QString &make) {
    m_make = make;
    m_make_isSet = true;
}

bool OAIVehicle::is_make_Set() const{
    return m_make_isSet;
}

bool OAIVehicle::is_make_Valid() const{
    return m_make_isValid;
}

bool OAIVehicle::isMarkedForExport() const {
    return m_marked_for_export;
}
void OAIVehicle::setMarkedForExport(const bool &marked_for_export) {
    m_marked_for_export = marked_for_export;
    m_marked_for_export_isSet = true;
}

bool OAIVehicle::is_marked_for_export_Set() const{
    return m_marked_for_export_isSet;
}

bool OAIVehicle::is_marked_for_export_Valid() const{
    return m_marked_for_export_isValid;
}

QDate OAIVehicle::getMonthOfFirstDvlaRegistration() const {
    return m_month_of_first_dvla_registration;
}
void OAIVehicle::setMonthOfFirstDvlaRegistration(const QDate &month_of_first_dvla_registration) {
    m_month_of_first_dvla_registration = month_of_first_dvla_registration;
    m_month_of_first_dvla_registration_isSet = true;
}

bool OAIVehicle::is_month_of_first_dvla_registration_Set() const{
    return m_month_of_first_dvla_registration_isSet;
}

bool OAIVehicle::is_month_of_first_dvla_registration_Valid() const{
    return m_month_of_first_dvla_registration_isValid;
}

QDate OAIVehicle::getMonthOfFirstRegistration() const {
    return m_month_of_first_registration;
}
void OAIVehicle::setMonthOfFirstRegistration(const QDate &month_of_first_registration) {
    m_month_of_first_registration = month_of_first_registration;
    m_month_of_first_registration_isSet = true;
}

bool OAIVehicle::is_month_of_first_registration_Set() const{
    return m_month_of_first_registration_isSet;
}

bool OAIVehicle::is_month_of_first_registration_Valid() const{
    return m_month_of_first_registration_isValid;
}

QDate OAIVehicle::getMotExpiryDate() const {
    return m_mot_expiry_date;
}
void OAIVehicle::setMotExpiryDate(const QDate &mot_expiry_date) {
    m_mot_expiry_date = mot_expiry_date;
    m_mot_expiry_date_isSet = true;
}

bool OAIVehicle::is_mot_expiry_date_Set() const{
    return m_mot_expiry_date_isSet;
}

bool OAIVehicle::is_mot_expiry_date_Valid() const{
    return m_mot_expiry_date_isValid;
}

QString OAIVehicle::getMotStatus() const {
    return m_mot_status;
}
void OAIVehicle::setMotStatus(const QString &mot_status) {
    m_mot_status = mot_status;
    m_mot_status_isSet = true;
}

bool OAIVehicle::is_mot_status_Set() const{
    return m_mot_status_isSet;
}

bool OAIVehicle::is_mot_status_Valid() const{
    return m_mot_status_isValid;
}

QString OAIVehicle::getRealDrivingEmissions() const {
    return m_real_driving_emissions;
}
void OAIVehicle::setRealDrivingEmissions(const QString &real_driving_emissions) {
    m_real_driving_emissions = real_driving_emissions;
    m_real_driving_emissions_isSet = true;
}

bool OAIVehicle::is_real_driving_emissions_Set() const{
    return m_real_driving_emissions_isSet;
}

bool OAIVehicle::is_real_driving_emissions_Valid() const{
    return m_real_driving_emissions_isValid;
}

QString OAIVehicle::getRegistrationNumber() const {
    return m_registration_number;
}
void OAIVehicle::setRegistrationNumber(const QString &registration_number) {
    m_registration_number = registration_number;
    m_registration_number_isSet = true;
}

bool OAIVehicle::is_registration_number_Set() const{
    return m_registration_number_isSet;
}

bool OAIVehicle::is_registration_number_Valid() const{
    return m_registration_number_isValid;
}

qint32 OAIVehicle::getRevenueWeight() const {
    return m_revenue_weight;
}
void OAIVehicle::setRevenueWeight(const qint32 &revenue_weight) {
    m_revenue_weight = revenue_weight;
    m_revenue_weight_isSet = true;
}

bool OAIVehicle::is_revenue_weight_Set() const{
    return m_revenue_weight_isSet;
}

bool OAIVehicle::is_revenue_weight_Valid() const{
    return m_revenue_weight_isValid;
}

QDate OAIVehicle::getTaxDueDate() const {
    return m_tax_due_date;
}
void OAIVehicle::setTaxDueDate(const QDate &tax_due_date) {
    m_tax_due_date = tax_due_date;
    m_tax_due_date_isSet = true;
}

bool OAIVehicle::is_tax_due_date_Set() const{
    return m_tax_due_date_isSet;
}

bool OAIVehicle::is_tax_due_date_Valid() const{
    return m_tax_due_date_isValid;
}

QString OAIVehicle::getTaxStatus() const {
    return m_tax_status;
}
void OAIVehicle::setTaxStatus(const QString &tax_status) {
    m_tax_status = tax_status;
    m_tax_status_isSet = true;
}

bool OAIVehicle::is_tax_status_Set() const{
    return m_tax_status_isSet;
}

bool OAIVehicle::is_tax_status_Valid() const{
    return m_tax_status_isValid;
}

QString OAIVehicle::getTypeApproval() const {
    return m_type_approval;
}
void OAIVehicle::setTypeApproval(const QString &type_approval) {
    m_type_approval = type_approval;
    m_type_approval_isSet = true;
}

bool OAIVehicle::is_type_approval_Set() const{
    return m_type_approval_isSet;
}

bool OAIVehicle::is_type_approval_Valid() const{
    return m_type_approval_isValid;
}

QString OAIVehicle::getWheelplan() const {
    return m_wheelplan;
}
void OAIVehicle::setWheelplan(const QString &wheelplan) {
    m_wheelplan = wheelplan;
    m_wheelplan_isSet = true;
}

bool OAIVehicle::is_wheelplan_Set() const{
    return m_wheelplan_isSet;
}

bool OAIVehicle::is_wheelplan_Valid() const{
    return m_wheelplan_isValid;
}

qint32 OAIVehicle::getYearOfManufacture() const {
    return m_year_of_manufacture;
}
void OAIVehicle::setYearOfManufacture(const qint32 &year_of_manufacture) {
    m_year_of_manufacture = year_of_manufacture;
    m_year_of_manufacture_isSet = true;
}

bool OAIVehicle::is_year_of_manufacture_Set() const{
    return m_year_of_manufacture_isSet;
}

bool OAIVehicle::is_year_of_manufacture_Valid() const{
    return m_year_of_manufacture_isValid;
}

bool OAIVehicle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_art_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_co2_emissions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_colour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_of_last_v5_c_issued_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_euro_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fuel_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_make_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marked_for_export_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_month_of_first_dvla_registration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_month_of_first_registration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mot_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mot_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_real_driving_emissions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revenue_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_approval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wheelplan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_of_manufacture_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVehicle::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_registration_number_isValid && true;
}

} // namespace OpenAPI
