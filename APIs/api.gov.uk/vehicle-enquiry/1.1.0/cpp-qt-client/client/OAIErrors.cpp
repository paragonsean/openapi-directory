/**
 * Vehicle Enquiry API
 * Interface specification for the DVLA Vehicle Enquiry API
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: DvlaAPIAccess@dvla.gov.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrors.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrors::OAIErrors(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrors::OAIErrors() {
    this->initializeModel();
}

OAIErrors::~OAIErrors() {}

void OAIErrors::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIErrors::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrors::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIErrors::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrors::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIErrors::getCode() const {
    return m_code;
}
void OAIErrors::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIErrors::is_code_Set() const{
    return m_code_isSet;
}

bool OAIErrors::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIErrors::getDetail() const {
    return m_detail;
}
void OAIErrors::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIErrors::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIErrors::is_detail_Valid() const{
    return m_detail_isValid;
}

QString OAIErrors::getStatus() const {
    return m_status;
}
void OAIErrors::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIErrors::is_status_Set() const{
    return m_status_isSet;
}

bool OAIErrors::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIErrors::getTitle() const {
    return m_title;
}
void OAIErrors::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIErrors::is_title_Set() const{
    return m_title_isSet;
}

bool OAIErrors::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIErrors::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrors::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_title_isValid && true;
}

} // namespace OpenAPI
