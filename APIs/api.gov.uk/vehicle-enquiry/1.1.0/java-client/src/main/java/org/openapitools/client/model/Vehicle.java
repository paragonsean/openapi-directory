/*
 * Vehicle Enquiry API
 * Interface specification for the DVLA Vehicle Enquiry API
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: DvlaAPIAccess@dvla.gov.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Vehicle
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:47.677139-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Vehicle {
  public static final String SERIALIZED_NAME_ART_END_DATE = "artEndDate";
  @SerializedName(SERIALIZED_NAME_ART_END_DATE)
  private LocalDate artEndDate;

  public static final String SERIALIZED_NAME_CO2_EMISSIONS = "co2Emissions";
  @SerializedName(SERIALIZED_NAME_CO2_EMISSIONS)
  private Integer co2Emissions;

  public static final String SERIALIZED_NAME_COLOUR = "colour";
  @SerializedName(SERIALIZED_NAME_COLOUR)
  private String colour;

  public static final String SERIALIZED_NAME_DATE_OF_LAST_V5_C_ISSUED = "dateOfLastV5CIssued";
  @SerializedName(SERIALIZED_NAME_DATE_OF_LAST_V5_C_ISSUED)
  private LocalDate dateOfLastV5CIssued;

  public static final String SERIALIZED_NAME_ENGINE_CAPACITY = "engineCapacity";
  @SerializedName(SERIALIZED_NAME_ENGINE_CAPACITY)
  private Integer engineCapacity;

  public static final String SERIALIZED_NAME_EURO_STATUS = "euroStatus";
  @SerializedName(SERIALIZED_NAME_EURO_STATUS)
  private String euroStatus;

  public static final String SERIALIZED_NAME_FUEL_TYPE = "fuelType";
  @SerializedName(SERIALIZED_NAME_FUEL_TYPE)
  private String fuelType;

  public static final String SERIALIZED_NAME_MAKE = "make";
  @SerializedName(SERIALIZED_NAME_MAKE)
  private String make;

  public static final String SERIALIZED_NAME_MARKED_FOR_EXPORT = "markedForExport";
  @SerializedName(SERIALIZED_NAME_MARKED_FOR_EXPORT)
  private Boolean markedForExport;

  public static final String SERIALIZED_NAME_MONTH_OF_FIRST_DVLA_REGISTRATION = "monthOfFirstDvlaRegistration";
  @SerializedName(SERIALIZED_NAME_MONTH_OF_FIRST_DVLA_REGISTRATION)
  private LocalDate monthOfFirstDvlaRegistration;

  public static final String SERIALIZED_NAME_MONTH_OF_FIRST_REGISTRATION = "monthOfFirstRegistration";
  @SerializedName(SERIALIZED_NAME_MONTH_OF_FIRST_REGISTRATION)
  private LocalDate monthOfFirstRegistration;

  public static final String SERIALIZED_NAME_MOT_EXPIRY_DATE = "motExpiryDate";
  @SerializedName(SERIALIZED_NAME_MOT_EXPIRY_DATE)
  private LocalDate motExpiryDate;

  /**
   * MOT Status of the vehicle
   */
  @JsonAdapter(MotStatusEnum.Adapter.class)
  public enum MotStatusEnum {
    NO_DETAILS_HELD_BY_DVLA("No details held by DVLA"),
    
    NO_RESULTS_RETURNED("No results returned"),
    
    NOT_VALID("Not valid"),
    
    VALID("Valid");

    private String value;

    MotStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MotStatusEnum fromValue(String value) {
      for (MotStatusEnum b : MotStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MotStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MotStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MotStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MotStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MotStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MOT_STATUS = "motStatus";
  @SerializedName(SERIALIZED_NAME_MOT_STATUS)
  private MotStatusEnum motStatus;

  public static final String SERIALIZED_NAME_REAL_DRIVING_EMISSIONS = "realDrivingEmissions";
  @SerializedName(SERIALIZED_NAME_REAL_DRIVING_EMISSIONS)
  private String realDrivingEmissions;

  public static final String SERIALIZED_NAME_REGISTRATION_NUMBER = "registrationNumber";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_NUMBER)
  private String registrationNumber;

  public static final String SERIALIZED_NAME_REVENUE_WEIGHT = "revenueWeight";
  @SerializedName(SERIALIZED_NAME_REVENUE_WEIGHT)
  private Integer revenueWeight;

  public static final String SERIALIZED_NAME_TAX_DUE_DATE = "taxDueDate";
  @SerializedName(SERIALIZED_NAME_TAX_DUE_DATE)
  private LocalDate taxDueDate;

  /**
   * Tax status of the vehicle
   */
  @JsonAdapter(TaxStatusEnum.Adapter.class)
  public enum TaxStatusEnum {
    NOT_TAXED_FOR_ON_ROAD_USE("Not Taxed for on Road Use"),
    
    SORN("SORN"),
    
    TAXED("Taxed"),
    
    UNTAXED("Untaxed");

    private String value;

    TaxStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TaxStatusEnum fromValue(String value) {
      for (TaxStatusEnum b : TaxStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TaxStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TaxStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TaxStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TaxStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TaxStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TAX_STATUS = "taxStatus";
  @SerializedName(SERIALIZED_NAME_TAX_STATUS)
  private TaxStatusEnum taxStatus;

  public static final String SERIALIZED_NAME_TYPE_APPROVAL = "typeApproval";
  @SerializedName(SERIALIZED_NAME_TYPE_APPROVAL)
  private String typeApproval;

  public static final String SERIALIZED_NAME_WHEELPLAN = "wheelplan";
  @SerializedName(SERIALIZED_NAME_WHEELPLAN)
  private String wheelplan;

  public static final String SERIALIZED_NAME_YEAR_OF_MANUFACTURE = "yearOfManufacture";
  @SerializedName(SERIALIZED_NAME_YEAR_OF_MANUFACTURE)
  private Integer yearOfManufacture;

  public Vehicle() {
  }

  public Vehicle artEndDate(LocalDate artEndDate) {
    this.artEndDate = artEndDate;
    return this;
  }

  /**
   * Additional Rate of Tax End Date, format: YYYY-MM-DD
   * @return artEndDate
   */
  @javax.annotation.Nullable
  public LocalDate getArtEndDate() {
    return artEndDate;
  }

  public void setArtEndDate(LocalDate artEndDate) {
    this.artEndDate = artEndDate;
  }


  public Vehicle co2Emissions(Integer co2Emissions) {
    this.co2Emissions = co2Emissions;
    return this;
  }

  /**
   * Carbon Dioxide emissions in grams per kilometre
   * @return co2Emissions
   */
  @javax.annotation.Nullable
  public Integer getCo2Emissions() {
    return co2Emissions;
  }

  public void setCo2Emissions(Integer co2Emissions) {
    this.co2Emissions = co2Emissions;
  }


  public Vehicle colour(String colour) {
    this.colour = colour;
    return this;
  }

  /**
   * Vehicle colour
   * @return colour
   */
  @javax.annotation.Nullable
  public String getColour() {
    return colour;
  }

  public void setColour(String colour) {
    this.colour = colour;
  }


  public Vehicle dateOfLastV5CIssued(LocalDate dateOfLastV5CIssued) {
    this.dateOfLastV5CIssued = dateOfLastV5CIssued;
    return this;
  }

  /**
   * Date of last V5C issued
   * @return dateOfLastV5CIssued
   */
  @javax.annotation.Nullable
  public LocalDate getDateOfLastV5CIssued() {
    return dateOfLastV5CIssued;
  }

  public void setDateOfLastV5CIssued(LocalDate dateOfLastV5CIssued) {
    this.dateOfLastV5CIssued = dateOfLastV5CIssued;
  }


  public Vehicle engineCapacity(Integer engineCapacity) {
    this.engineCapacity = engineCapacity;
    return this;
  }

  /**
   * Engine capacity in cubic centimetres
   * @return engineCapacity
   */
  @javax.annotation.Nullable
  public Integer getEngineCapacity() {
    return engineCapacity;
  }

  public void setEngineCapacity(Integer engineCapacity) {
    this.engineCapacity = engineCapacity;
  }


  public Vehicle euroStatus(String euroStatus) {
    this.euroStatus = euroStatus;
    return this;
  }

  /**
   * Euro Status (Dealer / Customer Provided (new vehicles))
   * @return euroStatus
   */
  @javax.annotation.Nullable
  public String getEuroStatus() {
    return euroStatus;
  }

  public void setEuroStatus(String euroStatus) {
    this.euroStatus = euroStatus;
  }


  public Vehicle fuelType(String fuelType) {
    this.fuelType = fuelType;
    return this;
  }

  /**
   * Fuel type (Method of Propulsion)
   * @return fuelType
   */
  @javax.annotation.Nullable
  public String getFuelType() {
    return fuelType;
  }

  public void setFuelType(String fuelType) {
    this.fuelType = fuelType;
  }


  public Vehicle make(String make) {
    this.make = make;
    return this;
  }

  /**
   * Vehicle make
   * @return make
   */
  @javax.annotation.Nullable
  public String getMake() {
    return make;
  }

  public void setMake(String make) {
    this.make = make;
  }


  public Vehicle markedForExport(Boolean markedForExport) {
    this.markedForExport = markedForExport;
    return this;
  }

  /**
   * True only if vehicle has been export marked
   * @return markedForExport
   */
  @javax.annotation.Nullable
  public Boolean getMarkedForExport() {
    return markedForExport;
  }

  public void setMarkedForExport(Boolean markedForExport) {
    this.markedForExport = markedForExport;
  }


  public Vehicle monthOfFirstDvlaRegistration(LocalDate monthOfFirstDvlaRegistration) {
    this.monthOfFirstDvlaRegistration = monthOfFirstDvlaRegistration;
    return this;
  }

  /**
   * Month of First DVLA Registration
   * @return monthOfFirstDvlaRegistration
   */
  @javax.annotation.Nullable
  public LocalDate getMonthOfFirstDvlaRegistration() {
    return monthOfFirstDvlaRegistration;
  }

  public void setMonthOfFirstDvlaRegistration(LocalDate monthOfFirstDvlaRegistration) {
    this.monthOfFirstDvlaRegistration = monthOfFirstDvlaRegistration;
  }


  public Vehicle monthOfFirstRegistration(LocalDate monthOfFirstRegistration) {
    this.monthOfFirstRegistration = monthOfFirstRegistration;
    return this;
  }

  /**
   * Month of First Registration
   * @return monthOfFirstRegistration
   */
  @javax.annotation.Nullable
  public LocalDate getMonthOfFirstRegistration() {
    return monthOfFirstRegistration;
  }

  public void setMonthOfFirstRegistration(LocalDate monthOfFirstRegistration) {
    this.monthOfFirstRegistration = monthOfFirstRegistration;
  }


  public Vehicle motExpiryDate(LocalDate motExpiryDate) {
    this.motExpiryDate = motExpiryDate;
    return this;
  }

  /**
   * Mot Expiry Date
   * @return motExpiryDate
   */
  @javax.annotation.Nullable
  public LocalDate getMotExpiryDate() {
    return motExpiryDate;
  }

  public void setMotExpiryDate(LocalDate motExpiryDate) {
    this.motExpiryDate = motExpiryDate;
  }


  public Vehicle motStatus(MotStatusEnum motStatus) {
    this.motStatus = motStatus;
    return this;
  }

  /**
   * MOT Status of the vehicle
   * @return motStatus
   */
  @javax.annotation.Nullable
  public MotStatusEnum getMotStatus() {
    return motStatus;
  }

  public void setMotStatus(MotStatusEnum motStatus) {
    this.motStatus = motStatus;
  }


  public Vehicle realDrivingEmissions(String realDrivingEmissions) {
    this.realDrivingEmissions = realDrivingEmissions;
    return this;
  }

  /**
   * Real Driving Emissions value
   * @return realDrivingEmissions
   */
  @javax.annotation.Nullable
  public String getRealDrivingEmissions() {
    return realDrivingEmissions;
  }

  public void setRealDrivingEmissions(String realDrivingEmissions) {
    this.realDrivingEmissions = realDrivingEmissions;
  }


  public Vehicle registrationNumber(String registrationNumber) {
    this.registrationNumber = registrationNumber;
    return this;
  }

  /**
   * Registration number of the vehicle
   * @return registrationNumber
   */
  @javax.annotation.Nonnull
  public String getRegistrationNumber() {
    return registrationNumber;
  }

  public void setRegistrationNumber(String registrationNumber) {
    this.registrationNumber = registrationNumber;
  }


  public Vehicle revenueWeight(Integer revenueWeight) {
    this.revenueWeight = revenueWeight;
    return this;
  }

  /**
   * Revenue weight in kilograms
   * @return revenueWeight
   */
  @javax.annotation.Nullable
  public Integer getRevenueWeight() {
    return revenueWeight;
  }

  public void setRevenueWeight(Integer revenueWeight) {
    this.revenueWeight = revenueWeight;
  }


  public Vehicle taxDueDate(LocalDate taxDueDate) {
    this.taxDueDate = taxDueDate;
    return this;
  }

  /**
   * Date of tax liablity, Used in calculating licence information presented to user
   * @return taxDueDate
   */
  @javax.annotation.Nullable
  public LocalDate getTaxDueDate() {
    return taxDueDate;
  }

  public void setTaxDueDate(LocalDate taxDueDate) {
    this.taxDueDate = taxDueDate;
  }


  public Vehicle taxStatus(TaxStatusEnum taxStatus) {
    this.taxStatus = taxStatus;
    return this;
  }

  /**
   * Tax status of the vehicle
   * @return taxStatus
   */
  @javax.annotation.Nullable
  public TaxStatusEnum getTaxStatus() {
    return taxStatus;
  }

  public void setTaxStatus(TaxStatusEnum taxStatus) {
    this.taxStatus = taxStatus;
  }


  public Vehicle typeApproval(String typeApproval) {
    this.typeApproval = typeApproval;
    return this;
  }

  /**
   * Vehicle Type Approval Category
   * @return typeApproval
   */
  @javax.annotation.Nullable
  public String getTypeApproval() {
    return typeApproval;
  }

  public void setTypeApproval(String typeApproval) {
    this.typeApproval = typeApproval;
  }


  public Vehicle wheelplan(String wheelplan) {
    this.wheelplan = wheelplan;
    return this;
  }

  /**
   * Vehicle wheel plan
   * @return wheelplan
   */
  @javax.annotation.Nullable
  public String getWheelplan() {
    return wheelplan;
  }

  public void setWheelplan(String wheelplan) {
    this.wheelplan = wheelplan;
  }


  public Vehicle yearOfManufacture(Integer yearOfManufacture) {
    this.yearOfManufacture = yearOfManufacture;
    return this;
  }

  /**
   * Year of Manufacture
   * @return yearOfManufacture
   */
  @javax.annotation.Nullable
  public Integer getYearOfManufacture() {
    return yearOfManufacture;
  }

  public void setYearOfManufacture(Integer yearOfManufacture) {
    this.yearOfManufacture = yearOfManufacture;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Vehicle vehicle = (Vehicle) o;
    return Objects.equals(this.artEndDate, vehicle.artEndDate) &&
        Objects.equals(this.co2Emissions, vehicle.co2Emissions) &&
        Objects.equals(this.colour, vehicle.colour) &&
        Objects.equals(this.dateOfLastV5CIssued, vehicle.dateOfLastV5CIssued) &&
        Objects.equals(this.engineCapacity, vehicle.engineCapacity) &&
        Objects.equals(this.euroStatus, vehicle.euroStatus) &&
        Objects.equals(this.fuelType, vehicle.fuelType) &&
        Objects.equals(this.make, vehicle.make) &&
        Objects.equals(this.markedForExport, vehicle.markedForExport) &&
        Objects.equals(this.monthOfFirstDvlaRegistration, vehicle.monthOfFirstDvlaRegistration) &&
        Objects.equals(this.monthOfFirstRegistration, vehicle.monthOfFirstRegistration) &&
        Objects.equals(this.motExpiryDate, vehicle.motExpiryDate) &&
        Objects.equals(this.motStatus, vehicle.motStatus) &&
        Objects.equals(this.realDrivingEmissions, vehicle.realDrivingEmissions) &&
        Objects.equals(this.registrationNumber, vehicle.registrationNumber) &&
        Objects.equals(this.revenueWeight, vehicle.revenueWeight) &&
        Objects.equals(this.taxDueDate, vehicle.taxDueDate) &&
        Objects.equals(this.taxStatus, vehicle.taxStatus) &&
        Objects.equals(this.typeApproval, vehicle.typeApproval) &&
        Objects.equals(this.wheelplan, vehicle.wheelplan) &&
        Objects.equals(this.yearOfManufacture, vehicle.yearOfManufacture);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artEndDate, co2Emissions, colour, dateOfLastV5CIssued, engineCapacity, euroStatus, fuelType, make, markedForExport, monthOfFirstDvlaRegistration, monthOfFirstRegistration, motExpiryDate, motStatus, realDrivingEmissions, registrationNumber, revenueWeight, taxDueDate, taxStatus, typeApproval, wheelplan, yearOfManufacture);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Vehicle {\n");
    sb.append("    artEndDate: ").append(toIndentedString(artEndDate)).append("\n");
    sb.append("    co2Emissions: ").append(toIndentedString(co2Emissions)).append("\n");
    sb.append("    colour: ").append(toIndentedString(colour)).append("\n");
    sb.append("    dateOfLastV5CIssued: ").append(toIndentedString(dateOfLastV5CIssued)).append("\n");
    sb.append("    engineCapacity: ").append(toIndentedString(engineCapacity)).append("\n");
    sb.append("    euroStatus: ").append(toIndentedString(euroStatus)).append("\n");
    sb.append("    fuelType: ").append(toIndentedString(fuelType)).append("\n");
    sb.append("    make: ").append(toIndentedString(make)).append("\n");
    sb.append("    markedForExport: ").append(toIndentedString(markedForExport)).append("\n");
    sb.append("    monthOfFirstDvlaRegistration: ").append(toIndentedString(monthOfFirstDvlaRegistration)).append("\n");
    sb.append("    monthOfFirstRegistration: ").append(toIndentedString(monthOfFirstRegistration)).append("\n");
    sb.append("    motExpiryDate: ").append(toIndentedString(motExpiryDate)).append("\n");
    sb.append("    motStatus: ").append(toIndentedString(motStatus)).append("\n");
    sb.append("    realDrivingEmissions: ").append(toIndentedString(realDrivingEmissions)).append("\n");
    sb.append("    registrationNumber: ").append(toIndentedString(registrationNumber)).append("\n");
    sb.append("    revenueWeight: ").append(toIndentedString(revenueWeight)).append("\n");
    sb.append("    taxDueDate: ").append(toIndentedString(taxDueDate)).append("\n");
    sb.append("    taxStatus: ").append(toIndentedString(taxStatus)).append("\n");
    sb.append("    typeApproval: ").append(toIndentedString(typeApproval)).append("\n");
    sb.append("    wheelplan: ").append(toIndentedString(wheelplan)).append("\n");
    sb.append("    yearOfManufacture: ").append(toIndentedString(yearOfManufacture)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("artEndDate");
    openapiFields.add("co2Emissions");
    openapiFields.add("colour");
    openapiFields.add("dateOfLastV5CIssued");
    openapiFields.add("engineCapacity");
    openapiFields.add("euroStatus");
    openapiFields.add("fuelType");
    openapiFields.add("make");
    openapiFields.add("markedForExport");
    openapiFields.add("monthOfFirstDvlaRegistration");
    openapiFields.add("monthOfFirstRegistration");
    openapiFields.add("motExpiryDate");
    openapiFields.add("motStatus");
    openapiFields.add("realDrivingEmissions");
    openapiFields.add("registrationNumber");
    openapiFields.add("revenueWeight");
    openapiFields.add("taxDueDate");
    openapiFields.add("taxStatus");
    openapiFields.add("typeApproval");
    openapiFields.add("wheelplan");
    openapiFields.add("yearOfManufacture");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("registrationNumber");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Vehicle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Vehicle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Vehicle is not found in the empty JSON string", Vehicle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Vehicle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Vehicle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Vehicle.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("colour") != null && !jsonObj.get("colour").isJsonNull()) && !jsonObj.get("colour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colour").toString()));
      }
      if ((jsonObj.get("euroStatus") != null && !jsonObj.get("euroStatus").isJsonNull()) && !jsonObj.get("euroStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `euroStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("euroStatus").toString()));
      }
      if ((jsonObj.get("fuelType") != null && !jsonObj.get("fuelType").isJsonNull()) && !jsonObj.get("fuelType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fuelType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fuelType").toString()));
      }
      if ((jsonObj.get("make") != null && !jsonObj.get("make").isJsonNull()) && !jsonObj.get("make").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `make` to be a primitive type in the JSON string but got `%s`", jsonObj.get("make").toString()));
      }
      if ((jsonObj.get("motStatus") != null && !jsonObj.get("motStatus").isJsonNull()) && !jsonObj.get("motStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `motStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("motStatus").toString()));
      }
      // validate the optional field `motStatus`
      if (jsonObj.get("motStatus") != null && !jsonObj.get("motStatus").isJsonNull()) {
        MotStatusEnum.validateJsonElement(jsonObj.get("motStatus"));
      }
      if ((jsonObj.get("realDrivingEmissions") != null && !jsonObj.get("realDrivingEmissions").isJsonNull()) && !jsonObj.get("realDrivingEmissions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `realDrivingEmissions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("realDrivingEmissions").toString()));
      }
      if (!jsonObj.get("registrationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationNumber").toString()));
      }
      if ((jsonObj.get("taxStatus") != null && !jsonObj.get("taxStatus").isJsonNull()) && !jsonObj.get("taxStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxStatus").toString()));
      }
      // validate the optional field `taxStatus`
      if (jsonObj.get("taxStatus") != null && !jsonObj.get("taxStatus").isJsonNull()) {
        TaxStatusEnum.validateJsonElement(jsonObj.get("taxStatus"));
      }
      if ((jsonObj.get("typeApproval") != null && !jsonObj.get("typeApproval").isJsonNull()) && !jsonObj.get("typeApproval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeApproval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeApproval").toString()));
      }
      if ((jsonObj.get("wheelplan") != null && !jsonObj.get("wheelplan").isJsonNull()) && !jsonObj.get("wheelplan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wheelplan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wheelplan").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Vehicle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Vehicle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Vehicle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Vehicle.class));

       return (TypeAdapter<T>) new TypeAdapter<Vehicle>() {
           @Override
           public void write(JsonWriter out, Vehicle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Vehicle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Vehicle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Vehicle
   * @throws IOException if the JSON string is invalid with respect to Vehicle
   */
  public static Vehicle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Vehicle.class);
  }

  /**
   * Convert an instance of Vehicle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

