# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Vehicle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, art_end_date: date=None, co2_emissions: int=None, colour: str=None, date_of_last_v5_c_issued: date=None, engine_capacity: int=None, euro_status: str=None, fuel_type: str=None, make: str=None, marked_for_export: bool=None, month_of_first_dvla_registration: date=None, month_of_first_registration: date=None, mot_expiry_date: date=None, mot_status: str=None, real_driving_emissions: str=None, registration_number: str=None, revenue_weight: int=None, tax_due_date: date=None, tax_status: str=None, type_approval: str=None, wheelplan: str=None, year_of_manufacture: int=None):
        """Vehicle - a model defined in OpenAPI

        :param art_end_date: The art_end_date of this Vehicle.
        :param co2_emissions: The co2_emissions of this Vehicle.
        :param colour: The colour of this Vehicle.
        :param date_of_last_v5_c_issued: The date_of_last_v5_c_issued of this Vehicle.
        :param engine_capacity: The engine_capacity of this Vehicle.
        :param euro_status: The euro_status of this Vehicle.
        :param fuel_type: The fuel_type of this Vehicle.
        :param make: The make of this Vehicle.
        :param marked_for_export: The marked_for_export of this Vehicle.
        :param month_of_first_dvla_registration: The month_of_first_dvla_registration of this Vehicle.
        :param month_of_first_registration: The month_of_first_registration of this Vehicle.
        :param mot_expiry_date: The mot_expiry_date of this Vehicle.
        :param mot_status: The mot_status of this Vehicle.
        :param real_driving_emissions: The real_driving_emissions of this Vehicle.
        :param registration_number: The registration_number of this Vehicle.
        :param revenue_weight: The revenue_weight of this Vehicle.
        :param tax_due_date: The tax_due_date of this Vehicle.
        :param tax_status: The tax_status of this Vehicle.
        :param type_approval: The type_approval of this Vehicle.
        :param wheelplan: The wheelplan of this Vehicle.
        :param year_of_manufacture: The year_of_manufacture of this Vehicle.
        """
        self.openapi_types = {
            'art_end_date': date,
            'co2_emissions': int,
            'colour': str,
            'date_of_last_v5_c_issued': date,
            'engine_capacity': int,
            'euro_status': str,
            'fuel_type': str,
            'make': str,
            'marked_for_export': bool,
            'month_of_first_dvla_registration': date,
            'month_of_first_registration': date,
            'mot_expiry_date': date,
            'mot_status': str,
            'real_driving_emissions': str,
            'registration_number': str,
            'revenue_weight': int,
            'tax_due_date': date,
            'tax_status': str,
            'type_approval': str,
            'wheelplan': str,
            'year_of_manufacture': int
        }

        self.attribute_map = {
            'art_end_date': 'artEndDate',
            'co2_emissions': 'co2Emissions',
            'colour': 'colour',
            'date_of_last_v5_c_issued': 'dateOfLastV5CIssued',
            'engine_capacity': 'engineCapacity',
            'euro_status': 'euroStatus',
            'fuel_type': 'fuelType',
            'make': 'make',
            'marked_for_export': 'markedForExport',
            'month_of_first_dvla_registration': 'monthOfFirstDvlaRegistration',
            'month_of_first_registration': 'monthOfFirstRegistration',
            'mot_expiry_date': 'motExpiryDate',
            'mot_status': 'motStatus',
            'real_driving_emissions': 'realDrivingEmissions',
            'registration_number': 'registrationNumber',
            'revenue_weight': 'revenueWeight',
            'tax_due_date': 'taxDueDate',
            'tax_status': 'taxStatus',
            'type_approval': 'typeApproval',
            'wheelplan': 'wheelplan',
            'year_of_manufacture': 'yearOfManufacture'
        }

        self._art_end_date = art_end_date
        self._co2_emissions = co2_emissions
        self._colour = colour
        self._date_of_last_v5_c_issued = date_of_last_v5_c_issued
        self._engine_capacity = engine_capacity
        self._euro_status = euro_status
        self._fuel_type = fuel_type
        self._make = make
        self._marked_for_export = marked_for_export
        self._month_of_first_dvla_registration = month_of_first_dvla_registration
        self._month_of_first_registration = month_of_first_registration
        self._mot_expiry_date = mot_expiry_date
        self._mot_status = mot_status
        self._real_driving_emissions = real_driving_emissions
        self._registration_number = registration_number
        self._revenue_weight = revenue_weight
        self._tax_due_date = tax_due_date
        self._tax_status = tax_status
        self._type_approval = type_approval
        self._wheelplan = wheelplan
        self._year_of_manufacture = year_of_manufacture

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Vehicle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Vehicle of this Vehicle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def art_end_date(self):
        """Gets the art_end_date of this Vehicle.

        Additional Rate of Tax End Date, format: YYYY-MM-DD

        :return: The art_end_date of this Vehicle.
        :rtype: date
        """
        return self._art_end_date

    @art_end_date.setter
    def art_end_date(self, art_end_date):
        """Sets the art_end_date of this Vehicle.

        Additional Rate of Tax End Date, format: YYYY-MM-DD

        :param art_end_date: The art_end_date of this Vehicle.
        :type art_end_date: date
        """

        self._art_end_date = art_end_date

    @property
    def co2_emissions(self):
        """Gets the co2_emissions of this Vehicle.

        Carbon Dioxide emissions in grams per kilometre

        :return: The co2_emissions of this Vehicle.
        :rtype: int
        """
        return self._co2_emissions

    @co2_emissions.setter
    def co2_emissions(self, co2_emissions):
        """Sets the co2_emissions of this Vehicle.

        Carbon Dioxide emissions in grams per kilometre

        :param co2_emissions: The co2_emissions of this Vehicle.
        :type co2_emissions: int
        """

        self._co2_emissions = co2_emissions

    @property
    def colour(self):
        """Gets the colour of this Vehicle.

        Vehicle colour

        :return: The colour of this Vehicle.
        :rtype: str
        """
        return self._colour

    @colour.setter
    def colour(self, colour):
        """Sets the colour of this Vehicle.

        Vehicle colour

        :param colour: The colour of this Vehicle.
        :type colour: str
        """

        self._colour = colour

    @property
    def date_of_last_v5_c_issued(self):
        """Gets the date_of_last_v5_c_issued of this Vehicle.

        Date of last V5C issued

        :return: The date_of_last_v5_c_issued of this Vehicle.
        :rtype: date
        """
        return self._date_of_last_v5_c_issued

    @date_of_last_v5_c_issued.setter
    def date_of_last_v5_c_issued(self, date_of_last_v5_c_issued):
        """Sets the date_of_last_v5_c_issued of this Vehicle.

        Date of last V5C issued

        :param date_of_last_v5_c_issued: The date_of_last_v5_c_issued of this Vehicle.
        :type date_of_last_v5_c_issued: date
        """

        self._date_of_last_v5_c_issued = date_of_last_v5_c_issued

    @property
    def engine_capacity(self):
        """Gets the engine_capacity of this Vehicle.

        Engine capacity in cubic centimetres

        :return: The engine_capacity of this Vehicle.
        :rtype: int
        """
        return self._engine_capacity

    @engine_capacity.setter
    def engine_capacity(self, engine_capacity):
        """Sets the engine_capacity of this Vehicle.

        Engine capacity in cubic centimetres

        :param engine_capacity: The engine_capacity of this Vehicle.
        :type engine_capacity: int
        """

        self._engine_capacity = engine_capacity

    @property
    def euro_status(self):
        """Gets the euro_status of this Vehicle.

        Euro Status (Dealer / Customer Provided (new vehicles))

        :return: The euro_status of this Vehicle.
        :rtype: str
        """
        return self._euro_status

    @euro_status.setter
    def euro_status(self, euro_status):
        """Sets the euro_status of this Vehicle.

        Euro Status (Dealer / Customer Provided (new vehicles))

        :param euro_status: The euro_status of this Vehicle.
        :type euro_status: str
        """

        self._euro_status = euro_status

    @property
    def fuel_type(self):
        """Gets the fuel_type of this Vehicle.

        Fuel type (Method of Propulsion)

        :return: The fuel_type of this Vehicle.
        :rtype: str
        """
        return self._fuel_type

    @fuel_type.setter
    def fuel_type(self, fuel_type):
        """Sets the fuel_type of this Vehicle.

        Fuel type (Method of Propulsion)

        :param fuel_type: The fuel_type of this Vehicle.
        :type fuel_type: str
        """

        self._fuel_type = fuel_type

    @property
    def make(self):
        """Gets the make of this Vehicle.

        Vehicle make

        :return: The make of this Vehicle.
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this Vehicle.

        Vehicle make

        :param make: The make of this Vehicle.
        :type make: str
        """

        self._make = make

    @property
    def marked_for_export(self):
        """Gets the marked_for_export of this Vehicle.

        True only if vehicle has been export marked

        :return: The marked_for_export of this Vehicle.
        :rtype: bool
        """
        return self._marked_for_export

    @marked_for_export.setter
    def marked_for_export(self, marked_for_export):
        """Sets the marked_for_export of this Vehicle.

        True only if vehicle has been export marked

        :param marked_for_export: The marked_for_export of this Vehicle.
        :type marked_for_export: bool
        """

        self._marked_for_export = marked_for_export

    @property
    def month_of_first_dvla_registration(self):
        """Gets the month_of_first_dvla_registration of this Vehicle.

        Month of First DVLA Registration

        :return: The month_of_first_dvla_registration of this Vehicle.
        :rtype: date
        """
        return self._month_of_first_dvla_registration

    @month_of_first_dvla_registration.setter
    def month_of_first_dvla_registration(self, month_of_first_dvla_registration):
        """Sets the month_of_first_dvla_registration of this Vehicle.

        Month of First DVLA Registration

        :param month_of_first_dvla_registration: The month_of_first_dvla_registration of this Vehicle.
        :type month_of_first_dvla_registration: date
        """

        self._month_of_first_dvla_registration = month_of_first_dvla_registration

    @property
    def month_of_first_registration(self):
        """Gets the month_of_first_registration of this Vehicle.

        Month of First Registration

        :return: The month_of_first_registration of this Vehicle.
        :rtype: date
        """
        return self._month_of_first_registration

    @month_of_first_registration.setter
    def month_of_first_registration(self, month_of_first_registration):
        """Sets the month_of_first_registration of this Vehicle.

        Month of First Registration

        :param month_of_first_registration: The month_of_first_registration of this Vehicle.
        :type month_of_first_registration: date
        """

        self._month_of_first_registration = month_of_first_registration

    @property
    def mot_expiry_date(self):
        """Gets the mot_expiry_date of this Vehicle.

        Mot Expiry Date

        :return: The mot_expiry_date of this Vehicle.
        :rtype: date
        """
        return self._mot_expiry_date

    @mot_expiry_date.setter
    def mot_expiry_date(self, mot_expiry_date):
        """Sets the mot_expiry_date of this Vehicle.

        Mot Expiry Date

        :param mot_expiry_date: The mot_expiry_date of this Vehicle.
        :type mot_expiry_date: date
        """

        self._mot_expiry_date = mot_expiry_date

    @property
    def mot_status(self):
        """Gets the mot_status of this Vehicle.

        MOT Status of the vehicle

        :return: The mot_status of this Vehicle.
        :rtype: str
        """
        return self._mot_status

    @mot_status.setter
    def mot_status(self, mot_status):
        """Sets the mot_status of this Vehicle.

        MOT Status of the vehicle

        :param mot_status: The mot_status of this Vehicle.
        :type mot_status: str
        """
        allowed_values = ["No details held by DVLA", "No results returned", "Not valid", "Valid"]  # noqa: E501
        if mot_status not in allowed_values:
            raise ValueError(
                "Invalid value for `mot_status` ({0}), must be one of {1}"
                .format(mot_status, allowed_values)
            )

        self._mot_status = mot_status

    @property
    def real_driving_emissions(self):
        """Gets the real_driving_emissions of this Vehicle.

        Real Driving Emissions value

        :return: The real_driving_emissions of this Vehicle.
        :rtype: str
        """
        return self._real_driving_emissions

    @real_driving_emissions.setter
    def real_driving_emissions(self, real_driving_emissions):
        """Sets the real_driving_emissions of this Vehicle.

        Real Driving Emissions value

        :param real_driving_emissions: The real_driving_emissions of this Vehicle.
        :type real_driving_emissions: str
        """

        self._real_driving_emissions = real_driving_emissions

    @property
    def registration_number(self):
        """Gets the registration_number of this Vehicle.

        Registration number of the vehicle

        :return: The registration_number of this Vehicle.
        :rtype: str
        """
        return self._registration_number

    @registration_number.setter
    def registration_number(self, registration_number):
        """Sets the registration_number of this Vehicle.

        Registration number of the vehicle

        :param registration_number: The registration_number of this Vehicle.
        :type registration_number: str
        """
        if registration_number is None:
            raise ValueError("Invalid value for `registration_number`, must not be `None`")

        self._registration_number = registration_number

    @property
    def revenue_weight(self):
        """Gets the revenue_weight of this Vehicle.

        Revenue weight in kilograms

        :return: The revenue_weight of this Vehicle.
        :rtype: int
        """
        return self._revenue_weight

    @revenue_weight.setter
    def revenue_weight(self, revenue_weight):
        """Sets the revenue_weight of this Vehicle.

        Revenue weight in kilograms

        :param revenue_weight: The revenue_weight of this Vehicle.
        :type revenue_weight: int
        """

        self._revenue_weight = revenue_weight

    @property
    def tax_due_date(self):
        """Gets the tax_due_date of this Vehicle.

        Date of tax liablity, Used in calculating licence information presented to user

        :return: The tax_due_date of this Vehicle.
        :rtype: date
        """
        return self._tax_due_date

    @tax_due_date.setter
    def tax_due_date(self, tax_due_date):
        """Sets the tax_due_date of this Vehicle.

        Date of tax liablity, Used in calculating licence information presented to user

        :param tax_due_date: The tax_due_date of this Vehicle.
        :type tax_due_date: date
        """

        self._tax_due_date = tax_due_date

    @property
    def tax_status(self):
        """Gets the tax_status of this Vehicle.

        Tax status of the vehicle

        :return: The tax_status of this Vehicle.
        :rtype: str
        """
        return self._tax_status

    @tax_status.setter
    def tax_status(self, tax_status):
        """Sets the tax_status of this Vehicle.

        Tax status of the vehicle

        :param tax_status: The tax_status of this Vehicle.
        :type tax_status: str
        """
        allowed_values = ["Not Taxed for on Road Use", "SORN", "Taxed", "Untaxed"]  # noqa: E501
        if tax_status not in allowed_values:
            raise ValueError(
                "Invalid value for `tax_status` ({0}), must be one of {1}"
                .format(tax_status, allowed_values)
            )

        self._tax_status = tax_status

    @property
    def type_approval(self):
        """Gets the type_approval of this Vehicle.

        Vehicle Type Approval Category

        :return: The type_approval of this Vehicle.
        :rtype: str
        """
        return self._type_approval

    @type_approval.setter
    def type_approval(self, type_approval):
        """Sets the type_approval of this Vehicle.

        Vehicle Type Approval Category

        :param type_approval: The type_approval of this Vehicle.
        :type type_approval: str
        """

        self._type_approval = type_approval

    @property
    def wheelplan(self):
        """Gets the wheelplan of this Vehicle.

        Vehicle wheel plan

        :return: The wheelplan of this Vehicle.
        :rtype: str
        """
        return self._wheelplan

    @wheelplan.setter
    def wheelplan(self, wheelplan):
        """Sets the wheelplan of this Vehicle.

        Vehicle wheel plan

        :param wheelplan: The wheelplan of this Vehicle.
        :type wheelplan: str
        """

        self._wheelplan = wheelplan

    @property
    def year_of_manufacture(self):
        """Gets the year_of_manufacture of this Vehicle.

        Year of Manufacture

        :return: The year_of_manufacture of this Vehicle.
        :rtype: int
        """
        return self._year_of_manufacture

    @year_of_manufacture.setter
    def year_of_manufacture(self, year_of_manufacture):
        """Sets the year_of_manufacture of this Vehicle.

        Year of Manufacture

        :param year_of_manufacture: The year_of_manufacture of this Vehicle.
        :type year_of_manufacture: int
        """

        self._year_of_manufacture = year_of_manufacture
