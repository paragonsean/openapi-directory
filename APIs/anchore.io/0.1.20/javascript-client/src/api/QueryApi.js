/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiErrorResponse from '../model/ApiErrorResponse';
import PaginatedImageList from '../model/PaginatedImageList';
import PaginatedVulnerabilityList from '../model/PaginatedVulnerabilityList';
import PaginatedVulnerableImageList from '../model/PaginatedVulnerableImageList';

/**
* Query service.
* @module api/QueryApi
* @version 0.1.20
*/
export default class QueryApi {

    /**
    * Constructs a new QueryApi. 
    * @alias module:api/QueryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the queryImagesByPackage operation.
     * @callback module:api/QueryApi~queryImagesByPackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedImageList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of images containing given package
     * Filterable query interface to search for images containing specified package
     * @param {String} name Name of package to search for (e.g. sed)
     * @param {Object} opts Optional parameters
     * @param {String} [packageType] Type of package to filter on (e.g. dpkg)
     * @param {String} [version] Version of named package to filter on (e.g. 4.4-1)
     * @param {String} [page] The page of results to fetch. Pages start at 1
     * @param {Number} [limit] Limit the number of records for the requested page. If omitted or set to 0, return all results in a single page
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/QueryApi~queryImagesByPackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedImageList}
     */
    queryImagesByPackage(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling queryImagesByPackage");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': name,
        'package_type': opts['packageType'],
        'version': opts['version'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedImageList;
      return this.apiClient.callApi(
        '/query/images/by_package', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryImagesByVulnerability operation.
     * @callback module:api/QueryApi~queryImagesByVulnerabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedVulnerableImageList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List images vulnerable to the specific vulnerability ID.
     * Returns a listing of images and their respective packages vulnerable to the given vulnerability ID
     * @param {String} vulnerabilityId The ID of the vulnerability to search for within all images stored in anchore-engine (e.g. CVE-1999-0001)
     * @param {Object} opts Optional parameters
     * @param {String} [namespace] Filter results to images within the given vulnerability namespace (e.g. debian:8, ubuntu:14.04)
     * @param {String} [affectedPackage] Filter results to images with vulnable packages with the given package name (e.g. libssl)
     * @param {module:model/String} [severity] Filter results to vulnerable package/vulnerability with the given severity
     * @param {Boolean} [vendorOnly = true)] Filter results to include only vulnerabilities that are not marked as invalid by upstream OS vendor data
     * @param {Number} [page] The page of results to fetch. Pages start at 1
     * @param {Number} [limit] Limit the number of records for the requested page. If omitted or set to 0, return all results in a single page
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/QueryApi~queryImagesByVulnerabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedVulnerableImageList}
     */
    queryImagesByVulnerability(vulnerabilityId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vulnerabilityId' is set
      if (vulnerabilityId === undefined || vulnerabilityId === null) {
        throw new Error("Missing the required parameter 'vulnerabilityId' when calling queryImagesByVulnerability");
      }

      let pathParams = {
      };
      let queryParams = {
        'vulnerability_id': vulnerabilityId,
        'namespace': opts['namespace'],
        'affected_package': opts['affectedPackage'],
        'severity': opts['severity'],
        'vendor_only': opts['vendorOnly'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedVulnerableImageList;
      return this.apiClient.callApi(
        '/query/images/by_vulnerability', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryVulnerabilities operation.
     * @callback module:api/QueryApi~queryVulnerabilitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedVulnerabilityList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listing information about given vulnerability
     * List (w/filters) vulnerability records known by the system, with affected packages information if present
     * @param {Array.<String>} id The ID of the vulnerability (e.g. CVE-1999-0001)
     * @param {Object} opts Optional parameters
     * @param {String} [affectedPackage] Filter results by specified package name (e.g. sed)
     * @param {String} [affectedPackageVersion] Filter results by specified package version (e.g. 4.4-1)
     * @param {String} [page = '1')] The page of results to fetch. Pages start at 1
     * @param {Number} [limit] Limit the number of records for the requested page. If omitted or set to 0, return all results in a single page
     * @param {Array.<String>} [namespace] Namespace(s) to filter vulnerability records by
     * @param {module:api/QueryApi~queryVulnerabilitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedVulnerabilityList}
     */
    queryVulnerabilities(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling queryVulnerabilities");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(id, 'csv'),
        'affected_package': opts['affectedPackage'],
        'affected_package_version': opts['affectedPackageVersion'],
        'page': opts['page'],
        'limit': opts['limit'],
        'namespace': this.apiClient.buildCollectionParam(opts['namespace'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedVulnerabilityList;
      return this.apiClient.callApi(
        '/query/vulnerabilities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
