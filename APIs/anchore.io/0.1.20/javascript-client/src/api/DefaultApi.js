/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiErrorResponse from '../model/ApiErrorResponse';
import FileContentSearchResult from '../model/FileContentSearchResult';
import RetrievedFile from '../model/RetrievedFile';
import SecretSearchResult from '../model/SecretSearchResult';
import ServiceVersion from '../model/ServiceVersion';
import TokenResponse from '../model/TokenResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 0.1.20
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getOauthToken operation.
     * @callback module:api/DefaultApi~getOauthTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request a jwt token for subsequent operations, this request is authenticated with normal HTTP auth
     * @param {Object} opts Optional parameters
     * @param {String} [clientId = 'anonymous')] The type of client used for the OAuth token
     * @param {String} [grantType = 'password')] OAuth Grant type for token
     * @param {String} [password] Password for corresponding user
     * @param {String} [username] User to assign OAuth token to
     * @param {module:api/DefaultApi~getOauthTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenResponse}
     */
    getOauthToken(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'client_id': opts['clientId'],
        'grant_type': opts['grantType'],
        'password': opts['password'],
        'username': opts['username']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = TokenResponse;
      return this.apiClient.callApi(
        '/oauth/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the healthCheck operation.
     * @callback module:api/DefaultApi~healthCheckCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Health check, returns 200 and no body if service is running
     * @param {module:api/DefaultApi~healthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     */
    healthCheck(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/health', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFileContentSearchResults operation.
     * @callback module:api/DefaultApi~listFileContentSearchResultsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FileContentSearchResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of analyzer artifacts of the specified type
     * @param {String} imageDigest 
     * @param {module:api/DefaultApi~listFileContentSearchResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FileContentSearchResult>}
     */
    listFileContentSearchResults(imageDigest, callback) {
      let postBody = null;
      // verify the required parameter 'imageDigest' is set
      if (imageDigest === undefined || imageDigest === null) {
        throw new Error("Missing the required parameter 'imageDigest' when calling listFileContentSearchResults");
      }

      let pathParams = {
        'imageDigest': imageDigest
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FileContentSearchResult];
      return this.apiClient.callApi(
        '/images/{imageDigest}/artifacts/file_content_search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRetrievedFiles operation.
     * @callback module:api/DefaultApi~listRetrievedFilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RetrievedFile>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of analyzer artifacts of the specified type
     * @param {String} imageDigest 
     * @param {module:api/DefaultApi~listRetrievedFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RetrievedFile>}
     */
    listRetrievedFiles(imageDigest, callback) {
      let postBody = null;
      // verify the required parameter 'imageDigest' is set
      if (imageDigest === undefined || imageDigest === null) {
        throw new Error("Missing the required parameter 'imageDigest' when calling listRetrievedFiles");
      }

      let pathParams = {
        'imageDigest': imageDigest
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RetrievedFile];
      return this.apiClient.callApi(
        '/images/{imageDigest}/artifacts/retrieved_files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSecretSearchResults operation.
     * @callback module:api/DefaultApi~listSecretSearchResultsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SecretSearchResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of analyzer artifacts of the specified type
     * @param {String} imageDigest 
     * @param {module:api/DefaultApi~listSecretSearchResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SecretSearchResult>}
     */
    listSecretSearchResults(imageDigest, callback) {
      let postBody = null;
      // verify the required parameter 'imageDigest' is set
      if (imageDigest === undefined || imageDigest === null) {
        throw new Error("Missing the required parameter 'imageDigest' when calling listSecretSearchResults");
      }

      let pathParams = {
        'imageDigest': imageDigest
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SecretSearchResult];
      return this.apiClient.callApi(
        '/images/{imageDigest}/artifacts/secret_search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ping operation.
     * @callback module:api/DefaultApi~pingCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Simple status check
     * @param {module:api/DefaultApi~pingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    ping(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the versionCheck operation.
     * @callback module:api/DefaultApi~versionCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the version object for the service, including db schema version info
     * @param {module:api/DefaultApi~versionCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceVersion}
     */
    versionCheck(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceVersion;
      return this.apiClient.callApi(
        '/version', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
