/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccessCredential from '../model/AccessCredential';
import Account from '../model/Account';
import AccountCreationRequest from '../model/AccountCreationRequest';
import AccountStatus from '../model/AccountStatus';
import ApiErrorResponse from '../model/ApiErrorResponse';
import User from '../model/User';
import UserCreationRequest from '../model/UserCreationRequest';

/**
* UserManagement service.
* @module api/UserManagementApi
* @version 0.1.20
*/
export default class UserManagementApi {

    /**
    * Constructs a new UserManagementApi. 
    * @alias module:api/UserManagementApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAccount operation.
     * @callback module:api/UserManagementApi~createAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new user. Only avaialble to admin user.
     * @param {module:model/AccountCreationRequest} accountCreationRequest 
     * @param {module:api/UserManagementApi~createAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    createAccount(accountCreationRequest, callback) {
      let postBody = accountCreationRequest;
      // verify the required parameter 'accountCreationRequest' is set
      if (accountCreationRequest === undefined || accountCreationRequest === null) {
        throw new Error("Missing the required parameter 'accountCreationRequest' when calling createAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/UserManagementApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new user
     * @param {String} accountname 
     * @param {module:model/UserCreationRequest} userCreationRequest 
     * @param {module:api/UserManagementApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    createUser(accountname, userCreationRequest, callback) {
      let postBody = userCreationRequest;
      // verify the required parameter 'accountname' is set
      if (accountname === undefined || accountname === null) {
        throw new Error("Missing the required parameter 'accountname' when calling createUser");
      }
      // verify the required parameter 'userCreationRequest' is set
      if (userCreationRequest === undefined || userCreationRequest === null) {
        throw new Error("Missing the required parameter 'userCreationRequest' when calling createUser");
      }

      let pathParams = {
        'accountname': accountname
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/accounts/{accountname}/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUserCredential operation.
     * @callback module:api/UserManagementApi~createUserCredentialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add/replace credential
     * @param {String} accountname 
     * @param {String} username 
     * @param {module:model/AccessCredential} accessCredential 
     * @param {module:api/UserManagementApi~createUserCredentialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    createUserCredential(accountname, username, accessCredential, callback) {
      let postBody = accessCredential;
      // verify the required parameter 'accountname' is set
      if (accountname === undefined || accountname === null) {
        throw new Error("Missing the required parameter 'accountname' when calling createUserCredential");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling createUserCredential");
      }
      // verify the required parameter 'accessCredential' is set
      if (accessCredential === undefined || accessCredential === null) {
        throw new Error("Missing the required parameter 'accessCredential' when calling createUserCredential");
      }

      let pathParams = {
        'accountname': accountname,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/accounts/{accountname}/users/{username}/credentials', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccount operation.
     * @callback module:api/UserManagementApi~deleteAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the specified account, only allowed if the account is in the disabled state. All users will be deleted along with the account and all resources will be garbage collected
     * @param {String} accountname 
     * @param {module:api/UserManagementApi~deleteAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAccount(accountname, callback) {
      let postBody = null;
      // verify the required parameter 'accountname' is set
      if (accountname === undefined || accountname === null) {
        throw new Error("Missing the required parameter 'accountname' when calling deleteAccount");
      }

      let pathParams = {
        'accountname': accountname
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/accounts/{accountname}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/UserManagementApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific user credential by username of the credential. Cannot be the credential used to authenticate the request.
     * @param {String} accountname 
     * @param {String} username 
     * @param {module:api/UserManagementApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUser(accountname, username, callback) {
      let postBody = null;
      // verify the required parameter 'accountname' is set
      if (accountname === undefined || accountname === null) {
        throw new Error("Missing the required parameter 'accountname' when calling deleteUser");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling deleteUser");
      }

      let pathParams = {
        'accountname': accountname,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/accounts/{accountname}/users/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserCredential operation.
     * @callback module:api/UserManagementApi~deleteUserCredentialCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a credential by type
     * @param {String} accountname 
     * @param {String} username 
     * @param {module:model/String} credentialType 
     * @param {module:api/UserManagementApi~deleteUserCredentialCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUserCredential(accountname, username, credentialType, callback) {
      let postBody = null;
      // verify the required parameter 'accountname' is set
      if (accountname === undefined || accountname === null) {
        throw new Error("Missing the required parameter 'accountname' when calling deleteUserCredential");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling deleteUserCredential");
      }
      // verify the required parameter 'credentialType' is set
      if (credentialType === undefined || credentialType === null) {
        throw new Error("Missing the required parameter 'credentialType' when calling deleteUserCredential");
      }

      let pathParams = {
        'accountname': accountname,
        'username': username
      };
      let queryParams = {
        'credential_type': credentialType
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/accounts/{accountname}/users/{username}/credentials', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccount operation.
     * @callback module:api/UserManagementApi~getAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get info about an user. Only available to admin user. Uses the main user Id, not a username.
     * @param {String} accountname 
     * @param {module:api/UserManagementApi~getAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    getAccount(accountname, callback) {
      let postBody = null;
      // verify the required parameter 'accountname' is set
      if (accountname === undefined || accountname === null) {
        throw new Error("Missing the required parameter 'accountname' when calling getAccount");
      }

      let pathParams = {
        'accountname': accountname
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/accounts/{accountname}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountUser operation.
     * @callback module:api/UserManagementApi~getAccountUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific user in the specified account
     * @param {String} accountname 
     * @param {String} username 
     * @param {module:api/UserManagementApi~getAccountUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    getAccountUser(accountname, username, callback) {
      let postBody = null;
      // verify the required parameter 'accountname' is set
      if (accountname === undefined || accountname === null) {
        throw new Error("Missing the required parameter 'accountname' when calling getAccountUser");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getAccountUser");
      }

      let pathParams = {
        'accountname': accountname,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/accounts/{accountname}/users/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAccounts operation.
     * @callback module:api/UserManagementApi~listAccountsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Account>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List user summaries. Only available to the system admin user.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [state] Filter accounts by state
     * @param {module:api/UserManagementApi~listAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Account>}
     */
    listAccounts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'state': opts['state']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Account];
      return this.apiClient.callApi(
        '/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUserCredentials operation.
     * @callback module:api/UserManagementApi~listUserCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccessCredential>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current credential summary
     * @param {String} accountname 
     * @param {String} username 
     * @param {module:api/UserManagementApi~listUserCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccessCredential>}
     */
    listUserCredentials(accountname, username, callback) {
      let postBody = null;
      // verify the required parameter 'accountname' is set
      if (accountname === undefined || accountname === null) {
        throw new Error("Missing the required parameter 'accountname' when calling listUserCredentials");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling listUserCredentials");
      }

      let pathParams = {
        'accountname': accountname,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AccessCredential];
      return this.apiClient.callApi(
        '/accounts/{accountname}/users/{username}/credentials', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUsers operation.
     * @callback module:api/UserManagementApi~listUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List accounts for the user
     * @param {String} accountname 
     * @param {module:api/UserManagementApi~listUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    listUsers(accountname, callback) {
      let postBody = null;
      // verify the required parameter 'accountname' is set
      if (accountname === undefined || accountname === null) {
        throw new Error("Missing the required parameter 'accountname' when calling listUsers");
      }

      let pathParams = {
        'accountname': accountname
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/accounts/{accountname}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccountState operation.
     * @callback module:api/UserManagementApi~updateAccountStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the state of an account to either enabled or disabled. For deletion use the DELETE route
     * @param {String} accountname 
     * @param {module:model/AccountStatus} accountStatus 
     * @param {module:api/UserManagementApi~updateAccountStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountStatus}
     */
    updateAccountState(accountname, accountStatus, callback) {
      let postBody = accountStatus;
      // verify the required parameter 'accountname' is set
      if (accountname === undefined || accountname === null) {
        throw new Error("Missing the required parameter 'accountname' when calling updateAccountState");
      }
      // verify the required parameter 'accountStatus' is set
      if (accountStatus === undefined || accountStatus === null) {
        throw new Error("Missing the required parameter 'accountStatus' when calling updateAccountState");
      }

      let pathParams = {
        'accountname': accountname
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccountStatus;
      return this.apiClient.callApi(
        '/accounts/{accountname}/state', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
