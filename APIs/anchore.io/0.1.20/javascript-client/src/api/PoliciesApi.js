/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiErrorResponse from '../model/ApiErrorResponse';
import PolicyBundle from '../model/PolicyBundle';
import PolicyBundleRecord from '../model/PolicyBundleRecord';

/**
* Policies service.
* @module api/PoliciesApi
* @version 0.1.20
*/
export default class PoliciesApi {

    /**
    * Constructs a new PoliciesApi. 
    * @alias module:api/PoliciesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addPolicy operation.
     * @callback module:api/PoliciesApi~addPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyBundleRecord} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new policy
     * Adds a new policy bundle to the system
     * @param {module:model/PolicyBundle} policyBundle 
     * @param {Object} opts Optional parameters
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/PoliciesApi~addPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyBundleRecord}
     */
    addPolicy(policyBundle, opts, callback) {
      opts = opts || {};
      let postBody = policyBundle;
      // verify the required parameter 'policyBundle' is set
      if (policyBundle === undefined || policyBundle === null) {
        throw new Error("Missing the required parameter 'policyBundle' when calling addPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PolicyBundleRecord;
      return this.apiClient.callApi(
        '/policies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePolicy operation.
     * @callback module:api/PoliciesApi~deletePolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete policy
     * Delete the specified policy
     * @param {String} policyId 
     * @param {Object} opts Optional parameters
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/PoliciesApi~deletePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePolicy(policyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'policyId' is set
      if (policyId === undefined || policyId === null) {
        throw new Error("Missing the required parameter 'policyId' when calling deletePolicy");
      }

      let pathParams = {
        'policyId': policyId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/policies/{policyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPolicy operation.
     * @callback module:api/PoliciesApi~getPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PolicyBundleRecord>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific policy
     * Get the policy bundle content
     * @param {String} policyId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [detail] Include policy bundle detail in the form of the full bundle content for each entry
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/PoliciesApi~getPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PolicyBundleRecord>}
     */
    getPolicy(policyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'policyId' is set
      if (policyId === undefined || policyId === null) {
        throw new Error("Missing the required parameter 'policyId' when calling getPolicy");
      }

      let pathParams = {
        'policyId': policyId
      };
      let queryParams = {
        'detail': opts['detail']
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PolicyBundleRecord];
      return this.apiClient.callApi(
        '/policies/{policyId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPolicies operation.
     * @callback module:api/PoliciesApi~listPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PolicyBundleRecord>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List policies
     * List all saved policy bundles
     * @param {Object} opts Optional parameters
     * @param {Boolean} [detail] Include policy bundle detail in the form of the full bundle content for each entry
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/PoliciesApi~listPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PolicyBundleRecord>}
     */
    listPolicies(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'detail': opts['detail']
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PolicyBundleRecord];
      return this.apiClient.callApi(
        '/policies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePolicy operation.
     * @callback module:api/PoliciesApi~updatePolicyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PolicyBundleRecord>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update policy
     * Update/replace and existing policy
     * @param {String} policyId 
     * @param {module:model/PolicyBundleRecord} policyBundleRecord 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] Mark policy as active
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/PoliciesApi~updatePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PolicyBundleRecord>}
     */
    updatePolicy(policyId, policyBundleRecord, opts, callback) {
      opts = opts || {};
      let postBody = policyBundleRecord;
      // verify the required parameter 'policyId' is set
      if (policyId === undefined || policyId === null) {
        throw new Error("Missing the required parameter 'policyId' when calling updatePolicy");
      }
      // verify the required parameter 'policyBundleRecord' is set
      if (policyBundleRecord === undefined || policyBundleRecord === null) {
        throw new Error("Missing the required parameter 'policyBundleRecord' when calling updatePolicy");
      }

      let pathParams = {
        'policyId': policyId
      };
      let queryParams = {
        'active': opts['active']
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PolicyBundleRecord];
      return this.apiClient.callApi(
        '/policies/{policyId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
