/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnchoreImage from '../model/AnchoreImage';
import ApiErrorResponse from '../model/ApiErrorResponse';
import ContentFilesResponse from '../model/ContentFilesResponse';
import ContentJAVAPackageResponse from '../model/ContentJAVAPackageResponse';
import ContentMalwareResponse from '../model/ContentMalwareResponse';
import ContentPackageResponse from '../model/ContentPackageResponse';
import DeleteImageResponse from '../model/DeleteImageResponse';
import ImageAnalysisRequest from '../model/ImageAnalysisRequest';
import MetadataResponse from '../model/MetadataResponse';
import VulnerabilityResponse from '../model/VulnerabilityResponse';

/**
* Images service.
* @module api/ImagesApi
* @version 0.1.20
*/
export default class ImagesApi {

    /**
    * Constructs a new ImagesApi. 
    * @alias module:api/ImagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addImage operation.
     * @callback module:api/ImagesApi~addImageCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AnchoreImage>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit a new image for analysis by the engine
     * Creates a new analysis task that is executed asynchronously
     * @param {module:model/ImageAnalysisRequest} imageAnalysisRequest 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force] Override any existing entry in the system
     * @param {Boolean} [autosubscribe] Instruct engine to automatically begin watching the added tag for updates from registry
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/ImagesApi~addImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AnchoreImage>}
     */
    addImage(imageAnalysisRequest, opts, callback) {
      opts = opts || {};
      let postBody = imageAnalysisRequest;
      // verify the required parameter 'imageAnalysisRequest' is set
      if (imageAnalysisRequest === undefined || imageAnalysisRequest === null) {
        throw new Error("Missing the required parameter 'imageAnalysisRequest' when calling addImage");
      }

      let pathParams = {
      };
      let queryParams = {
        'force': opts['force'],
        'autosubscribe': opts['autosubscribe']
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [AnchoreImage];
      return this.apiClient.callApi(
        '/images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteImage operation.
     * @callback module:api/ImagesApi~deleteImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an image analysis
     * @param {String} imageDigest 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force] 
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/ImagesApi~deleteImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteImageResponse}
     */
    deleteImage(imageDigest, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'imageDigest' is set
      if (imageDigest === undefined || imageDigest === null) {
        throw new Error("Missing the required parameter 'imageDigest' when calling deleteImage");
      }

      let pathParams = {
        'imageDigest': imageDigest
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteImageResponse;
      return this.apiClient.callApi(
        '/images/{imageDigest}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteImageByImageId operation.
     * @callback module:api/ImagesApi~deleteImageByImageIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete image by docker imageId
     * @param {String} imageId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force] 
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/ImagesApi~deleteImageByImageIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteImageResponse}
     */
    deleteImageByImageId(imageId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling deleteImageByImageId");
      }

      let pathParams = {
        'imageId': imageId
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteImageResponse;
      return this.apiClient.callApi(
        '/images/by_id/{imageId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteImagesAsync operation.
     * @callback module:api/ImagesApi~deleteImagesAsyncCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeleteImageResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk mark images for deletion
     * Delete analysis for image digests in the list asynchronously
     * @param {Array.<String>} imageDigests 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force] 
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/ImagesApi~deleteImagesAsyncCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeleteImageResponse>}
     */
    deleteImagesAsync(imageDigests, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'imageDigests' is set
      if (imageDigests === undefined || imageDigests === null) {
        throw new Error("Missing the required parameter 'imageDigests' when calling deleteImagesAsync");
      }

      let pathParams = {
      };
      let queryParams = {
        'imageDigests': this.apiClient.buildCollectionParam(imageDigests, 'csv'),
        'force': opts['force']
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DeleteImageResponse];
      return this.apiClient.callApi(
        '/images', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImage operation.
     * @callback module:api/ImagesApi~getImageCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AnchoreImage>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get image metadata
     * @param {String} imageDigest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/ImagesApi~getImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AnchoreImage>}
     */
    getImage(imageDigest, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'imageDigest' is set
      if (imageDigest === undefined || imageDigest === null) {
        throw new Error("Missing the required parameter 'imageDigest' when calling getImage");
      }

      let pathParams = {
        'imageDigest': imageDigest
      };
      let queryParams = {
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AnchoreImage];
      return this.apiClient.callApi(
        '/images/{imageDigest}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageByImageId operation.
     * @callback module:api/ImagesApi~getImageByImageIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AnchoreImage>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lookup image by docker imageId
     * @param {String} imageId 
     * @param {Object} opts Optional parameters
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/ImagesApi~getImageByImageIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AnchoreImage>}
     */
    getImageByImageId(imageId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling getImageByImageId");
      }

      let pathParams = {
        'imageId': imageId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AnchoreImage];
      return this.apiClient.callApi(
        '/images/by_id/{imageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageContentByType operation.
     * @callback module:api/ImagesApi~getImageContentByTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentPackageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the content of an image by type
     * @param {String} imageDigest 
     * @param {String} ctype 
     * @param {Object} opts Optional parameters
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/ImagesApi~getImageContentByTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentPackageResponse}
     */
    getImageContentByType(imageDigest, ctype, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'imageDigest' is set
      if (imageDigest === undefined || imageDigest === null) {
        throw new Error("Missing the required parameter 'imageDigest' when calling getImageContentByType");
      }
      // verify the required parameter 'ctype' is set
      if (ctype === undefined || ctype === null) {
        throw new Error("Missing the required parameter 'ctype' when calling getImageContentByType");
      }

      let pathParams = {
        'imageDigest': imageDigest,
        'ctype': ctype
      };
      let queryParams = {
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContentPackageResponse;
      return this.apiClient.callApi(
        '/images/{imageDigest}/content/{ctype}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageContentByTypeFiles operation.
     * @callback module:api/ImagesApi~getImageContentByTypeFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentFilesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the content of an image by type files
     * @param {String} imageDigest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/ImagesApi~getImageContentByTypeFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentFilesResponse}
     */
    getImageContentByTypeFiles(imageDigest, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'imageDigest' is set
      if (imageDigest === undefined || imageDigest === null) {
        throw new Error("Missing the required parameter 'imageDigest' when calling getImageContentByTypeFiles");
      }

      let pathParams = {
        'imageDigest': imageDigest
      };
      let queryParams = {
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContentFilesResponse;
      return this.apiClient.callApi(
        '/images/{imageDigest}/content/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageContentByTypeImageId operation.
     * @callback module:api/ImagesApi~getImageContentByTypeImageIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentPackageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the content of an image by type
     * @param {String} imageId 
     * @param {String} ctype 
     * @param {Object} opts Optional parameters
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/ImagesApi~getImageContentByTypeImageIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentPackageResponse}
     */
    getImageContentByTypeImageId(imageId, ctype, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling getImageContentByTypeImageId");
      }
      // verify the required parameter 'ctype' is set
      if (ctype === undefined || ctype === null) {
        throw new Error("Missing the required parameter 'ctype' when calling getImageContentByTypeImageId");
      }

      let pathParams = {
        'imageId': imageId,
        'ctype': ctype
      };
      let queryParams = {
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContentPackageResponse;
      return this.apiClient.callApi(
        '/images/by_id/{imageId}/content/{ctype}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageContentByTypeImageIdFiles operation.
     * @callback module:api/ImagesApi~getImageContentByTypeImageIdFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentFilesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the content of an image by type files
     * @param {String} imageId 
     * @param {Object} opts Optional parameters
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/ImagesApi~getImageContentByTypeImageIdFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentFilesResponse}
     */
    getImageContentByTypeImageIdFiles(imageId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling getImageContentByTypeImageIdFiles");
      }

      let pathParams = {
        'imageId': imageId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContentFilesResponse;
      return this.apiClient.callApi(
        '/images/by_id/{imageId}/content/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageContentByTypeImageIdJavapackage operation.
     * @callback module:api/ImagesApi~getImageContentByTypeImageIdJavapackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentJAVAPackageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the content of an image by type java
     * @param {String} imageId 
     * @param {Object} opts Optional parameters
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/ImagesApi~getImageContentByTypeImageIdJavapackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentJAVAPackageResponse}
     */
    getImageContentByTypeImageIdJavapackage(imageId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling getImageContentByTypeImageIdJavapackage");
      }

      let pathParams = {
        'imageId': imageId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContentJAVAPackageResponse;
      return this.apiClient.callApi(
        '/images/by_id/{imageId}/content/java', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageContentByTypeJavapackage operation.
     * @callback module:api/ImagesApi~getImageContentByTypeJavapackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentJAVAPackageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the content of an image by type java
     * @param {String} imageDigest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/ImagesApi~getImageContentByTypeJavapackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentJAVAPackageResponse}
     */
    getImageContentByTypeJavapackage(imageDigest, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'imageDigest' is set
      if (imageDigest === undefined || imageDigest === null) {
        throw new Error("Missing the required parameter 'imageDigest' when calling getImageContentByTypeJavapackage");
      }

      let pathParams = {
        'imageDigest': imageDigest
      };
      let queryParams = {
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContentJAVAPackageResponse;
      return this.apiClient.callApi(
        '/images/{imageDigest}/content/java', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageContentByTypeMalware operation.
     * @callback module:api/ImagesApi~getImageContentByTypeMalwareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentMalwareResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the content of an image by type malware
     * @param {String} imageDigest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/ImagesApi~getImageContentByTypeMalwareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentMalwareResponse}
     */
    getImageContentByTypeMalware(imageDigest, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'imageDigest' is set
      if (imageDigest === undefined || imageDigest === null) {
        throw new Error("Missing the required parameter 'imageDigest' when calling getImageContentByTypeMalware");
      }

      let pathParams = {
        'imageDigest': imageDigest
      };
      let queryParams = {
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContentMalwareResponse;
      return this.apiClient.callApi(
        '/images/{imageDigest}/content/malware', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageMetadataByType operation.
     * @callback module:api/ImagesApi~getImageMetadataByTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetadataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the metadata of an image by type
     * @param {String} imageDigest 
     * @param {String} mtype 
     * @param {Object} opts Optional parameters
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/ImagesApi~getImageMetadataByTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetadataResponse}
     */
    getImageMetadataByType(imageDigest, mtype, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'imageDigest' is set
      if (imageDigest === undefined || imageDigest === null) {
        throw new Error("Missing the required parameter 'imageDigest' when calling getImageMetadataByType");
      }
      // verify the required parameter 'mtype' is set
      if (mtype === undefined || mtype === null) {
        throw new Error("Missing the required parameter 'mtype' when calling getImageMetadataByType");
      }

      let pathParams = {
        'imageDigest': imageDigest,
        'mtype': mtype
      };
      let queryParams = {
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetadataResponse;
      return this.apiClient.callApi(
        '/images/{imageDigest}/metadata/{mtype}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImagePolicyCheck operation.
     * @callback module:api/ImagesApi~getImagePolicyCheckCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check policy evaluation status for image
     * Get the policy evaluation for the given image
     * @param {String} imageDigest 
     * @param {String} tag 
     * @param {Object} opts Optional parameters
     * @param {String} [policyId] 
     * @param {Boolean} [detail] 
     * @param {Boolean} [history] 
     * @param {Boolean} [interactive] 
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/ImagesApi~getImagePolicyCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getImagePolicyCheck(imageDigest, tag, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'imageDigest' is set
      if (imageDigest === undefined || imageDigest === null) {
        throw new Error("Missing the required parameter 'imageDigest' when calling getImagePolicyCheck");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling getImagePolicyCheck");
      }

      let pathParams = {
        'imageDigest': imageDigest
      };
      let queryParams = {
        'policyId': opts['policyId'],
        'tag': tag,
        'detail': opts['detail'],
        'history': opts['history'],
        'interactive': opts['interactive']
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/images/{imageDigest}/check', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImagePolicyCheckByImageId operation.
     * @callback module:api/ImagesApi~getImagePolicyCheckByImageIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check policy evaluation status for image
     * Get the policy evaluation for the given image
     * @param {String} imageId 
     * @param {String} tag 
     * @param {Object} opts Optional parameters
     * @param {String} [policyId] 
     * @param {Boolean} [detail] 
     * @param {Boolean} [history] 
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/ImagesApi~getImagePolicyCheckByImageIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getImagePolicyCheckByImageId(imageId, tag, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling getImagePolicyCheckByImageId");
      }
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling getImagePolicyCheckByImageId");
      }

      let pathParams = {
        'imageId': imageId
      };
      let queryParams = {
        'policyId': opts['policyId'],
        'tag': tag,
        'detail': opts['detail'],
        'history': opts['history']
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/images/by_id/{imageId}/check', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageSbomNative operation.
     * @callback module:api/ImagesApi~getImageSbomNativeCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get image sbom in the native Anchore format
     * @param {String} imageDigest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/ImagesApi~getImageSbomNativeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getImageSbomNative(imageDigest, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'imageDigest' is set
      if (imageDigest === undefined || imageDigest === null) {
        throw new Error("Missing the required parameter 'imageDigest' when calling getImageSbomNative");
      }

      let pathParams = {
        'imageDigest': imageDigest
      };
      let queryParams = {
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/gzip'];
      let returnType = File;
      return this.apiClient.callApi(
        '/images/{imageDigest}/sboms/native', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageVulnerabilitiesByType operation.
     * @callback module:api/ImagesApi~getImageVulnerabilitiesByTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VulnerabilityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get vulnerabilities by type
     * @param {String} imageDigest 
     * @param {String} vtype 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [forceRefresh] 
     * @param {Boolean} [vendorOnly] Filter results to include only vulnerabilities that are not marked as invalid by upstream OS vendor data. When set to true, it will filter out all vulnerabilities where `will_not_fix` is False. If false all vulnerabilities are returned regardless of `will_not_fix`
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/ImagesApi~getImageVulnerabilitiesByTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VulnerabilityResponse}
     */
    getImageVulnerabilitiesByType(imageDigest, vtype, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'imageDigest' is set
      if (imageDigest === undefined || imageDigest === null) {
        throw new Error("Missing the required parameter 'imageDigest' when calling getImageVulnerabilitiesByType");
      }
      // verify the required parameter 'vtype' is set
      if (vtype === undefined || vtype === null) {
        throw new Error("Missing the required parameter 'vtype' when calling getImageVulnerabilitiesByType");
      }

      let pathParams = {
        'imageDigest': imageDigest,
        'vtype': vtype
      };
      let queryParams = {
        'force_refresh': opts['forceRefresh'],
        'vendor_only': opts['vendorOnly']
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VulnerabilityResponse;
      return this.apiClient.callApi(
        '/images/{imageDigest}/vuln/{vtype}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageVulnerabilitiesByTypeImageId operation.
     * @callback module:api/ImagesApi~getImageVulnerabilitiesByTypeImageIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VulnerabilityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get vulnerabilities by type
     * @param {String} imageId 
     * @param {String} vtype 
     * @param {Object} opts Optional parameters
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/ImagesApi~getImageVulnerabilitiesByTypeImageIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VulnerabilityResponse}
     */
    getImageVulnerabilitiesByTypeImageId(imageId, vtype, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling getImageVulnerabilitiesByTypeImageId");
      }
      // verify the required parameter 'vtype' is set
      if (vtype === undefined || vtype === null) {
        throw new Error("Missing the required parameter 'vtype' when calling getImageVulnerabilitiesByTypeImageId");
      }

      let pathParams = {
        'imageId': imageId,
        'vtype': vtype
      };
      let queryParams = {
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VulnerabilityResponse;
      return this.apiClient.callApi(
        '/images/by_id/{imageId}/vuln/{vtype}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageVulnerabilityTypes operation.
     * @callback module:api/ImagesApi~getImageVulnerabilityTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get vulnerability types
     * @param {String} imageDigest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/ImagesApi~getImageVulnerabilityTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getImageVulnerabilityTypes(imageDigest, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'imageDigest' is set
      if (imageDigest === undefined || imageDigest === null) {
        throw new Error("Missing the required parameter 'imageDigest' when calling getImageVulnerabilityTypes");
      }

      let pathParams = {
        'imageDigest': imageDigest
      };
      let queryParams = {
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/images/{imageDigest}/vuln', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageVulnerabilityTypesByImageId operation.
     * @callback module:api/ImagesApi~getImageVulnerabilityTypesByImageIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get vulnerability types
     * @param {String} imageId 
     * @param {Object} opts Optional parameters
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/ImagesApi~getImageVulnerabilityTypesByImageIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getImageVulnerabilityTypesByImageId(imageId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling getImageVulnerabilityTypesByImageId");
      }

      let pathParams = {
        'imageId': imageId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/images/by_id/{imageId}/vuln', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listImageContent operation.
     * @callback module:api/ImagesApi~listImageContentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List image content types
     * @param {String} imageDigest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/ImagesApi~listImageContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    listImageContent(imageDigest, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'imageDigest' is set
      if (imageDigest === undefined || imageDigest === null) {
        throw new Error("Missing the required parameter 'imageDigest' when calling listImageContent");
      }

      let pathParams = {
        'imageDigest': imageDigest
      };
      let queryParams = {
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/images/{imageDigest}/content', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listImageContentByImageid operation.
     * @callback module:api/ImagesApi~listImageContentByImageidCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List image content types
     * @param {String} imageId 
     * @param {Object} opts Optional parameters
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/ImagesApi~listImageContentByImageidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    listImageContentByImageid(imageId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling listImageContentByImageid");
      }

      let pathParams = {
        'imageId': imageId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/images/by_id/{imageId}/content', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listImageMetadata operation.
     * @callback module:api/ImagesApi~listImageMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List image metadata types
     * @param {String} imageDigest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/ImagesApi~listImageMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    listImageMetadata(imageDigest, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'imageDigest' is set
      if (imageDigest === undefined || imageDigest === null) {
        throw new Error("Missing the required parameter 'imageDigest' when calling listImageMetadata");
      }

      let pathParams = {
        'imageDigest': imageDigest
      };
      let queryParams = {
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/images/{imageDigest}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listImages operation.
     * @callback module:api/ImagesApi~listImagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AnchoreImage>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all visible images
     * List all images visible to the user
     * @param {Object} opts Optional parameters
     * @param {Boolean} [history] Include image history in the response
     * @param {String} [fulltag] Full docker-pull string to filter results by (e.g. docker.io/library/nginx:latest, or myhost.com:5000/testimages:v1.1.1)
     * @param {module:model/String} [imageStatus = 'active')] Filter by image_status value on the record. Default if omitted is 'active'.
     * @param {module:model/String} [analysisStatus] Filter by analysis_status value on the record.
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/ImagesApi~listImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AnchoreImage>}
     */
    listImages(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'history': opts['history'],
        'fulltag': opts['fulltag'],
        'image_status': opts['imageStatus'],
        'analysis_status': opts['analysisStatus']
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AnchoreImage];
      return this.apiClient.callApi(
        '/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
