/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Subscription from '../model/Subscription';

/**
* RepositoryCredentials service.
* @module api/RepositoryCredentialsApi
* @version 0.1.20
*/
export default class RepositoryCredentialsApi {

    /**
    * Constructs a new RepositoryCredentialsApi. 
    * @alias module:api/RepositoryCredentialsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addRepository operation.
     * @callback module:api/RepositoryCredentialsApi~addRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Subscription>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add repository to watch
     * 
     * @param {String} repository full repository to add e.g. docker.io/library/alpine
     * @param {Object} opts Optional parameters
     * @param {Boolean} [autosubscribe] flag to enable/disable auto tag_update activation when new images from a repo are added
     * @param {Boolean} [dryrun] flag to return tags in the repository without actually watching the repository, default is false
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/RepositoryCredentialsApi~addRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Subscription>}
     */
    addRepository(repository, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling addRepository");
      }

      let pathParams = {
      };
      let queryParams = {
        'repository': repository,
        'autosubscribe': opts['autosubscribe'],
        'dryrun': opts['dryrun']
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Subscription];
      return this.apiClient.callApi(
        '/repositories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
