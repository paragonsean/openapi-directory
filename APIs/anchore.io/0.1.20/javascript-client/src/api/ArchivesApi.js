/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnalysisArchiveAddResult from '../model/AnalysisArchiveAddResult';
import AnalysisArchiveTransitionRule from '../model/AnalysisArchiveTransitionRule';
import ApiErrorResponse from '../model/ApiErrorResponse';
import ArchiveSummary from '../model/ArchiveSummary';
import ArchivedAnalysis from '../model/ArchivedAnalysis';

/**
* Archives service.
* @module api/ArchivesApi
* @version 0.1.20
*/
export default class ArchivesApi {

    /**
    * Constructs a new ArchivesApi. 
    * @alias module:api/ArchivesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the archiveImageAnalysis operation.
     * @callback module:api/ArchivesApi~archiveImageAnalysisCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AnalysisArchiveAddResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Array.<String>} requestBody 
     * @param {module:api/ArchivesApi~archiveImageAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AnalysisArchiveAddResult>}
     */
    archiveImageAnalysis(requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling archiveImageAnalysis");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [AnalysisArchiveAddResult];
      return this.apiClient.callApi(
        '/archives/images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAnalysisArchiveRule operation.
     * @callback module:api/ArchivesApi~createAnalysisArchiveRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalysisArchiveTransitionRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/AnalysisArchiveTransitionRule} analysisArchiveTransitionRule 
     * @param {module:api/ArchivesApi~createAnalysisArchiveRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalysisArchiveTransitionRule}
     */
    createAnalysisArchiveRule(analysisArchiveTransitionRule, callback) {
      let postBody = analysisArchiveTransitionRule;
      // verify the required parameter 'analysisArchiveTransitionRule' is set
      if (analysisArchiveTransitionRule === undefined || analysisArchiveTransitionRule === null) {
        throw new Error("Missing the required parameter 'analysisArchiveTransitionRule' when calling createAnalysisArchiveRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AnalysisArchiveTransitionRule;
      return this.apiClient.callApi(
        '/archives/rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAnalysisArchiveRule operation.
     * @callback module:api/ArchivesApi~deleteAnalysisArchiveRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} ruleId 
     * @param {module:api/ArchivesApi~deleteAnalysisArchiveRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAnalysisArchiveRule(ruleId, callback) {
      let postBody = null;
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling deleteAnalysisArchiveRule");
      }

      let pathParams = {
        'ruleId': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/archives/rules/{ruleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteArchivedAnalysis operation.
     * @callback module:api/ArchivesApi~deleteArchivedAnalysisCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Performs a synchronous archive deletion
     * @param {String} imageDigest 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force] 
     * @param {module:api/ArchivesApi~deleteArchivedAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteArchivedAnalysis(imageDigest, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'imageDigest' is set
      if (imageDigest === undefined || imageDigest === null) {
        throw new Error("Missing the required parameter 'imageDigest' when calling deleteArchivedAnalysis");
      }

      let pathParams = {
        'imageDigest': imageDigest
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/archives/images/{imageDigest}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnalysisArchiveRule operation.
     * @callback module:api/ArchivesApi~getAnalysisArchiveRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalysisArchiveTransitionRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} ruleId 
     * @param {module:api/ArchivesApi~getAnalysisArchiveRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalysisArchiveTransitionRule}
     */
    getAnalysisArchiveRule(ruleId, callback) {
      let postBody = null;
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling getAnalysisArchiveRule");
      }

      let pathParams = {
        'ruleId': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalysisArchiveTransitionRule;
      return this.apiClient.callApi(
        '/archives/rules/{ruleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArchivedAnalysis operation.
     * @callback module:api/ArchivesApi~getArchivedAnalysisCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArchivedAnalysis} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the archive metadata record identifying the image and tags for the analysis in the archive.
     * @param {String} imageDigest The image digest to identify the image analysis
     * @param {module:api/ArchivesApi~getArchivedAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArchivedAnalysis}
     */
    getArchivedAnalysis(imageDigest, callback) {
      let postBody = null;
      // verify the required parameter 'imageDigest' is set
      if (imageDigest === undefined || imageDigest === null) {
        throw new Error("Missing the required parameter 'imageDigest' when calling getArchivedAnalysis");
      }

      let pathParams = {
        'imageDigest': imageDigest
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArchivedAnalysis;
      return this.apiClient.callApi(
        '/archives/images/{imageDigest}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAnalysisArchive operation.
     * @callback module:api/ArchivesApi~listAnalysisArchiveCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ArchivedAnalysis>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ArchivesApi~listAnalysisArchiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ArchivedAnalysis>}
     */
    listAnalysisArchive(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ArchivedAnalysis];
      return this.apiClient.callApi(
        '/archives/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAnalysisArchiveRules operation.
     * @callback module:api/ArchivesApi~listAnalysisArchiveRulesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AnalysisArchiveTransitionRule>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} [systemGlobal] If true include system global rules (owned by admin) even for non-admin users. Defaults to true if not set. Can be set to false to exclude globals
     * @param {module:api/ArchivesApi~listAnalysisArchiveRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AnalysisArchiveTransitionRule>}
     */
    listAnalysisArchiveRules(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'system_global': opts['systemGlobal']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AnalysisArchiveTransitionRule];
      return this.apiClient.callApi(
        '/archives/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listArchives operation.
     * @callback module:api/ArchivesApi~listArchivesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArchiveSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ArchivesApi~listArchivesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArchiveSummary}
     */
    listArchives(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArchiveSummary;
      return this.apiClient.callApi(
        '/archives', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
