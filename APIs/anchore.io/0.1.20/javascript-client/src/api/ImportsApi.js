/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ImageImportContentResponse from '../model/ImageImportContentResponse';
import ImageImportOperation from '../model/ImageImportOperation';
import ImagePackageManifest from '../model/ImagePackageManifest';

/**
* Imports service.
* @module api/ImportsApi
* @version 0.1.20
*/
export default class ImportsApi {

    /**
    * Constructs a new ImportsApi. 
    * @alias module:api/ImportsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createOperation operation.
     * @callback module:api/ImportsApi~createOperationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageImportOperation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Begin the import of an image analyzed by Syft into the system
     * @param {module:api/ImportsApi~createOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageImportOperation}
     */
    createOperation(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImageImportOperation;
      return this.apiClient.callApi(
        '/imports/images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOperation operation.
     * @callback module:api/ImportsApi~getOperationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageImportOperation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get detail on a single import
     * @param {String} operationId 
     * @param {module:api/ImportsApi~getOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageImportOperation}
     */
    getOperation(operationId, callback) {
      let postBody = null;
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling getOperation");
      }

      let pathParams = {
        'operation_id': operationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImageImportOperation;
      return this.apiClient.callApi(
        '/imports/images/{operation_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importImageConfig operation.
     * @callback module:api/ImportsApi~importImageConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageImportContentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import a docker or OCI image config to associate with the image
     * @param {String} operationId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/ImportsApi~importImageConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageImportContentResponse}
     */
    importImageConfig(operationId, body, callback) {
      let postBody = body;
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling importImageConfig");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling importImageConfig");
      }

      let pathParams = {
        'operation_id': operationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImageImportContentResponse;
      return this.apiClient.callApi(
        '/imports/images/{operation_id}/image_config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importImageDockerfile operation.
     * @callback module:api/ImportsApi~importImageDockerfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageImportContentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Begin the import of an image analyzed by Syft into the system
     * @param {String} operationId 
     * @param {String} body 
     * @param {module:api/ImportsApi~importImageDockerfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageImportContentResponse}
     */
    importImageDockerfile(operationId, body, callback) {
      let postBody = body;
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling importImageDockerfile");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling importImageDockerfile");
      }

      let pathParams = {
        'operation_id': operationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/plain; utf-8'];
      let accepts = ['application/json'];
      let returnType = ImageImportContentResponse;
      return this.apiClient.callApi(
        '/imports/images/{operation_id}/dockerfile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importImageManifest operation.
     * @callback module:api/ImportsApi~importImageManifestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageImportContentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import a docker or OCI distribution manifest to associate with the image
     * @param {String} operationId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/ImportsApi~importImageManifestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageImportContentResponse}
     */
    importImageManifest(operationId, body, callback) {
      let postBody = body;
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling importImageManifest");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling importImageManifest");
      }

      let pathParams = {
        'operation_id': operationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/vnd.docker.distribution.manifest.v1+json', 'application/vnd.docker.distribution.manifest.v1+prettyjws', 'application/vnd.docker.distribution.manifest.v2+json', 'application/vnd.oci.image.manifest.v1+json'];
      let accepts = ['application/json'];
      let returnType = ImageImportContentResponse;
      return this.apiClient.callApi(
        '/imports/images/{operation_id}/manifest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importImagePackages operation.
     * @callback module:api/ImportsApi~importImagePackagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageImportContentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Begin the import of an image analyzed by Syft into the system
     * @param {String} operationId 
     * @param {module:model/ImagePackageManifest} imagePackageManifest 
     * @param {module:api/ImportsApi~importImagePackagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageImportContentResponse}
     */
    importImagePackages(operationId, imagePackageManifest, callback) {
      let postBody = imagePackageManifest;
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling importImagePackages");
      }
      // verify the required parameter 'imagePackageManifest' is set
      if (imagePackageManifest === undefined || imagePackageManifest === null) {
        throw new Error("Missing the required parameter 'imagePackageManifest' when calling importImagePackages");
      }

      let pathParams = {
        'operation_id': operationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImageImportContentResponse;
      return this.apiClient.callApi(
        '/imports/images/{operation_id}/packages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importImageParentManifest operation.
     * @callback module:api/ImportsApi~importImageParentManifestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageImportContentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import a docker or OCI distribution manifest list to associate with the image
     * @param {String} operationId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/ImportsApi~importImageParentManifestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageImportContentResponse}
     */
    importImageParentManifest(operationId, body, callback) {
      let postBody = body;
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling importImageParentManifest");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling importImageParentManifest");
      }

      let pathParams = {
        'operation_id': operationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/vnd.docker.distribution.manifest.list.v2+json', 'application/vnd.oci.image.index.v1+json'];
      let accepts = ['application/json'];
      let returnType = ImageImportContentResponse;
      return this.apiClient.callApi(
        '/imports/images/{operation_id}/parent_manifest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invalidateOperation operation.
     * @callback module:api/ImportsApi~invalidateOperationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageImportOperation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invalidate operation ID so it can be garbage collected
     * @param {String} operationId 
     * @param {module:api/ImportsApi~invalidateOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageImportOperation}
     */
    invalidateOperation(operationId, callback) {
      let postBody = null;
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling invalidateOperation");
      }

      let pathParams = {
        'operation_id': operationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImageImportOperation;
      return this.apiClient.callApi(
        '/imports/images/{operation_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listImportDockerfiles operation.
     * @callback module:api/ImportsApi~listImportDockerfilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List uploaded dockerfiles
     * @param {String} operationId 
     * @param {module:api/ImportsApi~listImportDockerfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    listImportDockerfiles(operationId, callback) {
      let postBody = null;
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling listImportDockerfiles");
      }

      let pathParams = {
        'operation_id': operationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/imports/images/{operation_id}/dockerfile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listImportImageConfigs operation.
     * @callback module:api/ImportsApi~listImportImageConfigsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List uploaded image configs
     * @param {String} operationId 
     * @param {module:api/ImportsApi~listImportImageConfigsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    listImportImageConfigs(operationId, callback) {
      let postBody = null;
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling listImportImageConfigs");
      }

      let pathParams = {
        'operation_id': operationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/imports/images/{operation_id}/image_config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listImportImageManifests operation.
     * @callback module:api/ImportsApi~listImportImageManifestsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List uploaded image manifests
     * @param {String} operationId 
     * @param {module:api/ImportsApi~listImportImageManifestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    listImportImageManifests(operationId, callback) {
      let postBody = null;
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling listImportImageManifests");
      }

      let pathParams = {
        'operation_id': operationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/imports/images/{operation_id}/manifest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listImportPackages operation.
     * @callback module:api/ImportsApi~listImportPackagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List uploaded package manifests
     * @param {String} operationId 
     * @param {module:api/ImportsApi~listImportPackagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    listImportPackages(operationId, callback) {
      let postBody = null;
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling listImportPackages");
      }

      let pathParams = {
        'operation_id': operationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/imports/images/{operation_id}/packages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listImportParentManifests operation.
     * @callback module:api/ImportsApi~listImportParentManifestsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List uploaded parent manifests (manifest lists for a tag)
     * @param {String} operationId 
     * @param {module:api/ImportsApi~listImportParentManifestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    listImportParentManifests(operationId, callback) {
      let postBody = null;
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling listImportParentManifests");
      }

      let pathParams = {
        'operation_id': operationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/imports/images/{operation_id}/parent_manifest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOperations operation.
     * @callback module:api/ImportsApi~listOperationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ImageImportOperation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists in-progress imports
     * @param {module:api/ImportsApi~listOperationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ImageImportOperation>}
     */
    listOperations(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ImageImportOperation];
      return this.apiClient.callApi(
        '/imports/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
