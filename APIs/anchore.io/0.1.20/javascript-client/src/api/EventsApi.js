/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiErrorResponse from '../model/ApiErrorResponse';
import EventCategory from '../model/EventCategory';
import EventResponse from '../model/EventResponse';
import EventsList from '../model/EventsList';

/**
* Events service.
* @module api/EventsApi
* @version 0.1.20
*/
export default class EventsApi {

    /**
    * Constructs a new EventsApi. 
    * @alias module:api/EventsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteEvent operation.
     * @callback module:api/EventsApi~deleteEventCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Event
     * Delete an event by its event ID
     * @param {String} eventId Event ID of the event to be deleted
     * @param {Object} opts Optional parameters
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/EventsApi~deleteEventCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEvent(eventId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling deleteEvent");
      }

      let pathParams = {
        'eventId': eventId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/events/{eventId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEvents operation.
     * @callback module:api/EventsApi~deleteEventsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Events
     * Delete all or a subset of events filtered using the optional query parameters
     * @param {Object} opts Optional parameters
     * @param {String} [before] Delete events that occurred before the timestamp
     * @param {String} [since] Delete events that occurred after the timestamp
     * @param {String} [level] Delete events that match the level - INFO or ERROR
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/EventsApi~deleteEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    deleteEvents(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'before': opts['before'],
        'since': opts['since'],
        'level': opts['level']
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/events', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvent operation.
     * @callback module:api/EventsApi~getEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Event
     * Lookup an event by its event ID
     * @param {String} eventId Event ID of the event for lookup
     * @param {Object} opts Optional parameters
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/EventsApi~getEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventResponse}
     */
    getEvent(eventId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling getEvent");
      }

      let pathParams = {
        'eventId': eventId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventResponse;
      return this.apiClient.callApi(
        '/events/{eventId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEventTypes operation.
     * @callback module:api/EventsApi~listEventTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EventCategory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Event Types
     * Returns list of event types in the category hierarchy
     * @param {module:api/EventsApi~listEventTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EventCategory>}
     */
    listEventTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EventCategory];
      return this.apiClient.callApi(
        '/event_types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEvents operation.
     * @callback module:api/EventsApi~listEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Events
     * Returns a paginated list of events in the descending order of their occurrence. Optional query parameters may be used for filtering results
     * @param {Object} opts Optional parameters
     * @param {String} [sourceServicename] Filter events by the originating service
     * @param {String} [sourceHostid] Filter events by the originating host ID
     * @param {String} [eventType] Filter events by a prefix match on the event type (e.g. \"user.image.\")
     * @param {String} [resourceType] Filter events by the type of resource - tag, imageDigest, repository etc
     * @param {String} [resourceId] Filter events by the id of the resource
     * @param {String} [level] Filter events by the level - INFO or ERROR
     * @param {String} [since] Return events that occurred after the timestamp
     * @param {String} [before] Return events that occurred before the timestamp
     * @param {Number} [page = 1)] Pagination controls - return the nth page of results. Defaults to first page if left empty
     * @param {Number} [limit = 100)] Number of events in the result set. Defaults to 100 if left empty
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/EventsApi~listEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventsList}
     */
    listEvents(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'source_servicename': opts['sourceServicename'],
        'source_hostid': opts['sourceHostid'],
        'event_type': opts['eventType'],
        'resource_type': opts['resourceType'],
        'resource_id': opts['resourceId'],
        'level': opts['level'],
        'since': opts['since'],
        'before': opts['before'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventsList;
      return this.apiClient.callApi(
        '/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
