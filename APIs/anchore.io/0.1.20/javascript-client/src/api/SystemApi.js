/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnchoreErrorCode from '../model/AnchoreErrorCode';
import ApiErrorResponse from '../model/ApiErrorResponse';
import FeedMetadata from '../model/FeedMetadata';
import FeedSyncResult from '../model/FeedSyncResult';
import GateSpec from '../model/GateSpec';
import Service from '../model/Service';
import StatusResponse from '../model/StatusResponse';
import SystemStatusResponse from '../model/SystemStatusResponse';

/**
* System service.
* @module api/SystemApi
* @version 0.1.20
*/
export default class SystemApi {

    /**
    * Constructs a new SystemApi. 
    * @alias module:api/SystemApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteFeed operation.
     * @callback module:api/SystemApi~deleteFeedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the groups and data for the feed and disable the feed itself
     * @param {String} feed 
     * @param {module:api/SystemApi~deleteFeedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFeed(feed, callback) {
      let postBody = null;
      // verify the required parameter 'feed' is set
      if (feed === undefined || feed === null) {
        throw new Error("Missing the required parameter 'feed' when calling deleteFeed");
      }

      let pathParams = {
        'feed': feed
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/system/feeds/{feed}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFeedGroup operation.
     * @callback module:api/SystemApi~deleteFeedGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the group data and disable the group itself
     * @param {String} feed 
     * @param {String} group 
     * @param {module:api/SystemApi~deleteFeedGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFeedGroup(feed, group, callback) {
      let postBody = null;
      // verify the required parameter 'feed' is set
      if (feed === undefined || feed === null) {
        throw new Error("Missing the required parameter 'feed' when calling deleteFeedGroup");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling deleteFeedGroup");
      }

      let pathParams = {
        'feed': feed,
        'group': group
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/system/feeds/{feed}/{group}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteService operation.
     * @callback module:api/SystemApi~deleteServiceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the service config
     * @param {String} servicename 
     * @param {String} hostid 
     * @param {module:api/SystemApi~deleteServiceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteService(servicename, hostid, callback) {
      let postBody = null;
      // verify the required parameter 'servicename' is set
      if (servicename === undefined || servicename === null) {
        throw new Error("Missing the required parameter 'servicename' when calling deleteService");
      }
      // verify the required parameter 'hostid' is set
      if (hostid === undefined || hostid === null) {
        throw new Error("Missing the required parameter 'hostid' when calling deleteService");
      }

      let pathParams = {
        'servicename': servicename,
        'hostid': hostid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/system/services/{servicename}/{hostid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeErrorCodes operation.
     * @callback module:api/SystemApi~describeErrorCodesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AnchoreErrorCode>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describe anchore engine error codes.
     * Describe anchore engine error codes.
     * @param {module:api/SystemApi~describeErrorCodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AnchoreErrorCode>}
     */
    describeErrorCodes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AnchoreErrorCode];
      return this.apiClient.callApi(
        '/system/error_codes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describePolicy operation.
     * @callback module:api/SystemApi~describePolicyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GateSpec>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describe the policy language spec implemented by this service.
     * Get the policy language spec for this service
     * @param {module:api/SystemApi~describePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GateSpec>}
     */
    describePolicy(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GateSpec];
      return this.apiClient.callApi(
        '/system/policy_spec', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServiceDetail operation.
     * @callback module:api/SystemApi~getServiceDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SystemStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * System status
     * Get the system status including queue lengths
     * @param {module:api/SystemApi~getServiceDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SystemStatusResponse}
     */
    getServiceDetail(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SystemStatusResponse;
      return this.apiClient.callApi(
        '/system', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServicesByName operation.
     * @callback module:api/SystemApi~getServicesByNameCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Service>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a service configuration and state
     * @param {String} servicename 
     * @param {module:api/SystemApi~getServicesByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Service>}
     */
    getServicesByName(servicename, callback) {
      let postBody = null;
      // verify the required parameter 'servicename' is set
      if (servicename === undefined || servicename === null) {
        throw new Error("Missing the required parameter 'servicename' when calling getServicesByName");
      }

      let pathParams = {
        'servicename': servicename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Service];
      return this.apiClient.callApi(
        '/system/services/{servicename}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServicesByNameAndHost operation.
     * @callback module:api/SystemApi~getServicesByNameAndHostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Service>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get service config for a specific host
     * @param {String} servicename 
     * @param {String} hostid 
     * @param {module:api/SystemApi~getServicesByNameAndHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Service>}
     */
    getServicesByNameAndHost(servicename, hostid, callback) {
      let postBody = null;
      // verify the required parameter 'servicename' is set
      if (servicename === undefined || servicename === null) {
        throw new Error("Missing the required parameter 'servicename' when calling getServicesByNameAndHost");
      }
      // verify the required parameter 'hostid' is set
      if (hostid === undefined || hostid === null) {
        throw new Error("Missing the required parameter 'hostid' when calling getServicesByNameAndHost");
      }

      let pathParams = {
        'servicename': servicename,
        'hostid': hostid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Service];
      return this.apiClient.callApi(
        '/system/services/{servicename}/{hostid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatus operation.
     * @callback module:api/SystemApi~getStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Service status
     * Get the API service status
     * @param {module:api/SystemApi~getStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatusResponse}
     */
    getStatus(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StatusResponse;
      return this.apiClient.callApi(
        '/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSystemFeeds operation.
     * @callback module:api/SystemApi~getSystemFeedsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FeedMetadata>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list feeds operations and information
     * Return a list of feed and their groups along with update and record count information. This data reflects the state of the policy engine, not the upstream feed service itself.
     * @param {module:api/SystemApi~getSystemFeedsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FeedMetadata>}
     */
    getSystemFeeds(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FeedMetadata];
      return this.apiClient.callApi(
        '/system/feeds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listServices operation.
     * @callback module:api/SystemApi~listServicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Service>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List system services
     * @param {module:api/SystemApi~listServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Service>}
     */
    listServices(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Service];
      return this.apiClient.callApi(
        '/system/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSystemFeeds operation.
     * @callback module:api/SystemApi~postSystemFeedsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FeedSyncResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * trigger feeds operations
     * Execute a synchronous feed sync operation. The response will block until complete, then return the result summary.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [flush] instruct system to flush existing data feeds records from anchore-engine
     * @param {Boolean} [sync] instruct system to re-sync data feeds
     * @param {module:api/SystemApi~postSystemFeedsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FeedSyncResult>}
     */
    postSystemFeeds(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'flush': opts['flush'],
        'sync': opts['sync']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FeedSyncResult];
      return this.apiClient.callApi(
        '/system/feeds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testWebhook operation.
     * @callback module:api/SystemApi~testWebhookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds the capabilities to test a webhook delivery for the given notification type
     * Loads the Webhook configuration for webhook_type, and sends the notification out as a test
     * @param {String} webhookType The Webhook Type that we should test
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [notificationType = 'tag_update')] What kind of Notification to send
     * @param {module:api/SystemApi~testWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    testWebhook(webhookType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webhookType' is set
      if (webhookType === undefined || webhookType === null) {
        throw new Error("Missing the required parameter 'webhookType' when calling testWebhook");
      }

      let pathParams = {
        'webhook_type': webhookType
      };
      let queryParams = {
        'notification_type': opts['notificationType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/system/webhooks/{webhook_type}/test', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the toggleFeedEnabled operation.
     * @callback module:api/SystemApi~toggleFeedEnabledCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeedMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable the feed so that it does not sync on subsequent sync operations
     * @param {String} feed 
     * @param {Boolean} enabled 
     * @param {module:api/SystemApi~toggleFeedEnabledCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeedMetadata}
     */
    toggleFeedEnabled(feed, enabled, callback) {
      let postBody = null;
      // verify the required parameter 'feed' is set
      if (feed === undefined || feed === null) {
        throw new Error("Missing the required parameter 'feed' when calling toggleFeedEnabled");
      }
      // verify the required parameter 'enabled' is set
      if (enabled === undefined || enabled === null) {
        throw new Error("Missing the required parameter 'enabled' when calling toggleFeedEnabled");
      }

      let pathParams = {
        'feed': feed
      };
      let queryParams = {
        'enabled': enabled
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FeedMetadata;
      return this.apiClient.callApi(
        '/system/feeds/{feed}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the toggleGroupEnabled operation.
     * @callback module:api/SystemApi~toggleGroupEnabledCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FeedMetadata>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a specific group within a feed to not sync
     * @param {String} feed 
     * @param {String} group 
     * @param {Boolean} enabled 
     * @param {module:api/SystemApi~toggleGroupEnabledCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FeedMetadata>}
     */
    toggleGroupEnabled(feed, group, enabled, callback) {
      let postBody = null;
      // verify the required parameter 'feed' is set
      if (feed === undefined || feed === null) {
        throw new Error("Missing the required parameter 'feed' when calling toggleGroupEnabled");
      }
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling toggleGroupEnabled");
      }
      // verify the required parameter 'enabled' is set
      if (enabled === undefined || enabled === null) {
        throw new Error("Missing the required parameter 'enabled' when calling toggleGroupEnabled");
      }

      let pathParams = {
        'feed': feed,
        'group': group
      };
      let queryParams = {
        'enabled': enabled
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FeedMetadata];
      return this.apiClient.callApi(
        '/system/feeds/{feed}/{group}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
