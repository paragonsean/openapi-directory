/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiErrorResponse from '../model/ApiErrorResponse';
import RegistryConfiguration from '../model/RegistryConfiguration';
import RegistryConfigurationRequest from '../model/RegistryConfigurationRequest';

/**
* Registries service.
* @module api/RegistriesApi
* @version 0.1.20
*/
export default class RegistriesApi {

    /**
    * Constructs a new RegistriesApi. 
    * @alias module:api/RegistriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createRegistry operation.
     * @callback module:api/RegistriesApi~createRegistryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RegistryConfiguration>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new registry
     * Adds a new registry to the system
     * @param {module:model/RegistryConfigurationRequest} registryConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [validate] flag to determine whether or not to validate registry/credential at registry add time
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/RegistriesApi~createRegistryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RegistryConfiguration>}
     */
    createRegistry(registryConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = registryConfigurationRequest;
      // verify the required parameter 'registryConfigurationRequest' is set
      if (registryConfigurationRequest === undefined || registryConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'registryConfigurationRequest' when calling createRegistry");
      }

      let pathParams = {
      };
      let queryParams = {
        'validate': opts['validate']
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [RegistryConfiguration];
      return this.apiClient.callApi(
        '/registries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRegistry operation.
     * @callback module:api/RegistriesApi~deleteRegistryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a registry configuration
     * Delete a registry configuration record from the system. Does not remove any images.
     * @param {String} registry 
     * @param {Object} opts Optional parameters
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/RegistriesApi~deleteRegistryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRegistry(registry, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'registry' is set
      if (registry === undefined || registry === null) {
        throw new Error("Missing the required parameter 'registry' when calling deleteRegistry");
      }

      let pathParams = {
        'registry': registry
      };
      let queryParams = {
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/registries/{registry}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistry operation.
     * @callback module:api/RegistriesApi~getRegistryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RegistryConfiguration>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific registry configuration
     * Get information on a specific registry
     * @param {String} registry 
     * @param {Object} opts Optional parameters
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/RegistriesApi~getRegistryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RegistryConfiguration>}
     */
    getRegistry(registry, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'registry' is set
      if (registry === undefined || registry === null) {
        throw new Error("Missing the required parameter 'registry' when calling getRegistry");
      }

      let pathParams = {
        'registry': registry
      };
      let queryParams = {
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RegistryConfiguration];
      return this.apiClient.callApi(
        '/registries/{registry}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRegistries operation.
     * @callback module:api/RegistriesApi~listRegistriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RegistryConfiguration>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List configured registries
     * List all configured registries the system can/will watch
     * @param {Object} opts Optional parameters
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/RegistriesApi~listRegistriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RegistryConfiguration>}
     */
    listRegistries(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RegistryConfiguration];
      return this.apiClient.callApi(
        '/registries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRegistry operation.
     * @callback module:api/RegistriesApi~updateRegistryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RegistryConfiguration>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update/replace a registry configuration
     * Replaces an existing registry record with the given record
     * @param {String} registry 
     * @param {module:model/RegistryConfigurationRequest} registryConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [validate] flag to determine whether or not to validate registry/credential at registry update time
     * @param {String} [xAnchoreAccount] An account name to change the resource scope of the request to that account, if permissions allow (admin only)
     * @param {module:api/RegistriesApi~updateRegistryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RegistryConfiguration>}
     */
    updateRegistry(registry, registryConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = registryConfigurationRequest;
      // verify the required parameter 'registry' is set
      if (registry === undefined || registry === null) {
        throw new Error("Missing the required parameter 'registry' when calling updateRegistry");
      }
      // verify the required parameter 'registryConfigurationRequest' is set
      if (registryConfigurationRequest === undefined || registryConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'registryConfigurationRequest' when calling updateRegistry");
      }

      let pathParams = {
        'registry': registry
      };
      let queryParams = {
        'validate': opts['validate']
      };
      let headerParams = {
        'x-anchore-account': opts['xAnchoreAccount']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [RegistryConfiguration];
      return this.apiClient.callApi(
        '/registries/{registry}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
