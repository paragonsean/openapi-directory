/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RegistryConfiguration model module.
 * @module model/RegistryConfiguration
 * @version 0.1.20
 */
class RegistryConfiguration {
    /**
     * Constructs a new <code>RegistryConfiguration</code>.
     * A registry entry describing the endpoint and credentials for a registry to pull images from
     * @alias module:model/RegistryConfiguration
     */
    constructor() { 
        
        RegistryConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RegistryConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RegistryConfiguration} obj Optional instance to populate.
     * @return {module:model/RegistryConfiguration} The populated <code>RegistryConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RegistryConfiguration();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('last_upated')) {
                obj['last_upated'] = ApiClient.convertToType(data['last_upated'], 'Date');
            }
            if (data.hasOwnProperty('registry')) {
                obj['registry'] = ApiClient.convertToType(data['registry'], 'String');
            }
            if (data.hasOwnProperty('registry_name')) {
                obj['registry_name'] = ApiClient.convertToType(data['registry_name'], 'String');
            }
            if (data.hasOwnProperty('registry_type')) {
                obj['registry_type'] = ApiClient.convertToType(data['registry_type'], 'String');
            }
            if (data.hasOwnProperty('registry_user')) {
                obj['registry_user'] = ApiClient.convertToType(data['registry_user'], 'String');
            }
            if (data.hasOwnProperty('registry_verify')) {
                obj['registry_verify'] = ApiClient.convertToType(data['registry_verify'], 'Boolean');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RegistryConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RegistryConfiguration</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['registry'] && !(typeof data['registry'] === 'string' || data['registry'] instanceof String)) {
            throw new Error("Expected the field `registry` to be a primitive type in the JSON string but got " + data['registry']);
        }
        // ensure the json data is a string
        if (data['registry_name'] && !(typeof data['registry_name'] === 'string' || data['registry_name'] instanceof String)) {
            throw new Error("Expected the field `registry_name` to be a primitive type in the JSON string but got " + data['registry_name']);
        }
        // ensure the json data is a string
        if (data['registry_type'] && !(typeof data['registry_type'] === 'string' || data['registry_type'] instanceof String)) {
            throw new Error("Expected the field `registry_type` to be a primitive type in the JSON string but got " + data['registry_type']);
        }
        // ensure the json data is a string
        if (data['registry_user'] && !(typeof data['registry_user'] === 'string' || data['registry_user'] instanceof String)) {
            throw new Error("Expected the field `registry_user` to be a primitive type in the JSON string but got " + data['registry_user']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * @member {Date} created_at
 */
RegistryConfiguration.prototype['created_at'] = undefined;

/**
 * @member {Date} last_upated
 */
RegistryConfiguration.prototype['last_upated'] = undefined;

/**
 * hostname:port string for accessing the registry, as would be used in a docker pull operation
 * @member {String} registry
 */
RegistryConfiguration.prototype['registry'] = undefined;

/**
 * human readable name associated with registry record
 * @member {String} registry_name
 */
RegistryConfiguration.prototype['registry_name'] = undefined;

/**
 * Type of registry
 * @member {String} registry_type
 */
RegistryConfiguration.prototype['registry_type'] = undefined;

/**
 * Username portion of credential to use for this registry
 * @member {String} registry_user
 */
RegistryConfiguration.prototype['registry_user'] = undefined;

/**
 * Use TLS/SSL verification for the registry URL
 * @member {Boolean} registry_verify
 */
RegistryConfiguration.prototype['registry_verify'] = undefined;

/**
 * Engine user that owns this registry entry
 * @member {String} userId
 */
RegistryConfiguration.prototype['userId'] = undefined;






export default RegistryConfiguration;

