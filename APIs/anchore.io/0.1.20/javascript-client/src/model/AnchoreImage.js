/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageDetail from './ImageDetail';

/**
 * The AnchoreImage model module.
 * @module model/AnchoreImage
 * @version 0.1.20
 */
class AnchoreImage {
    /**
     * Constructs a new <code>AnchoreImage</code>.
     * A unique image in the engine. May have multiple tags or references. Unique to an image content across registries or repositories.
     * @alias module:model/AnchoreImage
     */
    constructor() { 
        
        AnchoreImage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AnchoreImage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnchoreImage} obj Optional instance to populate.
     * @return {module:model/AnchoreImage} The populated <code>AnchoreImage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnchoreImage();

            if (data.hasOwnProperty('analysis_status')) {
                obj['analysis_status'] = ApiClient.convertToType(data['analysis_status'], 'String');
            }
            if (data.hasOwnProperty('annotations')) {
                obj['annotations'] = ApiClient.convertToType(data['annotations'], Object);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('imageDigest')) {
                obj['imageDigest'] = ApiClient.convertToType(data['imageDigest'], 'String');
            }
            if (data.hasOwnProperty('image_content')) {
                obj['image_content'] = ApiClient.convertToType(data['image_content'], Object);
            }
            if (data.hasOwnProperty('image_detail')) {
                obj['image_detail'] = ApiClient.convertToType(data['image_detail'], [ImageDetail]);
            }
            if (data.hasOwnProperty('image_status')) {
                obj['image_status'] = ApiClient.convertToType(data['image_status'], 'String');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('record_version')) {
                obj['record_version'] = ApiClient.convertToType(data['record_version'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnchoreImage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnchoreImage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['analysis_status'] && !(typeof data['analysis_status'] === 'string' || data['analysis_status'] instanceof String)) {
            throw new Error("Expected the field `analysis_status` to be a primitive type in the JSON string but got " + data['analysis_status']);
        }
        // ensure the json data is a string
        if (data['imageDigest'] && !(typeof data['imageDigest'] === 'string' || data['imageDigest'] instanceof String)) {
            throw new Error("Expected the field `imageDigest` to be a primitive type in the JSON string but got " + data['imageDigest']);
        }
        if (data['image_detail']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['image_detail'])) {
                throw new Error("Expected the field `image_detail` to be an array in the JSON data but got " + data['image_detail']);
            }
            // validate the optional field `image_detail` (array)
            for (const item of data['image_detail']) {
                ImageDetail.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['image_status'] && !(typeof data['image_status'] === 'string' || data['image_status'] instanceof String)) {
            throw new Error("Expected the field `image_status` to be a primitive type in the JSON string but got " + data['image_status']);
        }
        // ensure the json data is a string
        if (data['record_version'] && !(typeof data['record_version'] === 'string' || data['record_version'] instanceof String)) {
            throw new Error("Expected the field `record_version` to be a primitive type in the JSON string but got " + data['record_version']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * A state value for the current status of the analysis progress of the image
 * @member {module:model/AnchoreImage.AnalysisStatusEnum} analysis_status
 */
AnchoreImage.prototype['analysis_status'] = undefined;

/**
 * @member {Object} annotations
 */
AnchoreImage.prototype['annotations'] = undefined;

/**
 * @member {Date} created_at
 */
AnchoreImage.prototype['created_at'] = undefined;

/**
 * @member {String} imageDigest
 */
AnchoreImage.prototype['imageDigest'] = undefined;

/**
 * A metadata content record for a specific image, containing different content type entries
 * @member {Object} image_content
 */
AnchoreImage.prototype['image_content'] = undefined;

/**
 * Details specific to an image reference and type such as tag and image source
 * @member {Array.<module:model/ImageDetail>} image_detail
 */
AnchoreImage.prototype['image_detail'] = undefined;

/**
 * State of the image
 * @member {module:model/AnchoreImage.ImageStatusEnum} image_status
 */
AnchoreImage.prototype['image_status'] = undefined;

/**
 * @member {Date} last_updated
 */
AnchoreImage.prototype['last_updated'] = undefined;

/**
 * The version of the record, used for internal schema updates and data migrations.
 * @member {String} record_version
 */
AnchoreImage.prototype['record_version'] = undefined;

/**
 * @member {String} userId
 */
AnchoreImage.prototype['userId'] = undefined;





/**
 * Allowed values for the <code>analysis_status</code> property.
 * @enum {String}
 * @readonly
 */
AnchoreImage['AnalysisStatusEnum'] = {

    /**
     * value: "not_analyzed"
     * @const
     */
    "not_analyzed": "not_analyzed",

    /**
     * value: "analyzing"
     * @const
     */
    "analyzing": "analyzing",

    /**
     * value: "analyzed"
     * @const
     */
    "analyzed": "analyzed",

    /**
     * value: "analysis_failed"
     * @const
     */
    "analysis_failed": "analysis_failed"
};


/**
 * Allowed values for the <code>image_status</code> property.
 * @enum {String}
 * @readonly
 */
AnchoreImage['ImageStatusEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "inactive"
     * @const
     */
    "inactive": "inactive",

    /**
     * value: "disabled"
     * @const
     */
    "disabled": "disabled"
};



export default AnchoreImage;

