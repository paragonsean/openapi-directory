/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NotificationBase model module.
 * @module model/NotificationBase
 * @version 0.1.20
 */
class NotificationBase {
    /**
     * Constructs a new <code>NotificationBase</code>.
     * base object for Notifications (every notification has this basic structure)
     * @alias module:model/NotificationBase
     */
    constructor() { 
        
        NotificationBase.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['record_state_key'] = 'active';
    }

    /**
     * Constructs a <code>NotificationBase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotificationBase} obj Optional instance to populate.
     * @return {module:model/NotificationBase} The populated <code>NotificationBase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotificationBase();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Number');
            }
            if (data.hasOwnProperty('dataId')) {
                obj['dataId'] = ApiClient.convertToType(data['dataId'], 'String');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Number');
            }
            if (data.hasOwnProperty('max_tries')) {
                obj['max_tries'] = ApiClient.convertToType(data['max_tries'], 'Number');
            }
            if (data.hasOwnProperty('queueId')) {
                obj['queueId'] = ApiClient.convertToType(data['queueId'], 'String');
            }
            if (data.hasOwnProperty('record_state_key')) {
                obj['record_state_key'] = ApiClient.convertToType(data['record_state_key'], 'String');
            }
            if (data.hasOwnProperty('record_state_val')) {
                obj['record_state_val'] = ApiClient.convertToType(data['record_state_val'], 'String');
            }
            if (data.hasOwnProperty('tries')) {
                obj['tries'] = ApiClient.convertToType(data['tries'], 'Number');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotificationBase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotificationBase</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dataId'] && !(typeof data['dataId'] === 'string' || data['dataId'] instanceof String)) {
            throw new Error("Expected the field `dataId` to be a primitive type in the JSON string but got " + data['dataId']);
        }
        // ensure the json data is a string
        if (data['queueId'] && !(typeof data['queueId'] === 'string' || data['queueId'] instanceof String)) {
            throw new Error("Expected the field `queueId` to be a primitive type in the JSON string but got " + data['queueId']);
        }
        // ensure the json data is a string
        if (data['record_state_key'] && !(typeof data['record_state_key'] === 'string' || data['record_state_key'] instanceof String)) {
            throw new Error("Expected the field `record_state_key` to be a primitive type in the JSON string but got " + data['record_state_key']);
        }
        // ensure the json data is a string
        if (data['record_state_val'] && !(typeof data['record_state_val'] === 'string' || data['record_state_val'] instanceof String)) {
            throw new Error("Expected the field `record_state_val` to be a primitive type in the JSON string but got " + data['record_state_val']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * @member {Number} created_at
 */
NotificationBase.prototype['created_at'] = undefined;

/**
 * @member {String} dataId
 */
NotificationBase.prototype['dataId'] = undefined;

/**
 * @member {Number} last_updated
 */
NotificationBase.prototype['last_updated'] = undefined;

/**
 * @member {Number} max_tries
 */
NotificationBase.prototype['max_tries'] = undefined;

/**
 * @member {String} queueId
 */
NotificationBase.prototype['queueId'] = undefined;

/**
 * @member {String} record_state_key
 * @default 'active'
 */
NotificationBase.prototype['record_state_key'] = 'active';

/**
 * @member {String} record_state_val
 */
NotificationBase.prototype['record_state_val'] = undefined;

/**
 * @member {Number} tries
 */
NotificationBase.prototype['tries'] = undefined;

/**
 * @member {String} userId
 */
NotificationBase.prototype['userId'] = undefined;






export default NotificationBase;

