/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnalysisArchiveSource from './AnalysisArchiveSource';
import ImageImportManifest from './ImageImportManifest';
import RegistryDigestSource from './RegistryDigestSource';
import RegistryTagSource from './RegistryTagSource';

/**
 * The ImageSource model module.
 * @module model/ImageSource
 * @version 0.1.20
 */
class ImageSource {
    /**
     * Constructs a new <code>ImageSource</code>.
     * A set of analysis source types. Only one may be set in any given request.
     * @alias module:model/ImageSource
     */
    constructor() { 
        
        ImageSource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImageSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageSource} obj Optional instance to populate.
     * @return {module:model/ImageSource} The populated <code>ImageSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageSource();

            if (data.hasOwnProperty('archive')) {
                obj['archive'] = AnalysisArchiveSource.constructFromObject(data['archive']);
            }
            if (data.hasOwnProperty('digest')) {
                obj['digest'] = RegistryDigestSource.constructFromObject(data['digest']);
            }
            if (data.hasOwnProperty('import')) {
                obj['import'] = ImageImportManifest.constructFromObject(data['import']);
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = RegistryTagSource.constructFromObject(data['tag']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageSource</code>.
     */
    static validateJSON(data) {
        // validate the optional field `archive`
        if (data['archive']) { // data not null
          AnalysisArchiveSource.validateJSON(data['archive']);
        }
        // validate the optional field `digest`
        if (data['digest']) { // data not null
          RegistryDigestSource.validateJSON(data['digest']);
        }
        // validate the optional field `import`
        if (data['import']) { // data not null
          ImageImportManifest.validateJSON(data['import']);
        }
        // validate the optional field `tag`
        if (data['tag']) { // data not null
          RegistryTagSource.validateJSON(data['tag']);
        }

        return true;
    }


}



/**
 * @member {module:model/AnalysisArchiveSource} archive
 */
ImageSource.prototype['archive'] = undefined;

/**
 * @member {module:model/RegistryDigestSource} digest
 */
ImageSource.prototype['digest'] = undefined;

/**
 * @member {module:model/ImageImportManifest} import
 */
ImageSource.prototype['import'] = undefined;

/**
 * @member {module:model/RegistryTagSource} tag
 */
ImageSource.prototype['tag'] = undefined;






export default ImageSource;

