/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaseNotificationData from './BaseNotificationData';
import TagUpdateNotificationPayload from './TagUpdateNotificationPayload';

/**
 * The TagUpdateNotificationData model module.
 * @module model/TagUpdateNotificationData
 * @version 0.1.20
 */
class TagUpdateNotificationData {
    /**
     * Constructs a new <code>TagUpdateNotificationData</code>.
     * @alias module:model/TagUpdateNotificationData
     * @implements module:model/BaseNotificationData
     */
    constructor() { 
        BaseNotificationData.initialize(this);
        TagUpdateNotificationData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TagUpdateNotificationData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TagUpdateNotificationData} obj Optional instance to populate.
     * @return {module:model/TagUpdateNotificationData} The populated <code>TagUpdateNotificationData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TagUpdateNotificationData();
            BaseNotificationData.constructFromObject(data, obj);

            if (data.hasOwnProperty('notification_type')) {
                obj['notification_type'] = ApiClient.convertToType(data['notification_type'], 'String');
            }
            if (data.hasOwnProperty('notification_user')) {
                obj['notification_user'] = ApiClient.convertToType(data['notification_user'], 'String');
            }
            if (data.hasOwnProperty('notification_user_email')) {
                obj['notification_user_email'] = ApiClient.convertToType(data['notification_user_email'], 'String');
            }
            if (data.hasOwnProperty('notification_payload')) {
                obj['notification_payload'] = TagUpdateNotificationPayload.constructFromObject(data['notification_payload']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TagUpdateNotificationData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TagUpdateNotificationData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['notification_type'] && !(typeof data['notification_type'] === 'string' || data['notification_type'] instanceof String)) {
            throw new Error("Expected the field `notification_type` to be a primitive type in the JSON string but got " + data['notification_type']);
        }
        // ensure the json data is a string
        if (data['notification_user'] && !(typeof data['notification_user'] === 'string' || data['notification_user'] instanceof String)) {
            throw new Error("Expected the field `notification_user` to be a primitive type in the JSON string but got " + data['notification_user']);
        }
        // ensure the json data is a string
        if (data['notification_user_email'] && !(typeof data['notification_user_email'] === 'string' || data['notification_user_email'] instanceof String)) {
            throw new Error("Expected the field `notification_user_email` to be a primitive type in the JSON string but got " + data['notification_user_email']);
        }
        // validate the optional field `notification_payload`
        if (data['notification_payload']) { // data not null
          TagUpdateNotificationPayload.validateJSON(data['notification_payload']);
        }

        return true;
    }


}



/**
 * @member {String} notification_type
 */
TagUpdateNotificationData.prototype['notification_type'] = undefined;

/**
 * @member {String} notification_user
 */
TagUpdateNotificationData.prototype['notification_user'] = undefined;

/**
 * @member {String} notification_user_email
 */
TagUpdateNotificationData.prototype['notification_user_email'] = undefined;

/**
 * @member {module:model/TagUpdateNotificationPayload} notification_payload
 */
TagUpdateNotificationData.prototype['notification_payload'] = undefined;


// Implement BaseNotificationData interface:
/**
 * @member {String} notification_type
 */
BaseNotificationData.prototype['notification_type'] = undefined;
/**
 * @member {String} notification_user
 */
BaseNotificationData.prototype['notification_user'] = undefined;
/**
 * @member {String} notification_user_email
 */
BaseNotificationData.prototype['notification_user_email'] = undefined;




export default TagUpdateNotificationData;

