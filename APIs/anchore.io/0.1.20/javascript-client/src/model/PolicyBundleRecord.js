/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PolicyBundle from './PolicyBundle';

/**
 * The PolicyBundleRecord model module.
 * @module model/PolicyBundleRecord
 * @version 0.1.20
 */
class PolicyBundleRecord {
    /**
     * Constructs a new <code>PolicyBundleRecord</code>.
     * A policy bundle plus some metadata
     * @alias module:model/PolicyBundleRecord
     */
    constructor() { 
        
        PolicyBundleRecord.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PolicyBundleRecord</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PolicyBundleRecord} obj Optional instance to populate.
     * @return {module:model/PolicyBundleRecord} The populated <code>PolicyBundleRecord</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PolicyBundleRecord();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('policyId')) {
                obj['policyId'] = ApiClient.convertToType(data['policyId'], 'String');
            }
            if (data.hasOwnProperty('policy_source')) {
                obj['policy_source'] = ApiClient.convertToType(data['policy_source'], 'String');
            }
            if (data.hasOwnProperty('policybundle')) {
                obj['policybundle'] = PolicyBundle.constructFromObject(data['policybundle']);
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PolicyBundleRecord</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PolicyBundleRecord</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['policyId'] && !(typeof data['policyId'] === 'string' || data['policyId'] instanceof String)) {
            throw new Error("Expected the field `policyId` to be a primitive type in the JSON string but got " + data['policyId']);
        }
        // ensure the json data is a string
        if (data['policy_source'] && !(typeof data['policy_source'] === 'string' || data['policy_source'] instanceof String)) {
            throw new Error("Expected the field `policy_source` to be a primitive type in the JSON string but got " + data['policy_source']);
        }
        // validate the optional field `policybundle`
        if (data['policybundle']) { // data not null
          PolicyBundle.validateJSON(data['policybundle']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * True if the bundle is currently defined to be used automatically
 * @member {Boolean} active
 */
PolicyBundleRecord.prototype['active'] = undefined;

/**
 * @member {Date} created_at
 */
PolicyBundleRecord.prototype['created_at'] = undefined;

/**
 * @member {Date} last_updated
 */
PolicyBundleRecord.prototype['last_updated'] = undefined;

/**
 * The bundle's identifier
 * @member {String} policyId
 */
PolicyBundleRecord.prototype['policyId'] = undefined;

/**
 * Source location of where the policy bundle originated
 * @member {String} policy_source
 */
PolicyBundleRecord.prototype['policy_source'] = undefined;

/**
 * @member {module:model/PolicyBundle} policybundle
 */
PolicyBundleRecord.prototype['policybundle'] = undefined;

/**
 * UserId of the user that owns the bundle
 * @member {String} userId
 */
PolicyBundleRecord.prototype['userId'] = undefined;






export default PolicyBundleRecord;

