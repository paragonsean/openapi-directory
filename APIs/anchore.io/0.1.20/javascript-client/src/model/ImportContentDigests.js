/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImportContentDigests model module.
 * @module model/ImportContentDigests
 * @version 0.1.20
 */
class ImportContentDigests {
    /**
     * Constructs a new <code>ImportContentDigests</code>.
     * Digest of content to use in the final import
     * @alias module:model/ImportContentDigests
     * @param imageConfig {String} Digest for reference content for image config
     * @param manifest {String} Digest to reference content for the image manifest
     * @param packages {String} Digest to use for the packages content
     */
    constructor(imageConfig, manifest, packages) { 
        
        ImportContentDigests.initialize(this, imageConfig, manifest, packages);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, imageConfig, manifest, packages) { 
        obj['image_config'] = imageConfig;
        obj['manifest'] = manifest;
        obj['packages'] = packages;
    }

    /**
     * Constructs a <code>ImportContentDigests</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImportContentDigests} obj Optional instance to populate.
     * @return {module:model/ImportContentDigests} The populated <code>ImportContentDigests</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImportContentDigests();

            if (data.hasOwnProperty('dockerfile')) {
                obj['dockerfile'] = ApiClient.convertToType(data['dockerfile'], 'String');
            }
            if (data.hasOwnProperty('image_config')) {
                obj['image_config'] = ApiClient.convertToType(data['image_config'], 'String');
            }
            if (data.hasOwnProperty('manifest')) {
                obj['manifest'] = ApiClient.convertToType(data['manifest'], 'String');
            }
            if (data.hasOwnProperty('packages')) {
                obj['packages'] = ApiClient.convertToType(data['packages'], 'String');
            }
            if (data.hasOwnProperty('parent_manifest')) {
                obj['parent_manifest'] = ApiClient.convertToType(data['parent_manifest'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImportContentDigests</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImportContentDigests</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImportContentDigests.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dockerfile'] && !(typeof data['dockerfile'] === 'string' || data['dockerfile'] instanceof String)) {
            throw new Error("Expected the field `dockerfile` to be a primitive type in the JSON string but got " + data['dockerfile']);
        }
        // ensure the json data is a string
        if (data['image_config'] && !(typeof data['image_config'] === 'string' || data['image_config'] instanceof String)) {
            throw new Error("Expected the field `image_config` to be a primitive type in the JSON string but got " + data['image_config']);
        }
        // ensure the json data is a string
        if (data['manifest'] && !(typeof data['manifest'] === 'string' || data['manifest'] instanceof String)) {
            throw new Error("Expected the field `manifest` to be a primitive type in the JSON string but got " + data['manifest']);
        }
        // ensure the json data is a string
        if (data['packages'] && !(typeof data['packages'] === 'string' || data['packages'] instanceof String)) {
            throw new Error("Expected the field `packages` to be a primitive type in the JSON string but got " + data['packages']);
        }
        // ensure the json data is a string
        if (data['parent_manifest'] && !(typeof data['parent_manifest'] === 'string' || data['parent_manifest'] instanceof String)) {
            throw new Error("Expected the field `parent_manifest` to be a primitive type in the JSON string but got " + data['parent_manifest']);
        }

        return true;
    }


}

ImportContentDigests.RequiredProperties = ["image_config", "manifest", "packages"];

/**
 * Digest for reference content for dockerfile
 * @member {String} dockerfile
 */
ImportContentDigests.prototype['dockerfile'] = undefined;

/**
 * Digest for reference content for image config
 * @member {String} image_config
 */
ImportContentDigests.prototype['image_config'] = undefined;

/**
 * Digest to reference content for the image manifest
 * @member {String} manifest
 */
ImportContentDigests.prototype['manifest'] = undefined;

/**
 * Digest to use for the packages content
 * @member {String} packages
 */
ImportContentDigests.prototype['packages'] = undefined;

/**
 * Digest for reference content for parent manifest
 * @member {String} parent_manifest
 */
ImportContentDigests.prototype['parent_manifest'] = undefined;






export default ImportContentDigests;

