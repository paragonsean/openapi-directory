/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GenericNotificationPayload from './GenericNotificationPayload';

/**
 * The PolicyEvalNotificationPayload model module.
 * @module model/PolicyEvalNotificationPayload
 * @version 0.1.20
 */
class PolicyEvalNotificationPayload {
    /**
     * Constructs a new <code>PolicyEvalNotificationPayload</code>.
     * @alias module:model/PolicyEvalNotificationPayload
     * @implements module:model/GenericNotificationPayload
     */
    constructor() { 
        GenericNotificationPayload.initialize(this);
        PolicyEvalNotificationPayload.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PolicyEvalNotificationPayload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PolicyEvalNotificationPayload} obj Optional instance to populate.
     * @return {module:model/PolicyEvalNotificationPayload} The populated <code>PolicyEvalNotificationPayload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PolicyEvalNotificationPayload();
            GenericNotificationPayload.constructFromObject(data, obj);

            if (data.hasOwnProperty('notificationId')) {
                obj['notificationId'] = ApiClient.convertToType(data['notificationId'], 'String');
            }
            if (data.hasOwnProperty('subscription_key')) {
                obj['subscription_key'] = ApiClient.convertToType(data['subscription_key'], 'String');
            }
            if (data.hasOwnProperty('subscription_type')) {
                obj['subscription_type'] = ApiClient.convertToType(data['subscription_type'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
            if (data.hasOwnProperty('annotations')) {
                obj['annotations'] = ApiClient.convertToType(data['annotations'], Object);
            }
            if (data.hasOwnProperty('curr_eval')) {
                obj['curr_eval'] = ApiClient.convertToType(data['curr_eval'], Object);
            }
            if (data.hasOwnProperty('last_eval')) {
                obj['last_eval'] = ApiClient.convertToType(data['last_eval'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PolicyEvalNotificationPayload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PolicyEvalNotificationPayload</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['notificationId'] && !(typeof data['notificationId'] === 'string' || data['notificationId'] instanceof String)) {
            throw new Error("Expected the field `notificationId` to be a primitive type in the JSON string but got " + data['notificationId']);
        }
        // ensure the json data is a string
        if (data['subscription_key'] && !(typeof data['subscription_key'] === 'string' || data['subscription_key'] instanceof String)) {
            throw new Error("Expected the field `subscription_key` to be a primitive type in the JSON string but got " + data['subscription_key']);
        }
        // ensure the json data is a string
        if (data['subscription_type'] && !(typeof data['subscription_type'] === 'string' || data['subscription_type'] instanceof String)) {
            throw new Error("Expected the field `subscription_type` to be a primitive type in the JSON string but got " + data['subscription_type']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * @member {String} notificationId
 */
PolicyEvalNotificationPayload.prototype['notificationId'] = undefined;

/**
 * @member {String} subscription_key
 */
PolicyEvalNotificationPayload.prototype['subscription_key'] = undefined;

/**
 * @member {String} subscription_type
 */
PolicyEvalNotificationPayload.prototype['subscription_type'] = undefined;

/**
 * @member {String} userId
 */
PolicyEvalNotificationPayload.prototype['userId'] = undefined;

/**
 * List of Corresponding Image Annotations
 * @member {Object} annotations
 */
PolicyEvalNotificationPayload.prototype['annotations'] = undefined;

/**
 * The Current Policy Evaluation result
 * @member {Object} curr_eval
 */
PolicyEvalNotificationPayload.prototype['curr_eval'] = undefined;

/**
 * The Previous Policy Evaluation result
 * @member {Object} last_eval
 */
PolicyEvalNotificationPayload.prototype['last_eval'] = undefined;


// Implement GenericNotificationPayload interface:
/**
 * @member {String} notificationId
 */
GenericNotificationPayload.prototype['notificationId'] = undefined;
/**
 * @member {String} subscription_key
 */
GenericNotificationPayload.prototype['subscription_key'] = undefined;
/**
 * @member {String} subscription_type
 */
GenericNotificationPayload.prototype['subscription_type'] = undefined;
/**
 * @member {String} userId
 */
GenericNotificationPayload.prototype['userId'] = undefined;




export default PolicyEvalNotificationPayload;

