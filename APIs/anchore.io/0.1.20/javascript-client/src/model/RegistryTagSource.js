/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RegistryTagSource model module.
 * @module model/RegistryTagSource
 * @version 0.1.20
 */
class RegistryTagSource {
    /**
     * Constructs a new <code>RegistryTagSource</code>.
     * An image reference using a tag in a registry, this is the most common source type.
     * @alias module:model/RegistryTagSource
     * @param pullstring {String} A docker pull string (e.g. docker.io/nginx:latest, or docker.io/nginx@sha256:abd) to retrieve the image
     */
    constructor(pullstring) { 
        
        RegistryTagSource.initialize(this, pullstring);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, pullstring) { 
        obj['pullstring'] = pullstring;
    }

    /**
     * Constructs a <code>RegistryTagSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RegistryTagSource} obj Optional instance to populate.
     * @return {module:model/RegistryTagSource} The populated <code>RegistryTagSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RegistryTagSource();

            if (data.hasOwnProperty('dockerfile')) {
                obj['dockerfile'] = ApiClient.convertToType(data['dockerfile'], 'String');
            }
            if (data.hasOwnProperty('pullstring')) {
                obj['pullstring'] = ApiClient.convertToType(data['pullstring'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RegistryTagSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RegistryTagSource</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RegistryTagSource.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dockerfile'] && !(typeof data['dockerfile'] === 'string' || data['dockerfile'] instanceof String)) {
            throw new Error("Expected the field `dockerfile` to be a primitive type in the JSON string but got " + data['dockerfile']);
        }
        // ensure the json data is a string
        if (data['pullstring'] && !(typeof data['pullstring'] === 'string' || data['pullstring'] instanceof String)) {
            throw new Error("Expected the field `pullstring` to be a primitive type in the JSON string but got " + data['pullstring']);
        }

        return true;
    }


}

RegistryTagSource.RequiredProperties = ["pullstring"];

/**
 * Base64 encoded content of the dockerfile used to build the image, if available.
 * @member {String} dockerfile
 */
RegistryTagSource.prototype['dockerfile'] = undefined;

/**
 * A docker pull string (e.g. docker.io/nginx:latest, or docker.io/nginx@sha256:abd) to retrieve the image
 * @member {String} pullstring
 */
RegistryTagSource.prototype['pullstring'] = undefined;






export default RegistryTagSource;

