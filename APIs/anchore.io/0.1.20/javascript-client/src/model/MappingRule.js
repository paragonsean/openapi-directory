/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageRef from './ImageRef';

/**
 * The MappingRule model module.
 * @module model/MappingRule
 * @version 0.1.20
 */
class MappingRule {
    /**
     * Constructs a new <code>MappingRule</code>.
     * @alias module:model/MappingRule
     * @param image {module:model/ImageRef} 
     * @param name {String} 
     * @param registry {String} 
     * @param repository {String} 
     */
    constructor(image, name, registry, repository) { 
        
        MappingRule.initialize(this, image, name, registry, repository);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, image, name, registry, repository) { 
        obj['image'] = image;
        obj['name'] = name;
        obj['registry'] = registry;
        obj['repository'] = repository;
    }

    /**
     * Constructs a <code>MappingRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MappingRule} obj Optional instance to populate.
     * @return {module:model/MappingRule} The populated <code>MappingRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MappingRule();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ImageRef.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('policy_id')) {
                obj['policy_id'] = ApiClient.convertToType(data['policy_id'], 'String');
            }
            if (data.hasOwnProperty('policy_ids')) {
                obj['policy_ids'] = ApiClient.convertToType(data['policy_ids'], ['String']);
            }
            if (data.hasOwnProperty('registry')) {
                obj['registry'] = ApiClient.convertToType(data['registry'], 'String');
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = ApiClient.convertToType(data['repository'], 'String');
            }
            if (data.hasOwnProperty('whitelist_ids')) {
                obj['whitelist_ids'] = ApiClient.convertToType(data['whitelist_ids'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MappingRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MappingRule</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MappingRule.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          ImageRef.validateJSON(data['image']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['policy_id'] && !(typeof data['policy_id'] === 'string' || data['policy_id'] instanceof String)) {
            throw new Error("Expected the field `policy_id` to be a primitive type in the JSON string but got " + data['policy_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['policy_ids'])) {
            throw new Error("Expected the field `policy_ids` to be an array in the JSON data but got " + data['policy_ids']);
        }
        // ensure the json data is a string
        if (data['registry'] && !(typeof data['registry'] === 'string' || data['registry'] instanceof String)) {
            throw new Error("Expected the field `registry` to be a primitive type in the JSON string but got " + data['registry']);
        }
        // ensure the json data is a string
        if (data['repository'] && !(typeof data['repository'] === 'string' || data['repository'] instanceof String)) {
            throw new Error("Expected the field `repository` to be a primitive type in the JSON string but got " + data['repository']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['whitelist_ids'])) {
            throw new Error("Expected the field `whitelist_ids` to be an array in the JSON data but got " + data['whitelist_ids']);
        }

        return true;
    }


}

MappingRule.RequiredProperties = ["image", "name", "registry", "repository"];

/**
 * @member {String} id
 */
MappingRule.prototype['id'] = undefined;

/**
 * @member {module:model/ImageRef} image
 */
MappingRule.prototype['image'] = undefined;

/**
 * @member {String} name
 */
MappingRule.prototype['name'] = undefined;

/**
 * Optional single policy to evalute, if set will override any value in policy_ids, for backwards compatibility. Generally, policy_ids should be used even with a array of length 1.
 * @member {String} policy_id
 */
MappingRule.prototype['policy_id'] = undefined;

/**
 * List of policyIds to evaluate in order, to completion
 * @member {Array.<String>} policy_ids
 */
MappingRule.prototype['policy_ids'] = undefined;

/**
 * @member {String} registry
 */
MappingRule.prototype['registry'] = undefined;

/**
 * @member {String} repository
 */
MappingRule.prototype['repository'] = undefined;

/**
 * @member {Array.<String>} whitelist_ids
 */
MappingRule.prototype['whitelist_ids'] = undefined;






export default MappingRule;

