/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImportPackageRelationship model module.
 * @module model/ImportPackageRelationship
 * @version 0.1.20
 */
class ImportPackageRelationship {
    /**
     * Constructs a new <code>ImportPackageRelationship</code>.
     * @alias module:model/ImportPackageRelationship
     * @extends Object
     * @param child {String} 
     * @param parent {String} 
     * @param type {String} 
     */
    constructor(child, parent, type) { 
        
        ImportPackageRelationship.initialize(this, child, parent, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, child, parent, type) { 
        obj['child'] = child;
        obj['parent'] = parent;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ImportPackageRelationship</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImportPackageRelationship} obj Optional instance to populate.
     * @return {module:model/ImportPackageRelationship} The populated <code>ImportPackageRelationship</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImportPackageRelationship();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('child')) {
                obj['child'] = ApiClient.convertToType(data['child'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': Object});
            }
            if (data.hasOwnProperty('parent')) {
                obj['parent'] = ApiClient.convertToType(data['parent'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImportPackageRelationship</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImportPackageRelationship</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImportPackageRelationship.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['child'] && !(typeof data['child'] === 'string' || data['child'] instanceof String)) {
            throw new Error("Expected the field `child` to be a primitive type in the JSON string but got " + data['child']);
        }
        // ensure the json data is a string
        if (data['parent'] && !(typeof data['parent'] === 'string' || data['parent'] instanceof String)) {
            throw new Error("Expected the field `parent` to be a primitive type in the JSON string but got " + data['parent']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

ImportPackageRelationship.RequiredProperties = ["child", "parent", "type"];

/**
 * @member {String} child
 */
ImportPackageRelationship.prototype['child'] = undefined;

/**
 * @member {Object.<String, Object>} metadata
 */
ImportPackageRelationship.prototype['metadata'] = undefined;

/**
 * @member {String} parent
 */
ImportPackageRelationship.prototype['parent'] = undefined;

/**
 * @member {String} type
 */
ImportPackageRelationship.prototype['type'] = undefined;






export default ImportPackageRelationship;

