/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImportPackageLocation from './ImportPackageLocation';

/**
 * The ImportPackage model module.
 * @module model/ImportPackage
 * @version 0.1.20
 */
class ImportPackage {
    /**
     * Constructs a new <code>ImportPackage</code>.
     * @alias module:model/ImportPackage
     * @extends Object
     * @param cpes {Array.<String>} 
     * @param language {String} 
     * @param licenses {Array.<String>} 
     * @param locations {Array.<module:model/ImportPackageLocation>} 
     * @param metadataType {String} 
     * @param name {String} 
     * @param type {String} 
     * @param version {String} 
     */
    constructor(cpes, language, licenses, locations, metadataType, name, type, version) { 
        
        ImportPackage.initialize(this, cpes, language, licenses, locations, metadataType, name, type, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cpes, language, licenses, locations, metadataType, name, type, version) { 
        obj['cpes'] = cpes;
        obj['language'] = language;
        obj['licenses'] = licenses;
        obj['locations'] = locations;
        obj['metadataType'] = metadataType;
        obj['name'] = name;
        obj['type'] = type;
        obj['version'] = version;
    }

    /**
     * Constructs a <code>ImportPackage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImportPackage} obj Optional instance to populate.
     * @return {module:model/ImportPackage} The populated <code>ImportPackage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImportPackage();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('cpes')) {
                obj['cpes'] = ApiClient.convertToType(data['cpes'], ['String']);
            }
            if (data.hasOwnProperty('foundBy')) {
                obj['foundBy'] = ApiClient.convertToType(data['foundBy'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('licenses')) {
                obj['licenses'] = ApiClient.convertToType(data['licenses'], ['String']);
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], [ImportPackageLocation]);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('metadataType')) {
                obj['metadataType'] = ApiClient.convertToType(data['metadataType'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('purl')) {
                obj['purl'] = ApiClient.convertToType(data['purl'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImportPackage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImportPackage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImportPackage.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['cpes'])) {
            throw new Error("Expected the field `cpes` to be an array in the JSON data but got " + data['cpes']);
        }
        // ensure the json data is a string
        if (data['foundBy'] && !(typeof data['foundBy'] === 'string' || data['foundBy'] instanceof String)) {
            throw new Error("Expected the field `foundBy` to be a primitive type in the JSON string but got " + data['foundBy']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['licenses'])) {
            throw new Error("Expected the field `licenses` to be an array in the JSON data but got " + data['licenses']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['locations'])) {
            throw new Error("Expected the field `locations` to be an array in the JSON data but got " + data['locations']);
        }
        // ensure the json data is a string
        if (data['metadataType'] && !(typeof data['metadataType'] === 'string' || data['metadataType'] instanceof String)) {
            throw new Error("Expected the field `metadataType` to be a primitive type in the JSON string but got " + data['metadataType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['purl'] && !(typeof data['purl'] === 'string' || data['purl'] instanceof String)) {
            throw new Error("Expected the field `purl` to be a primitive type in the JSON string but got " + data['purl']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}

ImportPackage.RequiredProperties = ["cpes", "language", "licenses", "locations", "metadataType", "name", "type", "version"];

/**
 * @member {Array.<String>} cpes
 */
ImportPackage.prototype['cpes'] = undefined;

/**
 * @member {String} foundBy
 */
ImportPackage.prototype['foundBy'] = undefined;

/**
 * @member {String} id
 */
ImportPackage.prototype['id'] = undefined;

/**
 * @member {String} language
 */
ImportPackage.prototype['language'] = undefined;

/**
 * @member {Array.<String>} licenses
 */
ImportPackage.prototype['licenses'] = undefined;

/**
 * @member {Array.<module:model/ImportPackageLocation>} locations
 */
ImportPackage.prototype['locations'] = undefined;

/**
 * @member {Object} metadata
 */
ImportPackage.prototype['metadata'] = undefined;

/**
 * @member {String} metadataType
 */
ImportPackage.prototype['metadataType'] = undefined;

/**
 * @member {String} name
 */
ImportPackage.prototype['name'] = undefined;

/**
 * @member {String} purl
 */
ImportPackage.prototype['purl'] = undefined;

/**
 * @member {String} type
 */
ImportPackage.prototype['type'] = undefined;

/**
 * @member {String} version
 */
ImportPackage.prototype['version'] = undefined;






export default ImportPackage;

