/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GroupSyncResult from './GroupSyncResult';

/**
 * The FeedSyncResult model module.
 * @module model/FeedSyncResult
 * @version 0.1.20
 */
class FeedSyncResult {
    /**
     * Constructs a new <code>FeedSyncResult</code>.
     * The result of a sync of a single feed
     * @alias module:model/FeedSyncResult
     */
    constructor() { 
        
        FeedSyncResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FeedSyncResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeedSyncResult} obj Optional instance to populate.
     * @return {module:model/FeedSyncResult} The populated <code>FeedSyncResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeedSyncResult();

            if (data.hasOwnProperty('feed')) {
                obj['feed'] = ApiClient.convertToType(data['feed'], 'String');
            }
            if (data.hasOwnProperty('groups')) {
                obj['groups'] = ApiClient.convertToType(data['groups'], [GroupSyncResult]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('total_time_seconds')) {
                obj['total_time_seconds'] = ApiClient.convertToType(data['total_time_seconds'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeedSyncResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeedSyncResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['feed'] && !(typeof data['feed'] === 'string' || data['feed'] instanceof String)) {
            throw new Error("Expected the field `feed` to be a primitive type in the JSON string but got " + data['feed']);
        }
        if (data['groups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['groups'])) {
                throw new Error("Expected the field `groups` to be an array in the JSON data but got " + data['groups']);
            }
            // validate the optional field `groups` (array)
            for (const item of data['groups']) {
                GroupSyncResult.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * The name of the feed synced
 * @member {String} feed
 */
FeedSyncResult.prototype['feed'] = undefined;

/**
 * Array of group sync results
 * @member {Array.<module:model/GroupSyncResult>} groups
 */
FeedSyncResult.prototype['groups'] = undefined;

/**
 * The result of the sync operations, either co
 * @member {module:model/FeedSyncResult.StatusEnum} status
 */
FeedSyncResult.prototype['status'] = undefined;

/**
 * The duratin, in seconds, of the sync of the feed, the sum of all the group syncs
 * @member {Number} total_time_seconds
 */
FeedSyncResult.prototype['total_time_seconds'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
FeedSyncResult['StatusEnum'] = {

    /**
     * value: "success"
     * @const
     */
    "success": "success",

    /**
     * value: "failure"
     * @const
     */
    "failure": "failure"
};



export default FeedSyncResult;

