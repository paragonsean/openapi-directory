/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TriggerParamSpec model module.
 * @module model/TriggerParamSpec
 * @version 0.1.20
 */
class TriggerParamSpec {
    /**
     * Constructs a new <code>TriggerParamSpec</code>.
     * @alias module:model/TriggerParamSpec
     */
    constructor() { 
        
        TriggerParamSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TriggerParamSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TriggerParamSpec} obj Optional instance to populate.
     * @return {module:model/TriggerParamSpec} The populated <code>TriggerParamSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TriggerParamSpec();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('example')) {
                obj['example'] = ApiClient.convertToType(data['example'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('superceded_by')) {
                obj['superceded_by'] = ApiClient.convertToType(data['superceded_by'], 'String');
            }
            if (data.hasOwnProperty('validator')) {
                obj['validator'] = ApiClient.convertToType(data['validator'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TriggerParamSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TriggerParamSpec</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['example'] && !(typeof data['example'] === 'string' || data['example'] instanceof String)) {
            throw new Error("Expected the field `example` to be a primitive type in the JSON string but got " + data['example']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['superceded_by'] && !(typeof data['superceded_by'] === 'string' || data['superceded_by'] instanceof String)) {
            throw new Error("Expected the field `superceded_by` to be a primitive type in the JSON string but got " + data['superceded_by']);
        }

        return true;
    }


}



/**
 * @member {String} description
 */
TriggerParamSpec.prototype['description'] = undefined;

/**
 * An example value for the parameter (encoded as a string if the parameter is an object or list type)
 * @member {String} example
 */
TriggerParamSpec.prototype['example'] = undefined;

/**
 * Parameter name as it appears in policy document
 * @member {String} name
 */
TriggerParamSpec.prototype['name'] = undefined;

/**
 * Is this a required parameter or optional
 * @member {Boolean} required
 */
TriggerParamSpec.prototype['required'] = undefined;

/**
 * State of the trigger parameter
 * @member {module:model/TriggerParamSpec.StateEnum} state
 */
TriggerParamSpec.prototype['state'] = undefined;

/**
 * The name of another trigger that supercedes this on functionally if this is deprecated
 * @member {String} superceded_by
 */
TriggerParamSpec.prototype['superceded_by'] = undefined;

/**
 * If present, a definition for validation of input. Typically a jsonschema object that can be used to validate an input against.
 * @member {Object} validator
 */
TriggerParamSpec.prototype['validator'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
TriggerParamSpec['StateEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "deprecated"
     * @const
     */
    "deprecated": "deprecated",

    /**
     * value: "eol"
     * @const
     */
    "eol": "eol"
};



export default TriggerParamSpec;

