/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TagEntry from './TagEntry';

/**
 * The ArchivedAnalysis model module.
 * @module model/ArchivedAnalysis
 * @version 0.1.20
 */
class ArchivedAnalysis {
    /**
     * Constructs a new <code>ArchivedAnalysis</code>.
     * @alias module:model/ArchivedAnalysis
     */
    constructor() { 
        
        ArchivedAnalysis.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ArchivedAnalysis</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArchivedAnalysis} obj Optional instance to populate.
     * @return {module:model/ArchivedAnalysis} The populated <code>ArchivedAnalysis</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArchivedAnalysis();

            if (data.hasOwnProperty('analyzed_at')) {
                obj['analyzed_at'] = ApiClient.convertToType(data['analyzed_at'], 'Date');
            }
            if (data.hasOwnProperty('annotations')) {
                obj['annotations'] = ApiClient.convertToType(data['annotations'], Object);
            }
            if (data.hasOwnProperty('archive_size_bytes')) {
                obj['archive_size_bytes'] = ApiClient.convertToType(data['archive_size_bytes'], 'Number');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('imageDigest')) {
                obj['imageDigest'] = ApiClient.convertToType(data['imageDigest'], 'String');
            }
            if (data.hasOwnProperty('image_detail')) {
                obj['image_detail'] = ApiClient.convertToType(data['image_detail'], [TagEntry]);
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('parentDigest')) {
                obj['parentDigest'] = ApiClient.convertToType(data['parentDigest'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArchivedAnalysis</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArchivedAnalysis</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['imageDigest'] && !(typeof data['imageDigest'] === 'string' || data['imageDigest'] instanceof String)) {
            throw new Error("Expected the field `imageDigest` to be a primitive type in the JSON string but got " + data['imageDigest']);
        }
        if (data['image_detail']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['image_detail'])) {
                throw new Error("Expected the field `image_detail` to be an array in the JSON data but got " + data['image_detail']);
            }
            // validate the optional field `image_detail` (array)
            for (const item of data['image_detail']) {
                TagEntry.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['parentDigest'] && !(typeof data['parentDigest'] === 'string' || data['parentDigest'] instanceof String)) {
            throw new Error("Expected the field `parentDigest` to be a primitive type in the JSON string but got " + data['parentDigest']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * @member {Date} analyzed_at
 */
ArchivedAnalysis.prototype['analyzed_at'] = undefined;

/**
 * User provided annotations as key-value pairs
 * @member {Object} annotations
 */
ArchivedAnalysis.prototype['annotations'] = undefined;

/**
 * The size, in bytes, of the analysis archive file
 * @member {Number} archive_size_bytes
 */
ArchivedAnalysis.prototype['archive_size_bytes'] = undefined;

/**
 * @member {Date} created_at
 */
ArchivedAnalysis.prototype['created_at'] = undefined;

/**
 * The image digest (digest of the manifest describing the image, per docker spec)
 * @member {String} imageDigest
 */
ArchivedAnalysis.prototype['imageDigest'] = undefined;

/**
 * List of tags associated with the image digest
 * @member {Array.<module:model/TagEntry>} image_detail
 */
ArchivedAnalysis.prototype['image_detail'] = undefined;

/**
 * @member {Date} last_updated
 */
ArchivedAnalysis.prototype['last_updated'] = undefined;

/**
 * The digest of a parent manifest (for manifest-list images)
 * @member {String} parentDigest
 */
ArchivedAnalysis.prototype['parentDigest'] = undefined;

/**
 * The archival status
 * @member {module:model/ArchivedAnalysis.StatusEnum} status
 */
ArchivedAnalysis.prototype['status'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ArchivedAnalysis['StatusEnum'] = {

    /**
     * value: "archiving"
     * @const
     */
    "archiving": "archiving",

    /**
     * value: "archived"
     * @const
     */
    "archived": "archived",

    /**
     * value: "deleting"
     * @const
     */
    "deleting": "deleting",

    /**
     * value: "deleted"
     * @const
     */
    "deleted": "deleted"
};



export default ArchivedAnalysis;

