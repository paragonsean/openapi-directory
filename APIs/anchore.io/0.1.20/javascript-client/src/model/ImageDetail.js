/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImageDetail model module.
 * @module model/ImageDetail
 * @version 0.1.20
 */
class ImageDetail {
    /**
     * Constructs a new <code>ImageDetail</code>.
     * A metadata detail record for a specific image. Multiple detail records may map a single catalog image.
     * @alias module:model/ImageDetail
     */
    constructor() { 
        
        ImageDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImageDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageDetail} obj Optional instance to populate.
     * @return {module:model/ImageDetail} The populated <code>ImageDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageDetail();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('dockerfile')) {
                obj['dockerfile'] = ApiClient.convertToType(data['dockerfile'], 'String');
            }
            if (data.hasOwnProperty('fulldigest')) {
                obj['fulldigest'] = ApiClient.convertToType(data['fulldigest'], 'String');
            }
            if (data.hasOwnProperty('fulltag')) {
                obj['fulltag'] = ApiClient.convertToType(data['fulltag'], 'String');
            }
            if (data.hasOwnProperty('imageDigest')) {
                obj['imageDigest'] = ApiClient.convertToType(data['imageDigest'], 'String');
            }
            if (data.hasOwnProperty('imageId')) {
                obj['imageId'] = ApiClient.convertToType(data['imageId'], 'String');
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('registry')) {
                obj['registry'] = ApiClient.convertToType(data['registry'], 'String');
            }
            if (data.hasOwnProperty('repo')) {
                obj['repo'] = ApiClient.convertToType(data['repo'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageDetail</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dockerfile'] && !(typeof data['dockerfile'] === 'string' || data['dockerfile'] instanceof String)) {
            throw new Error("Expected the field `dockerfile` to be a primitive type in the JSON string but got " + data['dockerfile']);
        }
        // ensure the json data is a string
        if (data['fulldigest'] && !(typeof data['fulldigest'] === 'string' || data['fulldigest'] instanceof String)) {
            throw new Error("Expected the field `fulldigest` to be a primitive type in the JSON string but got " + data['fulldigest']);
        }
        // ensure the json data is a string
        if (data['fulltag'] && !(typeof data['fulltag'] === 'string' || data['fulltag'] instanceof String)) {
            throw new Error("Expected the field `fulltag` to be a primitive type in the JSON string but got " + data['fulltag']);
        }
        // ensure the json data is a string
        if (data['imageDigest'] && !(typeof data['imageDigest'] === 'string' || data['imageDigest'] instanceof String)) {
            throw new Error("Expected the field `imageDigest` to be a primitive type in the JSON string but got " + data['imageDigest']);
        }
        // ensure the json data is a string
        if (data['imageId'] && !(typeof data['imageId'] === 'string' || data['imageId'] instanceof String)) {
            throw new Error("Expected the field `imageId` to be a primitive type in the JSON string but got " + data['imageId']);
        }
        // ensure the json data is a string
        if (data['registry'] && !(typeof data['registry'] === 'string' || data['registry'] instanceof String)) {
            throw new Error("Expected the field `registry` to be a primitive type in the JSON string but got " + data['registry']);
        }
        // ensure the json data is a string
        if (data['repo'] && !(typeof data['repo'] === 'string' || data['repo'] instanceof String)) {
            throw new Error("Expected the field `repo` to be a primitive type in the JSON string but got " + data['repo']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * @member {Date} created_at
 */
ImageDetail.prototype['created_at'] = undefined;

/**
 * @member {String} dockerfile
 */
ImageDetail.prototype['dockerfile'] = undefined;

/**
 * Full docker-pullable digest string including the registry url and repository necessary get the image
 * @member {String} fulldigest
 */
ImageDetail.prototype['fulldigest'] = undefined;

/**
 * Full docker-pullable tag string referencing the image
 * @member {String} fulltag
 */
ImageDetail.prototype['fulltag'] = undefined;

/**
 * The parent Anchore Image record to which this detail maps
 * @member {String} imageDigest
 */
ImageDetail.prototype['imageDigest'] = undefined;

/**
 * @member {String} imageId
 */
ImageDetail.prototype['imageId'] = undefined;

/**
 * @member {Date} last_updated
 */
ImageDetail.prototype['last_updated'] = undefined;

/**
 * @member {String} registry
 */
ImageDetail.prototype['registry'] = undefined;

/**
 * @member {String} repo
 */
ImageDetail.prototype['repo'] = undefined;

/**
 * @member {String} userId
 */
ImageDetail.prototype['userId'] = undefined;






export default ImageDetail;

