/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageSelectionRule from './ImageSelectionRule';
import MappingRule from './MappingRule';
import Policy from './Policy';
import Whitelist from './Whitelist';

/**
 * The PolicyBundle model module.
 * @module model/PolicyBundle
 * @version 0.1.20
 */
class PolicyBundle {
    /**
     * Constructs a new <code>PolicyBundle</code>.
     * A bundle containing a set of policies, whitelists, and rules for mapping them to specific images
     * @alias module:model/PolicyBundle
     * @param id {String} Id of the bundle
     * @param mappings {Array.<module:model/MappingRule>} Mapping rules for defining which policy and whitelist(s) to apply to an image based on a match of the image tag or id. Evaluated in order.
     * @param policies {Array.<module:model/Policy>} Policies which define the go/stop/warn status of an image using rule matches on image properties
     * @param version {String} Version id for this bundle format
     */
    constructor(id, mappings, policies, version) { 
        
        PolicyBundle.initialize(this, id, mappings, policies, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, mappings, policies, version) { 
        obj['id'] = id;
        obj['mappings'] = mappings;
        obj['policies'] = policies;
        obj['version'] = version;
    }

    /**
     * Constructs a <code>PolicyBundle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PolicyBundle} obj Optional instance to populate.
     * @return {module:model/PolicyBundle} The populated <code>PolicyBundle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PolicyBundle();

            if (data.hasOwnProperty('blacklisted_images')) {
                obj['blacklisted_images'] = ApiClient.convertToType(data['blacklisted_images'], [ImageSelectionRule]);
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('mappings')) {
                obj['mappings'] = ApiClient.convertToType(data['mappings'], [MappingRule]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('policies')) {
                obj['policies'] = ApiClient.convertToType(data['policies'], [Policy]);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('whitelisted_images')) {
                obj['whitelisted_images'] = ApiClient.convertToType(data['whitelisted_images'], [ImageSelectionRule]);
            }
            if (data.hasOwnProperty('whitelists')) {
                obj['whitelists'] = ApiClient.convertToType(data['whitelists'], [Whitelist]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PolicyBundle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PolicyBundle</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PolicyBundle.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['blacklisted_images']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['blacklisted_images'])) {
                throw new Error("Expected the field `blacklisted_images` to be an array in the JSON data but got " + data['blacklisted_images']);
            }
            // validate the optional field `blacklisted_images` (array)
            for (const item of data['blacklisted_images']) {
                ImageSelectionRule.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['mappings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mappings'])) {
                throw new Error("Expected the field `mappings` to be an array in the JSON data but got " + data['mappings']);
            }
            // validate the optional field `mappings` (array)
            for (const item of data['mappings']) {
                MappingRule.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['policies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['policies'])) {
                throw new Error("Expected the field `policies` to be an array in the JSON data but got " + data['policies']);
            }
            // validate the optional field `policies` (array)
            for (const item of data['policies']) {
                Policy.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        if (data['whitelisted_images']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['whitelisted_images'])) {
                throw new Error("Expected the field `whitelisted_images` to be an array in the JSON data but got " + data['whitelisted_images']);
            }
            // validate the optional field `whitelisted_images` (array)
            for (const item of data['whitelisted_images']) {
                ImageSelectionRule.validateJSON(item);
            };
        }
        if (data['whitelists']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['whitelists'])) {
                throw new Error("Expected the field `whitelists` to be an array in the JSON data but got " + data['whitelists']);
            }
            // validate the optional field `whitelists` (array)
            for (const item of data['whitelists']) {
                Whitelist.validateJSON(item);
            };
        }

        return true;
    }


}

PolicyBundle.RequiredProperties = ["id", "mappings", "policies", "version"];

/**
 * List of mapping rules that define which images should always result in a STOP/FAIL policy result regardless of policy content or presence in whitelisted_images
 * @member {Array.<module:model/ImageSelectionRule>} blacklisted_images
 */
PolicyBundle.prototype['blacklisted_images'] = undefined;

/**
 * Description of the bundle, human readable
 * @member {String} comment
 */
PolicyBundle.prototype['comment'] = undefined;

/**
 * Id of the bundle
 * @member {String} id
 */
PolicyBundle.prototype['id'] = undefined;

/**
 * Mapping rules for defining which policy and whitelist(s) to apply to an image based on a match of the image tag or id. Evaluated in order.
 * @member {Array.<module:model/MappingRule>} mappings
 */
PolicyBundle.prototype['mappings'] = undefined;

/**
 * Human readable name for the bundle
 * @member {String} name
 */
PolicyBundle.prototype['name'] = undefined;

/**
 * Policies which define the go/stop/warn status of an image using rule matches on image properties
 * @member {Array.<module:model/Policy>} policies
 */
PolicyBundle.prototype['policies'] = undefined;

/**
 * Version id for this bundle format
 * @member {String} version
 */
PolicyBundle.prototype['version'] = undefined;

/**
 * List of mapping rules that define which images should always be passed (unless also on the blacklist), regardless of policy result.
 * @member {Array.<module:model/ImageSelectionRule>} whitelisted_images
 */
PolicyBundle.prototype['whitelisted_images'] = undefined;

/**
 * Whitelists which define which policy matches to disregard explicitly in the final policy decision
 * @member {Array.<module:model/Whitelist>} whitelists
 */
PolicyBundle.prototype['whitelists'] = undefined;






export default PolicyBundle;

