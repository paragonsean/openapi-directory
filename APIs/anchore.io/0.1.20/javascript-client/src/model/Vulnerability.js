/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NvdDataObject from './NvdDataObject';
import VendorDataObject from './VendorDataObject';

/**
 * The Vulnerability model module.
 * @module model/Vulnerability
 * @version 0.1.20
 */
class Vulnerability {
    /**
     * Constructs a new <code>Vulnerability</code>.
     * @alias module:model/Vulnerability
     */
    constructor() { 
        
        Vulnerability.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Vulnerability</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Vulnerability} obj Optional instance to populate.
     * @return {module:model/Vulnerability} The populated <code>Vulnerability</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Vulnerability();

            if (data.hasOwnProperty('feed')) {
                obj['feed'] = ApiClient.convertToType(data['feed'], 'String');
            }
            if (data.hasOwnProperty('feed_group')) {
                obj['feed_group'] = ApiClient.convertToType(data['feed_group'], 'String');
            }
            if (data.hasOwnProperty('fix')) {
                obj['fix'] = ApiClient.convertToType(data['fix'], 'String');
            }
            if (data.hasOwnProperty('nvd_data')) {
                obj['nvd_data'] = ApiClient.convertToType(data['nvd_data'], [NvdDataObject]);
            }
            if (data.hasOwnProperty('package')) {
                obj['package'] = ApiClient.convertToType(data['package'], 'String');
            }
            if (data.hasOwnProperty('package_cpe')) {
                obj['package_cpe'] = ApiClient.convertToType(data['package_cpe'], 'String');
            }
            if (data.hasOwnProperty('package_name')) {
                obj['package_name'] = ApiClient.convertToType(data['package_name'], 'String');
            }
            if (data.hasOwnProperty('package_path')) {
                obj['package_path'] = ApiClient.convertToType(data['package_path'], 'String');
            }
            if (data.hasOwnProperty('package_type')) {
                obj['package_type'] = ApiClient.convertToType(data['package_type'], 'String');
            }
            if (data.hasOwnProperty('package_version')) {
                obj['package_version'] = ApiClient.convertToType(data['package_version'], 'String');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('vendor_data')) {
                obj['vendor_data'] = ApiClient.convertToType(data['vendor_data'], [VendorDataObject]);
            }
            if (data.hasOwnProperty('vuln')) {
                obj['vuln'] = ApiClient.convertToType(data['vuln'], 'String');
            }
            if (data.hasOwnProperty('will_not_fix')) {
                obj['will_not_fix'] = ApiClient.convertToType(data['will_not_fix'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Vulnerability</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Vulnerability</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['feed'] && !(typeof data['feed'] === 'string' || data['feed'] instanceof String)) {
            throw new Error("Expected the field `feed` to be a primitive type in the JSON string but got " + data['feed']);
        }
        // ensure the json data is a string
        if (data['feed_group'] && !(typeof data['feed_group'] === 'string' || data['feed_group'] instanceof String)) {
            throw new Error("Expected the field `feed_group` to be a primitive type in the JSON string but got " + data['feed_group']);
        }
        // ensure the json data is a string
        if (data['fix'] && !(typeof data['fix'] === 'string' || data['fix'] instanceof String)) {
            throw new Error("Expected the field `fix` to be a primitive type in the JSON string but got " + data['fix']);
        }
        if (data['nvd_data']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nvd_data'])) {
                throw new Error("Expected the field `nvd_data` to be an array in the JSON data but got " + data['nvd_data']);
            }
            // validate the optional field `nvd_data` (array)
            for (const item of data['nvd_data']) {
                NvdDataObject.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['package'] && !(typeof data['package'] === 'string' || data['package'] instanceof String)) {
            throw new Error("Expected the field `package` to be a primitive type in the JSON string but got " + data['package']);
        }
        // ensure the json data is a string
        if (data['package_cpe'] && !(typeof data['package_cpe'] === 'string' || data['package_cpe'] instanceof String)) {
            throw new Error("Expected the field `package_cpe` to be a primitive type in the JSON string but got " + data['package_cpe']);
        }
        // ensure the json data is a string
        if (data['package_name'] && !(typeof data['package_name'] === 'string' || data['package_name'] instanceof String)) {
            throw new Error("Expected the field `package_name` to be a primitive type in the JSON string but got " + data['package_name']);
        }
        // ensure the json data is a string
        if (data['package_path'] && !(typeof data['package_path'] === 'string' || data['package_path'] instanceof String)) {
            throw new Error("Expected the field `package_path` to be a primitive type in the JSON string but got " + data['package_path']);
        }
        // ensure the json data is a string
        if (data['package_type'] && !(typeof data['package_type'] === 'string' || data['package_type'] instanceof String)) {
            throw new Error("Expected the field `package_type` to be a primitive type in the JSON string but got " + data['package_type']);
        }
        // ensure the json data is a string
        if (data['package_version'] && !(typeof data['package_version'] === 'string' || data['package_version'] instanceof String)) {
            throw new Error("Expected the field `package_version` to be a primitive type in the JSON string but got " + data['package_version']);
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        if (data['vendor_data']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['vendor_data'])) {
                throw new Error("Expected the field `vendor_data` to be an array in the JSON data but got " + data['vendor_data']);
            }
            // validate the optional field `vendor_data` (array)
            for (const item of data['vendor_data']) {
                VendorDataObject.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['vuln'] && !(typeof data['vuln'] === 'string' || data['vuln'] instanceof String)) {
            throw new Error("Expected the field `vuln` to be a primitive type in the JSON string but got " + data['vuln']);
        }

        return true;
    }


}



/**
 * The name of the feed where vulnerability match was made
 * @member {String} feed
 */
Vulnerability.prototype['feed'] = undefined;

/**
 * The name of the feed group where vulnerability match was made
 * @member {String} feed_group
 */
Vulnerability.prototype['feed_group'] = undefined;

/**
 * The package containing a fix, if available
 * @member {String} fix
 */
Vulnerability.prototype['fix'] = undefined;

/**
 * List of Nvd Data objects
 * @member {Array.<module:model/NvdDataObject>} nvd_data
 */
Vulnerability.prototype['nvd_data'] = undefined;

/**
 * The package name and version that are vulnerable in the image
 * @member {String} package
 */
Vulnerability.prototype['package'] = undefined;

/**
 * The CPE string (if applicable) describing the package to vulnerability match
 * @member {String} package_cpe
 */
Vulnerability.prototype['package_cpe'] = undefined;

/**
 * The name of the vulnerable package artifact
 * @member {String} package_name
 */
Vulnerability.prototype['package_name'] = undefined;

/**
 * The location (if applicable) of the vulnerable package in the container filesystem
 * @member {String} package_path
 */
Vulnerability.prototype['package_path'] = undefined;

/**
 * The type of vulnerable package
 * @member {String} package_type
 */
Vulnerability.prototype['package_type'] = undefined;

/**
 * The version of the vulnerable package artifact
 * @member {String} package_version
 */
Vulnerability.prototype['package_version'] = undefined;

/**
 * The severity of the vulnerability
 * @member {String} severity
 */
Vulnerability.prototype['severity'] = undefined;

/**
 * The url for more information about the vulnerability
 * @member {String} url
 */
Vulnerability.prototype['url'] = undefined;

/**
 * List of Vendor Data objects
 * @member {Array.<module:model/VendorDataObject>} vendor_data
 */
Vulnerability.prototype['vendor_data'] = undefined;

/**
 * The vulnerability identifier, such as CVE-2017-100, or RHSA-2017123
 * @member {String} vuln
 */
Vulnerability.prototype['vuln'] = undefined;

/**
 * Whether a vendor will fix or not fix the vulnerability
 * @member {Boolean} will_not_fix
 */
Vulnerability.prototype['will_not_fix'] = undefined;






export default Vulnerability;

