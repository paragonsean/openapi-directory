/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContentPackageResponseContentInner model module.
 * @module model/ContentPackageResponseContentInner
 * @version 0.1.20
 */
class ContentPackageResponseContentInner {
    /**
     * Constructs a new <code>ContentPackageResponseContentInner</code>.
     * @alias module:model/ContentPackageResponseContentInner
     */
    constructor() { 
        
        ContentPackageResponseContentInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContentPackageResponseContentInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContentPackageResponseContentInner} obj Optional instance to populate.
     * @return {module:model/ContentPackageResponseContentInner} The populated <code>ContentPackageResponseContentInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContentPackageResponseContentInner();

            if (data.hasOwnProperty('cpes')) {
                obj['cpes'] = ApiClient.convertToType(data['cpes'], ['String']);
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = ApiClient.convertToType(data['license'], 'String');
            }
            if (data.hasOwnProperty('licenses')) {
                obj['licenses'] = ApiClient.convertToType(data['licenses'], ['String']);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('origin')) {
                obj['origin'] = ApiClient.convertToType(data['origin'], 'String');
            }
            if (data.hasOwnProperty('package')) {
                obj['package'] = ApiClient.convertToType(data['package'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContentPackageResponseContentInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContentPackageResponseContentInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['cpes'])) {
            throw new Error("Expected the field `cpes` to be an array in the JSON data but got " + data['cpes']);
        }
        // ensure the json data is a string
        if (data['license'] && !(typeof data['license'] === 'string' || data['license'] instanceof String)) {
            throw new Error("Expected the field `license` to be a primitive type in the JSON string but got " + data['license']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['licenses'])) {
            throw new Error("Expected the field `licenses` to be an array in the JSON data but got " + data['licenses']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['origin'] && !(typeof data['origin'] === 'string' || data['origin'] instanceof String)) {
            throw new Error("Expected the field `origin` to be a primitive type in the JSON string but got " + data['origin']);
        }
        // ensure the json data is a string
        if (data['package'] && !(typeof data['package'] === 'string' || data['package'] instanceof String)) {
            throw new Error("Expected the field `package` to be a primitive type in the JSON string but got " + data['package']);
        }
        // ensure the json data is a string
        if (data['size'] && !(typeof data['size'] === 'string' || data['size'] instanceof String)) {
            throw new Error("Expected the field `size` to be a primitive type in the JSON string but got " + data['size']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * A list of Common Platform Enumerations that may uniquely identify the package
 * @member {Array.<String>} cpes
 */
ContentPackageResponseContentInner.prototype['cpes'] = undefined;

/**
 * Deprecated in favor of the 'licenses' field\"
 * @member {String} license
 */
ContentPackageResponseContentInner.prototype['license'] = undefined;

/**
 * @member {Array.<String>} licenses
 */
ContentPackageResponseContentInner.prototype['licenses'] = undefined;

/**
 * @member {String} location
 */
ContentPackageResponseContentInner.prototype['location'] = undefined;

/**
 * @member {String} origin
 */
ContentPackageResponseContentInner.prototype['origin'] = undefined;

/**
 * @member {String} package
 */
ContentPackageResponseContentInner.prototype['package'] = undefined;

/**
 * @member {String} size
 */
ContentPackageResponseContentInner.prototype['size'] = undefined;

/**
 * @member {String} type
 */
ContentPackageResponseContentInner.prototype['type'] = undefined;

/**
 * @member {String} version
 */
ContentPackageResponseContentInner.prototype['version'] = undefined;






export default ContentPackageResponseContentInner;

