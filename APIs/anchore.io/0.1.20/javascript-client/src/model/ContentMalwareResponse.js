/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MalwareScan from './MalwareScan';

/**
 * The ContentMalwareResponse model module.
 * @module model/ContentMalwareResponse
 * @version 0.1.20
 */
class ContentMalwareResponse {
    /**
     * Constructs a new <code>ContentMalwareResponse</code>.
     * Malware listing response
     * @alias module:model/ContentMalwareResponse
     */
    constructor() { 
        
        ContentMalwareResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContentMalwareResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContentMalwareResponse} obj Optional instance to populate.
     * @return {module:model/ContentMalwareResponse} The populated <code>ContentMalwareResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContentMalwareResponse();

            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], [MalwareScan]);
            }
            if (data.hasOwnProperty('content_type')) {
                obj['content_type'] = ApiClient.convertToType(data['content_type'], 'String');
            }
            if (data.hasOwnProperty('imageDigest')) {
                obj['imageDigest'] = ApiClient.convertToType(data['imageDigest'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContentMalwareResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContentMalwareResponse</code>.
     */
    static validateJSON(data) {
        if (data['content']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['content'])) {
                throw new Error("Expected the field `content` to be an array in the JSON data but got " + data['content']);
            }
            // validate the optional field `content` (array)
            for (const item of data['content']) {
                MalwareScan.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['content_type'] && !(typeof data['content_type'] === 'string' || data['content_type'] instanceof String)) {
            throw new Error("Expected the field `content_type` to be a primitive type in the JSON string but got " + data['content_type']);
        }
        // ensure the json data is a string
        if (data['imageDigest'] && !(typeof data['imageDigest'] === 'string' || data['imageDigest'] instanceof String)) {
            throw new Error("Expected the field `imageDigest` to be a primitive type in the JSON string but got " + data['imageDigest']);
        }

        return true;
    }


}



/**
 * List of malware scan results, one per scanner configured to run
 * @member {Array.<module:model/MalwareScan>} content
 */
ContentMalwareResponse.prototype['content'] = undefined;

/**
 * @member {String} content_type
 */
ContentMalwareResponse.prototype['content_type'] = undefined;

/**
 * @member {String} imageDigest
 */
ContentMalwareResponse.prototype['imageDigest'] = undefined;






export default ContentMalwareResponse;

