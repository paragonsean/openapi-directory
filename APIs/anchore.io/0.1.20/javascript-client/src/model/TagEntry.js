/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TagEntry model module.
 * @module model/TagEntry
 * @version 0.1.20
 */
class TagEntry {
    /**
     * Constructs a new <code>TagEntry</code>.
     * A docker-pullable tag value as well as deconstructed components
     * @alias module:model/TagEntry
     */
    constructor() { 
        
        TagEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TagEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TagEntry} obj Optional instance to populate.
     * @return {module:model/TagEntry} The populated <code>TagEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TagEntry();

            if (data.hasOwnProperty('detected_at')) {
                obj['detected_at'] = ApiClient.convertToType(data['detected_at'], 'Date');
            }
            if (data.hasOwnProperty('pullstring')) {
                obj['pullstring'] = ApiClient.convertToType(data['pullstring'], 'String');
            }
            if (data.hasOwnProperty('registry')) {
                obj['registry'] = ApiClient.convertToType(data['registry'], 'String');
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = ApiClient.convertToType(data['repository'], 'String');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TagEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TagEntry</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['pullstring'] && !(typeof data['pullstring'] === 'string' || data['pullstring'] instanceof String)) {
            throw new Error("Expected the field `pullstring` to be a primitive type in the JSON string but got " + data['pullstring']);
        }
        // ensure the json data is a string
        if (data['registry'] && !(typeof data['registry'] === 'string' || data['registry'] instanceof String)) {
            throw new Error("Expected the field `registry` to be a primitive type in the JSON string but got " + data['registry']);
        }
        // ensure the json data is a string
        if (data['repository'] && !(typeof data['repository'] === 'string' || data['repository'] instanceof String)) {
            throw new Error("Expected the field `repository` to be a primitive type in the JSON string but got " + data['repository']);
        }
        // ensure the json data is a string
        if (data['tag'] && !(typeof data['tag'] === 'string' || data['tag'] instanceof String)) {
            throw new Error("Expected the field `tag` to be a primitive type in the JSON string but got " + data['tag']);
        }

        return true;
    }


}



/**
 * The timestamp at which the Anchore Engine detected this tag was mapped to the image digest. Does not necessarily indicate when the tag was actually pushed to the registry.
 * @member {Date} detected_at
 */
TagEntry.prototype['detected_at'] = undefined;

/**
 * The pullable string for the tag. E.g. \"docker.io/library/node:latest\"
 * @member {String} pullstring
 */
TagEntry.prototype['pullstring'] = undefined;

/**
 * The registry hostname:port section of the pull string
 * @member {String} registry
 */
TagEntry.prototype['registry'] = undefined;

/**
 * The repository section of the pull string
 * @member {String} repository
 */
TagEntry.prototype['repository'] = undefined;

/**
 * The tag-only section of the pull string
 * @member {String} tag
 */
TagEntry.prototype['tag'] = undefined;






export default TagEntry;

