/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TagEntry from './TagEntry';

/**
 * The ImageReference model module.
 * @module model/ImageReference
 * @version 0.1.20
 */
class ImageReference {
    /**
     * Constructs a new <code>ImageReference</code>.
     * A summary of an image identity, including digest, id (if available), and any tags known to have ever been mapped to the digest
     * @alias module:model/ImageReference
     */
    constructor() { 
        
        ImageReference.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImageReference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageReference} obj Optional instance to populate.
     * @return {module:model/ImageReference} The populated <code>ImageReference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageReference();

            if (data.hasOwnProperty('analyzed_at')) {
                obj['analyzed_at'] = ApiClient.convertToType(data['analyzed_at'], 'String');
            }
            if (data.hasOwnProperty('digest')) {
                obj['digest'] = ApiClient.convertToType(data['digest'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('tag_history')) {
                obj['tag_history'] = ApiClient.convertToType(data['tag_history'], [TagEntry]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageReference</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageReference</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['analyzed_at'] && !(typeof data['analyzed_at'] === 'string' || data['analyzed_at'] instanceof String)) {
            throw new Error("Expected the field `analyzed_at` to be a primitive type in the JSON string but got " + data['analyzed_at']);
        }
        // ensure the json data is a string
        if (data['digest'] && !(typeof data['digest'] === 'string' || data['digest'] instanceof String)) {
            throw new Error("Expected the field `digest` to be a primitive type in the JSON string but got " + data['digest']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['tag_history']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tag_history'])) {
                throw new Error("Expected the field `tag_history` to be an array in the JSON data but got " + data['tag_history']);
            }
            // validate the optional field `tag_history` (array)
            for (const item of data['tag_history']) {
                TagEntry.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Timestamp, in rfc3339 format, indicating when the image state became 'analyzed' in Anchore Engine.
 * @member {String} analyzed_at
 */
ImageReference.prototype['analyzed_at'] = undefined;

/**
 * The image digest
 * @member {String} digest
 */
ImageReference.prototype['digest'] = undefined;

/**
 * The image id if available
 * @member {String} id
 */
ImageReference.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/TagEntry>} tag_history
 */
ImageReference.prototype['tag_history'] = undefined;






export default ImageReference;

