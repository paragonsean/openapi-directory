/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImportDescriptor from './ImportDescriptor';
import ImportDistribution from './ImportDistribution';
import ImportPackage from './ImportPackage';
import ImportPackageRelationship from './ImportPackageRelationship';
import ImportSchema from './ImportSchema';
import ImportSource from './ImportSource';

/**
 * The ImagePackageManifest model module.
 * @module model/ImagePackageManifest
 * @version 0.1.20
 */
class ImagePackageManifest {
    /**
     * Constructs a new <code>ImagePackageManifest</code>.
     * @alias module:model/ImagePackageManifest
     * @extends Object
     * @param artifacts {Array.<module:model/ImportPackage>} 
     * @param distro {module:model/ImportDistribution} 
     * @param source {module:model/ImportSource} 
     */
    constructor(artifacts, distro, source) { 
        
        ImagePackageManifest.initialize(this, artifacts, distro, source);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, artifacts, distro, source) { 
        obj['artifacts'] = artifacts;
        obj['distro'] = distro;
        obj['source'] = source;
    }

    /**
     * Constructs a <code>ImagePackageManifest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImagePackageManifest} obj Optional instance to populate.
     * @return {module:model/ImagePackageManifest} The populated <code>ImagePackageManifest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImagePackageManifest();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('artifactRelationships')) {
                obj['artifactRelationships'] = ApiClient.convertToType(data['artifactRelationships'], [ImportPackageRelationship]);
            }
            if (data.hasOwnProperty('artifacts')) {
                obj['artifacts'] = ApiClient.convertToType(data['artifacts'], [ImportPackage]);
            }
            if (data.hasOwnProperty('descriptor')) {
                obj['descriptor'] = ImportDescriptor.constructFromObject(data['descriptor']);
            }
            if (data.hasOwnProperty('distro')) {
                obj['distro'] = ImportDistribution.constructFromObject(data['distro']);
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = ImportSchema.constructFromObject(data['schema']);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ImportSource.constructFromObject(data['source']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImagePackageManifest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImagePackageManifest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImagePackageManifest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['artifactRelationships'])) {
            throw new Error("Expected the field `artifactRelationships` to be an array in the JSON data but got " + data['artifactRelationships']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['artifacts'])) {
            throw new Error("Expected the field `artifacts` to be an array in the JSON data but got " + data['artifacts']);
        }

        return true;
    }


}

ImagePackageManifest.RequiredProperties = ["artifacts", "distro", "source"];

/**
 * @member {Array.<module:model/ImportPackageRelationship>} artifactRelationships
 */
ImagePackageManifest.prototype['artifactRelationships'] = undefined;

/**
 * @member {Array.<module:model/ImportPackage>} artifacts
 */
ImagePackageManifest.prototype['artifacts'] = undefined;

/**
 * @member {module:model/ImportDescriptor} descriptor
 */
ImagePackageManifest.prototype['descriptor'] = undefined;

/**
 * @member {module:model/ImportDistribution} distro
 */
ImagePackageManifest.prototype['distro'] = undefined;

/**
 * @member {module:model/ImportSchema} schema
 */
ImagePackageManifest.prototype['schema'] = undefined;

/**
 * @member {module:model/ImportSource} source
 */
ImagePackageManifest.prototype['source'] = undefined;






export default ImagePackageManifest;

