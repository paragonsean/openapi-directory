/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EventResponseEventSource model module.
 * @module model/EventResponseEventSource
 * @version 0.1.20
 */
class EventResponseEventSource {
    /**
     * Constructs a new <code>EventResponseEventSource</code>.
     * @alias module:model/EventResponseEventSource
     */
    constructor() { 
        
        EventResponseEventSource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventResponseEventSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventResponseEventSource} obj Optional instance to populate.
     * @return {module:model/EventResponseEventSource} The populated <code>EventResponseEventSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventResponseEventSource();

            if (data.hasOwnProperty('base_url')) {
                obj['base_url'] = ApiClient.convertToType(data['base_url'], 'String');
            }
            if (data.hasOwnProperty('hostid')) {
                obj['hostid'] = ApiClient.convertToType(data['hostid'], 'String');
            }
            if (data.hasOwnProperty('request_id')) {
                obj['request_id'] = ApiClient.convertToType(data['request_id'], 'String');
            }
            if (data.hasOwnProperty('servicename')) {
                obj['servicename'] = ApiClient.convertToType(data['servicename'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventResponseEventSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventResponseEventSource</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['base_url'] && !(typeof data['base_url'] === 'string' || data['base_url'] instanceof String)) {
            throw new Error("Expected the field `base_url` to be a primitive type in the JSON string but got " + data['base_url']);
        }
        // ensure the json data is a string
        if (data['hostid'] && !(typeof data['hostid'] === 'string' || data['hostid'] instanceof String)) {
            throw new Error("Expected the field `hostid` to be a primitive type in the JSON string but got " + data['hostid']);
        }
        // ensure the json data is a string
        if (data['request_id'] && !(typeof data['request_id'] === 'string' || data['request_id'] instanceof String)) {
            throw new Error("Expected the field `request_id` to be a primitive type in the JSON string but got " + data['request_id']);
        }
        // ensure the json data is a string
        if (data['servicename'] && !(typeof data['servicename'] === 'string' || data['servicename'] instanceof String)) {
            throw new Error("Expected the field `servicename` to be a primitive type in the JSON string but got " + data['servicename']);
        }

        return true;
    }


}



/**
 * @member {String} base_url
 */
EventResponseEventSource.prototype['base_url'] = undefined;

/**
 * @member {String} hostid
 */
EventResponseEventSource.prototype['hostid'] = undefined;

/**
 * @member {String} request_id
 */
EventResponseEventSource.prototype['request_id'] = undefined;

/**
 * @member {String} servicename
 */
EventResponseEventSource.prototype['servicename'] = undefined;






export default EventResponseEventSource;

