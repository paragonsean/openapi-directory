/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PolicyRuleParamsInner from './PolicyRuleParamsInner';

/**
 * The PolicyRule model module.
 * @module model/PolicyRule
 * @version 0.1.20
 */
class PolicyRule {
    /**
     * Constructs a new <code>PolicyRule</code>.
     * A rule that defines and decision value if the match is found true for a given image.
     * @alias module:model/PolicyRule
     * @param action {module:model/PolicyRule.ActionEnum} 
     * @param gate {String} 
     * @param trigger {String} 
     */
    constructor(action, gate, trigger) { 
        
        PolicyRule.initialize(this, action, gate, trigger);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, action, gate, trigger) { 
        obj['action'] = action;
        obj['gate'] = gate;
        obj['trigger'] = trigger;
    }

    /**
     * Constructs a <code>PolicyRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PolicyRule} obj Optional instance to populate.
     * @return {module:model/PolicyRule} The populated <code>PolicyRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PolicyRule();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('gate')) {
                obj['gate'] = ApiClient.convertToType(data['gate'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('params')) {
                obj['params'] = ApiClient.convertToType(data['params'], [PolicyRuleParamsInner]);
            }
            if (data.hasOwnProperty('trigger')) {
                obj['trigger'] = ApiClient.convertToType(data['trigger'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PolicyRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PolicyRule</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PolicyRule.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['gate'] && !(typeof data['gate'] === 'string' || data['gate'] instanceof String)) {
            throw new Error("Expected the field `gate` to be a primitive type in the JSON string but got " + data['gate']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['params']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['params'])) {
                throw new Error("Expected the field `params` to be an array in the JSON data but got " + data['params']);
            }
            // validate the optional field `params` (array)
            for (const item of data['params']) {
                PolicyRuleParamsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['trigger'] && !(typeof data['trigger'] === 'string' || data['trigger'] instanceof String)) {
            throw new Error("Expected the field `trigger` to be a primitive type in the JSON string but got " + data['trigger']);
        }

        return true;
    }


}

PolicyRule.RequiredProperties = ["action", "gate", "trigger"];

/**
 * @member {module:model/PolicyRule.ActionEnum} action
 */
PolicyRule.prototype['action'] = undefined;

/**
 * @member {String} gate
 */
PolicyRule.prototype['gate'] = undefined;

/**
 * @member {String} id
 */
PolicyRule.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/PolicyRuleParamsInner>} params
 */
PolicyRule.prototype['params'] = undefined;

/**
 * @member {String} trigger
 */
PolicyRule.prototype['trigger'] = undefined;





/**
 * Allowed values for the <code>action</code> property.
 * @enum {String}
 * @readonly
 */
PolicyRule['ActionEnum'] = {

    /**
     * value: "GO"
     * @const
     */
    "GO": "GO",

    /**
     * value: "STOP"
     * @const
     */
    "STOP": "STOP",

    /**
     * value: "WARN"
     * @const
     */
    "WARN": "WARN"
};



export default PolicyRule;

