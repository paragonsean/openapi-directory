/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContentFilesResponseContentInner model module.
 * @module model/ContentFilesResponseContentInner
 * @version 0.1.20
 */
class ContentFilesResponseContentInner {
    /**
     * Constructs a new <code>ContentFilesResponseContentInner</code>.
     * @alias module:model/ContentFilesResponseContentInner
     */
    constructor() { 
        
        ContentFilesResponseContentInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContentFilesResponseContentInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContentFilesResponseContentInner} obj Optional instance to populate.
     * @return {module:model/ContentFilesResponseContentInner} The populated <code>ContentFilesResponseContentInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContentFilesResponseContentInner();

            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
            if (data.hasOwnProperty('gid')) {
                obj['gid'] = ApiClient.convertToType(data['gid'], 'Number');
            }
            if (data.hasOwnProperty('linkdest')) {
                obj['linkdest'] = ApiClient.convertToType(data['linkdest'], 'String');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('sha256')) {
                obj['sha256'] = ApiClient.convertToType(data['sha256'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContentFilesResponseContentInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContentFilesResponseContentInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['filename'] && !(typeof data['filename'] === 'string' || data['filename'] instanceof String)) {
            throw new Error("Expected the field `filename` to be a primitive type in the JSON string but got " + data['filename']);
        }
        // ensure the json data is a string
        if (data['linkdest'] && !(typeof data['linkdest'] === 'string' || data['linkdest'] instanceof String)) {
            throw new Error("Expected the field `linkdest` to be a primitive type in the JSON string but got " + data['linkdest']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        // ensure the json data is a string
        if (data['sha256'] && !(typeof data['sha256'] === 'string' || data['sha256'] instanceof String)) {
            throw new Error("Expected the field `sha256` to be a primitive type in the JSON string but got " + data['sha256']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {String} filename
 */
ContentFilesResponseContentInner.prototype['filename'] = undefined;

/**
 * @member {Number} gid
 */
ContentFilesResponseContentInner.prototype['gid'] = undefined;

/**
 * @member {String} linkdest
 */
ContentFilesResponseContentInner.prototype['linkdest'] = undefined;

/**
 * @member {String} mode
 */
ContentFilesResponseContentInner.prototype['mode'] = undefined;

/**
 * @member {String} sha256
 */
ContentFilesResponseContentInner.prototype['sha256'] = undefined;

/**
 * @member {Number} size
 */
ContentFilesResponseContentInner.prototype['size'] = undefined;

/**
 * @member {String} type
 */
ContentFilesResponseContentInner.prototype['type'] = undefined;

/**
 * @member {Number} uid
 */
ContentFilesResponseContentInner.prototype['uid'] = undefined;






export default ContentFilesResponseContentInner;

