/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImportContentDigests from './ImportContentDigests';

/**
 * The ImageImportManifest model module.
 * @module model/ImageImportManifest
 * @version 0.1.20
 */
class ImageImportManifest {
    /**
     * Constructs a new <code>ImageImportManifest</code>.
     * @alias module:model/ImageImportManifest
     * @param contents {module:model/ImportContentDigests} 
     * @param digest {String} 
     * @param operationUuid {String} 
     * @param tags {Array.<String>} 
     */
    constructor(contents, digest, operationUuid, tags) { 
        
        ImageImportManifest.initialize(this, contents, digest, operationUuid, tags);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contents, digest, operationUuid, tags) { 
        obj['contents'] = contents;
        obj['digest'] = digest;
        obj['operation_uuid'] = operationUuid;
        obj['tags'] = tags;
    }

    /**
     * Constructs a <code>ImageImportManifest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageImportManifest} obj Optional instance to populate.
     * @return {module:model/ImageImportManifest} The populated <code>ImageImportManifest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageImportManifest();

            if (data.hasOwnProperty('contents')) {
                obj['contents'] = ImportContentDigests.constructFromObject(data['contents']);
            }
            if (data.hasOwnProperty('digest')) {
                obj['digest'] = ApiClient.convertToType(data['digest'], 'String');
            }
            if (data.hasOwnProperty('local_image_id')) {
                obj['local_image_id'] = ApiClient.convertToType(data['local_image_id'], 'String');
            }
            if (data.hasOwnProperty('operation_uuid')) {
                obj['operation_uuid'] = ApiClient.convertToType(data['operation_uuid'], 'String');
            }
            if (data.hasOwnProperty('parent_digest')) {
                obj['parent_digest'] = ApiClient.convertToType(data['parent_digest'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageImportManifest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageImportManifest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImageImportManifest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `contents`
        if (data['contents']) { // data not null
          ImportContentDigests.validateJSON(data['contents']);
        }
        // ensure the json data is a string
        if (data['digest'] && !(typeof data['digest'] === 'string' || data['digest'] instanceof String)) {
            throw new Error("Expected the field `digest` to be a primitive type in the JSON string but got " + data['digest']);
        }
        // ensure the json data is a string
        if (data['local_image_id'] && !(typeof data['local_image_id'] === 'string' || data['local_image_id'] instanceof String)) {
            throw new Error("Expected the field `local_image_id` to be a primitive type in the JSON string but got " + data['local_image_id']);
        }
        // ensure the json data is a string
        if (data['operation_uuid'] && !(typeof data['operation_uuid'] === 'string' || data['operation_uuid'] instanceof String)) {
            throw new Error("Expected the field `operation_uuid` to be a primitive type in the JSON string but got " + data['operation_uuid']);
        }
        // ensure the json data is a string
        if (data['parent_digest'] && !(typeof data['parent_digest'] === 'string' || data['parent_digest'] instanceof String)) {
            throw new Error("Expected the field `parent_digest` to be a primitive type in the JSON string but got " + data['parent_digest']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}

ImageImportManifest.RequiredProperties = ["contents", "digest", "operation_uuid", "tags"];

/**
 * @member {module:model/ImportContentDigests} contents
 */
ImageImportManifest.prototype['contents'] = undefined;

/**
 * @member {String} digest
 */
ImageImportManifest.prototype['digest'] = undefined;

/**
 * An \"imageId\" as used by Docker if available
 * @member {String} local_image_id
 */
ImageImportManifest.prototype['local_image_id'] = undefined;

/**
 * @member {String} operation_uuid
 */
ImageImportManifest.prototype['operation_uuid'] = undefined;

/**
 * The digest of the images's manifest-list parent if it was accessed from a multi-arch tag where the tag pointed to a manifest-list. This allows preservation of that relationship in the data
 * @member {String} parent_digest
 */
ImageImportManifest.prototype['parent_digest'] = undefined;

/**
 * @member {Array.<String>} tags
 */
ImageImportManifest.prototype['tags'] = undefined;






export default ImageImportManifest;

