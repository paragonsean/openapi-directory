/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageSource from './ImageSource';

/**
 * The ImageAnalysisRequest model module.
 * @module model/ImageAnalysisRequest
 * @version 0.1.20
 */
class ImageAnalysisRequest {
    /**
     * Constructs a new <code>ImageAnalysisRequest</code>.
     * A request to add an image to be watched and analyzed by the engine. Optionally include the dockerfile content. Either source, digest or tag must be present.
     * @alias module:model/ImageAnalysisRequest
     */
    constructor() { 
        
        ImageAnalysisRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImageAnalysisRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageAnalysisRequest} obj Optional instance to populate.
     * @return {module:model/ImageAnalysisRequest} The populated <code>ImageAnalysisRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageAnalysisRequest();

            if (data.hasOwnProperty('annotations')) {
                obj['annotations'] = ApiClient.convertToType(data['annotations'], Object);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('digest')) {
                obj['digest'] = ApiClient.convertToType(data['digest'], 'String');
            }
            if (data.hasOwnProperty('dockerfile')) {
                obj['dockerfile'] = ApiClient.convertToType(data['dockerfile'], 'String');
            }
            if (data.hasOwnProperty('image_type')) {
                obj['image_type'] = ApiClient.convertToType(data['image_type'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ImageSource.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageAnalysisRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageAnalysisRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['digest'] && !(typeof data['digest'] === 'string' || data['digest'] instanceof String)) {
            throw new Error("Expected the field `digest` to be a primitive type in the JSON string but got " + data['digest']);
        }
        // ensure the json data is a string
        if (data['dockerfile'] && !(typeof data['dockerfile'] === 'string' || data['dockerfile'] instanceof String)) {
            throw new Error("Expected the field `dockerfile` to be a primitive type in the JSON string but got " + data['dockerfile']);
        }
        // ensure the json data is a string
        if (data['image_type'] && !(typeof data['image_type'] === 'string' || data['image_type'] instanceof String)) {
            throw new Error("Expected the field `image_type` to be a primitive type in the JSON string but got " + data['image_type']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          ImageSource.validateJSON(data['source']);
        }
        // ensure the json data is a string
        if (data['tag'] && !(typeof data['tag'] === 'string' || data['tag'] instanceof String)) {
            throw new Error("Expected the field `tag` to be a primitive type in the JSON string but got " + data['tag']);
        }

        return true;
    }


}



/**
 * Annotations to be associated with the added image in key/value form
 * @member {Object} annotations
 */
ImageAnalysisRequest.prototype['annotations'] = undefined;

/**
 * Optional override of the image creation time, only honored when both tag and digest are also supplied  e.g. 2018-10-17T18:14:00Z. Deprecated in favor of the 'source' field
 * @member {Date} created_at
 */
ImageAnalysisRequest.prototype['created_at'] = undefined;

/**
 * A digest string for an image, maybe a pull string or just a digest. e.g. nginx@sha256:123 or sha256:abc123. If a pull string, it must have same regisry/repo as the tag field. Deprecated in favor of the 'source' field
 * @member {String} digest
 */
ImageAnalysisRequest.prototype['digest'] = undefined;

/**
 * Base64 encoded content of the dockerfile for the image, if available. Deprecated in favor of the 'source' field.
 * @member {String} dockerfile
 */
ImageAnalysisRequest.prototype['dockerfile'] = undefined;

/**
 * Optional. The type of image this is adding, defaults to \"docker\". This can be ommitted until multiple image types are supported.
 * @member {String} image_type
 */
ImageAnalysisRequest.prototype['image_type'] = undefined;

/**
 * @member {module:model/ImageSource} source
 */
ImageAnalysisRequest.prototype['source'] = undefined;

/**
 * Full pullable tag reference for image. e.g. docker.io/nginx:latest. Deprecated in favor of the 'source' field
 * @member {String} tag
 */
ImageAnalysisRequest.prototype['tag'] = undefined;






export default ImageAnalysisRequest;

