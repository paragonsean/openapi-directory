/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AnchoreEngineApiServer);
  }
}(this, function(expect, AnchoreEngineApiServer) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AnchoreEngineApiServer.ImagesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ImagesApi', function() {
    describe('addImage', function() {
      it('should call addImage successfully', function(done) {
        //uncomment below and update the code to test addImage
        //instance.addImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteImage', function() {
      it('should call deleteImage successfully', function(done) {
        //uncomment below and update the code to test deleteImage
        //instance.deleteImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteImageByImageId', function() {
      it('should call deleteImageByImageId successfully', function(done) {
        //uncomment below and update the code to test deleteImageByImageId
        //instance.deleteImageByImageId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteImagesAsync', function() {
      it('should call deleteImagesAsync successfully', function(done) {
        //uncomment below and update the code to test deleteImagesAsync
        //instance.deleteImagesAsync(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImage', function() {
      it('should call getImage successfully', function(done) {
        //uncomment below and update the code to test getImage
        //instance.getImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImageByImageId', function() {
      it('should call getImageByImageId successfully', function(done) {
        //uncomment below and update the code to test getImageByImageId
        //instance.getImageByImageId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImageContentByType', function() {
      it('should call getImageContentByType successfully', function(done) {
        //uncomment below and update the code to test getImageContentByType
        //instance.getImageContentByType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImageContentByTypeFiles', function() {
      it('should call getImageContentByTypeFiles successfully', function(done) {
        //uncomment below and update the code to test getImageContentByTypeFiles
        //instance.getImageContentByTypeFiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImageContentByTypeImageId', function() {
      it('should call getImageContentByTypeImageId successfully', function(done) {
        //uncomment below and update the code to test getImageContentByTypeImageId
        //instance.getImageContentByTypeImageId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImageContentByTypeImageIdFiles', function() {
      it('should call getImageContentByTypeImageIdFiles successfully', function(done) {
        //uncomment below and update the code to test getImageContentByTypeImageIdFiles
        //instance.getImageContentByTypeImageIdFiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImageContentByTypeImageIdJavapackage', function() {
      it('should call getImageContentByTypeImageIdJavapackage successfully', function(done) {
        //uncomment below and update the code to test getImageContentByTypeImageIdJavapackage
        //instance.getImageContentByTypeImageIdJavapackage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImageContentByTypeJavapackage', function() {
      it('should call getImageContentByTypeJavapackage successfully', function(done) {
        //uncomment below and update the code to test getImageContentByTypeJavapackage
        //instance.getImageContentByTypeJavapackage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImageContentByTypeMalware', function() {
      it('should call getImageContentByTypeMalware successfully', function(done) {
        //uncomment below and update the code to test getImageContentByTypeMalware
        //instance.getImageContentByTypeMalware(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImageMetadataByType', function() {
      it('should call getImageMetadataByType successfully', function(done) {
        //uncomment below and update the code to test getImageMetadataByType
        //instance.getImageMetadataByType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImagePolicyCheck', function() {
      it('should call getImagePolicyCheck successfully', function(done) {
        //uncomment below and update the code to test getImagePolicyCheck
        //instance.getImagePolicyCheck(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImagePolicyCheckByImageId', function() {
      it('should call getImagePolicyCheckByImageId successfully', function(done) {
        //uncomment below and update the code to test getImagePolicyCheckByImageId
        //instance.getImagePolicyCheckByImageId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImageSbomNative', function() {
      it('should call getImageSbomNative successfully', function(done) {
        //uncomment below and update the code to test getImageSbomNative
        //instance.getImageSbomNative(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImageVulnerabilitiesByType', function() {
      it('should call getImageVulnerabilitiesByType successfully', function(done) {
        //uncomment below and update the code to test getImageVulnerabilitiesByType
        //instance.getImageVulnerabilitiesByType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImageVulnerabilitiesByTypeImageId', function() {
      it('should call getImageVulnerabilitiesByTypeImageId successfully', function(done) {
        //uncomment below and update the code to test getImageVulnerabilitiesByTypeImageId
        //instance.getImageVulnerabilitiesByTypeImageId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImageVulnerabilityTypes', function() {
      it('should call getImageVulnerabilityTypes successfully', function(done) {
        //uncomment below and update the code to test getImageVulnerabilityTypes
        //instance.getImageVulnerabilityTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImageVulnerabilityTypesByImageId', function() {
      it('should call getImageVulnerabilityTypesByImageId successfully', function(done) {
        //uncomment below and update the code to test getImageVulnerabilityTypesByImageId
        //instance.getImageVulnerabilityTypesByImageId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listImageContent', function() {
      it('should call listImageContent successfully', function(done) {
        //uncomment below and update the code to test listImageContent
        //instance.listImageContent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listImageContentByImageid', function() {
      it('should call listImageContentByImageid successfully', function(done) {
        //uncomment below and update the code to test listImageContentByImageid
        //instance.listImageContentByImageid(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listImageMetadata', function() {
      it('should call listImageMetadata successfully', function(done) {
        //uncomment below and update the code to test listImageMetadata
        //instance.listImageMetadata(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listImages', function() {
      it('should call listImages successfully', function(done) {
        //uncomment below and update the code to test listImages
        //instance.listImages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
