/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AnchoreEngineApiServer);
  }
}(this, function(expect, AnchoreEngineApiServer) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AnchoreEngineApiServer.ImportsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ImportsApi', function() {
    describe('createOperation', function() {
      it('should call createOperation successfully', function(done) {
        //uncomment below and update the code to test createOperation
        //instance.createOperation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOperation', function() {
      it('should call getOperation successfully', function(done) {
        //uncomment below and update the code to test getOperation
        //instance.getOperation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importImageConfig', function() {
      it('should call importImageConfig successfully', function(done) {
        //uncomment below and update the code to test importImageConfig
        //instance.importImageConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importImageDockerfile', function() {
      it('should call importImageDockerfile successfully', function(done) {
        //uncomment below and update the code to test importImageDockerfile
        //instance.importImageDockerfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importImageManifest', function() {
      it('should call importImageManifest successfully', function(done) {
        //uncomment below and update the code to test importImageManifest
        //instance.importImageManifest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importImagePackages', function() {
      it('should call importImagePackages successfully', function(done) {
        //uncomment below and update the code to test importImagePackages
        //instance.importImagePackages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importImageParentManifest', function() {
      it('should call importImageParentManifest successfully', function(done) {
        //uncomment below and update the code to test importImageParentManifest
        //instance.importImageParentManifest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('invalidateOperation', function() {
      it('should call invalidateOperation successfully', function(done) {
        //uncomment below and update the code to test invalidateOperation
        //instance.invalidateOperation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listImportDockerfiles', function() {
      it('should call listImportDockerfiles successfully', function(done) {
        //uncomment below and update the code to test listImportDockerfiles
        //instance.listImportDockerfiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listImportImageConfigs', function() {
      it('should call listImportImageConfigs successfully', function(done) {
        //uncomment below and update the code to test listImportImageConfigs
        //instance.listImportImageConfigs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listImportImageManifests', function() {
      it('should call listImportImageManifests successfully', function(done) {
        //uncomment below and update the code to test listImportImageManifests
        //instance.listImportImageManifests(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listImportPackages', function() {
      it('should call listImportPackages successfully', function(done) {
        //uncomment below and update the code to test listImportPackages
        //instance.listImportPackages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listImportParentManifests', function() {
      it('should call listImportParentManifests successfully', function(done) {
        //uncomment below and update the code to test listImportParentManifests
        //instance.listImportParentManifests(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listOperations', function() {
      it('should call listOperations successfully', function(done) {
        //uncomment below and update the code to test listOperations
        //instance.listOperations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
