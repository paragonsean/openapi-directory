/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiErrorResponse;
import org.openapitools.client.model.FileContentSearchResult;
import org.openapitools.client.model.RetrievedFile;
import org.openapitools.client.model.SecretSearchResult;
import org.openapitools.client.model.ServiceVersion;
import org.openapitools.client.model.TokenResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Request a jwt token for subsequent operations, this request is authenticated with normal HTTP auth
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOauthTokenTest() throws ApiException {
        String clientId = null;
        String grantType = null;
        String password = null;
        String username = null;
        TokenResponse response = api.getOauthToken(clientId, grantType, password, username);
        // TODO: test validations
    }

    /**
     * Health check, returns 200 and no body if service is running
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthCheckTest() throws ApiException {
        api.healthCheck();
        // TODO: test validations
    }

    /**
     * Return a list of analyzer artifacts of the specified type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFileContentSearchResultsTest() throws ApiException {
        String imageDigest = null;
        List<FileContentSearchResult> response = api.listFileContentSearchResults(imageDigest);
        // TODO: test validations
    }

    /**
     * Return a list of analyzer artifacts of the specified type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRetrievedFilesTest() throws ApiException {
        String imageDigest = null;
        List<RetrievedFile> response = api.listRetrievedFiles(imageDigest);
        // TODO: test validations
    }

    /**
     * Return a list of analyzer artifacts of the specified type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSecretSearchResultsTest() throws ApiException {
        String imageDigest = null;
        List<SecretSearchResult> response = api.listSecretSearchResults(imageDigest);
        // TODO: test validations
    }

    /**
     * Simple status check
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pingTest() throws ApiException {
        String response = api.ping();
        // TODO: test validations
    }

    /**
     * Returns the version object for the service, including db schema version info
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void versionCheckTest() throws ApiException {
        ServiceVersion response = api.versionCheck();
        // TODO: test validations
    }

}
