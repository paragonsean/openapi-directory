/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiErrorResponse;
import org.openapitools.client.model.EventCategory;
import org.openapitools.client.model.EventResponse;
import org.openapitools.client.model.EventsList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EventsApi
 */
@Disabled
public class EventsApiTest {

    private final EventsApi api = new EventsApi();

    /**
     * Delete Event
     *
     * Delete an event by its event ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEventTest() throws ApiException {
        String eventId = null;
        String xAnchoreAccount = null;
        api.deleteEvent(eventId, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * Delete Events
     *
     * Delete all or a subset of events filtered using the optional query parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEventsTest() throws ApiException {
        String before = null;
        String since = null;
        String level = null;
        String xAnchoreAccount = null;
        List<String> response = api.deleteEvents(before, since, level, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * Get Event
     *
     * Lookup an event by its event ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventTest() throws ApiException {
        String eventId = null;
        String xAnchoreAccount = null;
        EventResponse response = api.getEvent(eventId, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * List Event Types
     *
     * Returns list of event types in the category hierarchy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEventTypesTest() throws ApiException {
        List<EventCategory> response = api.listEventTypes();
        // TODO: test validations
    }

    /**
     * List Events
     *
     * Returns a paginated list of events in the descending order of their occurrence. Optional query parameters may be used for filtering results
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEventsTest() throws ApiException {
        String sourceServicename = null;
        String sourceHostid = null;
        String eventType = null;
        String resourceType = null;
        String resourceId = null;
        String level = null;
        String since = null;
        String before = null;
        Integer page = null;
        Integer limit = null;
        String xAnchoreAccount = null;
        EventsList response = api.listEvents(sourceServicename, sourceHostid, eventType, resourceType, resourceId, level, since, before, page, limit, xAnchoreAccount);
        // TODO: test validations
    }

}
