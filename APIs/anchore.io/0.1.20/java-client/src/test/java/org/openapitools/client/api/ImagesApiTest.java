/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AnchoreImage;
import org.openapitools.client.model.ApiErrorResponse;
import org.openapitools.client.model.ContentFilesResponse;
import org.openapitools.client.model.ContentJAVAPackageResponse;
import org.openapitools.client.model.ContentMalwareResponse;
import org.openapitools.client.model.ContentPackageResponse;
import org.openapitools.client.model.DeleteImageResponse;
import java.io.File;
import org.openapitools.client.model.ImageAnalysisRequest;
import org.openapitools.client.model.MetadataResponse;
import org.openapitools.client.model.VulnerabilityResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ImagesApi
 */
@Disabled
public class ImagesApiTest {

    private final ImagesApi api = new ImagesApi();

    /**
     * Submit a new image for analysis by the engine
     *
     * Creates a new analysis task that is executed asynchronously
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addImageTest() throws ApiException {
        ImageAnalysisRequest imageAnalysisRequest = null;
        Boolean force = null;
        Boolean autosubscribe = null;
        String xAnchoreAccount = null;
        List<AnchoreImage> response = api.addImage(imageAnalysisRequest, force, autosubscribe, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * Delete an image analysis
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteImageTest() throws ApiException {
        String imageDigest = null;
        Boolean force = null;
        String xAnchoreAccount = null;
        DeleteImageResponse response = api.deleteImage(imageDigest, force, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * Delete image by docker imageId
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteImageByImageIdTest() throws ApiException {
        String imageId = null;
        Boolean force = null;
        String xAnchoreAccount = null;
        DeleteImageResponse response = api.deleteImageByImageId(imageId, force, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * Bulk mark images for deletion
     *
     * Delete analysis for image digests in the list asynchronously
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteImagesAsyncTest() throws ApiException {
        List<String> imageDigests = null;
        Boolean force = null;
        String xAnchoreAccount = null;
        List<DeleteImageResponse> response = api.deleteImagesAsync(imageDigests, force, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * Get image metadata
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImageTest() throws ApiException {
        String imageDigest = null;
        String xAnchoreAccount = null;
        List<AnchoreImage> response = api.getImage(imageDigest, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * Lookup image by docker imageId
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImageByImageIdTest() throws ApiException {
        String imageId = null;
        String xAnchoreAccount = null;
        List<AnchoreImage> response = api.getImageByImageId(imageId, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * Get the content of an image by type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImageContentByTypeTest() throws ApiException {
        String imageDigest = null;
        String ctype = null;
        String xAnchoreAccount = null;
        ContentPackageResponse response = api.getImageContentByType(imageDigest, ctype, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * Get the content of an image by type files
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImageContentByTypeFilesTest() throws ApiException {
        String imageDigest = null;
        String xAnchoreAccount = null;
        ContentFilesResponse response = api.getImageContentByTypeFiles(imageDigest, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * Get the content of an image by type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImageContentByTypeImageIdTest() throws ApiException {
        String imageId = null;
        String ctype = null;
        String xAnchoreAccount = null;
        ContentPackageResponse response = api.getImageContentByTypeImageId(imageId, ctype, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * Get the content of an image by type files
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImageContentByTypeImageIdFilesTest() throws ApiException {
        String imageId = null;
        String xAnchoreAccount = null;
        ContentFilesResponse response = api.getImageContentByTypeImageIdFiles(imageId, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * Get the content of an image by type java
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImageContentByTypeImageIdJavapackageTest() throws ApiException {
        String imageId = null;
        String xAnchoreAccount = null;
        ContentJAVAPackageResponse response = api.getImageContentByTypeImageIdJavapackage(imageId, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * Get the content of an image by type java
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImageContentByTypeJavapackageTest() throws ApiException {
        String imageDigest = null;
        String xAnchoreAccount = null;
        ContentJAVAPackageResponse response = api.getImageContentByTypeJavapackage(imageDigest, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * Get the content of an image by type malware
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImageContentByTypeMalwareTest() throws ApiException {
        String imageDigest = null;
        String xAnchoreAccount = null;
        ContentMalwareResponse response = api.getImageContentByTypeMalware(imageDigest, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * Get the metadata of an image by type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImageMetadataByTypeTest() throws ApiException {
        String imageDigest = null;
        String mtype = null;
        String xAnchoreAccount = null;
        MetadataResponse response = api.getImageMetadataByType(imageDigest, mtype, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * Check policy evaluation status for image
     *
     * Get the policy evaluation for the given image
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImagePolicyCheckTest() throws ApiException {
        String imageDigest = null;
        String tag = null;
        String policyId = null;
        Boolean detail = null;
        Boolean history = null;
        Boolean interactive = null;
        String xAnchoreAccount = null;
        List<Object> response = api.getImagePolicyCheck(imageDigest, tag, policyId, detail, history, interactive, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * Check policy evaluation status for image
     *
     * Get the policy evaluation for the given image
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImagePolicyCheckByImageIdTest() throws ApiException {
        String imageId = null;
        String tag = null;
        String policyId = null;
        Boolean detail = null;
        Boolean history = null;
        String xAnchoreAccount = null;
        List<Object> response = api.getImagePolicyCheckByImageId(imageId, tag, policyId, detail, history, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * Get image sbom in the native Anchore format
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImageSbomNativeTest() throws ApiException {
        String imageDigest = null;
        String xAnchoreAccount = null;
        File response = api.getImageSbomNative(imageDigest, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * Get vulnerabilities by type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImageVulnerabilitiesByTypeTest() throws ApiException {
        String imageDigest = null;
        String vtype = null;
        Boolean forceRefresh = null;
        Boolean vendorOnly = null;
        String xAnchoreAccount = null;
        VulnerabilityResponse response = api.getImageVulnerabilitiesByType(imageDigest, vtype, forceRefresh, vendorOnly, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * Get vulnerabilities by type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImageVulnerabilitiesByTypeImageIdTest() throws ApiException {
        String imageId = null;
        String vtype = null;
        String xAnchoreAccount = null;
        VulnerabilityResponse response = api.getImageVulnerabilitiesByTypeImageId(imageId, vtype, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * Get vulnerability types
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImageVulnerabilityTypesTest() throws ApiException {
        String imageDigest = null;
        String xAnchoreAccount = null;
        List<String> response = api.getImageVulnerabilityTypes(imageDigest, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * Get vulnerability types
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImageVulnerabilityTypesByImageIdTest() throws ApiException {
        String imageId = null;
        String xAnchoreAccount = null;
        List<String> response = api.getImageVulnerabilityTypesByImageId(imageId, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * List image content types
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listImageContentTest() throws ApiException {
        String imageDigest = null;
        String xAnchoreAccount = null;
        List<String> response = api.listImageContent(imageDigest, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * List image content types
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listImageContentByImageidTest() throws ApiException {
        String imageId = null;
        String xAnchoreAccount = null;
        List<String> response = api.listImageContentByImageid(imageId, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * List image metadata types
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listImageMetadataTest() throws ApiException {
        String imageDigest = null;
        String xAnchoreAccount = null;
        List<String> response = api.listImageMetadata(imageDigest, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * List all visible images
     *
     * List all images visible to the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listImagesTest() throws ApiException {
        Boolean history = null;
        String fulltag = null;
        String imageStatus = null;
        String analysisStatus = null;
        String xAnchoreAccount = null;
        List<AnchoreImage> response = api.listImages(history, fulltag, imageStatus, analysisStatus, xAnchoreAccount);
        // TODO: test validations
    }

}
