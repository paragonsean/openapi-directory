/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AnchoreErrorCode;
import org.openapitools.client.model.ApiErrorResponse;
import org.openapitools.client.model.FeedMetadata;
import org.openapitools.client.model.FeedSyncResult;
import org.openapitools.client.model.GateSpec;
import org.openapitools.client.model.Service;
import org.openapitools.client.model.StatusResponse;
import org.openapitools.client.model.SystemStatusResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SystemApi
 */
@Disabled
public class SystemApiTest {

    private final SystemApi api = new SystemApi();

    /**
     * Delete the groups and data for the feed and disable the feed itself
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFeedTest() throws ApiException {
        String feed = null;
        api.deleteFeed(feed);
        // TODO: test validations
    }

    /**
     * Delete the group data and disable the group itself
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFeedGroupTest() throws ApiException {
        String feed = null;
        String group = null;
        api.deleteFeedGroup(feed, group);
        // TODO: test validations
    }

    /**
     * Delete the service config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteServiceTest() throws ApiException {
        String servicename = null;
        String hostid = null;
        api.deleteService(servicename, hostid);
        // TODO: test validations
    }

    /**
     * Describe anchore engine error codes.
     *
     * Describe anchore engine error codes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeErrorCodesTest() throws ApiException {
        List<AnchoreErrorCode> response = api.describeErrorCodes();
        // TODO: test validations
    }

    /**
     * Describe the policy language spec implemented by this service.
     *
     * Get the policy language spec for this service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describePolicyTest() throws ApiException {
        List<GateSpec> response = api.describePolicy();
        // TODO: test validations
    }

    /**
     * System status
     *
     * Get the system status including queue lengths
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceDetailTest() throws ApiException {
        SystemStatusResponse response = api.getServiceDetail();
        // TODO: test validations
    }

    /**
     * Get a service configuration and state
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServicesByNameTest() throws ApiException {
        String servicename = null;
        List<Service> response = api.getServicesByName(servicename);
        // TODO: test validations
    }

    /**
     * Get service config for a specific host
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServicesByNameAndHostTest() throws ApiException {
        String servicename = null;
        String hostid = null;
        List<Service> response = api.getServicesByNameAndHost(servicename, hostid);
        // TODO: test validations
    }

    /**
     * Service status
     *
     * Get the API service status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStatusTest() throws ApiException {
        StatusResponse response = api.getStatus();
        // TODO: test validations
    }

    /**
     * list feeds operations and information
     *
     * Return a list of feed and their groups along with update and record count information. This data reflects the state of the policy engine, not the upstream feed service itself.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSystemFeedsTest() throws ApiException {
        List<FeedMetadata> response = api.getSystemFeeds();
        // TODO: test validations
    }

    /**
     * List system services
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServicesTest() throws ApiException {
        List<Service> response = api.listServices();
        // TODO: test validations
    }

    /**
     * trigger feeds operations
     *
     * Execute a synchronous feed sync operation. The response will block until complete, then return the result summary.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postSystemFeedsTest() throws ApiException {
        Boolean flush = null;
        Boolean sync = null;
        List<FeedSyncResult> response = api.postSystemFeeds(flush, sync);
        // TODO: test validations
    }

    /**
     * Adds the capabilities to test a webhook delivery for the given notification type
     *
     * Loads the Webhook configuration for webhook_type, and sends the notification out as a test
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testWebhookTest() throws ApiException {
        String webhookType = null;
        String notificationType = null;
        api.testWebhook(webhookType, notificationType);
        // TODO: test validations
    }

    /**
     * Disable the feed so that it does not sync on subsequent sync operations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toggleFeedEnabledTest() throws ApiException {
        String feed = null;
        Boolean enabled = null;
        FeedMetadata response = api.toggleFeedEnabled(feed, enabled);
        // TODO: test validations
    }

    /**
     * Disable a specific group within a feed to not sync
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void toggleGroupEnabledTest() throws ApiException {
        String feed = null;
        String group = null;
        Boolean enabled = null;
        List<FeedMetadata> response = api.toggleGroupEnabled(feed, group, enabled);
        // TODO: test validations
    }

}
