/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ImageImportContentResponse;
import org.openapitools.client.model.ImageImportOperation;
import org.openapitools.client.model.ImagePackageManifest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ImportsApi
 */
@Disabled
public class ImportsApiTest {

    private final ImportsApi api = new ImportsApi();

    /**
     * Begin the import of an image analyzed by Syft into the system
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOperationTest() throws ApiException {
        ImageImportOperation response = api.createOperation();
        // TODO: test validations
    }

    /**
     * Get detail on a single import
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOperationTest() throws ApiException {
        String operationId = null;
        ImageImportOperation response = api.getOperation(operationId);
        // TODO: test validations
    }

    /**
     * Import a docker or OCI image config to associate with the image
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importImageConfigTest() throws ApiException {
        String operationId = null;
        Object body = null;
        ImageImportContentResponse response = api.importImageConfig(operationId, body);
        // TODO: test validations
    }

    /**
     * Begin the import of an image analyzed by Syft into the system
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importImageDockerfileTest() throws ApiException {
        String operationId = null;
        String body = null;
        ImageImportContentResponse response = api.importImageDockerfile(operationId, body);
        // TODO: test validations
    }

    /**
     * Import a docker or OCI distribution manifest to associate with the image
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importImageManifestTest() throws ApiException {
        String operationId = null;
        Object body = null;
        ImageImportContentResponse response = api.importImageManifest(operationId, body);
        // TODO: test validations
    }

    /**
     * Begin the import of an image analyzed by Syft into the system
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importImagePackagesTest() throws ApiException {
        String operationId = null;
        ImagePackageManifest imagePackageManifest = null;
        ImageImportContentResponse response = api.importImagePackages(operationId, imagePackageManifest);
        // TODO: test validations
    }

    /**
     * Import a docker or OCI distribution manifest list to associate with the image
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importImageParentManifestTest() throws ApiException {
        String operationId = null;
        Object body = null;
        ImageImportContentResponse response = api.importImageParentManifest(operationId, body);
        // TODO: test validations
    }

    /**
     * Invalidate operation ID so it can be garbage collected
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void invalidateOperationTest() throws ApiException {
        String operationId = null;
        ImageImportOperation response = api.invalidateOperation(operationId);
        // TODO: test validations
    }

    /**
     * List uploaded dockerfiles
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listImportDockerfilesTest() throws ApiException {
        String operationId = null;
        List<String> response = api.listImportDockerfiles(operationId);
        // TODO: test validations
    }

    /**
     * List uploaded image configs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listImportImageConfigsTest() throws ApiException {
        String operationId = null;
        List<String> response = api.listImportImageConfigs(operationId);
        // TODO: test validations
    }

    /**
     * List uploaded image manifests
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listImportImageManifestsTest() throws ApiException {
        String operationId = null;
        List<String> response = api.listImportImageManifests(operationId);
        // TODO: test validations
    }

    /**
     * List uploaded package manifests
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listImportPackagesTest() throws ApiException {
        String operationId = null;
        List<String> response = api.listImportPackages(operationId);
        // TODO: test validations
    }

    /**
     * List uploaded parent manifests (manifest lists for a tag)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listImportParentManifestsTest() throws ApiException {
        String operationId = null;
        List<String> response = api.listImportParentManifests(operationId);
        // TODO: test validations
    }

    /**
     * Lists in-progress imports
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOperationsTest() throws ApiException {
        List<ImageImportOperation> response = api.listOperations();
        // TODO: test validations
    }

}
