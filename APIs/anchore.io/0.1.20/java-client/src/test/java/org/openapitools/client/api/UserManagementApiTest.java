/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccessCredential;
import org.openapitools.client.model.Account;
import org.openapitools.client.model.AccountCreationRequest;
import org.openapitools.client.model.AccountStatus;
import org.openapitools.client.model.ApiErrorResponse;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserCreationRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserManagementApi
 */
@Disabled
public class UserManagementApiTest {

    private final UserManagementApi api = new UserManagementApi();

    /**
     * Create a new user. Only avaialble to admin user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAccountTest() throws ApiException {
        AccountCreationRequest accountCreationRequest = null;
        Account response = api.createAccount(accountCreationRequest);
        // TODO: test validations
    }

    /**
     * Create a new user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        String accountname = null;
        UserCreationRequest userCreationRequest = null;
        User response = api.createUser(accountname, userCreationRequest);
        // TODO: test validations
    }

    /**
     * add/replace credential
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserCredentialTest() throws ApiException {
        String accountname = null;
        String username = null;
        AccessCredential accessCredential = null;
        User response = api.createUserCredential(accountname, username, accessCredential);
        // TODO: test validations
    }

    /**
     * Delete the specified account, only allowed if the account is in the disabled state. All users will be deleted along with the account and all resources will be garbage collected
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAccountTest() throws ApiException {
        String accountname = null;
        api.deleteAccount(accountname);
        // TODO: test validations
    }

    /**
     * Delete a specific user credential by username of the credential. Cannot be the credential used to authenticate the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String accountname = null;
        String username = null;
        api.deleteUser(accountname, username);
        // TODO: test validations
    }

    /**
     * Delete a credential by type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserCredentialTest() throws ApiException {
        String accountname = null;
        String username = null;
        String credentialType = null;
        api.deleteUserCredential(accountname, username, credentialType);
        // TODO: test validations
    }

    /**
     * Get info about an user. Only available to admin user. Uses the main user Id, not a username.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountTest() throws ApiException {
        String accountname = null;
        Account response = api.getAccount(accountname);
        // TODO: test validations
    }

    /**
     * Get a specific user in the specified account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountUserTest() throws ApiException {
        String accountname = null;
        String username = null;
        User response = api.getAccountUser(accountname, username);
        // TODO: test validations
    }

    /**
     * List user summaries. Only available to the system admin user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAccountsTest() throws ApiException {
        String state = null;
        List<Account> response = api.listAccounts(state);
        // TODO: test validations
    }

    /**
     * Get current credential summary
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUserCredentialsTest() throws ApiException {
        String accountname = null;
        String username = null;
        List<AccessCredential> response = api.listUserCredentials(accountname, username);
        // TODO: test validations
    }

    /**
     * List accounts for the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUsersTest() throws ApiException {
        String accountname = null;
        List<User> response = api.listUsers(accountname);
        // TODO: test validations
    }

    /**
     * Update the state of an account to either enabled or disabled. For deletion use the DELETE route
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAccountStateTest() throws ApiException {
        String accountname = null;
        AccountStatus accountStatus = null;
        AccountStatus response = api.updateAccountState(accountname, accountStatus);
        // TODO: test validations
    }

}
