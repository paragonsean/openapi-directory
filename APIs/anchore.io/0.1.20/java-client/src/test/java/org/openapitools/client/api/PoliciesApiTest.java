/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiErrorResponse;
import org.openapitools.client.model.PolicyBundle;
import org.openapitools.client.model.PolicyBundleRecord;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PoliciesApi
 */
@Disabled
public class PoliciesApiTest {

    private final PoliciesApi api = new PoliciesApi();

    /**
     * Add a new policy
     *
     * Adds a new policy bundle to the system
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addPolicyTest() throws ApiException {
        PolicyBundle policyBundle = null;
        String xAnchoreAccount = null;
        PolicyBundleRecord response = api.addPolicy(policyBundle, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * Delete policy
     *
     * Delete the specified policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePolicyTest() throws ApiException {
        String policyId = null;
        String xAnchoreAccount = null;
        api.deletePolicy(policyId, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * Get specific policy
     *
     * Get the policy bundle content
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPolicyTest() throws ApiException {
        String policyId = null;
        Boolean detail = null;
        String xAnchoreAccount = null;
        List<PolicyBundleRecord> response = api.getPolicy(policyId, detail, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * List policies
     *
     * List all saved policy bundles
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPoliciesTest() throws ApiException {
        Boolean detail = null;
        String xAnchoreAccount = null;
        List<PolicyBundleRecord> response = api.listPolicies(detail, xAnchoreAccount);
        // TODO: test validations
    }

    /**
     * Update policy
     *
     * Update/replace and existing policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePolicyTest() throws ApiException {
        String policyId = null;
        PolicyBundleRecord policyBundleRecord = null;
        Boolean active = null;
        String xAnchoreAccount = null;
        List<PolicyBundleRecord> response = api.updatePolicy(policyId, policyBundleRecord, active, xAnchoreAccount);
        // TODO: test validations
    }

}
