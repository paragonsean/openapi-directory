/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Digest of content to use in the final import
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:58.810142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImportContentDigests {
  public static final String SERIALIZED_NAME_DOCKERFILE = "dockerfile";
  @SerializedName(SERIALIZED_NAME_DOCKERFILE)
  private String dockerfile;

  public static final String SERIALIZED_NAME_IMAGE_CONFIG = "image_config";
  @SerializedName(SERIALIZED_NAME_IMAGE_CONFIG)
  private String imageConfig;

  public static final String SERIALIZED_NAME_MANIFEST = "manifest";
  @SerializedName(SERIALIZED_NAME_MANIFEST)
  private String manifest;

  public static final String SERIALIZED_NAME_PACKAGES = "packages";
  @SerializedName(SERIALIZED_NAME_PACKAGES)
  private String packages;

  public static final String SERIALIZED_NAME_PARENT_MANIFEST = "parent_manifest";
  @SerializedName(SERIALIZED_NAME_PARENT_MANIFEST)
  private String parentManifest;

  public ImportContentDigests() {
  }

  public ImportContentDigests dockerfile(String dockerfile) {
    this.dockerfile = dockerfile;
    return this;
  }

  /**
   * Digest for reference content for dockerfile
   * @return dockerfile
   */
  @javax.annotation.Nullable
  public String getDockerfile() {
    return dockerfile;
  }

  public void setDockerfile(String dockerfile) {
    this.dockerfile = dockerfile;
  }


  public ImportContentDigests imageConfig(String imageConfig) {
    this.imageConfig = imageConfig;
    return this;
  }

  /**
   * Digest for reference content for image config
   * @return imageConfig
   */
  @javax.annotation.Nonnull
  public String getImageConfig() {
    return imageConfig;
  }

  public void setImageConfig(String imageConfig) {
    this.imageConfig = imageConfig;
  }


  public ImportContentDigests manifest(String manifest) {
    this.manifest = manifest;
    return this;
  }

  /**
   * Digest to reference content for the image manifest
   * @return manifest
   */
  @javax.annotation.Nonnull
  public String getManifest() {
    return manifest;
  }

  public void setManifest(String manifest) {
    this.manifest = manifest;
  }


  public ImportContentDigests packages(String packages) {
    this.packages = packages;
    return this;
  }

  /**
   * Digest to use for the packages content
   * @return packages
   */
  @javax.annotation.Nonnull
  public String getPackages() {
    return packages;
  }

  public void setPackages(String packages) {
    this.packages = packages;
  }


  public ImportContentDigests parentManifest(String parentManifest) {
    this.parentManifest = parentManifest;
    return this;
  }

  /**
   * Digest for reference content for parent manifest
   * @return parentManifest
   */
  @javax.annotation.Nullable
  public String getParentManifest() {
    return parentManifest;
  }

  public void setParentManifest(String parentManifest) {
    this.parentManifest = parentManifest;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportContentDigests importContentDigests = (ImportContentDigests) o;
    return Objects.equals(this.dockerfile, importContentDigests.dockerfile) &&
        Objects.equals(this.imageConfig, importContentDigests.imageConfig) &&
        Objects.equals(this.manifest, importContentDigests.manifest) &&
        Objects.equals(this.packages, importContentDigests.packages) &&
        Objects.equals(this.parentManifest, importContentDigests.parentManifest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dockerfile, imageConfig, manifest, packages, parentManifest);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportContentDigests {\n");
    sb.append("    dockerfile: ").append(toIndentedString(dockerfile)).append("\n");
    sb.append("    imageConfig: ").append(toIndentedString(imageConfig)).append("\n");
    sb.append("    manifest: ").append(toIndentedString(manifest)).append("\n");
    sb.append("    packages: ").append(toIndentedString(packages)).append("\n");
    sb.append("    parentManifest: ").append(toIndentedString(parentManifest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dockerfile");
    openapiFields.add("image_config");
    openapiFields.add("manifest");
    openapiFields.add("packages");
    openapiFields.add("parent_manifest");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("image_config");
    openapiRequiredFields.add("manifest");
    openapiRequiredFields.add("packages");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportContentDigests
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportContentDigests.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportContentDigests is not found in the empty JSON string", ImportContentDigests.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportContentDigests.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportContentDigests` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImportContentDigests.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dockerfile") != null && !jsonObj.get("dockerfile").isJsonNull()) && !jsonObj.get("dockerfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dockerfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dockerfile").toString()));
      }
      if (!jsonObj.get("image_config").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_config` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_config").toString()));
      }
      if (!jsonObj.get("manifest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manifest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manifest").toString()));
      }
      if (!jsonObj.get("packages").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `packages` to be a primitive type in the JSON string but got `%s`", jsonObj.get("packages").toString()));
      }
      if ((jsonObj.get("parent_manifest") != null && !jsonObj.get("parent_manifest").isJsonNull()) && !jsonObj.get("parent_manifest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_manifest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_manifest").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportContentDigests.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportContentDigests' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportContentDigests> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportContentDigests.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportContentDigests>() {
           @Override
           public void write(JsonWriter out, ImportContentDigests value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportContentDigests read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportContentDigests given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportContentDigests
   * @throws IOException if the JSON string is invalid with respect to ImportContentDigests
   */
  public static ImportContentDigests fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportContentDigests.class);
  }

  /**
   * Convert an instance of ImportContentDigests to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

