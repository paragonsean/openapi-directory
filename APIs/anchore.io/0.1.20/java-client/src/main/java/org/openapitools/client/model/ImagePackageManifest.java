/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ImportDescriptor;
import org.openapitools.client.model.ImportDistribution;
import org.openapitools.client.model.ImportPackage;
import org.openapitools.client.model.ImportPackageRelationship;
import org.openapitools.client.model.ImportSchema;
import org.openapitools.client.model.ImportSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ImagePackageManifest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:58.810142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImagePackageManifest {
  public static final String SERIALIZED_NAME_ARTIFACT_RELATIONSHIPS = "artifactRelationships";
  @SerializedName(SERIALIZED_NAME_ARTIFACT_RELATIONSHIPS)
  private List<ImportPackageRelationship> artifactRelationships = new ArrayList<>();

  public static final String SERIALIZED_NAME_ARTIFACTS = "artifacts";
  @SerializedName(SERIALIZED_NAME_ARTIFACTS)
  private List<ImportPackage> artifacts = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTOR = "descriptor";
  @SerializedName(SERIALIZED_NAME_DESCRIPTOR)
  private ImportDescriptor descriptor;

  public static final String SERIALIZED_NAME_DISTRO = "distro";
  @SerializedName(SERIALIZED_NAME_DISTRO)
  private ImportDistribution distro;

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private ImportSchema schema;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private ImportSource source;

  public ImagePackageManifest() {
  }

  public ImagePackageManifest artifactRelationships(List<ImportPackageRelationship> artifactRelationships) {
    this.artifactRelationships = artifactRelationships;
    return this;
  }

  public ImagePackageManifest addArtifactRelationshipsItem(ImportPackageRelationship artifactRelationshipsItem) {
    if (this.artifactRelationships == null) {
      this.artifactRelationships = new ArrayList<>();
    }
    this.artifactRelationships.add(artifactRelationshipsItem);
    return this;
  }

  /**
   * Get artifactRelationships
   * @return artifactRelationships
   */
  @javax.annotation.Nullable
  public List<ImportPackageRelationship> getArtifactRelationships() {
    return artifactRelationships;
  }

  public void setArtifactRelationships(List<ImportPackageRelationship> artifactRelationships) {
    this.artifactRelationships = artifactRelationships;
  }


  public ImagePackageManifest artifacts(List<ImportPackage> artifacts) {
    this.artifacts = artifacts;
    return this;
  }

  public ImagePackageManifest addArtifactsItem(ImportPackage artifactsItem) {
    if (this.artifacts == null) {
      this.artifacts = new ArrayList<>();
    }
    this.artifacts.add(artifactsItem);
    return this;
  }

  /**
   * Get artifacts
   * @return artifacts
   */
  @javax.annotation.Nonnull
  public List<ImportPackage> getArtifacts() {
    return artifacts;
  }

  public void setArtifacts(List<ImportPackage> artifacts) {
    this.artifacts = artifacts;
  }


  public ImagePackageManifest descriptor(ImportDescriptor descriptor) {
    this.descriptor = descriptor;
    return this;
  }

  /**
   * Get descriptor
   * @return descriptor
   */
  @javax.annotation.Nullable
  public ImportDescriptor getDescriptor() {
    return descriptor;
  }

  public void setDescriptor(ImportDescriptor descriptor) {
    this.descriptor = descriptor;
  }


  public ImagePackageManifest distro(ImportDistribution distro) {
    this.distro = distro;
    return this;
  }

  /**
   * Get distro
   * @return distro
   */
  @javax.annotation.Nonnull
  public ImportDistribution getDistro() {
    return distro;
  }

  public void setDistro(ImportDistribution distro) {
    this.distro = distro;
  }


  public ImagePackageManifest schema(ImportSchema schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Get schema
   * @return schema
   */
  @javax.annotation.Nullable
  public ImportSchema getSchema() {
    return schema;
  }

  public void setSchema(ImportSchema schema) {
    this.schema = schema;
  }


  public ImagePackageManifest source(ImportSource source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nonnull
  public ImportSource getSource() {
    return source;
  }

  public void setSource(ImportSource source) {
    this.source = source;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ImagePackageManifest instance itself
   */
  public ImagePackageManifest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImagePackageManifest imagePackageManifest = (ImagePackageManifest) o;
    return Objects.equals(this.artifactRelationships, imagePackageManifest.artifactRelationships) &&
        Objects.equals(this.artifacts, imagePackageManifest.artifacts) &&
        Objects.equals(this.descriptor, imagePackageManifest.descriptor) &&
        Objects.equals(this.distro, imagePackageManifest.distro) &&
        Objects.equals(this.schema, imagePackageManifest.schema) &&
        Objects.equals(this.source, imagePackageManifest.source)&&
        Objects.equals(this.additionalProperties, imagePackageManifest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artifactRelationships, artifacts, descriptor, distro, schema, source, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImagePackageManifest {\n");
    sb.append("    artifactRelationships: ").append(toIndentedString(artifactRelationships)).append("\n");
    sb.append("    artifacts: ").append(toIndentedString(artifacts)).append("\n");
    sb.append("    descriptor: ").append(toIndentedString(descriptor)).append("\n");
    sb.append("    distro: ").append(toIndentedString(distro)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("artifactRelationships");
    openapiFields.add("artifacts");
    openapiFields.add("descriptor");
    openapiFields.add("distro");
    openapiFields.add("schema");
    openapiFields.add("source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("artifacts");
    openapiRequiredFields.add("distro");
    openapiRequiredFields.add("source");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImagePackageManifest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImagePackageManifest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImagePackageManifest is not found in the empty JSON string", ImagePackageManifest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImagePackageManifest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("artifactRelationships") != null && !jsonObj.get("artifactRelationships").isJsonNull() && !jsonObj.get("artifactRelationships").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `artifactRelationships` to be an array in the JSON string but got `%s`", jsonObj.get("artifactRelationships").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("artifacts") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("artifacts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `artifacts` to be an array in the JSON string but got `%s`", jsonObj.get("artifacts").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImagePackageManifest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImagePackageManifest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImagePackageManifest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImagePackageManifest.class));

       return (TypeAdapter<T>) new TypeAdapter<ImagePackageManifest>() {
           @Override
           public void write(JsonWriter out, ImagePackageManifest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ImagePackageManifest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ImagePackageManifest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImagePackageManifest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImagePackageManifest
   * @throws IOException if the JSON string is invalid with respect to ImagePackageManifest
   */
  public static ImagePackageManifest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImagePackageManifest.class);
  }

  /**
   * Convert an instance of ImagePackageManifest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

