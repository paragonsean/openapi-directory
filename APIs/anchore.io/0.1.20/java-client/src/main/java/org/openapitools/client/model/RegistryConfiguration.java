/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A registry entry describing the endpoint and credentials for a registry to pull images from
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:58.810142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegistryConfiguration {
  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_LAST_UPATED = "last_upated";
  @SerializedName(SERIALIZED_NAME_LAST_UPATED)
  private OffsetDateTime lastUpated;

  public static final String SERIALIZED_NAME_REGISTRY = "registry";
  @SerializedName(SERIALIZED_NAME_REGISTRY)
  private String registry;

  public static final String SERIALIZED_NAME_REGISTRY_NAME = "registry_name";
  @SerializedName(SERIALIZED_NAME_REGISTRY_NAME)
  private String registryName;

  public static final String SERIALIZED_NAME_REGISTRY_TYPE = "registry_type";
  @SerializedName(SERIALIZED_NAME_REGISTRY_TYPE)
  private String registryType;

  public static final String SERIALIZED_NAME_REGISTRY_USER = "registry_user";
  @SerializedName(SERIALIZED_NAME_REGISTRY_USER)
  private String registryUser;

  public static final String SERIALIZED_NAME_REGISTRY_VERIFY = "registry_verify";
  @SerializedName(SERIALIZED_NAME_REGISTRY_VERIFY)
  private Boolean registryVerify;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public RegistryConfiguration() {
  }

  public RegistryConfiguration createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public RegistryConfiguration lastUpated(OffsetDateTime lastUpated) {
    this.lastUpated = lastUpated;
    return this;
  }

  /**
   * Get lastUpated
   * @return lastUpated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpated() {
    return lastUpated;
  }

  public void setLastUpated(OffsetDateTime lastUpated) {
    this.lastUpated = lastUpated;
  }


  public RegistryConfiguration registry(String registry) {
    this.registry = registry;
    return this;
  }

  /**
   * hostname:port string for accessing the registry, as would be used in a docker pull operation
   * @return registry
   */
  @javax.annotation.Nullable
  public String getRegistry() {
    return registry;
  }

  public void setRegistry(String registry) {
    this.registry = registry;
  }


  public RegistryConfiguration registryName(String registryName) {
    this.registryName = registryName;
    return this;
  }

  /**
   * human readable name associated with registry record
   * @return registryName
   */
  @javax.annotation.Nullable
  public String getRegistryName() {
    return registryName;
  }

  public void setRegistryName(String registryName) {
    this.registryName = registryName;
  }


  public RegistryConfiguration registryType(String registryType) {
    this.registryType = registryType;
    return this;
  }

  /**
   * Type of registry
   * @return registryType
   */
  @javax.annotation.Nullable
  public String getRegistryType() {
    return registryType;
  }

  public void setRegistryType(String registryType) {
    this.registryType = registryType;
  }


  public RegistryConfiguration registryUser(String registryUser) {
    this.registryUser = registryUser;
    return this;
  }

  /**
   * Username portion of credential to use for this registry
   * @return registryUser
   */
  @javax.annotation.Nullable
  public String getRegistryUser() {
    return registryUser;
  }

  public void setRegistryUser(String registryUser) {
    this.registryUser = registryUser;
  }


  public RegistryConfiguration registryVerify(Boolean registryVerify) {
    this.registryVerify = registryVerify;
    return this;
  }

  /**
   * Use TLS/SSL verification for the registry URL
   * @return registryVerify
   */
  @javax.annotation.Nullable
  public Boolean getRegistryVerify() {
    return registryVerify;
  }

  public void setRegistryVerify(Boolean registryVerify) {
    this.registryVerify = registryVerify;
  }


  public RegistryConfiguration userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Engine user that owns this registry entry
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegistryConfiguration registryConfiguration = (RegistryConfiguration) o;
    return Objects.equals(this.createdAt, registryConfiguration.createdAt) &&
        Objects.equals(this.lastUpated, registryConfiguration.lastUpated) &&
        Objects.equals(this.registry, registryConfiguration.registry) &&
        Objects.equals(this.registryName, registryConfiguration.registryName) &&
        Objects.equals(this.registryType, registryConfiguration.registryType) &&
        Objects.equals(this.registryUser, registryConfiguration.registryUser) &&
        Objects.equals(this.registryVerify, registryConfiguration.registryVerify) &&
        Objects.equals(this.userId, registryConfiguration.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, lastUpated, registry, registryName, registryType, registryUser, registryVerify, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegistryConfiguration {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    lastUpated: ").append(toIndentedString(lastUpated)).append("\n");
    sb.append("    registry: ").append(toIndentedString(registry)).append("\n");
    sb.append("    registryName: ").append(toIndentedString(registryName)).append("\n");
    sb.append("    registryType: ").append(toIndentedString(registryType)).append("\n");
    sb.append("    registryUser: ").append(toIndentedString(registryUser)).append("\n");
    sb.append("    registryVerify: ").append(toIndentedString(registryVerify)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at");
    openapiFields.add("last_upated");
    openapiFields.add("registry");
    openapiFields.add("registry_name");
    openapiFields.add("registry_type");
    openapiFields.add("registry_user");
    openapiFields.add("registry_verify");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegistryConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegistryConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegistryConfiguration is not found in the empty JSON string", RegistryConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegistryConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegistryConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("registry") != null && !jsonObj.get("registry").isJsonNull()) && !jsonObj.get("registry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registry").toString()));
      }
      if ((jsonObj.get("registry_name") != null && !jsonObj.get("registry_name").isJsonNull()) && !jsonObj.get("registry_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registry_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registry_name").toString()));
      }
      if ((jsonObj.get("registry_type") != null && !jsonObj.get("registry_type").isJsonNull()) && !jsonObj.get("registry_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registry_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registry_type").toString()));
      }
      if ((jsonObj.get("registry_user") != null && !jsonObj.get("registry_user").isJsonNull()) && !jsonObj.get("registry_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registry_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registry_user").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegistryConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegistryConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegistryConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegistryConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<RegistryConfiguration>() {
           @Override
           public void write(JsonWriter out, RegistryConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegistryConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegistryConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegistryConfiguration
   * @throws IOException if the JSON string is invalid with respect to RegistryConfiguration
   */
  public static RegistryConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegistryConfiguration.class);
  }

  /**
   * Convert an instance of RegistryConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

