/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AnalysisUpdateNotificationPayload;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AnalysisUpdateNotificationData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:58.810142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnalysisUpdateNotificationData {
  public static final String SERIALIZED_NAME_NOTIFICATION_TYPE = "notification_type";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_TYPE)
  private String notificationType;

  public static final String SERIALIZED_NAME_NOTIFICATION_USER = "notification_user";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_USER)
  private String notificationUser;

  public static final String SERIALIZED_NAME_NOTIFICATION_USER_EMAIL = "notification_user_email";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_USER_EMAIL)
  private String notificationUserEmail;

  public static final String SERIALIZED_NAME_NOTIFICATION_PAYLOAD = "notification_payload";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_PAYLOAD)
  private AnalysisUpdateNotificationPayload notificationPayload;

  public AnalysisUpdateNotificationData() {
  }

  public AnalysisUpdateNotificationData notificationType(String notificationType) {
    this.notificationType = notificationType;
    return this;
  }

  /**
   * Get notificationType
   * @return notificationType
   */
  @javax.annotation.Nullable
  public String getNotificationType() {
    return notificationType;
  }

  public void setNotificationType(String notificationType) {
    this.notificationType = notificationType;
  }


  public AnalysisUpdateNotificationData notificationUser(String notificationUser) {
    this.notificationUser = notificationUser;
    return this;
  }

  /**
   * Get notificationUser
   * @return notificationUser
   */
  @javax.annotation.Nullable
  public String getNotificationUser() {
    return notificationUser;
  }

  public void setNotificationUser(String notificationUser) {
    this.notificationUser = notificationUser;
  }


  public AnalysisUpdateNotificationData notificationUserEmail(String notificationUserEmail) {
    this.notificationUserEmail = notificationUserEmail;
    return this;
  }

  /**
   * Get notificationUserEmail
   * @return notificationUserEmail
   */
  @javax.annotation.Nullable
  public String getNotificationUserEmail() {
    return notificationUserEmail;
  }

  public void setNotificationUserEmail(String notificationUserEmail) {
    this.notificationUserEmail = notificationUserEmail;
  }


  public AnalysisUpdateNotificationData notificationPayload(AnalysisUpdateNotificationPayload notificationPayload) {
    this.notificationPayload = notificationPayload;
    return this;
  }

  /**
   * Get notificationPayload
   * @return notificationPayload
   */
  @javax.annotation.Nullable
  public AnalysisUpdateNotificationPayload getNotificationPayload() {
    return notificationPayload;
  }

  public void setNotificationPayload(AnalysisUpdateNotificationPayload notificationPayload) {
    this.notificationPayload = notificationPayload;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalysisUpdateNotificationData analysisUpdateNotificationData = (AnalysisUpdateNotificationData) o;
    return Objects.equals(this.notificationType, analysisUpdateNotificationData.notificationType) &&
        Objects.equals(this.notificationUser, analysisUpdateNotificationData.notificationUser) &&
        Objects.equals(this.notificationUserEmail, analysisUpdateNotificationData.notificationUserEmail) &&
        Objects.equals(this.notificationPayload, analysisUpdateNotificationData.notificationPayload);
  }

  @Override
  public int hashCode() {
    return Objects.hash(notificationType, notificationUser, notificationUserEmail, notificationPayload);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalysisUpdateNotificationData {\n");
    sb.append("    notificationType: ").append(toIndentedString(notificationType)).append("\n");
    sb.append("    notificationUser: ").append(toIndentedString(notificationUser)).append("\n");
    sb.append("    notificationUserEmail: ").append(toIndentedString(notificationUserEmail)).append("\n");
    sb.append("    notificationPayload: ").append(toIndentedString(notificationPayload)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("notification_type");
    openapiFields.add("notification_user");
    openapiFields.add("notification_user_email");
    openapiFields.add("notification_payload");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnalysisUpdateNotificationData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnalysisUpdateNotificationData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalysisUpdateNotificationData is not found in the empty JSON string", AnalysisUpdateNotificationData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnalysisUpdateNotificationData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnalysisUpdateNotificationData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("notification_type") != null && !jsonObj.get("notification_type").isJsonNull()) && !jsonObj.get("notification_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notification_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notification_type").toString()));
      }
      if ((jsonObj.get("notification_user") != null && !jsonObj.get("notification_user").isJsonNull()) && !jsonObj.get("notification_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notification_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notification_user").toString()));
      }
      if ((jsonObj.get("notification_user_email") != null && !jsonObj.get("notification_user_email").isJsonNull()) && !jsonObj.get("notification_user_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notification_user_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notification_user_email").toString()));
      }
      // validate the optional field `notification_payload`
      if (jsonObj.get("notification_payload") != null && !jsonObj.get("notification_payload").isJsonNull()) {
        AnalysisUpdateNotificationPayload.validateJsonElement(jsonObj.get("notification_payload"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalysisUpdateNotificationData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalysisUpdateNotificationData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalysisUpdateNotificationData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalysisUpdateNotificationData.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalysisUpdateNotificationData>() {
           @Override
           public void write(JsonWriter out, AnalysisUpdateNotificationData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalysisUpdateNotificationData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnalysisUpdateNotificationData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnalysisUpdateNotificationData
   * @throws IOException if the JSON string is invalid with respect to AnalysisUpdateNotificationData
   */
  public static AnalysisUpdateNotificationData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalysisUpdateNotificationData.class);
  }

  /**
   * Convert an instance of AnalysisUpdateNotificationData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

