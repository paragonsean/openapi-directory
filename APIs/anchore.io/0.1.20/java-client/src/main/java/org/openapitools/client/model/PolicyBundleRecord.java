/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.PolicyBundle;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A policy bundle plus some metadata
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:58.810142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PolicyBundleRecord {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_POLICY_ID = "policyId";
  @SerializedName(SERIALIZED_NAME_POLICY_ID)
  private String policyId;

  public static final String SERIALIZED_NAME_POLICY_SOURCE = "policy_source";
  @SerializedName(SERIALIZED_NAME_POLICY_SOURCE)
  private String policySource;

  public static final String SERIALIZED_NAME_POLICYBUNDLE = "policybundle";
  @SerializedName(SERIALIZED_NAME_POLICYBUNDLE)
  private PolicyBundle policybundle;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public PolicyBundleRecord() {
  }

  public PolicyBundleRecord active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * True if the bundle is currently defined to be used automatically
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public PolicyBundleRecord createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public PolicyBundleRecord lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public PolicyBundleRecord policyId(String policyId) {
    this.policyId = policyId;
    return this;
  }

  /**
   * The bundle&#39;s identifier
   * @return policyId
   */
  @javax.annotation.Nullable
  public String getPolicyId() {
    return policyId;
  }

  public void setPolicyId(String policyId) {
    this.policyId = policyId;
  }


  public PolicyBundleRecord policySource(String policySource) {
    this.policySource = policySource;
    return this;
  }

  /**
   * Source location of where the policy bundle originated
   * @return policySource
   */
  @javax.annotation.Nullable
  public String getPolicySource() {
    return policySource;
  }

  public void setPolicySource(String policySource) {
    this.policySource = policySource;
  }


  public PolicyBundleRecord policybundle(PolicyBundle policybundle) {
    this.policybundle = policybundle;
    return this;
  }

  /**
   * Get policybundle
   * @return policybundle
   */
  @javax.annotation.Nullable
  public PolicyBundle getPolicybundle() {
    return policybundle;
  }

  public void setPolicybundle(PolicyBundle policybundle) {
    this.policybundle = policybundle;
  }


  public PolicyBundleRecord userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * UserId of the user that owns the bundle
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicyBundleRecord policyBundleRecord = (PolicyBundleRecord) o;
    return Objects.equals(this.active, policyBundleRecord.active) &&
        Objects.equals(this.createdAt, policyBundleRecord.createdAt) &&
        Objects.equals(this.lastUpdated, policyBundleRecord.lastUpdated) &&
        Objects.equals(this.policyId, policyBundleRecord.policyId) &&
        Objects.equals(this.policySource, policyBundleRecord.policySource) &&
        Objects.equals(this.policybundle, policyBundleRecord.policybundle) &&
        Objects.equals(this.userId, policyBundleRecord.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, createdAt, lastUpdated, policyId, policySource, policybundle, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyBundleRecord {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    policyId: ").append(toIndentedString(policyId)).append("\n");
    sb.append("    policySource: ").append(toIndentedString(policySource)).append("\n");
    sb.append("    policybundle: ").append(toIndentedString(policybundle)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("created_at");
    openapiFields.add("last_updated");
    openapiFields.add("policyId");
    openapiFields.add("policy_source");
    openapiFields.add("policybundle");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PolicyBundleRecord
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PolicyBundleRecord.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PolicyBundleRecord is not found in the empty JSON string", PolicyBundleRecord.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PolicyBundleRecord.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PolicyBundleRecord` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("policyId") != null && !jsonObj.get("policyId").isJsonNull()) && !jsonObj.get("policyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyId").toString()));
      }
      if ((jsonObj.get("policy_source") != null && !jsonObj.get("policy_source").isJsonNull()) && !jsonObj.get("policy_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy_source").toString()));
      }
      // validate the optional field `policybundle`
      if (jsonObj.get("policybundle") != null && !jsonObj.get("policybundle").isJsonNull()) {
        PolicyBundle.validateJsonElement(jsonObj.get("policybundle"));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PolicyBundleRecord.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PolicyBundleRecord' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PolicyBundleRecord> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PolicyBundleRecord.class));

       return (TypeAdapter<T>) new TypeAdapter<PolicyBundleRecord>() {
           @Override
           public void write(JsonWriter out, PolicyBundleRecord value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PolicyBundleRecord read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PolicyBundleRecord given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PolicyBundleRecord
   * @throws IOException if the JSON string is invalid with respect to PolicyBundleRecord
   */
  public static PolicyBundleRecord fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PolicyBundleRecord.class);
  }

  /**
   * Convert an instance of PolicyBundleRecord to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

