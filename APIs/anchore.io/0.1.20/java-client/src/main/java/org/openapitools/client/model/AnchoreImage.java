/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ImageDetail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A unique image in the engine. May have multiple tags or references. Unique to an image content across registries or repositories.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:58.810142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnchoreImage {
  /**
   * A state value for the current status of the analysis progress of the image
   */
  @JsonAdapter(AnalysisStatusEnum.Adapter.class)
  public enum AnalysisStatusEnum {
    NOT_ANALYZED("not_analyzed"),
    
    ANALYZING("analyzing"),
    
    ANALYZED("analyzed"),
    
    ANALYSIS_FAILED("analysis_failed");

    private String value;

    AnalysisStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnalysisStatusEnum fromValue(String value) {
      for (AnalysisStatusEnum b : AnalysisStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AnalysisStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnalysisStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnalysisStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AnalysisStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AnalysisStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ANALYSIS_STATUS = "analysis_status";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_STATUS)
  private AnalysisStatusEnum analysisStatus;

  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private Object annotations;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_IMAGE_DIGEST = "imageDigest";
  @SerializedName(SERIALIZED_NAME_IMAGE_DIGEST)
  private String imageDigest;

  public static final String SERIALIZED_NAME_IMAGE_CONTENT = "image_content";
  @SerializedName(SERIALIZED_NAME_IMAGE_CONTENT)
  private Object imageContent;

  public static final String SERIALIZED_NAME_IMAGE_DETAIL = "image_detail";
  @SerializedName(SERIALIZED_NAME_IMAGE_DETAIL)
  private List<ImageDetail> imageDetail = new ArrayList<>();

  /**
   * State of the image
   */
  @JsonAdapter(ImageStatusEnum.Adapter.class)
  public enum ImageStatusEnum {
    ACTIVE("active"),
    
    INACTIVE("inactive"),
    
    DISABLED("disabled");

    private String value;

    ImageStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ImageStatusEnum fromValue(String value) {
      for (ImageStatusEnum b : ImageStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ImageStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ImageStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ImageStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ImageStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ImageStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IMAGE_STATUS = "image_status";
  @SerializedName(SERIALIZED_NAME_IMAGE_STATUS)
  private ImageStatusEnum imageStatus;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_RECORD_VERSION = "record_version";
  @SerializedName(SERIALIZED_NAME_RECORD_VERSION)
  private String recordVersion;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public AnchoreImage() {
  }

  public AnchoreImage analysisStatus(AnalysisStatusEnum analysisStatus) {
    this.analysisStatus = analysisStatus;
    return this;
  }

  /**
   * A state value for the current status of the analysis progress of the image
   * @return analysisStatus
   */
  @javax.annotation.Nullable
  public AnalysisStatusEnum getAnalysisStatus() {
    return analysisStatus;
  }

  public void setAnalysisStatus(AnalysisStatusEnum analysisStatus) {
    this.analysisStatus = analysisStatus;
  }


  public AnchoreImage annotations(Object annotations) {
    this.annotations = annotations;
    return this;
  }

  /**
   * Get annotations
   * @return annotations
   */
  @javax.annotation.Nullable
  public Object getAnnotations() {
    return annotations;
  }

  public void setAnnotations(Object annotations) {
    this.annotations = annotations;
  }


  public AnchoreImage createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public AnchoreImage imageDigest(String imageDigest) {
    this.imageDigest = imageDigest;
    return this;
  }

  /**
   * Get imageDigest
   * @return imageDigest
   */
  @javax.annotation.Nullable
  public String getImageDigest() {
    return imageDigest;
  }

  public void setImageDigest(String imageDigest) {
    this.imageDigest = imageDigest;
  }


  public AnchoreImage imageContent(Object imageContent) {
    this.imageContent = imageContent;
    return this;
  }

  /**
   * A metadata content record for a specific image, containing different content type entries
   * @return imageContent
   */
  @javax.annotation.Nullable
  public Object getImageContent() {
    return imageContent;
  }

  public void setImageContent(Object imageContent) {
    this.imageContent = imageContent;
  }


  public AnchoreImage imageDetail(List<ImageDetail> imageDetail) {
    this.imageDetail = imageDetail;
    return this;
  }

  public AnchoreImage addImageDetailItem(ImageDetail imageDetailItem) {
    if (this.imageDetail == null) {
      this.imageDetail = new ArrayList<>();
    }
    this.imageDetail.add(imageDetailItem);
    return this;
  }

  /**
   * Details specific to an image reference and type such as tag and image source
   * @return imageDetail
   */
  @javax.annotation.Nullable
  public List<ImageDetail> getImageDetail() {
    return imageDetail;
  }

  public void setImageDetail(List<ImageDetail> imageDetail) {
    this.imageDetail = imageDetail;
  }


  public AnchoreImage imageStatus(ImageStatusEnum imageStatus) {
    this.imageStatus = imageStatus;
    return this;
  }

  /**
   * State of the image
   * @return imageStatus
   */
  @javax.annotation.Nullable
  public ImageStatusEnum getImageStatus() {
    return imageStatus;
  }

  public void setImageStatus(ImageStatusEnum imageStatus) {
    this.imageStatus = imageStatus;
  }


  public AnchoreImage lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public AnchoreImage recordVersion(String recordVersion) {
    this.recordVersion = recordVersion;
    return this;
  }

  /**
   * The version of the record, used for internal schema updates and data migrations.
   * @return recordVersion
   */
  @javax.annotation.Nullable
  public String getRecordVersion() {
    return recordVersion;
  }

  public void setRecordVersion(String recordVersion) {
    this.recordVersion = recordVersion;
  }


  public AnchoreImage userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnchoreImage anchoreImage = (AnchoreImage) o;
    return Objects.equals(this.analysisStatus, anchoreImage.analysisStatus) &&
        Objects.equals(this.annotations, anchoreImage.annotations) &&
        Objects.equals(this.createdAt, anchoreImage.createdAt) &&
        Objects.equals(this.imageDigest, anchoreImage.imageDigest) &&
        Objects.equals(this.imageContent, anchoreImage.imageContent) &&
        Objects.equals(this.imageDetail, anchoreImage.imageDetail) &&
        Objects.equals(this.imageStatus, anchoreImage.imageStatus) &&
        Objects.equals(this.lastUpdated, anchoreImage.lastUpdated) &&
        Objects.equals(this.recordVersion, anchoreImage.recordVersion) &&
        Objects.equals(this.userId, anchoreImage.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analysisStatus, annotations, createdAt, imageDigest, imageContent, imageDetail, imageStatus, lastUpdated, recordVersion, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnchoreImage {\n");
    sb.append("    analysisStatus: ").append(toIndentedString(analysisStatus)).append("\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    imageDigest: ").append(toIndentedString(imageDigest)).append("\n");
    sb.append("    imageContent: ").append(toIndentedString(imageContent)).append("\n");
    sb.append("    imageDetail: ").append(toIndentedString(imageDetail)).append("\n");
    sb.append("    imageStatus: ").append(toIndentedString(imageStatus)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    recordVersion: ").append(toIndentedString(recordVersion)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analysis_status");
    openapiFields.add("annotations");
    openapiFields.add("created_at");
    openapiFields.add("imageDigest");
    openapiFields.add("image_content");
    openapiFields.add("image_detail");
    openapiFields.add("image_status");
    openapiFields.add("last_updated");
    openapiFields.add("record_version");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnchoreImage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnchoreImage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnchoreImage is not found in the empty JSON string", AnchoreImage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnchoreImage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnchoreImage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("analysis_status") != null && !jsonObj.get("analysis_status").isJsonNull()) && !jsonObj.get("analysis_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `analysis_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("analysis_status").toString()));
      }
      // validate the optional field `analysis_status`
      if (jsonObj.get("analysis_status") != null && !jsonObj.get("analysis_status").isJsonNull()) {
        AnalysisStatusEnum.validateJsonElement(jsonObj.get("analysis_status"));
      }
      if ((jsonObj.get("imageDigest") != null && !jsonObj.get("imageDigest").isJsonNull()) && !jsonObj.get("imageDigest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageDigest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageDigest").toString()));
      }
      if (jsonObj.get("image_detail") != null && !jsonObj.get("image_detail").isJsonNull()) {
        JsonArray jsonArrayimageDetail = jsonObj.getAsJsonArray("image_detail");
        if (jsonArrayimageDetail != null) {
          // ensure the json data is an array
          if (!jsonObj.get("image_detail").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `image_detail` to be an array in the JSON string but got `%s`", jsonObj.get("image_detail").toString()));
          }

          // validate the optional field `image_detail` (array)
          for (int i = 0; i < jsonArrayimageDetail.size(); i++) {
            ImageDetail.validateJsonElement(jsonArrayimageDetail.get(i));
          };
        }
      }
      if ((jsonObj.get("image_status") != null && !jsonObj.get("image_status").isJsonNull()) && !jsonObj.get("image_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_status").toString()));
      }
      // validate the optional field `image_status`
      if (jsonObj.get("image_status") != null && !jsonObj.get("image_status").isJsonNull()) {
        ImageStatusEnum.validateJsonElement(jsonObj.get("image_status"));
      }
      if ((jsonObj.get("record_version") != null && !jsonObj.get("record_version").isJsonNull()) && !jsonObj.get("record_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `record_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("record_version").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnchoreImage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnchoreImage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnchoreImage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnchoreImage.class));

       return (TypeAdapter<T>) new TypeAdapter<AnchoreImage>() {
           @Override
           public void write(JsonWriter out, AnchoreImage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnchoreImage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnchoreImage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnchoreImage
   * @throws IOException if the JSON string is invalid with respect to AnchoreImage
   */
  public static AnchoreImage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnchoreImage.class);
  }

  /**
   * Convert an instance of AnchoreImage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

