/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiErrorResponse;
import org.openapitools.client.model.Subscription;
import org.openapitools.client.model.SubscriptionRequest;
import org.openapitools.client.model.SubscriptionUpdate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SubscriptionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SubscriptionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SubscriptionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addSubscription
     * @param subscriptionRequest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription add success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addSubscriptionCall(SubscriptionRequest subscriptionRequest, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionRequest;

        // create path and map variables
        String localVarPath = "/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addSubscriptionValidateBeforeCall(SubscriptionRequest subscriptionRequest, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionRequest' is set
        if (subscriptionRequest == null) {
            throw new ApiException("Missing the required parameter 'subscriptionRequest' when calling addSubscription(Async)");
        }

        return addSubscriptionCall(subscriptionRequest, xAnchoreAccount, _callback);

    }

    /**
     * Add a subscription of a specific type
     * Create a new subscription to watch a tag and get notifications of changes
     * @param subscriptionRequest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return List&lt;Subscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription add success </td><td>  -  </td></tr>
     </table>
     */
    public List<Subscription> addSubscription(SubscriptionRequest subscriptionRequest, String xAnchoreAccount) throws ApiException {
        ApiResponse<List<Subscription>> localVarResp = addSubscriptionWithHttpInfo(subscriptionRequest, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * Add a subscription of a specific type
     * Create a new subscription to watch a tag and get notifications of changes
     * @param subscriptionRequest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;List&lt;Subscription&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription add success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Subscription>> addSubscriptionWithHttpInfo(SubscriptionRequest subscriptionRequest, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = addSubscriptionValidateBeforeCall(subscriptionRequest, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<List<Subscription>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a subscription of a specific type (asynchronously)
     * Create a new subscription to watch a tag and get notifications of changes
     * @param subscriptionRequest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription add success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addSubscriptionAsync(SubscriptionRequest subscriptionRequest, String xAnchoreAccount, final ApiCallback<List<Subscription>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addSubscriptionValidateBeforeCall(subscriptionRequest, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<List<Subscription>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSubscription
     * @param subscriptionId  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSubscriptionCall(String subscriptionId, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSubscriptionValidateBeforeCall(String subscriptionId, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling deleteSubscription(Async)");
        }

        return deleteSubscriptionCall(subscriptionId, xAnchoreAccount, _callback);

    }

    /**
     * Delete subscriptions of a specific type
     * 
     * @param subscriptionId  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSubscription(String subscriptionId, String xAnchoreAccount) throws ApiException {
        deleteSubscriptionWithHttpInfo(subscriptionId, xAnchoreAccount);
    }

    /**
     * Delete subscriptions of a specific type
     * 
     * @param subscriptionId  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSubscriptionWithHttpInfo(String subscriptionId, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = deleteSubscriptionValidateBeforeCall(subscriptionId, xAnchoreAccount, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete subscriptions of a specific type (asynchronously)
     * 
     * @param subscriptionId  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSubscriptionAsync(String subscriptionId, String xAnchoreAccount, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSubscriptionValidateBeforeCall(subscriptionId, xAnchoreAccount, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSubscription
     * @param subscriptionId  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Filtered subscription list by type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubscriptionCall(String subscriptionId, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubscriptionValidateBeforeCall(String subscriptionId, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling getSubscription(Async)");
        }

        return getSubscriptionCall(subscriptionId, xAnchoreAccount, _callback);

    }

    /**
     * Get a specific subscription set
     * 
     * @param subscriptionId  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return List&lt;Subscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Filtered subscription list by type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public List<Subscription> getSubscription(String subscriptionId, String xAnchoreAccount) throws ApiException {
        ApiResponse<List<Subscription>> localVarResp = getSubscriptionWithHttpInfo(subscriptionId, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * Get a specific subscription set
     * 
     * @param subscriptionId  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;List&lt;Subscription&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Filtered subscription list by type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Subscription>> getSubscriptionWithHttpInfo(String subscriptionId, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = getSubscriptionValidateBeforeCall(subscriptionId, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<List<Subscription>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific subscription set (asynchronously)
     * 
     * @param subscriptionId  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Filtered subscription list by type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubscriptionAsync(String subscriptionId, String xAnchoreAccount, final ApiCallback<List<Subscription>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubscriptionValidateBeforeCall(subscriptionId, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<List<Subscription>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSubscriptions
     * @param subscriptionKey filter only subscriptions matching key (optional)
     * @param subscriptionType filter only subscriptions matching type (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription listing </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSubscriptionsCall(String subscriptionKey, String subscriptionType, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscriptionKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subscription_key", subscriptionKey));
        }

        if (subscriptionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subscription_type", subscriptionType));
        }

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSubscriptionsValidateBeforeCall(String subscriptionKey, String subscriptionType, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        return listSubscriptionsCall(subscriptionKey, subscriptionType, xAnchoreAccount, _callback);

    }

    /**
     * List all subscriptions
     * 
     * @param subscriptionKey filter only subscriptions matching key (optional)
     * @param subscriptionType filter only subscriptions matching type (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return List&lt;Subscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription listing </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public List<Subscription> listSubscriptions(String subscriptionKey, String subscriptionType, String xAnchoreAccount) throws ApiException {
        ApiResponse<List<Subscription>> localVarResp = listSubscriptionsWithHttpInfo(subscriptionKey, subscriptionType, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * List all subscriptions
     * 
     * @param subscriptionKey filter only subscriptions matching key (optional)
     * @param subscriptionType filter only subscriptions matching type (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;List&lt;Subscription&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription listing </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Subscription>> listSubscriptionsWithHttpInfo(String subscriptionKey, String subscriptionType, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = listSubscriptionsValidateBeforeCall(subscriptionKey, subscriptionType, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<List<Subscription>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all subscriptions (asynchronously)
     * 
     * @param subscriptionKey filter only subscriptions matching key (optional)
     * @param subscriptionType filter only subscriptions matching type (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription listing </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSubscriptionsAsync(String subscriptionKey, String subscriptionType, String xAnchoreAccount, final ApiCallback<List<Subscription>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSubscriptionsValidateBeforeCall(subscriptionKey, subscriptionType, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<List<Subscription>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSubscription
     * @param subscriptionId  (required)
     * @param subscriptionUpdate  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription add success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubscriptionCall(String subscriptionId, SubscriptionUpdate subscriptionUpdate, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionUpdate;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSubscriptionValidateBeforeCall(String subscriptionId, SubscriptionUpdate subscriptionUpdate, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling updateSubscription(Async)");
        }

        // verify the required parameter 'subscriptionUpdate' is set
        if (subscriptionUpdate == null) {
            throw new ApiException("Missing the required parameter 'subscriptionUpdate' when calling updateSubscription(Async)");
        }

        return updateSubscriptionCall(subscriptionId, subscriptionUpdate, xAnchoreAccount, _callback);

    }

    /**
     * Update an existing and specific subscription
     * 
     * @param subscriptionId  (required)
     * @param subscriptionUpdate  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return List&lt;Subscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription add success </td><td>  -  </td></tr>
     </table>
     */
    public List<Subscription> updateSubscription(String subscriptionId, SubscriptionUpdate subscriptionUpdate, String xAnchoreAccount) throws ApiException {
        ApiResponse<List<Subscription>> localVarResp = updateSubscriptionWithHttpInfo(subscriptionId, subscriptionUpdate, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * Update an existing and specific subscription
     * 
     * @param subscriptionId  (required)
     * @param subscriptionUpdate  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;List&lt;Subscription&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription add success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Subscription>> updateSubscriptionWithHttpInfo(String subscriptionId, SubscriptionUpdate subscriptionUpdate, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = updateSubscriptionValidateBeforeCall(subscriptionId, subscriptionUpdate, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<List<Subscription>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing and specific subscription (asynchronously)
     * 
     * @param subscriptionId  (required)
     * @param subscriptionUpdate  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription add success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubscriptionAsync(String subscriptionId, SubscriptionUpdate subscriptionUpdate, String xAnchoreAccount, final ApiCallback<List<Subscription>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSubscriptionValidateBeforeCall(subscriptionId, subscriptionUpdate, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<List<Subscription>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
