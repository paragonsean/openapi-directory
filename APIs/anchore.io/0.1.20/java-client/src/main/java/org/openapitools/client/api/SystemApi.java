/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AnchoreErrorCode;
import org.openapitools.client.model.ApiErrorResponse;
import org.openapitools.client.model.FeedMetadata;
import org.openapitools.client.model.FeedSyncResult;
import org.openapitools.client.model.GateSpec;
import org.openapitools.client.model.Service;
import org.openapitools.client.model.StatusResponse;
import org.openapitools.client.model.SystemStatusResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SystemApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SystemApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SystemApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteFeed
     * @param feed  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error processing the request. Retry expected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFeedCall(String feed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/feeds/{feed}"
            .replace("{" + "feed" + "}", localVarApiClient.escapeString(feed.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFeedValidateBeforeCall(String feed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'feed' is set
        if (feed == null) {
            throw new ApiException("Missing the required parameter 'feed' when calling deleteFeed(Async)");
        }

        return deleteFeedCall(feed, _callback);

    }

    /**
     * 
     * Delete the groups and data for the feed and disable the feed itself
     * @param feed  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error processing the request. Retry expected </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFeed(String feed) throws ApiException {
        deleteFeedWithHttpInfo(feed);
    }

    /**
     * 
     * Delete the groups and data for the feed and disable the feed itself
     * @param feed  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error processing the request. Retry expected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFeedWithHttpInfo(String feed) throws ApiException {
        okhttp3.Call localVarCall = deleteFeedValidateBeforeCall(feed, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete the groups and data for the feed and disable the feed itself
     * @param feed  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error processing the request. Retry expected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFeedAsync(String feed, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFeedValidateBeforeCall(feed, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFeedGroup
     * @param feed  (required)
     * @param group  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error processing the request. Retry expected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFeedGroupCall(String feed, String group, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/feeds/{feed}/{group}"
            .replace("{" + "feed" + "}", localVarApiClient.escapeString(feed.toString()))
            .replace("{" + "group" + "}", localVarApiClient.escapeString(group.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFeedGroupValidateBeforeCall(String feed, String group, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'feed' is set
        if (feed == null) {
            throw new ApiException("Missing the required parameter 'feed' when calling deleteFeedGroup(Async)");
        }

        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling deleteFeedGroup(Async)");
        }

        return deleteFeedGroupCall(feed, group, _callback);

    }

    /**
     * 
     * Delete the group data and disable the group itself
     * @param feed  (required)
     * @param group  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error processing the request. Retry expected </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFeedGroup(String feed, String group) throws ApiException {
        deleteFeedGroupWithHttpInfo(feed, group);
    }

    /**
     * 
     * Delete the group data and disable the group itself
     * @param feed  (required)
     * @param group  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error processing the request. Retry expected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFeedGroupWithHttpInfo(String feed, String group) throws ApiException {
        okhttp3.Call localVarCall = deleteFeedGroupValidateBeforeCall(feed, group, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete the group data and disable the group itself
     * @param feed  (required)
     * @param group  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error processing the request. Retry expected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFeedGroupAsync(String feed, String group, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFeedGroupValidateBeforeCall(feed, group, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteService
     * @param servicename  (required)
     * @param hostid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServiceCall(String servicename, String hostid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/services/{servicename}/{hostid}"
            .replace("{" + "servicename" + "}", localVarApiClient.escapeString(servicename.toString()))
            .replace("{" + "hostid" + "}", localVarApiClient.escapeString(hostid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteServiceValidateBeforeCall(String servicename, String hostid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'servicename' is set
        if (servicename == null) {
            throw new ApiException("Missing the required parameter 'servicename' when calling deleteService(Async)");
        }

        // verify the required parameter 'hostid' is set
        if (hostid == null) {
            throw new ApiException("Missing the required parameter 'hostid' when calling deleteService(Async)");
        }

        return deleteServiceCall(servicename, hostid, _callback);

    }

    /**
     * Delete the service config
     * 
     * @param servicename  (required)
     * @param hostid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteService(String servicename, String hostid) throws ApiException {
        deleteServiceWithHttpInfo(servicename, hostid);
    }

    /**
     * Delete the service config
     * 
     * @param servicename  (required)
     * @param hostid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteServiceWithHttpInfo(String servicename, String hostid) throws ApiException {
        okhttp3.Call localVarCall = deleteServiceValidateBeforeCall(servicename, hostid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the service config (asynchronously)
     * 
     * @param servicename  (required)
     * @param hostid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServiceAsync(String servicename, String hostid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteServiceValidateBeforeCall(servicename, hostid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeErrorCodes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error Codes Description </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeErrorCodesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/error_codes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeErrorCodesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return describeErrorCodesCall(_callback);

    }

    /**
     * Describe anchore engine error codes.
     * Describe anchore engine error codes.
     * @return List&lt;AnchoreErrorCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error Codes Description </td><td>  -  </td></tr>
     </table>
     */
    public List<AnchoreErrorCode> describeErrorCodes() throws ApiException {
        ApiResponse<List<AnchoreErrorCode>> localVarResp = describeErrorCodesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Describe anchore engine error codes.
     * Describe anchore engine error codes.
     * @return ApiResponse&lt;List&lt;AnchoreErrorCode&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error Codes Description </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AnchoreErrorCode>> describeErrorCodesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = describeErrorCodesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<AnchoreErrorCode>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Describe anchore engine error codes. (asynchronously)
     * Describe anchore engine error codes.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error Codes Description </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeErrorCodesAsync(final ApiCallback<List<AnchoreErrorCode>> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeErrorCodesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<AnchoreErrorCode>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describePolicy
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Policy Language Description </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describePolicyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/policy_spec";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describePolicyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return describePolicyCall(_callback);

    }

    /**
     * Describe the policy language spec implemented by this service.
     * Get the policy language spec for this service
     * @return List&lt;GateSpec&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Policy Language Description </td><td>  -  </td></tr>
     </table>
     */
    public List<GateSpec> describePolicy() throws ApiException {
        ApiResponse<List<GateSpec>> localVarResp = describePolicyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Describe the policy language spec implemented by this service.
     * Get the policy language spec for this service
     * @return ApiResponse&lt;List&lt;GateSpec&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Policy Language Description </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GateSpec>> describePolicyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = describePolicyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<GateSpec>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Describe the policy language spec implemented by this service. (asynchronously)
     * Get the policy language spec for this service
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Policy Language Description </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describePolicyAsync(final ApiCallback<List<GateSpec>> _callback) throws ApiException {

        okhttp3.Call localVarCall = describePolicyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<GateSpec>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServiceDetail
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status listing </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceDetailCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServiceDetailValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getServiceDetailCall(_callback);

    }

    /**
     * System status
     * Get the system status including queue lengths
     * @return SystemStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status listing </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public SystemStatusResponse getServiceDetail() throws ApiException {
        ApiResponse<SystemStatusResponse> localVarResp = getServiceDetailWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * System status
     * Get the system status including queue lengths
     * @return ApiResponse&lt;SystemStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status listing </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SystemStatusResponse> getServiceDetailWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getServiceDetailValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SystemStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * System status (asynchronously)
     * Get the system status including queue lengths
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status listing </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceDetailAsync(final ApiCallback<SystemStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServiceDetailValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SystemStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServicesByName
     * @param servicename  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service Info </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServicesByNameCall(String servicename, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/services/{servicename}"
            .replace("{" + "servicename" + "}", localVarApiClient.escapeString(servicename.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServicesByNameValidateBeforeCall(String servicename, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'servicename' is set
        if (servicename == null) {
            throw new ApiException("Missing the required parameter 'servicename' when calling getServicesByName(Async)");
        }

        return getServicesByNameCall(servicename, _callback);

    }

    /**
     * Get a service configuration and state
     * 
     * @param servicename  (required)
     * @return List&lt;Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service Info </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public List<Service> getServicesByName(String servicename) throws ApiException {
        ApiResponse<List<Service>> localVarResp = getServicesByNameWithHttpInfo(servicename);
        return localVarResp.getData();
    }

    /**
     * Get a service configuration and state
     * 
     * @param servicename  (required)
     * @return ApiResponse&lt;List&lt;Service&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service Info </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Service>> getServicesByNameWithHttpInfo(String servicename) throws ApiException {
        okhttp3.Call localVarCall = getServicesByNameValidateBeforeCall(servicename, null);
        Type localVarReturnType = new TypeToken<List<Service>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a service configuration and state (asynchronously)
     * 
     * @param servicename  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service Info </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServicesByNameAsync(String servicename, final ApiCallback<List<Service>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServicesByNameValidateBeforeCall(servicename, _callback);
        Type localVarReturnType = new TypeToken<List<Service>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServicesByNameAndHost
     * @param servicename  (required)
     * @param hostid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing of registered services </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServicesByNameAndHostCall(String servicename, String hostid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/services/{servicename}/{hostid}"
            .replace("{" + "servicename" + "}", localVarApiClient.escapeString(servicename.toString()))
            .replace("{" + "hostid" + "}", localVarApiClient.escapeString(hostid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServicesByNameAndHostValidateBeforeCall(String servicename, String hostid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'servicename' is set
        if (servicename == null) {
            throw new ApiException("Missing the required parameter 'servicename' when calling getServicesByNameAndHost(Async)");
        }

        // verify the required parameter 'hostid' is set
        if (hostid == null) {
            throw new ApiException("Missing the required parameter 'hostid' when calling getServicesByNameAndHost(Async)");
        }

        return getServicesByNameAndHostCall(servicename, hostid, _callback);

    }

    /**
     * Get service config for a specific host
     * 
     * @param servicename  (required)
     * @param hostid  (required)
     * @return List&lt;Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing of registered services </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public List<Service> getServicesByNameAndHost(String servicename, String hostid) throws ApiException {
        ApiResponse<List<Service>> localVarResp = getServicesByNameAndHostWithHttpInfo(servicename, hostid);
        return localVarResp.getData();
    }

    /**
     * Get service config for a specific host
     * 
     * @param servicename  (required)
     * @param hostid  (required)
     * @return ApiResponse&lt;List&lt;Service&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing of registered services </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Service>> getServicesByNameAndHostWithHttpInfo(String servicename, String hostid) throws ApiException {
        okhttp3.Call localVarCall = getServicesByNameAndHostValidateBeforeCall(servicename, hostid, null);
        Type localVarReturnType = new TypeToken<List<Service>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get service config for a specific host (asynchronously)
     * 
     * @param servicename  (required)
     * @param hostid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Listing of registered services </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServicesByNameAndHostAsync(String servicename, String hostid, final ApiCallback<List<Service>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServicesByNameAndHostValidateBeforeCall(servicename, hostid, _callback);
        Type localVarReturnType = new TypeToken<List<Service>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStatus
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status listing </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatusCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatusValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getStatusCall(_callback);

    }

    /**
     * Service status
     * Get the API service status
     * @return StatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status listing </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public StatusResponse getStatus() throws ApiException {
        ApiResponse<StatusResponse> localVarResp = getStatusWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Service status
     * Get the API service status
     * @return ApiResponse&lt;StatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status listing </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StatusResponse> getStatusWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getStatusValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Service status (asynchronously)
     * Get the API service status
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status listing </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatusAsync(final ApiCallback<StatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatusValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSystemFeeds
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSystemFeedsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/feeds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSystemFeedsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSystemFeedsCall(_callback);

    }

    /**
     * list feeds operations and information
     * Return a list of feed and their groups along with update and record count information. This data reflects the state of the policy engine, not the upstream feed service itself.
     * @return List&lt;FeedMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public List<FeedMetadata> getSystemFeeds() throws ApiException {
        ApiResponse<List<FeedMetadata>> localVarResp = getSystemFeedsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * list feeds operations and information
     * Return a list of feed and their groups along with update and record count information. This data reflects the state of the policy engine, not the upstream feed service itself.
     * @return ApiResponse&lt;List&lt;FeedMetadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FeedMetadata>> getSystemFeedsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSystemFeedsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<FeedMetadata>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * list feeds operations and information (asynchronously)
     * Return a list of feed and their groups along with update and record count information. This data reflects the state of the policy engine, not the upstream feed service itself.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSystemFeedsAsync(final ApiCallback<List<FeedMetadata>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSystemFeedsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<FeedMetadata>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listServices
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service listing </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServicesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listServicesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listServicesCall(_callback);

    }

    /**
     * List system services
     * 
     * @return List&lt;Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service listing </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public List<Service> listServices() throws ApiException {
        ApiResponse<List<Service>> localVarResp = listServicesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List system services
     * 
     * @return ApiResponse&lt;List&lt;Service&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service listing </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Service>> listServicesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listServicesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Service>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List system services (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service listing </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServicesAsync(final ApiCallback<List<Service>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listServicesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Service>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSystemFeeds
     * @param flush instruct system to flush existing data feeds records from anchore-engine (optional)
     * @param sync instruct system to re-sync data feeds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Feeds operation success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSystemFeedsCall(Boolean flush, Boolean sync, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/feeds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (flush != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flush", flush));
        }

        if (sync != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sync", sync));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSystemFeedsValidateBeforeCall(Boolean flush, Boolean sync, final ApiCallback _callback) throws ApiException {
        return postSystemFeedsCall(flush, sync, _callback);

    }

    /**
     * trigger feeds operations
     * Execute a synchronous feed sync operation. The response will block until complete, then return the result summary.
     * @param flush instruct system to flush existing data feeds records from anchore-engine (optional)
     * @param sync instruct system to re-sync data feeds (optional)
     * @return List&lt;FeedSyncResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Feeds operation success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public List<FeedSyncResult> postSystemFeeds(Boolean flush, Boolean sync) throws ApiException {
        ApiResponse<List<FeedSyncResult>> localVarResp = postSystemFeedsWithHttpInfo(flush, sync);
        return localVarResp.getData();
    }

    /**
     * trigger feeds operations
     * Execute a synchronous feed sync operation. The response will block until complete, then return the result summary.
     * @param flush instruct system to flush existing data feeds records from anchore-engine (optional)
     * @param sync instruct system to re-sync data feeds (optional)
     * @return ApiResponse&lt;List&lt;FeedSyncResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Feeds operation success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FeedSyncResult>> postSystemFeedsWithHttpInfo(Boolean flush, Boolean sync) throws ApiException {
        okhttp3.Call localVarCall = postSystemFeedsValidateBeforeCall(flush, sync, null);
        Type localVarReturnType = new TypeToken<List<FeedSyncResult>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * trigger feeds operations (asynchronously)
     * Execute a synchronous feed sync operation. The response will block until complete, then return the result summary.
     * @param flush instruct system to flush existing data feeds records from anchore-engine (optional)
     * @param sync instruct system to re-sync data feeds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Feeds operation success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSystemFeedsAsync(Boolean flush, Boolean sync, final ApiCallback<List<FeedSyncResult>> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSystemFeedsValidateBeforeCall(flush, sync, _callback);
        Type localVarReturnType = new TypeToken<List<FeedSyncResult>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testWebhook
     * @param webhookType The Webhook Type that we should test (required)
     * @param notificationType What kind of Notification to send (optional, default to tag_update)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Webhook was sent successfully. Schemas may be found under Models (PolicyEvalNotification, TagUpdateNotification, VulnUpdateNotification, AnalysisUpdateNotification) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The Webhook failed to send due to misconfiguration </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The Webhook failed to send due to an Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testWebhookCall(String webhookType, String notificationType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/webhooks/{webhook_type}/test"
            .replace("{" + "webhook_type" + "}", localVarApiClient.escapeString(webhookType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (notificationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notification_type", notificationType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testWebhookValidateBeforeCall(String webhookType, String notificationType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookType' is set
        if (webhookType == null) {
            throw new ApiException("Missing the required parameter 'webhookType' when calling testWebhook(Async)");
        }

        return testWebhookCall(webhookType, notificationType, _callback);

    }

    /**
     * Adds the capabilities to test a webhook delivery for the given notification type
     * Loads the Webhook configuration for webhook_type, and sends the notification out as a test
     * @param webhookType The Webhook Type that we should test (required)
     * @param notificationType What kind of Notification to send (optional, default to tag_update)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Webhook was sent successfully. Schemas may be found under Models (PolicyEvalNotification, TagUpdateNotification, VulnUpdateNotification, AnalysisUpdateNotification) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The Webhook failed to send due to misconfiguration </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The Webhook failed to send due to an Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public void testWebhook(String webhookType, String notificationType) throws ApiException {
        testWebhookWithHttpInfo(webhookType, notificationType);
    }

    /**
     * Adds the capabilities to test a webhook delivery for the given notification type
     * Loads the Webhook configuration for webhook_type, and sends the notification out as a test
     * @param webhookType The Webhook Type that we should test (required)
     * @param notificationType What kind of Notification to send (optional, default to tag_update)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Webhook was sent successfully. Schemas may be found under Models (PolicyEvalNotification, TagUpdateNotification, VulnUpdateNotification, AnalysisUpdateNotification) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The Webhook failed to send due to misconfiguration </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The Webhook failed to send due to an Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> testWebhookWithHttpInfo(String webhookType, String notificationType) throws ApiException {
        okhttp3.Call localVarCall = testWebhookValidateBeforeCall(webhookType, notificationType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Adds the capabilities to test a webhook delivery for the given notification type (asynchronously)
     * Loads the Webhook configuration for webhook_type, and sends the notification out as a test
     * @param webhookType The Webhook Type that we should test (required)
     * @param notificationType What kind of Notification to send (optional, default to tag_update)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Webhook was sent successfully. Schemas may be found under Models (PolicyEvalNotification, TagUpdateNotification, VulnUpdateNotification, AnalysisUpdateNotification) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The Webhook failed to send due to misconfiguration </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The Webhook failed to send due to an Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testWebhookAsync(String webhookType, String notificationType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = testWebhookValidateBeforeCall(webhookType, notificationType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for toggleFeedEnabled
     * @param feed  (required)
     * @param enabled  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FeedInfo </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, fix and resend </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error processing the request. Retry expected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toggleFeedEnabledCall(String feed, Boolean enabled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/feeds/{feed}"
            .replace("{" + "feed" + "}", localVarApiClient.escapeString(feed.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (enabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enabled", enabled));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toggleFeedEnabledValidateBeforeCall(String feed, Boolean enabled, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'feed' is set
        if (feed == null) {
            throw new ApiException("Missing the required parameter 'feed' when calling toggleFeedEnabled(Async)");
        }

        // verify the required parameter 'enabled' is set
        if (enabled == null) {
            throw new ApiException("Missing the required parameter 'enabled' when calling toggleFeedEnabled(Async)");
        }

        return toggleFeedEnabledCall(feed, enabled, _callback);

    }

    /**
     * 
     * Disable the feed so that it does not sync on subsequent sync operations
     * @param feed  (required)
     * @param enabled  (required)
     * @return FeedMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FeedInfo </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, fix and resend </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error processing the request. Retry expected </td><td>  -  </td></tr>
     </table>
     */
    public FeedMetadata toggleFeedEnabled(String feed, Boolean enabled) throws ApiException {
        ApiResponse<FeedMetadata> localVarResp = toggleFeedEnabledWithHttpInfo(feed, enabled);
        return localVarResp.getData();
    }

    /**
     * 
     * Disable the feed so that it does not sync on subsequent sync operations
     * @param feed  (required)
     * @param enabled  (required)
     * @return ApiResponse&lt;FeedMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FeedInfo </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, fix and resend </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error processing the request. Retry expected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FeedMetadata> toggleFeedEnabledWithHttpInfo(String feed, Boolean enabled) throws ApiException {
        okhttp3.Call localVarCall = toggleFeedEnabledValidateBeforeCall(feed, enabled, null);
        Type localVarReturnType = new TypeToken<FeedMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Disable the feed so that it does not sync on subsequent sync operations
     * @param feed  (required)
     * @param enabled  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FeedInfo </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, fix and resend </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error processing the request. Retry expected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toggleFeedEnabledAsync(String feed, Boolean enabled, final ApiCallback<FeedMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = toggleFeedEnabledValidateBeforeCall(feed, enabled, _callback);
        Type localVarReturnType = new TypeToken<FeedMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toggleGroupEnabled
     * @param feed  (required)
     * @param group  (required)
     * @param enabled  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FeedInfo listing </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, fix and resend </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error processing the request. Retry expected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toggleGroupEnabledCall(String feed, String group, Boolean enabled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/feeds/{feed}/{group}"
            .replace("{" + "feed" + "}", localVarApiClient.escapeString(feed.toString()))
            .replace("{" + "group" + "}", localVarApiClient.escapeString(group.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (enabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enabled", enabled));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toggleGroupEnabledValidateBeforeCall(String feed, String group, Boolean enabled, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'feed' is set
        if (feed == null) {
            throw new ApiException("Missing the required parameter 'feed' when calling toggleGroupEnabled(Async)");
        }

        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling toggleGroupEnabled(Async)");
        }

        // verify the required parameter 'enabled' is set
        if (enabled == null) {
            throw new ApiException("Missing the required parameter 'enabled' when calling toggleGroupEnabled(Async)");
        }

        return toggleGroupEnabledCall(feed, group, enabled, _callback);

    }

    /**
     * 
     * Disable a specific group within a feed to not sync
     * @param feed  (required)
     * @param group  (required)
     * @param enabled  (required)
     * @return List&lt;FeedMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FeedInfo listing </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, fix and resend </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error processing the request. Retry expected </td><td>  -  </td></tr>
     </table>
     */
    public List<FeedMetadata> toggleGroupEnabled(String feed, String group, Boolean enabled) throws ApiException {
        ApiResponse<List<FeedMetadata>> localVarResp = toggleGroupEnabledWithHttpInfo(feed, group, enabled);
        return localVarResp.getData();
    }

    /**
     * 
     * Disable a specific group within a feed to not sync
     * @param feed  (required)
     * @param group  (required)
     * @param enabled  (required)
     * @return ApiResponse&lt;List&lt;FeedMetadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FeedInfo listing </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, fix and resend </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error processing the request. Retry expected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FeedMetadata>> toggleGroupEnabledWithHttpInfo(String feed, String group, Boolean enabled) throws ApiException {
        okhttp3.Call localVarCall = toggleGroupEnabledValidateBeforeCall(feed, group, enabled, null);
        Type localVarReturnType = new TypeToken<List<FeedMetadata>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Disable a specific group within a feed to not sync
     * @param feed  (required)
     * @param group  (required)
     * @param enabled  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> FeedInfo listing </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, fix and resend </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error processing the request. Retry expected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toggleGroupEnabledAsync(String feed, String group, Boolean enabled, final ApiCallback<List<FeedMetadata>> _callback) throws ApiException {

        okhttp3.Call localVarCall = toggleGroupEnabledValidateBeforeCall(feed, group, enabled, _callback);
        Type localVarReturnType = new TypeToken<List<FeedMetadata>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
