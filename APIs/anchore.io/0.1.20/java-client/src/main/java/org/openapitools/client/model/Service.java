/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StatusResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A service status record
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:58.810142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Service {
  public static final String SERIALIZED_NAME_BASE_URL = "base_url";
  @SerializedName(SERIALIZED_NAME_BASE_URL)
  private String baseUrl;

  public static final String SERIALIZED_NAME_HOSTID = "hostid";
  @SerializedName(SERIALIZED_NAME_HOSTID)
  private String hostid;

  public static final String SERIALIZED_NAME_SERVICE_DETAIL = "service_detail";
  @SerializedName(SERIALIZED_NAME_SERVICE_DETAIL)
  private StatusResponse serviceDetail;

  public static final String SERIALIZED_NAME_SERVICENAME = "servicename";
  @SerializedName(SERIALIZED_NAME_SERVICENAME)
  private String servicename;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Boolean status;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "status_message";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public Service() {
  }

  public Service baseUrl(String baseUrl) {
    this.baseUrl = baseUrl;
    return this;
  }

  /**
   * The url to reach the service, including port as needed
   * @return baseUrl
   */
  @javax.annotation.Nullable
  public String getBaseUrl() {
    return baseUrl;
  }

  public void setBaseUrl(String baseUrl) {
    this.baseUrl = baseUrl;
  }


  public Service hostid(String hostid) {
    this.hostid = hostid;
    return this;
  }

  /**
   * The unique id of the host on which the service is executing
   * @return hostid
   */
  @javax.annotation.Nullable
  public String getHostid() {
    return hostid;
  }

  public void setHostid(String hostid) {
    this.hostid = hostid;
  }


  public Service serviceDetail(StatusResponse serviceDetail) {
    this.serviceDetail = serviceDetail;
    return this;
  }

  /**
   * Get serviceDetail
   * @return serviceDetail
   */
  @javax.annotation.Nullable
  public StatusResponse getServiceDetail() {
    return serviceDetail;
  }

  public void setServiceDetail(StatusResponse serviceDetail) {
    this.serviceDetail = serviceDetail;
  }


  public Service servicename(String servicename) {
    this.servicename = servicename;
    return this;
  }

  /**
   * Registered service name
   * @return servicename
   */
  @javax.annotation.Nullable
  public String getServicename() {
    return servicename;
  }

  public void setServicename(String servicename) {
    this.servicename = servicename;
  }


  public Service status(Boolean status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Boolean getStatus() {
    return status;
  }

  public void setStatus(Boolean status) {
    this.status = status;
  }


  public Service statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * A state indicating the condition of the service. Normal operation is &#39;registered&#39;
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public Service version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The version of the service as reported by the service implementation on registration
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Service service = (Service) o;
    return Objects.equals(this.baseUrl, service.baseUrl) &&
        Objects.equals(this.hostid, service.hostid) &&
        Objects.equals(this.serviceDetail, service.serviceDetail) &&
        Objects.equals(this.servicename, service.servicename) &&
        Objects.equals(this.status, service.status) &&
        Objects.equals(this.statusMessage, service.statusMessage) &&
        Objects.equals(this.version, service.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseUrl, hostid, serviceDetail, servicename, status, statusMessage, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Service {\n");
    sb.append("    baseUrl: ").append(toIndentedString(baseUrl)).append("\n");
    sb.append("    hostid: ").append(toIndentedString(hostid)).append("\n");
    sb.append("    serviceDetail: ").append(toIndentedString(serviceDetail)).append("\n");
    sb.append("    servicename: ").append(toIndentedString(servicename)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("base_url");
    openapiFields.add("hostid");
    openapiFields.add("service_detail");
    openapiFields.add("servicename");
    openapiFields.add("status");
    openapiFields.add("status_message");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Service
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Service.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Service is not found in the empty JSON string", Service.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Service.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Service` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("base_url") != null && !jsonObj.get("base_url").isJsonNull()) && !jsonObj.get("base_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base_url").toString()));
      }
      if ((jsonObj.get("hostid") != null && !jsonObj.get("hostid").isJsonNull()) && !jsonObj.get("hostid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostid").toString()));
      }
      // validate the optional field `service_detail`
      if (jsonObj.get("service_detail") != null && !jsonObj.get("service_detail").isJsonNull()) {
        StatusResponse.validateJsonElement(jsonObj.get("service_detail"));
      }
      if ((jsonObj.get("servicename") != null && !jsonObj.get("servicename").isJsonNull()) && !jsonObj.get("servicename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `servicename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("servicename").toString()));
      }
      if ((jsonObj.get("status_message") != null && !jsonObj.get("status_message").isJsonNull()) && !jsonObj.get("status_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_message").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Service.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Service' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Service> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Service.class));

       return (TypeAdapter<T>) new TypeAdapter<Service>() {
           @Override
           public void write(JsonWriter out, Service value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Service read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Service given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Service
   * @throws IOException if the JSON string is invalid with respect to Service
   */
  public static Service fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Service.class);
  }

  /**
   * Convert an instance of Service to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

