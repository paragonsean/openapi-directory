/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NvdDataObject;
import org.openapitools.client.model.PackageReference;
import org.openapitools.client.model.VendorDataObject;
import org.openapitools.client.model.VulnerabilityReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single vulnerability record in a single namespace, the unique key is the combination of the id and namespace
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:58.810142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StandaloneVulnerability {
  public static final String SERIALIZED_NAME_AFFECTED_PACKAGES = "affected_packages";
  @SerializedName(SERIALIZED_NAME_AFFECTED_PACKAGES)
  private List<PackageReference> affectedPackages = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_NVD_DATA = "nvd_data";
  @SerializedName(SERIALIZED_NAME_NVD_DATA)
  private List<NvdDataObject> nvdData = new ArrayList<>();

  public static final String SERIALIZED_NAME_REFERENCES = "references";
  @SerializedName(SERIALIZED_NAME_REFERENCES)
  private List<VulnerabilityReference> references = new ArrayList<>();

  /**
   * Severity label specific to the namepsace
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    UNKNOWN("Unknown"),
    
    NEGLIGIBLE("Negligible"),
    
    LOW("Low"),
    
    MEDIUM("Medium"),
    
    HIGH("High"),
    
    CRITICAL("Critical");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private SeverityEnum severity;

  public static final String SERIALIZED_NAME_VENDOR_DATA = "vendor_data";
  @SerializedName(SERIALIZED_NAME_VENDOR_DATA)
  private List<VendorDataObject> vendorData = new ArrayList<>();

  public StandaloneVulnerability() {
  }

  public StandaloneVulnerability affectedPackages(List<PackageReference> affectedPackages) {
    this.affectedPackages = affectedPackages;
    return this;
  }

  public StandaloneVulnerability addAffectedPackagesItem(PackageReference affectedPackagesItem) {
    if (this.affectedPackages == null) {
      this.affectedPackages = new ArrayList<>();
    }
    this.affectedPackages.add(affectedPackagesItem);
    return this;
  }

  /**
   * The array of packages (typically packages) that are vulnerable-to or provide fixes-for this vulnerability
   * @return affectedPackages
   */
  @javax.annotation.Nullable
  public List<PackageReference> getAffectedPackages() {
    return affectedPackages;
  }

  public void setAffectedPackages(List<PackageReference> affectedPackages) {
    this.affectedPackages = affectedPackages;
  }


  public StandaloneVulnerability description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the vulnerability if available
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public StandaloneVulnerability id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Vulnerability identifier. May be CVE-X, RHSA-X, etc. Not necessarily unique across namespaces
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public StandaloneVulnerability link(String link) {
    this.link = link;
    return this;
  }

  /**
   * URL for the upstream CVE record in the reporting source (e.g. ubuntu security tracker)
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public StandaloneVulnerability namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * The namespace for the vulnerability record to avoid conflicts for the same id in different distros or sources (e.g. deb vs ubuntu for same CVE)
   * @return namespace
   */
  @javax.annotation.Nullable
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public StandaloneVulnerability nvdData(List<NvdDataObject> nvdData) {
    this.nvdData = nvdData;
    return this;
  }

  public StandaloneVulnerability addNvdDataItem(NvdDataObject nvdDataItem) {
    if (this.nvdData == null) {
      this.nvdData = new ArrayList<>();
    }
    this.nvdData.add(nvdDataItem);
    return this;
  }

  /**
   * List of Nvd Data objects
   * @return nvdData
   */
  @javax.annotation.Nullable
  public List<NvdDataObject> getNvdData() {
    return nvdData;
  }

  public void setNvdData(List<NvdDataObject> nvdData) {
    this.nvdData = nvdData;
  }


  public StandaloneVulnerability references(List<VulnerabilityReference> references) {
    this.references = references;
    return this;
  }

  public StandaloneVulnerability addReferencesItem(VulnerabilityReference referencesItem) {
    if (this.references == null) {
      this.references = new ArrayList<>();
    }
    this.references.add(referencesItem);
    return this;
  }

  /**
   * List of references including
   * @return references
   */
  @javax.annotation.Nullable
  public List<VulnerabilityReference> getReferences() {
    return references;
  }

  public void setReferences(List<VulnerabilityReference> references) {
    this.references = references;
  }


  public StandaloneVulnerability severity(SeverityEnum severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Severity label specific to the namepsace
   * @return severity
   */
  @javax.annotation.Nullable
  public SeverityEnum getSeverity() {
    return severity;
  }

  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }


  public StandaloneVulnerability vendorData(List<VendorDataObject> vendorData) {
    this.vendorData = vendorData;
    return this;
  }

  public StandaloneVulnerability addVendorDataItem(VendorDataObject vendorDataItem) {
    if (this.vendorData == null) {
      this.vendorData = new ArrayList<>();
    }
    this.vendorData.add(vendorDataItem);
    return this;
  }

  /**
   * List of Vendor Data objects
   * @return vendorData
   */
  @javax.annotation.Nullable
  public List<VendorDataObject> getVendorData() {
    return vendorData;
  }

  public void setVendorData(List<VendorDataObject> vendorData) {
    this.vendorData = vendorData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StandaloneVulnerability standaloneVulnerability = (StandaloneVulnerability) o;
    return Objects.equals(this.affectedPackages, standaloneVulnerability.affectedPackages) &&
        Objects.equals(this.description, standaloneVulnerability.description) &&
        Objects.equals(this.id, standaloneVulnerability.id) &&
        Objects.equals(this.link, standaloneVulnerability.link) &&
        Objects.equals(this.namespace, standaloneVulnerability.namespace) &&
        Objects.equals(this.nvdData, standaloneVulnerability.nvdData) &&
        Objects.equals(this.references, standaloneVulnerability.references) &&
        Objects.equals(this.severity, standaloneVulnerability.severity) &&
        Objects.equals(this.vendorData, standaloneVulnerability.vendorData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affectedPackages, description, id, link, namespace, nvdData, references, severity, vendorData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StandaloneVulnerability {\n");
    sb.append("    affectedPackages: ").append(toIndentedString(affectedPackages)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    nvdData: ").append(toIndentedString(nvdData)).append("\n");
    sb.append("    references: ").append(toIndentedString(references)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    vendorData: ").append(toIndentedString(vendorData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("affected_packages");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("link");
    openapiFields.add("namespace");
    openapiFields.add("nvd_data");
    openapiFields.add("references");
    openapiFields.add("severity");
    openapiFields.add("vendor_data");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StandaloneVulnerability
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StandaloneVulnerability.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StandaloneVulnerability is not found in the empty JSON string", StandaloneVulnerability.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StandaloneVulnerability.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StandaloneVulnerability` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("affected_packages") != null && !jsonObj.get("affected_packages").isJsonNull()) {
        JsonArray jsonArrayaffectedPackages = jsonObj.getAsJsonArray("affected_packages");
        if (jsonArrayaffectedPackages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("affected_packages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `affected_packages` to be an array in the JSON string but got `%s`", jsonObj.get("affected_packages").toString()));
          }

          // validate the optional field `affected_packages` (array)
          for (int i = 0; i < jsonArrayaffectedPackages.size(); i++) {
            PackageReference.validateJsonElement(jsonArrayaffectedPackages.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) && !jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
      if (jsonObj.get("nvd_data") != null && !jsonObj.get("nvd_data").isJsonNull()) {
        JsonArray jsonArraynvdData = jsonObj.getAsJsonArray("nvd_data");
        if (jsonArraynvdData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nvd_data").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nvd_data` to be an array in the JSON string but got `%s`", jsonObj.get("nvd_data").toString()));
          }

          // validate the optional field `nvd_data` (array)
          for (int i = 0; i < jsonArraynvdData.size(); i++) {
            NvdDataObject.validateJsonElement(jsonArraynvdData.get(i));
          };
        }
      }
      if (jsonObj.get("references") != null && !jsonObj.get("references").isJsonNull()) {
        JsonArray jsonArrayreferences = jsonObj.getAsJsonArray("references");
        if (jsonArrayreferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("references").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `references` to be an array in the JSON string but got `%s`", jsonObj.get("references").toString()));
          }

          // validate the optional field `references` (array)
          for (int i = 0; i < jsonArrayreferences.size(); i++) {
            VulnerabilityReference.validateJsonElement(jsonArrayreferences.get(i));
          };
        }
      }
      if ((jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) && !jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      // validate the optional field `severity`
      if (jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) {
        SeverityEnum.validateJsonElement(jsonObj.get("severity"));
      }
      if (jsonObj.get("vendor_data") != null && !jsonObj.get("vendor_data").isJsonNull()) {
        JsonArray jsonArrayvendorData = jsonObj.getAsJsonArray("vendor_data");
        if (jsonArrayvendorData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vendor_data").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vendor_data` to be an array in the JSON string but got `%s`", jsonObj.get("vendor_data").toString()));
          }

          // validate the optional field `vendor_data` (array)
          for (int i = 0; i < jsonArrayvendorData.size(); i++) {
            VendorDataObject.validateJsonElement(jsonArrayvendorData.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StandaloneVulnerability.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StandaloneVulnerability' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StandaloneVulnerability> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StandaloneVulnerability.class));

       return (TypeAdapter<T>) new TypeAdapter<StandaloneVulnerability>() {
           @Override
           public void write(JsonWriter out, StandaloneVulnerability value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StandaloneVulnerability read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StandaloneVulnerability given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StandaloneVulnerability
   * @throws IOException if the JSON string is invalid with respect to StandaloneVulnerability
   */
  public static StandaloneVulnerability fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StandaloneVulnerability.class);
  }

  /**
   * Convert an instance of StandaloneVulnerability to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

