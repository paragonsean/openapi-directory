/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A metadata detail record for a specific image. Multiple detail records may map a single catalog image.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:58.810142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageDetail {
  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DOCKERFILE = "dockerfile";
  @SerializedName(SERIALIZED_NAME_DOCKERFILE)
  private String dockerfile;

  public static final String SERIALIZED_NAME_FULLDIGEST = "fulldigest";
  @SerializedName(SERIALIZED_NAME_FULLDIGEST)
  private String fulldigest;

  public static final String SERIALIZED_NAME_FULLTAG = "fulltag";
  @SerializedName(SERIALIZED_NAME_FULLTAG)
  private String fulltag;

  public static final String SERIALIZED_NAME_IMAGE_DIGEST = "imageDigest";
  @SerializedName(SERIALIZED_NAME_IMAGE_DIGEST)
  private String imageDigest;

  public static final String SERIALIZED_NAME_IMAGE_ID = "imageId";
  @SerializedName(SERIALIZED_NAME_IMAGE_ID)
  private String imageId;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_REGISTRY = "registry";
  @SerializedName(SERIALIZED_NAME_REGISTRY)
  private String registry;

  public static final String SERIALIZED_NAME_REPO = "repo";
  @SerializedName(SERIALIZED_NAME_REPO)
  private String repo;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public ImageDetail() {
  }

  public ImageDetail createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public ImageDetail dockerfile(String dockerfile) {
    this.dockerfile = dockerfile;
    return this;
  }

  /**
   * Get dockerfile
   * @return dockerfile
   */
  @javax.annotation.Nullable
  public String getDockerfile() {
    return dockerfile;
  }

  public void setDockerfile(String dockerfile) {
    this.dockerfile = dockerfile;
  }


  public ImageDetail fulldigest(String fulldigest) {
    this.fulldigest = fulldigest;
    return this;
  }

  /**
   * Full docker-pullable digest string including the registry url and repository necessary get the image
   * @return fulldigest
   */
  @javax.annotation.Nullable
  public String getFulldigest() {
    return fulldigest;
  }

  public void setFulldigest(String fulldigest) {
    this.fulldigest = fulldigest;
  }


  public ImageDetail fulltag(String fulltag) {
    this.fulltag = fulltag;
    return this;
  }

  /**
   * Full docker-pullable tag string referencing the image
   * @return fulltag
   */
  @javax.annotation.Nullable
  public String getFulltag() {
    return fulltag;
  }

  public void setFulltag(String fulltag) {
    this.fulltag = fulltag;
  }


  public ImageDetail imageDigest(String imageDigest) {
    this.imageDigest = imageDigest;
    return this;
  }

  /**
   * The parent Anchore Image record to which this detail maps
   * @return imageDigest
   */
  @javax.annotation.Nullable
  public String getImageDigest() {
    return imageDigest;
  }

  public void setImageDigest(String imageDigest) {
    this.imageDigest = imageDigest;
  }


  public ImageDetail imageId(String imageId) {
    this.imageId = imageId;
    return this;
  }

  /**
   * Get imageId
   * @return imageId
   */
  @javax.annotation.Nullable
  public String getImageId() {
    return imageId;
  }

  public void setImageId(String imageId) {
    this.imageId = imageId;
  }


  public ImageDetail lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public ImageDetail registry(String registry) {
    this.registry = registry;
    return this;
  }

  /**
   * Get registry
   * @return registry
   */
  @javax.annotation.Nullable
  public String getRegistry() {
    return registry;
  }

  public void setRegistry(String registry) {
    this.registry = registry;
  }


  public ImageDetail repo(String repo) {
    this.repo = repo;
    return this;
  }

  /**
   * Get repo
   * @return repo
   */
  @javax.annotation.Nullable
  public String getRepo() {
    return repo;
  }

  public void setRepo(String repo) {
    this.repo = repo;
  }


  public ImageDetail userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageDetail imageDetail = (ImageDetail) o;
    return Objects.equals(this.createdAt, imageDetail.createdAt) &&
        Objects.equals(this.dockerfile, imageDetail.dockerfile) &&
        Objects.equals(this.fulldigest, imageDetail.fulldigest) &&
        Objects.equals(this.fulltag, imageDetail.fulltag) &&
        Objects.equals(this.imageDigest, imageDetail.imageDigest) &&
        Objects.equals(this.imageId, imageDetail.imageId) &&
        Objects.equals(this.lastUpdated, imageDetail.lastUpdated) &&
        Objects.equals(this.registry, imageDetail.registry) &&
        Objects.equals(this.repo, imageDetail.repo) &&
        Objects.equals(this.userId, imageDetail.userId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, dockerfile, fulldigest, fulltag, imageDigest, imageId, lastUpdated, registry, repo, userId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageDetail {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    dockerfile: ").append(toIndentedString(dockerfile)).append("\n");
    sb.append("    fulldigest: ").append(toIndentedString(fulldigest)).append("\n");
    sb.append("    fulltag: ").append(toIndentedString(fulltag)).append("\n");
    sb.append("    imageDigest: ").append(toIndentedString(imageDigest)).append("\n");
    sb.append("    imageId: ").append(toIndentedString(imageId)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    registry: ").append(toIndentedString(registry)).append("\n");
    sb.append("    repo: ").append(toIndentedString(repo)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at");
    openapiFields.add("dockerfile");
    openapiFields.add("fulldigest");
    openapiFields.add("fulltag");
    openapiFields.add("imageDigest");
    openapiFields.add("imageId");
    openapiFields.add("last_updated");
    openapiFields.add("registry");
    openapiFields.add("repo");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageDetail is not found in the empty JSON string", ImageDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImageDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImageDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dockerfile") != null && !jsonObj.get("dockerfile").isJsonNull()) && !jsonObj.get("dockerfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dockerfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dockerfile").toString()));
      }
      if ((jsonObj.get("fulldigest") != null && !jsonObj.get("fulldigest").isJsonNull()) && !jsonObj.get("fulldigest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fulldigest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fulldigest").toString()));
      }
      if ((jsonObj.get("fulltag") != null && !jsonObj.get("fulltag").isJsonNull()) && !jsonObj.get("fulltag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fulltag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fulltag").toString()));
      }
      if ((jsonObj.get("imageDigest") != null && !jsonObj.get("imageDigest").isJsonNull()) && !jsonObj.get("imageDigest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageDigest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageDigest").toString()));
      }
      if ((jsonObj.get("imageId") != null && !jsonObj.get("imageId").isJsonNull()) && !jsonObj.get("imageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageId").toString()));
      }
      if ((jsonObj.get("registry") != null && !jsonObj.get("registry").isJsonNull()) && !jsonObj.get("registry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registry").toString()));
      }
      if ((jsonObj.get("repo") != null && !jsonObj.get("repo").isJsonNull()) && !jsonObj.get("repo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repo").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageDetail>() {
           @Override
           public void write(JsonWriter out, ImageDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageDetail
   * @throws IOException if the JSON string is invalid with respect to ImageDetail
   */
  public static ImageDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageDetail.class);
  }

  /**
   * Convert an instance of ImageDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

