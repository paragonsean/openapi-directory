/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiErrorResponse;
import org.openapitools.client.model.FileContentSearchResult;
import org.openapitools.client.model.RetrievedFile;
import org.openapitools.client.model.SecretSearchResult;
import org.openapitools.client.model.ServiceVersion;
import org.openapitools.client.model.TokenResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getOauthToken
     * @param clientId The type of client used for the OAuth token (optional, default to anonymous)
     * @param grantType OAuth Grant type for token (optional, default to password)
     * @param password Password for corresponding user (optional)
     * @param username User to assign OAuth token to (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resulting JWT token </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOauthTokenCall(String clientId, String grantType, String password, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarFormParams.put("client_id", clientId);
        }

        if (grantType != null) {
            localVarFormParams.put("grant_type", grantType);
        }

        if (password != null) {
            localVarFormParams.put("password", password);
        }

        if (username != null) {
            localVarFormParams.put("username", username);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOauthTokenValidateBeforeCall(String clientId, String grantType, String password, String username, final ApiCallback _callback) throws ApiException {
        return getOauthTokenCall(clientId, grantType, password, username, _callback);

    }

    /**
     * 
     * Request a jwt token for subsequent operations, this request is authenticated with normal HTTP auth
     * @param clientId The type of client used for the OAuth token (optional, default to anonymous)
     * @param grantType OAuth Grant type for token (optional, default to password)
     * @param password Password for corresponding user (optional)
     * @param username User to assign OAuth token to (optional)
     * @return TokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resulting JWT token </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public TokenResponse getOauthToken(String clientId, String grantType, String password, String username) throws ApiException {
        ApiResponse<TokenResponse> localVarResp = getOauthTokenWithHttpInfo(clientId, grantType, password, username);
        return localVarResp.getData();
    }

    /**
     * 
     * Request a jwt token for subsequent operations, this request is authenticated with normal HTTP auth
     * @param clientId The type of client used for the OAuth token (optional, default to anonymous)
     * @param grantType OAuth Grant type for token (optional, default to password)
     * @param password Password for corresponding user (optional)
     * @param username User to assign OAuth token to (optional)
     * @return ApiResponse&lt;TokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resulting JWT token </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TokenResponse> getOauthTokenWithHttpInfo(String clientId, String grantType, String password, String username) throws ApiException {
        okhttp3.Call localVarCall = getOauthTokenValidateBeforeCall(clientId, grantType, password, username, null);
        Type localVarReturnType = new TypeToken<TokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Request a jwt token for subsequent operations, this request is authenticated with normal HTTP auth
     * @param clientId The type of client used for the OAuth token (optional, default to anonymous)
     * @param grantType OAuth Grant type for token (optional, default to password)
     * @param password Password for corresponding user (optional)
     * @param username User to assign OAuth token to (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resulting JWT token </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOauthTokenAsync(String clientId, String grantType, String password, String username, final ApiCallback<TokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOauthTokenValidateBeforeCall(clientId, grantType, password, username, _callback);
        Type localVarReturnType = new TypeToken<TokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for healthCheck
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty body on success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthCheckCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/health";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call healthCheckValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return healthCheckCall(_callback);

    }

    /**
     * 
     * Health check, returns 200 and no body if service is running
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty body on success </td><td>  -  </td></tr>
     </table>
     */
    public void healthCheck() throws ApiException {
        healthCheckWithHttpInfo();
    }

    /**
     * 
     * Health check, returns 200 and no body if service is running
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty body on success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> healthCheckWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = healthCheckValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Health check, returns 200 and no body if service is running
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Empty body on success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthCheckAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = healthCheckValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listFileContentSearchResults
     * @param imageDigest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of file metadata objects </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Image not found in this service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFileContentSearchResultsCall(String imageDigest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/{imageDigest}/artifacts/file_content_search"
            .replace("{" + "imageDigest" + "}", localVarApiClient.escapeString(imageDigest.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFileContentSearchResultsValidateBeforeCall(String imageDigest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageDigest' is set
        if (imageDigest == null) {
            throw new ApiException("Missing the required parameter 'imageDigest' when calling listFileContentSearchResults(Async)");
        }

        return listFileContentSearchResultsCall(imageDigest, _callback);

    }

    /**
     * Return a list of analyzer artifacts of the specified type
     * 
     * @param imageDigest  (required)
     * @return List&lt;FileContentSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of file metadata objects </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Image not found in this service </td><td>  -  </td></tr>
     </table>
     */
    public List<FileContentSearchResult> listFileContentSearchResults(String imageDigest) throws ApiException {
        ApiResponse<List<FileContentSearchResult>> localVarResp = listFileContentSearchResultsWithHttpInfo(imageDigest);
        return localVarResp.getData();
    }

    /**
     * Return a list of analyzer artifacts of the specified type
     * 
     * @param imageDigest  (required)
     * @return ApiResponse&lt;List&lt;FileContentSearchResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of file metadata objects </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Image not found in this service </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FileContentSearchResult>> listFileContentSearchResultsWithHttpInfo(String imageDigest) throws ApiException {
        okhttp3.Call localVarCall = listFileContentSearchResultsValidateBeforeCall(imageDigest, null);
        Type localVarReturnType = new TypeToken<List<FileContentSearchResult>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of analyzer artifacts of the specified type (asynchronously)
     * 
     * @param imageDigest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of file metadata objects </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Image not found in this service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFileContentSearchResultsAsync(String imageDigest, final ApiCallback<List<FileContentSearchResult>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFileContentSearchResultsValidateBeforeCall(imageDigest, _callback);
        Type localVarReturnType = new TypeToken<List<FileContentSearchResult>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRetrievedFiles
     * @param imageDigest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of file metadata objects </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Image not found in this service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRetrievedFilesCall(String imageDigest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/{imageDigest}/artifacts/retrieved_files"
            .replace("{" + "imageDigest" + "}", localVarApiClient.escapeString(imageDigest.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRetrievedFilesValidateBeforeCall(String imageDigest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageDigest' is set
        if (imageDigest == null) {
            throw new ApiException("Missing the required parameter 'imageDigest' when calling listRetrievedFiles(Async)");
        }

        return listRetrievedFilesCall(imageDigest, _callback);

    }

    /**
     * Return a list of analyzer artifacts of the specified type
     * 
     * @param imageDigest  (required)
     * @return List&lt;RetrievedFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of file metadata objects </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Image not found in this service </td><td>  -  </td></tr>
     </table>
     */
    public List<RetrievedFile> listRetrievedFiles(String imageDigest) throws ApiException {
        ApiResponse<List<RetrievedFile>> localVarResp = listRetrievedFilesWithHttpInfo(imageDigest);
        return localVarResp.getData();
    }

    /**
     * Return a list of analyzer artifacts of the specified type
     * 
     * @param imageDigest  (required)
     * @return ApiResponse&lt;List&lt;RetrievedFile&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of file metadata objects </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Image not found in this service </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RetrievedFile>> listRetrievedFilesWithHttpInfo(String imageDigest) throws ApiException {
        okhttp3.Call localVarCall = listRetrievedFilesValidateBeforeCall(imageDigest, null);
        Type localVarReturnType = new TypeToken<List<RetrievedFile>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of analyzer artifacts of the specified type (asynchronously)
     * 
     * @param imageDigest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of file metadata objects </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Image not found in this service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRetrievedFilesAsync(String imageDigest, final ApiCallback<List<RetrievedFile>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRetrievedFilesValidateBeforeCall(imageDigest, _callback);
        Type localVarReturnType = new TypeToken<List<RetrievedFile>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSecretSearchResults
     * @param imageDigest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of file metadata objects </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Image not found in this service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSecretSearchResultsCall(String imageDigest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/{imageDigest}/artifacts/secret_search"
            .replace("{" + "imageDigest" + "}", localVarApiClient.escapeString(imageDigest.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSecretSearchResultsValidateBeforeCall(String imageDigest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageDigest' is set
        if (imageDigest == null) {
            throw new ApiException("Missing the required parameter 'imageDigest' when calling listSecretSearchResults(Async)");
        }

        return listSecretSearchResultsCall(imageDigest, _callback);

    }

    /**
     * Return a list of analyzer artifacts of the specified type
     * 
     * @param imageDigest  (required)
     * @return List&lt;SecretSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of file metadata objects </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Image not found in this service </td><td>  -  </td></tr>
     </table>
     */
    public List<SecretSearchResult> listSecretSearchResults(String imageDigest) throws ApiException {
        ApiResponse<List<SecretSearchResult>> localVarResp = listSecretSearchResultsWithHttpInfo(imageDigest);
        return localVarResp.getData();
    }

    /**
     * Return a list of analyzer artifacts of the specified type
     * 
     * @param imageDigest  (required)
     * @return ApiResponse&lt;List&lt;SecretSearchResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of file metadata objects </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Image not found in this service </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SecretSearchResult>> listSecretSearchResultsWithHttpInfo(String imageDigest) throws ApiException {
        okhttp3.Call localVarCall = listSecretSearchResultsValidateBeforeCall(imageDigest, null);
        Type localVarReturnType = new TypeToken<List<SecretSearchResult>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of analyzer artifacts of the specified type (asynchronously)
     * 
     * @param imageDigest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of file metadata objects </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Image not found in this service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSecretSearchResultsAsync(String imageDigest, final ApiCallback<List<SecretSearchResult>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSecretSearchResultsValidateBeforeCall(imageDigest, _callback);
        Type localVarReturnType = new TypeToken<List<SecretSearchResult>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ping
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Version check response, returns the api version prefix (e.g. &#39;v1&#39;) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pingCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pingValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return pingCall(_callback);

    }

    /**
     * 
     * Simple status check
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Version check response, returns the api version prefix (e.g. &#39;v1&#39;) </td><td>  -  </td></tr>
     </table>
     */
    public String ping() throws ApiException {
        ApiResponse<String> localVarResp = pingWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Simple status check
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Version check response, returns the api version prefix (e.g. &#39;v1&#39;) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> pingWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = pingValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Simple status check
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Version check response, returns the api version prefix (e.g. &#39;v1&#39;) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pingAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = pingValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for versionCheck
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Version object describing version state </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call versionCheckCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call versionCheckValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return versionCheckCall(_callback);

    }

    /**
     * 
     * Returns the version object for the service, including db schema version info
     * @return ServiceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Version object describing version state </td><td>  -  </td></tr>
     </table>
     */
    public ServiceVersion versionCheck() throws ApiException {
        ApiResponse<ServiceVersion> localVarResp = versionCheckWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the version object for the service, including db schema version info
     * @return ApiResponse&lt;ServiceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Version object describing version state </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceVersion> versionCheckWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = versionCheckValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ServiceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the version object for the service, including db schema version info
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Version object describing version state </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call versionCheckAsync(final ApiCallback<ServiceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = versionCheckValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ServiceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
