/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AnalysisArchiveSource;
import org.openapitools.client.model.ImageImportManifest;
import org.openapitools.client.model.RegistryDigestSource;
import org.openapitools.client.model.RegistryTagSource;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A set of analysis source types. Only one may be set in any given request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:58.810142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageSource {
  public static final String SERIALIZED_NAME_ARCHIVE = "archive";
  @SerializedName(SERIALIZED_NAME_ARCHIVE)
  private AnalysisArchiveSource archive;

  public static final String SERIALIZED_NAME_DIGEST = "digest";
  @SerializedName(SERIALIZED_NAME_DIGEST)
  private RegistryDigestSource digest;

  public static final String SERIALIZED_NAME_IMPORT = "import";
  @SerializedName(SERIALIZED_NAME_IMPORT)
  private ImageImportManifest _import;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private RegistryTagSource tag;

  public ImageSource() {
  }

  public ImageSource archive(AnalysisArchiveSource archive) {
    this.archive = archive;
    return this;
  }

  /**
   * Get archive
   * @return archive
   */
  @javax.annotation.Nullable
  public AnalysisArchiveSource getArchive() {
    return archive;
  }

  public void setArchive(AnalysisArchiveSource archive) {
    this.archive = archive;
  }


  public ImageSource digest(RegistryDigestSource digest) {
    this.digest = digest;
    return this;
  }

  /**
   * Get digest
   * @return digest
   */
  @javax.annotation.Nullable
  public RegistryDigestSource getDigest() {
    return digest;
  }

  public void setDigest(RegistryDigestSource digest) {
    this.digest = digest;
  }


  public ImageSource _import(ImageImportManifest _import) {
    this._import = _import;
    return this;
  }

  /**
   * Get _import
   * @return _import
   */
  @javax.annotation.Nullable
  public ImageImportManifest getImport() {
    return _import;
  }

  public void setImport(ImageImportManifest _import) {
    this._import = _import;
  }


  public ImageSource tag(RegistryTagSource tag) {
    this.tag = tag;
    return this;
  }

  /**
   * Get tag
   * @return tag
   */
  @javax.annotation.Nullable
  public RegistryTagSource getTag() {
    return tag;
  }

  public void setTag(RegistryTagSource tag) {
    this.tag = tag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageSource imageSource = (ImageSource) o;
    return Objects.equals(this.archive, imageSource.archive) &&
        Objects.equals(this.digest, imageSource.digest) &&
        Objects.equals(this._import, imageSource._import) &&
        Objects.equals(this.tag, imageSource.tag);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(archive, digest, _import, tag);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageSource {\n");
    sb.append("    archive: ").append(toIndentedString(archive)).append("\n");
    sb.append("    digest: ").append(toIndentedString(digest)).append("\n");
    sb.append("    _import: ").append(toIndentedString(_import)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("archive");
    openapiFields.add("digest");
    openapiFields.add("import");
    openapiFields.add("tag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageSource is not found in the empty JSON string", ImageSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImageSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImageSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `archive`
      if (jsonObj.get("archive") != null && !jsonObj.get("archive").isJsonNull()) {
        AnalysisArchiveSource.validateJsonElement(jsonObj.get("archive"));
      }
      // validate the optional field `digest`
      if (jsonObj.get("digest") != null && !jsonObj.get("digest").isJsonNull()) {
        RegistryDigestSource.validateJsonElement(jsonObj.get("digest"));
      }
      // validate the optional field `import`
      if (jsonObj.get("import") != null && !jsonObj.get("import").isJsonNull()) {
        ImageImportManifest.validateJsonElement(jsonObj.get("import"));
      }
      // validate the optional field `tag`
      if (jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) {
        RegistryTagSource.validateJsonElement(jsonObj.get("tag"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageSource.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageSource>() {
           @Override
           public void write(JsonWriter out, ImageSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageSource
   * @throws IOException if the JSON string is invalid with respect to ImageSource
   */
  public static ImageSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageSource.class);
  }

  /**
   * Convert an instance of ImageSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

