/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiErrorResponse;
import org.openapitools.client.model.EventCategory;
import org.openapitools.client.model.EventResponse;
import org.openapitools.client.model.EventsList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteEvent
     * @param eventId Event ID of the event to be deleted (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEventCall(String eventId, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/{eventId}"
            .replace("{" + "eventId" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEventValidateBeforeCall(String eventId, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling deleteEvent(Async)");
        }

        return deleteEventCall(eventId, xAnchoreAccount, _callback);

    }

    /**
     * Delete Event
     * Delete an event by its event ID
     * @param eventId Event ID of the event to be deleted (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteEvent(String eventId, String xAnchoreAccount) throws ApiException {
        deleteEventWithHttpInfo(eventId, xAnchoreAccount);
    }

    /**
     * Delete Event
     * Delete an event by its event ID
     * @param eventId Event ID of the event to be deleted (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteEventWithHttpInfo(String eventId, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = deleteEventValidateBeforeCall(eventId, xAnchoreAccount, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Event (asynchronously)
     * Delete an event by its event ID
     * @param eventId Event ID of the event to be deleted (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEventAsync(String eventId, String xAnchoreAccount, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEventValidateBeforeCall(eventId, xAnchoreAccount, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEvents
     * @param before Delete events that occurred before the timestamp (optional)
     * @param since Delete events that occurred after the timestamp (optional)
     * @param level Delete events that match the level - INFO or ERROR (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of deleted event IDs </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEventsCall(String before, String since, String level, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (level != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("level", level));
        }

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEventsValidateBeforeCall(String before, String since, String level, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        return deleteEventsCall(before, since, level, xAnchoreAccount, _callback);

    }

    /**
     * Delete Events
     * Delete all or a subset of events filtered using the optional query parameters
     * @param before Delete events that occurred before the timestamp (optional)
     * @param since Delete events that occurred after the timestamp (optional)
     * @param level Delete events that match the level - INFO or ERROR (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of deleted event IDs </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public List<String> deleteEvents(String before, String since, String level, String xAnchoreAccount) throws ApiException {
        ApiResponse<List<String>> localVarResp = deleteEventsWithHttpInfo(before, since, level, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * Delete Events
     * Delete all or a subset of events filtered using the optional query parameters
     * @param before Delete events that occurred before the timestamp (optional)
     * @param since Delete events that occurred after the timestamp (optional)
     * @param level Delete events that match the level - INFO or ERROR (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of deleted event IDs </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> deleteEventsWithHttpInfo(String before, String since, String level, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = deleteEventsValidateBeforeCall(before, since, level, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Events (asynchronously)
     * Delete all or a subset of events filtered using the optional query parameters
     * @param before Delete events that occurred before the timestamp (optional)
     * @param since Delete events that occurred after the timestamp (optional)
     * @param level Delete events that match the level - INFO or ERROR (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of deleted event IDs </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEventsAsync(String before, String since, String level, String xAnchoreAccount, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEventsValidateBeforeCall(before, since, level, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEvent
     * @param eventId Event ID of the event for lookup (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single event record </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventCall(String eventId, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/{eventId}"
            .replace("{" + "eventId" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventValidateBeforeCall(String eventId, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling getEvent(Async)");
        }

        return getEventCall(eventId, xAnchoreAccount, _callback);

    }

    /**
     * Get Event
     * Lookup an event by its event ID
     * @param eventId Event ID of the event for lookup (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return EventResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single event record </td><td>  -  </td></tr>
     </table>
     */
    public EventResponse getEvent(String eventId, String xAnchoreAccount) throws ApiException {
        ApiResponse<EventResponse> localVarResp = getEventWithHttpInfo(eventId, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * Get Event
     * Lookup an event by its event ID
     * @param eventId Event ID of the event for lookup (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;EventResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single event record </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventResponse> getEventWithHttpInfo(String eventId, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = getEventValidateBeforeCall(eventId, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<EventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Event (asynchronously)
     * Lookup an event by its event ID
     * @param eventId Event ID of the event for lookup (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Single event record </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventAsync(String eventId, String xAnchoreAccount, final ApiCallback<EventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventValidateBeforeCall(eventId, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<EventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listEventTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of event types </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEventTypesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/event_types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEventTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listEventTypesCall(_callback);

    }

    /**
     * List Event Types
     * Returns list of event types in the category hierarchy
     * @return List&lt;EventCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of event types </td><td>  -  </td></tr>
     </table>
     */
    public List<EventCategory> listEventTypes() throws ApiException {
        ApiResponse<List<EventCategory>> localVarResp = listEventTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List Event Types
     * Returns list of event types in the category hierarchy
     * @return ApiResponse&lt;List&lt;EventCategory&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of event types </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EventCategory>> listEventTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listEventTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<EventCategory>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Event Types (asynchronously)
     * Returns list of event types in the category hierarchy
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of event types </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEventTypesAsync(final ApiCallback<List<EventCategory>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEventTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<EventCategory>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listEvents
     * @param sourceServicename Filter events by the originating service (optional)
     * @param sourceHostid Filter events by the originating host ID (optional)
     * @param eventType Filter events by a prefix match on the event type (e.g. \&quot;user.image.\&quot;) (optional)
     * @param resourceType Filter events by the type of resource - tag, imageDigest, repository etc (optional)
     * @param resourceId Filter events by the id of the resource (optional)
     * @param level Filter events by the level - INFO or ERROR (optional)
     * @param since Return events that occurred after the timestamp (optional)
     * @param before Return events that occurred before the timestamp (optional)
     * @param page Pagination controls - return the nth page of results. Defaults to first page if left empty (optional, default to 1)
     * @param limit Number of events in the result set. Defaults to 100 if left empty (optional, default to 100)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated list of event records and the next token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEventsCall(String sourceServicename, String sourceHostid, String eventType, String resourceType, String resourceId, String level, String since, String before, Integer page, Integer limit, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceServicename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source_servicename", sourceServicename));
        }

        if (sourceHostid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source_hostid", sourceHostid));
        }

        if (eventType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event_type", eventType));
        }

        if (resourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource_type", resourceType));
        }

        if (resourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource_id", resourceId));
        }

        if (level != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("level", level));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEventsValidateBeforeCall(String sourceServicename, String sourceHostid, String eventType, String resourceType, String resourceId, String level, String since, String before, Integer page, Integer limit, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        return listEventsCall(sourceServicename, sourceHostid, eventType, resourceType, resourceId, level, since, before, page, limit, xAnchoreAccount, _callback);

    }

    /**
     * List Events
     * Returns a paginated list of events in the descending order of their occurrence. Optional query parameters may be used for filtering results
     * @param sourceServicename Filter events by the originating service (optional)
     * @param sourceHostid Filter events by the originating host ID (optional)
     * @param eventType Filter events by a prefix match on the event type (e.g. \&quot;user.image.\&quot;) (optional)
     * @param resourceType Filter events by the type of resource - tag, imageDigest, repository etc (optional)
     * @param resourceId Filter events by the id of the resource (optional)
     * @param level Filter events by the level - INFO or ERROR (optional)
     * @param since Return events that occurred after the timestamp (optional)
     * @param before Return events that occurred before the timestamp (optional)
     * @param page Pagination controls - return the nth page of results. Defaults to first page if left empty (optional, default to 1)
     * @param limit Number of events in the result set. Defaults to 100 if left empty (optional, default to 100)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return EventsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated list of event records and the next token </td><td>  -  </td></tr>
     </table>
     */
    public EventsList listEvents(String sourceServicename, String sourceHostid, String eventType, String resourceType, String resourceId, String level, String since, String before, Integer page, Integer limit, String xAnchoreAccount) throws ApiException {
        ApiResponse<EventsList> localVarResp = listEventsWithHttpInfo(sourceServicename, sourceHostid, eventType, resourceType, resourceId, level, since, before, page, limit, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * List Events
     * Returns a paginated list of events in the descending order of their occurrence. Optional query parameters may be used for filtering results
     * @param sourceServicename Filter events by the originating service (optional)
     * @param sourceHostid Filter events by the originating host ID (optional)
     * @param eventType Filter events by a prefix match on the event type (e.g. \&quot;user.image.\&quot;) (optional)
     * @param resourceType Filter events by the type of resource - tag, imageDigest, repository etc (optional)
     * @param resourceId Filter events by the id of the resource (optional)
     * @param level Filter events by the level - INFO or ERROR (optional)
     * @param since Return events that occurred after the timestamp (optional)
     * @param before Return events that occurred before the timestamp (optional)
     * @param page Pagination controls - return the nth page of results. Defaults to first page if left empty (optional, default to 1)
     * @param limit Number of events in the result set. Defaults to 100 if left empty (optional, default to 100)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;EventsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated list of event records and the next token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventsList> listEventsWithHttpInfo(String sourceServicename, String sourceHostid, String eventType, String resourceType, String resourceId, String level, String since, String before, Integer page, Integer limit, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = listEventsValidateBeforeCall(sourceServicename, sourceHostid, eventType, resourceType, resourceId, level, since, before, page, limit, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<EventsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Events (asynchronously)
     * Returns a paginated list of events in the descending order of their occurrence. Optional query parameters may be used for filtering results
     * @param sourceServicename Filter events by the originating service (optional)
     * @param sourceHostid Filter events by the originating host ID (optional)
     * @param eventType Filter events by a prefix match on the event type (e.g. \&quot;user.image.\&quot;) (optional)
     * @param resourceType Filter events by the type of resource - tag, imageDigest, repository etc (optional)
     * @param resourceId Filter events by the id of the resource (optional)
     * @param level Filter events by the level - INFO or ERROR (optional)
     * @param since Return events that occurred after the timestamp (optional)
     * @param before Return events that occurred before the timestamp (optional)
     * @param page Pagination controls - return the nth page of results. Defaults to first page if left empty (optional, default to 1)
     * @param limit Number of events in the result set. Defaults to 100 if left empty (optional, default to 100)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated list of event records and the next token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEventsAsync(String sourceServicename, String sourceHostid, String eventType, String resourceType, String resourceId, String level, String since, String before, Integer page, Integer limit, String xAnchoreAccount, final ApiCallback<EventsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEventsValidateBeforeCall(sourceServicename, sourceHostid, eventType, resourceType, resourceId, level, since, before, page, limit, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<EventsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
