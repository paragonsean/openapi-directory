/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MalwareScanFindingsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single scan from a scanner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:58.810142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MalwareScan {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_FINDINGS = "findings";
  @SerializedName(SERIALIZED_NAME_FINDINGS)
  private List<MalwareScanFindingsInner> findings = new ArrayList<>();

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_SCANNER = "scanner";
  @SerializedName(SERIALIZED_NAME_SCANNER)
  private String scanner;

  public MalwareScan() {
  }

  public MalwareScan enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Indicates if the scanner is enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public MalwareScan findings(List<MalwareScanFindingsInner> findings) {
    this.findings = findings;
    return this;
  }

  public MalwareScan addFindingsItem(MalwareScanFindingsInner findingsItem) {
    if (this.findings == null) {
      this.findings = new ArrayList<>();
    }
    this.findings.add(findingsItem);
    return this;
  }

  /**
   * Get findings
   * @return findings
   */
  @javax.annotation.Nullable
  public List<MalwareScanFindingsInner> getFindings() {
    return findings;
  }

  public void setFindings(List<MalwareScanFindingsInner> findings) {
    this.findings = findings;
  }


  public MalwareScan metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Open schema for scanner-specific metadata related to the scan result
   * @return metadata
   */
  @javax.annotation.Nullable
  public Object getMetadata() {
    return metadata;
  }

  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public MalwareScan scanner(String scanner) {
    this.scanner = scanner;
    return this;
  }

  /**
   * The name of the scanner that produced the finding
   * @return scanner
   */
  @javax.annotation.Nullable
  public String getScanner() {
    return scanner;
  }

  public void setScanner(String scanner) {
    this.scanner = scanner;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MalwareScan malwareScan = (MalwareScan) o;
    return Objects.equals(this.enabled, malwareScan.enabled) &&
        Objects.equals(this.findings, malwareScan.findings) &&
        Objects.equals(this.metadata, malwareScan.metadata) &&
        Objects.equals(this.scanner, malwareScan.scanner);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, findings, metadata, scanner);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MalwareScan {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    findings: ").append(toIndentedString(findings)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    scanner: ").append(toIndentedString(scanner)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("findings");
    openapiFields.add("metadata");
    openapiFields.add("scanner");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MalwareScan
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MalwareScan.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MalwareScan is not found in the empty JSON string", MalwareScan.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MalwareScan.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MalwareScan` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("findings") != null && !jsonObj.get("findings").isJsonNull()) {
        JsonArray jsonArrayfindings = jsonObj.getAsJsonArray("findings");
        if (jsonArrayfindings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("findings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `findings` to be an array in the JSON string but got `%s`", jsonObj.get("findings").toString()));
          }

          // validate the optional field `findings` (array)
          for (int i = 0; i < jsonArrayfindings.size(); i++) {
            MalwareScanFindingsInner.validateJsonElement(jsonArrayfindings.get(i));
          };
        }
      }
      if ((jsonObj.get("scanner") != null && !jsonObj.get("scanner").isJsonNull()) && !jsonObj.get("scanner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scanner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scanner").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MalwareScan.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MalwareScan' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MalwareScan> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MalwareScan.class));

       return (TypeAdapter<T>) new TypeAdapter<MalwareScan>() {
           @Override
           public void write(JsonWriter out, MalwareScan value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MalwareScan read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MalwareScan given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MalwareScan
   * @throws IOException if the JSON string is invalid with respect to MalwareScan
   */
  public static MalwareScan fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MalwareScan.class);
  }

  /**
   * Convert an instance of MalwareScan to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

