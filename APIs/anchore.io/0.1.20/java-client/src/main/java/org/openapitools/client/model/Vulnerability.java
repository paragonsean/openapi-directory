/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NvdDataObject;
import org.openapitools.client.model.VendorDataObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Vulnerability
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:58.810142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Vulnerability {
  public static final String SERIALIZED_NAME_FEED = "feed";
  @SerializedName(SERIALIZED_NAME_FEED)
  private String feed;

  public static final String SERIALIZED_NAME_FEED_GROUP = "feed_group";
  @SerializedName(SERIALIZED_NAME_FEED_GROUP)
  private String feedGroup;

  public static final String SERIALIZED_NAME_FIX = "fix";
  @SerializedName(SERIALIZED_NAME_FIX)
  private String fix;

  public static final String SERIALIZED_NAME_NVD_DATA = "nvd_data";
  @SerializedName(SERIALIZED_NAME_NVD_DATA)
  private List<NvdDataObject> nvdData = new ArrayList<>();

  public static final String SERIALIZED_NAME_PACKAGE = "package";
  @SerializedName(SERIALIZED_NAME_PACKAGE)
  private String _package;

  public static final String SERIALIZED_NAME_PACKAGE_CPE = "package_cpe";
  @SerializedName(SERIALIZED_NAME_PACKAGE_CPE)
  private String packageCpe;

  public static final String SERIALIZED_NAME_PACKAGE_NAME = "package_name";
  @SerializedName(SERIALIZED_NAME_PACKAGE_NAME)
  private String packageName;

  public static final String SERIALIZED_NAME_PACKAGE_PATH = "package_path";
  @SerializedName(SERIALIZED_NAME_PACKAGE_PATH)
  private String packagePath;

  public static final String SERIALIZED_NAME_PACKAGE_TYPE = "package_type";
  @SerializedName(SERIALIZED_NAME_PACKAGE_TYPE)
  private String packageType;

  public static final String SERIALIZED_NAME_PACKAGE_VERSION = "package_version";
  @SerializedName(SERIALIZED_NAME_PACKAGE_VERSION)
  private String packageVersion;

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private String severity;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_VENDOR_DATA = "vendor_data";
  @SerializedName(SERIALIZED_NAME_VENDOR_DATA)
  private List<VendorDataObject> vendorData = new ArrayList<>();

  public static final String SERIALIZED_NAME_VULN = "vuln";
  @SerializedName(SERIALIZED_NAME_VULN)
  private String vuln;

  public static final String SERIALIZED_NAME_WILL_NOT_FIX = "will_not_fix";
  @SerializedName(SERIALIZED_NAME_WILL_NOT_FIX)
  private Boolean willNotFix;

  public Vulnerability() {
  }

  public Vulnerability feed(String feed) {
    this.feed = feed;
    return this;
  }

  /**
   * The name of the feed where vulnerability match was made
   * @return feed
   */
  @javax.annotation.Nullable
  public String getFeed() {
    return feed;
  }

  public void setFeed(String feed) {
    this.feed = feed;
  }


  public Vulnerability feedGroup(String feedGroup) {
    this.feedGroup = feedGroup;
    return this;
  }

  /**
   * The name of the feed group where vulnerability match was made
   * @return feedGroup
   */
  @javax.annotation.Nullable
  public String getFeedGroup() {
    return feedGroup;
  }

  public void setFeedGroup(String feedGroup) {
    this.feedGroup = feedGroup;
  }


  public Vulnerability fix(String fix) {
    this.fix = fix;
    return this;
  }

  /**
   * The package containing a fix, if available
   * @return fix
   */
  @javax.annotation.Nullable
  public String getFix() {
    return fix;
  }

  public void setFix(String fix) {
    this.fix = fix;
  }


  public Vulnerability nvdData(List<NvdDataObject> nvdData) {
    this.nvdData = nvdData;
    return this;
  }

  public Vulnerability addNvdDataItem(NvdDataObject nvdDataItem) {
    if (this.nvdData == null) {
      this.nvdData = new ArrayList<>();
    }
    this.nvdData.add(nvdDataItem);
    return this;
  }

  /**
   * List of Nvd Data objects
   * @return nvdData
   */
  @javax.annotation.Nullable
  public List<NvdDataObject> getNvdData() {
    return nvdData;
  }

  public void setNvdData(List<NvdDataObject> nvdData) {
    this.nvdData = nvdData;
  }


  public Vulnerability _package(String _package) {
    this._package = _package;
    return this;
  }

  /**
   * The package name and version that are vulnerable in the image
   * @return _package
   */
  @javax.annotation.Nullable
  public String getPackage() {
    return _package;
  }

  public void setPackage(String _package) {
    this._package = _package;
  }


  public Vulnerability packageCpe(String packageCpe) {
    this.packageCpe = packageCpe;
    return this;
  }

  /**
   * The CPE string (if applicable) describing the package to vulnerability match
   * @return packageCpe
   */
  @javax.annotation.Nullable
  public String getPackageCpe() {
    return packageCpe;
  }

  public void setPackageCpe(String packageCpe) {
    this.packageCpe = packageCpe;
  }


  public Vulnerability packageName(String packageName) {
    this.packageName = packageName;
    return this;
  }

  /**
   * The name of the vulnerable package artifact
   * @return packageName
   */
  @javax.annotation.Nullable
  public String getPackageName() {
    return packageName;
  }

  public void setPackageName(String packageName) {
    this.packageName = packageName;
  }


  public Vulnerability packagePath(String packagePath) {
    this.packagePath = packagePath;
    return this;
  }

  /**
   * The location (if applicable) of the vulnerable package in the container filesystem
   * @return packagePath
   */
  @javax.annotation.Nullable
  public String getPackagePath() {
    return packagePath;
  }

  public void setPackagePath(String packagePath) {
    this.packagePath = packagePath;
  }


  public Vulnerability packageType(String packageType) {
    this.packageType = packageType;
    return this;
  }

  /**
   * The type of vulnerable package
   * @return packageType
   */
  @javax.annotation.Nullable
  public String getPackageType() {
    return packageType;
  }

  public void setPackageType(String packageType) {
    this.packageType = packageType;
  }


  public Vulnerability packageVersion(String packageVersion) {
    this.packageVersion = packageVersion;
    return this;
  }

  /**
   * The version of the vulnerable package artifact
   * @return packageVersion
   */
  @javax.annotation.Nullable
  public String getPackageVersion() {
    return packageVersion;
  }

  public void setPackageVersion(String packageVersion) {
    this.packageVersion = packageVersion;
  }


  public Vulnerability severity(String severity) {
    this.severity = severity;
    return this;
  }

  /**
   * The severity of the vulnerability
   * @return severity
   */
  @javax.annotation.Nullable
  public String getSeverity() {
    return severity;
  }

  public void setSeverity(String severity) {
    this.severity = severity;
  }


  public Vulnerability url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The url for more information about the vulnerability
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public Vulnerability vendorData(List<VendorDataObject> vendorData) {
    this.vendorData = vendorData;
    return this;
  }

  public Vulnerability addVendorDataItem(VendorDataObject vendorDataItem) {
    if (this.vendorData == null) {
      this.vendorData = new ArrayList<>();
    }
    this.vendorData.add(vendorDataItem);
    return this;
  }

  /**
   * List of Vendor Data objects
   * @return vendorData
   */
  @javax.annotation.Nullable
  public List<VendorDataObject> getVendorData() {
    return vendorData;
  }

  public void setVendorData(List<VendorDataObject> vendorData) {
    this.vendorData = vendorData;
  }


  public Vulnerability vuln(String vuln) {
    this.vuln = vuln;
    return this;
  }

  /**
   * The vulnerability identifier, such as CVE-2017-100, or RHSA-2017123
   * @return vuln
   */
  @javax.annotation.Nullable
  public String getVuln() {
    return vuln;
  }

  public void setVuln(String vuln) {
    this.vuln = vuln;
  }


  public Vulnerability willNotFix(Boolean willNotFix) {
    this.willNotFix = willNotFix;
    return this;
  }

  /**
   * Whether a vendor will fix or not fix the vulnerability
   * @return willNotFix
   */
  @javax.annotation.Nullable
  public Boolean getWillNotFix() {
    return willNotFix;
  }

  public void setWillNotFix(Boolean willNotFix) {
    this.willNotFix = willNotFix;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Vulnerability vulnerability = (Vulnerability) o;
    return Objects.equals(this.feed, vulnerability.feed) &&
        Objects.equals(this.feedGroup, vulnerability.feedGroup) &&
        Objects.equals(this.fix, vulnerability.fix) &&
        Objects.equals(this.nvdData, vulnerability.nvdData) &&
        Objects.equals(this._package, vulnerability._package) &&
        Objects.equals(this.packageCpe, vulnerability.packageCpe) &&
        Objects.equals(this.packageName, vulnerability.packageName) &&
        Objects.equals(this.packagePath, vulnerability.packagePath) &&
        Objects.equals(this.packageType, vulnerability.packageType) &&
        Objects.equals(this.packageVersion, vulnerability.packageVersion) &&
        Objects.equals(this.severity, vulnerability.severity) &&
        Objects.equals(this.url, vulnerability.url) &&
        Objects.equals(this.vendorData, vulnerability.vendorData) &&
        Objects.equals(this.vuln, vulnerability.vuln) &&
        Objects.equals(this.willNotFix, vulnerability.willNotFix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(feed, feedGroup, fix, nvdData, _package, packageCpe, packageName, packagePath, packageType, packageVersion, severity, url, vendorData, vuln, willNotFix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Vulnerability {\n");
    sb.append("    feed: ").append(toIndentedString(feed)).append("\n");
    sb.append("    feedGroup: ").append(toIndentedString(feedGroup)).append("\n");
    sb.append("    fix: ").append(toIndentedString(fix)).append("\n");
    sb.append("    nvdData: ").append(toIndentedString(nvdData)).append("\n");
    sb.append("    _package: ").append(toIndentedString(_package)).append("\n");
    sb.append("    packageCpe: ").append(toIndentedString(packageCpe)).append("\n");
    sb.append("    packageName: ").append(toIndentedString(packageName)).append("\n");
    sb.append("    packagePath: ").append(toIndentedString(packagePath)).append("\n");
    sb.append("    packageType: ").append(toIndentedString(packageType)).append("\n");
    sb.append("    packageVersion: ").append(toIndentedString(packageVersion)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    vendorData: ").append(toIndentedString(vendorData)).append("\n");
    sb.append("    vuln: ").append(toIndentedString(vuln)).append("\n");
    sb.append("    willNotFix: ").append(toIndentedString(willNotFix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("feed");
    openapiFields.add("feed_group");
    openapiFields.add("fix");
    openapiFields.add("nvd_data");
    openapiFields.add("package");
    openapiFields.add("package_cpe");
    openapiFields.add("package_name");
    openapiFields.add("package_path");
    openapiFields.add("package_type");
    openapiFields.add("package_version");
    openapiFields.add("severity");
    openapiFields.add("url");
    openapiFields.add("vendor_data");
    openapiFields.add("vuln");
    openapiFields.add("will_not_fix");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Vulnerability
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Vulnerability.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Vulnerability is not found in the empty JSON string", Vulnerability.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Vulnerability.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Vulnerability` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("feed") != null && !jsonObj.get("feed").isJsonNull()) && !jsonObj.get("feed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feed").toString()));
      }
      if ((jsonObj.get("feed_group") != null && !jsonObj.get("feed_group").isJsonNull()) && !jsonObj.get("feed_group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feed_group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feed_group").toString()));
      }
      if ((jsonObj.get("fix") != null && !jsonObj.get("fix").isJsonNull()) && !jsonObj.get("fix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fix").toString()));
      }
      if (jsonObj.get("nvd_data") != null && !jsonObj.get("nvd_data").isJsonNull()) {
        JsonArray jsonArraynvdData = jsonObj.getAsJsonArray("nvd_data");
        if (jsonArraynvdData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nvd_data").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nvd_data` to be an array in the JSON string but got `%s`", jsonObj.get("nvd_data").toString()));
          }

          // validate the optional field `nvd_data` (array)
          for (int i = 0; i < jsonArraynvdData.size(); i++) {
            NvdDataObject.validateJsonElement(jsonArraynvdData.get(i));
          };
        }
      }
      if ((jsonObj.get("package") != null && !jsonObj.get("package").isJsonNull()) && !jsonObj.get("package").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `package` to be a primitive type in the JSON string but got `%s`", jsonObj.get("package").toString()));
      }
      if ((jsonObj.get("package_cpe") != null && !jsonObj.get("package_cpe").isJsonNull()) && !jsonObj.get("package_cpe").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `package_cpe` to be a primitive type in the JSON string but got `%s`", jsonObj.get("package_cpe").toString()));
      }
      if ((jsonObj.get("package_name") != null && !jsonObj.get("package_name").isJsonNull()) && !jsonObj.get("package_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `package_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("package_name").toString()));
      }
      if ((jsonObj.get("package_path") != null && !jsonObj.get("package_path").isJsonNull()) && !jsonObj.get("package_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `package_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("package_path").toString()));
      }
      if ((jsonObj.get("package_type") != null && !jsonObj.get("package_type").isJsonNull()) && !jsonObj.get("package_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `package_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("package_type").toString()));
      }
      if ((jsonObj.get("package_version") != null && !jsonObj.get("package_version").isJsonNull()) && !jsonObj.get("package_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `package_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("package_version").toString()));
      }
      if ((jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) && !jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (jsonObj.get("vendor_data") != null && !jsonObj.get("vendor_data").isJsonNull()) {
        JsonArray jsonArrayvendorData = jsonObj.getAsJsonArray("vendor_data");
        if (jsonArrayvendorData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vendor_data").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vendor_data` to be an array in the JSON string but got `%s`", jsonObj.get("vendor_data").toString()));
          }

          // validate the optional field `vendor_data` (array)
          for (int i = 0; i < jsonArrayvendorData.size(); i++) {
            VendorDataObject.validateJsonElement(jsonArrayvendorData.get(i));
          };
        }
      }
      if ((jsonObj.get("vuln") != null && !jsonObj.get("vuln").isJsonNull()) && !jsonObj.get("vuln").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vuln` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vuln").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Vulnerability.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Vulnerability' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Vulnerability> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Vulnerability.class));

       return (TypeAdapter<T>) new TypeAdapter<Vulnerability>() {
           @Override
           public void write(JsonWriter out, Vulnerability value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Vulnerability read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Vulnerability given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Vulnerability
   * @throws IOException if the JSON string is invalid with respect to Vulnerability
   */
  public static Vulnerability fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Vulnerability.class);
  }

  /**
   * Convert an instance of Vulnerability to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

