/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.AnalysisArchiveTransitionRuleExclude;
import org.openapitools.client.model.ImageSelector;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A rule for auto-archiving image analysis by time and/or tag-history
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:58.810142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnalysisArchiveTransitionRule {
  public static final String SERIALIZED_NAME_ANALYSIS_AGE_DAYS = "analysis_age_days";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_AGE_DAYS)
  private Integer analysisAgeDays;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_EXCLUDE = "exclude";
  @SerializedName(SERIALIZED_NAME_EXCLUDE)
  private AnalysisArchiveTransitionRuleExclude exclude;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_MAX_IMAGES_PER_ACCOUNT = "max_images_per_account";
  @SerializedName(SERIALIZED_NAME_MAX_IMAGES_PER_ACCOUNT)
  private Integer maxImagesPerAccount;

  public static final String SERIALIZED_NAME_RULE_ID = "rule_id";
  @SerializedName(SERIALIZED_NAME_RULE_ID)
  private String ruleId;

  public static final String SERIALIZED_NAME_SELECTOR = "selector";
  @SerializedName(SERIALIZED_NAME_SELECTOR)
  private ImageSelector selector;

  public static final String SERIALIZED_NAME_SYSTEM_GLOBAL = "system_global";
  @SerializedName(SERIALIZED_NAME_SYSTEM_GLOBAL)
  private Boolean systemGlobal;

  public static final String SERIALIZED_NAME_TAG_VERSIONS_NEWER = "tag_versions_newer";
  @SerializedName(SERIALIZED_NAME_TAG_VERSIONS_NEWER)
  private Integer tagVersionsNewer;

  /**
   * The type of transition to make. If \&quot;archive\&quot;, then archive an image from the working set and remove it from the working set. If \&quot;delete\&quot;, then match against archived images and delete from the archive if match.
   */
  @JsonAdapter(TransitionEnum.Adapter.class)
  public enum TransitionEnum {
    ARCHIVE("archive"),
    
    DELETE("delete");

    private String value;

    TransitionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransitionEnum fromValue(String value) {
      for (TransitionEnum b : TransitionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransitionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransitionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransitionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransitionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TransitionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSITION = "transition";
  @SerializedName(SERIALIZED_NAME_TRANSITION)
  private TransitionEnum transition;

  public AnalysisArchiveTransitionRule() {
  }

  public AnalysisArchiveTransitionRule analysisAgeDays(Integer analysisAgeDays) {
    this.analysisAgeDays = analysisAgeDays;
    return this;
  }

  /**
   * Matches if the analysis is strictly older than this number of days
   * @return analysisAgeDays
   */
  @javax.annotation.Nullable
  public Integer getAnalysisAgeDays() {
    return analysisAgeDays;
  }

  public void setAnalysisAgeDays(Integer analysisAgeDays) {
    this.analysisAgeDays = analysisAgeDays;
  }


  public AnalysisArchiveTransitionRule createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public AnalysisArchiveTransitionRule exclude(AnalysisArchiveTransitionRuleExclude exclude) {
    this.exclude = exclude;
    return this;
  }

  /**
   * Get exclude
   * @return exclude
   */
  @javax.annotation.Nullable
  public AnalysisArchiveTransitionRuleExclude getExclude() {
    return exclude;
  }

  public void setExclude(AnalysisArchiveTransitionRuleExclude exclude) {
    this.exclude = exclude;
  }


  public AnalysisArchiveTransitionRule lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public AnalysisArchiveTransitionRule maxImagesPerAccount(Integer maxImagesPerAccount) {
    this.maxImagesPerAccount = maxImagesPerAccount;
    return this;
  }

  /**
   * This is the maximum number of image analyses an account can have. Can only be set on system_global rules
   * @return maxImagesPerAccount
   */
  @javax.annotation.Nullable
  public Integer getMaxImagesPerAccount() {
    return maxImagesPerAccount;
  }

  public void setMaxImagesPerAccount(Integer maxImagesPerAccount) {
    this.maxImagesPerAccount = maxImagesPerAccount;
  }


  public AnalysisArchiveTransitionRule ruleId(String ruleId) {
    this.ruleId = ruleId;
    return this;
  }

  /**
   * Unique identifier for archive rule
   * @return ruleId
   */
  @javax.annotation.Nullable
  public String getRuleId() {
    return ruleId;
  }

  public void setRuleId(String ruleId) {
    this.ruleId = ruleId;
  }


  public AnalysisArchiveTransitionRule selector(ImageSelector selector) {
    this.selector = selector;
    return this;
  }

  /**
   * Get selector
   * @return selector
   */
  @javax.annotation.Nullable
  public ImageSelector getSelector() {
    return selector;
  }

  public void setSelector(ImageSelector selector) {
    this.selector = selector;
  }


  public AnalysisArchiveTransitionRule systemGlobal(Boolean systemGlobal) {
    this.systemGlobal = systemGlobal;
    return this;
  }

  /**
   * True if the rule applies to all accounts in the system. This is only available to admin users to update/modify, but all users with permission to list rules can see them
   * @return systemGlobal
   */
  @javax.annotation.Nullable
  public Boolean getSystemGlobal() {
    return systemGlobal;
  }

  public void setSystemGlobal(Boolean systemGlobal) {
    this.systemGlobal = systemGlobal;
  }


  public AnalysisArchiveTransitionRule tagVersionsNewer(Integer tagVersionsNewer) {
    this.tagVersionsNewer = tagVersionsNewer;
    return this;
  }

  /**
   * Number of images mapped to the tag that are newer
   * @return tagVersionsNewer
   */
  @javax.annotation.Nullable
  public Integer getTagVersionsNewer() {
    return tagVersionsNewer;
  }

  public void setTagVersionsNewer(Integer tagVersionsNewer) {
    this.tagVersionsNewer = tagVersionsNewer;
  }


  public AnalysisArchiveTransitionRule transition(TransitionEnum transition) {
    this.transition = transition;
    return this;
  }

  /**
   * The type of transition to make. If \&quot;archive\&quot;, then archive an image from the working set and remove it from the working set. If \&quot;delete\&quot;, then match against archived images and delete from the archive if match.
   * @return transition
   */
  @javax.annotation.Nonnull
  public TransitionEnum getTransition() {
    return transition;
  }

  public void setTransition(TransitionEnum transition) {
    this.transition = transition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalysisArchiveTransitionRule analysisArchiveTransitionRule = (AnalysisArchiveTransitionRule) o;
    return Objects.equals(this.analysisAgeDays, analysisArchiveTransitionRule.analysisAgeDays) &&
        Objects.equals(this.createdAt, analysisArchiveTransitionRule.createdAt) &&
        Objects.equals(this.exclude, analysisArchiveTransitionRule.exclude) &&
        Objects.equals(this.lastUpdated, analysisArchiveTransitionRule.lastUpdated) &&
        Objects.equals(this.maxImagesPerAccount, analysisArchiveTransitionRule.maxImagesPerAccount) &&
        Objects.equals(this.ruleId, analysisArchiveTransitionRule.ruleId) &&
        Objects.equals(this.selector, analysisArchiveTransitionRule.selector) &&
        Objects.equals(this.systemGlobal, analysisArchiveTransitionRule.systemGlobal) &&
        Objects.equals(this.tagVersionsNewer, analysisArchiveTransitionRule.tagVersionsNewer) &&
        Objects.equals(this.transition, analysisArchiveTransitionRule.transition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analysisAgeDays, createdAt, exclude, lastUpdated, maxImagesPerAccount, ruleId, selector, systemGlobal, tagVersionsNewer, transition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalysisArchiveTransitionRule {\n");
    sb.append("    analysisAgeDays: ").append(toIndentedString(analysisAgeDays)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    exclude: ").append(toIndentedString(exclude)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    maxImagesPerAccount: ").append(toIndentedString(maxImagesPerAccount)).append("\n");
    sb.append("    ruleId: ").append(toIndentedString(ruleId)).append("\n");
    sb.append("    selector: ").append(toIndentedString(selector)).append("\n");
    sb.append("    systemGlobal: ").append(toIndentedString(systemGlobal)).append("\n");
    sb.append("    tagVersionsNewer: ").append(toIndentedString(tagVersionsNewer)).append("\n");
    sb.append("    transition: ").append(toIndentedString(transition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analysis_age_days");
    openapiFields.add("created_at");
    openapiFields.add("exclude");
    openapiFields.add("last_updated");
    openapiFields.add("max_images_per_account");
    openapiFields.add("rule_id");
    openapiFields.add("selector");
    openapiFields.add("system_global");
    openapiFields.add("tag_versions_newer");
    openapiFields.add("transition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("transition");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnalysisArchiveTransitionRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnalysisArchiveTransitionRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalysisArchiveTransitionRule is not found in the empty JSON string", AnalysisArchiveTransitionRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnalysisArchiveTransitionRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnalysisArchiveTransitionRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AnalysisArchiveTransitionRule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `exclude`
      if (jsonObj.get("exclude") != null && !jsonObj.get("exclude").isJsonNull()) {
        AnalysisArchiveTransitionRuleExclude.validateJsonElement(jsonObj.get("exclude"));
      }
      if ((jsonObj.get("rule_id") != null && !jsonObj.get("rule_id").isJsonNull()) && !jsonObj.get("rule_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rule_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rule_id").toString()));
      }
      // validate the optional field `selector`
      if (jsonObj.get("selector") != null && !jsonObj.get("selector").isJsonNull()) {
        ImageSelector.validateJsonElement(jsonObj.get("selector"));
      }
      if (!jsonObj.get("transition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transition").toString()));
      }
      // validate the required field `transition`
      TransitionEnum.validateJsonElement(jsonObj.get("transition"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalysisArchiveTransitionRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalysisArchiveTransitionRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalysisArchiveTransitionRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalysisArchiveTransitionRule.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalysisArchiveTransitionRule>() {
           @Override
           public void write(JsonWriter out, AnalysisArchiveTransitionRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalysisArchiveTransitionRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnalysisArchiveTransitionRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnalysisArchiveTransitionRule
   * @throws IOException if the JSON string is invalid with respect to AnalysisArchiveTransitionRule
   */
  public static AnalysisArchiveTransitionRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalysisArchiveTransitionRule.class);
  }

  /**
   * Convert an instance of AnalysisArchiveTransitionRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

