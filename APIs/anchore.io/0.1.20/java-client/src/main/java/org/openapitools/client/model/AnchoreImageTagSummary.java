/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A unique image in the engine.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:58.810142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnchoreImageTagSummary {
  public static final String SERIALIZED_NAME_ANALYSIS_STATUS = "analysis_status";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_STATUS)
  private String analysisStatus;

  public static final String SERIALIZED_NAME_ANALYZED_AT = "analyzed_at";
  @SerializedName(SERIALIZED_NAME_ANALYZED_AT)
  private Integer analyzedAt;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private Integer createdAt;

  public static final String SERIALIZED_NAME_FULLTAG = "fulltag";
  @SerializedName(SERIALIZED_NAME_FULLTAG)
  private String fulltag;

  public static final String SERIALIZED_NAME_IMAGE_DIGEST = "imageDigest";
  @SerializedName(SERIALIZED_NAME_IMAGE_DIGEST)
  private String imageDigest;

  public static final String SERIALIZED_NAME_IMAGE_ID = "imageId";
  @SerializedName(SERIALIZED_NAME_IMAGE_ID)
  private String imageId;

  public static final String SERIALIZED_NAME_IMAGE_STATUS = "image_status";
  @SerializedName(SERIALIZED_NAME_IMAGE_STATUS)
  private String imageStatus;

  public static final String SERIALIZED_NAME_PARENT_DIGEST = "parentDigest";
  @SerializedName(SERIALIZED_NAME_PARENT_DIGEST)
  private String parentDigest;

  public static final String SERIALIZED_NAME_TAG_DETECTED_AT = "tag_detected_at";
  @SerializedName(SERIALIZED_NAME_TAG_DETECTED_AT)
  private Integer tagDetectedAt;

  public AnchoreImageTagSummary() {
  }

  public AnchoreImageTagSummary analysisStatus(String analysisStatus) {
    this.analysisStatus = analysisStatus;
    return this;
  }

  /**
   * Get analysisStatus
   * @return analysisStatus
   */
  @javax.annotation.Nullable
  public String getAnalysisStatus() {
    return analysisStatus;
  }

  public void setAnalysisStatus(String analysisStatus) {
    this.analysisStatus = analysisStatus;
  }


  public AnchoreImageTagSummary analyzedAt(Integer analyzedAt) {
    this.analyzedAt = analyzedAt;
    return this;
  }

  /**
   * Get analyzedAt
   * @return analyzedAt
   */
  @javax.annotation.Nullable
  public Integer getAnalyzedAt() {
    return analyzedAt;
  }

  public void setAnalyzedAt(Integer analyzedAt) {
    this.analyzedAt = analyzedAt;
  }


  public AnchoreImageTagSummary createdAt(Integer createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public Integer getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Integer createdAt) {
    this.createdAt = createdAt;
  }


  public AnchoreImageTagSummary fulltag(String fulltag) {
    this.fulltag = fulltag;
    return this;
  }

  /**
   * Get fulltag
   * @return fulltag
   */
  @javax.annotation.Nullable
  public String getFulltag() {
    return fulltag;
  }

  public void setFulltag(String fulltag) {
    this.fulltag = fulltag;
  }


  public AnchoreImageTagSummary imageDigest(String imageDigest) {
    this.imageDigest = imageDigest;
    return this;
  }

  /**
   * Get imageDigest
   * @return imageDigest
   */
  @javax.annotation.Nullable
  public String getImageDigest() {
    return imageDigest;
  }

  public void setImageDigest(String imageDigest) {
    this.imageDigest = imageDigest;
  }


  public AnchoreImageTagSummary imageId(String imageId) {
    this.imageId = imageId;
    return this;
  }

  /**
   * Get imageId
   * @return imageId
   */
  @javax.annotation.Nullable
  public String getImageId() {
    return imageId;
  }

  public void setImageId(String imageId) {
    this.imageId = imageId;
  }


  public AnchoreImageTagSummary imageStatus(String imageStatus) {
    this.imageStatus = imageStatus;
    return this;
  }

  /**
   * Get imageStatus
   * @return imageStatus
   */
  @javax.annotation.Nullable
  public String getImageStatus() {
    return imageStatus;
  }

  public void setImageStatus(String imageStatus) {
    this.imageStatus = imageStatus;
  }


  public AnchoreImageTagSummary parentDigest(String parentDigest) {
    this.parentDigest = parentDigest;
    return this;
  }

  /**
   * Get parentDigest
   * @return parentDigest
   */
  @javax.annotation.Nullable
  public String getParentDigest() {
    return parentDigest;
  }

  public void setParentDigest(String parentDigest) {
    this.parentDigest = parentDigest;
  }


  public AnchoreImageTagSummary tagDetectedAt(Integer tagDetectedAt) {
    this.tagDetectedAt = tagDetectedAt;
    return this;
  }

  /**
   * Get tagDetectedAt
   * @return tagDetectedAt
   */
  @javax.annotation.Nullable
  public Integer getTagDetectedAt() {
    return tagDetectedAt;
  }

  public void setTagDetectedAt(Integer tagDetectedAt) {
    this.tagDetectedAt = tagDetectedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnchoreImageTagSummary anchoreImageTagSummary = (AnchoreImageTagSummary) o;
    return Objects.equals(this.analysisStatus, anchoreImageTagSummary.analysisStatus) &&
        Objects.equals(this.analyzedAt, anchoreImageTagSummary.analyzedAt) &&
        Objects.equals(this.createdAt, anchoreImageTagSummary.createdAt) &&
        Objects.equals(this.fulltag, anchoreImageTagSummary.fulltag) &&
        Objects.equals(this.imageDigest, anchoreImageTagSummary.imageDigest) &&
        Objects.equals(this.imageId, anchoreImageTagSummary.imageId) &&
        Objects.equals(this.imageStatus, anchoreImageTagSummary.imageStatus) &&
        Objects.equals(this.parentDigest, anchoreImageTagSummary.parentDigest) &&
        Objects.equals(this.tagDetectedAt, anchoreImageTagSummary.tagDetectedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analysisStatus, analyzedAt, createdAt, fulltag, imageDigest, imageId, imageStatus, parentDigest, tagDetectedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnchoreImageTagSummary {\n");
    sb.append("    analysisStatus: ").append(toIndentedString(analysisStatus)).append("\n");
    sb.append("    analyzedAt: ").append(toIndentedString(analyzedAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    fulltag: ").append(toIndentedString(fulltag)).append("\n");
    sb.append("    imageDigest: ").append(toIndentedString(imageDigest)).append("\n");
    sb.append("    imageId: ").append(toIndentedString(imageId)).append("\n");
    sb.append("    imageStatus: ").append(toIndentedString(imageStatus)).append("\n");
    sb.append("    parentDigest: ").append(toIndentedString(parentDigest)).append("\n");
    sb.append("    tagDetectedAt: ").append(toIndentedString(tagDetectedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analysis_status");
    openapiFields.add("analyzed_at");
    openapiFields.add("created_at");
    openapiFields.add("fulltag");
    openapiFields.add("imageDigest");
    openapiFields.add("imageId");
    openapiFields.add("image_status");
    openapiFields.add("parentDigest");
    openapiFields.add("tag_detected_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnchoreImageTagSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnchoreImageTagSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnchoreImageTagSummary is not found in the empty JSON string", AnchoreImageTagSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnchoreImageTagSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnchoreImageTagSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("analysis_status") != null && !jsonObj.get("analysis_status").isJsonNull()) && !jsonObj.get("analysis_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `analysis_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("analysis_status").toString()));
      }
      if ((jsonObj.get("fulltag") != null && !jsonObj.get("fulltag").isJsonNull()) && !jsonObj.get("fulltag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fulltag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fulltag").toString()));
      }
      if ((jsonObj.get("imageDigest") != null && !jsonObj.get("imageDigest").isJsonNull()) && !jsonObj.get("imageDigest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageDigest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageDigest").toString()));
      }
      if ((jsonObj.get("imageId") != null && !jsonObj.get("imageId").isJsonNull()) && !jsonObj.get("imageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageId").toString()));
      }
      if ((jsonObj.get("image_status") != null && !jsonObj.get("image_status").isJsonNull()) && !jsonObj.get("image_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_status").toString()));
      }
      if ((jsonObj.get("parentDigest") != null && !jsonObj.get("parentDigest").isJsonNull()) && !jsonObj.get("parentDigest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentDigest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentDigest").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnchoreImageTagSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnchoreImageTagSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnchoreImageTagSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnchoreImageTagSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<AnchoreImageTagSummary>() {
           @Override
           public void write(JsonWriter out, AnchoreImageTagSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnchoreImageTagSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnchoreImageTagSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnchoreImageTagSummary
   * @throws IOException if the JSON string is invalid with respect to AnchoreImageTagSummary
   */
  public static AnchoreImageTagSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnchoreImageTagSummary.class);
  }

  /**
   * Convert an instance of AnchoreImageTagSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

