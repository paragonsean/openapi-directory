/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TagEntry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ArchivedAnalysis
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:58.810142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ArchivedAnalysis {
  public static final String SERIALIZED_NAME_ANALYZED_AT = "analyzed_at";
  @SerializedName(SERIALIZED_NAME_ANALYZED_AT)
  private OffsetDateTime analyzedAt;

  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private Object annotations;

  public static final String SERIALIZED_NAME_ARCHIVE_SIZE_BYTES = "archive_size_bytes";
  @SerializedName(SERIALIZED_NAME_ARCHIVE_SIZE_BYTES)
  private Integer archiveSizeBytes;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_IMAGE_DIGEST = "imageDigest";
  @SerializedName(SERIALIZED_NAME_IMAGE_DIGEST)
  private String imageDigest;

  public static final String SERIALIZED_NAME_IMAGE_DETAIL = "image_detail";
  @SerializedName(SERIALIZED_NAME_IMAGE_DETAIL)
  private List<TagEntry> imageDetail = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_PARENT_DIGEST = "parentDigest";
  @SerializedName(SERIALIZED_NAME_PARENT_DIGEST)
  private String parentDigest;

  /**
   * The archival status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ARCHIVING("archiving"),
    
    ARCHIVED("archived"),
    
    DELETING("deleting"),
    
    DELETED("deleted");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public ArchivedAnalysis() {
  }

  public ArchivedAnalysis analyzedAt(OffsetDateTime analyzedAt) {
    this.analyzedAt = analyzedAt;
    return this;
  }

  /**
   * Get analyzedAt
   * @return analyzedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAnalyzedAt() {
    return analyzedAt;
  }

  public void setAnalyzedAt(OffsetDateTime analyzedAt) {
    this.analyzedAt = analyzedAt;
  }


  public ArchivedAnalysis annotations(Object annotations) {
    this.annotations = annotations;
    return this;
  }

  /**
   * User provided annotations as key-value pairs
   * @return annotations
   */
  @javax.annotation.Nullable
  public Object getAnnotations() {
    return annotations;
  }

  public void setAnnotations(Object annotations) {
    this.annotations = annotations;
  }


  public ArchivedAnalysis archiveSizeBytes(Integer archiveSizeBytes) {
    this.archiveSizeBytes = archiveSizeBytes;
    return this;
  }

  /**
   * The size, in bytes, of the analysis archive file
   * @return archiveSizeBytes
   */
  @javax.annotation.Nullable
  public Integer getArchiveSizeBytes() {
    return archiveSizeBytes;
  }

  public void setArchiveSizeBytes(Integer archiveSizeBytes) {
    this.archiveSizeBytes = archiveSizeBytes;
  }


  public ArchivedAnalysis createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public ArchivedAnalysis imageDigest(String imageDigest) {
    this.imageDigest = imageDigest;
    return this;
  }

  /**
   * The image digest (digest of the manifest describing the image, per docker spec)
   * @return imageDigest
   */
  @javax.annotation.Nullable
  public String getImageDigest() {
    return imageDigest;
  }

  public void setImageDigest(String imageDigest) {
    this.imageDigest = imageDigest;
  }


  public ArchivedAnalysis imageDetail(List<TagEntry> imageDetail) {
    this.imageDetail = imageDetail;
    return this;
  }

  public ArchivedAnalysis addImageDetailItem(TagEntry imageDetailItem) {
    if (this.imageDetail == null) {
      this.imageDetail = new ArrayList<>();
    }
    this.imageDetail.add(imageDetailItem);
    return this;
  }

  /**
   * List of tags associated with the image digest
   * @return imageDetail
   */
  @javax.annotation.Nullable
  public List<TagEntry> getImageDetail() {
    return imageDetail;
  }

  public void setImageDetail(List<TagEntry> imageDetail) {
    this.imageDetail = imageDetail;
  }


  public ArchivedAnalysis lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public ArchivedAnalysis parentDigest(String parentDigest) {
    this.parentDigest = parentDigest;
    return this;
  }

  /**
   * The digest of a parent manifest (for manifest-list images)
   * @return parentDigest
   */
  @javax.annotation.Nullable
  public String getParentDigest() {
    return parentDigest;
  }

  public void setParentDigest(String parentDigest) {
    this.parentDigest = parentDigest;
  }


  public ArchivedAnalysis status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The archival status
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArchivedAnalysis archivedAnalysis = (ArchivedAnalysis) o;
    return Objects.equals(this.analyzedAt, archivedAnalysis.analyzedAt) &&
        Objects.equals(this.annotations, archivedAnalysis.annotations) &&
        Objects.equals(this.archiveSizeBytes, archivedAnalysis.archiveSizeBytes) &&
        Objects.equals(this.createdAt, archivedAnalysis.createdAt) &&
        Objects.equals(this.imageDigest, archivedAnalysis.imageDigest) &&
        Objects.equals(this.imageDetail, archivedAnalysis.imageDetail) &&
        Objects.equals(this.lastUpdated, archivedAnalysis.lastUpdated) &&
        Objects.equals(this.parentDigest, archivedAnalysis.parentDigest) &&
        Objects.equals(this.status, archivedAnalysis.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analyzedAt, annotations, archiveSizeBytes, createdAt, imageDigest, imageDetail, lastUpdated, parentDigest, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArchivedAnalysis {\n");
    sb.append("    analyzedAt: ").append(toIndentedString(analyzedAt)).append("\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    archiveSizeBytes: ").append(toIndentedString(archiveSizeBytes)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    imageDigest: ").append(toIndentedString(imageDigest)).append("\n");
    sb.append("    imageDetail: ").append(toIndentedString(imageDetail)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    parentDigest: ").append(toIndentedString(parentDigest)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analyzed_at");
    openapiFields.add("annotations");
    openapiFields.add("archive_size_bytes");
    openapiFields.add("created_at");
    openapiFields.add("imageDigest");
    openapiFields.add("image_detail");
    openapiFields.add("last_updated");
    openapiFields.add("parentDigest");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ArchivedAnalysis
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ArchivedAnalysis.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArchivedAnalysis is not found in the empty JSON string", ArchivedAnalysis.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ArchivedAnalysis.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ArchivedAnalysis` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("imageDigest") != null && !jsonObj.get("imageDigest").isJsonNull()) && !jsonObj.get("imageDigest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageDigest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageDigest").toString()));
      }
      if (jsonObj.get("image_detail") != null && !jsonObj.get("image_detail").isJsonNull()) {
        JsonArray jsonArrayimageDetail = jsonObj.getAsJsonArray("image_detail");
        if (jsonArrayimageDetail != null) {
          // ensure the json data is an array
          if (!jsonObj.get("image_detail").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `image_detail` to be an array in the JSON string but got `%s`", jsonObj.get("image_detail").toString()));
          }

          // validate the optional field `image_detail` (array)
          for (int i = 0; i < jsonArrayimageDetail.size(); i++) {
            TagEntry.validateJsonElement(jsonArrayimageDetail.get(i));
          };
        }
      }
      if ((jsonObj.get("parentDigest") != null && !jsonObj.get("parentDigest").isJsonNull()) && !jsonObj.get("parentDigest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentDigest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentDigest").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArchivedAnalysis.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArchivedAnalysis' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArchivedAnalysis> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArchivedAnalysis.class));

       return (TypeAdapter<T>) new TypeAdapter<ArchivedAnalysis>() {
           @Override
           public void write(JsonWriter out, ArchivedAnalysis value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ArchivedAnalysis read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ArchivedAnalysis given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ArchivedAnalysis
   * @throws IOException if the JSON string is invalid with respect to ArchivedAnalysis
   */
  public static ArchivedAnalysis fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArchivedAnalysis.class);
  }

  /**
   * Convert an instance of ArchivedAnalysis to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

