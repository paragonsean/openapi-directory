/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ImageSelectionRule;
import org.openapitools.client.model.MappingRule;
import org.openapitools.client.model.Policy;
import org.openapitools.client.model.Whitelist;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A bundle containing a set of policies, whitelists, and rules for mapping them to specific images
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:58.810142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PolicyBundle {
  public static final String SERIALIZED_NAME_BLACKLISTED_IMAGES = "blacklisted_images";
  @SerializedName(SERIALIZED_NAME_BLACKLISTED_IMAGES)
  private List<ImageSelectionRule> blacklistedImages = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MAPPINGS = "mappings";
  @SerializedName(SERIALIZED_NAME_MAPPINGS)
  private List<MappingRule> mappings = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POLICIES = "policies";
  @SerializedName(SERIALIZED_NAME_POLICIES)
  private List<Policy> policies = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_WHITELISTED_IMAGES = "whitelisted_images";
  @SerializedName(SERIALIZED_NAME_WHITELISTED_IMAGES)
  private List<ImageSelectionRule> whitelistedImages = new ArrayList<>();

  public static final String SERIALIZED_NAME_WHITELISTS = "whitelists";
  @SerializedName(SERIALIZED_NAME_WHITELISTS)
  private List<Whitelist> whitelists = new ArrayList<>();

  public PolicyBundle() {
  }

  public PolicyBundle blacklistedImages(List<ImageSelectionRule> blacklistedImages) {
    this.blacklistedImages = blacklistedImages;
    return this;
  }

  public PolicyBundle addBlacklistedImagesItem(ImageSelectionRule blacklistedImagesItem) {
    if (this.blacklistedImages == null) {
      this.blacklistedImages = new ArrayList<>();
    }
    this.blacklistedImages.add(blacklistedImagesItem);
    return this;
  }

  /**
   * List of mapping rules that define which images should always result in a STOP/FAIL policy result regardless of policy content or presence in whitelisted_images
   * @return blacklistedImages
   */
  @javax.annotation.Nullable
  public List<ImageSelectionRule> getBlacklistedImages() {
    return blacklistedImages;
  }

  public void setBlacklistedImages(List<ImageSelectionRule> blacklistedImages) {
    this.blacklistedImages = blacklistedImages;
  }


  public PolicyBundle comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Description of the bundle, human readable
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public PolicyBundle id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Id of the bundle
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PolicyBundle mappings(List<MappingRule> mappings) {
    this.mappings = mappings;
    return this;
  }

  public PolicyBundle addMappingsItem(MappingRule mappingsItem) {
    if (this.mappings == null) {
      this.mappings = new ArrayList<>();
    }
    this.mappings.add(mappingsItem);
    return this;
  }

  /**
   * Mapping rules for defining which policy and whitelist(s) to apply to an image based on a match of the image tag or id. Evaluated in order.
   * @return mappings
   */
  @javax.annotation.Nonnull
  public List<MappingRule> getMappings() {
    return mappings;
  }

  public void setMappings(List<MappingRule> mappings) {
    this.mappings = mappings;
  }


  public PolicyBundle name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Human readable name for the bundle
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PolicyBundle policies(List<Policy> policies) {
    this.policies = policies;
    return this;
  }

  public PolicyBundle addPoliciesItem(Policy policiesItem) {
    if (this.policies == null) {
      this.policies = new ArrayList<>();
    }
    this.policies.add(policiesItem);
    return this;
  }

  /**
   * Policies which define the go/stop/warn status of an image using rule matches on image properties
   * @return policies
   */
  @javax.annotation.Nonnull
  public List<Policy> getPolicies() {
    return policies;
  }

  public void setPolicies(List<Policy> policies) {
    this.policies = policies;
  }


  public PolicyBundle version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Version id for this bundle format
   * @return version
   */
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public PolicyBundle whitelistedImages(List<ImageSelectionRule> whitelistedImages) {
    this.whitelistedImages = whitelistedImages;
    return this;
  }

  public PolicyBundle addWhitelistedImagesItem(ImageSelectionRule whitelistedImagesItem) {
    if (this.whitelistedImages == null) {
      this.whitelistedImages = new ArrayList<>();
    }
    this.whitelistedImages.add(whitelistedImagesItem);
    return this;
  }

  /**
   * List of mapping rules that define which images should always be passed (unless also on the blacklist), regardless of policy result.
   * @return whitelistedImages
   */
  @javax.annotation.Nullable
  public List<ImageSelectionRule> getWhitelistedImages() {
    return whitelistedImages;
  }

  public void setWhitelistedImages(List<ImageSelectionRule> whitelistedImages) {
    this.whitelistedImages = whitelistedImages;
  }


  public PolicyBundle whitelists(List<Whitelist> whitelists) {
    this.whitelists = whitelists;
    return this;
  }

  public PolicyBundle addWhitelistsItem(Whitelist whitelistsItem) {
    if (this.whitelists == null) {
      this.whitelists = new ArrayList<>();
    }
    this.whitelists.add(whitelistsItem);
    return this;
  }

  /**
   * Whitelists which define which policy matches to disregard explicitly in the final policy decision
   * @return whitelists
   */
  @javax.annotation.Nullable
  public List<Whitelist> getWhitelists() {
    return whitelists;
  }

  public void setWhitelists(List<Whitelist> whitelists) {
    this.whitelists = whitelists;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicyBundle policyBundle = (PolicyBundle) o;
    return Objects.equals(this.blacklistedImages, policyBundle.blacklistedImages) &&
        Objects.equals(this.comment, policyBundle.comment) &&
        Objects.equals(this.id, policyBundle.id) &&
        Objects.equals(this.mappings, policyBundle.mappings) &&
        Objects.equals(this.name, policyBundle.name) &&
        Objects.equals(this.policies, policyBundle.policies) &&
        Objects.equals(this.version, policyBundle.version) &&
        Objects.equals(this.whitelistedImages, policyBundle.whitelistedImages) &&
        Objects.equals(this.whitelists, policyBundle.whitelists);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blacklistedImages, comment, id, mappings, name, policies, version, whitelistedImages, whitelists);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyBundle {\n");
    sb.append("    blacklistedImages: ").append(toIndentedString(blacklistedImages)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mappings: ").append(toIndentedString(mappings)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    whitelistedImages: ").append(toIndentedString(whitelistedImages)).append("\n");
    sb.append("    whitelists: ").append(toIndentedString(whitelists)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blacklisted_images");
    openapiFields.add("comment");
    openapiFields.add("id");
    openapiFields.add("mappings");
    openapiFields.add("name");
    openapiFields.add("policies");
    openapiFields.add("version");
    openapiFields.add("whitelisted_images");
    openapiFields.add("whitelists");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("mappings");
    openapiRequiredFields.add("policies");
    openapiRequiredFields.add("version");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PolicyBundle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PolicyBundle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PolicyBundle is not found in the empty JSON string", PolicyBundle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PolicyBundle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PolicyBundle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PolicyBundle.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("blacklisted_images") != null && !jsonObj.get("blacklisted_images").isJsonNull()) {
        JsonArray jsonArrayblacklistedImages = jsonObj.getAsJsonArray("blacklisted_images");
        if (jsonArrayblacklistedImages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("blacklisted_images").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `blacklisted_images` to be an array in the JSON string but got `%s`", jsonObj.get("blacklisted_images").toString()));
          }

          // validate the optional field `blacklisted_images` (array)
          for (int i = 0; i < jsonArrayblacklistedImages.size(); i++) {
            ImageSelectionRule.validateJsonElement(jsonArrayblacklistedImages.get(i));
          };
        }
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("mappings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mappings` to be an array in the JSON string but got `%s`", jsonObj.get("mappings").toString()));
      }

      JsonArray jsonArraymappings = jsonObj.getAsJsonArray("mappings");
      // validate the required field `mappings` (array)
      for (int i = 0; i < jsonArraymappings.size(); i++) {
        MappingRule.validateJsonElement(jsonArraymappings.get(i));
      };
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("policies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `policies` to be an array in the JSON string but got `%s`", jsonObj.get("policies").toString()));
      }

      JsonArray jsonArraypolicies = jsonObj.getAsJsonArray("policies");
      // validate the required field `policies` (array)
      for (int i = 0; i < jsonArraypolicies.size(); i++) {
        Policy.validateJsonElement(jsonArraypolicies.get(i));
      };
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if (jsonObj.get("whitelisted_images") != null && !jsonObj.get("whitelisted_images").isJsonNull()) {
        JsonArray jsonArraywhitelistedImages = jsonObj.getAsJsonArray("whitelisted_images");
        if (jsonArraywhitelistedImages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("whitelisted_images").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `whitelisted_images` to be an array in the JSON string but got `%s`", jsonObj.get("whitelisted_images").toString()));
          }

          // validate the optional field `whitelisted_images` (array)
          for (int i = 0; i < jsonArraywhitelistedImages.size(); i++) {
            ImageSelectionRule.validateJsonElement(jsonArraywhitelistedImages.get(i));
          };
        }
      }
      if (jsonObj.get("whitelists") != null && !jsonObj.get("whitelists").isJsonNull()) {
        JsonArray jsonArraywhitelists = jsonObj.getAsJsonArray("whitelists");
        if (jsonArraywhitelists != null) {
          // ensure the json data is an array
          if (!jsonObj.get("whitelists").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `whitelists` to be an array in the JSON string but got `%s`", jsonObj.get("whitelists").toString()));
          }

          // validate the optional field `whitelists` (array)
          for (int i = 0; i < jsonArraywhitelists.size(); i++) {
            Whitelist.validateJsonElement(jsonArraywhitelists.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PolicyBundle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PolicyBundle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PolicyBundle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PolicyBundle.class));

       return (TypeAdapter<T>) new TypeAdapter<PolicyBundle>() {
           @Override
           public void write(JsonWriter out, PolicyBundle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PolicyBundle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PolicyBundle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PolicyBundle
   * @throws IOException if the JSON string is invalid with respect to PolicyBundle
   */
  public static PolicyBundle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PolicyBundle.class);
  }

  /**
   * Convert an instance of PolicyBundle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

