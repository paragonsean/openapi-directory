/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ImageSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A request to add an image to be watched and analyzed by the engine. Optionally include the dockerfile content. Either source, digest or tag must be present.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:58.810142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageAnalysisRequest {
  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private Object annotations;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DIGEST = "digest";
  @SerializedName(SERIALIZED_NAME_DIGEST)
  private String digest;

  public static final String SERIALIZED_NAME_DOCKERFILE = "dockerfile";
  @SerializedName(SERIALIZED_NAME_DOCKERFILE)
  private String dockerfile;

  public static final String SERIALIZED_NAME_IMAGE_TYPE = "image_type";
  @SerializedName(SERIALIZED_NAME_IMAGE_TYPE)
  private String imageType;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private ImageSource source;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public ImageAnalysisRequest() {
  }

  public ImageAnalysisRequest annotations(Object annotations) {
    this.annotations = annotations;
    return this;
  }

  /**
   * Annotations to be associated with the added image in key/value form
   * @return annotations
   */
  @javax.annotation.Nullable
  public Object getAnnotations() {
    return annotations;
  }

  public void setAnnotations(Object annotations) {
    this.annotations = annotations;
  }


  public ImageAnalysisRequest createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Optional override of the image creation time, only honored when both tag and digest are also supplied  e.g. 2018-10-17T18:14:00Z. Deprecated in favor of the &#39;source&#39; field
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public ImageAnalysisRequest digest(String digest) {
    this.digest = digest;
    return this;
  }

  /**
   * A digest string for an image, maybe a pull string or just a digest. e.g. nginx@sha256:123 or sha256:abc123. If a pull string, it must have same regisry/repo as the tag field. Deprecated in favor of the &#39;source&#39; field
   * @return digest
   */
  @javax.annotation.Nullable
  public String getDigest() {
    return digest;
  }

  public void setDigest(String digest) {
    this.digest = digest;
  }


  public ImageAnalysisRequest dockerfile(String dockerfile) {
    this.dockerfile = dockerfile;
    return this;
  }

  /**
   * Base64 encoded content of the dockerfile for the image, if available. Deprecated in favor of the &#39;source&#39; field.
   * @return dockerfile
   */
  @javax.annotation.Nullable
  public String getDockerfile() {
    return dockerfile;
  }

  public void setDockerfile(String dockerfile) {
    this.dockerfile = dockerfile;
  }


  public ImageAnalysisRequest imageType(String imageType) {
    this.imageType = imageType;
    return this;
  }

  /**
   * Optional. The type of image this is adding, defaults to \&quot;docker\&quot;. This can be ommitted until multiple image types are supported.
   * @return imageType
   */
  @javax.annotation.Nullable
  public String getImageType() {
    return imageType;
  }

  public void setImageType(String imageType) {
    this.imageType = imageType;
  }


  public ImageAnalysisRequest source(ImageSource source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public ImageSource getSource() {
    return source;
  }

  public void setSource(ImageSource source) {
    this.source = source;
  }


  public ImageAnalysisRequest tag(String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * Full pullable tag reference for image. e.g. docker.io/nginx:latest. Deprecated in favor of the &#39;source&#39; field
   * @return tag
   */
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageAnalysisRequest imageAnalysisRequest = (ImageAnalysisRequest) o;
    return Objects.equals(this.annotations, imageAnalysisRequest.annotations) &&
        Objects.equals(this.createdAt, imageAnalysisRequest.createdAt) &&
        Objects.equals(this.digest, imageAnalysisRequest.digest) &&
        Objects.equals(this.dockerfile, imageAnalysisRequest.dockerfile) &&
        Objects.equals(this.imageType, imageAnalysisRequest.imageType) &&
        Objects.equals(this.source, imageAnalysisRequest.source) &&
        Objects.equals(this.tag, imageAnalysisRequest.tag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotations, createdAt, digest, dockerfile, imageType, source, tag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageAnalysisRequest {\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    digest: ").append(toIndentedString(digest)).append("\n");
    sb.append("    dockerfile: ").append(toIndentedString(dockerfile)).append("\n");
    sb.append("    imageType: ").append(toIndentedString(imageType)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotations");
    openapiFields.add("created_at");
    openapiFields.add("digest");
    openapiFields.add("dockerfile");
    openapiFields.add("image_type");
    openapiFields.add("source");
    openapiFields.add("tag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageAnalysisRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageAnalysisRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageAnalysisRequest is not found in the empty JSON string", ImageAnalysisRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImageAnalysisRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImageAnalysisRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("digest") != null && !jsonObj.get("digest").isJsonNull()) && !jsonObj.get("digest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `digest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("digest").toString()));
      }
      if ((jsonObj.get("dockerfile") != null && !jsonObj.get("dockerfile").isJsonNull()) && !jsonObj.get("dockerfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dockerfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dockerfile").toString()));
      }
      if ((jsonObj.get("image_type") != null && !jsonObj.get("image_type").isJsonNull()) && !jsonObj.get("image_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_type").toString()));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        ImageSource.validateJsonElement(jsonObj.get("source"));
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageAnalysisRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageAnalysisRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageAnalysisRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageAnalysisRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageAnalysisRequest>() {
           @Override
           public void write(JsonWriter out, ImageAnalysisRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageAnalysisRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageAnalysisRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageAnalysisRequest
   * @throws IOException if the JSON string is invalid with respect to ImageAnalysisRequest
   */
  public static ImageAnalysisRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageAnalysisRequest.class);
  }

  /**
   * Convert an instance of ImageAnalysisRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

