/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AnchoreImage;
import org.openapitools.client.model.ApiErrorResponse;
import org.openapitools.client.model.ContentFilesResponse;
import org.openapitools.client.model.ContentJAVAPackageResponse;
import org.openapitools.client.model.ContentMalwareResponse;
import org.openapitools.client.model.ContentPackageResponse;
import org.openapitools.client.model.DeleteImageResponse;
import java.io.File;
import org.openapitools.client.model.ImageAnalysisRequest;
import org.openapitools.client.model.MetadataResponse;
import org.openapitools.client.model.VulnerabilityResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImagesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ImagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImagesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addImage
     * @param imageAnalysisRequest  (required)
     * @param force Override any existing entry in the system (optional)
     * @param autosubscribe Instruct engine to automatically begin watching the added tag for updates from registry (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added image to analysis queue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addImageCall(ImageAnalysisRequest imageAnalysisRequest, Boolean force, Boolean autosubscribe, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imageAnalysisRequest;

        // create path and map variables
        String localVarPath = "/images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        if (autosubscribe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("autosubscribe", autosubscribe));
        }

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addImageValidateBeforeCall(ImageAnalysisRequest imageAnalysisRequest, Boolean force, Boolean autosubscribe, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageAnalysisRequest' is set
        if (imageAnalysisRequest == null) {
            throw new ApiException("Missing the required parameter 'imageAnalysisRequest' when calling addImage(Async)");
        }

        return addImageCall(imageAnalysisRequest, force, autosubscribe, xAnchoreAccount, _callback);

    }

    /**
     * Submit a new image for analysis by the engine
     * Creates a new analysis task that is executed asynchronously
     * @param imageAnalysisRequest  (required)
     * @param force Override any existing entry in the system (optional)
     * @param autosubscribe Instruct engine to automatically begin watching the added tag for updates from registry (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return List&lt;AnchoreImage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added image to analysis queue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public List<AnchoreImage> addImage(ImageAnalysisRequest imageAnalysisRequest, Boolean force, Boolean autosubscribe, String xAnchoreAccount) throws ApiException {
        ApiResponse<List<AnchoreImage>> localVarResp = addImageWithHttpInfo(imageAnalysisRequest, force, autosubscribe, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * Submit a new image for analysis by the engine
     * Creates a new analysis task that is executed asynchronously
     * @param imageAnalysisRequest  (required)
     * @param force Override any existing entry in the system (optional)
     * @param autosubscribe Instruct engine to automatically begin watching the added tag for updates from registry (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;List&lt;AnchoreImage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added image to analysis queue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AnchoreImage>> addImageWithHttpInfo(ImageAnalysisRequest imageAnalysisRequest, Boolean force, Boolean autosubscribe, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = addImageValidateBeforeCall(imageAnalysisRequest, force, autosubscribe, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<List<AnchoreImage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit a new image for analysis by the engine (asynchronously)
     * Creates a new analysis task that is executed asynchronously
     * @param imageAnalysisRequest  (required)
     * @param force Override any existing entry in the system (optional)
     * @param autosubscribe Instruct engine to automatically begin watching the added tag for updates from registry (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added image to analysis queue </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addImageAsync(ImageAnalysisRequest imageAnalysisRequest, Boolean force, Boolean autosubscribe, String xAnchoreAccount, final ApiCallback<List<AnchoreImage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addImageValidateBeforeCall(imageAnalysisRequest, force, autosubscribe, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<List<AnchoreImage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteImage
     * @param imageDigest  (required)
     * @param force  (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image deletion success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteImageCall(String imageDigest, Boolean force, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/{imageDigest}"
            .replace("{" + "imageDigest" + "}", localVarApiClient.escapeString(imageDigest.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteImageValidateBeforeCall(String imageDigest, Boolean force, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageDigest' is set
        if (imageDigest == null) {
            throw new ApiException("Missing the required parameter 'imageDigest' when calling deleteImage(Async)");
        }

        return deleteImageCall(imageDigest, force, xAnchoreAccount, _callback);

    }

    /**
     * Delete an image analysis
     * 
     * @param imageDigest  (required)
     * @param force  (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return DeleteImageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image deletion success </td><td>  -  </td></tr>
     </table>
     */
    public DeleteImageResponse deleteImage(String imageDigest, Boolean force, String xAnchoreAccount) throws ApiException {
        ApiResponse<DeleteImageResponse> localVarResp = deleteImageWithHttpInfo(imageDigest, force, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * Delete an image analysis
     * 
     * @param imageDigest  (required)
     * @param force  (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;DeleteImageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image deletion success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteImageResponse> deleteImageWithHttpInfo(String imageDigest, Boolean force, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = deleteImageValidateBeforeCall(imageDigest, force, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<DeleteImageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an image analysis (asynchronously)
     * 
     * @param imageDigest  (required)
     * @param force  (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image deletion success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteImageAsync(String imageDigest, Boolean force, String xAnchoreAccount, final ApiCallback<DeleteImageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteImageValidateBeforeCall(imageDigest, force, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<DeleteImageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteImageByImageId
     * @param imageId  (required)
     * @param force  (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image deletion success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteImageByImageIdCall(String imageId, Boolean force, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/by_id/{imageId}"
            .replace("{" + "imageId" + "}", localVarApiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteImageByImageIdValidateBeforeCall(String imageId, Boolean force, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling deleteImageByImageId(Async)");
        }

        return deleteImageByImageIdCall(imageId, force, xAnchoreAccount, _callback);

    }

    /**
     * Delete image by docker imageId
     * 
     * @param imageId  (required)
     * @param force  (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return DeleteImageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image deletion success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public DeleteImageResponse deleteImageByImageId(String imageId, Boolean force, String xAnchoreAccount) throws ApiException {
        ApiResponse<DeleteImageResponse> localVarResp = deleteImageByImageIdWithHttpInfo(imageId, force, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * Delete image by docker imageId
     * 
     * @param imageId  (required)
     * @param force  (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;DeleteImageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image deletion success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteImageResponse> deleteImageByImageIdWithHttpInfo(String imageId, Boolean force, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = deleteImageByImageIdValidateBeforeCall(imageId, force, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<DeleteImageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete image by docker imageId (asynchronously)
     * 
     * @param imageId  (required)
     * @param force  (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image deletion success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteImageByImageIdAsync(String imageId, Boolean force, String xAnchoreAccount, final ApiCallback<DeleteImageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteImageByImageIdValidateBeforeCall(imageId, force, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<DeleteImageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteImagesAsync
     * @param imageDigests  (required)
     * @param force  (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteImagesAsyncCall(List<String> imageDigests, Boolean force, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (imageDigests != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "imageDigests", imageDigests));
        }

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteImagesAsyncValidateBeforeCall(List<String> imageDigests, Boolean force, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageDigests' is set
        if (imageDigests == null) {
            throw new ApiException("Missing the required parameter 'imageDigests' when calling deleteImagesAsync(Async)");
        }

        return deleteImagesAsyncCall(imageDigests, force, xAnchoreAccount, _callback);

    }

    /**
     * Bulk mark images for deletion
     * Delete analysis for image digests in the list asynchronously
     * @param imageDigests  (required)
     * @param force  (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return List&lt;DeleteImageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public List<DeleteImageResponse> deleteImagesAsync(List<String> imageDigests, Boolean force, String xAnchoreAccount) throws ApiException {
        ApiResponse<List<DeleteImageResponse>> localVarResp = deleteImagesAsyncWithHttpInfo(imageDigests, force, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * Bulk mark images for deletion
     * Delete analysis for image digests in the list asynchronously
     * @param imageDigests  (required)
     * @param force  (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;List&lt;DeleteImageResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DeleteImageResponse>> deleteImagesAsyncWithHttpInfo(List<String> imageDigests, Boolean force, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = deleteImagesAsyncValidateBeforeCall(imageDigests, force, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<List<DeleteImageResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bulk mark images for deletion (asynchronously)
     * Delete analysis for image digests in the list asynchronously
     * @param imageDigests  (required)
     * @param force  (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteImagesAsyncAsync(List<String> imageDigests, Boolean force, String xAnchoreAccount, final ApiCallback<List<DeleteImageResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteImagesAsyncValidateBeforeCall(imageDigests, force, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<List<DeleteImageResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImage
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image lookup success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageCall(String imageDigest, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/{imageDigest}"
            .replace("{" + "imageDigest" + "}", localVarApiClient.escapeString(imageDigest.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageValidateBeforeCall(String imageDigest, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageDigest' is set
        if (imageDigest == null) {
            throw new ApiException("Missing the required parameter 'imageDigest' when calling getImage(Async)");
        }

        return getImageCall(imageDigest, xAnchoreAccount, _callback);

    }

    /**
     * Get image metadata
     * 
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return List&lt;AnchoreImage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image lookup success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public List<AnchoreImage> getImage(String imageDigest, String xAnchoreAccount) throws ApiException {
        ApiResponse<List<AnchoreImage>> localVarResp = getImageWithHttpInfo(imageDigest, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * Get image metadata
     * 
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;List&lt;AnchoreImage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image lookup success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AnchoreImage>> getImageWithHttpInfo(String imageDigest, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = getImageValidateBeforeCall(imageDigest, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<List<AnchoreImage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get image metadata (asynchronously)
     * 
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image lookup success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageAsync(String imageDigest, String xAnchoreAccount, final ApiCallback<List<AnchoreImage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageValidateBeforeCall(imageDigest, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<List<AnchoreImage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImageByImageId
     * @param imageId  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image lookup success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageByImageIdCall(String imageId, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/by_id/{imageId}"
            .replace("{" + "imageId" + "}", localVarApiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageByImageIdValidateBeforeCall(String imageId, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling getImageByImageId(Async)");
        }

        return getImageByImageIdCall(imageId, xAnchoreAccount, _callback);

    }

    /**
     * Lookup image by docker imageId
     * 
     * @param imageId  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return List&lt;AnchoreImage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image lookup success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public List<AnchoreImage> getImageByImageId(String imageId, String xAnchoreAccount) throws ApiException {
        ApiResponse<List<AnchoreImage>> localVarResp = getImageByImageIdWithHttpInfo(imageId, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * Lookup image by docker imageId
     * 
     * @param imageId  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;List&lt;AnchoreImage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image lookup success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AnchoreImage>> getImageByImageIdWithHttpInfo(String imageId, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = getImageByImageIdValidateBeforeCall(imageId, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<List<AnchoreImage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lookup image by docker imageId (asynchronously)
     * 
     * @param imageId  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image lookup success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageByImageIdAsync(String imageId, String xAnchoreAccount, final ApiCallback<List<AnchoreImage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageByImageIdValidateBeforeCall(imageId, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<List<AnchoreImage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImageContentByType
     * @param imageDigest  (required)
     * @param ctype  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageContentByTypeCall(String imageDigest, String ctype, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/{imageDigest}/content/{ctype}"
            .replace("{" + "imageDigest" + "}", localVarApiClient.escapeString(imageDigest.toString()))
            .replace("{" + "ctype" + "}", localVarApiClient.escapeString(ctype.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageContentByTypeValidateBeforeCall(String imageDigest, String ctype, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageDigest' is set
        if (imageDigest == null) {
            throw new ApiException("Missing the required parameter 'imageDigest' when calling getImageContentByType(Async)");
        }

        // verify the required parameter 'ctype' is set
        if (ctype == null) {
            throw new ApiException("Missing the required parameter 'ctype' when calling getImageContentByType(Async)");
        }

        return getImageContentByTypeCall(imageDigest, ctype, xAnchoreAccount, _callback);

    }

    /**
     * Get the content of an image by type
     * 
     * @param imageDigest  (required)
     * @param ctype  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ContentPackageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ContentPackageResponse getImageContentByType(String imageDigest, String ctype, String xAnchoreAccount) throws ApiException {
        ApiResponse<ContentPackageResponse> localVarResp = getImageContentByTypeWithHttpInfo(imageDigest, ctype, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * Get the content of an image by type
     * 
     * @param imageDigest  (required)
     * @param ctype  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;ContentPackageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentPackageResponse> getImageContentByTypeWithHttpInfo(String imageDigest, String ctype, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = getImageContentByTypeValidateBeforeCall(imageDigest, ctype, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<ContentPackageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the content of an image by type (asynchronously)
     * 
     * @param imageDigest  (required)
     * @param ctype  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageContentByTypeAsync(String imageDigest, String ctype, String xAnchoreAccount, final ApiCallback<ContentPackageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageContentByTypeValidateBeforeCall(imageDigest, ctype, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<ContentPackageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImageContentByTypeFiles
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageContentByTypeFilesCall(String imageDigest, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/{imageDigest}/content/files"
            .replace("{" + "imageDigest" + "}", localVarApiClient.escapeString(imageDigest.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageContentByTypeFilesValidateBeforeCall(String imageDigest, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageDigest' is set
        if (imageDigest == null) {
            throw new ApiException("Missing the required parameter 'imageDigest' when calling getImageContentByTypeFiles(Async)");
        }

        return getImageContentByTypeFilesCall(imageDigest, xAnchoreAccount, _callback);

    }

    /**
     * Get the content of an image by type files
     * 
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ContentFilesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ContentFilesResponse getImageContentByTypeFiles(String imageDigest, String xAnchoreAccount) throws ApiException {
        ApiResponse<ContentFilesResponse> localVarResp = getImageContentByTypeFilesWithHttpInfo(imageDigest, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * Get the content of an image by type files
     * 
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;ContentFilesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentFilesResponse> getImageContentByTypeFilesWithHttpInfo(String imageDigest, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = getImageContentByTypeFilesValidateBeforeCall(imageDigest, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<ContentFilesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the content of an image by type files (asynchronously)
     * 
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageContentByTypeFilesAsync(String imageDigest, String xAnchoreAccount, final ApiCallback<ContentFilesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageContentByTypeFilesValidateBeforeCall(imageDigest, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<ContentFilesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImageContentByTypeImageId
     * @param imageId  (required)
     * @param ctype  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageContentByTypeImageIdCall(String imageId, String ctype, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/by_id/{imageId}/content/{ctype}"
            .replace("{" + "imageId" + "}", localVarApiClient.escapeString(imageId.toString()))
            .replace("{" + "ctype" + "}", localVarApiClient.escapeString(ctype.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageContentByTypeImageIdValidateBeforeCall(String imageId, String ctype, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling getImageContentByTypeImageId(Async)");
        }

        // verify the required parameter 'ctype' is set
        if (ctype == null) {
            throw new ApiException("Missing the required parameter 'ctype' when calling getImageContentByTypeImageId(Async)");
        }

        return getImageContentByTypeImageIdCall(imageId, ctype, xAnchoreAccount, _callback);

    }

    /**
     * Get the content of an image by type
     * 
     * @param imageId  (required)
     * @param ctype  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ContentPackageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ContentPackageResponse getImageContentByTypeImageId(String imageId, String ctype, String xAnchoreAccount) throws ApiException {
        ApiResponse<ContentPackageResponse> localVarResp = getImageContentByTypeImageIdWithHttpInfo(imageId, ctype, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * Get the content of an image by type
     * 
     * @param imageId  (required)
     * @param ctype  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;ContentPackageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentPackageResponse> getImageContentByTypeImageIdWithHttpInfo(String imageId, String ctype, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = getImageContentByTypeImageIdValidateBeforeCall(imageId, ctype, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<ContentPackageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the content of an image by type (asynchronously)
     * 
     * @param imageId  (required)
     * @param ctype  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageContentByTypeImageIdAsync(String imageId, String ctype, String xAnchoreAccount, final ApiCallback<ContentPackageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageContentByTypeImageIdValidateBeforeCall(imageId, ctype, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<ContentPackageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImageContentByTypeImageIdFiles
     * @param imageId  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageContentByTypeImageIdFilesCall(String imageId, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/by_id/{imageId}/content/files"
            .replace("{" + "imageId" + "}", localVarApiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageContentByTypeImageIdFilesValidateBeforeCall(String imageId, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling getImageContentByTypeImageIdFiles(Async)");
        }

        return getImageContentByTypeImageIdFilesCall(imageId, xAnchoreAccount, _callback);

    }

    /**
     * Get the content of an image by type files
     * 
     * @param imageId  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ContentFilesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ContentFilesResponse getImageContentByTypeImageIdFiles(String imageId, String xAnchoreAccount) throws ApiException {
        ApiResponse<ContentFilesResponse> localVarResp = getImageContentByTypeImageIdFilesWithHttpInfo(imageId, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * Get the content of an image by type files
     * 
     * @param imageId  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;ContentFilesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentFilesResponse> getImageContentByTypeImageIdFilesWithHttpInfo(String imageId, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = getImageContentByTypeImageIdFilesValidateBeforeCall(imageId, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<ContentFilesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the content of an image by type files (asynchronously)
     * 
     * @param imageId  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageContentByTypeImageIdFilesAsync(String imageId, String xAnchoreAccount, final ApiCallback<ContentFilesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageContentByTypeImageIdFilesValidateBeforeCall(imageId, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<ContentFilesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImageContentByTypeImageIdJavapackage
     * @param imageId  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageContentByTypeImageIdJavapackageCall(String imageId, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/by_id/{imageId}/content/java"
            .replace("{" + "imageId" + "}", localVarApiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageContentByTypeImageIdJavapackageValidateBeforeCall(String imageId, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling getImageContentByTypeImageIdJavapackage(Async)");
        }

        return getImageContentByTypeImageIdJavapackageCall(imageId, xAnchoreAccount, _callback);

    }

    /**
     * Get the content of an image by type java
     * 
     * @param imageId  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ContentJAVAPackageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ContentJAVAPackageResponse getImageContentByTypeImageIdJavapackage(String imageId, String xAnchoreAccount) throws ApiException {
        ApiResponse<ContentJAVAPackageResponse> localVarResp = getImageContentByTypeImageIdJavapackageWithHttpInfo(imageId, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * Get the content of an image by type java
     * 
     * @param imageId  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;ContentJAVAPackageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentJAVAPackageResponse> getImageContentByTypeImageIdJavapackageWithHttpInfo(String imageId, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = getImageContentByTypeImageIdJavapackageValidateBeforeCall(imageId, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<ContentJAVAPackageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the content of an image by type java (asynchronously)
     * 
     * @param imageId  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageContentByTypeImageIdJavapackageAsync(String imageId, String xAnchoreAccount, final ApiCallback<ContentJAVAPackageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageContentByTypeImageIdJavapackageValidateBeforeCall(imageId, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<ContentJAVAPackageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImageContentByTypeJavapackage
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageContentByTypeJavapackageCall(String imageDigest, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/{imageDigest}/content/java"
            .replace("{" + "imageDigest" + "}", localVarApiClient.escapeString(imageDigest.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageContentByTypeJavapackageValidateBeforeCall(String imageDigest, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageDigest' is set
        if (imageDigest == null) {
            throw new ApiException("Missing the required parameter 'imageDigest' when calling getImageContentByTypeJavapackage(Async)");
        }

        return getImageContentByTypeJavapackageCall(imageDigest, xAnchoreAccount, _callback);

    }

    /**
     * Get the content of an image by type java
     * 
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ContentJAVAPackageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ContentJAVAPackageResponse getImageContentByTypeJavapackage(String imageDigest, String xAnchoreAccount) throws ApiException {
        ApiResponse<ContentJAVAPackageResponse> localVarResp = getImageContentByTypeJavapackageWithHttpInfo(imageDigest, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * Get the content of an image by type java
     * 
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;ContentJAVAPackageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentJAVAPackageResponse> getImageContentByTypeJavapackageWithHttpInfo(String imageDigest, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = getImageContentByTypeJavapackageValidateBeforeCall(imageDigest, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<ContentJAVAPackageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the content of an image by type java (asynchronously)
     * 
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageContentByTypeJavapackageAsync(String imageDigest, String xAnchoreAccount, final ApiCallback<ContentJAVAPackageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageContentByTypeJavapackageValidateBeforeCall(imageDigest, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<ContentJAVAPackageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImageContentByTypeMalware
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageContentByTypeMalwareCall(String imageDigest, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/{imageDigest}/content/malware"
            .replace("{" + "imageDigest" + "}", localVarApiClient.escapeString(imageDigest.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageContentByTypeMalwareValidateBeforeCall(String imageDigest, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageDigest' is set
        if (imageDigest == null) {
            throw new ApiException("Missing the required parameter 'imageDigest' when calling getImageContentByTypeMalware(Async)");
        }

        return getImageContentByTypeMalwareCall(imageDigest, xAnchoreAccount, _callback);

    }

    /**
     * Get the content of an image by type malware
     * 
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ContentMalwareResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ContentMalwareResponse getImageContentByTypeMalware(String imageDigest, String xAnchoreAccount) throws ApiException {
        ApiResponse<ContentMalwareResponse> localVarResp = getImageContentByTypeMalwareWithHttpInfo(imageDigest, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * Get the content of an image by type malware
     * 
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;ContentMalwareResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentMalwareResponse> getImageContentByTypeMalwareWithHttpInfo(String imageDigest, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = getImageContentByTypeMalwareValidateBeforeCall(imageDigest, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<ContentMalwareResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the content of an image by type malware (asynchronously)
     * 
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageContentByTypeMalwareAsync(String imageDigest, String xAnchoreAccount, final ApiCallback<ContentMalwareResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageContentByTypeMalwareValidateBeforeCall(imageDigest, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<ContentMalwareResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImageMetadataByType
     * @param imageDigest  (required)
     * @param mtype  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadata of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageMetadataByTypeCall(String imageDigest, String mtype, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/{imageDigest}/metadata/{mtype}"
            .replace("{" + "imageDigest" + "}", localVarApiClient.escapeString(imageDigest.toString()))
            .replace("{" + "mtype" + "}", localVarApiClient.escapeString(mtype.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageMetadataByTypeValidateBeforeCall(String imageDigest, String mtype, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageDigest' is set
        if (imageDigest == null) {
            throw new ApiException("Missing the required parameter 'imageDigest' when calling getImageMetadataByType(Async)");
        }

        // verify the required parameter 'mtype' is set
        if (mtype == null) {
            throw new ApiException("Missing the required parameter 'mtype' when calling getImageMetadataByType(Async)");
        }

        return getImageMetadataByTypeCall(imageDigest, mtype, xAnchoreAccount, _callback);

    }

    /**
     * Get the metadata of an image by type
     * 
     * @param imageDigest  (required)
     * @param mtype  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return MetadataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadata of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public MetadataResponse getImageMetadataByType(String imageDigest, String mtype, String xAnchoreAccount) throws ApiException {
        ApiResponse<MetadataResponse> localVarResp = getImageMetadataByTypeWithHttpInfo(imageDigest, mtype, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * Get the metadata of an image by type
     * 
     * @param imageDigest  (required)
     * @param mtype  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;MetadataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadata of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetadataResponse> getImageMetadataByTypeWithHttpInfo(String imageDigest, String mtype, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = getImageMetadataByTypeValidateBeforeCall(imageDigest, mtype, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<MetadataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the metadata of an image by type (asynchronously)
     * 
     * @param imageDigest  (required)
     * @param mtype  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadata of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageMetadataByTypeAsync(String imageDigest, String mtype, String xAnchoreAccount, final ApiCallback<MetadataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageMetadataByTypeValidateBeforeCall(imageDigest, mtype, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<MetadataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImagePolicyCheck
     * @param imageDigest  (required)
     * @param tag  (required)
     * @param policyId  (optional)
     * @param detail  (optional)
     * @param history  (optional)
     * @param interactive  (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Policy evaluation success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImagePolicyCheckCall(String imageDigest, String tag, String policyId, Boolean detail, Boolean history, Boolean interactive, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/{imageDigest}/check"
            .replace("{" + "imageDigest" + "}", localVarApiClient.escapeString(imageDigest.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (policyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("policyId", policyId));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (detail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("detail", detail));
        }

        if (history != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("history", history));
        }

        if (interactive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interactive", interactive));
        }

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImagePolicyCheckValidateBeforeCall(String imageDigest, String tag, String policyId, Boolean detail, Boolean history, Boolean interactive, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageDigest' is set
        if (imageDigest == null) {
            throw new ApiException("Missing the required parameter 'imageDigest' when calling getImagePolicyCheck(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling getImagePolicyCheck(Async)");
        }

        return getImagePolicyCheckCall(imageDigest, tag, policyId, detail, history, interactive, xAnchoreAccount, _callback);

    }

    /**
     * Check policy evaluation status for image
     * Get the policy evaluation for the given image
     * @param imageDigest  (required)
     * @param tag  (required)
     * @param policyId  (optional)
     * @param detail  (optional)
     * @param history  (optional)
     * @param interactive  (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Policy evaluation success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getImagePolicyCheck(String imageDigest, String tag, String policyId, Boolean detail, Boolean history, Boolean interactive, String xAnchoreAccount) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getImagePolicyCheckWithHttpInfo(imageDigest, tag, policyId, detail, history, interactive, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * Check policy evaluation status for image
     * Get the policy evaluation for the given image
     * @param imageDigest  (required)
     * @param tag  (required)
     * @param policyId  (optional)
     * @param detail  (optional)
     * @param history  (optional)
     * @param interactive  (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Policy evaluation success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getImagePolicyCheckWithHttpInfo(String imageDigest, String tag, String policyId, Boolean detail, Boolean history, Boolean interactive, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = getImagePolicyCheckValidateBeforeCall(imageDigest, tag, policyId, detail, history, interactive, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check policy evaluation status for image (asynchronously)
     * Get the policy evaluation for the given image
     * @param imageDigest  (required)
     * @param tag  (required)
     * @param policyId  (optional)
     * @param detail  (optional)
     * @param history  (optional)
     * @param interactive  (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Policy evaluation success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImagePolicyCheckAsync(String imageDigest, String tag, String policyId, Boolean detail, Boolean history, Boolean interactive, String xAnchoreAccount, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImagePolicyCheckValidateBeforeCall(imageDigest, tag, policyId, detail, history, interactive, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImagePolicyCheckByImageId
     * @param imageId  (required)
     * @param tag  (required)
     * @param policyId  (optional)
     * @param detail  (optional)
     * @param history  (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Policy evaluation success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImagePolicyCheckByImageIdCall(String imageId, String tag, String policyId, Boolean detail, Boolean history, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/by_id/{imageId}/check"
            .replace("{" + "imageId" + "}", localVarApiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (policyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("policyId", policyId));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (detail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("detail", detail));
        }

        if (history != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("history", history));
        }

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImagePolicyCheckByImageIdValidateBeforeCall(String imageId, String tag, String policyId, Boolean detail, Boolean history, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling getImagePolicyCheckByImageId(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling getImagePolicyCheckByImageId(Async)");
        }

        return getImagePolicyCheckByImageIdCall(imageId, tag, policyId, detail, history, xAnchoreAccount, _callback);

    }

    /**
     * Check policy evaluation status for image
     * Get the policy evaluation for the given image
     * @param imageId  (required)
     * @param tag  (required)
     * @param policyId  (optional)
     * @param detail  (optional)
     * @param history  (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Policy evaluation success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getImagePolicyCheckByImageId(String imageId, String tag, String policyId, Boolean detail, Boolean history, String xAnchoreAccount) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getImagePolicyCheckByImageIdWithHttpInfo(imageId, tag, policyId, detail, history, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * Check policy evaluation status for image
     * Get the policy evaluation for the given image
     * @param imageId  (required)
     * @param tag  (required)
     * @param policyId  (optional)
     * @param detail  (optional)
     * @param history  (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Policy evaluation success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getImagePolicyCheckByImageIdWithHttpInfo(String imageId, String tag, String policyId, Boolean detail, Boolean history, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = getImagePolicyCheckByImageIdValidateBeforeCall(imageId, tag, policyId, detail, history, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check policy evaluation status for image (asynchronously)
     * Get the policy evaluation for the given image
     * @param imageId  (required)
     * @param tag  (required)
     * @param policyId  (optional)
     * @param detail  (optional)
     * @param history  (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Policy evaluation success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImagePolicyCheckByImageIdAsync(String imageId, String tag, String policyId, Boolean detail, Boolean history, String xAnchoreAccount, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImagePolicyCheckByImageIdValidateBeforeCall(imageId, tag, policyId, detail, history, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImageSbomNative
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image lookup success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageSbomNativeCall(String imageDigest, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/{imageDigest}/sboms/native"
            .replace("{" + "imageDigest" + "}", localVarApiClient.escapeString(imageDigest.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/gzip"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageSbomNativeValidateBeforeCall(String imageDigest, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageDigest' is set
        if (imageDigest == null) {
            throw new ApiException("Missing the required parameter 'imageDigest' when calling getImageSbomNative(Async)");
        }

        return getImageSbomNativeCall(imageDigest, xAnchoreAccount, _callback);

    }

    /**
     * Get image sbom in the native Anchore format
     * 
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image lookup success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public File getImageSbomNative(String imageDigest, String xAnchoreAccount) throws ApiException {
        ApiResponse<File> localVarResp = getImageSbomNativeWithHttpInfo(imageDigest, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * Get image sbom in the native Anchore format
     * 
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image lookup success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getImageSbomNativeWithHttpInfo(String imageDigest, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = getImageSbomNativeValidateBeforeCall(imageDigest, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get image sbom in the native Anchore format (asynchronously)
     * 
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image lookup success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageSbomNativeAsync(String imageDigest, String xAnchoreAccount, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageSbomNativeValidateBeforeCall(imageDigest, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImageVulnerabilitiesByType
     * @param imageDigest  (required)
     * @param vtype  (required)
     * @param forceRefresh  (optional)
     * @param vendorOnly Filter results to include only vulnerabilities that are not marked as invalid by upstream OS vendor data. When set to true, it will filter out all vulnerabilities where &#x60;will_not_fix&#x60; is False. If false all vulnerabilities are returned regardless of &#x60;will_not_fix&#x60; (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vulnerability listing for the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageVulnerabilitiesByTypeCall(String imageDigest, String vtype, Boolean forceRefresh, Boolean vendorOnly, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/{imageDigest}/vuln/{vtype}"
            .replace("{" + "imageDigest" + "}", localVarApiClient.escapeString(imageDigest.toString()))
            .replace("{" + "vtype" + "}", localVarApiClient.escapeString(vtype.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (forceRefresh != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force_refresh", forceRefresh));
        }

        if (vendorOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vendor_only", vendorOnly));
        }

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageVulnerabilitiesByTypeValidateBeforeCall(String imageDigest, String vtype, Boolean forceRefresh, Boolean vendorOnly, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageDigest' is set
        if (imageDigest == null) {
            throw new ApiException("Missing the required parameter 'imageDigest' when calling getImageVulnerabilitiesByType(Async)");
        }

        // verify the required parameter 'vtype' is set
        if (vtype == null) {
            throw new ApiException("Missing the required parameter 'vtype' when calling getImageVulnerabilitiesByType(Async)");
        }

        return getImageVulnerabilitiesByTypeCall(imageDigest, vtype, forceRefresh, vendorOnly, xAnchoreAccount, _callback);

    }

    /**
     * Get vulnerabilities by type
     * 
     * @param imageDigest  (required)
     * @param vtype  (required)
     * @param forceRefresh  (optional)
     * @param vendorOnly Filter results to include only vulnerabilities that are not marked as invalid by upstream OS vendor data. When set to true, it will filter out all vulnerabilities where &#x60;will_not_fix&#x60; is False. If false all vulnerabilities are returned regardless of &#x60;will_not_fix&#x60; (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return VulnerabilityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vulnerability listing for the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public VulnerabilityResponse getImageVulnerabilitiesByType(String imageDigest, String vtype, Boolean forceRefresh, Boolean vendorOnly, String xAnchoreAccount) throws ApiException {
        ApiResponse<VulnerabilityResponse> localVarResp = getImageVulnerabilitiesByTypeWithHttpInfo(imageDigest, vtype, forceRefresh, vendorOnly, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * Get vulnerabilities by type
     * 
     * @param imageDigest  (required)
     * @param vtype  (required)
     * @param forceRefresh  (optional)
     * @param vendorOnly Filter results to include only vulnerabilities that are not marked as invalid by upstream OS vendor data. When set to true, it will filter out all vulnerabilities where &#x60;will_not_fix&#x60; is False. If false all vulnerabilities are returned regardless of &#x60;will_not_fix&#x60; (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;VulnerabilityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vulnerability listing for the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VulnerabilityResponse> getImageVulnerabilitiesByTypeWithHttpInfo(String imageDigest, String vtype, Boolean forceRefresh, Boolean vendorOnly, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = getImageVulnerabilitiesByTypeValidateBeforeCall(imageDigest, vtype, forceRefresh, vendorOnly, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<VulnerabilityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get vulnerabilities by type (asynchronously)
     * 
     * @param imageDigest  (required)
     * @param vtype  (required)
     * @param forceRefresh  (optional)
     * @param vendorOnly Filter results to include only vulnerabilities that are not marked as invalid by upstream OS vendor data. When set to true, it will filter out all vulnerabilities where &#x60;will_not_fix&#x60; is False. If false all vulnerabilities are returned regardless of &#x60;will_not_fix&#x60; (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vulnerability listing for the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageVulnerabilitiesByTypeAsync(String imageDigest, String vtype, Boolean forceRefresh, Boolean vendorOnly, String xAnchoreAccount, final ApiCallback<VulnerabilityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageVulnerabilitiesByTypeValidateBeforeCall(imageDigest, vtype, forceRefresh, vendorOnly, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<VulnerabilityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImageVulnerabilitiesByTypeImageId
     * @param imageId  (required)
     * @param vtype  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vulnerability listing for the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageVulnerabilitiesByTypeImageIdCall(String imageId, String vtype, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/by_id/{imageId}/vuln/{vtype}"
            .replace("{" + "imageId" + "}", localVarApiClient.escapeString(imageId.toString()))
            .replace("{" + "vtype" + "}", localVarApiClient.escapeString(vtype.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageVulnerabilitiesByTypeImageIdValidateBeforeCall(String imageId, String vtype, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling getImageVulnerabilitiesByTypeImageId(Async)");
        }

        // verify the required parameter 'vtype' is set
        if (vtype == null) {
            throw new ApiException("Missing the required parameter 'vtype' when calling getImageVulnerabilitiesByTypeImageId(Async)");
        }

        return getImageVulnerabilitiesByTypeImageIdCall(imageId, vtype, xAnchoreAccount, _callback);

    }

    /**
     * Get vulnerabilities by type
     * 
     * @param imageId  (required)
     * @param vtype  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return VulnerabilityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vulnerability listing for the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public VulnerabilityResponse getImageVulnerabilitiesByTypeImageId(String imageId, String vtype, String xAnchoreAccount) throws ApiException {
        ApiResponse<VulnerabilityResponse> localVarResp = getImageVulnerabilitiesByTypeImageIdWithHttpInfo(imageId, vtype, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * Get vulnerabilities by type
     * 
     * @param imageId  (required)
     * @param vtype  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;VulnerabilityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vulnerability listing for the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VulnerabilityResponse> getImageVulnerabilitiesByTypeImageIdWithHttpInfo(String imageId, String vtype, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = getImageVulnerabilitiesByTypeImageIdValidateBeforeCall(imageId, vtype, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<VulnerabilityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get vulnerabilities by type (asynchronously)
     * 
     * @param imageId  (required)
     * @param vtype  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vulnerability listing for the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageVulnerabilitiesByTypeImageIdAsync(String imageId, String vtype, String xAnchoreAccount, final ApiCallback<VulnerabilityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageVulnerabilitiesByTypeImageIdValidateBeforeCall(imageId, vtype, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<VulnerabilityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImageVulnerabilityTypes
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vulnerability listing for the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageVulnerabilityTypesCall(String imageDigest, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/{imageDigest}/vuln"
            .replace("{" + "imageDigest" + "}", localVarApiClient.escapeString(imageDigest.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageVulnerabilityTypesValidateBeforeCall(String imageDigest, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageDigest' is set
        if (imageDigest == null) {
            throw new ApiException("Missing the required parameter 'imageDigest' when calling getImageVulnerabilityTypes(Async)");
        }

        return getImageVulnerabilityTypesCall(imageDigest, xAnchoreAccount, _callback);

    }

    /**
     * Get vulnerability types
     * 
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vulnerability listing for the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getImageVulnerabilityTypes(String imageDigest, String xAnchoreAccount) throws ApiException {
        ApiResponse<List<String>> localVarResp = getImageVulnerabilityTypesWithHttpInfo(imageDigest, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * Get vulnerability types
     * 
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vulnerability listing for the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getImageVulnerabilityTypesWithHttpInfo(String imageDigest, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = getImageVulnerabilityTypesValidateBeforeCall(imageDigest, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get vulnerability types (asynchronously)
     * 
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vulnerability listing for the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageVulnerabilityTypesAsync(String imageDigest, String xAnchoreAccount, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageVulnerabilityTypesValidateBeforeCall(imageDigest, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImageVulnerabilityTypesByImageId
     * @param imageId  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vulnerability listing for the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageVulnerabilityTypesByImageIdCall(String imageId, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/by_id/{imageId}/vuln"
            .replace("{" + "imageId" + "}", localVarApiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageVulnerabilityTypesByImageIdValidateBeforeCall(String imageId, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling getImageVulnerabilityTypesByImageId(Async)");
        }

        return getImageVulnerabilityTypesByImageIdCall(imageId, xAnchoreAccount, _callback);

    }

    /**
     * Get vulnerability types
     * 
     * @param imageId  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vulnerability listing for the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getImageVulnerabilityTypesByImageId(String imageId, String xAnchoreAccount) throws ApiException {
        ApiResponse<List<String>> localVarResp = getImageVulnerabilityTypesByImageIdWithHttpInfo(imageId, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * Get vulnerability types
     * 
     * @param imageId  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vulnerability listing for the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getImageVulnerabilityTypesByImageIdWithHttpInfo(String imageId, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = getImageVulnerabilityTypesByImageIdValidateBeforeCall(imageId, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get vulnerability types (asynchronously)
     * 
     * @param imageId  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vulnerability listing for the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageVulnerabilityTypesByImageIdAsync(String imageId, String xAnchoreAccount, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageVulnerabilityTypesByImageIdValidateBeforeCall(imageId, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listImageContent
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content listing for the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listImageContentCall(String imageDigest, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/{imageDigest}/content"
            .replace("{" + "imageDigest" + "}", localVarApiClient.escapeString(imageDigest.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listImageContentValidateBeforeCall(String imageDigest, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageDigest' is set
        if (imageDigest == null) {
            throw new ApiException("Missing the required parameter 'imageDigest' when calling listImageContent(Async)");
        }

        return listImageContentCall(imageDigest, xAnchoreAccount, _callback);

    }

    /**
     * List image content types
     * 
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content listing for the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public List<String> listImageContent(String imageDigest, String xAnchoreAccount) throws ApiException {
        ApiResponse<List<String>> localVarResp = listImageContentWithHttpInfo(imageDigest, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * List image content types
     * 
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content listing for the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> listImageContentWithHttpInfo(String imageDigest, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = listImageContentValidateBeforeCall(imageDigest, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List image content types (asynchronously)
     * 
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content listing for the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listImageContentAsync(String imageDigest, String xAnchoreAccount, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listImageContentValidateBeforeCall(imageDigest, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listImageContentByImageid
     * @param imageId  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listImageContentByImageidCall(String imageId, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/by_id/{imageId}/content"
            .replace("{" + "imageId" + "}", localVarApiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listImageContentByImageidValidateBeforeCall(String imageId, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling listImageContentByImageid(Async)");
        }

        return listImageContentByImageidCall(imageId, xAnchoreAccount, _callback);

    }

    /**
     * List image content types
     * 
     * @param imageId  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public List<String> listImageContentByImageid(String imageId, String xAnchoreAccount) throws ApiException {
        ApiResponse<List<String>> localVarResp = listImageContentByImageidWithHttpInfo(imageId, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * List image content types
     * 
     * @param imageId  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> listImageContentByImageidWithHttpInfo(String imageId, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = listImageContentByImageidValidateBeforeCall(imageId, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List image content types (asynchronously)
     * 
     * @param imageId  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of specified type from the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listImageContentByImageidAsync(String imageId, String xAnchoreAccount, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listImageContentByImageidValidateBeforeCall(imageId, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listImageMetadata
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadata listing for the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listImageMetadataCall(String imageDigest, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/{imageDigest}/metadata"
            .replace("{" + "imageDigest" + "}", localVarApiClient.escapeString(imageDigest.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listImageMetadataValidateBeforeCall(String imageDigest, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageDigest' is set
        if (imageDigest == null) {
            throw new ApiException("Missing the required parameter 'imageDigest' when calling listImageMetadata(Async)");
        }

        return listImageMetadataCall(imageDigest, xAnchoreAccount, _callback);

    }

    /**
     * List image metadata types
     * 
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadata listing for the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public List<String> listImageMetadata(String imageDigest, String xAnchoreAccount) throws ApiException {
        ApiResponse<List<String>> localVarResp = listImageMetadataWithHttpInfo(imageDigest, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * List image metadata types
     * 
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadata listing for the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> listImageMetadataWithHttpInfo(String imageDigest, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = listImageMetadataValidateBeforeCall(imageDigest, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List image metadata types (asynchronously)
     * 
     * @param imageDigest  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metadata listing for the image </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listImageMetadataAsync(String imageDigest, String xAnchoreAccount, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listImageMetadataValidateBeforeCall(imageDigest, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listImages
     * @param history Include image history in the response (optional)
     * @param fulltag Full docker-pull string to filter results by (e.g. docker.io/library/nginx:latest, or myhost.com:5000/testimages:v1.1.1) (optional)
     * @param imageStatus Filter by image_status value on the record. Default if omitted is &#39;active&#39;. (optional, default to active)
     * @param analysisStatus Filter by analysis_status value on the record. (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listImagesCall(Boolean history, String fulltag, String imageStatus, String analysisStatus, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (history != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("history", history));
        }

        if (fulltag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fulltag", fulltag));
        }

        if (imageStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("image_status", imageStatus));
        }

        if (analysisStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("analysis_status", analysisStatus));
        }

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listImagesValidateBeforeCall(Boolean history, String fulltag, String imageStatus, String analysisStatus, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        return listImagesCall(history, fulltag, imageStatus, analysisStatus, xAnchoreAccount, _callback);

    }

    /**
     * List all visible images
     * List all images visible to the user
     * @param history Include image history in the response (optional)
     * @param fulltag Full docker-pull string to filter results by (e.g. docker.io/library/nginx:latest, or myhost.com:5000/testimages:v1.1.1) (optional)
     * @param imageStatus Filter by image_status value on the record. Default if omitted is &#39;active&#39;. (optional, default to active)
     * @param analysisStatus Filter by analysis_status value on the record. (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return List&lt;AnchoreImage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public List<AnchoreImage> listImages(Boolean history, String fulltag, String imageStatus, String analysisStatus, String xAnchoreAccount) throws ApiException {
        ApiResponse<List<AnchoreImage>> localVarResp = listImagesWithHttpInfo(history, fulltag, imageStatus, analysisStatus, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * List all visible images
     * List all images visible to the user
     * @param history Include image history in the response (optional)
     * @param fulltag Full docker-pull string to filter results by (e.g. docker.io/library/nginx:latest, or myhost.com:5000/testimages:v1.1.1) (optional)
     * @param imageStatus Filter by image_status value on the record. Default if omitted is &#39;active&#39;. (optional, default to active)
     * @param analysisStatus Filter by analysis_status value on the record. (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;List&lt;AnchoreImage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AnchoreImage>> listImagesWithHttpInfo(Boolean history, String fulltag, String imageStatus, String analysisStatus, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = listImagesValidateBeforeCall(history, fulltag, imageStatus, analysisStatus, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<List<AnchoreImage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all visible images (asynchronously)
     * List all images visible to the user
     * @param history Include image history in the response (optional)
     * @param fulltag Full docker-pull string to filter results by (e.g. docker.io/library/nginx:latest, or myhost.com:5000/testimages:v1.1.1) (optional)
     * @param imageStatus Filter by image_status value on the record. Default if omitted is &#39;active&#39;. (optional, default to active)
     * @param analysisStatus Filter by analysis_status value on the record. (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listImagesAsync(Boolean history, String fulltag, String imageStatus, String analysisStatus, String xAnchoreAccount, final ApiCallback<List<AnchoreImage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listImagesValidateBeforeCall(history, fulltag, imageStatus, analysisStatus, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<List<AnchoreImage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
