/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiErrorResponse;
import org.openapitools.client.model.RegistryConfiguration;
import org.openapitools.client.model.RegistryConfigurationRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RegistriesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RegistriesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RegistriesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createRegistry
     * @param registryConfigurationRequest  (required)
     * @param validate flag to determine whether or not to validate registry/credential at registry add time (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Saved registry configuration </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRegistryCall(RegistryConfigurationRequest registryConfigurationRequest, Boolean validate, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = registryConfigurationRequest;

        // create path and map variables
        String localVarPath = "/registries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (validate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate", validate));
        }

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRegistryValidateBeforeCall(RegistryConfigurationRequest registryConfigurationRequest, Boolean validate, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registryConfigurationRequest' is set
        if (registryConfigurationRequest == null) {
            throw new ApiException("Missing the required parameter 'registryConfigurationRequest' when calling createRegistry(Async)");
        }

        return createRegistryCall(registryConfigurationRequest, validate, xAnchoreAccount, _callback);

    }

    /**
     * Add a new registry
     * Adds a new registry to the system
     * @param registryConfigurationRequest  (required)
     * @param validate flag to determine whether or not to validate registry/credential at registry add time (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return List&lt;RegistryConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Saved registry configuration </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public List<RegistryConfiguration> createRegistry(RegistryConfigurationRequest registryConfigurationRequest, Boolean validate, String xAnchoreAccount) throws ApiException {
        ApiResponse<List<RegistryConfiguration>> localVarResp = createRegistryWithHttpInfo(registryConfigurationRequest, validate, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * Add a new registry
     * Adds a new registry to the system
     * @param registryConfigurationRequest  (required)
     * @param validate flag to determine whether or not to validate registry/credential at registry add time (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;List&lt;RegistryConfiguration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Saved registry configuration </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RegistryConfiguration>> createRegistryWithHttpInfo(RegistryConfigurationRequest registryConfigurationRequest, Boolean validate, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = createRegistryValidateBeforeCall(registryConfigurationRequest, validate, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<List<RegistryConfiguration>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new registry (asynchronously)
     * Adds a new registry to the system
     * @param registryConfigurationRequest  (required)
     * @param validate flag to determine whether or not to validate registry/credential at registry add time (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Saved registry configuration </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRegistryAsync(RegistryConfigurationRequest registryConfigurationRequest, Boolean validate, String xAnchoreAccount, final ApiCallback<List<RegistryConfiguration>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRegistryValidateBeforeCall(registryConfigurationRequest, validate, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<List<RegistryConfiguration>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRegistry
     * @param registry  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRegistryCall(String registry, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registries/{registry}"
            .replace("{" + "registry" + "}", localVarApiClient.escapeString(registry.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRegistryValidateBeforeCall(String registry, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registry' is set
        if (registry == null) {
            throw new ApiException("Missing the required parameter 'registry' when calling deleteRegistry(Async)");
        }

        return deleteRegistryCall(registry, xAnchoreAccount, _callback);

    }

    /**
     * Delete a registry configuration
     * Delete a registry configuration record from the system. Does not remove any images.
     * @param registry  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRegistry(String registry, String xAnchoreAccount) throws ApiException {
        deleteRegistryWithHttpInfo(registry, xAnchoreAccount);
    }

    /**
     * Delete a registry configuration
     * Delete a registry configuration record from the system. Does not remove any images.
     * @param registry  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRegistryWithHttpInfo(String registry, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = deleteRegistryValidateBeforeCall(registry, xAnchoreAccount, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a registry configuration (asynchronously)
     * Delete a registry configuration record from the system. Does not remove any images.
     * @param registry  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRegistryAsync(String registry, String xAnchoreAccount, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRegistryValidateBeforeCall(registry, xAnchoreAccount, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRegistry
     * @param registry  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registry configuration </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistryCall(String registry, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registries/{registry}"
            .replace("{" + "registry" + "}", localVarApiClient.escapeString(registry.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRegistryValidateBeforeCall(String registry, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registry' is set
        if (registry == null) {
            throw new ApiException("Missing the required parameter 'registry' when calling getRegistry(Async)");
        }

        return getRegistryCall(registry, xAnchoreAccount, _callback);

    }

    /**
     * Get a specific registry configuration
     * Get information on a specific registry
     * @param registry  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return List&lt;RegistryConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registry configuration </td><td>  -  </td></tr>
     </table>
     */
    public List<RegistryConfiguration> getRegistry(String registry, String xAnchoreAccount) throws ApiException {
        ApiResponse<List<RegistryConfiguration>> localVarResp = getRegistryWithHttpInfo(registry, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * Get a specific registry configuration
     * Get information on a specific registry
     * @param registry  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;List&lt;RegistryConfiguration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registry configuration </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RegistryConfiguration>> getRegistryWithHttpInfo(String registry, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = getRegistryValidateBeforeCall(registry, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<List<RegistryConfiguration>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific registry configuration (asynchronously)
     * Get information on a specific registry
     * @param registry  (required)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registry configuration </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistryAsync(String registry, String xAnchoreAccount, final ApiCallback<List<RegistryConfiguration>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRegistryValidateBeforeCall(registry, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<List<RegistryConfiguration>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRegistries
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registry listing </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRegistriesCall(String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRegistriesValidateBeforeCall(String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        return listRegistriesCall(xAnchoreAccount, _callback);

    }

    /**
     * List configured registries
     * List all configured registries the system can/will watch
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return List&lt;RegistryConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registry listing </td><td>  -  </td></tr>
     </table>
     */
    public List<RegistryConfiguration> listRegistries(String xAnchoreAccount) throws ApiException {
        ApiResponse<List<RegistryConfiguration>> localVarResp = listRegistriesWithHttpInfo(xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * List configured registries
     * List all configured registries the system can/will watch
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;List&lt;RegistryConfiguration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registry listing </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RegistryConfiguration>> listRegistriesWithHttpInfo(String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = listRegistriesValidateBeforeCall(xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<List<RegistryConfiguration>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List configured registries (asynchronously)
     * List all configured registries the system can/will watch
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registry listing </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRegistriesAsync(String xAnchoreAccount, final ApiCallback<List<RegistryConfiguration>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRegistriesValidateBeforeCall(xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<List<RegistryConfiguration>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRegistry
     * @param registry  (required)
     * @param registryConfigurationRequest  (required)
     * @param validate flag to determine whether or not to validate registry/credential at registry update time (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated registry configuration </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRegistryCall(String registry, RegistryConfigurationRequest registryConfigurationRequest, Boolean validate, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = registryConfigurationRequest;

        // create path and map variables
        String localVarPath = "/registries/{registry}"
            .replace("{" + "registry" + "}", localVarApiClient.escapeString(registry.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (validate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate", validate));
        }

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRegistryValidateBeforeCall(String registry, RegistryConfigurationRequest registryConfigurationRequest, Boolean validate, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registry' is set
        if (registry == null) {
            throw new ApiException("Missing the required parameter 'registry' when calling updateRegistry(Async)");
        }

        // verify the required parameter 'registryConfigurationRequest' is set
        if (registryConfigurationRequest == null) {
            throw new ApiException("Missing the required parameter 'registryConfigurationRequest' when calling updateRegistry(Async)");
        }

        return updateRegistryCall(registry, registryConfigurationRequest, validate, xAnchoreAccount, _callback);

    }

    /**
     * Update/replace a registry configuration
     * Replaces an existing registry record with the given record
     * @param registry  (required)
     * @param registryConfigurationRequest  (required)
     * @param validate flag to determine whether or not to validate registry/credential at registry update time (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return List&lt;RegistryConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated registry configuration </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public List<RegistryConfiguration> updateRegistry(String registry, RegistryConfigurationRequest registryConfigurationRequest, Boolean validate, String xAnchoreAccount) throws ApiException {
        ApiResponse<List<RegistryConfiguration>> localVarResp = updateRegistryWithHttpInfo(registry, registryConfigurationRequest, validate, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * Update/replace a registry configuration
     * Replaces an existing registry record with the given record
     * @param registry  (required)
     * @param registryConfigurationRequest  (required)
     * @param validate flag to determine whether or not to validate registry/credential at registry update time (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;List&lt;RegistryConfiguration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated registry configuration </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RegistryConfiguration>> updateRegistryWithHttpInfo(String registry, RegistryConfigurationRequest registryConfigurationRequest, Boolean validate, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = updateRegistryValidateBeforeCall(registry, registryConfigurationRequest, validate, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<List<RegistryConfiguration>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update/replace a registry configuration (asynchronously)
     * Replaces an existing registry record with the given record
     * @param registry  (required)
     * @param registryConfigurationRequest  (required)
     * @param validate flag to determine whether or not to validate registry/credential at registry update time (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated registry configuration </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRegistryAsync(String registry, RegistryConfigurationRequest registryConfigurationRequest, Boolean validate, String xAnchoreAccount, final ApiCallback<List<RegistryConfiguration>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRegistryValidateBeforeCall(registry, registryConfigurationRequest, validate, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<List<RegistryConfiguration>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
