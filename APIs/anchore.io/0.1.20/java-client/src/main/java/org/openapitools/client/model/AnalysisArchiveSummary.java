/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A summarization of the analysis archive, including size, counts, etc. This archive stores image analysis only, never the actual image content or layers.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:58.810142-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnalysisArchiveSummary {
  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_TOTAL_DATA_BYTES = "total_data_bytes";
  @SerializedName(SERIALIZED_NAME_TOTAL_DATA_BYTES)
  private Integer totalDataBytes;

  public static final String SERIALIZED_NAME_TOTAL_IMAGE_COUNT = "total_image_count";
  @SerializedName(SERIALIZED_NAME_TOTAL_IMAGE_COUNT)
  private Integer totalImageCount;

  public static final String SERIALIZED_NAME_TOTAL_TAG_COUNT = "total_tag_count";
  @SerializedName(SERIALIZED_NAME_TOTAL_TAG_COUNT)
  private Integer totalTagCount;

  public AnalysisArchiveSummary() {
  }

  public AnalysisArchiveSummary lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * The timestamp of the most recent archived image
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public AnalysisArchiveSummary totalDataBytes(Integer totalDataBytes) {
    this.totalDataBytes = totalDataBytes;
    return this;
  }

  /**
   * The total sum of all the bytes stored to the backing storage. Accounts for anchore-applied compression, but not compression by the underlying storage system.
   * @return totalDataBytes
   */
  @javax.annotation.Nullable
  public Integer getTotalDataBytes() {
    return totalDataBytes;
  }

  public void setTotalDataBytes(Integer totalDataBytes) {
    this.totalDataBytes = totalDataBytes;
  }


  public AnalysisArchiveSummary totalImageCount(Integer totalImageCount) {
    this.totalImageCount = totalImageCount;
    return this;
  }

  /**
   * The number of unique images (digests) in the archive
   * @return totalImageCount
   */
  @javax.annotation.Nullable
  public Integer getTotalImageCount() {
    return totalImageCount;
  }

  public void setTotalImageCount(Integer totalImageCount) {
    this.totalImageCount = totalImageCount;
  }


  public AnalysisArchiveSummary totalTagCount(Integer totalTagCount) {
    this.totalTagCount = totalTagCount;
    return this;
  }

  /**
   * The number of tag records (registry/repo:tag pull strings) in the archive. This may include repeated tags but will always have a unique tag-&gt;digest mapping per record.
   * @return totalTagCount
   */
  @javax.annotation.Nullable
  public Integer getTotalTagCount() {
    return totalTagCount;
  }

  public void setTotalTagCount(Integer totalTagCount) {
    this.totalTagCount = totalTagCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalysisArchiveSummary analysisArchiveSummary = (AnalysisArchiveSummary) o;
    return Objects.equals(this.lastUpdated, analysisArchiveSummary.lastUpdated) &&
        Objects.equals(this.totalDataBytes, analysisArchiveSummary.totalDataBytes) &&
        Objects.equals(this.totalImageCount, analysisArchiveSummary.totalImageCount) &&
        Objects.equals(this.totalTagCount, analysisArchiveSummary.totalTagCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastUpdated, totalDataBytes, totalImageCount, totalTagCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalysisArchiveSummary {\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    totalDataBytes: ").append(toIndentedString(totalDataBytes)).append("\n");
    sb.append("    totalImageCount: ").append(toIndentedString(totalImageCount)).append("\n");
    sb.append("    totalTagCount: ").append(toIndentedString(totalTagCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("last_updated");
    openapiFields.add("total_data_bytes");
    openapiFields.add("total_image_count");
    openapiFields.add("total_tag_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnalysisArchiveSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnalysisArchiveSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalysisArchiveSummary is not found in the empty JSON string", AnalysisArchiveSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnalysisArchiveSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnalysisArchiveSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalysisArchiveSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalysisArchiveSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalysisArchiveSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalysisArchiveSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalysisArchiveSummary>() {
           @Override
           public void write(JsonWriter out, AnalysisArchiveSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalysisArchiveSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnalysisArchiveSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnalysisArchiveSummary
   * @throws IOException if the JSON string is invalid with respect to AnalysisArchiveSummary
   */
  public static AnalysisArchiveSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalysisArchiveSummary.class);
  }

  /**
   * Convert an instance of AnalysisArchiveSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

