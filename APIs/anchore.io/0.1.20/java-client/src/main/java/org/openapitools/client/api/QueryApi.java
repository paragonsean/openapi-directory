/*
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiErrorResponse;
import org.openapitools.client.model.PaginatedImageList;
import org.openapitools.client.model.PaginatedVulnerabilityList;
import org.openapitools.client.model.PaginatedVulnerableImageList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QueryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QueryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QueryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for queryImagesByPackage
     * @param name Name of package to search for (e.g. sed) (required)
     * @param packageType Type of package to filter on (e.g. dpkg) (optional)
     * @param version Version of named package to filter on (e.g. 4.4-1) (optional)
     * @param page The page of results to fetch. Pages start at 1 (optional)
     * @param limit Limit the number of records for the requested page. If omitted or set to 0, return all results in a single page (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image listing </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad filter parameters </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryImagesByPackageCall(String name, String packageType, String version, String page, Integer limit, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/query/images/by_package";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (packageType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("package_type", packageType));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryImagesByPackageValidateBeforeCall(String name, String packageType, String version, String page, Integer limit, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling queryImagesByPackage(Async)");
        }

        return queryImagesByPackageCall(name, packageType, version, page, limit, xAnchoreAccount, _callback);

    }

    /**
     * List of images containing given package
     * Filterable query interface to search for images containing specified package
     * @param name Name of package to search for (e.g. sed) (required)
     * @param packageType Type of package to filter on (e.g. dpkg) (optional)
     * @param version Version of named package to filter on (e.g. 4.4-1) (optional)
     * @param page The page of results to fetch. Pages start at 1 (optional)
     * @param limit Limit the number of records for the requested page. If omitted or set to 0, return all results in a single page (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return PaginatedImageList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image listing </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad filter parameters </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedImageList queryImagesByPackage(String name, String packageType, String version, String page, Integer limit, String xAnchoreAccount) throws ApiException {
        ApiResponse<PaginatedImageList> localVarResp = queryImagesByPackageWithHttpInfo(name, packageType, version, page, limit, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * List of images containing given package
     * Filterable query interface to search for images containing specified package
     * @param name Name of package to search for (e.g. sed) (required)
     * @param packageType Type of package to filter on (e.g. dpkg) (optional)
     * @param version Version of named package to filter on (e.g. 4.4-1) (optional)
     * @param page The page of results to fetch. Pages start at 1 (optional)
     * @param limit Limit the number of records for the requested page. If omitted or set to 0, return all results in a single page (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;PaginatedImageList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image listing </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad filter parameters </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedImageList> queryImagesByPackageWithHttpInfo(String name, String packageType, String version, String page, Integer limit, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = queryImagesByPackageValidateBeforeCall(name, packageType, version, page, limit, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<PaginatedImageList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of images containing given package (asynchronously)
     * Filterable query interface to search for images containing specified package
     * @param name Name of package to search for (e.g. sed) (required)
     * @param packageType Type of package to filter on (e.g. dpkg) (optional)
     * @param version Version of named package to filter on (e.g. 4.4-1) (optional)
     * @param page The page of results to fetch. Pages start at 1 (optional)
     * @param limit Limit the number of records for the requested page. If omitted or set to 0, return all results in a single page (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image listing </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad filter parameters </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryImagesByPackageAsync(String name, String packageType, String version, String page, Integer limit, String xAnchoreAccount, final ApiCallback<PaginatedImageList> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryImagesByPackageValidateBeforeCall(name, packageType, version, page, limit, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<PaginatedImageList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryImagesByVulnerability
     * @param vulnerabilityId The ID of the vulnerability to search for within all images stored in anchore-engine (e.g. CVE-1999-0001) (required)
     * @param namespace Filter results to images within the given vulnerability namespace (e.g. debian:8, ubuntu:14.04) (optional)
     * @param affectedPackage Filter results to images with vulnable packages with the given package name (e.g. libssl) (optional)
     * @param severity Filter results to vulnerable package/vulnerability with the given severity (optional)
     * @param vendorOnly Filter results to include only vulnerabilities that are not marked as invalid by upstream OS vendor data (optional, default to true)
     * @param page The page of results to fetch. Pages start at 1 (optional)
     * @param limit Limit the number of records for the requested page. If omitted or set to 0, return all results in a single page (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image lookup success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid filter parameters </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryImagesByVulnerabilityCall(String vulnerabilityId, String namespace, String affectedPackage, String severity, Boolean vendorOnly, Integer page, Integer limit, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/query/images/by_vulnerability";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vulnerabilityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vulnerability_id", vulnerabilityId));
        }

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
        }

        if (affectedPackage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("affected_package", affectedPackage));
        }

        if (severity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("severity", severity));
        }

        if (vendorOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vendor_only", vendorOnly));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xAnchoreAccount != null) {
            localVarHeaderParams.put("x-anchore-account", localVarApiClient.parameterToString(xAnchoreAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryImagesByVulnerabilityValidateBeforeCall(String vulnerabilityId, String namespace, String affectedPackage, String severity, Boolean vendorOnly, Integer page, Integer limit, String xAnchoreAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vulnerabilityId' is set
        if (vulnerabilityId == null) {
            throw new ApiException("Missing the required parameter 'vulnerabilityId' when calling queryImagesByVulnerability(Async)");
        }

        return queryImagesByVulnerabilityCall(vulnerabilityId, namespace, affectedPackage, severity, vendorOnly, page, limit, xAnchoreAccount, _callback);

    }

    /**
     * List images vulnerable to the specific vulnerability ID.
     * Returns a listing of images and their respective packages vulnerable to the given vulnerability ID
     * @param vulnerabilityId The ID of the vulnerability to search for within all images stored in anchore-engine (e.g. CVE-1999-0001) (required)
     * @param namespace Filter results to images within the given vulnerability namespace (e.g. debian:8, ubuntu:14.04) (optional)
     * @param affectedPackage Filter results to images with vulnable packages with the given package name (e.g. libssl) (optional)
     * @param severity Filter results to vulnerable package/vulnerability with the given severity (optional)
     * @param vendorOnly Filter results to include only vulnerabilities that are not marked as invalid by upstream OS vendor data (optional, default to true)
     * @param page The page of results to fetch. Pages start at 1 (optional)
     * @param limit Limit the number of records for the requested page. If omitted or set to 0, return all results in a single page (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return PaginatedVulnerableImageList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image lookup success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid filter parameters </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedVulnerableImageList queryImagesByVulnerability(String vulnerabilityId, String namespace, String affectedPackage, String severity, Boolean vendorOnly, Integer page, Integer limit, String xAnchoreAccount) throws ApiException {
        ApiResponse<PaginatedVulnerableImageList> localVarResp = queryImagesByVulnerabilityWithHttpInfo(vulnerabilityId, namespace, affectedPackage, severity, vendorOnly, page, limit, xAnchoreAccount);
        return localVarResp.getData();
    }

    /**
     * List images vulnerable to the specific vulnerability ID.
     * Returns a listing of images and their respective packages vulnerable to the given vulnerability ID
     * @param vulnerabilityId The ID of the vulnerability to search for within all images stored in anchore-engine (e.g. CVE-1999-0001) (required)
     * @param namespace Filter results to images within the given vulnerability namespace (e.g. debian:8, ubuntu:14.04) (optional)
     * @param affectedPackage Filter results to images with vulnable packages with the given package name (e.g. libssl) (optional)
     * @param severity Filter results to vulnerable package/vulnerability with the given severity (optional)
     * @param vendorOnly Filter results to include only vulnerabilities that are not marked as invalid by upstream OS vendor data (optional, default to true)
     * @param page The page of results to fetch. Pages start at 1 (optional)
     * @param limit Limit the number of records for the requested page. If omitted or set to 0, return all results in a single page (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @return ApiResponse&lt;PaginatedVulnerableImageList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image lookup success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid filter parameters </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedVulnerableImageList> queryImagesByVulnerabilityWithHttpInfo(String vulnerabilityId, String namespace, String affectedPackage, String severity, Boolean vendorOnly, Integer page, Integer limit, String xAnchoreAccount) throws ApiException {
        okhttp3.Call localVarCall = queryImagesByVulnerabilityValidateBeforeCall(vulnerabilityId, namespace, affectedPackage, severity, vendorOnly, page, limit, xAnchoreAccount, null);
        Type localVarReturnType = new TypeToken<PaginatedVulnerableImageList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List images vulnerable to the specific vulnerability ID. (asynchronously)
     * Returns a listing of images and their respective packages vulnerable to the given vulnerability ID
     * @param vulnerabilityId The ID of the vulnerability to search for within all images stored in anchore-engine (e.g. CVE-1999-0001) (required)
     * @param namespace Filter results to images within the given vulnerability namespace (e.g. debian:8, ubuntu:14.04) (optional)
     * @param affectedPackage Filter results to images with vulnable packages with the given package name (e.g. libssl) (optional)
     * @param severity Filter results to vulnerable package/vulnerability with the given severity (optional)
     * @param vendorOnly Filter results to include only vulnerabilities that are not marked as invalid by upstream OS vendor data (optional, default to true)
     * @param page The page of results to fetch. Pages start at 1 (optional)
     * @param limit Limit the number of records for the requested page. If omitted or set to 0, return all results in a single page (optional)
     * @param xAnchoreAccount An account name to change the resource scope of the request to that account, if permissions allow (admin only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image lookup success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid filter parameters </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryImagesByVulnerabilityAsync(String vulnerabilityId, String namespace, String affectedPackage, String severity, Boolean vendorOnly, Integer page, Integer limit, String xAnchoreAccount, final ApiCallback<PaginatedVulnerableImageList> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryImagesByVulnerabilityValidateBeforeCall(vulnerabilityId, namespace, affectedPackage, severity, vendorOnly, page, limit, xAnchoreAccount, _callback);
        Type localVarReturnType = new TypeToken<PaginatedVulnerableImageList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryVulnerabilities
     * @param id The ID of the vulnerability (e.g. CVE-1999-0001) (required)
     * @param affectedPackage Filter results by specified package name (e.g. sed) (optional)
     * @param affectedPackageVersion Filter results by specified package version (e.g. 4.4-1) (optional)
     * @param page The page of results to fetch. Pages start at 1 (optional, default to 1)
     * @param limit Limit the number of records for the requested page. If omitted or set to 0, return all results in a single page (optional)
     * @param namespace Namespace(s) to filter vulnerability records by (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vulnerability listing paginated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid filter parameters </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryVulnerabilitiesCall(List<String> id, String affectedPackage, String affectedPackageVersion, String page, Integer limit, List<String> namespace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/query/vulnerabilities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "id", id));
        }

        if (affectedPackage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("affected_package", affectedPackage));
        }

        if (affectedPackageVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("affected_package_version", affectedPackageVersion));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (namespace != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "namespace", namespace));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryVulnerabilitiesValidateBeforeCall(List<String> id, String affectedPackage, String affectedPackageVersion, String page, Integer limit, List<String> namespace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling queryVulnerabilities(Async)");
        }

        return queryVulnerabilitiesCall(id, affectedPackage, affectedPackageVersion, page, limit, namespace, _callback);

    }

    /**
     * Listing information about given vulnerability
     * List (w/filters) vulnerability records known by the system, with affected packages information if present
     * @param id The ID of the vulnerability (e.g. CVE-1999-0001) (required)
     * @param affectedPackage Filter results by specified package name (e.g. sed) (optional)
     * @param affectedPackageVersion Filter results by specified package version (e.g. 4.4-1) (optional)
     * @param page The page of results to fetch. Pages start at 1 (optional, default to 1)
     * @param limit Limit the number of records for the requested page. If omitted or set to 0, return all results in a single page (optional)
     * @param namespace Namespace(s) to filter vulnerability records by (optional)
     * @return PaginatedVulnerabilityList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vulnerability listing paginated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid filter parameters </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedVulnerabilityList queryVulnerabilities(List<String> id, String affectedPackage, String affectedPackageVersion, String page, Integer limit, List<String> namespace) throws ApiException {
        ApiResponse<PaginatedVulnerabilityList> localVarResp = queryVulnerabilitiesWithHttpInfo(id, affectedPackage, affectedPackageVersion, page, limit, namespace);
        return localVarResp.getData();
    }

    /**
     * Listing information about given vulnerability
     * List (w/filters) vulnerability records known by the system, with affected packages information if present
     * @param id The ID of the vulnerability (e.g. CVE-1999-0001) (required)
     * @param affectedPackage Filter results by specified package name (e.g. sed) (optional)
     * @param affectedPackageVersion Filter results by specified package version (e.g. 4.4-1) (optional)
     * @param page The page of results to fetch. Pages start at 1 (optional, default to 1)
     * @param limit Limit the number of records for the requested page. If omitted or set to 0, return all results in a single page (optional)
     * @param namespace Namespace(s) to filter vulnerability records by (optional)
     * @return ApiResponse&lt;PaginatedVulnerabilityList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vulnerability listing paginated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid filter parameters </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedVulnerabilityList> queryVulnerabilitiesWithHttpInfo(List<String> id, String affectedPackage, String affectedPackageVersion, String page, Integer limit, List<String> namespace) throws ApiException {
        okhttp3.Call localVarCall = queryVulnerabilitiesValidateBeforeCall(id, affectedPackage, affectedPackageVersion, page, limit, namespace, null);
        Type localVarReturnType = new TypeToken<PaginatedVulnerabilityList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Listing information about given vulnerability (asynchronously)
     * List (w/filters) vulnerability records known by the system, with affected packages information if present
     * @param id The ID of the vulnerability (e.g. CVE-1999-0001) (required)
     * @param affectedPackage Filter results by specified package name (e.g. sed) (optional)
     * @param affectedPackageVersion Filter results by specified package version (e.g. 4.4-1) (optional)
     * @param page The page of results to fetch. Pages start at 1 (optional, default to 1)
     * @param limit Limit the number of records for the requested page. If omitted or set to 0, return all results in a single page (optional)
     * @param namespace Namespace(s) to filter vulnerability records by (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Vulnerability listing paginated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid filter parameters </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryVulnerabilitiesAsync(List<String> id, String affectedPackage, String affectedPackageVersion, String page, Integer limit, List<String> namespace, final ApiCallback<PaginatedVulnerabilityList> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryVulnerabilitiesValidateBeforeCall(id, affectedPackage, affectedPackageVersion, page, limit, namespace, _callback);
        Type localVarReturnType = new TypeToken<PaginatedVulnerabilityList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
