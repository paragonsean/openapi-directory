# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.malware_scan_findings_inner import MalwareScanFindingsInner
from openapi_server import util


class MalwareScan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, findings: List[MalwareScanFindingsInner]=None, metadata: object=None, scanner: str=None):
        """MalwareScan - a model defined in OpenAPI

        :param enabled: The enabled of this MalwareScan.
        :param findings: The findings of this MalwareScan.
        :param metadata: The metadata of this MalwareScan.
        :param scanner: The scanner of this MalwareScan.
        """
        self.openapi_types = {
            'enabled': bool,
            'findings': List[MalwareScanFindingsInner],
            'metadata': object,
            'scanner': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'findings': 'findings',
            'metadata': 'metadata',
            'scanner': 'scanner'
        }

        self._enabled = enabled
        self._findings = findings
        self._metadata = metadata
        self._scanner = scanner

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MalwareScan':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MalwareScan of this MalwareScan.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this MalwareScan.

        Indicates if the scanner is enabled

        :return: The enabled of this MalwareScan.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this MalwareScan.

        Indicates if the scanner is enabled

        :param enabled: The enabled of this MalwareScan.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def findings(self):
        """Gets the findings of this MalwareScan.


        :return: The findings of this MalwareScan.
        :rtype: List[MalwareScanFindingsInner]
        """
        return self._findings

    @findings.setter
    def findings(self, findings):
        """Sets the findings of this MalwareScan.


        :param findings: The findings of this MalwareScan.
        :type findings: List[MalwareScanFindingsInner]
        """

        self._findings = findings

    @property
    def metadata(self):
        """Gets the metadata of this MalwareScan.

        Open schema for scanner-specific metadata related to the scan result

        :return: The metadata of this MalwareScan.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this MalwareScan.

        Open schema for scanner-specific metadata related to the scan result

        :param metadata: The metadata of this MalwareScan.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def scanner(self):
        """Gets the scanner of this MalwareScan.

        The name of the scanner that produced the finding

        :return: The scanner of this MalwareScan.
        :rtype: str
        """
        return self._scanner

    @scanner.setter
    def scanner(self, scanner):
        """Sets the scanner of this MalwareScan.

        The name of the scanner that produced the finding

        :param scanner: The scanner of this MalwareScan.
        :type scanner: str
        """

        self._scanner = scanner
