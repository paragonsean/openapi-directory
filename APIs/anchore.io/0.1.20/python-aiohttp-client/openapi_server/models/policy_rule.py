# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.policy_rule_params_inner import PolicyRuleParamsInner
from openapi_server import util


class PolicyRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, gate: str=None, id: str=None, params: List[PolicyRuleParamsInner]=None, trigger: str=None):
        """PolicyRule - a model defined in OpenAPI

        :param action: The action of this PolicyRule.
        :param gate: The gate of this PolicyRule.
        :param id: The id of this PolicyRule.
        :param params: The params of this PolicyRule.
        :param trigger: The trigger of this PolicyRule.
        """
        self.openapi_types = {
            'action': str,
            'gate': str,
            'id': str,
            'params': List[PolicyRuleParamsInner],
            'trigger': str
        }

        self.attribute_map = {
            'action': 'action',
            'gate': 'gate',
            'id': 'id',
            'params': 'params',
            'trigger': 'trigger'
        }

        self._action = action
        self._gate = gate
        self._id = id
        self._params = params
        self._trigger = trigger

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyRule of this PolicyRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this PolicyRule.


        :return: The action of this PolicyRule.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this PolicyRule.


        :param action: The action of this PolicyRule.
        :type action: str
        """
        allowed_values = ["GO", "STOP", "WARN"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def gate(self):
        """Gets the gate of this PolicyRule.


        :return: The gate of this PolicyRule.
        :rtype: str
        """
        return self._gate

    @gate.setter
    def gate(self, gate):
        """Sets the gate of this PolicyRule.


        :param gate: The gate of this PolicyRule.
        :type gate: str
        """
        if gate is None:
            raise ValueError("Invalid value for `gate`, must not be `None`")

        self._gate = gate

    @property
    def id(self):
        """Gets the id of this PolicyRule.


        :return: The id of this PolicyRule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PolicyRule.


        :param id: The id of this PolicyRule.
        :type id: str
        """

        self._id = id

    @property
    def params(self):
        """Gets the params of this PolicyRule.


        :return: The params of this PolicyRule.
        :rtype: List[PolicyRuleParamsInner]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this PolicyRule.


        :param params: The params of this PolicyRule.
        :type params: List[PolicyRuleParamsInner]
        """

        self._params = params

    @property
    def trigger(self):
        """Gets the trigger of this PolicyRule.


        :return: The trigger of this PolicyRule.
        :rtype: str
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this PolicyRule.


        :param trigger: The trigger of this PolicyRule.
        :type trigger: str
        """
        if trigger is None:
            raise ValueError("Invalid value for `trigger`, must not be `None`")

        self._trigger = trigger
