# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, url: str=None, version: str=None):
        """ImportSchema - a model defined in OpenAPI

        :param url: The url of this ImportSchema.
        :param version: The version of this ImportSchema.
        """
        self.openapi_types = {
            'url': str,
            'version': str
        }

        self.attribute_map = {
            'url': 'url',
            'version': 'version'
        }

        self._url = url
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportSchema of this ImportSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def url(self):
        """Gets the url of this ImportSchema.


        :return: The url of this ImportSchema.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ImportSchema.


        :param url: The url of this ImportSchema.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def version(self):
        """Gets the version of this ImportSchema.


        :return: The version of this ImportSchema.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ImportSchema.


        :param version: The version of this ImportSchema.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
