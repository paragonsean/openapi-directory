# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.import_content_digests import ImportContentDigests
from openapi_server import util


class ImageImportManifest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contents: ImportContentDigests=None, digest: str=None, local_image_id: str=None, operation_uuid: str=None, parent_digest: str=None, tags: List[str]=None):
        """ImageImportManifest - a model defined in OpenAPI

        :param contents: The contents of this ImageImportManifest.
        :param digest: The digest of this ImageImportManifest.
        :param local_image_id: The local_image_id of this ImageImportManifest.
        :param operation_uuid: The operation_uuid of this ImageImportManifest.
        :param parent_digest: The parent_digest of this ImageImportManifest.
        :param tags: The tags of this ImageImportManifest.
        """
        self.openapi_types = {
            'contents': ImportContentDigests,
            'digest': str,
            'local_image_id': str,
            'operation_uuid': str,
            'parent_digest': str,
            'tags': List[str]
        }

        self.attribute_map = {
            'contents': 'contents',
            'digest': 'digest',
            'local_image_id': 'local_image_id',
            'operation_uuid': 'operation_uuid',
            'parent_digest': 'parent_digest',
            'tags': 'tags'
        }

        self._contents = contents
        self._digest = digest
        self._local_image_id = local_image_id
        self._operation_uuid = operation_uuid
        self._parent_digest = parent_digest
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageImportManifest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageImportManifest of this ImageImportManifest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contents(self):
        """Gets the contents of this ImageImportManifest.


        :return: The contents of this ImageImportManifest.
        :rtype: ImportContentDigests
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """Sets the contents of this ImageImportManifest.


        :param contents: The contents of this ImageImportManifest.
        :type contents: ImportContentDigests
        """
        if contents is None:
            raise ValueError("Invalid value for `contents`, must not be `None`")

        self._contents = contents

    @property
    def digest(self):
        """Gets the digest of this ImageImportManifest.


        :return: The digest of this ImageImportManifest.
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this ImageImportManifest.


        :param digest: The digest of this ImageImportManifest.
        :type digest: str
        """
        if digest is None:
            raise ValueError("Invalid value for `digest`, must not be `None`")

        self._digest = digest

    @property
    def local_image_id(self):
        """Gets the local_image_id of this ImageImportManifest.

        An \"imageId\" as used by Docker if available

        :return: The local_image_id of this ImageImportManifest.
        :rtype: str
        """
        return self._local_image_id

    @local_image_id.setter
    def local_image_id(self, local_image_id):
        """Sets the local_image_id of this ImageImportManifest.

        An \"imageId\" as used by Docker if available

        :param local_image_id: The local_image_id of this ImageImportManifest.
        :type local_image_id: str
        """

        self._local_image_id = local_image_id

    @property
    def operation_uuid(self):
        """Gets the operation_uuid of this ImageImportManifest.


        :return: The operation_uuid of this ImageImportManifest.
        :rtype: str
        """
        return self._operation_uuid

    @operation_uuid.setter
    def operation_uuid(self, operation_uuid):
        """Sets the operation_uuid of this ImageImportManifest.


        :param operation_uuid: The operation_uuid of this ImageImportManifest.
        :type operation_uuid: str
        """
        if operation_uuid is None:
            raise ValueError("Invalid value for `operation_uuid`, must not be `None`")

        self._operation_uuid = operation_uuid

    @property
    def parent_digest(self):
        """Gets the parent_digest of this ImageImportManifest.

        The digest of the images's manifest-list parent if it was accessed from a multi-arch tag where the tag pointed to a manifest-list. This allows preservation of that relationship in the data

        :return: The parent_digest of this ImageImportManifest.
        :rtype: str
        """
        return self._parent_digest

    @parent_digest.setter
    def parent_digest(self, parent_digest):
        """Sets the parent_digest of this ImageImportManifest.

        The digest of the images's manifest-list parent if it was accessed from a multi-arch tag where the tag pointed to a manifest-list. This allows preservation of that relationship in the data

        :param parent_digest: The parent_digest of this ImageImportManifest.
        :type parent_digest: str
        """

        self._parent_digest = parent_digest

    @property
    def tags(self):
        """Gets the tags of this ImageImportManifest.


        :return: The tags of this ImageImportManifest.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ImageImportManifest.


        :param tags: The tags of this ImageImportManifest.
        :type tags: List[str]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")

        self._tags = tags
