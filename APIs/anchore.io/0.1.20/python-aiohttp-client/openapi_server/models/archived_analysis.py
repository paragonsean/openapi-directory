# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tag_entry import TagEntry
from openapi_server import util


class ArchivedAnalysis(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analyzed_at: datetime=None, annotations: object=None, archive_size_bytes: int=None, created_at: datetime=None, image_digest: str=None, image_detail: List[TagEntry]=None, last_updated: datetime=None, parent_digest: str=None, status: str=None):
        """ArchivedAnalysis - a model defined in OpenAPI

        :param analyzed_at: The analyzed_at of this ArchivedAnalysis.
        :param annotations: The annotations of this ArchivedAnalysis.
        :param archive_size_bytes: The archive_size_bytes of this ArchivedAnalysis.
        :param created_at: The created_at of this ArchivedAnalysis.
        :param image_digest: The image_digest of this ArchivedAnalysis.
        :param image_detail: The image_detail of this ArchivedAnalysis.
        :param last_updated: The last_updated of this ArchivedAnalysis.
        :param parent_digest: The parent_digest of this ArchivedAnalysis.
        :param status: The status of this ArchivedAnalysis.
        """
        self.openapi_types = {
            'analyzed_at': datetime,
            'annotations': object,
            'archive_size_bytes': int,
            'created_at': datetime,
            'image_digest': str,
            'image_detail': List[TagEntry],
            'last_updated': datetime,
            'parent_digest': str,
            'status': str
        }

        self.attribute_map = {
            'analyzed_at': 'analyzed_at',
            'annotations': 'annotations',
            'archive_size_bytes': 'archive_size_bytes',
            'created_at': 'created_at',
            'image_digest': 'imageDigest',
            'image_detail': 'image_detail',
            'last_updated': 'last_updated',
            'parent_digest': 'parentDigest',
            'status': 'status'
        }

        self._analyzed_at = analyzed_at
        self._annotations = annotations
        self._archive_size_bytes = archive_size_bytes
        self._created_at = created_at
        self._image_digest = image_digest
        self._image_detail = image_detail
        self._last_updated = last_updated
        self._parent_digest = parent_digest
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArchivedAnalysis':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArchivedAnalysis of this ArchivedAnalysis.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analyzed_at(self):
        """Gets the analyzed_at of this ArchivedAnalysis.


        :return: The analyzed_at of this ArchivedAnalysis.
        :rtype: datetime
        """
        return self._analyzed_at

    @analyzed_at.setter
    def analyzed_at(self, analyzed_at):
        """Sets the analyzed_at of this ArchivedAnalysis.


        :param analyzed_at: The analyzed_at of this ArchivedAnalysis.
        :type analyzed_at: datetime
        """

        self._analyzed_at = analyzed_at

    @property
    def annotations(self):
        """Gets the annotations of this ArchivedAnalysis.

        User provided annotations as key-value pairs

        :return: The annotations of this ArchivedAnalysis.
        :rtype: object
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this ArchivedAnalysis.

        User provided annotations as key-value pairs

        :param annotations: The annotations of this ArchivedAnalysis.
        :type annotations: object
        """

        self._annotations = annotations

    @property
    def archive_size_bytes(self):
        """Gets the archive_size_bytes of this ArchivedAnalysis.

        The size, in bytes, of the analysis archive file

        :return: The archive_size_bytes of this ArchivedAnalysis.
        :rtype: int
        """
        return self._archive_size_bytes

    @archive_size_bytes.setter
    def archive_size_bytes(self, archive_size_bytes):
        """Sets the archive_size_bytes of this ArchivedAnalysis.

        The size, in bytes, of the analysis archive file

        :param archive_size_bytes: The archive_size_bytes of this ArchivedAnalysis.
        :type archive_size_bytes: int
        """

        self._archive_size_bytes = archive_size_bytes

    @property
    def created_at(self):
        """Gets the created_at of this ArchivedAnalysis.


        :return: The created_at of this ArchivedAnalysis.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ArchivedAnalysis.


        :param created_at: The created_at of this ArchivedAnalysis.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def image_digest(self):
        """Gets the image_digest of this ArchivedAnalysis.

        The image digest (digest of the manifest describing the image, per docker spec)

        :return: The image_digest of this ArchivedAnalysis.
        :rtype: str
        """
        return self._image_digest

    @image_digest.setter
    def image_digest(self, image_digest):
        """Sets the image_digest of this ArchivedAnalysis.

        The image digest (digest of the manifest describing the image, per docker spec)

        :param image_digest: The image_digest of this ArchivedAnalysis.
        :type image_digest: str
        """

        self._image_digest = image_digest

    @property
    def image_detail(self):
        """Gets the image_detail of this ArchivedAnalysis.

        List of tags associated with the image digest

        :return: The image_detail of this ArchivedAnalysis.
        :rtype: List[TagEntry]
        """
        return self._image_detail

    @image_detail.setter
    def image_detail(self, image_detail):
        """Sets the image_detail of this ArchivedAnalysis.

        List of tags associated with the image digest

        :param image_detail: The image_detail of this ArchivedAnalysis.
        :type image_detail: List[TagEntry]
        """

        self._image_detail = image_detail

    @property
    def last_updated(self):
        """Gets the last_updated of this ArchivedAnalysis.


        :return: The last_updated of this ArchivedAnalysis.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ArchivedAnalysis.


        :param last_updated: The last_updated of this ArchivedAnalysis.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def parent_digest(self):
        """Gets the parent_digest of this ArchivedAnalysis.

        The digest of a parent manifest (for manifest-list images)

        :return: The parent_digest of this ArchivedAnalysis.
        :rtype: str
        """
        return self._parent_digest

    @parent_digest.setter
    def parent_digest(self, parent_digest):
        """Sets the parent_digest of this ArchivedAnalysis.

        The digest of a parent manifest (for manifest-list images)

        :param parent_digest: The parent_digest of this ArchivedAnalysis.
        :type parent_digest: str
        """

        self._parent_digest = parent_digest

    @property
    def status(self):
        """Gets the status of this ArchivedAnalysis.

        The archival status

        :return: The status of this ArchivedAnalysis.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ArchivedAnalysis.

        The archival status

        :param status: The status of this ArchivedAnalysis.
        :type status: str
        """
        allowed_values = ["archiving", "archived", "deleting", "deleted"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
