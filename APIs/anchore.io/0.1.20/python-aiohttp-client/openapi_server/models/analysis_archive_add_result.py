# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AnalysisArchiveAddResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detail: str=None, digest: str=None, status: str=None):
        """AnalysisArchiveAddResult - a model defined in OpenAPI

        :param detail: The detail of this AnalysisArchiveAddResult.
        :param digest: The digest of this AnalysisArchiveAddResult.
        :param status: The status of this AnalysisArchiveAddResult.
        """
        self.openapi_types = {
            'detail': str,
            'digest': str,
            'status': str
        }

        self.attribute_map = {
            'detail': 'detail',
            'digest': 'digest',
            'status': 'status'
        }

        self._detail = detail
        self._digest = digest
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalysisArchiveAddResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalysisArchiveAddResult of this AnalysisArchiveAddResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detail(self):
        """Gets the detail of this AnalysisArchiveAddResult.

        Details on the status, e.g. the error message

        :return: The detail of this AnalysisArchiveAddResult.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this AnalysisArchiveAddResult.

        Details on the status, e.g. the error message

        :param detail: The detail of this AnalysisArchiveAddResult.
        :type detail: str
        """

        self._detail = detail

    @property
    def digest(self):
        """Gets the digest of this AnalysisArchiveAddResult.

        The image digest requested to be added

        :return: The digest of this AnalysisArchiveAddResult.
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this AnalysisArchiveAddResult.

        The image digest requested to be added

        :param digest: The digest of this AnalysisArchiveAddResult.
        :type digest: str
        """

        self._digest = digest

    @property
    def status(self):
        """Gets the status of this AnalysisArchiveAddResult.

        The status of the archive add operation. Typically either 'archived' or 'error'

        :return: The status of this AnalysisArchiveAddResult.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AnalysisArchiveAddResult.

        The status of the archive add operation. Typically either 'archived' or 'error'

        :param status: The status of this AnalysisArchiveAddResult.
        :type status: str
        """
        allowed_values = ["archived", "archiving", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
