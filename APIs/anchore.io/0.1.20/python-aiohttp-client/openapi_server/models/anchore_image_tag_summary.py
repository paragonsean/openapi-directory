# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AnchoreImageTagSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis_status: str=None, analyzed_at: int=None, created_at: int=None, fulltag: str=None, image_digest: str=None, image_id: str=None, image_status: str=None, parent_digest: str=None, tag_detected_at: int=None):
        """AnchoreImageTagSummary - a model defined in OpenAPI

        :param analysis_status: The analysis_status of this AnchoreImageTagSummary.
        :param analyzed_at: The analyzed_at of this AnchoreImageTagSummary.
        :param created_at: The created_at of this AnchoreImageTagSummary.
        :param fulltag: The fulltag of this AnchoreImageTagSummary.
        :param image_digest: The image_digest of this AnchoreImageTagSummary.
        :param image_id: The image_id of this AnchoreImageTagSummary.
        :param image_status: The image_status of this AnchoreImageTagSummary.
        :param parent_digest: The parent_digest of this AnchoreImageTagSummary.
        :param tag_detected_at: The tag_detected_at of this AnchoreImageTagSummary.
        """
        self.openapi_types = {
            'analysis_status': str,
            'analyzed_at': int,
            'created_at': int,
            'fulltag': str,
            'image_digest': str,
            'image_id': str,
            'image_status': str,
            'parent_digest': str,
            'tag_detected_at': int
        }

        self.attribute_map = {
            'analysis_status': 'analysis_status',
            'analyzed_at': 'analyzed_at',
            'created_at': 'created_at',
            'fulltag': 'fulltag',
            'image_digest': 'imageDigest',
            'image_id': 'imageId',
            'image_status': 'image_status',
            'parent_digest': 'parentDigest',
            'tag_detected_at': 'tag_detected_at'
        }

        self._analysis_status = analysis_status
        self._analyzed_at = analyzed_at
        self._created_at = created_at
        self._fulltag = fulltag
        self._image_digest = image_digest
        self._image_id = image_id
        self._image_status = image_status
        self._parent_digest = parent_digest
        self._tag_detected_at = tag_detected_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnchoreImageTagSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnchoreImageTagSummary of this AnchoreImageTagSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_status(self):
        """Gets the analysis_status of this AnchoreImageTagSummary.


        :return: The analysis_status of this AnchoreImageTagSummary.
        :rtype: str
        """
        return self._analysis_status

    @analysis_status.setter
    def analysis_status(self, analysis_status):
        """Sets the analysis_status of this AnchoreImageTagSummary.


        :param analysis_status: The analysis_status of this AnchoreImageTagSummary.
        :type analysis_status: str
        """

        self._analysis_status = analysis_status

    @property
    def analyzed_at(self):
        """Gets the analyzed_at of this AnchoreImageTagSummary.


        :return: The analyzed_at of this AnchoreImageTagSummary.
        :rtype: int
        """
        return self._analyzed_at

    @analyzed_at.setter
    def analyzed_at(self, analyzed_at):
        """Sets the analyzed_at of this AnchoreImageTagSummary.


        :param analyzed_at: The analyzed_at of this AnchoreImageTagSummary.
        :type analyzed_at: int
        """

        self._analyzed_at = analyzed_at

    @property
    def created_at(self):
        """Gets the created_at of this AnchoreImageTagSummary.


        :return: The created_at of this AnchoreImageTagSummary.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AnchoreImageTagSummary.


        :param created_at: The created_at of this AnchoreImageTagSummary.
        :type created_at: int
        """

        self._created_at = created_at

    @property
    def fulltag(self):
        """Gets the fulltag of this AnchoreImageTagSummary.


        :return: The fulltag of this AnchoreImageTagSummary.
        :rtype: str
        """
        return self._fulltag

    @fulltag.setter
    def fulltag(self, fulltag):
        """Sets the fulltag of this AnchoreImageTagSummary.


        :param fulltag: The fulltag of this AnchoreImageTagSummary.
        :type fulltag: str
        """

        self._fulltag = fulltag

    @property
    def image_digest(self):
        """Gets the image_digest of this AnchoreImageTagSummary.


        :return: The image_digest of this AnchoreImageTagSummary.
        :rtype: str
        """
        return self._image_digest

    @image_digest.setter
    def image_digest(self, image_digest):
        """Sets the image_digest of this AnchoreImageTagSummary.


        :param image_digest: The image_digest of this AnchoreImageTagSummary.
        :type image_digest: str
        """

        self._image_digest = image_digest

    @property
    def image_id(self):
        """Gets the image_id of this AnchoreImageTagSummary.


        :return: The image_id of this AnchoreImageTagSummary.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this AnchoreImageTagSummary.


        :param image_id: The image_id of this AnchoreImageTagSummary.
        :type image_id: str
        """

        self._image_id = image_id

    @property
    def image_status(self):
        """Gets the image_status of this AnchoreImageTagSummary.


        :return: The image_status of this AnchoreImageTagSummary.
        :rtype: str
        """
        return self._image_status

    @image_status.setter
    def image_status(self, image_status):
        """Sets the image_status of this AnchoreImageTagSummary.


        :param image_status: The image_status of this AnchoreImageTagSummary.
        :type image_status: str
        """

        self._image_status = image_status

    @property
    def parent_digest(self):
        """Gets the parent_digest of this AnchoreImageTagSummary.


        :return: The parent_digest of this AnchoreImageTagSummary.
        :rtype: str
        """
        return self._parent_digest

    @parent_digest.setter
    def parent_digest(self, parent_digest):
        """Sets the parent_digest of this AnchoreImageTagSummary.


        :param parent_digest: The parent_digest of this AnchoreImageTagSummary.
        :type parent_digest: str
        """

        self._parent_digest = parent_digest

    @property
    def tag_detected_at(self):
        """Gets the tag_detected_at of this AnchoreImageTagSummary.


        :return: The tag_detected_at of this AnchoreImageTagSummary.
        :rtype: int
        """
        return self._tag_detected_at

    @tag_detected_at.setter
    def tag_detected_at(self, tag_detected_at):
        """Sets the tag_detected_at of this AnchoreImageTagSummary.


        :param tag_detected_at: The tag_detected_at of this AnchoreImageTagSummary.
        :type tag_detected_at: int
        """

        self._tag_detected_at = tag_detected_at
