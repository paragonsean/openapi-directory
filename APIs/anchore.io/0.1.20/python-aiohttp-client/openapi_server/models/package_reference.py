# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PackageReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, type: str=None, version: str=None, will_not_fix: bool=None):
        """PackageReference - a model defined in OpenAPI

        :param name: The name of this PackageReference.
        :param type: The type of this PackageReference.
        :param version: The version of this PackageReference.
        :param will_not_fix: The will_not_fix of this PackageReference.
        """
        self.openapi_types = {
            'name': str,
            'type': str,
            'version': str,
            'will_not_fix': bool
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type',
            'version': 'version',
            'will_not_fix': 'will_not_fix'
        }

        self._name = name
        self._type = type
        self._version = version
        self._will_not_fix = will_not_fix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PackageReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PackageReference of this PackageReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PackageReference.

        Package name

        :return: The name of this PackageReference.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PackageReference.

        Package name

        :param name: The name of this PackageReference.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this PackageReference.

        Package type (e.g. package, rpm, deb, apk, jar, npm, gem, ...)

        :return: The type of this PackageReference.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PackageReference.

        Package type (e.g. package, rpm, deb, apk, jar, npm, gem, ...)

        :param type: The type of this PackageReference.
        :type type: str
        """

        self._type = type

    @property
    def version(self):
        """Gets the version of this PackageReference.

        A version for the package. If null, then references all versions

        :return: The version of this PackageReference.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PackageReference.

        A version for the package. If null, then references all versions

        :param version: The version of this PackageReference.
        :type version: str
        """

        self._version = version

    @property
    def will_not_fix(self):
        """Gets the will_not_fix of this PackageReference.

        Whether a vendor will or will not fix a vulnerabitlity

        :return: The will_not_fix of this PackageReference.
        :rtype: bool
        """
        return self._will_not_fix

    @will_not_fix.setter
    def will_not_fix(self, will_not_fix):
        """Sets the will_not_fix of this PackageReference.

        Whether a vendor will or will not fix a vulnerabitlity

        :param will_not_fix: The will_not_fix of this PackageReference.
        :type will_not_fix: bool
        """

        self._will_not_fix = will_not_fix
