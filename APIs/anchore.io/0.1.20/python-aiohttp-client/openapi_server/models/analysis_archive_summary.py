# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AnalysisArchiveSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, last_updated: datetime=None, total_data_bytes: int=None, total_image_count: int=None, total_tag_count: int=None):
        """AnalysisArchiveSummary - a model defined in OpenAPI

        :param last_updated: The last_updated of this AnalysisArchiveSummary.
        :param total_data_bytes: The total_data_bytes of this AnalysisArchiveSummary.
        :param total_image_count: The total_image_count of this AnalysisArchiveSummary.
        :param total_tag_count: The total_tag_count of this AnalysisArchiveSummary.
        """
        self.openapi_types = {
            'last_updated': datetime,
            'total_data_bytes': int,
            'total_image_count': int,
            'total_tag_count': int
        }

        self.attribute_map = {
            'last_updated': 'last_updated',
            'total_data_bytes': 'total_data_bytes',
            'total_image_count': 'total_image_count',
            'total_tag_count': 'total_tag_count'
        }

        self._last_updated = last_updated
        self._total_data_bytes = total_data_bytes
        self._total_image_count = total_image_count
        self._total_tag_count = total_tag_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalysisArchiveSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalysisArchiveSummary of this AnalysisArchiveSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_updated(self):
        """Gets the last_updated of this AnalysisArchiveSummary.

        The timestamp of the most recent archived image

        :return: The last_updated of this AnalysisArchiveSummary.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this AnalysisArchiveSummary.

        The timestamp of the most recent archived image

        :param last_updated: The last_updated of this AnalysisArchiveSummary.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def total_data_bytes(self):
        """Gets the total_data_bytes of this AnalysisArchiveSummary.

        The total sum of all the bytes stored to the backing storage. Accounts for anchore-applied compression, but not compression by the underlying storage system.

        :return: The total_data_bytes of this AnalysisArchiveSummary.
        :rtype: int
        """
        return self._total_data_bytes

    @total_data_bytes.setter
    def total_data_bytes(self, total_data_bytes):
        """Sets the total_data_bytes of this AnalysisArchiveSummary.

        The total sum of all the bytes stored to the backing storage. Accounts for anchore-applied compression, but not compression by the underlying storage system.

        :param total_data_bytes: The total_data_bytes of this AnalysisArchiveSummary.
        :type total_data_bytes: int
        """

        self._total_data_bytes = total_data_bytes

    @property
    def total_image_count(self):
        """Gets the total_image_count of this AnalysisArchiveSummary.

        The number of unique images (digests) in the archive

        :return: The total_image_count of this AnalysisArchiveSummary.
        :rtype: int
        """
        return self._total_image_count

    @total_image_count.setter
    def total_image_count(self, total_image_count):
        """Sets the total_image_count of this AnalysisArchiveSummary.

        The number of unique images (digests) in the archive

        :param total_image_count: The total_image_count of this AnalysisArchiveSummary.
        :type total_image_count: int
        """

        self._total_image_count = total_image_count

    @property
    def total_tag_count(self):
        """Gets the total_tag_count of this AnalysisArchiveSummary.

        The number of tag records (registry/repo:tag pull strings) in the archive. This may include repeated tags but will always have a unique tag->digest mapping per record.

        :return: The total_tag_count of this AnalysisArchiveSummary.
        :rtype: int
        """
        return self._total_tag_count

    @total_tag_count.setter
    def total_tag_count(self, total_tag_count):
        """Sets the total_tag_count of this AnalysisArchiveSummary.

        The number of tag records (registry/repo:tag pull strings) in the archive. This may include repeated tags but will always have a unique tag->digest mapping per record.

        :param total_tag_count: The total_tag_count of this AnalysisArchiveSummary.
        :type total_tag_count: int
        """

        self._total_tag_count = total_tag_count
