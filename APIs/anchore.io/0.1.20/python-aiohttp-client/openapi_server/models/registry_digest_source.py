# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class RegistryDigestSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_timestamp_override: datetime=None, dockerfile: str=None, pullstring: str=None, tag: str=None):
        """RegistryDigestSource - a model defined in OpenAPI

        :param creation_timestamp_override: The creation_timestamp_override of this RegistryDigestSource.
        :param dockerfile: The dockerfile of this RegistryDigestSource.
        :param pullstring: The pullstring of this RegistryDigestSource.
        :param tag: The tag of this RegistryDigestSource.
        """
        self.openapi_types = {
            'creation_timestamp_override': datetime,
            'dockerfile': str,
            'pullstring': str,
            'tag': str
        }

        self.attribute_map = {
            'creation_timestamp_override': 'creation_timestamp_override',
            'dockerfile': 'dockerfile',
            'pullstring': 'pullstring',
            'tag': 'tag'
        }

        self._creation_timestamp_override = creation_timestamp_override
        self._dockerfile = dockerfile
        self._pullstring = pullstring
        self._tag = tag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegistryDigestSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegistryDigestSource of this RegistryDigestSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_timestamp_override(self):
        """Gets the creation_timestamp_override of this RegistryDigestSource.

        Optional override of the image creation time to support proper tag history construction in cases of out-of-order analysis compared to registry history for the tag

        :return: The creation_timestamp_override of this RegistryDigestSource.
        :rtype: datetime
        """
        return self._creation_timestamp_override

    @creation_timestamp_override.setter
    def creation_timestamp_override(self, creation_timestamp_override):
        """Sets the creation_timestamp_override of this RegistryDigestSource.

        Optional override of the image creation time to support proper tag history construction in cases of out-of-order analysis compared to registry history for the tag

        :param creation_timestamp_override: The creation_timestamp_override of this RegistryDigestSource.
        :type creation_timestamp_override: datetime
        """

        self._creation_timestamp_override = creation_timestamp_override

    @property
    def dockerfile(self):
        """Gets the dockerfile of this RegistryDigestSource.

        Base64 encoded content of the dockerfile used to build the image, if available.

        :return: The dockerfile of this RegistryDigestSource.
        :rtype: str
        """
        return self._dockerfile

    @dockerfile.setter
    def dockerfile(self, dockerfile):
        """Sets the dockerfile of this RegistryDigestSource.

        Base64 encoded content of the dockerfile used to build the image, if available.

        :param dockerfile: The dockerfile of this RegistryDigestSource.
        :type dockerfile: str
        """
        if dockerfile is not None and not re.search(r'^[a-zA-Z0-9+\/=]+$', dockerfile):
            raise ValueError("Invalid value for `dockerfile`, must be a follow pattern or equal to `/^[a-zA-Z0-9+\/=]+$/`")

        self._dockerfile = dockerfile

    @property
    def pullstring(self):
        """Gets the pullstring of this RegistryDigestSource.

        A digest-based pullstring (e.g. docker.io/nginx@sha256:123abc)

        :return: The pullstring of this RegistryDigestSource.
        :rtype: str
        """
        return self._pullstring

    @pullstring.setter
    def pullstring(self, pullstring):
        """Sets the pullstring of this RegistryDigestSource.

        A digest-based pullstring (e.g. docker.io/nginx@sha256:123abc)

        :param pullstring: The pullstring of this RegistryDigestSource.
        :type pullstring: str
        """
        if pullstring is None:
            raise ValueError("Invalid value for `pullstring`, must not be `None`")

        self._pullstring = pullstring

    @property
    def tag(self):
        """Gets the tag of this RegistryDigestSource.

        A valid docker tag reference (e.g. docker.io/nginx:latest) that will be associated with the image but not used to pull the image.

        :return: The tag of this RegistryDigestSource.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this RegistryDigestSource.

        A valid docker tag reference (e.g. docker.io/nginx:latest) that will be associated with the image but not used to pull the image.

        :param tag: The tag of this RegistryDigestSource.
        :type tag: str
        """
        if tag is None:
            raise ValueError("Invalid value for `tag`, must not be `None`")

        self._tag = tag
