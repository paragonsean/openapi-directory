# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TriggerParamSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, example: str=None, name: str=None, required: bool=None, state: str=None, superceded_by: str=None, validator: object=None):
        """TriggerParamSpec - a model defined in OpenAPI

        :param description: The description of this TriggerParamSpec.
        :param example: The example of this TriggerParamSpec.
        :param name: The name of this TriggerParamSpec.
        :param required: The required of this TriggerParamSpec.
        :param state: The state of this TriggerParamSpec.
        :param superceded_by: The superceded_by of this TriggerParamSpec.
        :param validator: The validator of this TriggerParamSpec.
        """
        self.openapi_types = {
            'description': str,
            'example': str,
            'name': str,
            'required': bool,
            'state': str,
            'superceded_by': str,
            'validator': object
        }

        self.attribute_map = {
            'description': 'description',
            'example': 'example',
            'name': 'name',
            'required': 'required',
            'state': 'state',
            'superceded_by': 'superceded_by',
            'validator': 'validator'
        }

        self._description = description
        self._example = example
        self._name = name
        self._required = required
        self._state = state
        self._superceded_by = superceded_by
        self._validator = validator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TriggerParamSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TriggerParamSpec of this TriggerParamSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this TriggerParamSpec.


        :return: The description of this TriggerParamSpec.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TriggerParamSpec.


        :param description: The description of this TriggerParamSpec.
        :type description: str
        """

        self._description = description

    @property
    def example(self):
        """Gets the example of this TriggerParamSpec.

        An example value for the parameter (encoded as a string if the parameter is an object or list type)

        :return: The example of this TriggerParamSpec.
        :rtype: str
        """
        return self._example

    @example.setter
    def example(self, example):
        """Sets the example of this TriggerParamSpec.

        An example value for the parameter (encoded as a string if the parameter is an object or list type)

        :param example: The example of this TriggerParamSpec.
        :type example: str
        """

        self._example = example

    @property
    def name(self):
        """Gets the name of this TriggerParamSpec.

        Parameter name as it appears in policy document

        :return: The name of this TriggerParamSpec.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TriggerParamSpec.

        Parameter name as it appears in policy document

        :param name: The name of this TriggerParamSpec.
        :type name: str
        """

        self._name = name

    @property
    def required(self):
        """Gets the required of this TriggerParamSpec.

        Is this a required parameter or optional

        :return: The required of this TriggerParamSpec.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this TriggerParamSpec.

        Is this a required parameter or optional

        :param required: The required of this TriggerParamSpec.
        :type required: bool
        """

        self._required = required

    @property
    def state(self):
        """Gets the state of this TriggerParamSpec.

        State of the trigger parameter

        :return: The state of this TriggerParamSpec.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TriggerParamSpec.

        State of the trigger parameter

        :param state: The state of this TriggerParamSpec.
        :type state: str
        """
        allowed_values = ["active", "deprecated", "eol"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def superceded_by(self):
        """Gets the superceded_by of this TriggerParamSpec.

        The name of another trigger that supercedes this on functionally if this is deprecated

        :return: The superceded_by of this TriggerParamSpec.
        :rtype: str
        """
        return self._superceded_by

    @superceded_by.setter
    def superceded_by(self, superceded_by):
        """Sets the superceded_by of this TriggerParamSpec.

        The name of another trigger that supercedes this on functionally if this is deprecated

        :param superceded_by: The superceded_by of this TriggerParamSpec.
        :type superceded_by: str
        """

        self._superceded_by = superceded_by

    @property
    def validator(self):
        """Gets the validator of this TriggerParamSpec.

        If present, a definition for validation of input. Typically a jsonschema object that can be used to validate an input against.

        :return: The validator of this TriggerParamSpec.
        :rtype: object
        """
        return self._validator

    @validator.setter
    def validator(self, validator):
        """Sets the validator of this TriggerParamSpec.

        If present, a definition for validation of input. Typically a jsonschema object that can be used to validate an input against.

        :param validator: The validator of this TriggerParamSpec.
        :type validator: object
        """

        self._validator = validator
