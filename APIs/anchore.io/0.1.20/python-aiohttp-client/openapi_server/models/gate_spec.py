# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.trigger_spec import TriggerSpec
from openapi_server import util


class GateSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, state: str=None, superceded_by: str=None, triggers: List[TriggerSpec]=None):
        """GateSpec - a model defined in OpenAPI

        :param description: The description of this GateSpec.
        :param name: The name of this GateSpec.
        :param state: The state of this GateSpec.
        :param superceded_by: The superceded_by of this GateSpec.
        :param triggers: The triggers of this GateSpec.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'state': str,
            'superceded_by': str,
            'triggers': List[TriggerSpec]
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            'state': 'state',
            'superceded_by': 'superceded_by',
            'triggers': 'triggers'
        }

        self._description = description
        self._name = name
        self._state = state
        self._superceded_by = superceded_by
        self._triggers = triggers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GateSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GateSpec of this GateSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this GateSpec.

        Description of the gate

        :return: The description of this GateSpec.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GateSpec.

        Description of the gate

        :param description: The description of this GateSpec.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this GateSpec.

        Gate name, as it would appear in a policy document

        :return: The name of this GateSpec.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GateSpec.

        Gate name, as it would appear in a policy document

        :param name: The name of this GateSpec.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this GateSpec.

        State of the gate and transitively all triggers it contains if not 'active'

        :return: The state of this GateSpec.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GateSpec.

        State of the gate and transitively all triggers it contains if not 'active'

        :param state: The state of this GateSpec.
        :type state: str
        """
        allowed_values = ["active", "deprecated", "eol"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def superceded_by(self):
        """Gets the superceded_by of this GateSpec.

        The name of another trigger that supercedes this on functionally if this is deprecated

        :return: The superceded_by of this GateSpec.
        :rtype: str
        """
        return self._superceded_by

    @superceded_by.setter
    def superceded_by(self, superceded_by):
        """Sets the superceded_by of this GateSpec.

        The name of another trigger that supercedes this on functionally if this is deprecated

        :param superceded_by: The superceded_by of this GateSpec.
        :type superceded_by: str
        """

        self._superceded_by = superceded_by

    @property
    def triggers(self):
        """Gets the triggers of this GateSpec.

        List of the triggers that can fire for this Gate

        :return: The triggers of this GateSpec.
        :rtype: List[TriggerSpec]
        """
        return self._triggers

    @triggers.setter
    def triggers(self, triggers):
        """Sets the triggers of this GateSpec.

        List of the triggers that can fire for this Gate

        :param triggers: The triggers of this GateSpec.
        :type triggers: List[TriggerSpec]
        """

        self._triggers = triggers
