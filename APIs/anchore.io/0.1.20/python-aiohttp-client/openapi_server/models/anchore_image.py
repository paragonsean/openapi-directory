# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_detail import ImageDetail
from openapi_server import util


class AnchoreImage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis_status: str=None, annotations: object=None, created_at: datetime=None, image_digest: str=None, image_content: object=None, image_detail: List[ImageDetail]=None, image_status: str=None, last_updated: datetime=None, record_version: str=None, user_id: str=None):
        """AnchoreImage - a model defined in OpenAPI

        :param analysis_status: The analysis_status of this AnchoreImage.
        :param annotations: The annotations of this AnchoreImage.
        :param created_at: The created_at of this AnchoreImage.
        :param image_digest: The image_digest of this AnchoreImage.
        :param image_content: The image_content of this AnchoreImage.
        :param image_detail: The image_detail of this AnchoreImage.
        :param image_status: The image_status of this AnchoreImage.
        :param last_updated: The last_updated of this AnchoreImage.
        :param record_version: The record_version of this AnchoreImage.
        :param user_id: The user_id of this AnchoreImage.
        """
        self.openapi_types = {
            'analysis_status': str,
            'annotations': object,
            'created_at': datetime,
            'image_digest': str,
            'image_content': object,
            'image_detail': List[ImageDetail],
            'image_status': str,
            'last_updated': datetime,
            'record_version': str,
            'user_id': str
        }

        self.attribute_map = {
            'analysis_status': 'analysis_status',
            'annotations': 'annotations',
            'created_at': 'created_at',
            'image_digest': 'imageDigest',
            'image_content': 'image_content',
            'image_detail': 'image_detail',
            'image_status': 'image_status',
            'last_updated': 'last_updated',
            'record_version': 'record_version',
            'user_id': 'userId'
        }

        self._analysis_status = analysis_status
        self._annotations = annotations
        self._created_at = created_at
        self._image_digest = image_digest
        self._image_content = image_content
        self._image_detail = image_detail
        self._image_status = image_status
        self._last_updated = last_updated
        self._record_version = record_version
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnchoreImage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnchoreImage of this AnchoreImage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_status(self):
        """Gets the analysis_status of this AnchoreImage.

        A state value for the current status of the analysis progress of the image

        :return: The analysis_status of this AnchoreImage.
        :rtype: str
        """
        return self._analysis_status

    @analysis_status.setter
    def analysis_status(self, analysis_status):
        """Sets the analysis_status of this AnchoreImage.

        A state value for the current status of the analysis progress of the image

        :param analysis_status: The analysis_status of this AnchoreImage.
        :type analysis_status: str
        """
        allowed_values = ["not_analyzed", "analyzing", "analyzed", "analysis_failed"]  # noqa: E501
        if analysis_status not in allowed_values:
            raise ValueError(
                "Invalid value for `analysis_status` ({0}), must be one of {1}"
                .format(analysis_status, allowed_values)
            )

        self._analysis_status = analysis_status

    @property
    def annotations(self):
        """Gets the annotations of this AnchoreImage.


        :return: The annotations of this AnchoreImage.
        :rtype: object
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this AnchoreImage.


        :param annotations: The annotations of this AnchoreImage.
        :type annotations: object
        """

        self._annotations = annotations

    @property
    def created_at(self):
        """Gets the created_at of this AnchoreImage.


        :return: The created_at of this AnchoreImage.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AnchoreImage.


        :param created_at: The created_at of this AnchoreImage.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def image_digest(self):
        """Gets the image_digest of this AnchoreImage.


        :return: The image_digest of this AnchoreImage.
        :rtype: str
        """
        return self._image_digest

    @image_digest.setter
    def image_digest(self, image_digest):
        """Sets the image_digest of this AnchoreImage.


        :param image_digest: The image_digest of this AnchoreImage.
        :type image_digest: str
        """

        self._image_digest = image_digest

    @property
    def image_content(self):
        """Gets the image_content of this AnchoreImage.

        A metadata content record for a specific image, containing different content type entries

        :return: The image_content of this AnchoreImage.
        :rtype: object
        """
        return self._image_content

    @image_content.setter
    def image_content(self, image_content):
        """Sets the image_content of this AnchoreImage.

        A metadata content record for a specific image, containing different content type entries

        :param image_content: The image_content of this AnchoreImage.
        :type image_content: object
        """

        self._image_content = image_content

    @property
    def image_detail(self):
        """Gets the image_detail of this AnchoreImage.

        Details specific to an image reference and type such as tag and image source

        :return: The image_detail of this AnchoreImage.
        :rtype: List[ImageDetail]
        """
        return self._image_detail

    @image_detail.setter
    def image_detail(self, image_detail):
        """Sets the image_detail of this AnchoreImage.

        Details specific to an image reference and type such as tag and image source

        :param image_detail: The image_detail of this AnchoreImage.
        :type image_detail: List[ImageDetail]
        """

        self._image_detail = image_detail

    @property
    def image_status(self):
        """Gets the image_status of this AnchoreImage.

        State of the image

        :return: The image_status of this AnchoreImage.
        :rtype: str
        """
        return self._image_status

    @image_status.setter
    def image_status(self, image_status):
        """Sets the image_status of this AnchoreImage.

        State of the image

        :param image_status: The image_status of this AnchoreImage.
        :type image_status: str
        """
        allowed_values = ["active", "inactive", "disabled"]  # noqa: E501
        if image_status not in allowed_values:
            raise ValueError(
                "Invalid value for `image_status` ({0}), must be one of {1}"
                .format(image_status, allowed_values)
            )

        self._image_status = image_status

    @property
    def last_updated(self):
        """Gets the last_updated of this AnchoreImage.


        :return: The last_updated of this AnchoreImage.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this AnchoreImage.


        :param last_updated: The last_updated of this AnchoreImage.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def record_version(self):
        """Gets the record_version of this AnchoreImage.

        The version of the record, used for internal schema updates and data migrations.

        :return: The record_version of this AnchoreImage.
        :rtype: str
        """
        return self._record_version

    @record_version.setter
    def record_version(self, record_version):
        """Sets the record_version of this AnchoreImage.

        The version of the record, used for internal schema updates and data migrations.

        :param record_version: The record_version of this AnchoreImage.
        :type record_version: str
        """

        self._record_version = record_version

    @property
    def user_id(self):
        """Gets the user_id of this AnchoreImage.


        :return: The user_id of this AnchoreImage.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AnchoreImage.


        :param user_id: The user_id of this AnchoreImage.
        :type user_id: str
        """

        self._user_id = user_id
