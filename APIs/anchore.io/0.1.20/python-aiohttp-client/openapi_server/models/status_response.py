# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StatusResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available: bool=None, busy: bool=None, db_version: str=None, detail: object=None, message: str=None, up: bool=None, version: str=None):
        """StatusResponse - a model defined in OpenAPI

        :param available: The available of this StatusResponse.
        :param busy: The busy of this StatusResponse.
        :param db_version: The db_version of this StatusResponse.
        :param detail: The detail of this StatusResponse.
        :param message: The message of this StatusResponse.
        :param up: The up of this StatusResponse.
        :param version: The version of this StatusResponse.
        """
        self.openapi_types = {
            'available': bool,
            'busy': bool,
            'db_version': str,
            'detail': object,
            'message': str,
            'up': bool,
            'version': str
        }

        self.attribute_map = {
            'available': 'available',
            'busy': 'busy',
            'db_version': 'db_version',
            'detail': 'detail',
            'message': 'message',
            'up': 'up',
            'version': 'version'
        }

        self._available = available
        self._busy = busy
        self._db_version = db_version
        self._detail = detail
        self._message = message
        self._up = up
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatusResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatusResponse of this StatusResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available(self):
        """Gets the available of this StatusResponse.


        :return: The available of this StatusResponse.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this StatusResponse.


        :param available: The available of this StatusResponse.
        :type available: bool
        """

        self._available = available

    @property
    def busy(self):
        """Gets the busy of this StatusResponse.


        :return: The busy of this StatusResponse.
        :rtype: bool
        """
        return self._busy

    @busy.setter
    def busy(self, busy):
        """Sets the busy of this StatusResponse.


        :param busy: The busy of this StatusResponse.
        :type busy: bool
        """

        self._busy = busy

    @property
    def db_version(self):
        """Gets the db_version of this StatusResponse.


        :return: The db_version of this StatusResponse.
        :rtype: str
        """
        return self._db_version

    @db_version.setter
    def db_version(self, db_version):
        """Sets the db_version of this StatusResponse.


        :param db_version: The db_version of this StatusResponse.
        :type db_version: str
        """

        self._db_version = db_version

    @property
    def detail(self):
        """Gets the detail of this StatusResponse.


        :return: The detail of this StatusResponse.
        :rtype: object
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this StatusResponse.


        :param detail: The detail of this StatusResponse.
        :type detail: object
        """

        self._detail = detail

    @property
    def message(self):
        """Gets the message of this StatusResponse.


        :return: The message of this StatusResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this StatusResponse.


        :param message: The message of this StatusResponse.
        :type message: str
        """

        self._message = message

    @property
    def up(self):
        """Gets the up of this StatusResponse.


        :return: The up of this StatusResponse.
        :rtype: bool
        """
        return self._up

    @up.setter
    def up(self, up):
        """Sets the up of this StatusResponse.


        :param up: The up of this StatusResponse.
        :type up: bool
        """

        self._up = up

    @property
    def version(self):
        """Gets the version of this StatusResponse.


        :return: The version of this StatusResponse.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this StatusResponse.


        :param version: The version of this StatusResponse.
        :type version: str
        """

        self._version = version
