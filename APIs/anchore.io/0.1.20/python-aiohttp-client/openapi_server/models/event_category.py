# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_subcategory import EventSubcategory
from openapi_server import util


class EventCategory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, description: str=None, subcategories: List[EventSubcategory]=None):
        """EventCategory - a model defined in OpenAPI

        :param category: The category of this EventCategory.
        :param description: The description of this EventCategory.
        :param subcategories: The subcategories of this EventCategory.
        """
        self.openapi_types = {
            'category': str,
            'description': str,
            'subcategories': List[EventSubcategory]
        }

        self.attribute_map = {
            'category': 'category',
            'description': 'description',
            'subcategories': 'subcategories'
        }

        self._category = category
        self._description = description
        self._subcategories = subcategories

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventCategory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventCategory of this EventCategory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this EventCategory.


        :return: The category of this EventCategory.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this EventCategory.


        :param category: The category of this EventCategory.
        :type category: str
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this EventCategory.


        :return: The description of this EventCategory.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EventCategory.


        :param description: The description of this EventCategory.
        :type description: str
        """

        self._description = description

    @property
    def subcategories(self):
        """Gets the subcategories of this EventCategory.


        :return: The subcategories of this EventCategory.
        :rtype: List[EventSubcategory]
        """
        return self._subcategories

    @subcategories.setter
    def subcategories(self, subcategories):
        """Sets the subcategories of this EventCategory.


        :param subcategories: The subcategories of this EventCategory.
        :type subcategories: List[EventSubcategory]
        """

        self._subcategories = subcategories
