# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analysis_update_notification_data import AnalysisUpdateNotificationData
from openapi_server import util


class AnalysisUpdateNotification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: int=None, data_id: str=None, last_updated: int=None, max_tries: int=None, queue_id: str=None, record_state_key: str='active', record_state_val: str=None, tries: int=None, user_id: str=None, data: AnalysisUpdateNotificationData=None):
        """AnalysisUpdateNotification - a model defined in OpenAPI

        :param created_at: The created_at of this AnalysisUpdateNotification.
        :param data_id: The data_id of this AnalysisUpdateNotification.
        :param last_updated: The last_updated of this AnalysisUpdateNotification.
        :param max_tries: The max_tries of this AnalysisUpdateNotification.
        :param queue_id: The queue_id of this AnalysisUpdateNotification.
        :param record_state_key: The record_state_key of this AnalysisUpdateNotification.
        :param record_state_val: The record_state_val of this AnalysisUpdateNotification.
        :param tries: The tries of this AnalysisUpdateNotification.
        :param user_id: The user_id of this AnalysisUpdateNotification.
        :param data: The data of this AnalysisUpdateNotification.
        """
        self.openapi_types = {
            'created_at': int,
            'data_id': str,
            'last_updated': int,
            'max_tries': int,
            'queue_id': str,
            'record_state_key': str,
            'record_state_val': str,
            'tries': int,
            'user_id': str,
            'data': AnalysisUpdateNotificationData
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'data_id': 'dataId',
            'last_updated': 'last_updated',
            'max_tries': 'max_tries',
            'queue_id': 'queueId',
            'record_state_key': 'record_state_key',
            'record_state_val': 'record_state_val',
            'tries': 'tries',
            'user_id': 'userId',
            'data': 'data'
        }

        self._created_at = created_at
        self._data_id = data_id
        self._last_updated = last_updated
        self._max_tries = max_tries
        self._queue_id = queue_id
        self._record_state_key = record_state_key
        self._record_state_val = record_state_val
        self._tries = tries
        self._user_id = user_id
        self._data = data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalysisUpdateNotification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalysisUpdateNotification of this AnalysisUpdateNotification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this AnalysisUpdateNotification.


        :return: The created_at of this AnalysisUpdateNotification.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AnalysisUpdateNotification.


        :param created_at: The created_at of this AnalysisUpdateNotification.
        :type created_at: int
        """

        self._created_at = created_at

    @property
    def data_id(self):
        """Gets the data_id of this AnalysisUpdateNotification.


        :return: The data_id of this AnalysisUpdateNotification.
        :rtype: str
        """
        return self._data_id

    @data_id.setter
    def data_id(self, data_id):
        """Sets the data_id of this AnalysisUpdateNotification.


        :param data_id: The data_id of this AnalysisUpdateNotification.
        :type data_id: str
        """

        self._data_id = data_id

    @property
    def last_updated(self):
        """Gets the last_updated of this AnalysisUpdateNotification.


        :return: The last_updated of this AnalysisUpdateNotification.
        :rtype: int
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this AnalysisUpdateNotification.


        :param last_updated: The last_updated of this AnalysisUpdateNotification.
        :type last_updated: int
        """

        self._last_updated = last_updated

    @property
    def max_tries(self):
        """Gets the max_tries of this AnalysisUpdateNotification.


        :return: The max_tries of this AnalysisUpdateNotification.
        :rtype: int
        """
        return self._max_tries

    @max_tries.setter
    def max_tries(self, max_tries):
        """Sets the max_tries of this AnalysisUpdateNotification.


        :param max_tries: The max_tries of this AnalysisUpdateNotification.
        :type max_tries: int
        """

        self._max_tries = max_tries

    @property
    def queue_id(self):
        """Gets the queue_id of this AnalysisUpdateNotification.


        :return: The queue_id of this AnalysisUpdateNotification.
        :rtype: str
        """
        return self._queue_id

    @queue_id.setter
    def queue_id(self, queue_id):
        """Sets the queue_id of this AnalysisUpdateNotification.


        :param queue_id: The queue_id of this AnalysisUpdateNotification.
        :type queue_id: str
        """

        self._queue_id = queue_id

    @property
    def record_state_key(self):
        """Gets the record_state_key of this AnalysisUpdateNotification.


        :return: The record_state_key of this AnalysisUpdateNotification.
        :rtype: str
        """
        return self._record_state_key

    @record_state_key.setter
    def record_state_key(self, record_state_key):
        """Sets the record_state_key of this AnalysisUpdateNotification.


        :param record_state_key: The record_state_key of this AnalysisUpdateNotification.
        :type record_state_key: str
        """

        self._record_state_key = record_state_key

    @property
    def record_state_val(self):
        """Gets the record_state_val of this AnalysisUpdateNotification.


        :return: The record_state_val of this AnalysisUpdateNotification.
        :rtype: str
        """
        return self._record_state_val

    @record_state_val.setter
    def record_state_val(self, record_state_val):
        """Sets the record_state_val of this AnalysisUpdateNotification.


        :param record_state_val: The record_state_val of this AnalysisUpdateNotification.
        :type record_state_val: str
        """

        self._record_state_val = record_state_val

    @property
    def tries(self):
        """Gets the tries of this AnalysisUpdateNotification.


        :return: The tries of this AnalysisUpdateNotification.
        :rtype: int
        """
        return self._tries

    @tries.setter
    def tries(self, tries):
        """Sets the tries of this AnalysisUpdateNotification.


        :param tries: The tries of this AnalysisUpdateNotification.
        :type tries: int
        """

        self._tries = tries

    @property
    def user_id(self):
        """Gets the user_id of this AnalysisUpdateNotification.


        :return: The user_id of this AnalysisUpdateNotification.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AnalysisUpdateNotification.


        :param user_id: The user_id of this AnalysisUpdateNotification.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def data(self):
        """Gets the data of this AnalysisUpdateNotification.


        :return: The data of this AnalysisUpdateNotification.
        :rtype: AnalysisUpdateNotificationData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AnalysisUpdateNotification.


        :param data: The data of this AnalysisUpdateNotification.
        :type data: AnalysisUpdateNotificationData
        """

        self._data = data
