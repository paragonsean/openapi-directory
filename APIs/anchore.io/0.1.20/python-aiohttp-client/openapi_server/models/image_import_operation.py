# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImageImportOperation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, expires_at: datetime=None, status: str=None, uuid: str=None):
        """ImageImportOperation - a model defined in OpenAPI

        :param created_at: The created_at of this ImageImportOperation.
        :param expires_at: The expires_at of this ImageImportOperation.
        :param status: The status of this ImageImportOperation.
        :param uuid: The uuid of this ImageImportOperation.
        """
        self.openapi_types = {
            'created_at': datetime,
            'expires_at': datetime,
            'status': str,
            'uuid': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'expires_at': 'expires_at',
            'status': 'status',
            'uuid': 'uuid'
        }

        self._created_at = created_at
        self._expires_at = expires_at
        self._status = status
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageImportOperation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageImportOperation of this ImageImportOperation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this ImageImportOperation.


        :return: The created_at of this ImageImportOperation.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ImageImportOperation.


        :param created_at: The created_at of this ImageImportOperation.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def expires_at(self):
        """Gets the expires_at of this ImageImportOperation.


        :return: The expires_at of this ImageImportOperation.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this ImageImportOperation.


        :param expires_at: The expires_at of this ImageImportOperation.
        :type expires_at: datetime
        """

        self._expires_at = expires_at

    @property
    def status(self):
        """Gets the status of this ImageImportOperation.


        :return: The status of this ImageImportOperation.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ImageImportOperation.


        :param status: The status of this ImageImportOperation.
        :type status: str
        """
        allowed_values = ["pending", "queued", "processing", "complete", "failed", "expired"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def uuid(self):
        """Gets the uuid of this ImageImportOperation.


        :return: The uuid of this ImageImportOperation.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ImageImportOperation.


        :param uuid: The uuid of this ImageImportOperation.
        :type uuid: str
        """

        self._uuid = uuid
