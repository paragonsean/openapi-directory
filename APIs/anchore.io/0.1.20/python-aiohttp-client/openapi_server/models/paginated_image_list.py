# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_with_packages import ImageWithPackages
from openapi_server import util


class PaginatedImageList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_page: str=None, page: str=None, returned_count: int=None, images: List[ImageWithPackages]=None):
        """PaginatedImageList - a model defined in OpenAPI

        :param next_page: The next_page of this PaginatedImageList.
        :param page: The page of this PaginatedImageList.
        :param returned_count: The returned_count of this PaginatedImageList.
        :param images: The images of this PaginatedImageList.
        """
        self.openapi_types = {
            'next_page': str,
            'page': str,
            'returned_count': int,
            'images': List[ImageWithPackages]
        }

        self.attribute_map = {
            'next_page': 'next_page',
            'page': 'page',
            'returned_count': 'returned_count',
            'images': 'images'
        }

        self._next_page = next_page
        self._page = page
        self._returned_count = returned_count
        self._images = images

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaginatedImageList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaginatedImageList of this PaginatedImageList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_page(self):
        """Gets the next_page of this PaginatedImageList.

        True if additional pages exist (page + 1) or False if this is the last page

        :return: The next_page of this PaginatedImageList.
        :rtype: str
        """
        return self._next_page

    @next_page.setter
    def next_page(self, next_page):
        """Sets the next_page of this PaginatedImageList.

        True if additional pages exist (page + 1) or False if this is the last page

        :param next_page: The next_page of this PaginatedImageList.
        :type next_page: str
        """

        self._next_page = next_page

    @property
    def page(self):
        """Gets the page of this PaginatedImageList.

        The page number returned (should match the requested page query string param)

        :return: The page of this PaginatedImageList.
        :rtype: str
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this PaginatedImageList.

        The page number returned (should match the requested page query string param)

        :param page: The page of this PaginatedImageList.
        :type page: str
        """

        self._page = page

    @property
    def returned_count(self):
        """Gets the returned_count of this PaginatedImageList.

        The number of items sent in this response

        :return: The returned_count of this PaginatedImageList.
        :rtype: int
        """
        return self._returned_count

    @returned_count.setter
    def returned_count(self, returned_count):
        """Sets the returned_count of this PaginatedImageList.

        The number of items sent in this response

        :param returned_count: The returned_count of this PaginatedImageList.
        :type returned_count: int
        """

        self._returned_count = returned_count

    @property
    def images(self):
        """Gets the images of this PaginatedImageList.


        :return: The images of this PaginatedImageList.
        :rtype: List[ImageWithPackages]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this PaginatedImageList.


        :param images: The images of this PaginatedImageList.
        :type images: List[ImageWithPackages]
        """

        self._images = images
