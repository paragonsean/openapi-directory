# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AnalysisUpdateEval(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis_status: str=None, annotations: object=None, image_digest: str=None):
        """AnalysisUpdateEval - a model defined in OpenAPI

        :param analysis_status: The analysis_status of this AnalysisUpdateEval.
        :param annotations: The annotations of this AnalysisUpdateEval.
        :param image_digest: The image_digest of this AnalysisUpdateEval.
        """
        self.openapi_types = {
            'analysis_status': str,
            'annotations': object,
            'image_digest': str
        }

        self.attribute_map = {
            'analysis_status': 'analysis_status',
            'annotations': 'annotations',
            'image_digest': 'image_digest'
        }

        self._analysis_status = analysis_status
        self._annotations = annotations
        self._image_digest = image_digest

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalysisUpdateEval':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalysisUpdateEval of this AnalysisUpdateEval.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_status(self):
        """Gets the analysis_status of this AnalysisUpdateEval.


        :return: The analysis_status of this AnalysisUpdateEval.
        :rtype: str
        """
        return self._analysis_status

    @analysis_status.setter
    def analysis_status(self, analysis_status):
        """Sets the analysis_status of this AnalysisUpdateEval.


        :param analysis_status: The analysis_status of this AnalysisUpdateEval.
        :type analysis_status: str
        """

        self._analysis_status = analysis_status

    @property
    def annotations(self):
        """Gets the annotations of this AnalysisUpdateEval.


        :return: The annotations of this AnalysisUpdateEval.
        :rtype: object
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this AnalysisUpdateEval.


        :param annotations: The annotations of this AnalysisUpdateEval.
        :type annotations: object
        """

        self._annotations = annotations

    @property
    def image_digest(self):
        """Gets the image_digest of this AnalysisUpdateEval.


        :return: The image_digest of this AnalysisUpdateEval.
        :rtype: str
        """
        return self._image_digest

    @image_digest.setter
    def image_digest(self, image_digest):
        """Sets the image_digest of this AnalysisUpdateEval.


        :param image_digest: The image_digest of this AnalysisUpdateEval.
        :type image_digest: str
        """

        self._image_digest = image_digest
