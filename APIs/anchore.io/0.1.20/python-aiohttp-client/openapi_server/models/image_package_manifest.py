# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.import_descriptor import ImportDescriptor
from openapi_server.models.import_distribution import ImportDistribution
from openapi_server.models.import_package import ImportPackage
from openapi_server.models.import_package_relationship import ImportPackageRelationship
from openapi_server.models.import_schema import ImportSchema
from openapi_server.models.import_source import ImportSource
from openapi_server import util


class ImagePackageManifest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artifact_relationships: List[ImportPackageRelationship]=None, artifacts: List[ImportPackage]=None, descriptor: ImportDescriptor=None, distro: ImportDistribution=None, _schema: ImportSchema=None, source: ImportSource=None):
        """ImagePackageManifest - a model defined in OpenAPI

        :param artifact_relationships: The artifact_relationships of this ImagePackageManifest.
        :param artifacts: The artifacts of this ImagePackageManifest.
        :param descriptor: The descriptor of this ImagePackageManifest.
        :param distro: The distro of this ImagePackageManifest.
        :param _schema: The _schema of this ImagePackageManifest.
        :param source: The source of this ImagePackageManifest.
        """
        self.openapi_types = {
            'artifact_relationships': List[ImportPackageRelationship],
            'artifacts': List[ImportPackage],
            'descriptor': ImportDescriptor,
            'distro': ImportDistribution,
            '_schema': ImportSchema,
            'source': ImportSource
        }

        self.attribute_map = {
            'artifact_relationships': 'artifactRelationships',
            'artifacts': 'artifacts',
            'descriptor': 'descriptor',
            'distro': 'distro',
            '_schema': 'schema',
            'source': 'source'
        }

        self._artifact_relationships = artifact_relationships
        self._artifacts = artifacts
        self._descriptor = descriptor
        self._distro = distro
        self.__schema = _schema
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImagePackageManifest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImagePackageManifest of this ImagePackageManifest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artifact_relationships(self):
        """Gets the artifact_relationships of this ImagePackageManifest.


        :return: The artifact_relationships of this ImagePackageManifest.
        :rtype: List[ImportPackageRelationship]
        """
        return self._artifact_relationships

    @artifact_relationships.setter
    def artifact_relationships(self, artifact_relationships):
        """Sets the artifact_relationships of this ImagePackageManifest.


        :param artifact_relationships: The artifact_relationships of this ImagePackageManifest.
        :type artifact_relationships: List[ImportPackageRelationship]
        """

        self._artifact_relationships = artifact_relationships

    @property
    def artifacts(self):
        """Gets the artifacts of this ImagePackageManifest.


        :return: The artifacts of this ImagePackageManifest.
        :rtype: List[ImportPackage]
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts):
        """Sets the artifacts of this ImagePackageManifest.


        :param artifacts: The artifacts of this ImagePackageManifest.
        :type artifacts: List[ImportPackage]
        """
        if artifacts is None:
            raise ValueError("Invalid value for `artifacts`, must not be `None`")

        self._artifacts = artifacts

    @property
    def descriptor(self):
        """Gets the descriptor of this ImagePackageManifest.


        :return: The descriptor of this ImagePackageManifest.
        :rtype: ImportDescriptor
        """
        return self._descriptor

    @descriptor.setter
    def descriptor(self, descriptor):
        """Sets the descriptor of this ImagePackageManifest.


        :param descriptor: The descriptor of this ImagePackageManifest.
        :type descriptor: ImportDescriptor
        """

        self._descriptor = descriptor

    @property
    def distro(self):
        """Gets the distro of this ImagePackageManifest.


        :return: The distro of this ImagePackageManifest.
        :rtype: ImportDistribution
        """
        return self._distro

    @distro.setter
    def distro(self, distro):
        """Sets the distro of this ImagePackageManifest.


        :param distro: The distro of this ImagePackageManifest.
        :type distro: ImportDistribution
        """
        if distro is None:
            raise ValueError("Invalid value for `distro`, must not be `None`")

        self._distro = distro

    @property
    def _schema(self):
        """Gets the _schema of this ImagePackageManifest.


        :return: The _schema of this ImagePackageManifest.
        :rtype: ImportSchema
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this ImagePackageManifest.


        :param _schema: The _schema of this ImagePackageManifest.
        :type _schema: ImportSchema
        """

        self.__schema = _schema

    @property
    def source(self):
        """Gets the source of this ImagePackageManifest.


        :return: The source of this ImagePackageManifest.
        :rtype: ImportSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ImagePackageManifest.


        :param source: The source of this ImagePackageManifest.
        :type source: ImportSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source
