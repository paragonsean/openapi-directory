# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AnalysisArchiveSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, digest: str=None):
        """AnalysisArchiveSource - a model defined in OpenAPI

        :param digest: The digest of this AnalysisArchiveSource.
        """
        self.openapi_types = {
            'digest': str
        }

        self.attribute_map = {
            'digest': 'digest'
        }

        self._digest = digest

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalysisArchiveSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalysisArchiveSource of this AnalysisArchiveSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def digest(self):
        """Gets the digest of this AnalysisArchiveSource.

        The image digest identify the analysis. Archived analyses are based on digest, tag records are restored as analysis is restored.

        :return: The digest of this AnalysisArchiveSource.
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this AnalysisArchiveSource.

        The image digest identify the analysis. Archived analyses are based on digest, tag records are restored as analysis is restored.

        :param digest: The digest of this AnalysisArchiveSource.
        :type digest: str
        """
        if digest is None:
            raise ValueError("Invalid value for `digest`, must not be `None`")
        if digest is not None and not re.search(r'^sha256:[a-fA-F0-9]{64}$', digest):
            raise ValueError("Invalid value for `digest`, must be a follow pattern or equal to `/^sha256:[a-fA-F0-9]{64}$/`")

        self._digest = digest
