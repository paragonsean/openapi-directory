# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, name: str=None, resource_type: str=None, type: str=None):
        """EventDescription - a model defined in OpenAPI

        :param message: The message of this EventDescription.
        :param name: The name of this EventDescription.
        :param resource_type: The resource_type of this EventDescription.
        :param type: The type of this EventDescription.
        """
        self.openapi_types = {
            'message': str,
            'name': str,
            'resource_type': str,
            'type': str
        }

        self.attribute_map = {
            'message': 'message',
            'name': 'name',
            'resource_type': 'resource_type',
            'type': 'type'
        }

        self._message = message
        self._name = name
        self._resource_type = resource_type
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventDescription of this EventDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this EventDescription.

        The message associated with the event type

        :return: The message of this EventDescription.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this EventDescription.

        The message associated with the event type

        :param message: The message of this EventDescription.
        :type message: str
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this EventDescription.

        The event type. The last component of the fully-qualified event_type (category.subcategory.event)

        :return: The name of this EventDescription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventDescription.

        The event type. The last component of the fully-qualified event_type (category.subcategory.event)

        :param name: The name of this EventDescription.
        :type name: str
        """

        self._name = name

    @property
    def resource_type(self):
        """Gets the resource_type of this EventDescription.

        The type of resource this event is generated from

        :return: The resource_type of this EventDescription.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this EventDescription.

        The type of resource this event is generated from

        :param resource_type: The resource_type of this EventDescription.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def type(self):
        """Gets the type of this EventDescription.

        The fully qualified event type as would be seen in the event payload

        :return: The type of this EventDescription.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventDescription.

        The fully qualified event type as would be seen in the event payload

        :param type: The type of this EventDescription.
        :type type: str
        """

        self._type = type
