# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportPackageRelationship(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, child: str=None, metadata: Dict[str, object]=None, parent: str=None, type: str=None):
        """ImportPackageRelationship - a model defined in OpenAPI

        :param child: The child of this ImportPackageRelationship.
        :param metadata: The metadata of this ImportPackageRelationship.
        :param parent: The parent of this ImportPackageRelationship.
        :param type: The type of this ImportPackageRelationship.
        """
        self.openapi_types = {
            'child': str,
            'metadata': Dict[str, object],
            'parent': str,
            'type': str
        }

        self.attribute_map = {
            'child': 'child',
            'metadata': 'metadata',
            'parent': 'parent',
            'type': 'type'
        }

        self._child = child
        self._metadata = metadata
        self._parent = parent
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportPackageRelationship':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportPackageRelationship of this ImportPackageRelationship.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def child(self):
        """Gets the child of this ImportPackageRelationship.


        :return: The child of this ImportPackageRelationship.
        :rtype: str
        """
        return self._child

    @child.setter
    def child(self, child):
        """Sets the child of this ImportPackageRelationship.


        :param child: The child of this ImportPackageRelationship.
        :type child: str
        """
        if child is None:
            raise ValueError("Invalid value for `child`, must not be `None`")

        self._child = child

    @property
    def metadata(self):
        """Gets the metadata of this ImportPackageRelationship.


        :return: The metadata of this ImportPackageRelationship.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ImportPackageRelationship.


        :param metadata: The metadata of this ImportPackageRelationship.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def parent(self):
        """Gets the parent of this ImportPackageRelationship.


        :return: The parent of this ImportPackageRelationship.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this ImportPackageRelationship.


        :param parent: The parent of this ImportPackageRelationship.
        :type parent: str
        """
        if parent is None:
            raise ValueError("Invalid value for `parent`, must not be `None`")

        self._parent = parent

    @property
    def type(self):
        """Gets the type of this ImportPackageRelationship.


        :return: The type of this ImportPackageRelationship.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ImportPackageRelationship.


        :param type: The type of this ImportPackageRelationship.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
