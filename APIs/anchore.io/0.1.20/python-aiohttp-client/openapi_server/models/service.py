# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status_response import StatusResponse
from openapi_server import util


class Service(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_url: str=None, hostid: str=None, service_detail: StatusResponse=None, servicename: str=None, status: bool=None, status_message: str=None, version: str=None):
        """Service - a model defined in OpenAPI

        :param base_url: The base_url of this Service.
        :param hostid: The hostid of this Service.
        :param service_detail: The service_detail of this Service.
        :param servicename: The servicename of this Service.
        :param status: The status of this Service.
        :param status_message: The status_message of this Service.
        :param version: The version of this Service.
        """
        self.openapi_types = {
            'base_url': str,
            'hostid': str,
            'service_detail': StatusResponse,
            'servicename': str,
            'status': bool,
            'status_message': str,
            'version': str
        }

        self.attribute_map = {
            'base_url': 'base_url',
            'hostid': 'hostid',
            'service_detail': 'service_detail',
            'servicename': 'servicename',
            'status': 'status',
            'status_message': 'status_message',
            'version': 'version'
        }

        self._base_url = base_url
        self._hostid = hostid
        self._service_detail = service_detail
        self._servicename = servicename
        self._status = status
        self._status_message = status_message
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Service':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Service of this Service.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_url(self):
        """Gets the base_url of this Service.

        The url to reach the service, including port as needed

        :return: The base_url of this Service.
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this Service.

        The url to reach the service, including port as needed

        :param base_url: The base_url of this Service.
        :type base_url: str
        """

        self._base_url = base_url

    @property
    def hostid(self):
        """Gets the hostid of this Service.

        The unique id of the host on which the service is executing

        :return: The hostid of this Service.
        :rtype: str
        """
        return self._hostid

    @hostid.setter
    def hostid(self, hostid):
        """Sets the hostid of this Service.

        The unique id of the host on which the service is executing

        :param hostid: The hostid of this Service.
        :type hostid: str
        """

        self._hostid = hostid

    @property
    def service_detail(self):
        """Gets the service_detail of this Service.


        :return: The service_detail of this Service.
        :rtype: StatusResponse
        """
        return self._service_detail

    @service_detail.setter
    def service_detail(self, service_detail):
        """Sets the service_detail of this Service.


        :param service_detail: The service_detail of this Service.
        :type service_detail: StatusResponse
        """

        self._service_detail = service_detail

    @property
    def servicename(self):
        """Gets the servicename of this Service.

        Registered service name

        :return: The servicename of this Service.
        :rtype: str
        """
        return self._servicename

    @servicename.setter
    def servicename(self, servicename):
        """Sets the servicename of this Service.

        Registered service name

        :param servicename: The servicename of this Service.
        :type servicename: str
        """

        self._servicename = servicename

    @property
    def status(self):
        """Gets the status of this Service.


        :return: The status of this Service.
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Service.


        :param status: The status of this Service.
        :type status: bool
        """

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this Service.

        A state indicating the condition of the service. Normal operation is 'registered'

        :return: The status_message of this Service.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this Service.

        A state indicating the condition of the service. Normal operation is 'registered'

        :param status_message: The status_message of this Service.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def version(self):
        """Gets the version of this Service.

        The version of the service as reported by the service implementation on registration

        :return: The version of this Service.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Service.

        The version of the service as reported by the service implementation on registration

        :param version: The version of this Service.
        :type version: str
        """

        self._version = version
