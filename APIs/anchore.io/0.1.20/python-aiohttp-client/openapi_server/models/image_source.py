# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analysis_archive_source import AnalysisArchiveSource
from openapi_server.models.image_import_manifest import ImageImportManifest
from openapi_server.models.registry_digest_source import RegistryDigestSource
from openapi_server.models.registry_tag_source import RegistryTagSource
from openapi_server import util


class ImageSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archive: AnalysisArchiveSource=None, digest: RegistryDigestSource=None, _import: ImageImportManifest=None, tag: RegistryTagSource=None):
        """ImageSource - a model defined in OpenAPI

        :param archive: The archive of this ImageSource.
        :param digest: The digest of this ImageSource.
        :param _import: The _import of this ImageSource.
        :param tag: The tag of this ImageSource.
        """
        self.openapi_types = {
            'archive': AnalysisArchiveSource,
            'digest': RegistryDigestSource,
            '_import': ImageImportManifest,
            'tag': RegistryTagSource
        }

        self.attribute_map = {
            'archive': 'archive',
            'digest': 'digest',
            '_import': 'import',
            'tag': 'tag'
        }

        self._archive = archive
        self._digest = digest
        self.__import = _import
        self._tag = tag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageSource of this ImageSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archive(self):
        """Gets the archive of this ImageSource.


        :return: The archive of this ImageSource.
        :rtype: AnalysisArchiveSource
        """
        return self._archive

    @archive.setter
    def archive(self, archive):
        """Sets the archive of this ImageSource.


        :param archive: The archive of this ImageSource.
        :type archive: AnalysisArchiveSource
        """

        self._archive = archive

    @property
    def digest(self):
        """Gets the digest of this ImageSource.


        :return: The digest of this ImageSource.
        :rtype: RegistryDigestSource
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this ImageSource.


        :param digest: The digest of this ImageSource.
        :type digest: RegistryDigestSource
        """

        self._digest = digest

    @property
    def _import(self):
        """Gets the _import of this ImageSource.


        :return: The _import of this ImageSource.
        :rtype: ImageImportManifest
        """
        return self.__import

    @_import.setter
    def _import(self, _import):
        """Sets the _import of this ImageSource.


        :param _import: The _import of this ImageSource.
        :type _import: ImageImportManifest
        """

        self.__import = _import

    @property
    def tag(self):
        """Gets the tag of this ImageSource.


        :return: The tag of this ImageSource.
        :rtype: RegistryTagSource
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this ImageSource.


        :param tag: The tag of this ImageSource.
        :type tag: RegistryTagSource
        """

        self._tag = tag
