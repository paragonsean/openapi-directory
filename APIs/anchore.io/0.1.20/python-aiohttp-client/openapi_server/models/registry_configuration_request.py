# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegistryConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, registry: str=None, registry_name: str=None, registry_pass: str=None, registry_type: str=None, registry_user: str=None, registry_verify: bool=None):
        """RegistryConfigurationRequest - a model defined in OpenAPI

        :param registry: The registry of this RegistryConfigurationRequest.
        :param registry_name: The registry_name of this RegistryConfigurationRequest.
        :param registry_pass: The registry_pass of this RegistryConfigurationRequest.
        :param registry_type: The registry_type of this RegistryConfigurationRequest.
        :param registry_user: The registry_user of this RegistryConfigurationRequest.
        :param registry_verify: The registry_verify of this RegistryConfigurationRequest.
        """
        self.openapi_types = {
            'registry': str,
            'registry_name': str,
            'registry_pass': str,
            'registry_type': str,
            'registry_user': str,
            'registry_verify': bool
        }

        self.attribute_map = {
            'registry': 'registry',
            'registry_name': 'registry_name',
            'registry_pass': 'registry_pass',
            'registry_type': 'registry_type',
            'registry_user': 'registry_user',
            'registry_verify': 'registry_verify'
        }

        self._registry = registry
        self._registry_name = registry_name
        self._registry_pass = registry_pass
        self._registry_type = registry_type
        self._registry_user = registry_user
        self._registry_verify = registry_verify

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegistryConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegistryConfigurationRequest of this RegistryConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def registry(self):
        """Gets the registry of this RegistryConfigurationRequest.

        hostname:port string for accessing the registry, as would be used in a docker pull operation. May include some or all of a repository and wildcards (e.g. docker.io/library/* or gcr.io/myproject/myrepository)

        :return: The registry of this RegistryConfigurationRequest.
        :rtype: str
        """
        return self._registry

    @registry.setter
    def registry(self, registry):
        """Sets the registry of this RegistryConfigurationRequest.

        hostname:port string for accessing the registry, as would be used in a docker pull operation. May include some or all of a repository and wildcards (e.g. docker.io/library/* or gcr.io/myproject/myrepository)

        :param registry: The registry of this RegistryConfigurationRequest.
        :type registry: str
        """

        self._registry = registry

    @property
    def registry_name(self):
        """Gets the registry_name of this RegistryConfigurationRequest.

        human readable name associated with registry record

        :return: The registry_name of this RegistryConfigurationRequest.
        :rtype: str
        """
        return self._registry_name

    @registry_name.setter
    def registry_name(self, registry_name):
        """Sets the registry_name of this RegistryConfigurationRequest.

        human readable name associated with registry record

        :param registry_name: The registry_name of this RegistryConfigurationRequest.
        :type registry_name: str
        """

        self._registry_name = registry_name

    @property
    def registry_pass(self):
        """Gets the registry_pass of this RegistryConfigurationRequest.

        Password portion of credential to use for this registry

        :return: The registry_pass of this RegistryConfigurationRequest.
        :rtype: str
        """
        return self._registry_pass

    @registry_pass.setter
    def registry_pass(self, registry_pass):
        """Sets the registry_pass of this RegistryConfigurationRequest.

        Password portion of credential to use for this registry

        :param registry_pass: The registry_pass of this RegistryConfigurationRequest.
        :type registry_pass: str
        """

        self._registry_pass = registry_pass

    @property
    def registry_type(self):
        """Gets the registry_type of this RegistryConfigurationRequest.

        Type of registry

        :return: The registry_type of this RegistryConfigurationRequest.
        :rtype: str
        """
        return self._registry_type

    @registry_type.setter
    def registry_type(self, registry_type):
        """Sets the registry_type of this RegistryConfigurationRequest.

        Type of registry

        :param registry_type: The registry_type of this RegistryConfigurationRequest.
        :type registry_type: str
        """

        self._registry_type = registry_type

    @property
    def registry_user(self):
        """Gets the registry_user of this RegistryConfigurationRequest.

        Username portion of credential to use for this registry

        :return: The registry_user of this RegistryConfigurationRequest.
        :rtype: str
        """
        return self._registry_user

    @registry_user.setter
    def registry_user(self, registry_user):
        """Sets the registry_user of this RegistryConfigurationRequest.

        Username portion of credential to use for this registry

        :param registry_user: The registry_user of this RegistryConfigurationRequest.
        :type registry_user: str
        """

        self._registry_user = registry_user

    @property
    def registry_verify(self):
        """Gets the registry_verify of this RegistryConfigurationRequest.

        Use TLS/SSL verification for the registry URL

        :return: The registry_verify of this RegistryConfigurationRequest.
        :rtype: bool
        """
        return self._registry_verify

    @registry_verify.setter
    def registry_verify(self, registry_verify):
        """Sets the registry_verify of this RegistryConfigurationRequest.

        Use TLS/SSL verification for the registry URL

        :param registry_verify: The registry_verify of this RegistryConfigurationRequest.
        :type registry_verify: bool
        """

        self._registry_verify = registry_verify
