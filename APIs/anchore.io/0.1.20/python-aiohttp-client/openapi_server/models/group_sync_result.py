# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GroupSyncResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group: str=None, status: str=None, total_time_seconds: float=None, updated_image_count: int=None, updated_record_count: int=None):
        """GroupSyncResult - a model defined in OpenAPI

        :param group: The group of this GroupSyncResult.
        :param status: The status of this GroupSyncResult.
        :param total_time_seconds: The total_time_seconds of this GroupSyncResult.
        :param updated_image_count: The updated_image_count of this GroupSyncResult.
        :param updated_record_count: The updated_record_count of this GroupSyncResult.
        """
        self.openapi_types = {
            'group': str,
            'status': str,
            'total_time_seconds': float,
            'updated_image_count': int,
            'updated_record_count': int
        }

        self.attribute_map = {
            'group': 'group',
            'status': 'status',
            'total_time_seconds': 'total_time_seconds',
            'updated_image_count': 'updated_image_count',
            'updated_record_count': 'updated_record_count'
        }

        self._group = group
        self._status = status
        self._total_time_seconds = total_time_seconds
        self._updated_image_count = updated_image_count
        self._updated_record_count = updated_record_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupSyncResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupSyncResult of this GroupSyncResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group(self):
        """Gets the group of this GroupSyncResult.

        The name of the group

        :return: The group of this GroupSyncResult.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this GroupSyncResult.

        The name of the group

        :param group: The group of this GroupSyncResult.
        :type group: str
        """

        self._group = group

    @property
    def status(self):
        """Gets the status of this GroupSyncResult.


        :return: The status of this GroupSyncResult.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GroupSyncResult.


        :param status: The status of this GroupSyncResult.
        :type status: str
        """
        allowed_values = ["success", "failure"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def total_time_seconds(self):
        """Gets the total_time_seconds of this GroupSyncResult.

        The duration of the group sync in seconds

        :return: The total_time_seconds of this GroupSyncResult.
        :rtype: float
        """
        return self._total_time_seconds

    @total_time_seconds.setter
    def total_time_seconds(self, total_time_seconds):
        """Sets the total_time_seconds of this GroupSyncResult.

        The duration of the group sync in seconds

        :param total_time_seconds: The total_time_seconds of this GroupSyncResult.
        :type total_time_seconds: float
        """

        self._total_time_seconds = total_time_seconds

    @property
    def updated_image_count(self):
        """Gets the updated_image_count of this GroupSyncResult.

        The number of images updated by the this group sync, across all accounts. This is typically only non-zero for vulnerability feeds which update images' vulnerability results during the sync.

        :return: The updated_image_count of this GroupSyncResult.
        :rtype: int
        """
        return self._updated_image_count

    @updated_image_count.setter
    def updated_image_count(self, updated_image_count):
        """Sets the updated_image_count of this GroupSyncResult.

        The number of images updated by the this group sync, across all accounts. This is typically only non-zero for vulnerability feeds which update images' vulnerability results during the sync.

        :param updated_image_count: The updated_image_count of this GroupSyncResult.
        :type updated_image_count: int
        """

        self._updated_image_count = updated_image_count

    @property
    def updated_record_count(self):
        """Gets the updated_record_count of this GroupSyncResult.

        The number of feed data records synced down as either updates or new records

        :return: The updated_record_count of this GroupSyncResult.
        :rtype: int
        """
        return self._updated_record_count

    @updated_record_count.setter
    def updated_record_count(self, updated_record_count):
        """Sets the updated_record_count of this GroupSyncResult.

        The number of feed data records synced down as either updates or new records

        :param updated_record_count: The updated_record_count of this GroupSyncResult.
        :type updated_record_count: int
        """

        self._updated_record_count = updated_record_count
