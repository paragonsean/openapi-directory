# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AnalysisArchiveTransitionHistory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, image_digest: str=None, last_updated: datetime=None, rule_id: str=None, transition: str=None, transition_task_id: str=None):
        """AnalysisArchiveTransitionHistory - a model defined in OpenAPI

        :param created_at: The created_at of this AnalysisArchiveTransitionHistory.
        :param image_digest: The image_digest of this AnalysisArchiveTransitionHistory.
        :param last_updated: The last_updated of this AnalysisArchiveTransitionHistory.
        :param rule_id: The rule_id of this AnalysisArchiveTransitionHistory.
        :param transition: The transition of this AnalysisArchiveTransitionHistory.
        :param transition_task_id: The transition_task_id of this AnalysisArchiveTransitionHistory.
        """
        self.openapi_types = {
            'created_at': datetime,
            'image_digest': str,
            'last_updated': datetime,
            'rule_id': str,
            'transition': str,
            'transition_task_id': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'image_digest': 'imageDigest',
            'last_updated': 'last_updated',
            'rule_id': 'rule_id',
            'transition': 'transition',
            'transition_task_id': 'transition_task_id'
        }

        self._created_at = created_at
        self._image_digest = image_digest
        self._last_updated = last_updated
        self._rule_id = rule_id
        self._transition = transition
        self._transition_task_id = transition_task_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalysisArchiveTransitionHistory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalysisArchiveTransitionHistory of this AnalysisArchiveTransitionHistory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this AnalysisArchiveTransitionHistory.


        :return: The created_at of this AnalysisArchiveTransitionHistory.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AnalysisArchiveTransitionHistory.


        :param created_at: The created_at of this AnalysisArchiveTransitionHistory.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def image_digest(self):
        """Gets the image_digest of this AnalysisArchiveTransitionHistory.


        :return: The image_digest of this AnalysisArchiveTransitionHistory.
        :rtype: str
        """
        return self._image_digest

    @image_digest.setter
    def image_digest(self, image_digest):
        """Sets the image_digest of this AnalysisArchiveTransitionHistory.


        :param image_digest: The image_digest of this AnalysisArchiveTransitionHistory.
        :type image_digest: str
        """

        self._image_digest = image_digest

    @property
    def last_updated(self):
        """Gets the last_updated of this AnalysisArchiveTransitionHistory.


        :return: The last_updated of this AnalysisArchiveTransitionHistory.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this AnalysisArchiveTransitionHistory.


        :param last_updated: The last_updated of this AnalysisArchiveTransitionHistory.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def rule_id(self):
        """Gets the rule_id of this AnalysisArchiveTransitionHistory.


        :return: The rule_id of this AnalysisArchiveTransitionHistory.
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this AnalysisArchiveTransitionHistory.


        :param rule_id: The rule_id of this AnalysisArchiveTransitionHistory.
        :type rule_id: str
        """

        self._rule_id = rule_id

    @property
    def transition(self):
        """Gets the transition of this AnalysisArchiveTransitionHistory.


        :return: The transition of this AnalysisArchiveTransitionHistory.
        :rtype: str
        """
        return self._transition

    @transition.setter
    def transition(self, transition):
        """Sets the transition of this AnalysisArchiveTransitionHistory.


        :param transition: The transition of this AnalysisArchiveTransitionHistory.
        :type transition: str
        """
        allowed_values = ["archive", "delete"]  # noqa: E501
        if transition not in allowed_values:
            raise ValueError(
                "Invalid value for `transition` ({0}), must be one of {1}"
                .format(transition, allowed_values)
            )

        self._transition = transition

    @property
    def transition_task_id(self):
        """Gets the transition_task_id of this AnalysisArchiveTransitionHistory.

        The task that created & updated this entry

        :return: The transition_task_id of this AnalysisArchiveTransitionHistory.
        :rtype: str
        """
        return self._transition_task_id

    @transition_task_id.setter
    def transition_task_id(self, transition_task_id):
        """Sets the transition_task_id of this AnalysisArchiveTransitionHistory.

        The task that created & updated this entry

        :param transition_task_id: The transition_task_id of this AnalysisArchiveTransitionHistory.
        :type transition_task_id: str
        """

        self._transition_task_id = transition_task_id
