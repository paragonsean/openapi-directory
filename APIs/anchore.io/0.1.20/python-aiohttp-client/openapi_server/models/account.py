# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, email: str=None, last_updated: datetime=None, name: str=None, state: str=None, type: str=None):
        """Account - a model defined in OpenAPI

        :param created_at: The created_at of this Account.
        :param email: The email of this Account.
        :param last_updated: The last_updated of this Account.
        :param name: The name of this Account.
        :param state: The state of this Account.
        :param type: The type of this Account.
        """
        self.openapi_types = {
            'created_at': datetime,
            'email': str,
            'last_updated': datetime,
            'name': str,
            'state': str,
            'type': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'email': 'email',
            'last_updated': 'last_updated',
            'name': 'name',
            'state': 'state',
            'type': 'type'
        }

        self._created_at = created_at
        self._email = email
        self._last_updated = last_updated
        self._name = name
        self._state = state
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Account of this Account.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this Account.

        The timestamp when the account was created

        :return: The created_at of this Account.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Account.

        The timestamp when the account was created

        :param created_at: The created_at of this Account.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def email(self):
        """Gets the email of this Account.

        Optional email address associated with the account

        :return: The email of this Account.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Account.

        Optional email address associated with the account

        :param email: The email of this Account.
        :type email: str
        """

        self._email = email

    @property
    def last_updated(self):
        """Gets the last_updated of this Account.

        The timestamp of the last update to the account metadata itself (not users or creds)

        :return: The last_updated of this Account.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Account.

        The timestamp of the last update to the account metadata itself (not users or creds)

        :param last_updated: The last_updated of this Account.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def name(self):
        """Gets the name of this Account.

        The account identifier, not updatable after creation

        :return: The name of this Account.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Account.

        The account identifier, not updatable after creation

        :param name: The name of this Account.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def state(self):
        """Gets the state of this Account.

        State of the account. Disabled accounts prevent member users from logging in, deleting accounts are disabled and pending deletion and will be removed once all owned resources are garbage collected by the system

        :return: The state of this Account.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Account.

        State of the account. Disabled accounts prevent member users from logging in, deleting accounts are disabled and pending deletion and will be removed once all owned resources are garbage collected by the system

        :param state: The state of this Account.
        :type state: str
        """
        allowed_values = ["enabled", "disabled", "deleting"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """Gets the type of this Account.

        The user type (admin vs user). If not specified in a POST request, 'user' is default

        :return: The type of this Account.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Account.

        The user type (admin vs user). If not specified in a POST request, 'user' is default

        :param type: The type of this Account.
        :type type: str
        """
        allowed_values = ["user", "admin", "service"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
