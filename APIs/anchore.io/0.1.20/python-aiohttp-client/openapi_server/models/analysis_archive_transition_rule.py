# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analysis_archive_transition_rule_exclude import AnalysisArchiveTransitionRuleExclude
from openapi_server.models.image_selector import ImageSelector
from openapi_server import util


class AnalysisArchiveTransitionRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis_age_days: int=None, created_at: datetime=None, exclude: AnalysisArchiveTransitionRuleExclude=None, last_updated: datetime=None, max_images_per_account: int=None, rule_id: str=None, selector: ImageSelector=None, system_global: bool=None, tag_versions_newer: int=None, transition: str=None):
        """AnalysisArchiveTransitionRule - a model defined in OpenAPI

        :param analysis_age_days: The analysis_age_days of this AnalysisArchiveTransitionRule.
        :param created_at: The created_at of this AnalysisArchiveTransitionRule.
        :param exclude: The exclude of this AnalysisArchiveTransitionRule.
        :param last_updated: The last_updated of this AnalysisArchiveTransitionRule.
        :param max_images_per_account: The max_images_per_account of this AnalysisArchiveTransitionRule.
        :param rule_id: The rule_id of this AnalysisArchiveTransitionRule.
        :param selector: The selector of this AnalysisArchiveTransitionRule.
        :param system_global: The system_global of this AnalysisArchiveTransitionRule.
        :param tag_versions_newer: The tag_versions_newer of this AnalysisArchiveTransitionRule.
        :param transition: The transition of this AnalysisArchiveTransitionRule.
        """
        self.openapi_types = {
            'analysis_age_days': int,
            'created_at': datetime,
            'exclude': AnalysisArchiveTransitionRuleExclude,
            'last_updated': datetime,
            'max_images_per_account': int,
            'rule_id': str,
            'selector': ImageSelector,
            'system_global': bool,
            'tag_versions_newer': int,
            'transition': str
        }

        self.attribute_map = {
            'analysis_age_days': 'analysis_age_days',
            'created_at': 'created_at',
            'exclude': 'exclude',
            'last_updated': 'last_updated',
            'max_images_per_account': 'max_images_per_account',
            'rule_id': 'rule_id',
            'selector': 'selector',
            'system_global': 'system_global',
            'tag_versions_newer': 'tag_versions_newer',
            'transition': 'transition'
        }

        self._analysis_age_days = analysis_age_days
        self._created_at = created_at
        self._exclude = exclude
        self._last_updated = last_updated
        self._max_images_per_account = max_images_per_account
        self._rule_id = rule_id
        self._selector = selector
        self._system_global = system_global
        self._tag_versions_newer = tag_versions_newer
        self._transition = transition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalysisArchiveTransitionRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalysisArchiveTransitionRule of this AnalysisArchiveTransitionRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_age_days(self):
        """Gets the analysis_age_days of this AnalysisArchiveTransitionRule.

        Matches if the analysis is strictly older than this number of days

        :return: The analysis_age_days of this AnalysisArchiveTransitionRule.
        :rtype: int
        """
        return self._analysis_age_days

    @analysis_age_days.setter
    def analysis_age_days(self, analysis_age_days):
        """Sets the analysis_age_days of this AnalysisArchiveTransitionRule.

        Matches if the analysis is strictly older than this number of days

        :param analysis_age_days: The analysis_age_days of this AnalysisArchiveTransitionRule.
        :type analysis_age_days: int
        """

        self._analysis_age_days = analysis_age_days

    @property
    def created_at(self):
        """Gets the created_at of this AnalysisArchiveTransitionRule.


        :return: The created_at of this AnalysisArchiveTransitionRule.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AnalysisArchiveTransitionRule.


        :param created_at: The created_at of this AnalysisArchiveTransitionRule.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def exclude(self):
        """Gets the exclude of this AnalysisArchiveTransitionRule.


        :return: The exclude of this AnalysisArchiveTransitionRule.
        :rtype: AnalysisArchiveTransitionRuleExclude
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this AnalysisArchiveTransitionRule.


        :param exclude: The exclude of this AnalysisArchiveTransitionRule.
        :type exclude: AnalysisArchiveTransitionRuleExclude
        """

        self._exclude = exclude

    @property
    def last_updated(self):
        """Gets the last_updated of this AnalysisArchiveTransitionRule.


        :return: The last_updated of this AnalysisArchiveTransitionRule.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this AnalysisArchiveTransitionRule.


        :param last_updated: The last_updated of this AnalysisArchiveTransitionRule.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def max_images_per_account(self):
        """Gets the max_images_per_account of this AnalysisArchiveTransitionRule.

        This is the maximum number of image analyses an account can have. Can only be set on system_global rules

        :return: The max_images_per_account of this AnalysisArchiveTransitionRule.
        :rtype: int
        """
        return self._max_images_per_account

    @max_images_per_account.setter
    def max_images_per_account(self, max_images_per_account):
        """Sets the max_images_per_account of this AnalysisArchiveTransitionRule.

        This is the maximum number of image analyses an account can have. Can only be set on system_global rules

        :param max_images_per_account: The max_images_per_account of this AnalysisArchiveTransitionRule.
        :type max_images_per_account: int
        """

        self._max_images_per_account = max_images_per_account

    @property
    def rule_id(self):
        """Gets the rule_id of this AnalysisArchiveTransitionRule.

        Unique identifier for archive rule

        :return: The rule_id of this AnalysisArchiveTransitionRule.
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this AnalysisArchiveTransitionRule.

        Unique identifier for archive rule

        :param rule_id: The rule_id of this AnalysisArchiveTransitionRule.
        :type rule_id: str
        """

        self._rule_id = rule_id

    @property
    def selector(self):
        """Gets the selector of this AnalysisArchiveTransitionRule.


        :return: The selector of this AnalysisArchiveTransitionRule.
        :rtype: ImageSelector
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this AnalysisArchiveTransitionRule.


        :param selector: The selector of this AnalysisArchiveTransitionRule.
        :type selector: ImageSelector
        """

        self._selector = selector

    @property
    def system_global(self):
        """Gets the system_global of this AnalysisArchiveTransitionRule.

        True if the rule applies to all accounts in the system. This is only available to admin users to update/modify, but all users with permission to list rules can see them

        :return: The system_global of this AnalysisArchiveTransitionRule.
        :rtype: bool
        """
        return self._system_global

    @system_global.setter
    def system_global(self, system_global):
        """Sets the system_global of this AnalysisArchiveTransitionRule.

        True if the rule applies to all accounts in the system. This is only available to admin users to update/modify, but all users with permission to list rules can see them

        :param system_global: The system_global of this AnalysisArchiveTransitionRule.
        :type system_global: bool
        """

        self._system_global = system_global

    @property
    def tag_versions_newer(self):
        """Gets the tag_versions_newer of this AnalysisArchiveTransitionRule.

        Number of images mapped to the tag that are newer

        :return: The tag_versions_newer of this AnalysisArchiveTransitionRule.
        :rtype: int
        """
        return self._tag_versions_newer

    @tag_versions_newer.setter
    def tag_versions_newer(self, tag_versions_newer):
        """Sets the tag_versions_newer of this AnalysisArchiveTransitionRule.

        Number of images mapped to the tag that are newer

        :param tag_versions_newer: The tag_versions_newer of this AnalysisArchiveTransitionRule.
        :type tag_versions_newer: int
        """

        self._tag_versions_newer = tag_versions_newer

    @property
    def transition(self):
        """Gets the transition of this AnalysisArchiveTransitionRule.

        The type of transition to make. If \"archive\", then archive an image from the working set and remove it from the working set. If \"delete\", then match against archived images and delete from the archive if match.

        :return: The transition of this AnalysisArchiveTransitionRule.
        :rtype: str
        """
        return self._transition

    @transition.setter
    def transition(self, transition):
        """Sets the transition of this AnalysisArchiveTransitionRule.

        The type of transition to make. If \"archive\", then archive an image from the working set and remove it from the working set. If \"delete\", then match against archived images and delete from the archive if match.

        :param transition: The transition of this AnalysisArchiveTransitionRule.
        :type transition: str
        """
        allowed_values = ["archive", "delete"]  # noqa: E501
        if transition not in allowed_values:
            raise ValueError(
                "Invalid value for `transition` ({0}), must be one of {1}"
                .format(transition, allowed_values)
            )

        self._transition = transition
