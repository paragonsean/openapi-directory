# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nvd_data_object import NvdDataObject
from openapi_server.models.package_reference import PackageReference
from openapi_server.models.vendor_data_object import VendorDataObject
from openapi_server.models.vulnerability_reference import VulnerabilityReference
from openapi_server import util


class StandaloneVulnerability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, affected_packages: List[PackageReference]=None, description: str=None, id: str=None, link: str=None, namespace: str=None, nvd_data: List[NvdDataObject]=None, references: List[VulnerabilityReference]=None, severity: str=None, vendor_data: List[VendorDataObject]=None):
        """StandaloneVulnerability - a model defined in OpenAPI

        :param affected_packages: The affected_packages of this StandaloneVulnerability.
        :param description: The description of this StandaloneVulnerability.
        :param id: The id of this StandaloneVulnerability.
        :param link: The link of this StandaloneVulnerability.
        :param namespace: The namespace of this StandaloneVulnerability.
        :param nvd_data: The nvd_data of this StandaloneVulnerability.
        :param references: The references of this StandaloneVulnerability.
        :param severity: The severity of this StandaloneVulnerability.
        :param vendor_data: The vendor_data of this StandaloneVulnerability.
        """
        self.openapi_types = {
            'affected_packages': List[PackageReference],
            'description': str,
            'id': str,
            'link': str,
            'namespace': str,
            'nvd_data': List[NvdDataObject],
            'references': List[VulnerabilityReference],
            'severity': str,
            'vendor_data': List[VendorDataObject]
        }

        self.attribute_map = {
            'affected_packages': 'affected_packages',
            'description': 'description',
            'id': 'id',
            'link': 'link',
            'namespace': 'namespace',
            'nvd_data': 'nvd_data',
            'references': 'references',
            'severity': 'severity',
            'vendor_data': 'vendor_data'
        }

        self._affected_packages = affected_packages
        self._description = description
        self._id = id
        self._link = link
        self._namespace = namespace
        self._nvd_data = nvd_data
        self._references = references
        self._severity = severity
        self._vendor_data = vendor_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StandaloneVulnerability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StandaloneVulnerability of this StandaloneVulnerability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affected_packages(self):
        """Gets the affected_packages of this StandaloneVulnerability.

        The array of packages (typically packages) that are vulnerable-to or provide fixes-for this vulnerability

        :return: The affected_packages of this StandaloneVulnerability.
        :rtype: List[PackageReference]
        """
        return self._affected_packages

    @affected_packages.setter
    def affected_packages(self, affected_packages):
        """Sets the affected_packages of this StandaloneVulnerability.

        The array of packages (typically packages) that are vulnerable-to or provide fixes-for this vulnerability

        :param affected_packages: The affected_packages of this StandaloneVulnerability.
        :type affected_packages: List[PackageReference]
        """

        self._affected_packages = affected_packages

    @property
    def description(self):
        """Gets the description of this StandaloneVulnerability.

        Description of the vulnerability if available

        :return: The description of this StandaloneVulnerability.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StandaloneVulnerability.

        Description of the vulnerability if available

        :param description: The description of this StandaloneVulnerability.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this StandaloneVulnerability.

        Vulnerability identifier. May be CVE-X, RHSA-X, etc. Not necessarily unique across namespaces

        :return: The id of this StandaloneVulnerability.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StandaloneVulnerability.

        Vulnerability identifier. May be CVE-X, RHSA-X, etc. Not necessarily unique across namespaces

        :param id: The id of this StandaloneVulnerability.
        :type id: str
        """

        self._id = id

    @property
    def link(self):
        """Gets the link of this StandaloneVulnerability.

        URL for the upstream CVE record in the reporting source (e.g. ubuntu security tracker)

        :return: The link of this StandaloneVulnerability.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this StandaloneVulnerability.

        URL for the upstream CVE record in the reporting source (e.g. ubuntu security tracker)

        :param link: The link of this StandaloneVulnerability.
        :type link: str
        """

        self._link = link

    @property
    def namespace(self):
        """Gets the namespace of this StandaloneVulnerability.

        The namespace for the vulnerability record to avoid conflicts for the same id in different distros or sources (e.g. deb vs ubuntu for same CVE)

        :return: The namespace of this StandaloneVulnerability.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this StandaloneVulnerability.

        The namespace for the vulnerability record to avoid conflicts for the same id in different distros or sources (e.g. deb vs ubuntu for same CVE)

        :param namespace: The namespace of this StandaloneVulnerability.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def nvd_data(self):
        """Gets the nvd_data of this StandaloneVulnerability.

        List of Nvd Data objects

        :return: The nvd_data of this StandaloneVulnerability.
        :rtype: List[NvdDataObject]
        """
        return self._nvd_data

    @nvd_data.setter
    def nvd_data(self, nvd_data):
        """Sets the nvd_data of this StandaloneVulnerability.

        List of Nvd Data objects

        :param nvd_data: The nvd_data of this StandaloneVulnerability.
        :type nvd_data: List[NvdDataObject]
        """

        self._nvd_data = nvd_data

    @property
    def references(self):
        """Gets the references of this StandaloneVulnerability.

        List of references including

        :return: The references of this StandaloneVulnerability.
        :rtype: List[VulnerabilityReference]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this StandaloneVulnerability.

        List of references including

        :param references: The references of this StandaloneVulnerability.
        :type references: List[VulnerabilityReference]
        """

        self._references = references

    @property
    def severity(self):
        """Gets the severity of this StandaloneVulnerability.

        Severity label specific to the namepsace

        :return: The severity of this StandaloneVulnerability.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this StandaloneVulnerability.

        Severity label specific to the namepsace

        :param severity: The severity of this StandaloneVulnerability.
        :type severity: str
        """
        allowed_values = ["Unknown", "Negligible", "Low", "Medium", "High", "Critical"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def vendor_data(self):
        """Gets the vendor_data of this StandaloneVulnerability.

        List of Vendor Data objects

        :return: The vendor_data of this StandaloneVulnerability.
        :rtype: List[VendorDataObject]
        """
        return self._vendor_data

    @vendor_data.setter
    def vendor_data(self, vendor_data):
        """Sets the vendor_data of this StandaloneVulnerability.

        List of Vendor Data objects

        :param vendor_data: The vendor_data of this StandaloneVulnerability.
        :type vendor_data: List[VendorDataObject]
        """

        self._vendor_data = vendor_data
