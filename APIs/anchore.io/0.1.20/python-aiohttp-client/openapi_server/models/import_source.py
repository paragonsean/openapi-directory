# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target: Dict[str, object]=None, type: str=None):
        """ImportSource - a model defined in OpenAPI

        :param target: The target of this ImportSource.
        :param type: The type of this ImportSource.
        """
        self.openapi_types = {
            'target': Dict[str, object],
            'type': str
        }

        self.attribute_map = {
            'target': 'target',
            'type': 'type'
        }

        self._target = target
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportSource of this ImportSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target(self):
        """Gets the target of this ImportSource.


        :return: The target of this ImportSource.
        :rtype: Dict[str, object]
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this ImportSource.


        :param target: The target of this ImportSource.
        :type target: Dict[str, object]
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")

        self._target = target

    @property
    def type(self):
        """Gets the type of this ImportSource.


        :return: The type of this ImportSource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ImportSource.


        :param type: The type of this ImportSource.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
