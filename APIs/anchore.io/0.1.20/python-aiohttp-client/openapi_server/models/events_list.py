# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_response import EventResponse
from openapi_server import util


class EventsList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, item_count: int=None, next_page: bool=None, page: int=None, results: List[EventResponse]=None):
        """EventsList - a model defined in OpenAPI

        :param item_count: The item_count of this EventsList.
        :param next_page: The next_page of this EventsList.
        :param page: The page of this EventsList.
        :param results: The results of this EventsList.
        """
        self.openapi_types = {
            'item_count': int,
            'next_page': bool,
            'page': int,
            'results': List[EventResponse]
        }

        self.attribute_map = {
            'item_count': 'item_count',
            'next_page': 'next_page',
            'page': 'page',
            'results': 'results'
        }

        self._item_count = item_count
        self._next_page = next_page
        self._page = page
        self._results = results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventsList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventsList of this EventsList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def item_count(self):
        """Gets the item_count of this EventsList.

        Number of events in this page

        :return: The item_count of this EventsList.
        :rtype: int
        """
        return self._item_count

    @item_count.setter
    def item_count(self, item_count):
        """Sets the item_count of this EventsList.

        Number of events in this page

        :param item_count: The item_count of this EventsList.
        :type item_count: int
        """

        self._item_count = item_count

    @property
    def next_page(self):
        """Gets the next_page of this EventsList.

        Boolean flag, True indicates there are more events and False otherwise

        :return: The next_page of this EventsList.
        :rtype: bool
        """
        return self._next_page

    @next_page.setter
    def next_page(self, next_page):
        """Sets the next_page of this EventsList.

        Boolean flag, True indicates there are more events and False otherwise

        :param next_page: The next_page of this EventsList.
        :type next_page: bool
        """

        self._next_page = next_page

    @property
    def page(self):
        """Gets the page of this EventsList.

        Page number of this result set

        :return: The page of this EventsList.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this EventsList.

        Page number of this result set

        :param page: The page of this EventsList.
        :type page: int
        """

        self._page = page

    @property
    def results(self):
        """Gets the results of this EventsList.

        List of events

        :return: The results of this EventsList.
        :rtype: List[EventResponse]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this EventsList.

        List of events

        :param results: The results of this EventsList.
        :type results: List[EventResponse]
        """

        self._results = results
