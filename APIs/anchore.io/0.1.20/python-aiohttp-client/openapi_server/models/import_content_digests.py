# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportContentDigests(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dockerfile: str=None, image_config: str=None, manifest: str=None, packages: str=None, parent_manifest: str=None):
        """ImportContentDigests - a model defined in OpenAPI

        :param dockerfile: The dockerfile of this ImportContentDigests.
        :param image_config: The image_config of this ImportContentDigests.
        :param manifest: The manifest of this ImportContentDigests.
        :param packages: The packages of this ImportContentDigests.
        :param parent_manifest: The parent_manifest of this ImportContentDigests.
        """
        self.openapi_types = {
            'dockerfile': str,
            'image_config': str,
            'manifest': str,
            'packages': str,
            'parent_manifest': str
        }

        self.attribute_map = {
            'dockerfile': 'dockerfile',
            'image_config': 'image_config',
            'manifest': 'manifest',
            'packages': 'packages',
            'parent_manifest': 'parent_manifest'
        }

        self._dockerfile = dockerfile
        self._image_config = image_config
        self._manifest = manifest
        self._packages = packages
        self._parent_manifest = parent_manifest

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportContentDigests':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportContentDigests of this ImportContentDigests.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dockerfile(self):
        """Gets the dockerfile of this ImportContentDigests.

        Digest for reference content for dockerfile

        :return: The dockerfile of this ImportContentDigests.
        :rtype: str
        """
        return self._dockerfile

    @dockerfile.setter
    def dockerfile(self, dockerfile):
        """Sets the dockerfile of this ImportContentDigests.

        Digest for reference content for dockerfile

        :param dockerfile: The dockerfile of this ImportContentDigests.
        :type dockerfile: str
        """

        self._dockerfile = dockerfile

    @property
    def image_config(self):
        """Gets the image_config of this ImportContentDigests.

        Digest for reference content for image config

        :return: The image_config of this ImportContentDigests.
        :rtype: str
        """
        return self._image_config

    @image_config.setter
    def image_config(self, image_config):
        """Sets the image_config of this ImportContentDigests.

        Digest for reference content for image config

        :param image_config: The image_config of this ImportContentDigests.
        :type image_config: str
        """
        if image_config is None:
            raise ValueError("Invalid value for `image_config`, must not be `None`")

        self._image_config = image_config

    @property
    def manifest(self):
        """Gets the manifest of this ImportContentDigests.

        Digest to reference content for the image manifest

        :return: The manifest of this ImportContentDigests.
        :rtype: str
        """
        return self._manifest

    @manifest.setter
    def manifest(self, manifest):
        """Sets the manifest of this ImportContentDigests.

        Digest to reference content for the image manifest

        :param manifest: The manifest of this ImportContentDigests.
        :type manifest: str
        """
        if manifest is None:
            raise ValueError("Invalid value for `manifest`, must not be `None`")

        self._manifest = manifest

    @property
    def packages(self):
        """Gets the packages of this ImportContentDigests.

        Digest to use for the packages content

        :return: The packages of this ImportContentDigests.
        :rtype: str
        """
        return self._packages

    @packages.setter
    def packages(self, packages):
        """Sets the packages of this ImportContentDigests.

        Digest to use for the packages content

        :param packages: The packages of this ImportContentDigests.
        :type packages: str
        """
        if packages is None:
            raise ValueError("Invalid value for `packages`, must not be `None`")

        self._packages = packages

    @property
    def parent_manifest(self):
        """Gets the parent_manifest of this ImportContentDigests.

        Digest for reference content for parent manifest

        :return: The parent_manifest of this ImportContentDigests.
        :rtype: str
        """
        return self._parent_manifest

    @parent_manifest.setter
    def parent_manifest(self, parent_manifest):
        """Sets the parent_manifest of this ImportContentDigests.

        Digest for reference content for parent manifest

        :param parent_manifest: The parent_manifest of this ImportContentDigests.
        :type parent_manifest: str
        """

        self._parent_manifest = parent_manifest
