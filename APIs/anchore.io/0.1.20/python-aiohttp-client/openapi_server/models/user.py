# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, last_updated: datetime=None, source: str=None, type: str=None, username: str=None):
        """User - a model defined in OpenAPI

        :param created_at: The created_at of this User.
        :param last_updated: The last_updated of this User.
        :param source: The source of this User.
        :param type: The type of this User.
        :param username: The username of this User.
        """
        self.openapi_types = {
            'created_at': datetime,
            'last_updated': datetime,
            'source': str,
            'type': str,
            'username': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'last_updated': 'last_updated',
            'source': 'source',
            'type': 'type',
            'username': 'username'
        }

        self._created_at = created_at
        self._last_updated = last_updated
        self._source = source
        self._type = type
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this User.

        The timestampt the user record was created

        :return: The created_at of this User.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this User.

        The timestampt the user record was created

        :param created_at: The created_at of this User.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def last_updated(self):
        """Gets the last_updated of this User.

        The timestamp of the last update to this record

        :return: The last_updated of this User.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this User.

        The timestamp of the last update to this record

        :param last_updated: The last_updated of this User.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def source(self):
        """Gets the source of this User.

        If the user is external, this is the source that the user was initialized from. All other user types have this set to null

        :return: The source of this User.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this User.

        If the user is external, this is the source that the user was initialized from. All other user types have this set to null

        :param source: The source of this User.
        :type source: str
        """

        self._source = source

    @property
    def type(self):
        """Gets the type of this User.

        The user's type

        :return: The type of this User.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this User.

        The user's type

        :param type: The type of this User.
        :type type: str
        """
        allowed_values = ["native", "internal", "external"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def username(self):
        """Gets the username of this User.

        The username to authenticate with

        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.

        The username to authenticate with

        :param username: The username of this User.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username
