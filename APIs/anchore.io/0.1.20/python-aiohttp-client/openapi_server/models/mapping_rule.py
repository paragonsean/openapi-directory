# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_ref import ImageRef
from openapi_server import util


class MappingRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, image: ImageRef=None, name: str=None, policy_id: str=None, policy_ids: List[str]=None, registry: str=None, repository: str=None, whitelist_ids: List[str]=None):
        """MappingRule - a model defined in OpenAPI

        :param id: The id of this MappingRule.
        :param image: The image of this MappingRule.
        :param name: The name of this MappingRule.
        :param policy_id: The policy_id of this MappingRule.
        :param policy_ids: The policy_ids of this MappingRule.
        :param registry: The registry of this MappingRule.
        :param repository: The repository of this MappingRule.
        :param whitelist_ids: The whitelist_ids of this MappingRule.
        """
        self.openapi_types = {
            'id': str,
            'image': ImageRef,
            'name': str,
            'policy_id': str,
            'policy_ids': List[str],
            'registry': str,
            'repository': str,
            'whitelist_ids': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'image': 'image',
            'name': 'name',
            'policy_id': 'policy_id',
            'policy_ids': 'policy_ids',
            'registry': 'registry',
            'repository': 'repository',
            'whitelist_ids': 'whitelist_ids'
        }

        self._id = id
        self._image = image
        self._name = name
        self._policy_id = policy_id
        self._policy_ids = policy_ids
        self._registry = registry
        self._repository = repository
        self._whitelist_ids = whitelist_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MappingRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MappingRule of this MappingRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this MappingRule.


        :return: The id of this MappingRule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MappingRule.


        :param id: The id of this MappingRule.
        :type id: str
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this MappingRule.


        :return: The image of this MappingRule.
        :rtype: ImageRef
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this MappingRule.


        :param image: The image of this MappingRule.
        :type image: ImageRef
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")

        self._image = image

    @property
    def name(self):
        """Gets the name of this MappingRule.


        :return: The name of this MappingRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MappingRule.


        :param name: The name of this MappingRule.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def policy_id(self):
        """Gets the policy_id of this MappingRule.

        Optional single policy to evalute, if set will override any value in policy_ids, for backwards compatibility. Generally, policy_ids should be used even with a array of length 1.

        :return: The policy_id of this MappingRule.
        :rtype: str
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this MappingRule.

        Optional single policy to evalute, if set will override any value in policy_ids, for backwards compatibility. Generally, policy_ids should be used even with a array of length 1.

        :param policy_id: The policy_id of this MappingRule.
        :type policy_id: str
        """

        self._policy_id = policy_id

    @property
    def policy_ids(self):
        """Gets the policy_ids of this MappingRule.

        List of policyIds to evaluate in order, to completion

        :return: The policy_ids of this MappingRule.
        :rtype: List[str]
        """
        return self._policy_ids

    @policy_ids.setter
    def policy_ids(self, policy_ids):
        """Sets the policy_ids of this MappingRule.

        List of policyIds to evaluate in order, to completion

        :param policy_ids: The policy_ids of this MappingRule.
        :type policy_ids: List[str]
        """

        self._policy_ids = policy_ids

    @property
    def registry(self):
        """Gets the registry of this MappingRule.


        :return: The registry of this MappingRule.
        :rtype: str
        """
        return self._registry

    @registry.setter
    def registry(self, registry):
        """Sets the registry of this MappingRule.


        :param registry: The registry of this MappingRule.
        :type registry: str
        """
        if registry is None:
            raise ValueError("Invalid value for `registry`, must not be `None`")

        self._registry = registry

    @property
    def repository(self):
        """Gets the repository of this MappingRule.


        :return: The repository of this MappingRule.
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this MappingRule.


        :param repository: The repository of this MappingRule.
        :type repository: str
        """
        if repository is None:
            raise ValueError("Invalid value for `repository`, must not be `None`")

        self._repository = repository

    @property
    def whitelist_ids(self):
        """Gets the whitelist_ids of this MappingRule.


        :return: The whitelist_ids of this MappingRule.
        :rtype: List[str]
        """
        return self._whitelist_ids

    @whitelist_ids.setter
    def whitelist_ids(self, whitelist_ids):
        """Sets the whitelist_ids of this MappingRule.


        :param whitelist_ids: The whitelist_ids of this MappingRule.
        :type whitelist_ids: List[str]
        """

        self._whitelist_ids = whitelist_ids
