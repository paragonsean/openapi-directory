# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, subscription_value: str=None):
        """SubscriptionUpdate - a model defined in OpenAPI

        :param active: The active of this SubscriptionUpdate.
        :param subscription_value: The subscription_value of this SubscriptionUpdate.
        """
        self.openapi_types = {
            'active': bool,
            'subscription_value': str
        }

        self.attribute_map = {
            'active': 'active',
            'subscription_value': 'subscription_value'
        }

        self._active = active
        self._subscription_value = subscription_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionUpdate of this SubscriptionUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this SubscriptionUpdate.

        Toggle the subscription processing on or off

        :return: The active of this SubscriptionUpdate.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this SubscriptionUpdate.

        Toggle the subscription processing on or off

        :param active: The active of this SubscriptionUpdate.
        :type active: bool
        """

        self._active = active

    @property
    def subscription_value(self):
        """Gets the subscription_value of this SubscriptionUpdate.

        The new subscription value, e.g. the new tag to be subscribed to

        :return: The subscription_value of this SubscriptionUpdate.
        :rtype: str
        """
        return self._subscription_value

    @subscription_value.setter
    def subscription_value(self, subscription_value):
        """Sets the subscription_value of this SubscriptionUpdate.

        The new subscription value, e.g. the new tag to be subscribed to

        :param subscription_value: The subscription_value of this SubscriptionUpdate.
        :type subscription_value: str
        """

        self._subscription_value = subscription_value
