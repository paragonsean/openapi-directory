# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegexContentMatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lines: List[int]=None, name: str=None, regex: str=None):
        """RegexContentMatch - a model defined in OpenAPI

        :param lines: The lines of this RegexContentMatch.
        :param name: The name of this RegexContentMatch.
        :param regex: The regex of this RegexContentMatch.
        """
        self.openapi_types = {
            'lines': List[int],
            'name': str,
            'regex': str
        }

        self.attribute_map = {
            'lines': 'lines',
            'name': 'name',
            'regex': 'regex'
        }

        self._lines = lines
        self._name = name
        self._regex = regex

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegexContentMatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegexContentMatch of this RegexContentMatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lines(self):
        """Gets the lines of this RegexContentMatch.

        A list of line numbers in the file that matched the regex

        :return: The lines of this RegexContentMatch.
        :rtype: List[int]
        """
        return self._lines

    @lines.setter
    def lines(self, lines):
        """Sets the lines of this RegexContentMatch.

        A list of line numbers in the file that matched the regex

        :param lines: The lines of this RegexContentMatch.
        :type lines: List[int]
        """

        self._lines = lines

    @property
    def name(self):
        """Gets the name of this RegexContentMatch.

        The name associated with the regular expression

        :return: The name of this RegexContentMatch.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RegexContentMatch.

        The name associated with the regular expression

        :param name: The name of this RegexContentMatch.
        :type name: str
        """

        self._name = name

    @property
    def regex(self):
        """Gets the regex of this RegexContentMatch.

        The regular expression used for the match

        :return: The regex of this RegexContentMatch.
        :rtype: str
        """
        return self._regex

    @regex.setter
    def regex(self, regex):
        """Sets the regex of this RegexContentMatch.

        The regular expression used for the match

        :param regex: The regex of this RegexContentMatch.
        :type regex: str
        """

        self._regex = regex
