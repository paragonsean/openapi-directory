# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, subscription_id: str=None, subscription_key: str=None, subscription_type: str=None, subscription_value: str=None, user_id: str=None):
        """Subscription - a model defined in OpenAPI

        :param active: The active of this Subscription.
        :param subscription_id: The subscription_id of this Subscription.
        :param subscription_key: The subscription_key of this Subscription.
        :param subscription_type: The subscription_type of this Subscription.
        :param subscription_value: The subscription_value of this Subscription.
        :param user_id: The user_id of this Subscription.
        """
        self.openapi_types = {
            'active': bool,
            'subscription_id': str,
            'subscription_key': str,
            'subscription_type': str,
            'subscription_value': str,
            'user_id': str
        }

        self.attribute_map = {
            'active': 'active',
            'subscription_id': 'subscription_id',
            'subscription_key': 'subscription_key',
            'subscription_type': 'subscription_type',
            'subscription_value': 'subscription_value',
            'user_id': 'userId'
        }

        self._active = active
        self._subscription_id = subscription_id
        self._subscription_key = subscription_key
        self._subscription_type = subscription_type
        self._subscription_value = subscription_value
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscription of this Subscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this Subscription.

        Is the subscription currently active

        :return: The active of this Subscription.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Subscription.

        Is the subscription currently active

        :param active: The active of this Subscription.
        :type active: bool
        """

        self._active = active

    @property
    def subscription_id(self):
        """Gets the subscription_id of this Subscription.

        the unique id for this subscription record

        :return: The subscription_id of this Subscription.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this Subscription.

        the unique id for this subscription record

        :param subscription_id: The subscription_id of this Subscription.
        :type subscription_id: str
        """

        self._subscription_id = subscription_id

    @property
    def subscription_key(self):
        """Gets the subscription_key of this Subscription.

        The key value that the subscription references. E.g. a tag value or a repo name.

        :return: The subscription_key of this Subscription.
        :rtype: str
        """
        return self._subscription_key

    @subscription_key.setter
    def subscription_key(self, subscription_key):
        """Sets the subscription_key of this Subscription.

        The key value that the subscription references. E.g. a tag value or a repo name.

        :param subscription_key: The subscription_key of this Subscription.
        :type subscription_key: str
        """

        self._subscription_key = subscription_key

    @property
    def subscription_type(self):
        """Gets the subscription_type of this Subscription.

        The type of the subscription

        :return: The subscription_type of this Subscription.
        :rtype: str
        """
        return self._subscription_type

    @subscription_type.setter
    def subscription_type(self, subscription_type):
        """Sets the subscription_type of this Subscription.

        The type of the subscription

        :param subscription_type: The subscription_type of this Subscription.
        :type subscription_type: str
        """

        self._subscription_type = subscription_type

    @property
    def subscription_value(self):
        """Gets the subscription_value of this Subscription.

        The value of the subscription target

        :return: The subscription_value of this Subscription.
        :rtype: str
        """
        return self._subscription_value

    @subscription_value.setter
    def subscription_value(self, subscription_value):
        """Sets the subscription_value of this Subscription.

        The value of the subscription target

        :param subscription_value: The subscription_value of this Subscription.
        :type subscription_value: str
        """

        self._subscription_value = subscription_value

    @property
    def user_id(self):
        """Gets the user_id of this Subscription.

        The userId of the subscribed user

        :return: The user_id of this Subscription.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Subscription.

        The userId of the subscribed user

        :param user_id: The user_id of this Subscription.
        :type user_id: str
        """

        self._user_id = user_id
