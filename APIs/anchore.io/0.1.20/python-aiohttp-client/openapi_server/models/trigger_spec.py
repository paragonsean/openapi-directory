# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.trigger_param_spec import TriggerParamSpec
from openapi_server import util


class TriggerSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, parameters: List[TriggerParamSpec]=None, state: str=None, superceded_by: str=None):
        """TriggerSpec - a model defined in OpenAPI

        :param description: The description of this TriggerSpec.
        :param name: The name of this TriggerSpec.
        :param parameters: The parameters of this TriggerSpec.
        :param state: The state of this TriggerSpec.
        :param superceded_by: The superceded_by of this TriggerSpec.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'parameters': List[TriggerParamSpec],
            'state': str,
            'superceded_by': str
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            'parameters': 'parameters',
            'state': 'state',
            'superceded_by': 'superceded_by'
        }

        self._description = description
        self._name = name
        self._parameters = parameters
        self._state = state
        self._superceded_by = superceded_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TriggerSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TriggerSpec of this TriggerSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this TriggerSpec.

        Trigger description for what it tests and when it will fire during evaluation

        :return: The description of this TriggerSpec.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TriggerSpec.

        Trigger description for what it tests and when it will fire during evaluation

        :param description: The description of this TriggerSpec.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this TriggerSpec.

        Name of the trigger as it would appear in a policy document

        :return: The name of this TriggerSpec.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TriggerSpec.

        Name of the trigger as it would appear in a policy document

        :param name: The name of this TriggerSpec.
        :type name: str
        """

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this TriggerSpec.

        The list of parameters that are valid for this trigger

        :return: The parameters of this TriggerSpec.
        :rtype: List[TriggerParamSpec]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this TriggerSpec.

        The list of parameters that are valid for this trigger

        :param parameters: The parameters of this TriggerSpec.
        :type parameters: List[TriggerParamSpec]
        """

        self._parameters = parameters

    @property
    def state(self):
        """Gets the state of this TriggerSpec.

        State of the trigger

        :return: The state of this TriggerSpec.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TriggerSpec.

        State of the trigger

        :param state: The state of this TriggerSpec.
        :type state: str
        """
        allowed_values = ["active", "deprecated", "eol"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def superceded_by(self):
        """Gets the superceded_by of this TriggerSpec.

        The name of another trigger that supercedes this on functionally if this is deprecated

        :return: The superceded_by of this TriggerSpec.
        :rtype: str
        """
        return self._superceded_by

    @superceded_by.setter
    def superceded_by(self, superceded_by):
        """Sets the superceded_by of this TriggerSpec.

        The name of another trigger that supercedes this on functionally if this is deprecated

        :param superceded_by: The superceded_by of this TriggerSpec.
        :type superceded_by: str
        """

        self._superceded_by = superceded_by
