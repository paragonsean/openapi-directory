# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImageDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, dockerfile: str=None, fulldigest: str=None, fulltag: str=None, image_digest: str=None, image_id: str=None, last_updated: datetime=None, registry: str=None, repo: str=None, user_id: str=None):
        """ImageDetail - a model defined in OpenAPI

        :param created_at: The created_at of this ImageDetail.
        :param dockerfile: The dockerfile of this ImageDetail.
        :param fulldigest: The fulldigest of this ImageDetail.
        :param fulltag: The fulltag of this ImageDetail.
        :param image_digest: The image_digest of this ImageDetail.
        :param image_id: The image_id of this ImageDetail.
        :param last_updated: The last_updated of this ImageDetail.
        :param registry: The registry of this ImageDetail.
        :param repo: The repo of this ImageDetail.
        :param user_id: The user_id of this ImageDetail.
        """
        self.openapi_types = {
            'created_at': datetime,
            'dockerfile': str,
            'fulldigest': str,
            'fulltag': str,
            'image_digest': str,
            'image_id': str,
            'last_updated': datetime,
            'registry': str,
            'repo': str,
            'user_id': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'dockerfile': 'dockerfile',
            'fulldigest': 'fulldigest',
            'fulltag': 'fulltag',
            'image_digest': 'imageDigest',
            'image_id': 'imageId',
            'last_updated': 'last_updated',
            'registry': 'registry',
            'repo': 'repo',
            'user_id': 'userId'
        }

        self._created_at = created_at
        self._dockerfile = dockerfile
        self._fulldigest = fulldigest
        self._fulltag = fulltag
        self._image_digest = image_digest
        self._image_id = image_id
        self._last_updated = last_updated
        self._registry = registry
        self._repo = repo
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageDetail of this ImageDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this ImageDetail.


        :return: The created_at of this ImageDetail.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ImageDetail.


        :param created_at: The created_at of this ImageDetail.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def dockerfile(self):
        """Gets the dockerfile of this ImageDetail.


        :return: The dockerfile of this ImageDetail.
        :rtype: str
        """
        return self._dockerfile

    @dockerfile.setter
    def dockerfile(self, dockerfile):
        """Sets the dockerfile of this ImageDetail.


        :param dockerfile: The dockerfile of this ImageDetail.
        :type dockerfile: str
        """

        self._dockerfile = dockerfile

    @property
    def fulldigest(self):
        """Gets the fulldigest of this ImageDetail.

        Full docker-pullable digest string including the registry url and repository necessary get the image

        :return: The fulldigest of this ImageDetail.
        :rtype: str
        """
        return self._fulldigest

    @fulldigest.setter
    def fulldigest(self, fulldigest):
        """Sets the fulldigest of this ImageDetail.

        Full docker-pullable digest string including the registry url and repository necessary get the image

        :param fulldigest: The fulldigest of this ImageDetail.
        :type fulldigest: str
        """

        self._fulldigest = fulldigest

    @property
    def fulltag(self):
        """Gets the fulltag of this ImageDetail.

        Full docker-pullable tag string referencing the image

        :return: The fulltag of this ImageDetail.
        :rtype: str
        """
        return self._fulltag

    @fulltag.setter
    def fulltag(self, fulltag):
        """Sets the fulltag of this ImageDetail.

        Full docker-pullable tag string referencing the image

        :param fulltag: The fulltag of this ImageDetail.
        :type fulltag: str
        """

        self._fulltag = fulltag

    @property
    def image_digest(self):
        """Gets the image_digest of this ImageDetail.

        The parent Anchore Image record to which this detail maps

        :return: The image_digest of this ImageDetail.
        :rtype: str
        """
        return self._image_digest

    @image_digest.setter
    def image_digest(self, image_digest):
        """Sets the image_digest of this ImageDetail.

        The parent Anchore Image record to which this detail maps

        :param image_digest: The image_digest of this ImageDetail.
        :type image_digest: str
        """

        self._image_digest = image_digest

    @property
    def image_id(self):
        """Gets the image_id of this ImageDetail.


        :return: The image_id of this ImageDetail.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this ImageDetail.


        :param image_id: The image_id of this ImageDetail.
        :type image_id: str
        """

        self._image_id = image_id

    @property
    def last_updated(self):
        """Gets the last_updated of this ImageDetail.


        :return: The last_updated of this ImageDetail.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ImageDetail.


        :param last_updated: The last_updated of this ImageDetail.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def registry(self):
        """Gets the registry of this ImageDetail.


        :return: The registry of this ImageDetail.
        :rtype: str
        """
        return self._registry

    @registry.setter
    def registry(self, registry):
        """Sets the registry of this ImageDetail.


        :param registry: The registry of this ImageDetail.
        :type registry: str
        """

        self._registry = registry

    @property
    def repo(self):
        """Gets the repo of this ImageDetail.


        :return: The repo of this ImageDetail.
        :rtype: str
        """
        return self._repo

    @repo.setter
    def repo(self, repo):
        """Sets the repo of this ImageDetail.


        :param repo: The repo of this ImageDetail.
        :type repo: str
        """

        self._repo = repo

    @property
    def user_id(self):
        """Gets the user_id of this ImageDetail.


        :return: The user_id of this ImageDetail.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ImageDetail.


        :param user_id: The user_id of this ImageDetail.
        :type user_id: str
        """

        self._user_id = user_id
