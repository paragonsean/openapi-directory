# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group_sync_result import GroupSyncResult
from openapi_server import util


class FeedSyncResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feed: str=None, groups: List[GroupSyncResult]=None, status: str=None, total_time_seconds: float=None):
        """FeedSyncResult - a model defined in OpenAPI

        :param feed: The feed of this FeedSyncResult.
        :param groups: The groups of this FeedSyncResult.
        :param status: The status of this FeedSyncResult.
        :param total_time_seconds: The total_time_seconds of this FeedSyncResult.
        """
        self.openapi_types = {
            'feed': str,
            'groups': List[GroupSyncResult],
            'status': str,
            'total_time_seconds': float
        }

        self.attribute_map = {
            'feed': 'feed',
            'groups': 'groups',
            'status': 'status',
            'total_time_seconds': 'total_time_seconds'
        }

        self._feed = feed
        self._groups = groups
        self._status = status
        self._total_time_seconds = total_time_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeedSyncResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FeedSyncResult of this FeedSyncResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feed(self):
        """Gets the feed of this FeedSyncResult.

        The name of the feed synced

        :return: The feed of this FeedSyncResult.
        :rtype: str
        """
        return self._feed

    @feed.setter
    def feed(self, feed):
        """Sets the feed of this FeedSyncResult.

        The name of the feed synced

        :param feed: The feed of this FeedSyncResult.
        :type feed: str
        """

        self._feed = feed

    @property
    def groups(self):
        """Gets the groups of this FeedSyncResult.

        Array of group sync results

        :return: The groups of this FeedSyncResult.
        :rtype: List[GroupSyncResult]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this FeedSyncResult.

        Array of group sync results

        :param groups: The groups of this FeedSyncResult.
        :type groups: List[GroupSyncResult]
        """

        self._groups = groups

    @property
    def status(self):
        """Gets the status of this FeedSyncResult.

        The result of the sync operations, either co

        :return: The status of this FeedSyncResult.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FeedSyncResult.

        The result of the sync operations, either co

        :param status: The status of this FeedSyncResult.
        :type status: str
        """
        allowed_values = ["success", "failure"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def total_time_seconds(self):
        """Gets the total_time_seconds of this FeedSyncResult.

        The duratin, in seconds, of the sync of the feed, the sum of all the group syncs

        :return: The total_time_seconds of this FeedSyncResult.
        :rtype: float
        """
        return self._total_time_seconds

    @total_time_seconds.setter
    def total_time_seconds(self, total_time_seconds):
        """Sets the total_time_seconds of this FeedSyncResult.

        The duratin, in seconds, of the sync of the feed, the sum of all the group syncs

        :param total_time_seconds: The total_time_seconds of this FeedSyncResult.
        :type total_time_seconds: float
        """

        self._total_time_seconds = total_time_seconds
