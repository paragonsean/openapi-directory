# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.whitelist_item import WhitelistItem
from openapi_server import util


class Whitelist(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment: str=None, id: str=None, items: List[WhitelistItem]=None, name: str=None, version: str=None):
        """Whitelist - a model defined in OpenAPI

        :param comment: The comment of this Whitelist.
        :param id: The id of this Whitelist.
        :param items: The items of this Whitelist.
        :param name: The name of this Whitelist.
        :param version: The version of this Whitelist.
        """
        self.openapi_types = {
            'comment': str,
            'id': str,
            'items': List[WhitelistItem],
            'name': str,
            'version': str
        }

        self.attribute_map = {
            'comment': 'comment',
            'id': 'id',
            'items': 'items',
            'name': 'name',
            'version': 'version'
        }

        self._comment = comment
        self._id = id
        self._items = items
        self._name = name
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Whitelist':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Whitelist of this Whitelist.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self):
        """Gets the comment of this Whitelist.


        :return: The comment of this Whitelist.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Whitelist.


        :param comment: The comment of this Whitelist.
        :type comment: str
        """

        self._comment = comment

    @property
    def id(self):
        """Gets the id of this Whitelist.


        :return: The id of this Whitelist.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Whitelist.


        :param id: The id of this Whitelist.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def items(self):
        """Gets the items of this Whitelist.


        :return: The items of this Whitelist.
        :rtype: List[WhitelistItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Whitelist.


        :param items: The items of this Whitelist.
        :type items: List[WhitelistItem]
        """

        self._items = items

    @property
    def name(self):
        """Gets the name of this Whitelist.


        :return: The name of this Whitelist.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Whitelist.


        :param name: The name of this Whitelist.
        :type name: str
        """

        self._name = name

    @property
    def version(self):
        """Gets the version of this Whitelist.


        :return: The version of this Whitelist.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Whitelist.


        :param version: The version of this Whitelist.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
