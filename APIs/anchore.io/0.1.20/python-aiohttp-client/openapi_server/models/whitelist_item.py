# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class WhitelistItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expires_on: datetime=None, gate: str=None, id: str=None, trigger_id: str=None):
        """WhitelistItem - a model defined in OpenAPI

        :param expires_on: The expires_on of this WhitelistItem.
        :param gate: The gate of this WhitelistItem.
        :param id: The id of this WhitelistItem.
        :param trigger_id: The trigger_id of this WhitelistItem.
        """
        self.openapi_types = {
            'expires_on': datetime,
            'gate': str,
            'id': str,
            'trigger_id': str
        }

        self.attribute_map = {
            'expires_on': 'expires_on',
            'gate': 'gate',
            'id': 'id',
            'trigger_id': 'trigger_id'
        }

        self._expires_on = expires_on
        self._gate = gate
        self._id = id
        self._trigger_id = trigger_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WhitelistItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WhitelistItem of this WhitelistItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expires_on(self):
        """Gets the expires_on of this WhitelistItem.


        :return: The expires_on of this WhitelistItem.
        :rtype: datetime
        """
        return self._expires_on

    @expires_on.setter
    def expires_on(self, expires_on):
        """Sets the expires_on of this WhitelistItem.


        :param expires_on: The expires_on of this WhitelistItem.
        :type expires_on: datetime
        """
        if expires_on is not None and not re.search(r'^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:\.\d+)?(?:\:\d+)?[A-Z]?$', expires_on):
            raise ValueError("Invalid value for `expires_on`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:\.\d+)?(?:\:\d+)?[A-Z]?$/`")

        self._expires_on = expires_on

    @property
    def gate(self):
        """Gets the gate of this WhitelistItem.


        :return: The gate of this WhitelistItem.
        :rtype: str
        """
        return self._gate

    @gate.setter
    def gate(self, gate):
        """Sets the gate of this WhitelistItem.


        :param gate: The gate of this WhitelistItem.
        :type gate: str
        """
        if gate is None:
            raise ValueError("Invalid value for `gate`, must not be `None`")

        self._gate = gate

    @property
    def id(self):
        """Gets the id of this WhitelistItem.


        :return: The id of this WhitelistItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WhitelistItem.


        :param id: The id of this WhitelistItem.
        :type id: str
        """

        self._id = id

    @property
    def trigger_id(self):
        """Gets the trigger_id of this WhitelistItem.


        :return: The trigger_id of this WhitelistItem.
        :rtype: str
        """
        return self._trigger_id

    @trigger_id.setter
    def trigger_id(self, trigger_id):
        """Sets the trigger_id of this WhitelistItem.


        :param trigger_id: The trigger_id of this WhitelistItem.
        :type trigger_id: str
        """
        if trigger_id is None:
            raise ValueError("Invalid value for `trigger_id`, must not be `None`")

        self._trigger_id = trigger_id
