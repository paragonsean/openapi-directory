# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.import_package_location import ImportPackageLocation
from openapi_server import util


class ImportPackage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cpes: List[str]=None, found_by: str=None, id: str=None, language: str=None, licenses: List[str]=None, locations: List[ImportPackageLocation]=None, metadata: object=None, metadata_type: str=None, name: str=None, purl: str=None, type: str=None, version: str=None):
        """ImportPackage - a model defined in OpenAPI

        :param cpes: The cpes of this ImportPackage.
        :param found_by: The found_by of this ImportPackage.
        :param id: The id of this ImportPackage.
        :param language: The language of this ImportPackage.
        :param licenses: The licenses of this ImportPackage.
        :param locations: The locations of this ImportPackage.
        :param metadata: The metadata of this ImportPackage.
        :param metadata_type: The metadata_type of this ImportPackage.
        :param name: The name of this ImportPackage.
        :param purl: The purl of this ImportPackage.
        :param type: The type of this ImportPackage.
        :param version: The version of this ImportPackage.
        """
        self.openapi_types = {
            'cpes': List[str],
            'found_by': str,
            'id': str,
            'language': str,
            'licenses': List[str],
            'locations': List[ImportPackageLocation],
            'metadata': object,
            'metadata_type': str,
            'name': str,
            'purl': str,
            'type': str,
            'version': str
        }

        self.attribute_map = {
            'cpes': 'cpes',
            'found_by': 'foundBy',
            'id': 'id',
            'language': 'language',
            'licenses': 'licenses',
            'locations': 'locations',
            'metadata': 'metadata',
            'metadata_type': 'metadataType',
            'name': 'name',
            'purl': 'purl',
            'type': 'type',
            'version': 'version'
        }

        self._cpes = cpes
        self._found_by = found_by
        self._id = id
        self._language = language
        self._licenses = licenses
        self._locations = locations
        self._metadata = metadata
        self._metadata_type = metadata_type
        self._name = name
        self._purl = purl
        self._type = type
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportPackage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportPackage of this ImportPackage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cpes(self):
        """Gets the cpes of this ImportPackage.


        :return: The cpes of this ImportPackage.
        :rtype: List[str]
        """
        return self._cpes

    @cpes.setter
    def cpes(self, cpes):
        """Sets the cpes of this ImportPackage.


        :param cpes: The cpes of this ImportPackage.
        :type cpes: List[str]
        """
        if cpes is None:
            raise ValueError("Invalid value for `cpes`, must not be `None`")

        self._cpes = cpes

    @property
    def found_by(self):
        """Gets the found_by of this ImportPackage.


        :return: The found_by of this ImportPackage.
        :rtype: str
        """
        return self._found_by

    @found_by.setter
    def found_by(self, found_by):
        """Sets the found_by of this ImportPackage.


        :param found_by: The found_by of this ImportPackage.
        :type found_by: str
        """

        self._found_by = found_by

    @property
    def id(self):
        """Gets the id of this ImportPackage.


        :return: The id of this ImportPackage.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImportPackage.


        :param id: The id of this ImportPackage.
        :type id: str
        """

        self._id = id

    @property
    def language(self):
        """Gets the language of this ImportPackage.


        :return: The language of this ImportPackage.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ImportPackage.


        :param language: The language of this ImportPackage.
        :type language: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")

        self._language = language

    @property
    def licenses(self):
        """Gets the licenses of this ImportPackage.


        :return: The licenses of this ImportPackage.
        :rtype: List[str]
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses):
        """Sets the licenses of this ImportPackage.


        :param licenses: The licenses of this ImportPackage.
        :type licenses: List[str]
        """
        if licenses is None:
            raise ValueError("Invalid value for `licenses`, must not be `None`")

        self._licenses = licenses

    @property
    def locations(self):
        """Gets the locations of this ImportPackage.


        :return: The locations of this ImportPackage.
        :rtype: List[ImportPackageLocation]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this ImportPackage.


        :param locations: The locations of this ImportPackage.
        :type locations: List[ImportPackageLocation]
        """
        if locations is None:
            raise ValueError("Invalid value for `locations`, must not be `None`")

        self._locations = locations

    @property
    def metadata(self):
        """Gets the metadata of this ImportPackage.


        :return: The metadata of this ImportPackage.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ImportPackage.


        :param metadata: The metadata of this ImportPackage.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def metadata_type(self):
        """Gets the metadata_type of this ImportPackage.


        :return: The metadata_type of this ImportPackage.
        :rtype: str
        """
        return self._metadata_type

    @metadata_type.setter
    def metadata_type(self, metadata_type):
        """Sets the metadata_type of this ImportPackage.


        :param metadata_type: The metadata_type of this ImportPackage.
        :type metadata_type: str
        """
        if metadata_type is None:
            raise ValueError("Invalid value for `metadata_type`, must not be `None`")

        self._metadata_type = metadata_type

    @property
    def name(self):
        """Gets the name of this ImportPackage.


        :return: The name of this ImportPackage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportPackage.


        :param name: The name of this ImportPackage.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def purl(self):
        """Gets the purl of this ImportPackage.


        :return: The purl of this ImportPackage.
        :rtype: str
        """
        return self._purl

    @purl.setter
    def purl(self, purl):
        """Sets the purl of this ImportPackage.


        :param purl: The purl of this ImportPackage.
        :type purl: str
        """

        self._purl = purl

    @property
    def type(self):
        """Gets the type of this ImportPackage.


        :return: The type of this ImportPackage.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ImportPackage.


        :param type: The type of this ImportPackage.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def version(self):
        """Gets the version of this ImportPackage.


        :return: The version of this ImportPackage.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ImportPackage.


        :param version: The version of this ImportPackage.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
