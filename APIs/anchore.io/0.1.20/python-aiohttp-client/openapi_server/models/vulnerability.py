# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nvd_data_object import NvdDataObject
from openapi_server.models.vendor_data_object import VendorDataObject
from openapi_server import util


class Vulnerability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feed: str=None, feed_group: str=None, fix: str=None, nvd_data: List[NvdDataObject]=None, package: str=None, package_cpe: str=None, package_name: str=None, package_path: str=None, package_type: str=None, package_version: str=None, severity: str=None, url: str=None, vendor_data: List[VendorDataObject]=None, vuln: str=None, will_not_fix: bool=None):
        """Vulnerability - a model defined in OpenAPI

        :param feed: The feed of this Vulnerability.
        :param feed_group: The feed_group of this Vulnerability.
        :param fix: The fix of this Vulnerability.
        :param nvd_data: The nvd_data of this Vulnerability.
        :param package: The package of this Vulnerability.
        :param package_cpe: The package_cpe of this Vulnerability.
        :param package_name: The package_name of this Vulnerability.
        :param package_path: The package_path of this Vulnerability.
        :param package_type: The package_type of this Vulnerability.
        :param package_version: The package_version of this Vulnerability.
        :param severity: The severity of this Vulnerability.
        :param url: The url of this Vulnerability.
        :param vendor_data: The vendor_data of this Vulnerability.
        :param vuln: The vuln of this Vulnerability.
        :param will_not_fix: The will_not_fix of this Vulnerability.
        """
        self.openapi_types = {
            'feed': str,
            'feed_group': str,
            'fix': str,
            'nvd_data': List[NvdDataObject],
            'package': str,
            'package_cpe': str,
            'package_name': str,
            'package_path': str,
            'package_type': str,
            'package_version': str,
            'severity': str,
            'url': str,
            'vendor_data': List[VendorDataObject],
            'vuln': str,
            'will_not_fix': bool
        }

        self.attribute_map = {
            'feed': 'feed',
            'feed_group': 'feed_group',
            'fix': 'fix',
            'nvd_data': 'nvd_data',
            'package': 'package',
            'package_cpe': 'package_cpe',
            'package_name': 'package_name',
            'package_path': 'package_path',
            'package_type': 'package_type',
            'package_version': 'package_version',
            'severity': 'severity',
            'url': 'url',
            'vendor_data': 'vendor_data',
            'vuln': 'vuln',
            'will_not_fix': 'will_not_fix'
        }

        self._feed = feed
        self._feed_group = feed_group
        self._fix = fix
        self._nvd_data = nvd_data
        self._package = package
        self._package_cpe = package_cpe
        self._package_name = package_name
        self._package_path = package_path
        self._package_type = package_type
        self._package_version = package_version
        self._severity = severity
        self._url = url
        self._vendor_data = vendor_data
        self._vuln = vuln
        self._will_not_fix = will_not_fix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Vulnerability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Vulnerability of this Vulnerability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feed(self):
        """Gets the feed of this Vulnerability.

        The name of the feed where vulnerability match was made

        :return: The feed of this Vulnerability.
        :rtype: str
        """
        return self._feed

    @feed.setter
    def feed(self, feed):
        """Sets the feed of this Vulnerability.

        The name of the feed where vulnerability match was made

        :param feed: The feed of this Vulnerability.
        :type feed: str
        """

        self._feed = feed

    @property
    def feed_group(self):
        """Gets the feed_group of this Vulnerability.

        The name of the feed group where vulnerability match was made

        :return: The feed_group of this Vulnerability.
        :rtype: str
        """
        return self._feed_group

    @feed_group.setter
    def feed_group(self, feed_group):
        """Sets the feed_group of this Vulnerability.

        The name of the feed group where vulnerability match was made

        :param feed_group: The feed_group of this Vulnerability.
        :type feed_group: str
        """

        self._feed_group = feed_group

    @property
    def fix(self):
        """Gets the fix of this Vulnerability.

        The package containing a fix, if available

        :return: The fix of this Vulnerability.
        :rtype: str
        """
        return self._fix

    @fix.setter
    def fix(self, fix):
        """Sets the fix of this Vulnerability.

        The package containing a fix, if available

        :param fix: The fix of this Vulnerability.
        :type fix: str
        """

        self._fix = fix

    @property
    def nvd_data(self):
        """Gets the nvd_data of this Vulnerability.

        List of Nvd Data objects

        :return: The nvd_data of this Vulnerability.
        :rtype: List[NvdDataObject]
        """
        return self._nvd_data

    @nvd_data.setter
    def nvd_data(self, nvd_data):
        """Sets the nvd_data of this Vulnerability.

        List of Nvd Data objects

        :param nvd_data: The nvd_data of this Vulnerability.
        :type nvd_data: List[NvdDataObject]
        """

        self._nvd_data = nvd_data

    @property
    def package(self):
        """Gets the package of this Vulnerability.

        The package name and version that are vulnerable in the image

        :return: The package of this Vulnerability.
        :rtype: str
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this Vulnerability.

        The package name and version that are vulnerable in the image

        :param package: The package of this Vulnerability.
        :type package: str
        """

        self._package = package

    @property
    def package_cpe(self):
        """Gets the package_cpe of this Vulnerability.

        The CPE string (if applicable) describing the package to vulnerability match

        :return: The package_cpe of this Vulnerability.
        :rtype: str
        """
        return self._package_cpe

    @package_cpe.setter
    def package_cpe(self, package_cpe):
        """Sets the package_cpe of this Vulnerability.

        The CPE string (if applicable) describing the package to vulnerability match

        :param package_cpe: The package_cpe of this Vulnerability.
        :type package_cpe: str
        """

        self._package_cpe = package_cpe

    @property
    def package_name(self):
        """Gets the package_name of this Vulnerability.

        The name of the vulnerable package artifact

        :return: The package_name of this Vulnerability.
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this Vulnerability.

        The name of the vulnerable package artifact

        :param package_name: The package_name of this Vulnerability.
        :type package_name: str
        """

        self._package_name = package_name

    @property
    def package_path(self):
        """Gets the package_path of this Vulnerability.

        The location (if applicable) of the vulnerable package in the container filesystem

        :return: The package_path of this Vulnerability.
        :rtype: str
        """
        return self._package_path

    @package_path.setter
    def package_path(self, package_path):
        """Sets the package_path of this Vulnerability.

        The location (if applicable) of the vulnerable package in the container filesystem

        :param package_path: The package_path of this Vulnerability.
        :type package_path: str
        """

        self._package_path = package_path

    @property
    def package_type(self):
        """Gets the package_type of this Vulnerability.

        The type of vulnerable package

        :return: The package_type of this Vulnerability.
        :rtype: str
        """
        return self._package_type

    @package_type.setter
    def package_type(self, package_type):
        """Sets the package_type of this Vulnerability.

        The type of vulnerable package

        :param package_type: The package_type of this Vulnerability.
        :type package_type: str
        """

        self._package_type = package_type

    @property
    def package_version(self):
        """Gets the package_version of this Vulnerability.

        The version of the vulnerable package artifact

        :return: The package_version of this Vulnerability.
        :rtype: str
        """
        return self._package_version

    @package_version.setter
    def package_version(self, package_version):
        """Sets the package_version of this Vulnerability.

        The version of the vulnerable package artifact

        :param package_version: The package_version of this Vulnerability.
        :type package_version: str
        """

        self._package_version = package_version

    @property
    def severity(self):
        """Gets the severity of this Vulnerability.

        The severity of the vulnerability

        :return: The severity of this Vulnerability.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Vulnerability.

        The severity of the vulnerability

        :param severity: The severity of this Vulnerability.
        :type severity: str
        """

        self._severity = severity

    @property
    def url(self):
        """Gets the url of this Vulnerability.

        The url for more information about the vulnerability

        :return: The url of this Vulnerability.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Vulnerability.

        The url for more information about the vulnerability

        :param url: The url of this Vulnerability.
        :type url: str
        """

        self._url = url

    @property
    def vendor_data(self):
        """Gets the vendor_data of this Vulnerability.

        List of Vendor Data objects

        :return: The vendor_data of this Vulnerability.
        :rtype: List[VendorDataObject]
        """
        return self._vendor_data

    @vendor_data.setter
    def vendor_data(self, vendor_data):
        """Sets the vendor_data of this Vulnerability.

        List of Vendor Data objects

        :param vendor_data: The vendor_data of this Vulnerability.
        :type vendor_data: List[VendorDataObject]
        """

        self._vendor_data = vendor_data

    @property
    def vuln(self):
        """Gets the vuln of this Vulnerability.

        The vulnerability identifier, such as CVE-2017-100, or RHSA-2017123

        :return: The vuln of this Vulnerability.
        :rtype: str
        """
        return self._vuln

    @vuln.setter
    def vuln(self, vuln):
        """Sets the vuln of this Vulnerability.

        The vulnerability identifier, such as CVE-2017-100, or RHSA-2017123

        :param vuln: The vuln of this Vulnerability.
        :type vuln: str
        """

        self._vuln = vuln

    @property
    def will_not_fix(self):
        """Gets the will_not_fix of this Vulnerability.

        Whether a vendor will fix or not fix the vulnerability

        :return: The will_not_fix of this Vulnerability.
        :rtype: bool
        """
        return self._will_not_fix

    @will_not_fix.setter
    def will_not_fix(self, will_not_fix):
        """Sets the will_not_fix of this Vulnerability.

        Whether a vendor will fix or not fix the vulnerability

        :param will_not_fix: The will_not_fix of this Vulnerability.
        :type will_not_fix: bool
        """

        self._will_not_fix = will_not_fix
