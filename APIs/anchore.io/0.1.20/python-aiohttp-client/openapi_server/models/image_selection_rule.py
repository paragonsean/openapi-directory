# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_ref import ImageRef
from openapi_server import util


class ImageSelectionRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, image: ImageRef=None, name: str=None, registry: str=None, repository: str=None):
        """ImageSelectionRule - a model defined in OpenAPI

        :param id: The id of this ImageSelectionRule.
        :param image: The image of this ImageSelectionRule.
        :param name: The name of this ImageSelectionRule.
        :param registry: The registry of this ImageSelectionRule.
        :param repository: The repository of this ImageSelectionRule.
        """
        self.openapi_types = {
            'id': str,
            'image': ImageRef,
            'name': str,
            'registry': str,
            'repository': str
        }

        self.attribute_map = {
            'id': 'id',
            'image': 'image',
            'name': 'name',
            'registry': 'registry',
            'repository': 'repository'
        }

        self._id = id
        self._image = image
        self._name = name
        self._registry = registry
        self._repository = repository

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageSelectionRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageSelectionRule of this ImageSelectionRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ImageSelectionRule.


        :return: The id of this ImageSelectionRule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImageSelectionRule.


        :param id: The id of this ImageSelectionRule.
        :type id: str
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this ImageSelectionRule.


        :return: The image of this ImageSelectionRule.
        :rtype: ImageRef
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ImageSelectionRule.


        :param image: The image of this ImageSelectionRule.
        :type image: ImageRef
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")

        self._image = image

    @property
    def name(self):
        """Gets the name of this ImageSelectionRule.


        :return: The name of this ImageSelectionRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImageSelectionRule.


        :param name: The name of this ImageSelectionRule.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def registry(self):
        """Gets the registry of this ImageSelectionRule.


        :return: The registry of this ImageSelectionRule.
        :rtype: str
        """
        return self._registry

    @registry.setter
    def registry(self, registry):
        """Sets the registry of this ImageSelectionRule.


        :param registry: The registry of this ImageSelectionRule.
        :type registry: str
        """
        if registry is None:
            raise ValueError("Invalid value for `registry`, must not be `None`")

        self._registry = registry

    @property
    def repository(self):
        """Gets the repository of this ImageSelectionRule.


        :return: The repository of this ImageSelectionRule.
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this ImageSelectionRule.


        :param repository: The repository of this ImageSelectionRule.
        :type repository: str
        """
        if repository is None:
            raise ValueError("Invalid value for `repository`, must not be `None`")

        self._repository = repository
