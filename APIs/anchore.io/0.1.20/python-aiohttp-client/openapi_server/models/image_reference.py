# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tag_entry import TagEntry
from openapi_server import util


class ImageReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analyzed_at: str=None, digest: str=None, id: str=None, tag_history: List[TagEntry]=None):
        """ImageReference - a model defined in OpenAPI

        :param analyzed_at: The analyzed_at of this ImageReference.
        :param digest: The digest of this ImageReference.
        :param id: The id of this ImageReference.
        :param tag_history: The tag_history of this ImageReference.
        """
        self.openapi_types = {
            'analyzed_at': str,
            'digest': str,
            'id': str,
            'tag_history': List[TagEntry]
        }

        self.attribute_map = {
            'analyzed_at': 'analyzed_at',
            'digest': 'digest',
            'id': 'id',
            'tag_history': 'tag_history'
        }

        self._analyzed_at = analyzed_at
        self._digest = digest
        self._id = id
        self._tag_history = tag_history

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageReference of this ImageReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analyzed_at(self):
        """Gets the analyzed_at of this ImageReference.

        Timestamp, in rfc3339 format, indicating when the image state became 'analyzed' in Anchore Engine.

        :return: The analyzed_at of this ImageReference.
        :rtype: str
        """
        return self._analyzed_at

    @analyzed_at.setter
    def analyzed_at(self, analyzed_at):
        """Sets the analyzed_at of this ImageReference.

        Timestamp, in rfc3339 format, indicating when the image state became 'analyzed' in Anchore Engine.

        :param analyzed_at: The analyzed_at of this ImageReference.
        :type analyzed_at: str
        """

        self._analyzed_at = analyzed_at

    @property
    def digest(self):
        """Gets the digest of this ImageReference.

        The image digest

        :return: The digest of this ImageReference.
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this ImageReference.

        The image digest

        :param digest: The digest of this ImageReference.
        :type digest: str
        """

        self._digest = digest

    @property
    def id(self):
        """Gets the id of this ImageReference.

        The image id if available

        :return: The id of this ImageReference.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImageReference.

        The image id if available

        :param id: The id of this ImageReference.
        :type id: str
        """

        self._id = id

    @property
    def tag_history(self):
        """Gets the tag_history of this ImageReference.


        :return: The tag_history of this ImageReference.
        :rtype: List[TagEntry]
        """
        return self._tag_history

    @tag_history.setter
    def tag_history(self, tag_history):
        """Sets the tag_history of this ImageReference.


        :param tag_history: The tag_history of this ImageReference.
        :type tag_history: List[TagEntry]
        """

        self._tag_history = tag_history
