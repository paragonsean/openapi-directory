# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_response_event_resource import EventResponseEventResource
from openapi_server.models.event_response_event_source import EventResponseEventSource
from openapi_server import util


class EventResponseEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, details: object=None, level: str=None, message: str=None, resource: EventResponseEventResource=None, source: EventResponseEventSource=None, timestamp: datetime=None, type: str=None):
        """EventResponseEvent - a model defined in OpenAPI

        :param category: The category of this EventResponseEvent.
        :param details: The details of this EventResponseEvent.
        :param level: The level of this EventResponseEvent.
        :param message: The message of this EventResponseEvent.
        :param resource: The resource of this EventResponseEvent.
        :param source: The source of this EventResponseEvent.
        :param timestamp: The timestamp of this EventResponseEvent.
        :param type: The type of this EventResponseEvent.
        """
        self.openapi_types = {
            'category': str,
            'details': object,
            'level': str,
            'message': str,
            'resource': EventResponseEventResource,
            'source': EventResponseEventSource,
            'timestamp': datetime,
            'type': str
        }

        self.attribute_map = {
            'category': 'category',
            'details': 'details',
            'level': 'level',
            'message': 'message',
            'resource': 'resource',
            'source': 'source',
            'timestamp': 'timestamp',
            'type': 'type'
        }

        self._category = category
        self._details = details
        self._level = level
        self._message = message
        self._resource = resource
        self._source = source
        self._timestamp = timestamp
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventResponseEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventResponse_event of this EventResponseEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this EventResponseEvent.


        :return: The category of this EventResponseEvent.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this EventResponseEvent.


        :param category: The category of this EventResponseEvent.
        :type category: str
        """

        self._category = category

    @property
    def details(self):
        """Gets the details of this EventResponseEvent.


        :return: The details of this EventResponseEvent.
        :rtype: object
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this EventResponseEvent.


        :param details: The details of this EventResponseEvent.
        :type details: object
        """

        self._details = details

    @property
    def level(self):
        """Gets the level of this EventResponseEvent.


        :return: The level of this EventResponseEvent.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this EventResponseEvent.


        :param level: The level of this EventResponseEvent.
        :type level: str
        """

        self._level = level

    @property
    def message(self):
        """Gets the message of this EventResponseEvent.


        :return: The message of this EventResponseEvent.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this EventResponseEvent.


        :param message: The message of this EventResponseEvent.
        :type message: str
        """

        self._message = message

    @property
    def resource(self):
        """Gets the resource of this EventResponseEvent.


        :return: The resource of this EventResponseEvent.
        :rtype: EventResponseEventResource
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this EventResponseEvent.


        :param resource: The resource of this EventResponseEvent.
        :type resource: EventResponseEventResource
        """

        self._resource = resource

    @property
    def source(self):
        """Gets the source of this EventResponseEvent.


        :return: The source of this EventResponseEvent.
        :rtype: EventResponseEventSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this EventResponseEvent.


        :param source: The source of this EventResponseEvent.
        :type source: EventResponseEventSource
        """

        self._source = source

    @property
    def timestamp(self):
        """Gets the timestamp of this EventResponseEvent.


        :return: The timestamp of this EventResponseEvent.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this EventResponseEvent.


        :param timestamp: The timestamp of this EventResponseEvent.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def type(self):
        """Gets the type of this EventResponseEvent.


        :return: The type of this EventResponseEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventResponseEvent.


        :param type: The type of this EventResponseEvent.
        :type type: str
        """

        self._type = type
