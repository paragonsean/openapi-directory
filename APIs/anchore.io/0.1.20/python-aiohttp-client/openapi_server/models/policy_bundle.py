# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_selection_rule import ImageSelectionRule
from openapi_server.models.mapping_rule import MappingRule
from openapi_server.models.policy import Policy
from openapi_server.models.whitelist import Whitelist
from openapi_server import util


class PolicyBundle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blacklisted_images: List[ImageSelectionRule]=None, comment: str=None, id: str=None, mappings: List[MappingRule]=None, name: str=None, policies: List[Policy]=None, version: str=None, whitelisted_images: List[ImageSelectionRule]=None, whitelists: List[Whitelist]=None):
        """PolicyBundle - a model defined in OpenAPI

        :param blacklisted_images: The blacklisted_images of this PolicyBundle.
        :param comment: The comment of this PolicyBundle.
        :param id: The id of this PolicyBundle.
        :param mappings: The mappings of this PolicyBundle.
        :param name: The name of this PolicyBundle.
        :param policies: The policies of this PolicyBundle.
        :param version: The version of this PolicyBundle.
        :param whitelisted_images: The whitelisted_images of this PolicyBundle.
        :param whitelists: The whitelists of this PolicyBundle.
        """
        self.openapi_types = {
            'blacklisted_images': List[ImageSelectionRule],
            'comment': str,
            'id': str,
            'mappings': List[MappingRule],
            'name': str,
            'policies': List[Policy],
            'version': str,
            'whitelisted_images': List[ImageSelectionRule],
            'whitelists': List[Whitelist]
        }

        self.attribute_map = {
            'blacklisted_images': 'blacklisted_images',
            'comment': 'comment',
            'id': 'id',
            'mappings': 'mappings',
            'name': 'name',
            'policies': 'policies',
            'version': 'version',
            'whitelisted_images': 'whitelisted_images',
            'whitelists': 'whitelists'
        }

        self._blacklisted_images = blacklisted_images
        self._comment = comment
        self._id = id
        self._mappings = mappings
        self._name = name
        self._policies = policies
        self._version = version
        self._whitelisted_images = whitelisted_images
        self._whitelists = whitelists

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyBundle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyBundle of this PolicyBundle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blacklisted_images(self):
        """Gets the blacklisted_images of this PolicyBundle.

        List of mapping rules that define which images should always result in a STOP/FAIL policy result regardless of policy content or presence in whitelisted_images

        :return: The blacklisted_images of this PolicyBundle.
        :rtype: List[ImageSelectionRule]
        """
        return self._blacklisted_images

    @blacklisted_images.setter
    def blacklisted_images(self, blacklisted_images):
        """Sets the blacklisted_images of this PolicyBundle.

        List of mapping rules that define which images should always result in a STOP/FAIL policy result regardless of policy content or presence in whitelisted_images

        :param blacklisted_images: The blacklisted_images of this PolicyBundle.
        :type blacklisted_images: List[ImageSelectionRule]
        """

        self._blacklisted_images = blacklisted_images

    @property
    def comment(self):
        """Gets the comment of this PolicyBundle.

        Description of the bundle, human readable

        :return: The comment of this PolicyBundle.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this PolicyBundle.

        Description of the bundle, human readable

        :param comment: The comment of this PolicyBundle.
        :type comment: str
        """

        self._comment = comment

    @property
    def id(self):
        """Gets the id of this PolicyBundle.

        Id of the bundle

        :return: The id of this PolicyBundle.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PolicyBundle.

        Id of the bundle

        :param id: The id of this PolicyBundle.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def mappings(self):
        """Gets the mappings of this PolicyBundle.

        Mapping rules for defining which policy and whitelist(s) to apply to an image based on a match of the image tag or id. Evaluated in order.

        :return: The mappings of this PolicyBundle.
        :rtype: List[MappingRule]
        """
        return self._mappings

    @mappings.setter
    def mappings(self, mappings):
        """Sets the mappings of this PolicyBundle.

        Mapping rules for defining which policy and whitelist(s) to apply to an image based on a match of the image tag or id. Evaluated in order.

        :param mappings: The mappings of this PolicyBundle.
        :type mappings: List[MappingRule]
        """
        if mappings is None:
            raise ValueError("Invalid value for `mappings`, must not be `None`")

        self._mappings = mappings

    @property
    def name(self):
        """Gets the name of this PolicyBundle.

        Human readable name for the bundle

        :return: The name of this PolicyBundle.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PolicyBundle.

        Human readable name for the bundle

        :param name: The name of this PolicyBundle.
        :type name: str
        """

        self._name = name

    @property
    def policies(self):
        """Gets the policies of this PolicyBundle.

        Policies which define the go/stop/warn status of an image using rule matches on image properties

        :return: The policies of this PolicyBundle.
        :rtype: List[Policy]
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """Sets the policies of this PolicyBundle.

        Policies which define the go/stop/warn status of an image using rule matches on image properties

        :param policies: The policies of this PolicyBundle.
        :type policies: List[Policy]
        """
        if policies is None:
            raise ValueError("Invalid value for `policies`, must not be `None`")

        self._policies = policies

    @property
    def version(self):
        """Gets the version of this PolicyBundle.

        Version id for this bundle format

        :return: The version of this PolicyBundle.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PolicyBundle.

        Version id for this bundle format

        :param version: The version of this PolicyBundle.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version

    @property
    def whitelisted_images(self):
        """Gets the whitelisted_images of this PolicyBundle.

        List of mapping rules that define which images should always be passed (unless also on the blacklist), regardless of policy result.

        :return: The whitelisted_images of this PolicyBundle.
        :rtype: List[ImageSelectionRule]
        """
        return self._whitelisted_images

    @whitelisted_images.setter
    def whitelisted_images(self, whitelisted_images):
        """Sets the whitelisted_images of this PolicyBundle.

        List of mapping rules that define which images should always be passed (unless also on the blacklist), regardless of policy result.

        :param whitelisted_images: The whitelisted_images of this PolicyBundle.
        :type whitelisted_images: List[ImageSelectionRule]
        """

        self._whitelisted_images = whitelisted_images

    @property
    def whitelists(self):
        """Gets the whitelists of this PolicyBundle.

        Whitelists which define which policy matches to disregard explicitly in the final policy decision

        :return: The whitelists of this PolicyBundle.
        :rtype: List[Whitelist]
        """
        return self._whitelists

    @whitelists.setter
    def whitelists(self, whitelists):
        """Sets the whitelists of this PolicyBundle.

        Whitelists which define which policy matches to disregard explicitly in the final policy decision

        :param whitelists: The whitelists of this PolicyBundle.
        :type whitelists: List[Whitelist]
        """

        self._whitelists = whitelists
