# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_source import ImageSource
import re
from openapi_server import util


class ImageAnalysisRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: object=None, created_at: datetime=None, digest: str=None, dockerfile: str=None, image_type: str=None, source: ImageSource=None, tag: str=None):
        """ImageAnalysisRequest - a model defined in OpenAPI

        :param annotations: The annotations of this ImageAnalysisRequest.
        :param created_at: The created_at of this ImageAnalysisRequest.
        :param digest: The digest of this ImageAnalysisRequest.
        :param dockerfile: The dockerfile of this ImageAnalysisRequest.
        :param image_type: The image_type of this ImageAnalysisRequest.
        :param source: The source of this ImageAnalysisRequest.
        :param tag: The tag of this ImageAnalysisRequest.
        """
        self.openapi_types = {
            'annotations': object,
            'created_at': datetime,
            'digest': str,
            'dockerfile': str,
            'image_type': str,
            'source': ImageSource,
            'tag': str
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'created_at': 'created_at',
            'digest': 'digest',
            'dockerfile': 'dockerfile',
            'image_type': 'image_type',
            'source': 'source',
            'tag': 'tag'
        }

        self._annotations = annotations
        self._created_at = created_at
        self._digest = digest
        self._dockerfile = dockerfile
        self._image_type = image_type
        self._source = source
        self._tag = tag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageAnalysisRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageAnalysisRequest of this ImageAnalysisRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this ImageAnalysisRequest.

        Annotations to be associated with the added image in key/value form

        :return: The annotations of this ImageAnalysisRequest.
        :rtype: object
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this ImageAnalysisRequest.

        Annotations to be associated with the added image in key/value form

        :param annotations: The annotations of this ImageAnalysisRequest.
        :type annotations: object
        """

        self._annotations = annotations

    @property
    def created_at(self):
        """Gets the created_at of this ImageAnalysisRequest.

        Optional override of the image creation time, only honored when both tag and digest are also supplied  e.g. 2018-10-17T18:14:00Z. Deprecated in favor of the 'source' field

        :return: The created_at of this ImageAnalysisRequest.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ImageAnalysisRequest.

        Optional override of the image creation time, only honored when both tag and digest are also supplied  e.g. 2018-10-17T18:14:00Z. Deprecated in favor of the 'source' field

        :param created_at: The created_at of this ImageAnalysisRequest.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def digest(self):
        """Gets the digest of this ImageAnalysisRequest.

        A digest string for an image, maybe a pull string or just a digest. e.g. nginx@sha256:123 or sha256:abc123. If a pull string, it must have same regisry/repo as the tag field. Deprecated in favor of the 'source' field

        :return: The digest of this ImageAnalysisRequest.
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this ImageAnalysisRequest.

        A digest string for an image, maybe a pull string or just a digest. e.g. nginx@sha256:123 or sha256:abc123. If a pull string, it must have same regisry/repo as the tag field. Deprecated in favor of the 'source' field

        :param digest: The digest of this ImageAnalysisRequest.
        :type digest: str
        """

        self._digest = digest

    @property
    def dockerfile(self):
        """Gets the dockerfile of this ImageAnalysisRequest.

        Base64 encoded content of the dockerfile for the image, if available. Deprecated in favor of the 'source' field.

        :return: The dockerfile of this ImageAnalysisRequest.
        :rtype: str
        """
        return self._dockerfile

    @dockerfile.setter
    def dockerfile(self, dockerfile):
        """Sets the dockerfile of this ImageAnalysisRequest.

        Base64 encoded content of the dockerfile for the image, if available. Deprecated in favor of the 'source' field.

        :param dockerfile: The dockerfile of this ImageAnalysisRequest.
        :type dockerfile: str
        """
        if dockerfile is not None and not re.search(r'^[a-zA-Z0-9+\/=]+$', dockerfile):
            raise ValueError("Invalid value for `dockerfile`, must be a follow pattern or equal to `/^[a-zA-Z0-9+\/=]+$/`")

        self._dockerfile = dockerfile

    @property
    def image_type(self):
        """Gets the image_type of this ImageAnalysisRequest.

        Optional. The type of image this is adding, defaults to \"docker\". This can be ommitted until multiple image types are supported.

        :return: The image_type of this ImageAnalysisRequest.
        :rtype: str
        """
        return self._image_type

    @image_type.setter
    def image_type(self, image_type):
        """Sets the image_type of this ImageAnalysisRequest.

        Optional. The type of image this is adding, defaults to \"docker\". This can be ommitted until multiple image types are supported.

        :param image_type: The image_type of this ImageAnalysisRequest.
        :type image_type: str
        """

        self._image_type = image_type

    @property
    def source(self):
        """Gets the source of this ImageAnalysisRequest.


        :return: The source of this ImageAnalysisRequest.
        :rtype: ImageSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ImageAnalysisRequest.


        :param source: The source of this ImageAnalysisRequest.
        :type source: ImageSource
        """

        self._source = source

    @property
    def tag(self):
        """Gets the tag of this ImageAnalysisRequest.

        Full pullable tag reference for image. e.g. docker.io/nginx:latest. Deprecated in favor of the 'source' field

        :return: The tag of this ImageAnalysisRequest.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this ImageAnalysisRequest.

        Full pullable tag reference for image. e.g. docker.io/nginx:latest. Deprecated in favor of the 'source' field

        :param tag: The tag of this ImageAnalysisRequest.
        :type tag: str
        """

        self._tag = tag
