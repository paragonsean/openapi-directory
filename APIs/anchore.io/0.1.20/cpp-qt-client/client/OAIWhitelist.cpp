/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWhitelist.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWhitelist::OAIWhitelist(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWhitelist::OAIWhitelist() {
    this->initializeModel();
}

OAIWhitelist::~OAIWhitelist() {}

void OAIWhitelist::initializeModel() {

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIWhitelist::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWhitelist::fromJsonObject(QJsonObject json) {

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIWhitelist::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWhitelist::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIWhitelist::getComment() const {
    return m_comment;
}
void OAIWhitelist::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIWhitelist::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIWhitelist::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAIWhitelist::getId() const {
    return m_id;
}
void OAIWhitelist::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWhitelist::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWhitelist::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIWhitelistItem> OAIWhitelist::getItems() const {
    return m_items;
}
void OAIWhitelist::setItems(const QList<OAIWhitelistItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIWhitelist::is_items_Set() const{
    return m_items_isSet;
}

bool OAIWhitelist::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIWhitelist::getName() const {
    return m_name;
}
void OAIWhitelist::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWhitelist::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWhitelist::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWhitelist::getVersion() const {
    return m_version;
}
void OAIWhitelist::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIWhitelist::is_version_Set() const{
    return m_version_isSet;
}

bool OAIWhitelist::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIWhitelist::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWhitelist::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
