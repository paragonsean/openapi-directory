/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageImportManifest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageImportManifest::OAIImageImportManifest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageImportManifest::OAIImageImportManifest() {
    this->initializeModel();
}

OAIImageImportManifest::~OAIImageImportManifest() {}

void OAIImageImportManifest::initializeModel() {

    m_contents_isSet = false;
    m_contents_isValid = false;

    m_digest_isSet = false;
    m_digest_isValid = false;

    m_local_image_id_isSet = false;
    m_local_image_id_isValid = false;

    m_operation_uuid_isSet = false;
    m_operation_uuid_isValid = false;

    m_parent_digest_isSet = false;
    m_parent_digest_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIImageImportManifest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageImportManifest::fromJsonObject(QJsonObject json) {

    m_contents_isValid = ::OpenAPI::fromJsonValue(m_contents, json[QString("contents")]);
    m_contents_isSet = !json[QString("contents")].isNull() && m_contents_isValid;

    m_digest_isValid = ::OpenAPI::fromJsonValue(m_digest, json[QString("digest")]);
    m_digest_isSet = !json[QString("digest")].isNull() && m_digest_isValid;

    m_local_image_id_isValid = ::OpenAPI::fromJsonValue(m_local_image_id, json[QString("local_image_id")]);
    m_local_image_id_isSet = !json[QString("local_image_id")].isNull() && m_local_image_id_isValid;

    m_operation_uuid_isValid = ::OpenAPI::fromJsonValue(m_operation_uuid, json[QString("operation_uuid")]);
    m_operation_uuid_isSet = !json[QString("operation_uuid")].isNull() && m_operation_uuid_isValid;

    m_parent_digest_isValid = ::OpenAPI::fromJsonValue(m_parent_digest, json[QString("parent_digest")]);
    m_parent_digest_isSet = !json[QString("parent_digest")].isNull() && m_parent_digest_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIImageImportManifest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageImportManifest::asJsonObject() const {
    QJsonObject obj;
    if (m_contents.isSet()) {
        obj.insert(QString("contents"), ::OpenAPI::toJsonValue(m_contents));
    }
    if (m_digest_isSet) {
        obj.insert(QString("digest"), ::OpenAPI::toJsonValue(m_digest));
    }
    if (m_local_image_id_isSet) {
        obj.insert(QString("local_image_id"), ::OpenAPI::toJsonValue(m_local_image_id));
    }
    if (m_operation_uuid_isSet) {
        obj.insert(QString("operation_uuid"), ::OpenAPI::toJsonValue(m_operation_uuid));
    }
    if (m_parent_digest_isSet) {
        obj.insert(QString("parent_digest"), ::OpenAPI::toJsonValue(m_parent_digest));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIImportContentDigests OAIImageImportManifest::getContents() const {
    return m_contents;
}
void OAIImageImportManifest::setContents(const OAIImportContentDigests &contents) {
    m_contents = contents;
    m_contents_isSet = true;
}

bool OAIImageImportManifest::is_contents_Set() const{
    return m_contents_isSet;
}

bool OAIImageImportManifest::is_contents_Valid() const{
    return m_contents_isValid;
}

QString OAIImageImportManifest::getDigest() const {
    return m_digest;
}
void OAIImageImportManifest::setDigest(const QString &digest) {
    m_digest = digest;
    m_digest_isSet = true;
}

bool OAIImageImportManifest::is_digest_Set() const{
    return m_digest_isSet;
}

bool OAIImageImportManifest::is_digest_Valid() const{
    return m_digest_isValid;
}

QString OAIImageImportManifest::getLocalImageId() const {
    return m_local_image_id;
}
void OAIImageImportManifest::setLocalImageId(const QString &local_image_id) {
    m_local_image_id = local_image_id;
    m_local_image_id_isSet = true;
}

bool OAIImageImportManifest::is_local_image_id_Set() const{
    return m_local_image_id_isSet;
}

bool OAIImageImportManifest::is_local_image_id_Valid() const{
    return m_local_image_id_isValid;
}

QString OAIImageImportManifest::getOperationUuid() const {
    return m_operation_uuid;
}
void OAIImageImportManifest::setOperationUuid(const QString &operation_uuid) {
    m_operation_uuid = operation_uuid;
    m_operation_uuid_isSet = true;
}

bool OAIImageImportManifest::is_operation_uuid_Set() const{
    return m_operation_uuid_isSet;
}

bool OAIImageImportManifest::is_operation_uuid_Valid() const{
    return m_operation_uuid_isValid;
}

QString OAIImageImportManifest::getParentDigest() const {
    return m_parent_digest;
}
void OAIImageImportManifest::setParentDigest(const QString &parent_digest) {
    m_parent_digest = parent_digest;
    m_parent_digest_isSet = true;
}

bool OAIImageImportManifest::is_parent_digest_Set() const{
    return m_parent_digest_isSet;
}

bool OAIImageImportManifest::is_parent_digest_Valid() const{
    return m_parent_digest_isValid;
}

QList<QString> OAIImageImportManifest::getTags() const {
    return m_tags;
}
void OAIImageImportManifest::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIImageImportManifest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIImageImportManifest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIImageImportManifest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageImportManifest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contents_isValid && m_digest_isValid && m_operation_uuid_isValid && m_tags_isValid && true;
}

} // namespace OpenAPI
