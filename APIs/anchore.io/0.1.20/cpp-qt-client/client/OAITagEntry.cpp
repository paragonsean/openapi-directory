/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITagEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITagEntry::OAITagEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITagEntry::OAITagEntry() {
    this->initializeModel();
}

OAITagEntry::~OAITagEntry() {}

void OAITagEntry::initializeModel() {

    m_detected_at_isSet = false;
    m_detected_at_isValid = false;

    m_pullstring_isSet = false;
    m_pullstring_isValid = false;

    m_registry_isSet = false;
    m_registry_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;
}

void OAITagEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITagEntry::fromJsonObject(QJsonObject json) {

    m_detected_at_isValid = ::OpenAPI::fromJsonValue(m_detected_at, json[QString("detected_at")]);
    m_detected_at_isSet = !json[QString("detected_at")].isNull() && m_detected_at_isValid;

    m_pullstring_isValid = ::OpenAPI::fromJsonValue(m_pullstring, json[QString("pullstring")]);
    m_pullstring_isSet = !json[QString("pullstring")].isNull() && m_pullstring_isValid;

    m_registry_isValid = ::OpenAPI::fromJsonValue(m_registry, json[QString("registry")]);
    m_registry_isSet = !json[QString("registry")].isNull() && m_registry_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;
}

QString OAITagEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITagEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_detected_at_isSet) {
        obj.insert(QString("detected_at"), ::OpenAPI::toJsonValue(m_detected_at));
    }
    if (m_pullstring_isSet) {
        obj.insert(QString("pullstring"), ::OpenAPI::toJsonValue(m_pullstring));
    }
    if (m_registry_isSet) {
        obj.insert(QString("registry"), ::OpenAPI::toJsonValue(m_registry));
    }
    if (m_repository_isSet) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    return obj;
}

QDateTime OAITagEntry::getDetectedAt() const {
    return m_detected_at;
}
void OAITagEntry::setDetectedAt(const QDateTime &detected_at) {
    m_detected_at = detected_at;
    m_detected_at_isSet = true;
}

bool OAITagEntry::is_detected_at_Set() const{
    return m_detected_at_isSet;
}

bool OAITagEntry::is_detected_at_Valid() const{
    return m_detected_at_isValid;
}

QString OAITagEntry::getPullstring() const {
    return m_pullstring;
}
void OAITagEntry::setPullstring(const QString &pullstring) {
    m_pullstring = pullstring;
    m_pullstring_isSet = true;
}

bool OAITagEntry::is_pullstring_Set() const{
    return m_pullstring_isSet;
}

bool OAITagEntry::is_pullstring_Valid() const{
    return m_pullstring_isValid;
}

QString OAITagEntry::getRegistry() const {
    return m_registry;
}
void OAITagEntry::setRegistry(const QString &registry) {
    m_registry = registry;
    m_registry_isSet = true;
}

bool OAITagEntry::is_registry_Set() const{
    return m_registry_isSet;
}

bool OAITagEntry::is_registry_Valid() const{
    return m_registry_isValid;
}

QString OAITagEntry::getRepository() const {
    return m_repository;
}
void OAITagEntry::setRepository(const QString &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAITagEntry::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAITagEntry::is_repository_Valid() const{
    return m_repository_isValid;
}

QString OAITagEntry::getTag() const {
    return m_tag;
}
void OAITagEntry::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAITagEntry::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAITagEntry::is_tag_Valid() const{
    return m_tag_isValid;
}

bool OAITagEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detected_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pullstring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITagEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
