/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupSyncResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupSyncResult::OAIGroupSyncResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupSyncResult::OAIGroupSyncResult() {
    this->initializeModel();
}

OAIGroupSyncResult::~OAIGroupSyncResult() {}

void OAIGroupSyncResult::initializeModel() {

    m_group_isSet = false;
    m_group_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_total_time_seconds_isSet = false;
    m_total_time_seconds_isValid = false;

    m_updated_image_count_isSet = false;
    m_updated_image_count_isValid = false;

    m_updated_record_count_isSet = false;
    m_updated_record_count_isValid = false;
}

void OAIGroupSyncResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupSyncResult::fromJsonObject(QJsonObject json) {

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_total_time_seconds_isValid = ::OpenAPI::fromJsonValue(m_total_time_seconds, json[QString("total_time_seconds")]);
    m_total_time_seconds_isSet = !json[QString("total_time_seconds")].isNull() && m_total_time_seconds_isValid;

    m_updated_image_count_isValid = ::OpenAPI::fromJsonValue(m_updated_image_count, json[QString("updated_image_count")]);
    m_updated_image_count_isSet = !json[QString("updated_image_count")].isNull() && m_updated_image_count_isValid;

    m_updated_record_count_isValid = ::OpenAPI::fromJsonValue(m_updated_record_count, json[QString("updated_record_count")]);
    m_updated_record_count_isSet = !json[QString("updated_record_count")].isNull() && m_updated_record_count_isValid;
}

QString OAIGroupSyncResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupSyncResult::asJsonObject() const {
    QJsonObject obj;
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_total_time_seconds_isSet) {
        obj.insert(QString("total_time_seconds"), ::OpenAPI::toJsonValue(m_total_time_seconds));
    }
    if (m_updated_image_count_isSet) {
        obj.insert(QString("updated_image_count"), ::OpenAPI::toJsonValue(m_updated_image_count));
    }
    if (m_updated_record_count_isSet) {
        obj.insert(QString("updated_record_count"), ::OpenAPI::toJsonValue(m_updated_record_count));
    }
    return obj;
}

QString OAIGroupSyncResult::getGroup() const {
    return m_group;
}
void OAIGroupSyncResult::setGroup(const QString &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIGroupSyncResult::is_group_Set() const{
    return m_group_isSet;
}

bool OAIGroupSyncResult::is_group_Valid() const{
    return m_group_isValid;
}

QString OAIGroupSyncResult::getStatus() const {
    return m_status;
}
void OAIGroupSyncResult::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGroupSyncResult::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGroupSyncResult::is_status_Valid() const{
    return m_status_isValid;
}

double OAIGroupSyncResult::getTotalTimeSeconds() const {
    return m_total_time_seconds;
}
void OAIGroupSyncResult::setTotalTimeSeconds(const double &total_time_seconds) {
    m_total_time_seconds = total_time_seconds;
    m_total_time_seconds_isSet = true;
}

bool OAIGroupSyncResult::is_total_time_seconds_Set() const{
    return m_total_time_seconds_isSet;
}

bool OAIGroupSyncResult::is_total_time_seconds_Valid() const{
    return m_total_time_seconds_isValid;
}

qint32 OAIGroupSyncResult::getUpdatedImageCount() const {
    return m_updated_image_count;
}
void OAIGroupSyncResult::setUpdatedImageCount(const qint32 &updated_image_count) {
    m_updated_image_count = updated_image_count;
    m_updated_image_count_isSet = true;
}

bool OAIGroupSyncResult::is_updated_image_count_Set() const{
    return m_updated_image_count_isSet;
}

bool OAIGroupSyncResult::is_updated_image_count_Valid() const{
    return m_updated_image_count_isValid;
}

qint32 OAIGroupSyncResult::getUpdatedRecordCount() const {
    return m_updated_record_count;
}
void OAIGroupSyncResult::setUpdatedRecordCount(const qint32 &updated_record_count) {
    m_updated_record_count = updated_record_count;
    m_updated_record_count_isSet = true;
}

bool OAIGroupSyncResult::is_updated_record_count_Set() const{
    return m_updated_record_count_isSet;
}

bool OAIGroupSyncResult::is_updated_record_count_Valid() const{
    return m_updated_record_count_isValid;
}

bool OAIGroupSyncResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_time_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_image_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_record_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupSyncResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
