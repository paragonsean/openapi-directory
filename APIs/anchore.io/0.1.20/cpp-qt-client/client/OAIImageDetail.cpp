/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageDetail::OAIImageDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageDetail::OAIImageDetail() {
    this->initializeModel();
}

OAIImageDetail::~OAIImageDetail() {}

void OAIImageDetail::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_dockerfile_isSet = false;
    m_dockerfile_isValid = false;

    m_fulldigest_isSet = false;
    m_fulldigest_isValid = false;

    m_fulltag_isSet = false;
    m_fulltag_isValid = false;

    m_image_digest_isSet = false;
    m_image_digest_isValid = false;

    m_image_id_isSet = false;
    m_image_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_registry_isSet = false;
    m_registry_isValid = false;

    m_repo_isSet = false;
    m_repo_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIImageDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageDetail::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_dockerfile_isValid = ::OpenAPI::fromJsonValue(m_dockerfile, json[QString("dockerfile")]);
    m_dockerfile_isSet = !json[QString("dockerfile")].isNull() && m_dockerfile_isValid;

    m_fulldigest_isValid = ::OpenAPI::fromJsonValue(m_fulldigest, json[QString("fulldigest")]);
    m_fulldigest_isSet = !json[QString("fulldigest")].isNull() && m_fulldigest_isValid;

    m_fulltag_isValid = ::OpenAPI::fromJsonValue(m_fulltag, json[QString("fulltag")]);
    m_fulltag_isSet = !json[QString("fulltag")].isNull() && m_fulltag_isValid;

    m_image_digest_isValid = ::OpenAPI::fromJsonValue(m_image_digest, json[QString("imageDigest")]);
    m_image_digest_isSet = !json[QString("imageDigest")].isNull() && m_image_digest_isValid;

    m_image_id_isValid = ::OpenAPI::fromJsonValue(m_image_id, json[QString("imageId")]);
    m_image_id_isSet = !json[QString("imageId")].isNull() && m_image_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_registry_isValid = ::OpenAPI::fromJsonValue(m_registry, json[QString("registry")]);
    m_registry_isSet = !json[QString("registry")].isNull() && m_registry_isValid;

    m_repo_isValid = ::OpenAPI::fromJsonValue(m_repo, json[QString("repo")]);
    m_repo_isSet = !json[QString("repo")].isNull() && m_repo_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIImageDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_dockerfile_isSet) {
        obj.insert(QString("dockerfile"), ::OpenAPI::toJsonValue(m_dockerfile));
    }
    if (m_fulldigest_isSet) {
        obj.insert(QString("fulldigest"), ::OpenAPI::toJsonValue(m_fulldigest));
    }
    if (m_fulltag_isSet) {
        obj.insert(QString("fulltag"), ::OpenAPI::toJsonValue(m_fulltag));
    }
    if (m_image_digest_isSet) {
        obj.insert(QString("imageDigest"), ::OpenAPI::toJsonValue(m_image_digest));
    }
    if (m_image_id_isSet) {
        obj.insert(QString("imageId"), ::OpenAPI::toJsonValue(m_image_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_registry_isSet) {
        obj.insert(QString("registry"), ::OpenAPI::toJsonValue(m_registry));
    }
    if (m_repo_isSet) {
        obj.insert(QString("repo"), ::OpenAPI::toJsonValue(m_repo));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QDateTime OAIImageDetail::getCreatedAt() const {
    return m_created_at;
}
void OAIImageDetail::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIImageDetail::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIImageDetail::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIImageDetail::getDockerfile() const {
    return m_dockerfile;
}
void OAIImageDetail::setDockerfile(const QString &dockerfile) {
    m_dockerfile = dockerfile;
    m_dockerfile_isSet = true;
}

bool OAIImageDetail::is_dockerfile_Set() const{
    return m_dockerfile_isSet;
}

bool OAIImageDetail::is_dockerfile_Valid() const{
    return m_dockerfile_isValid;
}

QString OAIImageDetail::getFulldigest() const {
    return m_fulldigest;
}
void OAIImageDetail::setFulldigest(const QString &fulldigest) {
    m_fulldigest = fulldigest;
    m_fulldigest_isSet = true;
}

bool OAIImageDetail::is_fulldigest_Set() const{
    return m_fulldigest_isSet;
}

bool OAIImageDetail::is_fulldigest_Valid() const{
    return m_fulldigest_isValid;
}

QString OAIImageDetail::getFulltag() const {
    return m_fulltag;
}
void OAIImageDetail::setFulltag(const QString &fulltag) {
    m_fulltag = fulltag;
    m_fulltag_isSet = true;
}

bool OAIImageDetail::is_fulltag_Set() const{
    return m_fulltag_isSet;
}

bool OAIImageDetail::is_fulltag_Valid() const{
    return m_fulltag_isValid;
}

QString OAIImageDetail::getImageDigest() const {
    return m_image_digest;
}
void OAIImageDetail::setImageDigest(const QString &image_digest) {
    m_image_digest = image_digest;
    m_image_digest_isSet = true;
}

bool OAIImageDetail::is_image_digest_Set() const{
    return m_image_digest_isSet;
}

bool OAIImageDetail::is_image_digest_Valid() const{
    return m_image_digest_isValid;
}

QString OAIImageDetail::getImageId() const {
    return m_image_id;
}
void OAIImageDetail::setImageId(const QString &image_id) {
    m_image_id = image_id;
    m_image_id_isSet = true;
}

bool OAIImageDetail::is_image_id_Set() const{
    return m_image_id_isSet;
}

bool OAIImageDetail::is_image_id_Valid() const{
    return m_image_id_isValid;
}

QDateTime OAIImageDetail::getLastUpdated() const {
    return m_last_updated;
}
void OAIImageDetail::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIImageDetail::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIImageDetail::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIImageDetail::getRegistry() const {
    return m_registry;
}
void OAIImageDetail::setRegistry(const QString &registry) {
    m_registry = registry;
    m_registry_isSet = true;
}

bool OAIImageDetail::is_registry_Set() const{
    return m_registry_isSet;
}

bool OAIImageDetail::is_registry_Valid() const{
    return m_registry_isValid;
}

QString OAIImageDetail::getRepo() const {
    return m_repo;
}
void OAIImageDetail::setRepo(const QString &repo) {
    m_repo = repo;
    m_repo_isSet = true;
}

bool OAIImageDetail::is_repo_Set() const{
    return m_repo_isSet;
}

bool OAIImageDetail::is_repo_Valid() const{
    return m_repo_isValid;
}

QString OAIImageDetail::getUserId() const {
    return m_user_id;
}
void OAIImageDetail::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIImageDetail::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIImageDetail::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIImageDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dockerfile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulldigest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulltag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
