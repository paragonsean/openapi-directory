/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVulnUpdateNotificationPayload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVulnUpdateNotificationPayload::OAIVulnUpdateNotificationPayload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVulnUpdateNotificationPayload::OAIVulnUpdateNotificationPayload() {
    this->initializeModel();
}

OAIVulnUpdateNotificationPayload::~OAIVulnUpdateNotificationPayload() {}

void OAIVulnUpdateNotificationPayload::initializeModel() {

    m_notification_id_isSet = false;
    m_notification_id_isValid = false;

    m_subscription_key_isSet = false;
    m_subscription_key_isValid = false;

    m_subscription_type_isSet = false;
    m_subscription_type_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_diff_vulnerability_result_isSet = false;
    m_diff_vulnerability_result_isValid = false;

    m_image_digest_isSet = false;
    m_image_digest_isValid = false;
}

void OAIVulnUpdateNotificationPayload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVulnUpdateNotificationPayload::fromJsonObject(QJsonObject json) {

    m_notification_id_isValid = ::OpenAPI::fromJsonValue(m_notification_id, json[QString("notificationId")]);
    m_notification_id_isSet = !json[QString("notificationId")].isNull() && m_notification_id_isValid;

    m_subscription_key_isValid = ::OpenAPI::fromJsonValue(m_subscription_key, json[QString("subscription_key")]);
    m_subscription_key_isSet = !json[QString("subscription_key")].isNull() && m_subscription_key_isValid;

    m_subscription_type_isValid = ::OpenAPI::fromJsonValue(m_subscription_type, json[QString("subscription_type")]);
    m_subscription_type_isSet = !json[QString("subscription_type")].isNull() && m_subscription_type_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_diff_vulnerability_result_isValid = ::OpenAPI::fromJsonValue(m_diff_vulnerability_result, json[QString("diff_vulnerability_result")]);
    m_diff_vulnerability_result_isSet = !json[QString("diff_vulnerability_result")].isNull() && m_diff_vulnerability_result_isValid;

    m_image_digest_isValid = ::OpenAPI::fromJsonValue(m_image_digest, json[QString("imageDigest")]);
    m_image_digest_isSet = !json[QString("imageDigest")].isNull() && m_image_digest_isValid;
}

QString OAIVulnUpdateNotificationPayload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVulnUpdateNotificationPayload::asJsonObject() const {
    QJsonObject obj;
    if (m_notification_id_isSet) {
        obj.insert(QString("notificationId"), ::OpenAPI::toJsonValue(m_notification_id));
    }
    if (m_subscription_key_isSet) {
        obj.insert(QString("subscription_key"), ::OpenAPI::toJsonValue(m_subscription_key));
    }
    if (m_subscription_type_isSet) {
        obj.insert(QString("subscription_type"), ::OpenAPI::toJsonValue(m_subscription_type));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_annotations_isSet) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_diff_vulnerability_result.isSet()) {
        obj.insert(QString("diff_vulnerability_result"), ::OpenAPI::toJsonValue(m_diff_vulnerability_result));
    }
    if (m_image_digest_isSet) {
        obj.insert(QString("imageDigest"), ::OpenAPI::toJsonValue(m_image_digest));
    }
    return obj;
}

QString OAIVulnUpdateNotificationPayload::getNotificationId() const {
    return m_notification_id;
}
void OAIVulnUpdateNotificationPayload::setNotificationId(const QString &notification_id) {
    m_notification_id = notification_id;
    m_notification_id_isSet = true;
}

bool OAIVulnUpdateNotificationPayload::is_notification_id_Set() const{
    return m_notification_id_isSet;
}

bool OAIVulnUpdateNotificationPayload::is_notification_id_Valid() const{
    return m_notification_id_isValid;
}

QString OAIVulnUpdateNotificationPayload::getSubscriptionKey() const {
    return m_subscription_key;
}
void OAIVulnUpdateNotificationPayload::setSubscriptionKey(const QString &subscription_key) {
    m_subscription_key = subscription_key;
    m_subscription_key_isSet = true;
}

bool OAIVulnUpdateNotificationPayload::is_subscription_key_Set() const{
    return m_subscription_key_isSet;
}

bool OAIVulnUpdateNotificationPayload::is_subscription_key_Valid() const{
    return m_subscription_key_isValid;
}

QString OAIVulnUpdateNotificationPayload::getSubscriptionType() const {
    return m_subscription_type;
}
void OAIVulnUpdateNotificationPayload::setSubscriptionType(const QString &subscription_type) {
    m_subscription_type = subscription_type;
    m_subscription_type_isSet = true;
}

bool OAIVulnUpdateNotificationPayload::is_subscription_type_Set() const{
    return m_subscription_type_isSet;
}

bool OAIVulnUpdateNotificationPayload::is_subscription_type_Valid() const{
    return m_subscription_type_isValid;
}

QString OAIVulnUpdateNotificationPayload::getUserId() const {
    return m_user_id;
}
void OAIVulnUpdateNotificationPayload::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIVulnUpdateNotificationPayload::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIVulnUpdateNotificationPayload::is_user_id_Valid() const{
    return m_user_id_isValid;
}

OAIObject OAIVulnUpdateNotificationPayload::getAnnotations() const {
    return m_annotations;
}
void OAIVulnUpdateNotificationPayload::setAnnotations(const OAIObject &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIVulnUpdateNotificationPayload::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIVulnUpdateNotificationPayload::is_annotations_Valid() const{
    return m_annotations_isValid;
}

OAIVulnDiffResult OAIVulnUpdateNotificationPayload::getDiffVulnerabilityResult() const {
    return m_diff_vulnerability_result;
}
void OAIVulnUpdateNotificationPayload::setDiffVulnerabilityResult(const OAIVulnDiffResult &diff_vulnerability_result) {
    m_diff_vulnerability_result = diff_vulnerability_result;
    m_diff_vulnerability_result_isSet = true;
}

bool OAIVulnUpdateNotificationPayload::is_diff_vulnerability_result_Set() const{
    return m_diff_vulnerability_result_isSet;
}

bool OAIVulnUpdateNotificationPayload::is_diff_vulnerability_result_Valid() const{
    return m_diff_vulnerability_result_isValid;
}

QString OAIVulnUpdateNotificationPayload::getImageDigest() const {
    return m_image_digest;
}
void OAIVulnUpdateNotificationPayload::setImageDigest(const QString &image_digest) {
    m_image_digest = image_digest;
    m_image_digest_isSet = true;
}

bool OAIVulnUpdateNotificationPayload::is_image_digest_Set() const{
    return m_image_digest_isSet;
}

bool OAIVulnUpdateNotificationPayload::is_image_digest_Valid() const{
    return m_image_digest_isValid;
}

bool OAIVulnUpdateNotificationPayload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_notification_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_diff_vulnerability_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_digest_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVulnUpdateNotificationPayload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
