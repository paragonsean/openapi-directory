/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContentFilesResponse_content_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContentFilesResponse_content_inner::OAIContentFilesResponse_content_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContentFilesResponse_content_inner::OAIContentFilesResponse_content_inner() {
    this->initializeModel();
}

OAIContentFilesResponse_content_inner::~OAIContentFilesResponse_content_inner() {}

void OAIContentFilesResponse_content_inner::initializeModel() {

    m_filename_isSet = false;
    m_filename_isValid = false;

    m_gid_isSet = false;
    m_gid_isValid = false;

    m_linkdest_isSet = false;
    m_linkdest_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_sha256_isSet = false;
    m_sha256_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAIContentFilesResponse_content_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContentFilesResponse_content_inner::fromJsonObject(QJsonObject json) {

    m_filename_isValid = ::OpenAPI::fromJsonValue(m_filename, json[QString("filename")]);
    m_filename_isSet = !json[QString("filename")].isNull() && m_filename_isValid;

    m_gid_isValid = ::OpenAPI::fromJsonValue(m_gid, json[QString("gid")]);
    m_gid_isSet = !json[QString("gid")].isNull() && m_gid_isValid;

    m_linkdest_isValid = ::OpenAPI::fromJsonValue(m_linkdest, json[QString("linkdest")]);
    m_linkdest_isSet = !json[QString("linkdest")].isNull() && m_linkdest_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_sha256_isValid = ::OpenAPI::fromJsonValue(m_sha256, json[QString("sha256")]);
    m_sha256_isSet = !json[QString("sha256")].isNull() && m_sha256_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAIContentFilesResponse_content_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContentFilesResponse_content_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_filename_isSet) {
        obj.insert(QString("filename"), ::OpenAPI::toJsonValue(m_filename));
    }
    if (m_gid_isSet) {
        obj.insert(QString("gid"), ::OpenAPI::toJsonValue(m_gid));
    }
    if (m_linkdest_isSet) {
        obj.insert(QString("linkdest"), ::OpenAPI::toJsonValue(m_linkdest));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_sha256_isSet) {
        obj.insert(QString("sha256"), ::OpenAPI::toJsonValue(m_sha256));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

QString OAIContentFilesResponse_content_inner::getFilename() const {
    return m_filename;
}
void OAIContentFilesResponse_content_inner::setFilename(const QString &filename) {
    m_filename = filename;
    m_filename_isSet = true;
}

bool OAIContentFilesResponse_content_inner::is_filename_Set() const{
    return m_filename_isSet;
}

bool OAIContentFilesResponse_content_inner::is_filename_Valid() const{
    return m_filename_isValid;
}

qint32 OAIContentFilesResponse_content_inner::getGid() const {
    return m_gid;
}
void OAIContentFilesResponse_content_inner::setGid(const qint32 &gid) {
    m_gid = gid;
    m_gid_isSet = true;
}

bool OAIContentFilesResponse_content_inner::is_gid_Set() const{
    return m_gid_isSet;
}

bool OAIContentFilesResponse_content_inner::is_gid_Valid() const{
    return m_gid_isValid;
}

QString OAIContentFilesResponse_content_inner::getLinkdest() const {
    return m_linkdest;
}
void OAIContentFilesResponse_content_inner::setLinkdest(const QString &linkdest) {
    m_linkdest = linkdest;
    m_linkdest_isSet = true;
}

bool OAIContentFilesResponse_content_inner::is_linkdest_Set() const{
    return m_linkdest_isSet;
}

bool OAIContentFilesResponse_content_inner::is_linkdest_Valid() const{
    return m_linkdest_isValid;
}

QString OAIContentFilesResponse_content_inner::getMode() const {
    return m_mode;
}
void OAIContentFilesResponse_content_inner::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIContentFilesResponse_content_inner::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIContentFilesResponse_content_inner::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAIContentFilesResponse_content_inner::getSha256() const {
    return m_sha256;
}
void OAIContentFilesResponse_content_inner::setSha256(const QString &sha256) {
    m_sha256 = sha256;
    m_sha256_isSet = true;
}

bool OAIContentFilesResponse_content_inner::is_sha256_Set() const{
    return m_sha256_isSet;
}

bool OAIContentFilesResponse_content_inner::is_sha256_Valid() const{
    return m_sha256_isValid;
}

qint32 OAIContentFilesResponse_content_inner::getSize() const {
    return m_size;
}
void OAIContentFilesResponse_content_inner::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIContentFilesResponse_content_inner::is_size_Set() const{
    return m_size_isSet;
}

bool OAIContentFilesResponse_content_inner::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIContentFilesResponse_content_inner::getType() const {
    return m_type;
}
void OAIContentFilesResponse_content_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIContentFilesResponse_content_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIContentFilesResponse_content_inner::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIContentFilesResponse_content_inner::getUid() const {
    return m_uid;
}
void OAIContentFilesResponse_content_inner::setUid(const qint32 &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIContentFilesResponse_content_inner::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIContentFilesResponse_content_inner::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIContentFilesResponse_content_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linkdest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha256_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContentFilesResponse_content_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
