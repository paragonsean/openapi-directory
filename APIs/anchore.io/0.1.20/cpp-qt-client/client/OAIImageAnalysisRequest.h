/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIImageAnalysisRequest.h
 *
 * A request to add an image to be watched and analyzed by the engine. Optionally include the dockerfile content. Either source, digest or tag must be present.
 */

#ifndef OAIImageAnalysisRequest_H
#define OAIImageAnalysisRequest_H

#include <QJsonObject>

#include "OAIImageSource.h"
#include "OAIObject.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIImageSource;

class OAIImageAnalysisRequest : public OAIObject {
public:
    OAIImageAnalysisRequest();
    OAIImageAnalysisRequest(QString json);
    ~OAIImageAnalysisRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIObject getAnnotations() const;
    void setAnnotations(const OAIObject &annotations);
    bool is_annotations_Set() const;
    bool is_annotations_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getDigest() const;
    void setDigest(const QString &digest);
    bool is_digest_Set() const;
    bool is_digest_Valid() const;

    QString getDockerfile() const;
    void setDockerfile(const QString &dockerfile);
    bool is_dockerfile_Set() const;
    bool is_dockerfile_Valid() const;

    QString getImageType() const;
    void setImageType(const QString &image_type);
    bool is_image_type_Set() const;
    bool is_image_type_Valid() const;

    OAIImageSource getSource() const;
    void setSource(const OAIImageSource &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    QString getTag() const;
    void setTag(const QString &tag);
    bool is_tag_Set() const;
    bool is_tag_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIObject m_annotations;
    bool m_annotations_isSet;
    bool m_annotations_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_digest;
    bool m_digest_isSet;
    bool m_digest_isValid;

    QString m_dockerfile;
    bool m_dockerfile_isSet;
    bool m_dockerfile_isValid;

    QString m_image_type;
    bool m_image_type_isSet;
    bool m_image_type_isValid;

    OAIImageSource m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    QString m_tag;
    bool m_tag_isSet;
    bool m_tag_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIImageAnalysisRequest)

#endif // OAIImageAnalysisRequest_H
