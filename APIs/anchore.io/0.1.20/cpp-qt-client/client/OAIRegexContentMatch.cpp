/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegexContentMatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegexContentMatch::OAIRegexContentMatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegexContentMatch::OAIRegexContentMatch() {
    this->initializeModel();
}

OAIRegexContentMatch::~OAIRegexContentMatch() {}

void OAIRegexContentMatch::initializeModel() {

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_regex_isSet = false;
    m_regex_isValid = false;
}

void OAIRegexContentMatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegexContentMatch::fromJsonObject(QJsonObject json) {

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_regex_isValid = ::OpenAPI::fromJsonValue(m_regex, json[QString("regex")]);
    m_regex_isSet = !json[QString("regex")].isNull() && m_regex_isValid;
}

QString OAIRegexContentMatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegexContentMatch::asJsonObject() const {
    QJsonObject obj;
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_regex_isSet) {
        obj.insert(QString("regex"), ::OpenAPI::toJsonValue(m_regex));
    }
    return obj;
}

QList<qint32> OAIRegexContentMatch::getLines() const {
    return m_lines;
}
void OAIRegexContentMatch::setLines(const QList<qint32> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAIRegexContentMatch::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAIRegexContentMatch::is_lines_Valid() const{
    return m_lines_isValid;
}

QString OAIRegexContentMatch::getName() const {
    return m_name;
}
void OAIRegexContentMatch::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRegexContentMatch::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRegexContentMatch::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRegexContentMatch::getRegex() const {
    return m_regex;
}
void OAIRegexContentMatch::setRegex(const QString &regex) {
    m_regex = regex;
    m_regex_isSet = true;
}

bool OAIRegexContentMatch::is_regex_Set() const{
    return m_regex_isSet;
}

bool OAIRegexContentMatch::is_regex_Valid() const{
    return m_regex_isValid;
}

bool OAIRegexContentMatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regex_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegexContentMatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
