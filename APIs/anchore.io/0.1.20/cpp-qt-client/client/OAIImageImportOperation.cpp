/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageImportOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageImportOperation::OAIImageImportOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageImportOperation::OAIImageImportOperation() {
    this->initializeModel();
}

OAIImageImportOperation::~OAIImageImportOperation() {}

void OAIImageImportOperation::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIImageImportOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageImportOperation::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expires_at")]);
    m_expires_at_isSet = !json[QString("expires_at")].isNull() && m_expires_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIImageImportOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageImportOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expires_at"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QDateTime OAIImageImportOperation::getCreatedAt() const {
    return m_created_at;
}
void OAIImageImportOperation::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIImageImportOperation::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIImageImportOperation::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIImageImportOperation::getExpiresAt() const {
    return m_expires_at;
}
void OAIImageImportOperation::setExpiresAt(const QDateTime &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIImageImportOperation::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIImageImportOperation::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

QString OAIImageImportOperation::getStatus() const {
    return m_status;
}
void OAIImageImportOperation::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIImageImportOperation::is_status_Set() const{
    return m_status_isSet;
}

bool OAIImageImportOperation::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIImageImportOperation::getUuid() const {
    return m_uuid;
}
void OAIImageImportOperation::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIImageImportOperation::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIImageImportOperation::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIImageImportOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageImportOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
