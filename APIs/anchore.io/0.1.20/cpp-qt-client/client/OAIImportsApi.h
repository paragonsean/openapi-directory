/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIImportsApi_H
#define OAI_OAIImportsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIImageImportContentResponse.h"
#include "OAIImageImportOperation.h"
#include "OAIImagePackageManifest.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIImportsApi : public QObject {
    Q_OBJECT

public:
    OAIImportsApi(const int timeOut = 0);
    ~OAIImportsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void createOperation();

    /**
    * @param[in]  operation_id QString [required]
    */
    virtual void getOperation(const QString &operation_id);

    /**
    * @param[in]  operation_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void importImageConfig(const QString &operation_id, const OAIObject &body);

    /**
    * @param[in]  operation_id QString [required]
    * @param[in]  body QString [required]
    */
    virtual void importImageDockerfile(const QString &operation_id, const QString &body);

    /**
    * @param[in]  operation_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void importImageManifest(const QString &operation_id, const OAIObject &body);

    /**
    * @param[in]  operation_id QString [required]
    * @param[in]  oai_image_package_manifest OAIImagePackageManifest [required]
    */
    virtual void importImagePackages(const QString &operation_id, const OAIImagePackageManifest &oai_image_package_manifest);

    /**
    * @param[in]  operation_id QString [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void importImageParentManifest(const QString &operation_id, const OAIObject &body);

    /**
    * @param[in]  operation_id QString [required]
    */
    virtual void invalidateOperation(const QString &operation_id);

    /**
    * @param[in]  operation_id QString [required]
    */
    virtual void listImportDockerfiles(const QString &operation_id);

    /**
    * @param[in]  operation_id QString [required]
    */
    virtual void listImportImageConfigs(const QString &operation_id);

    /**
    * @param[in]  operation_id QString [required]
    */
    virtual void listImportImageManifests(const QString &operation_id);

    /**
    * @param[in]  operation_id QString [required]
    */
    virtual void listImportPackages(const QString &operation_id);

    /**
    * @param[in]  operation_id QString [required]
    */
    virtual void listImportParentManifests(const QString &operation_id);


    virtual void listOperations();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createOperationCallback(OAIHttpRequestWorker *worker);
    void getOperationCallback(OAIHttpRequestWorker *worker);
    void importImageConfigCallback(OAIHttpRequestWorker *worker);
    void importImageDockerfileCallback(OAIHttpRequestWorker *worker);
    void importImageManifestCallback(OAIHttpRequestWorker *worker);
    void importImagePackagesCallback(OAIHttpRequestWorker *worker);
    void importImageParentManifestCallback(OAIHttpRequestWorker *worker);
    void invalidateOperationCallback(OAIHttpRequestWorker *worker);
    void listImportDockerfilesCallback(OAIHttpRequestWorker *worker);
    void listImportImageConfigsCallback(OAIHttpRequestWorker *worker);
    void listImportImageManifestsCallback(OAIHttpRequestWorker *worker);
    void listImportPackagesCallback(OAIHttpRequestWorker *worker);
    void listImportParentManifestsCallback(OAIHttpRequestWorker *worker);
    void listOperationsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createOperationSignal(OAIImageImportOperation summary);
    void getOperationSignal(OAIImageImportOperation summary);
    void importImageConfigSignal(OAIImageImportContentResponse summary);
    void importImageDockerfileSignal(OAIImageImportContentResponse summary);
    void importImageManifestSignal(OAIImageImportContentResponse summary);
    void importImagePackagesSignal(OAIImageImportContentResponse summary);
    void importImageParentManifestSignal(OAIImageImportContentResponse summary);
    void invalidateOperationSignal(OAIImageImportOperation summary);
    void listImportDockerfilesSignal(QList<QString> summary);
    void listImportImageConfigsSignal(QList<QString> summary);
    void listImportImageManifestsSignal(QList<QString> summary);
    void listImportPackagesSignal(QList<QString> summary);
    void listImportParentManifestsSignal(QList<QString> summary);
    void listOperationsSignal(QList<OAIImageImportOperation> summary);


    void createOperationSignalFull(OAIHttpRequestWorker *worker, OAIImageImportOperation summary);
    void getOperationSignalFull(OAIHttpRequestWorker *worker, OAIImageImportOperation summary);
    void importImageConfigSignalFull(OAIHttpRequestWorker *worker, OAIImageImportContentResponse summary);
    void importImageDockerfileSignalFull(OAIHttpRequestWorker *worker, OAIImageImportContentResponse summary);
    void importImageManifestSignalFull(OAIHttpRequestWorker *worker, OAIImageImportContentResponse summary);
    void importImagePackagesSignalFull(OAIHttpRequestWorker *worker, OAIImageImportContentResponse summary);
    void importImageParentManifestSignalFull(OAIHttpRequestWorker *worker, OAIImageImportContentResponse summary);
    void invalidateOperationSignalFull(OAIHttpRequestWorker *worker, OAIImageImportOperation summary);
    void listImportDockerfilesSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void listImportImageConfigsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void listImportImageManifestsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void listImportPackagesSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void listImportParentManifestsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void listOperationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIImageImportOperation> summary);

    Q_DECL_DEPRECATED_X("Use createOperationSignalError() instead")
    void createOperationSignalE(OAIImageImportOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOperationSignalError(OAIImageImportOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOperationSignalError() instead")
    void getOperationSignalE(OAIImageImportOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOperationSignalError(OAIImageImportOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importImageConfigSignalError() instead")
    void importImageConfigSignalE(OAIImageImportContentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void importImageConfigSignalError(OAIImageImportContentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importImageDockerfileSignalError() instead")
    void importImageDockerfileSignalE(OAIImageImportContentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void importImageDockerfileSignalError(OAIImageImportContentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importImageManifestSignalError() instead")
    void importImageManifestSignalE(OAIImageImportContentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void importImageManifestSignalError(OAIImageImportContentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importImagePackagesSignalError() instead")
    void importImagePackagesSignalE(OAIImageImportContentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void importImagePackagesSignalError(OAIImageImportContentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importImageParentManifestSignalError() instead")
    void importImageParentManifestSignalE(OAIImageImportContentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void importImageParentManifestSignalError(OAIImageImportContentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invalidateOperationSignalError() instead")
    void invalidateOperationSignalE(OAIImageImportOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void invalidateOperationSignalError(OAIImageImportOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listImportDockerfilesSignalError() instead")
    void listImportDockerfilesSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listImportDockerfilesSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listImportImageConfigsSignalError() instead")
    void listImportImageConfigsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listImportImageConfigsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listImportImageManifestsSignalError() instead")
    void listImportImageManifestsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listImportImageManifestsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listImportPackagesSignalError() instead")
    void listImportPackagesSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listImportPackagesSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listImportParentManifestsSignalError() instead")
    void listImportParentManifestsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listImportParentManifestsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listOperationsSignalError() instead")
    void listOperationsSignalE(QList<OAIImageImportOperation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listOperationsSignalError(QList<OAIImageImportOperation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createOperationSignalErrorFull() instead")
    void createOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOperationSignalErrorFull() instead")
    void getOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importImageConfigSignalErrorFull() instead")
    void importImageConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importImageConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importImageDockerfileSignalErrorFull() instead")
    void importImageDockerfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importImageDockerfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importImageManifestSignalErrorFull() instead")
    void importImageManifestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importImageManifestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importImagePackagesSignalErrorFull() instead")
    void importImagePackagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importImagePackagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importImageParentManifestSignalErrorFull() instead")
    void importImageParentManifestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importImageParentManifestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invalidateOperationSignalErrorFull() instead")
    void invalidateOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invalidateOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listImportDockerfilesSignalErrorFull() instead")
    void listImportDockerfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listImportDockerfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listImportImageConfigsSignalErrorFull() instead")
    void listImportImageConfigsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listImportImageConfigsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listImportImageManifestsSignalErrorFull() instead")
    void listImportImageManifestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listImportImageManifestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listImportPackagesSignalErrorFull() instead")
    void listImportPackagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listImportPackagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listImportParentManifestsSignalErrorFull() instead")
    void listImportParentManifestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listImportParentManifestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listOperationsSignalErrorFull() instead")
    void listOperationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listOperationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
