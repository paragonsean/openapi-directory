/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEventsApi_H
#define OAI_OAIEventsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiErrorResponse.h"
#include "OAIEventCategory.h"
#include "OAIEventResponse.h"
#include "OAIEventsList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEventsApi : public QObject {
    Q_OBJECT

public:
    OAIEventsApi(const int timeOut = 0);
    ~OAIEventsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  event_id QString [required]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void deleteEvent(const QString &event_id, const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  before QString [optional]
    * @param[in]  since QString [optional]
    * @param[in]  level QString [optional]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void deleteEvents(const ::OpenAPI::OptionalParam<QString> &before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &level = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_id QString [required]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void getEvent(const QString &event_id, const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());


    virtual void listEventTypes();

    /**
    * @param[in]  source_servicename QString [optional]
    * @param[in]  source_hostid QString [optional]
    * @param[in]  event_type QString [optional]
    * @param[in]  resource_type QString [optional]
    * @param[in]  resource_id QString [optional]
    * @param[in]  level QString [optional]
    * @param[in]  since QString [optional]
    * @param[in]  before QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void listEvents(const ::OpenAPI::OptionalParam<QString> &source_servicename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_hostid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &event_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &resource_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &resource_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &level = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteEventCallback(OAIHttpRequestWorker *worker);
    void deleteEventsCallback(OAIHttpRequestWorker *worker);
    void getEventCallback(OAIHttpRequestWorker *worker);
    void listEventTypesCallback(OAIHttpRequestWorker *worker);
    void listEventsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteEventSignal();
    void deleteEventsSignal(QList<QString> summary);
    void getEventSignal(OAIEventResponse summary);
    void listEventTypesSignal(QList<OAIEventCategory> summary);
    void listEventsSignal(OAIEventsList summary);


    void deleteEventSignalFull(OAIHttpRequestWorker *worker);
    void deleteEventsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getEventSignalFull(OAIHttpRequestWorker *worker, OAIEventResponse summary);
    void listEventTypesSignalFull(OAIHttpRequestWorker *worker, QList<OAIEventCategory> summary);
    void listEventsSignalFull(OAIHttpRequestWorker *worker, OAIEventsList summary);

    Q_DECL_DEPRECATED_X("Use deleteEventSignalError() instead")
    void deleteEventSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEventSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEventsSignalError() instead")
    void deleteEventsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEventsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventSignalError() instead")
    void getEventSignalE(OAIEventResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventSignalError(OAIEventResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEventTypesSignalError() instead")
    void listEventTypesSignalE(QList<OAIEventCategory> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listEventTypesSignalError(QList<OAIEventCategory> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEventsSignalError() instead")
    void listEventsSignalE(OAIEventsList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listEventsSignalError(OAIEventsList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteEventSignalErrorFull() instead")
    void deleteEventSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEventSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEventsSignalErrorFull() instead")
    void deleteEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventSignalErrorFull() instead")
    void getEventSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEventTypesSignalErrorFull() instead")
    void listEventTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listEventTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEventsSignalErrorFull() instead")
    void listEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
