/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageAnalysisRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageAnalysisRequest::OAIImageAnalysisRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageAnalysisRequest::OAIImageAnalysisRequest() {
    this->initializeModel();
}

OAIImageAnalysisRequest::~OAIImageAnalysisRequest() {}

void OAIImageAnalysisRequest::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_digest_isSet = false;
    m_digest_isValid = false;

    m_dockerfile_isSet = false;
    m_dockerfile_isValid = false;

    m_image_type_isSet = false;
    m_image_type_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;
}

void OAIImageAnalysisRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageAnalysisRequest::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_digest_isValid = ::OpenAPI::fromJsonValue(m_digest, json[QString("digest")]);
    m_digest_isSet = !json[QString("digest")].isNull() && m_digest_isValid;

    m_dockerfile_isValid = ::OpenAPI::fromJsonValue(m_dockerfile, json[QString("dockerfile")]);
    m_dockerfile_isSet = !json[QString("dockerfile")].isNull() && m_dockerfile_isValid;

    m_image_type_isValid = ::OpenAPI::fromJsonValue(m_image_type, json[QString("image_type")]);
    m_image_type_isSet = !json[QString("image_type")].isNull() && m_image_type_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;
}

QString OAIImageAnalysisRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageAnalysisRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations_isSet) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_digest_isSet) {
        obj.insert(QString("digest"), ::OpenAPI::toJsonValue(m_digest));
    }
    if (m_dockerfile_isSet) {
        obj.insert(QString("dockerfile"), ::OpenAPI::toJsonValue(m_dockerfile));
    }
    if (m_image_type_isSet) {
        obj.insert(QString("image_type"), ::OpenAPI::toJsonValue(m_image_type));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    return obj;
}

OAIObject OAIImageAnalysisRequest::getAnnotations() const {
    return m_annotations;
}
void OAIImageAnalysisRequest::setAnnotations(const OAIObject &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIImageAnalysisRequest::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIImageAnalysisRequest::is_annotations_Valid() const{
    return m_annotations_isValid;
}

QDateTime OAIImageAnalysisRequest::getCreatedAt() const {
    return m_created_at;
}
void OAIImageAnalysisRequest::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIImageAnalysisRequest::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIImageAnalysisRequest::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIImageAnalysisRequest::getDigest() const {
    return m_digest;
}
void OAIImageAnalysisRequest::setDigest(const QString &digest) {
    m_digest = digest;
    m_digest_isSet = true;
}

bool OAIImageAnalysisRequest::is_digest_Set() const{
    return m_digest_isSet;
}

bool OAIImageAnalysisRequest::is_digest_Valid() const{
    return m_digest_isValid;
}

QString OAIImageAnalysisRequest::getDockerfile() const {
    return m_dockerfile;
}
void OAIImageAnalysisRequest::setDockerfile(const QString &dockerfile) {
    m_dockerfile = dockerfile;
    m_dockerfile_isSet = true;
}

bool OAIImageAnalysisRequest::is_dockerfile_Set() const{
    return m_dockerfile_isSet;
}

bool OAIImageAnalysisRequest::is_dockerfile_Valid() const{
    return m_dockerfile_isValid;
}

QString OAIImageAnalysisRequest::getImageType() const {
    return m_image_type;
}
void OAIImageAnalysisRequest::setImageType(const QString &image_type) {
    m_image_type = image_type;
    m_image_type_isSet = true;
}

bool OAIImageAnalysisRequest::is_image_type_Set() const{
    return m_image_type_isSet;
}

bool OAIImageAnalysisRequest::is_image_type_Valid() const{
    return m_image_type_isValid;
}

OAIImageSource OAIImageAnalysisRequest::getSource() const {
    return m_source;
}
void OAIImageAnalysisRequest::setSource(const OAIImageSource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIImageAnalysisRequest::is_source_Set() const{
    return m_source_isSet;
}

bool OAIImageAnalysisRequest::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIImageAnalysisRequest::getTag() const {
    return m_tag;
}
void OAIImageAnalysisRequest::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIImageAnalysisRequest::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIImageAnalysisRequest::is_tag_Valid() const{
    return m_tag_isValid;
}

bool OAIImageAnalysisRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dockerfile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageAnalysisRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
