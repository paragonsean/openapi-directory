/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiErrorResponse.h"
#include "OAIFileContentSearchResult.h"
#include "OAIRetrievedFile.h"
#include "OAISecretSearchResult.h"
#include "OAIServiceVersion.h"
#include "OAITokenResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  client_id QString [optional]
    * @param[in]  grant_type QString [optional]
    * @param[in]  password QString [optional]
    * @param[in]  username QString [optional]
    */
    virtual void getOauthToken(const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &grant_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>());


    virtual void healthCheck();

    /**
    * @param[in]  image_digest QString [required]
    */
    virtual void listFileContentSearchResults(const QString &image_digest);

    /**
    * @param[in]  image_digest QString [required]
    */
    virtual void listRetrievedFiles(const QString &image_digest);

    /**
    * @param[in]  image_digest QString [required]
    */
    virtual void listSecretSearchResults(const QString &image_digest);


    virtual void ping();


    virtual void versionCheck();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getOauthTokenCallback(OAIHttpRequestWorker *worker);
    void healthCheckCallback(OAIHttpRequestWorker *worker);
    void listFileContentSearchResultsCallback(OAIHttpRequestWorker *worker);
    void listRetrievedFilesCallback(OAIHttpRequestWorker *worker);
    void listSecretSearchResultsCallback(OAIHttpRequestWorker *worker);
    void pingCallback(OAIHttpRequestWorker *worker);
    void versionCheckCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getOauthTokenSignal(OAITokenResponse summary);
    void healthCheckSignal();
    void listFileContentSearchResultsSignal(QList<OAIFileContentSearchResult> summary);
    void listRetrievedFilesSignal(QList<OAIRetrievedFile> summary);
    void listSecretSearchResultsSignal(QList<OAISecretSearchResult> summary);
    void pingSignal(QString summary);
    void versionCheckSignal(OAIServiceVersion summary);


    void getOauthTokenSignalFull(OAIHttpRequestWorker *worker, OAITokenResponse summary);
    void healthCheckSignalFull(OAIHttpRequestWorker *worker);
    void listFileContentSearchResultsSignalFull(OAIHttpRequestWorker *worker, QList<OAIFileContentSearchResult> summary);
    void listRetrievedFilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIRetrievedFile> summary);
    void listSecretSearchResultsSignalFull(OAIHttpRequestWorker *worker, QList<OAISecretSearchResult> summary);
    void pingSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void versionCheckSignalFull(OAIHttpRequestWorker *worker, OAIServiceVersion summary);

    Q_DECL_DEPRECATED_X("Use getOauthTokenSignalError() instead")
    void getOauthTokenSignalE(OAITokenResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOauthTokenSignalError(OAITokenResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthCheckSignalError() instead")
    void healthCheckSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void healthCheckSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFileContentSearchResultsSignalError() instead")
    void listFileContentSearchResultsSignalE(QList<OAIFileContentSearchResult> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFileContentSearchResultsSignalError(QList<OAIFileContentSearchResult> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRetrievedFilesSignalError() instead")
    void listRetrievedFilesSignalE(QList<OAIRetrievedFile> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRetrievedFilesSignalError(QList<OAIRetrievedFile> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSecretSearchResultsSignalError() instead")
    void listSecretSearchResultsSignalE(QList<OAISecretSearchResult> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSecretSearchResultsSignalError(QList<OAISecretSearchResult> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pingSignalError() instead")
    void pingSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pingSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use versionCheckSignalError() instead")
    void versionCheckSignalE(OAIServiceVersion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void versionCheckSignalError(OAIServiceVersion summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getOauthTokenSignalErrorFull() instead")
    void getOauthTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOauthTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthCheckSignalErrorFull() instead")
    void healthCheckSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthCheckSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFileContentSearchResultsSignalErrorFull() instead")
    void listFileContentSearchResultsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFileContentSearchResultsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRetrievedFilesSignalErrorFull() instead")
    void listRetrievedFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRetrievedFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSecretSearchResultsSignalErrorFull() instead")
    void listSecretSearchResultsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSecretSearchResultsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pingSignalErrorFull() instead")
    void pingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use versionCheckSignalErrorFull() instead")
    void versionCheckSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void versionCheckSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
