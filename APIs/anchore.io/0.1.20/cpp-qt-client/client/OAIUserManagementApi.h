/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserManagementApi_H
#define OAI_OAIUserManagementApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccessCredential.h"
#include "OAIAccount.h"
#include "OAIAccountCreationRequest.h"
#include "OAIAccountStatus.h"
#include "OAIApiErrorResponse.h"
#include "OAIUser.h"
#include "OAIUserCreationRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserManagementApi : public QObject {
    Q_OBJECT

public:
    OAIUserManagementApi(const int timeOut = 0);
    ~OAIUserManagementApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_account_creation_request OAIAccountCreationRequest [required]
    */
    virtual void createAccount(const OAIAccountCreationRequest &oai_account_creation_request);

    /**
    * @param[in]  accountname QString [required]
    * @param[in]  oai_user_creation_request OAIUserCreationRequest [required]
    */
    virtual void createUser(const QString &accountname, const OAIUserCreationRequest &oai_user_creation_request);

    /**
    * @param[in]  accountname QString [required]
    * @param[in]  username QString [required]
    * @param[in]  oai_access_credential OAIAccessCredential [required]
    */
    virtual void createUserCredential(const QString &accountname, const QString &username, const OAIAccessCredential &oai_access_credential);

    /**
    * @param[in]  accountname QString [required]
    */
    virtual void deleteAccount(const QString &accountname);

    /**
    * @param[in]  accountname QString [required]
    * @param[in]  username QString [required]
    */
    virtual void deleteUser(const QString &accountname, const QString &username);

    /**
    * @param[in]  accountname QString [required]
    * @param[in]  username QString [required]
    * @param[in]  credential_type QString [required]
    */
    virtual void deleteUserCredential(const QString &accountname, const QString &username, const QString &credential_type);

    /**
    * @param[in]  accountname QString [required]
    */
    virtual void getAccount(const QString &accountname);

    /**
    * @param[in]  accountname QString [required]
    * @param[in]  username QString [required]
    */
    virtual void getAccountUser(const QString &accountname, const QString &username);

    /**
    * @param[in]  state QString [optional]
    */
    virtual void listAccounts(const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  accountname QString [required]
    * @param[in]  username QString [required]
    */
    virtual void listUserCredentials(const QString &accountname, const QString &username);

    /**
    * @param[in]  accountname QString [required]
    */
    virtual void listUsers(const QString &accountname);

    /**
    * @param[in]  accountname QString [required]
    * @param[in]  oai_account_status OAIAccountStatus [required]
    */
    virtual void updateAccountState(const QString &accountname, const OAIAccountStatus &oai_account_status);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createAccountCallback(OAIHttpRequestWorker *worker);
    void createUserCallback(OAIHttpRequestWorker *worker);
    void createUserCredentialCallback(OAIHttpRequestWorker *worker);
    void deleteAccountCallback(OAIHttpRequestWorker *worker);
    void deleteUserCallback(OAIHttpRequestWorker *worker);
    void deleteUserCredentialCallback(OAIHttpRequestWorker *worker);
    void getAccountCallback(OAIHttpRequestWorker *worker);
    void getAccountUserCallback(OAIHttpRequestWorker *worker);
    void listAccountsCallback(OAIHttpRequestWorker *worker);
    void listUserCredentialsCallback(OAIHttpRequestWorker *worker);
    void listUsersCallback(OAIHttpRequestWorker *worker);
    void updateAccountStateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createAccountSignal(OAIAccount summary);
    void createUserSignal(OAIUser summary);
    void createUserCredentialSignal(OAIUser summary);
    void deleteAccountSignal();
    void deleteUserSignal();
    void deleteUserCredentialSignal();
    void getAccountSignal(OAIAccount summary);
    void getAccountUserSignal(OAIUser summary);
    void listAccountsSignal(QList<OAIAccount> summary);
    void listUserCredentialsSignal(QList<OAIAccessCredential> summary);
    void listUsersSignal(QList<OAIUser> summary);
    void updateAccountStateSignal(OAIAccountStatus summary);


    void createAccountSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void createUserSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void createUserCredentialSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void deleteAccountSignalFull(OAIHttpRequestWorker *worker);
    void deleteUserSignalFull(OAIHttpRequestWorker *worker);
    void deleteUserCredentialSignalFull(OAIHttpRequestWorker *worker);
    void getAccountSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void getAccountUserSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void listAccountsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccount> summary);
    void listUserCredentialsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccessCredential> summary);
    void listUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void updateAccountStateSignalFull(OAIHttpRequestWorker *worker, OAIAccountStatus summary);

    Q_DECL_DEPRECATED_X("Use createAccountSignalError() instead")
    void createAccountSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAccountSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createUserSignalError() instead")
    void createUserSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createUserSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createUserCredentialSignalError() instead")
    void createUserCredentialSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createUserCredentialSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccountSignalError() instead")
    void deleteAccountSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccountSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserSignalError() instead")
    void deleteUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserCredentialSignalError() instead")
    void deleteUserCredentialSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserCredentialSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountSignalError() instead")
    void getAccountSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountUserSignalError() instead")
    void getAccountUserSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountUserSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccountsSignalError() instead")
    void listAccountsSignalE(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccountsSignalError(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserCredentialsSignalError() instead")
    void listUserCredentialsSignalE(QList<OAIAccessCredential> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listUserCredentialsSignalError(QList<OAIAccessCredential> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUsersSignalError() instead")
    void listUsersSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listUsersSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountStateSignalError() instead")
    void updateAccountStateSignalE(OAIAccountStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountStateSignalError(OAIAccountStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createAccountSignalErrorFull() instead")
    void createAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createUserSignalErrorFull() instead")
    void createUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createUserCredentialSignalErrorFull() instead")
    void createUserCredentialSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createUserCredentialSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccountSignalErrorFull() instead")
    void deleteAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserSignalErrorFull() instead")
    void deleteUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserCredentialSignalErrorFull() instead")
    void deleteUserCredentialSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserCredentialSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountSignalErrorFull() instead")
    void getAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountUserSignalErrorFull() instead")
    void getAccountUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccountsSignalErrorFull() instead")
    void listAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserCredentialsSignalErrorFull() instead")
    void listUserCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listUserCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUsersSignalErrorFull() instead")
    void listUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountStateSignalErrorFull() instead")
    void updateAccountStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
