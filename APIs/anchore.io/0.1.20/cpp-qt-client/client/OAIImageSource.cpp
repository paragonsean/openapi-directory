/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageSource::OAIImageSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageSource::OAIImageSource() {
    this->initializeModel();
}

OAIImageSource::~OAIImageSource() {}

void OAIImageSource::initializeModel() {

    m_archive_isSet = false;
    m_archive_isValid = false;

    m_digest_isSet = false;
    m_digest_isValid = false;

    m_import_isSet = false;
    m_import_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;
}

void OAIImageSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageSource::fromJsonObject(QJsonObject json) {

    m_archive_isValid = ::OpenAPI::fromJsonValue(m_archive, json[QString("archive")]);
    m_archive_isSet = !json[QString("archive")].isNull() && m_archive_isValid;

    m_digest_isValid = ::OpenAPI::fromJsonValue(m_digest, json[QString("digest")]);
    m_digest_isSet = !json[QString("digest")].isNull() && m_digest_isValid;

    m_import_isValid = ::OpenAPI::fromJsonValue(m_import, json[QString("import")]);
    m_import_isSet = !json[QString("import")].isNull() && m_import_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;
}

QString OAIImageSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageSource::asJsonObject() const {
    QJsonObject obj;
    if (m_archive.isSet()) {
        obj.insert(QString("archive"), ::OpenAPI::toJsonValue(m_archive));
    }
    if (m_digest.isSet()) {
        obj.insert(QString("digest"), ::OpenAPI::toJsonValue(m_digest));
    }
    if (m_import.isSet()) {
        obj.insert(QString("import"), ::OpenAPI::toJsonValue(m_import));
    }
    if (m_tag.isSet()) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    return obj;
}

OAIAnalysisArchiveSource OAIImageSource::getArchive() const {
    return m_archive;
}
void OAIImageSource::setArchive(const OAIAnalysisArchiveSource &archive) {
    m_archive = archive;
    m_archive_isSet = true;
}

bool OAIImageSource::is_archive_Set() const{
    return m_archive_isSet;
}

bool OAIImageSource::is_archive_Valid() const{
    return m_archive_isValid;
}

OAIRegistryDigestSource OAIImageSource::getDigest() const {
    return m_digest;
}
void OAIImageSource::setDigest(const OAIRegistryDigestSource &digest) {
    m_digest = digest;
    m_digest_isSet = true;
}

bool OAIImageSource::is_digest_Set() const{
    return m_digest_isSet;
}

bool OAIImageSource::is_digest_Valid() const{
    return m_digest_isValid;
}

OAIImageImportManifest OAIImageSource::getImport() const {
    return m_import;
}
void OAIImageSource::setImport(const OAIImageImportManifest &import) {
    m_import = import;
    m_import_isSet = true;
}

bool OAIImageSource::is_import_Set() const{
    return m_import_isSet;
}

bool OAIImageSource::is_import_Valid() const{
    return m_import_isValid;
}

OAIRegistryTagSource OAIImageSource::getTag() const {
    return m_tag;
}
void OAIImageSource::setTag(const OAIRegistryTagSource &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIImageSource::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIImageSource::is_tag_Valid() const{
    return m_tag_isValid;
}

bool OAIImageSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archive.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_digest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_import.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
