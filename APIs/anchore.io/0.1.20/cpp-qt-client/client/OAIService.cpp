/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIService::OAIService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIService::OAIService() {
    this->initializeModel();
}

OAIService::~OAIService() {}

void OAIService::initializeModel() {

    m_base_url_isSet = false;
    m_base_url_isValid = false;

    m_hostid_isSet = false;
    m_hostid_isValid = false;

    m_service_detail_isSet = false;
    m_service_detail_isValid = false;

    m_servicename_isSet = false;
    m_servicename_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIService::fromJsonObject(QJsonObject json) {

    m_base_url_isValid = ::OpenAPI::fromJsonValue(m_base_url, json[QString("base_url")]);
    m_base_url_isSet = !json[QString("base_url")].isNull() && m_base_url_isValid;

    m_hostid_isValid = ::OpenAPI::fromJsonValue(m_hostid, json[QString("hostid")]);
    m_hostid_isSet = !json[QString("hostid")].isNull() && m_hostid_isValid;

    m_service_detail_isValid = ::OpenAPI::fromJsonValue(m_service_detail, json[QString("service_detail")]);
    m_service_detail_isSet = !json[QString("service_detail")].isNull() && m_service_detail_isValid;

    m_servicename_isValid = ::OpenAPI::fromJsonValue(m_servicename, json[QString("servicename")]);
    m_servicename_isSet = !json[QString("servicename")].isNull() && m_servicename_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("status_message")]);
    m_status_message_isSet = !json[QString("status_message")].isNull() && m_status_message_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIService::asJsonObject() const {
    QJsonObject obj;
    if (m_base_url_isSet) {
        obj.insert(QString("base_url"), ::OpenAPI::toJsonValue(m_base_url));
    }
    if (m_hostid_isSet) {
        obj.insert(QString("hostid"), ::OpenAPI::toJsonValue(m_hostid));
    }
    if (m_service_detail.isSet()) {
        obj.insert(QString("service_detail"), ::OpenAPI::toJsonValue(m_service_detail));
    }
    if (m_servicename_isSet) {
        obj.insert(QString("servicename"), ::OpenAPI::toJsonValue(m_servicename));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("status_message"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIService::getBaseUrl() const {
    return m_base_url;
}
void OAIService::setBaseUrl(const QString &base_url) {
    m_base_url = base_url;
    m_base_url_isSet = true;
}

bool OAIService::is_base_url_Set() const{
    return m_base_url_isSet;
}

bool OAIService::is_base_url_Valid() const{
    return m_base_url_isValid;
}

QString OAIService::getHostid() const {
    return m_hostid;
}
void OAIService::setHostid(const QString &hostid) {
    m_hostid = hostid;
    m_hostid_isSet = true;
}

bool OAIService::is_hostid_Set() const{
    return m_hostid_isSet;
}

bool OAIService::is_hostid_Valid() const{
    return m_hostid_isValid;
}

OAIStatusResponse OAIService::getServiceDetail() const {
    return m_service_detail;
}
void OAIService::setServiceDetail(const OAIStatusResponse &service_detail) {
    m_service_detail = service_detail;
    m_service_detail_isSet = true;
}

bool OAIService::is_service_detail_Set() const{
    return m_service_detail_isSet;
}

bool OAIService::is_service_detail_Valid() const{
    return m_service_detail_isValid;
}

QString OAIService::getServicename() const {
    return m_servicename;
}
void OAIService::setServicename(const QString &servicename) {
    m_servicename = servicename;
    m_servicename_isSet = true;
}

bool OAIService::is_servicename_Set() const{
    return m_servicename_isSet;
}

bool OAIService::is_servicename_Valid() const{
    return m_servicename_isValid;
}

bool OAIService::isStatus() const {
    return m_status;
}
void OAIService::setStatus(const bool &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIService::is_status_Set() const{
    return m_status_isSet;
}

bool OAIService::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIService::getStatusMessage() const {
    return m_status_message;
}
void OAIService::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIService::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIService::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QString OAIService::getVersion() const {
    return m_version;
}
void OAIService::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIService::is_version_Set() const{
    return m_version_isSet;
}

bool OAIService::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_servicename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIService::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
