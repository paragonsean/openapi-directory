/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecretSearchResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecretSearchResult::OAISecretSearchResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecretSearchResult::OAISecretSearchResult() {
    this->initializeModel();
}

OAISecretSearchResult::~OAISecretSearchResult() {}

void OAISecretSearchResult::initializeModel() {

    m_matches_isSet = false;
    m_matches_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;
}

void OAISecretSearchResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecretSearchResult::fromJsonObject(QJsonObject json) {

    m_matches_isValid = ::OpenAPI::fromJsonValue(m_matches, json[QString("matches")]);
    m_matches_isSet = !json[QString("matches")].isNull() && m_matches_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;
}

QString OAISecretSearchResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecretSearchResult::asJsonObject() const {
    QJsonObject obj;
    if (m_matches.size() > 0) {
        obj.insert(QString("matches"), ::OpenAPI::toJsonValue(m_matches));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    return obj;
}

QList<OAIRegexContentMatch> OAISecretSearchResult::getMatches() const {
    return m_matches;
}
void OAISecretSearchResult::setMatches(const QList<OAIRegexContentMatch> &matches) {
    m_matches = matches;
    m_matches_isSet = true;
}

bool OAISecretSearchResult::is_matches_Set() const{
    return m_matches_isSet;
}

bool OAISecretSearchResult::is_matches_Valid() const{
    return m_matches_isValid;
}

QString OAISecretSearchResult::getPath() const {
    return m_path;
}
void OAISecretSearchResult::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAISecretSearchResult::is_path_Set() const{
    return m_path_isSet;
}

bool OAISecretSearchResult::is_path_Valid() const{
    return m_path_isValid;
}

bool OAISecretSearchResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_matches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecretSearchResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
