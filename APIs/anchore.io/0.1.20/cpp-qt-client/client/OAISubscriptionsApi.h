/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISubscriptionsApi_H
#define OAI_OAISubscriptionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiErrorResponse.h"
#include "OAISubscription.h"
#include "OAISubscriptionRequest.h"
#include "OAISubscriptionUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISubscriptionsApi : public QObject {
    Q_OBJECT

public:
    OAISubscriptionsApi(const int timeOut = 0);
    ~OAISubscriptionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_subscription_request OAISubscriptionRequest [required]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void addSubscription(const OAISubscriptionRequest &oai_subscription_request, const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void deleteSubscription(const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void getSubscription(const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_key QString [optional]
    * @param[in]  subscription_type QString [optional]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void listSubscriptions(const ::OpenAPI::OptionalParam<QString> &subscription_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subscription_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  oai_subscription_update OAISubscriptionUpdate [required]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void updateSubscription(const QString &subscription_id, const OAISubscriptionUpdate &oai_subscription_update, const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addSubscriptionCallback(OAIHttpRequestWorker *worker);
    void deleteSubscriptionCallback(OAIHttpRequestWorker *worker);
    void getSubscriptionCallback(OAIHttpRequestWorker *worker);
    void listSubscriptionsCallback(OAIHttpRequestWorker *worker);
    void updateSubscriptionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addSubscriptionSignal(QList<OAISubscription> summary);
    void deleteSubscriptionSignal();
    void getSubscriptionSignal(QList<OAISubscription> summary);
    void listSubscriptionsSignal(QList<OAISubscription> summary);
    void updateSubscriptionSignal(QList<OAISubscription> summary);


    void addSubscriptionSignalFull(OAIHttpRequestWorker *worker, QList<OAISubscription> summary);
    void deleteSubscriptionSignalFull(OAIHttpRequestWorker *worker);
    void getSubscriptionSignalFull(OAIHttpRequestWorker *worker, QList<OAISubscription> summary);
    void listSubscriptionsSignalFull(OAIHttpRequestWorker *worker, QList<OAISubscription> summary);
    void updateSubscriptionSignalFull(OAIHttpRequestWorker *worker, QList<OAISubscription> summary);

    Q_DECL_DEPRECATED_X("Use addSubscriptionSignalError() instead")
    void addSubscriptionSignalE(QList<OAISubscription> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addSubscriptionSignalError(QList<OAISubscription> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSubscriptionSignalError() instead")
    void deleteSubscriptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSubscriptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubscriptionSignalError() instead")
    void getSubscriptionSignalE(QList<OAISubscription> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubscriptionSignalError(QList<OAISubscription> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSubscriptionsSignalError() instead")
    void listSubscriptionsSignalE(QList<OAISubscription> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSubscriptionsSignalError(QList<OAISubscription> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSubscriptionSignalError() instead")
    void updateSubscriptionSignalE(QList<OAISubscription> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSubscriptionSignalError(QList<OAISubscription> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addSubscriptionSignalErrorFull() instead")
    void addSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSubscriptionSignalErrorFull() instead")
    void deleteSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubscriptionSignalErrorFull() instead")
    void getSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSubscriptionsSignalErrorFull() instead")
    void listSubscriptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSubscriptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSubscriptionSignalErrorFull() instead")
    void updateSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
