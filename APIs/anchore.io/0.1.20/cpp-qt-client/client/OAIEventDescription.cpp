/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventDescription::OAIEventDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventDescription::OAIEventDescription() {
    this->initializeModel();
}

OAIEventDescription::~OAIEventDescription() {}

void OAIEventDescription::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIEventDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventDescription::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resource_type")]);
    m_resource_type_isSet = !json[QString("resource_type")].isNull() && m_resource_type_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIEventDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resource_type"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIEventDescription::getMessage() const {
    return m_message;
}
void OAIEventDescription::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIEventDescription::is_message_Set() const{
    return m_message_isSet;
}

bool OAIEventDescription::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIEventDescription::getName() const {
    return m_name;
}
void OAIEventDescription::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEventDescription::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEventDescription::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEventDescription::getResourceType() const {
    return m_resource_type;
}
void OAIEventDescription::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIEventDescription::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIEventDescription::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIEventDescription::getType() const {
    return m_type;
}
void OAIEventDescription::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEventDescription::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEventDescription::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIEventDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
