/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContentJAVAPackageResponse_content_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContentJAVAPackageResponse_content_inner::OAIContentJAVAPackageResponse_content_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContentJAVAPackageResponse_content_inner::OAIContentJAVAPackageResponse_content_inner() {
    this->initializeModel();
}

OAIContentJAVAPackageResponse_content_inner::~OAIContentJAVAPackageResponse_content_inner() {}

void OAIContentJAVAPackageResponse_content_inner::initializeModel() {

    m_cpes_isSet = false;
    m_cpes_isValid = false;

    m_implementation_version_isSet = false;
    m_implementation_version_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_maven_version_isSet = false;
    m_maven_version_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_package_isSet = false;
    m_package_isValid = false;

    m_specification_version_isSet = false;
    m_specification_version_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIContentJAVAPackageResponse_content_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContentJAVAPackageResponse_content_inner::fromJsonObject(QJsonObject json) {

    m_cpes_isValid = ::OpenAPI::fromJsonValue(m_cpes, json[QString("cpes")]);
    m_cpes_isSet = !json[QString("cpes")].isNull() && m_cpes_isValid;

    m_implementation_version_isValid = ::OpenAPI::fromJsonValue(m_implementation_version, json[QString("implementation-version")]);
    m_implementation_version_isSet = !json[QString("implementation-version")].isNull() && m_implementation_version_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_maven_version_isValid = ::OpenAPI::fromJsonValue(m_maven_version, json[QString("maven-version")]);
    m_maven_version_isSet = !json[QString("maven-version")].isNull() && m_maven_version_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_package_isValid = ::OpenAPI::fromJsonValue(m_package, json[QString("package")]);
    m_package_isSet = !json[QString("package")].isNull() && m_package_isValid;

    m_specification_version_isValid = ::OpenAPI::fromJsonValue(m_specification_version, json[QString("specification-version")]);
    m_specification_version_isSet = !json[QString("specification-version")].isNull() && m_specification_version_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIContentJAVAPackageResponse_content_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContentJAVAPackageResponse_content_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_cpes.size() > 0) {
        obj.insert(QString("cpes"), ::OpenAPI::toJsonValue(m_cpes));
    }
    if (m_implementation_version_isSet) {
        obj.insert(QString("implementation-version"), ::OpenAPI::toJsonValue(m_implementation_version));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_maven_version_isSet) {
        obj.insert(QString("maven-version"), ::OpenAPI::toJsonValue(m_maven_version));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_package_isSet) {
        obj.insert(QString("package"), ::OpenAPI::toJsonValue(m_package));
    }
    if (m_specification_version_isSet) {
        obj.insert(QString("specification-version"), ::OpenAPI::toJsonValue(m_specification_version));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QString> OAIContentJAVAPackageResponse_content_inner::getCpes() const {
    return m_cpes;
}
void OAIContentJAVAPackageResponse_content_inner::setCpes(const QList<QString> &cpes) {
    m_cpes = cpes;
    m_cpes_isSet = true;
}

bool OAIContentJAVAPackageResponse_content_inner::is_cpes_Set() const{
    return m_cpes_isSet;
}

bool OAIContentJAVAPackageResponse_content_inner::is_cpes_Valid() const{
    return m_cpes_isValid;
}

QString OAIContentJAVAPackageResponse_content_inner::getImplementationVersion() const {
    return m_implementation_version;
}
void OAIContentJAVAPackageResponse_content_inner::setImplementationVersion(const QString &implementation_version) {
    m_implementation_version = implementation_version;
    m_implementation_version_isSet = true;
}

bool OAIContentJAVAPackageResponse_content_inner::is_implementation_version_Set() const{
    return m_implementation_version_isSet;
}

bool OAIContentJAVAPackageResponse_content_inner::is_implementation_version_Valid() const{
    return m_implementation_version_isValid;
}

QString OAIContentJAVAPackageResponse_content_inner::getLocation() const {
    return m_location;
}
void OAIContentJAVAPackageResponse_content_inner::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIContentJAVAPackageResponse_content_inner::is_location_Set() const{
    return m_location_isSet;
}

bool OAIContentJAVAPackageResponse_content_inner::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIContentJAVAPackageResponse_content_inner::getMavenVersion() const {
    return m_maven_version;
}
void OAIContentJAVAPackageResponse_content_inner::setMavenVersion(const QString &maven_version) {
    m_maven_version = maven_version;
    m_maven_version_isSet = true;
}

bool OAIContentJAVAPackageResponse_content_inner::is_maven_version_Set() const{
    return m_maven_version_isSet;
}

bool OAIContentJAVAPackageResponse_content_inner::is_maven_version_Valid() const{
    return m_maven_version_isValid;
}

QString OAIContentJAVAPackageResponse_content_inner::getOrigin() const {
    return m_origin;
}
void OAIContentJAVAPackageResponse_content_inner::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIContentJAVAPackageResponse_content_inner::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIContentJAVAPackageResponse_content_inner::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAIContentJAVAPackageResponse_content_inner::getPackage() const {
    return m_package;
}
void OAIContentJAVAPackageResponse_content_inner::setPackage(const QString &package) {
    m_package = package;
    m_package_isSet = true;
}

bool OAIContentJAVAPackageResponse_content_inner::is_package_Set() const{
    return m_package_isSet;
}

bool OAIContentJAVAPackageResponse_content_inner::is_package_Valid() const{
    return m_package_isValid;
}

QString OAIContentJAVAPackageResponse_content_inner::getSpecificationVersion() const {
    return m_specification_version;
}
void OAIContentJAVAPackageResponse_content_inner::setSpecificationVersion(const QString &specification_version) {
    m_specification_version = specification_version;
    m_specification_version_isSet = true;
}

bool OAIContentJAVAPackageResponse_content_inner::is_specification_version_Set() const{
    return m_specification_version_isSet;
}

bool OAIContentJAVAPackageResponse_content_inner::is_specification_version_Valid() const{
    return m_specification_version_isValid;
}

QString OAIContentJAVAPackageResponse_content_inner::getType() const {
    return m_type;
}
void OAIContentJAVAPackageResponse_content_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIContentJAVAPackageResponse_content_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIContentJAVAPackageResponse_content_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIContentJAVAPackageResponse_content_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cpes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_implementation_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maven_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_specification_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContentJAVAPackageResponse_content_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
