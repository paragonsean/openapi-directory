/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMappingRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMappingRule::OAIMappingRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMappingRule::OAIMappingRule() {
    this->initializeModel();
}

OAIMappingRule::~OAIMappingRule() {}

void OAIMappingRule::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_policy_id_isSet = false;
    m_policy_id_isValid = false;

    m_policy_ids_isSet = false;
    m_policy_ids_isValid = false;

    m_registry_isSet = false;
    m_registry_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_whitelist_ids_isSet = false;
    m_whitelist_ids_isValid = false;
}

void OAIMappingRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMappingRule::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_policy_id_isValid = ::OpenAPI::fromJsonValue(m_policy_id, json[QString("policy_id")]);
    m_policy_id_isSet = !json[QString("policy_id")].isNull() && m_policy_id_isValid;

    m_policy_ids_isValid = ::OpenAPI::fromJsonValue(m_policy_ids, json[QString("policy_ids")]);
    m_policy_ids_isSet = !json[QString("policy_ids")].isNull() && m_policy_ids_isValid;

    m_registry_isValid = ::OpenAPI::fromJsonValue(m_registry, json[QString("registry")]);
    m_registry_isSet = !json[QString("registry")].isNull() && m_registry_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_whitelist_ids_isValid = ::OpenAPI::fromJsonValue(m_whitelist_ids, json[QString("whitelist_ids")]);
    m_whitelist_ids_isSet = !json[QString("whitelist_ids")].isNull() && m_whitelist_ids_isValid;
}

QString OAIMappingRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMappingRule::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_policy_id_isSet) {
        obj.insert(QString("policy_id"), ::OpenAPI::toJsonValue(m_policy_id));
    }
    if (m_policy_ids.size() > 0) {
        obj.insert(QString("policy_ids"), ::OpenAPI::toJsonValue(m_policy_ids));
    }
    if (m_registry_isSet) {
        obj.insert(QString("registry"), ::OpenAPI::toJsonValue(m_registry));
    }
    if (m_repository_isSet) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_whitelist_ids.size() > 0) {
        obj.insert(QString("whitelist_ids"), ::OpenAPI::toJsonValue(m_whitelist_ids));
    }
    return obj;
}

QString OAIMappingRule::getId() const {
    return m_id;
}
void OAIMappingRule::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMappingRule::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMappingRule::is_id_Valid() const{
    return m_id_isValid;
}

OAIImageRef OAIMappingRule::getImage() const {
    return m_image;
}
void OAIMappingRule::setImage(const OAIImageRef &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIMappingRule::is_image_Set() const{
    return m_image_isSet;
}

bool OAIMappingRule::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIMappingRule::getName() const {
    return m_name;
}
void OAIMappingRule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMappingRule::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMappingRule::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMappingRule::getPolicyId() const {
    return m_policy_id;
}
void OAIMappingRule::setPolicyId(const QString &policy_id) {
    m_policy_id = policy_id;
    m_policy_id_isSet = true;
}

bool OAIMappingRule::is_policy_id_Set() const{
    return m_policy_id_isSet;
}

bool OAIMappingRule::is_policy_id_Valid() const{
    return m_policy_id_isValid;
}

QList<QString> OAIMappingRule::getPolicyIds() const {
    return m_policy_ids;
}
void OAIMappingRule::setPolicyIds(const QList<QString> &policy_ids) {
    m_policy_ids = policy_ids;
    m_policy_ids_isSet = true;
}

bool OAIMappingRule::is_policy_ids_Set() const{
    return m_policy_ids_isSet;
}

bool OAIMappingRule::is_policy_ids_Valid() const{
    return m_policy_ids_isValid;
}

QString OAIMappingRule::getRegistry() const {
    return m_registry;
}
void OAIMappingRule::setRegistry(const QString &registry) {
    m_registry = registry;
    m_registry_isSet = true;
}

bool OAIMappingRule::is_registry_Set() const{
    return m_registry_isSet;
}

bool OAIMappingRule::is_registry_Valid() const{
    return m_registry_isValid;
}

QString OAIMappingRule::getRepository() const {
    return m_repository;
}
void OAIMappingRule::setRepository(const QString &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAIMappingRule::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAIMappingRule::is_repository_Valid() const{
    return m_repository_isValid;
}

QList<QString> OAIMappingRule::getWhitelistIds() const {
    return m_whitelist_ids;
}
void OAIMappingRule::setWhitelistIds(const QList<QString> &whitelist_ids) {
    m_whitelist_ids = whitelist_ids;
    m_whitelist_ids_isSet = true;
}

bool OAIMappingRule::is_whitelist_ids_Set() const{
    return m_whitelist_ids_isSet;
}

bool OAIMappingRule::is_whitelist_ids_Valid() const{
    return m_whitelist_ids_isValid;
}

bool OAIMappingRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_whitelist_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMappingRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_image_isValid && m_name_isValid && m_registry_isValid && m_repository_isValid && true;
}

} // namespace OpenAPI
