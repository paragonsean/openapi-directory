/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVulnerabilityReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVulnerabilityReference::OAIVulnerabilityReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVulnerabilityReference::OAIVulnerabilityReference() {
    this->initializeModel();
}

OAIVulnerabilityReference::~OAIVulnerabilityReference() {}

void OAIVulnerabilityReference::initializeModel() {

    m_source_isSet = false;
    m_source_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIVulnerabilityReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVulnerabilityReference::fromJsonObject(QJsonObject json) {

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIVulnerabilityReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVulnerabilityReference::asJsonObject() const {
    QJsonObject obj;
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIVulnerabilityReference::getSource() const {
    return m_source;
}
void OAIVulnerabilityReference::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIVulnerabilityReference::is_source_Set() const{
    return m_source_isSet;
}

bool OAIVulnerabilityReference::is_source_Valid() const{
    return m_source_isValid;
}

QList<QString> OAIVulnerabilityReference::getTags() const {
    return m_tags;
}
void OAIVulnerabilityReference::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIVulnerabilityReference::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIVulnerabilityReference::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIVulnerabilityReference::getUrl() const {
    return m_url;
}
void OAIVulnerabilityReference::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIVulnerabilityReference::is_url_Set() const{
    return m_url_isSet;
}

bool OAIVulnerabilityReference::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIVulnerabilityReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVulnerabilityReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
