/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisArchiveTransitionRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysisArchiveTransitionRule::OAIAnalysisArchiveTransitionRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysisArchiveTransitionRule::OAIAnalysisArchiveTransitionRule() {
    this->initializeModel();
}

OAIAnalysisArchiveTransitionRule::~OAIAnalysisArchiveTransitionRule() {}

void OAIAnalysisArchiveTransitionRule::initializeModel() {

    m_analysis_age_days_isSet = false;
    m_analysis_age_days_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_exclude_isSet = false;
    m_exclude_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_max_images_per_account_isSet = false;
    m_max_images_per_account_isValid = false;

    m_rule_id_isSet = false;
    m_rule_id_isValid = false;

    m_selector_isSet = false;
    m_selector_isValid = false;

    m_system_global_isSet = false;
    m_system_global_isValid = false;

    m_tag_versions_newer_isSet = false;
    m_tag_versions_newer_isValid = false;

    m_transition_isSet = false;
    m_transition_isValid = false;
}

void OAIAnalysisArchiveTransitionRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysisArchiveTransitionRule::fromJsonObject(QJsonObject json) {

    m_analysis_age_days_isValid = ::OpenAPI::fromJsonValue(m_analysis_age_days, json[QString("analysis_age_days")]);
    m_analysis_age_days_isSet = !json[QString("analysis_age_days")].isNull() && m_analysis_age_days_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_exclude_isValid = ::OpenAPI::fromJsonValue(m_exclude, json[QString("exclude")]);
    m_exclude_isSet = !json[QString("exclude")].isNull() && m_exclude_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_max_images_per_account_isValid = ::OpenAPI::fromJsonValue(m_max_images_per_account, json[QString("max_images_per_account")]);
    m_max_images_per_account_isSet = !json[QString("max_images_per_account")].isNull() && m_max_images_per_account_isValid;

    m_rule_id_isValid = ::OpenAPI::fromJsonValue(m_rule_id, json[QString("rule_id")]);
    m_rule_id_isSet = !json[QString("rule_id")].isNull() && m_rule_id_isValid;

    m_selector_isValid = ::OpenAPI::fromJsonValue(m_selector, json[QString("selector")]);
    m_selector_isSet = !json[QString("selector")].isNull() && m_selector_isValid;

    m_system_global_isValid = ::OpenAPI::fromJsonValue(m_system_global, json[QString("system_global")]);
    m_system_global_isSet = !json[QString("system_global")].isNull() && m_system_global_isValid;

    m_tag_versions_newer_isValid = ::OpenAPI::fromJsonValue(m_tag_versions_newer, json[QString("tag_versions_newer")]);
    m_tag_versions_newer_isSet = !json[QString("tag_versions_newer")].isNull() && m_tag_versions_newer_isValid;

    m_transition_isValid = ::OpenAPI::fromJsonValue(m_transition, json[QString("transition")]);
    m_transition_isSet = !json[QString("transition")].isNull() && m_transition_isValid;
}

QString OAIAnalysisArchiveTransitionRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysisArchiveTransitionRule::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_age_days_isSet) {
        obj.insert(QString("analysis_age_days"), ::OpenAPI::toJsonValue(m_analysis_age_days));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_exclude.isSet()) {
        obj.insert(QString("exclude"), ::OpenAPI::toJsonValue(m_exclude));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_max_images_per_account_isSet) {
        obj.insert(QString("max_images_per_account"), ::OpenAPI::toJsonValue(m_max_images_per_account));
    }
    if (m_rule_id_isSet) {
        obj.insert(QString("rule_id"), ::OpenAPI::toJsonValue(m_rule_id));
    }
    if (m_selector.isSet()) {
        obj.insert(QString("selector"), ::OpenAPI::toJsonValue(m_selector));
    }
    if (m_system_global_isSet) {
        obj.insert(QString("system_global"), ::OpenAPI::toJsonValue(m_system_global));
    }
    if (m_tag_versions_newer_isSet) {
        obj.insert(QString("tag_versions_newer"), ::OpenAPI::toJsonValue(m_tag_versions_newer));
    }
    if (m_transition_isSet) {
        obj.insert(QString("transition"), ::OpenAPI::toJsonValue(m_transition));
    }
    return obj;
}

qint32 OAIAnalysisArchiveTransitionRule::getAnalysisAgeDays() const {
    return m_analysis_age_days;
}
void OAIAnalysisArchiveTransitionRule::setAnalysisAgeDays(const qint32 &analysis_age_days) {
    m_analysis_age_days = analysis_age_days;
    m_analysis_age_days_isSet = true;
}

bool OAIAnalysisArchiveTransitionRule::is_analysis_age_days_Set() const{
    return m_analysis_age_days_isSet;
}

bool OAIAnalysisArchiveTransitionRule::is_analysis_age_days_Valid() const{
    return m_analysis_age_days_isValid;
}

QDateTime OAIAnalysisArchiveTransitionRule::getCreatedAt() const {
    return m_created_at;
}
void OAIAnalysisArchiveTransitionRule::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAnalysisArchiveTransitionRule::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAnalysisArchiveTransitionRule::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIAnalysisArchiveTransitionRuleExclude OAIAnalysisArchiveTransitionRule::getExclude() const {
    return m_exclude;
}
void OAIAnalysisArchiveTransitionRule::setExclude(const OAIAnalysisArchiveTransitionRuleExclude &exclude) {
    m_exclude = exclude;
    m_exclude_isSet = true;
}

bool OAIAnalysisArchiveTransitionRule::is_exclude_Set() const{
    return m_exclude_isSet;
}

bool OAIAnalysisArchiveTransitionRule::is_exclude_Valid() const{
    return m_exclude_isValid;
}

QDateTime OAIAnalysisArchiveTransitionRule::getLastUpdated() const {
    return m_last_updated;
}
void OAIAnalysisArchiveTransitionRule::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIAnalysisArchiveTransitionRule::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIAnalysisArchiveTransitionRule::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

qint32 OAIAnalysisArchiveTransitionRule::getMaxImagesPerAccount() const {
    return m_max_images_per_account;
}
void OAIAnalysisArchiveTransitionRule::setMaxImagesPerAccount(const qint32 &max_images_per_account) {
    m_max_images_per_account = max_images_per_account;
    m_max_images_per_account_isSet = true;
}

bool OAIAnalysisArchiveTransitionRule::is_max_images_per_account_Set() const{
    return m_max_images_per_account_isSet;
}

bool OAIAnalysisArchiveTransitionRule::is_max_images_per_account_Valid() const{
    return m_max_images_per_account_isValid;
}

QString OAIAnalysisArchiveTransitionRule::getRuleId() const {
    return m_rule_id;
}
void OAIAnalysisArchiveTransitionRule::setRuleId(const QString &rule_id) {
    m_rule_id = rule_id;
    m_rule_id_isSet = true;
}

bool OAIAnalysisArchiveTransitionRule::is_rule_id_Set() const{
    return m_rule_id_isSet;
}

bool OAIAnalysisArchiveTransitionRule::is_rule_id_Valid() const{
    return m_rule_id_isValid;
}

OAIImageSelector OAIAnalysisArchiveTransitionRule::getSelector() const {
    return m_selector;
}
void OAIAnalysisArchiveTransitionRule::setSelector(const OAIImageSelector &selector) {
    m_selector = selector;
    m_selector_isSet = true;
}

bool OAIAnalysisArchiveTransitionRule::is_selector_Set() const{
    return m_selector_isSet;
}

bool OAIAnalysisArchiveTransitionRule::is_selector_Valid() const{
    return m_selector_isValid;
}

bool OAIAnalysisArchiveTransitionRule::isSystemGlobal() const {
    return m_system_global;
}
void OAIAnalysisArchiveTransitionRule::setSystemGlobal(const bool &system_global) {
    m_system_global = system_global;
    m_system_global_isSet = true;
}

bool OAIAnalysisArchiveTransitionRule::is_system_global_Set() const{
    return m_system_global_isSet;
}

bool OAIAnalysisArchiveTransitionRule::is_system_global_Valid() const{
    return m_system_global_isValid;
}

qint32 OAIAnalysisArchiveTransitionRule::getTagVersionsNewer() const {
    return m_tag_versions_newer;
}
void OAIAnalysisArchiveTransitionRule::setTagVersionsNewer(const qint32 &tag_versions_newer) {
    m_tag_versions_newer = tag_versions_newer;
    m_tag_versions_newer_isSet = true;
}

bool OAIAnalysisArchiveTransitionRule::is_tag_versions_newer_Set() const{
    return m_tag_versions_newer_isSet;
}

bool OAIAnalysisArchiveTransitionRule::is_tag_versions_newer_Valid() const{
    return m_tag_versions_newer_isValid;
}

QString OAIAnalysisArchiveTransitionRule::getTransition() const {
    return m_transition;
}
void OAIAnalysisArchiveTransitionRule::setTransition(const QString &transition) {
    m_transition = transition;
    m_transition_isSet = true;
}

bool OAIAnalysisArchiveTransitionRule::is_transition_Set() const{
    return m_transition_isSet;
}

bool OAIAnalysisArchiveTransitionRule::is_transition_Valid() const{
    return m_transition_isValid;
}

bool OAIAnalysisArchiveTransitionRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_age_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_images_per_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selector.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_global_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_versions_newer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transition_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysisArchiveTransitionRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_transition_isValid && true;
}

} // namespace OpenAPI
