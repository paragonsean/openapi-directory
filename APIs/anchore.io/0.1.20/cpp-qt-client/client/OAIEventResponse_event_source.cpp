/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventResponse_event_source.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventResponse_event_source::OAIEventResponse_event_source(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventResponse_event_source::OAIEventResponse_event_source() {
    this->initializeModel();
}

OAIEventResponse_event_source::~OAIEventResponse_event_source() {}

void OAIEventResponse_event_source::initializeModel() {

    m_base_url_isSet = false;
    m_base_url_isValid = false;

    m_hostid_isSet = false;
    m_hostid_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_servicename_isSet = false;
    m_servicename_isValid = false;
}

void OAIEventResponse_event_source::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventResponse_event_source::fromJsonObject(QJsonObject json) {

    m_base_url_isValid = ::OpenAPI::fromJsonValue(m_base_url, json[QString("base_url")]);
    m_base_url_isSet = !json[QString("base_url")].isNull() && m_base_url_isValid;

    m_hostid_isValid = ::OpenAPI::fromJsonValue(m_hostid, json[QString("hostid")]);
    m_hostid_isSet = !json[QString("hostid")].isNull() && m_hostid_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;

    m_servicename_isValid = ::OpenAPI::fromJsonValue(m_servicename, json[QString("servicename")]);
    m_servicename_isSet = !json[QString("servicename")].isNull() && m_servicename_isValid;
}

QString OAIEventResponse_event_source::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventResponse_event_source::asJsonObject() const {
    QJsonObject obj;
    if (m_base_url_isSet) {
        obj.insert(QString("base_url"), ::OpenAPI::toJsonValue(m_base_url));
    }
    if (m_hostid_isSet) {
        obj.insert(QString("hostid"), ::OpenAPI::toJsonValue(m_hostid));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_servicename_isSet) {
        obj.insert(QString("servicename"), ::OpenAPI::toJsonValue(m_servicename));
    }
    return obj;
}

QString OAIEventResponse_event_source::getBaseUrl() const {
    return m_base_url;
}
void OAIEventResponse_event_source::setBaseUrl(const QString &base_url) {
    m_base_url = base_url;
    m_base_url_isSet = true;
}

bool OAIEventResponse_event_source::is_base_url_Set() const{
    return m_base_url_isSet;
}

bool OAIEventResponse_event_source::is_base_url_Valid() const{
    return m_base_url_isValid;
}

QString OAIEventResponse_event_source::getHostid() const {
    return m_hostid;
}
void OAIEventResponse_event_source::setHostid(const QString &hostid) {
    m_hostid = hostid;
    m_hostid_isSet = true;
}

bool OAIEventResponse_event_source::is_hostid_Set() const{
    return m_hostid_isSet;
}

bool OAIEventResponse_event_source::is_hostid_Valid() const{
    return m_hostid_isValid;
}

QString OAIEventResponse_event_source::getRequestId() const {
    return m_request_id;
}
void OAIEventResponse_event_source::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIEventResponse_event_source::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIEventResponse_event_source::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAIEventResponse_event_source::getServicename() const {
    return m_servicename;
}
void OAIEventResponse_event_source::setServicename(const QString &servicename) {
    m_servicename = servicename;
    m_servicename_isSet = true;
}

bool OAIEventResponse_event_source::is_servicename_Set() const{
    return m_servicename_isSet;
}

bool OAIEventResponse_event_source::is_servicename_Valid() const{
    return m_servicename_isValid;
}

bool OAIEventResponse_event_source::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_servicename_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventResponse_event_source::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
