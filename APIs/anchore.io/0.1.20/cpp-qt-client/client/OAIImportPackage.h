/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIImportPackage.h
 *
 * 
 */

#ifndef OAIImportPackage_H
#define OAIImportPackage_H

#include <QJsonObject>

#include "OAIImportPackageLocation.h"
#include "OAIObject.h"
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIImportPackage : public OAIObject {
public:
    OAIImportPackage();
    OAIImportPackage(QString json);
    ~OAIImportPackage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getCpes() const;
    void setCpes(const QList<QString> &cpes);
    bool is_cpes_Set() const;
    bool is_cpes_Valid() const;

    QString getFoundBy() const;
    void setFoundBy(const QString &found_by);
    bool is_found_by_Set() const;
    bool is_found_by_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getLanguage() const;
    void setLanguage(const QString &language);
    bool is_language_Set() const;
    bool is_language_Valid() const;

    QList<QString> getLicenses() const;
    void setLicenses(const QList<QString> &licenses);
    bool is_licenses_Set() const;
    bool is_licenses_Valid() const;

    QList<OAIImportPackageLocation> getLocations() const;
    void setLocations(const QList<OAIImportPackageLocation> &locations);
    bool is_locations_Set() const;
    bool is_locations_Valid() const;

    OAIObject getMetadata() const;
    void setMetadata(const OAIObject &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    QString getMetadataType() const;
    void setMetadataType(const QString &metadata_type);
    bool is_metadata_type_Set() const;
    bool is_metadata_type_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPurl() const;
    void setPurl(const QString &purl);
    bool is_purl_Set() const;
    bool is_purl_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_cpes;
    bool m_cpes_isSet;
    bool m_cpes_isValid;

    QString m_found_by;
    bool m_found_by_isSet;
    bool m_found_by_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_language;
    bool m_language_isSet;
    bool m_language_isValid;

    QList<QString> m_licenses;
    bool m_licenses_isSet;
    bool m_licenses_isValid;

    QList<OAIImportPackageLocation> m_locations;
    bool m_locations_isSet;
    bool m_locations_isValid;

    OAIObject m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    QString m_metadata_type;
    bool m_metadata_type_isSet;
    bool m_metadata_type_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_purl;
    bool m_purl_isSet;
    bool m_purl_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIImportPackage)

#endif // OAIImportPackage_H
