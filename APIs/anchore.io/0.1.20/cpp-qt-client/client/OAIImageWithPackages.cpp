/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageWithPackages.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageWithPackages::OAIImageWithPackages(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageWithPackages::OAIImageWithPackages() {
    this->initializeModel();
}

OAIImageWithPackages::~OAIImageWithPackages() {}

void OAIImageWithPackages::initializeModel() {

    m_image_isSet = false;
    m_image_isValid = false;

    m_packages_isSet = false;
    m_packages_isValid = false;
}

void OAIImageWithPackages::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageWithPackages::fromJsonObject(QJsonObject json) {

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_packages_isValid = ::OpenAPI::fromJsonValue(m_packages, json[QString("packages")]);
    m_packages_isSet = !json[QString("packages")].isNull() && m_packages_isValid;
}

QString OAIImageWithPackages::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageWithPackages::asJsonObject() const {
    QJsonObject obj;
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_packages.size() > 0) {
        obj.insert(QString("packages"), ::OpenAPI::toJsonValue(m_packages));
    }
    return obj;
}

OAIImageReference OAIImageWithPackages::getImage() const {
    return m_image;
}
void OAIImageWithPackages::setImage(const OAIImageReference &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIImageWithPackages::is_image_Set() const{
    return m_image_isSet;
}

bool OAIImageWithPackages::is_image_Valid() const{
    return m_image_isValid;
}

QList<OAIPackageReference> OAIImageWithPackages::getPackages() const {
    return m_packages;
}
void OAIImageWithPackages::setPackages(const QList<OAIPackageReference> &packages) {
    m_packages = packages;
    m_packages_isSet = true;
}

bool OAIImageWithPackages::is_packages_Set() const{
    return m_packages_isSet;
}

bool OAIImageWithPackages::is_packages_Valid() const{
    return m_packages_isValid;
}

bool OAIImageWithPackages::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_packages.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageWithPackages::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
