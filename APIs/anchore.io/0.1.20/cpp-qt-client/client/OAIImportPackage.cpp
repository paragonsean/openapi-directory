/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportPackage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportPackage::OAIImportPackage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportPackage::OAIImportPackage() {
    this->initializeModel();
}

OAIImportPackage::~OAIImportPackage() {}

void OAIImportPackage::initializeModel() {

    m_cpes_isSet = false;
    m_cpes_isValid = false;

    m_found_by_isSet = false;
    m_found_by_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_licenses_isSet = false;
    m_licenses_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_metadata_type_isSet = false;
    m_metadata_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_purl_isSet = false;
    m_purl_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIImportPackage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportPackage::fromJsonObject(QJsonObject json) {

    m_cpes_isValid = ::OpenAPI::fromJsonValue(m_cpes, json[QString("cpes")]);
    m_cpes_isSet = !json[QString("cpes")].isNull() && m_cpes_isValid;

    m_found_by_isValid = ::OpenAPI::fromJsonValue(m_found_by, json[QString("foundBy")]);
    m_found_by_isSet = !json[QString("foundBy")].isNull() && m_found_by_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_licenses_isValid = ::OpenAPI::fromJsonValue(m_licenses, json[QString("licenses")]);
    m_licenses_isSet = !json[QString("licenses")].isNull() && m_licenses_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_metadata_type_isValid = ::OpenAPI::fromJsonValue(m_metadata_type, json[QString("metadataType")]);
    m_metadata_type_isSet = !json[QString("metadataType")].isNull() && m_metadata_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_purl_isValid = ::OpenAPI::fromJsonValue(m_purl, json[QString("purl")]);
    m_purl_isSet = !json[QString("purl")].isNull() && m_purl_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIImportPackage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportPackage::asJsonObject() const {
    QJsonObject obj;
    if (m_cpes.size() > 0) {
        obj.insert(QString("cpes"), ::OpenAPI::toJsonValue(m_cpes));
    }
    if (m_found_by_isSet) {
        obj.insert(QString("foundBy"), ::OpenAPI::toJsonValue(m_found_by));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_licenses.size() > 0) {
        obj.insert(QString("licenses"), ::OpenAPI::toJsonValue(m_licenses));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_metadata_type_isSet) {
        obj.insert(QString("metadataType"), ::OpenAPI::toJsonValue(m_metadata_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_purl_isSet) {
        obj.insert(QString("purl"), ::OpenAPI::toJsonValue(m_purl));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<QString> OAIImportPackage::getCpes() const {
    return m_cpes;
}
void OAIImportPackage::setCpes(const QList<QString> &cpes) {
    m_cpes = cpes;
    m_cpes_isSet = true;
}

bool OAIImportPackage::is_cpes_Set() const{
    return m_cpes_isSet;
}

bool OAIImportPackage::is_cpes_Valid() const{
    return m_cpes_isValid;
}

QString OAIImportPackage::getFoundBy() const {
    return m_found_by;
}
void OAIImportPackage::setFoundBy(const QString &found_by) {
    m_found_by = found_by;
    m_found_by_isSet = true;
}

bool OAIImportPackage::is_found_by_Set() const{
    return m_found_by_isSet;
}

bool OAIImportPackage::is_found_by_Valid() const{
    return m_found_by_isValid;
}

QString OAIImportPackage::getId() const {
    return m_id;
}
void OAIImportPackage::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIImportPackage::is_id_Set() const{
    return m_id_isSet;
}

bool OAIImportPackage::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIImportPackage::getLanguage() const {
    return m_language;
}
void OAIImportPackage::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIImportPackage::is_language_Set() const{
    return m_language_isSet;
}

bool OAIImportPackage::is_language_Valid() const{
    return m_language_isValid;
}

QList<QString> OAIImportPackage::getLicenses() const {
    return m_licenses;
}
void OAIImportPackage::setLicenses(const QList<QString> &licenses) {
    m_licenses = licenses;
    m_licenses_isSet = true;
}

bool OAIImportPackage::is_licenses_Set() const{
    return m_licenses_isSet;
}

bool OAIImportPackage::is_licenses_Valid() const{
    return m_licenses_isValid;
}

QList<OAIImportPackageLocation> OAIImportPackage::getLocations() const {
    return m_locations;
}
void OAIImportPackage::setLocations(const QList<OAIImportPackageLocation> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIImportPackage::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIImportPackage::is_locations_Valid() const{
    return m_locations_isValid;
}

OAIObject OAIImportPackage::getMetadata() const {
    return m_metadata;
}
void OAIImportPackage::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIImportPackage::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIImportPackage::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIImportPackage::getMetadataType() const {
    return m_metadata_type;
}
void OAIImportPackage::setMetadataType(const QString &metadata_type) {
    m_metadata_type = metadata_type;
    m_metadata_type_isSet = true;
}

bool OAIImportPackage::is_metadata_type_Set() const{
    return m_metadata_type_isSet;
}

bool OAIImportPackage::is_metadata_type_Valid() const{
    return m_metadata_type_isValid;
}

QString OAIImportPackage::getName() const {
    return m_name;
}
void OAIImportPackage::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIImportPackage::is_name_Set() const{
    return m_name_isSet;
}

bool OAIImportPackage::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIImportPackage::getPurl() const {
    return m_purl;
}
void OAIImportPackage::setPurl(const QString &purl) {
    m_purl = purl;
    m_purl_isSet = true;
}

bool OAIImportPackage::is_purl_Set() const{
    return m_purl_isSet;
}

bool OAIImportPackage::is_purl_Valid() const{
    return m_purl_isValid;
}

QString OAIImportPackage::getType() const {
    return m_type;
}
void OAIImportPackage::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIImportPackage::is_type_Set() const{
    return m_type_isSet;
}

bool OAIImportPackage::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIImportPackage::getVersion() const {
    return m_version;
}
void OAIImportPackage::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIImportPackage::is_version_Set() const{
    return m_version_isSet;
}

bool OAIImportPackage::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIImportPackage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cpes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_found_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_licenses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportPackage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cpes_isValid && m_language_isValid && m_licenses_isValid && m_locations_isValid && m_metadata_type_isValid && m_name_isValid && m_type_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
