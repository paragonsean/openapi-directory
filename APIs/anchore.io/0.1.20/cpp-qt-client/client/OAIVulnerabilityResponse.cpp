/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVulnerabilityResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVulnerabilityResponse::OAIVulnerabilityResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVulnerabilityResponse::OAIVulnerabilityResponse() {
    this->initializeModel();
}

OAIVulnerabilityResponse::~OAIVulnerabilityResponse() {}

void OAIVulnerabilityResponse::initializeModel() {

    m_image_digest_isSet = false;
    m_image_digest_isValid = false;

    m_vulnerabilities_isSet = false;
    m_vulnerabilities_isValid = false;

    m_vulnerability_type_isSet = false;
    m_vulnerability_type_isValid = false;
}

void OAIVulnerabilityResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVulnerabilityResponse::fromJsonObject(QJsonObject json) {

    m_image_digest_isValid = ::OpenAPI::fromJsonValue(m_image_digest, json[QString("imageDigest")]);
    m_image_digest_isSet = !json[QString("imageDigest")].isNull() && m_image_digest_isValid;

    m_vulnerabilities_isValid = ::OpenAPI::fromJsonValue(m_vulnerabilities, json[QString("vulnerabilities")]);
    m_vulnerabilities_isSet = !json[QString("vulnerabilities")].isNull() && m_vulnerabilities_isValid;

    m_vulnerability_type_isValid = ::OpenAPI::fromJsonValue(m_vulnerability_type, json[QString("vulnerability_type")]);
    m_vulnerability_type_isSet = !json[QString("vulnerability_type")].isNull() && m_vulnerability_type_isValid;
}

QString OAIVulnerabilityResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVulnerabilityResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_image_digest_isSet) {
        obj.insert(QString("imageDigest"), ::OpenAPI::toJsonValue(m_image_digest));
    }
    if (m_vulnerabilities.size() > 0) {
        obj.insert(QString("vulnerabilities"), ::OpenAPI::toJsonValue(m_vulnerabilities));
    }
    if (m_vulnerability_type_isSet) {
        obj.insert(QString("vulnerability_type"), ::OpenAPI::toJsonValue(m_vulnerability_type));
    }
    return obj;
}

QString OAIVulnerabilityResponse::getImageDigest() const {
    return m_image_digest;
}
void OAIVulnerabilityResponse::setImageDigest(const QString &image_digest) {
    m_image_digest = image_digest;
    m_image_digest_isSet = true;
}

bool OAIVulnerabilityResponse::is_image_digest_Set() const{
    return m_image_digest_isSet;
}

bool OAIVulnerabilityResponse::is_image_digest_Valid() const{
    return m_image_digest_isValid;
}

QList<OAIVulnerability> OAIVulnerabilityResponse::getVulnerabilities() const {
    return m_vulnerabilities;
}
void OAIVulnerabilityResponse::setVulnerabilities(const QList<OAIVulnerability> &vulnerabilities) {
    m_vulnerabilities = vulnerabilities;
    m_vulnerabilities_isSet = true;
}

bool OAIVulnerabilityResponse::is_vulnerabilities_Set() const{
    return m_vulnerabilities_isSet;
}

bool OAIVulnerabilityResponse::is_vulnerabilities_Valid() const{
    return m_vulnerabilities_isValid;
}

QString OAIVulnerabilityResponse::getVulnerabilityType() const {
    return m_vulnerability_type;
}
void OAIVulnerabilityResponse::setVulnerabilityType(const QString &vulnerability_type) {
    m_vulnerability_type = vulnerability_type;
    m_vulnerability_type_isSet = true;
}

bool OAIVulnerabilityResponse::is_vulnerability_type_Set() const{
    return m_vulnerability_type_isSet;
}

bool OAIVulnerabilityResponse::is_vulnerability_type_Valid() const{
    return m_vulnerability_type_isValid;
}

bool OAIVulnerabilityResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vulnerabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vulnerability_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVulnerabilityResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
