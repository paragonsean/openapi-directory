/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicyBundle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicyBundle::OAIPolicyBundle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicyBundle::OAIPolicyBundle() {
    this->initializeModel();
}

OAIPolicyBundle::~OAIPolicyBundle() {}

void OAIPolicyBundle::initializeModel() {

    m_blacklisted_images_isSet = false;
    m_blacklisted_images_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_mappings_isSet = false;
    m_mappings_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_policies_isSet = false;
    m_policies_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_whitelisted_images_isSet = false;
    m_whitelisted_images_isValid = false;

    m_whitelists_isSet = false;
    m_whitelists_isValid = false;
}

void OAIPolicyBundle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicyBundle::fromJsonObject(QJsonObject json) {

    m_blacklisted_images_isValid = ::OpenAPI::fromJsonValue(m_blacklisted_images, json[QString("blacklisted_images")]);
    m_blacklisted_images_isSet = !json[QString("blacklisted_images")].isNull() && m_blacklisted_images_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_mappings_isValid = ::OpenAPI::fromJsonValue(m_mappings, json[QString("mappings")]);
    m_mappings_isSet = !json[QString("mappings")].isNull() && m_mappings_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_policies_isValid = ::OpenAPI::fromJsonValue(m_policies, json[QString("policies")]);
    m_policies_isSet = !json[QString("policies")].isNull() && m_policies_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_whitelisted_images_isValid = ::OpenAPI::fromJsonValue(m_whitelisted_images, json[QString("whitelisted_images")]);
    m_whitelisted_images_isSet = !json[QString("whitelisted_images")].isNull() && m_whitelisted_images_isValid;

    m_whitelists_isValid = ::OpenAPI::fromJsonValue(m_whitelists, json[QString("whitelists")]);
    m_whitelists_isSet = !json[QString("whitelists")].isNull() && m_whitelists_isValid;
}

QString OAIPolicyBundle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicyBundle::asJsonObject() const {
    QJsonObject obj;
    if (m_blacklisted_images.size() > 0) {
        obj.insert(QString("blacklisted_images"), ::OpenAPI::toJsonValue(m_blacklisted_images));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mappings.size() > 0) {
        obj.insert(QString("mappings"), ::OpenAPI::toJsonValue(m_mappings));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_policies.size() > 0) {
        obj.insert(QString("policies"), ::OpenAPI::toJsonValue(m_policies));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_whitelisted_images.size() > 0) {
        obj.insert(QString("whitelisted_images"), ::OpenAPI::toJsonValue(m_whitelisted_images));
    }
    if (m_whitelists.size() > 0) {
        obj.insert(QString("whitelists"), ::OpenAPI::toJsonValue(m_whitelists));
    }
    return obj;
}

QList<OAIImageSelectionRule> OAIPolicyBundle::getBlacklistedImages() const {
    return m_blacklisted_images;
}
void OAIPolicyBundle::setBlacklistedImages(const QList<OAIImageSelectionRule> &blacklisted_images) {
    m_blacklisted_images = blacklisted_images;
    m_blacklisted_images_isSet = true;
}

bool OAIPolicyBundle::is_blacklisted_images_Set() const{
    return m_blacklisted_images_isSet;
}

bool OAIPolicyBundle::is_blacklisted_images_Valid() const{
    return m_blacklisted_images_isValid;
}

QString OAIPolicyBundle::getComment() const {
    return m_comment;
}
void OAIPolicyBundle::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIPolicyBundle::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIPolicyBundle::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAIPolicyBundle::getId() const {
    return m_id;
}
void OAIPolicyBundle::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPolicyBundle::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPolicyBundle::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIMappingRule> OAIPolicyBundle::getMappings() const {
    return m_mappings;
}
void OAIPolicyBundle::setMappings(const QList<OAIMappingRule> &mappings) {
    m_mappings = mappings;
    m_mappings_isSet = true;
}

bool OAIPolicyBundle::is_mappings_Set() const{
    return m_mappings_isSet;
}

bool OAIPolicyBundle::is_mappings_Valid() const{
    return m_mappings_isValid;
}

QString OAIPolicyBundle::getName() const {
    return m_name;
}
void OAIPolicyBundle::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPolicyBundle::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPolicyBundle::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPolicy> OAIPolicyBundle::getPolicies() const {
    return m_policies;
}
void OAIPolicyBundle::setPolicies(const QList<OAIPolicy> &policies) {
    m_policies = policies;
    m_policies_isSet = true;
}

bool OAIPolicyBundle::is_policies_Set() const{
    return m_policies_isSet;
}

bool OAIPolicyBundle::is_policies_Valid() const{
    return m_policies_isValid;
}

QString OAIPolicyBundle::getVersion() const {
    return m_version;
}
void OAIPolicyBundle::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIPolicyBundle::is_version_Set() const{
    return m_version_isSet;
}

bool OAIPolicyBundle::is_version_Valid() const{
    return m_version_isValid;
}

QList<OAIImageSelectionRule> OAIPolicyBundle::getWhitelistedImages() const {
    return m_whitelisted_images;
}
void OAIPolicyBundle::setWhitelistedImages(const QList<OAIImageSelectionRule> &whitelisted_images) {
    m_whitelisted_images = whitelisted_images;
    m_whitelisted_images_isSet = true;
}

bool OAIPolicyBundle::is_whitelisted_images_Set() const{
    return m_whitelisted_images_isSet;
}

bool OAIPolicyBundle::is_whitelisted_images_Valid() const{
    return m_whitelisted_images_isValid;
}

QList<OAIWhitelist> OAIPolicyBundle::getWhitelists() const {
    return m_whitelists;
}
void OAIPolicyBundle::setWhitelists(const QList<OAIWhitelist> &whitelists) {
    m_whitelists = whitelists;
    m_whitelists_isSet = true;
}

bool OAIPolicyBundle::is_whitelists_Set() const{
    return m_whitelists_isSet;
}

bool OAIPolicyBundle::is_whitelists_Valid() const{
    return m_whitelists_isValid;
}

bool OAIPolicyBundle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blacklisted_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_whitelisted_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_whitelists.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicyBundle::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_mappings_isValid && m_policies_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
