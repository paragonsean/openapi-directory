/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventCategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventCategory::OAIEventCategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventCategory::OAIEventCategory() {
    this->initializeModel();
}

OAIEventCategory::~OAIEventCategory() {}

void OAIEventCategory::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_subcategories_isSet = false;
    m_subcategories_isValid = false;
}

void OAIEventCategory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventCategory::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_subcategories_isValid = ::OpenAPI::fromJsonValue(m_subcategories, json[QString("subcategories")]);
    m_subcategories_isSet = !json[QString("subcategories")].isNull() && m_subcategories_isValid;
}

QString OAIEventCategory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventCategory::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_subcategories.size() > 0) {
        obj.insert(QString("subcategories"), ::OpenAPI::toJsonValue(m_subcategories));
    }
    return obj;
}

QString OAIEventCategory::getCategory() const {
    return m_category;
}
void OAIEventCategory::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIEventCategory::is_category_Set() const{
    return m_category_isSet;
}

bool OAIEventCategory::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIEventCategory::getDescription() const {
    return m_description;
}
void OAIEventCategory::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEventCategory::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEventCategory::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIEventSubcategory> OAIEventCategory::getSubcategories() const {
    return m_subcategories;
}
void OAIEventCategory::setSubcategories(const QList<OAIEventSubcategory> &subcategories) {
    m_subcategories = subcategories;
    m_subcategories_isSet = true;
}

bool OAIEventCategory::is_subcategories_Set() const{
    return m_subcategories_isSet;
}

bool OAIEventCategory::is_subcategories_Valid() const{
    return m_subcategories_isValid;
}

bool OAIEventCategory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subcategories.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventCategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
