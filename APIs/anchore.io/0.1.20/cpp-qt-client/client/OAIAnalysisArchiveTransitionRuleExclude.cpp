/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisArchiveTransitionRuleExclude.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysisArchiveTransitionRuleExclude::OAIAnalysisArchiveTransitionRuleExclude(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysisArchiveTransitionRuleExclude::OAIAnalysisArchiveTransitionRuleExclude() {
    this->initializeModel();
}

OAIAnalysisArchiveTransitionRuleExclude::~OAIAnalysisArchiveTransitionRuleExclude() {}

void OAIAnalysisArchiveTransitionRuleExclude::initializeModel() {

    m_expiration_days_isSet = false;
    m_expiration_days_isValid = false;

    m_selector_isSet = false;
    m_selector_isValid = false;
}

void OAIAnalysisArchiveTransitionRuleExclude::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysisArchiveTransitionRuleExclude::fromJsonObject(QJsonObject json) {

    m_expiration_days_isValid = ::OpenAPI::fromJsonValue(m_expiration_days, json[QString("expiration_days")]);
    m_expiration_days_isSet = !json[QString("expiration_days")].isNull() && m_expiration_days_isValid;

    m_selector_isValid = ::OpenAPI::fromJsonValue(m_selector, json[QString("selector")]);
    m_selector_isSet = !json[QString("selector")].isNull() && m_selector_isValid;
}

QString OAIAnalysisArchiveTransitionRuleExclude::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysisArchiveTransitionRuleExclude::asJsonObject() const {
    QJsonObject obj;
    if (m_expiration_days_isSet) {
        obj.insert(QString("expiration_days"), ::OpenAPI::toJsonValue(m_expiration_days));
    }
    if (m_selector.isSet()) {
        obj.insert(QString("selector"), ::OpenAPI::toJsonValue(m_selector));
    }
    return obj;
}

qint32 OAIAnalysisArchiveTransitionRuleExclude::getExpirationDays() const {
    return m_expiration_days;
}
void OAIAnalysisArchiveTransitionRuleExclude::setExpirationDays(const qint32 &expiration_days) {
    m_expiration_days = expiration_days;
    m_expiration_days_isSet = true;
}

bool OAIAnalysisArchiveTransitionRuleExclude::is_expiration_days_Set() const{
    return m_expiration_days_isSet;
}

bool OAIAnalysisArchiveTransitionRuleExclude::is_expiration_days_Valid() const{
    return m_expiration_days_isValid;
}

OAIImageSelector OAIAnalysisArchiveTransitionRuleExclude::getSelector() const {
    return m_selector;
}
void OAIAnalysisArchiveTransitionRuleExclude::setSelector(const OAIImageSelector &selector) {
    m_selector = selector;
    m_selector_isSet = true;
}

bool OAIAnalysisArchiveTransitionRuleExclude::is_selector_Set() const{
    return m_selector_isSet;
}

bool OAIAnalysisArchiveTransitionRuleExclude::is_selector_Valid() const{
    return m_selector_isValid;
}

bool OAIAnalysisArchiveTransitionRuleExclude::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiration_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selector.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysisArchiveTransitionRuleExclude::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
