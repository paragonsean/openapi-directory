/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIQueryApi_H
#define OAI_OAIQueryApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiErrorResponse.h"
#include "OAIPaginatedImageList.h"
#include "OAIPaginatedVulnerabilityList.h"
#include "OAIPaginatedVulnerableImageList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIQueryApi : public QObject {
    Q_OBJECT

public:
    OAIQueryApi(const int timeOut = 0);
    ~OAIQueryApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  name QString [required]
    * @param[in]  package_type QString [optional]
    * @param[in]  version QString [optional]
    * @param[in]  page QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void queryImagesByPackage(const QString &name, const ::OpenAPI::OptionalParam<QString> &package_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  vulnerability_id QString [required]
    * @param[in]  r_namespace QString [optional]
    * @param[in]  affected_package QString [optional]
    * @param[in]  severity QString [optional]
    * @param[in]  vendor_only bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void queryImagesByVulnerability(const QString &vulnerability_id, const ::OpenAPI::OptionalParam<QString> &r_namespace = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &affected_package = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &severity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &vendor_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QList<QString> [required]
    * @param[in]  affected_package QString [optional]
    * @param[in]  affected_package_version QString [optional]
    * @param[in]  page QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  r_namespace QList<QString> [optional]
    */
    virtual void queryVulnerabilities(const QList<QString> &id, const ::OpenAPI::OptionalParam<QString> &affected_package = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &affected_package_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &r_namespace = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void queryImagesByPackageCallback(OAIHttpRequestWorker *worker);
    void queryImagesByVulnerabilityCallback(OAIHttpRequestWorker *worker);
    void queryVulnerabilitiesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void queryImagesByPackageSignal(OAIPaginatedImageList summary);
    void queryImagesByVulnerabilitySignal(OAIPaginatedVulnerableImageList summary);
    void queryVulnerabilitiesSignal(OAIPaginatedVulnerabilityList summary);


    void queryImagesByPackageSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedImageList summary);
    void queryImagesByVulnerabilitySignalFull(OAIHttpRequestWorker *worker, OAIPaginatedVulnerableImageList summary);
    void queryVulnerabilitiesSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedVulnerabilityList summary);

    Q_DECL_DEPRECATED_X("Use queryImagesByPackageSignalError() instead")
    void queryImagesByPackageSignalE(OAIPaginatedImageList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryImagesByPackageSignalError(OAIPaginatedImageList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryImagesByVulnerabilitySignalError() instead")
    void queryImagesByVulnerabilitySignalE(OAIPaginatedVulnerableImageList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryImagesByVulnerabilitySignalError(OAIPaginatedVulnerableImageList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryVulnerabilitiesSignalError() instead")
    void queryVulnerabilitiesSignalE(OAIPaginatedVulnerabilityList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryVulnerabilitiesSignalError(OAIPaginatedVulnerabilityList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use queryImagesByPackageSignalErrorFull() instead")
    void queryImagesByPackageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryImagesByPackageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryImagesByVulnerabilitySignalErrorFull() instead")
    void queryImagesByVulnerabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryImagesByVulnerabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryVulnerabilitiesSignalErrorFull() instead")
    void queryVulnerabilitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryVulnerabilitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
