/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPolicyEvalNotification.h
 *
 * 
 */

#ifndef OAIPolicyEvalNotification_H
#define OAIPolicyEvalNotification_H

#include <QJsonObject>

#include "OAIPolicyEvalNotificationData.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPolicyEvalNotificationData;

class OAIPolicyEvalNotification : public OAIObject {
public:
    OAIPolicyEvalNotification();
    OAIPolicyEvalNotification(QString json);
    ~OAIPolicyEvalNotification() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCreatedAt() const;
    void setCreatedAt(const qint32 &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getDataId() const;
    void setDataId(const QString &data_id);
    bool is_data_id_Set() const;
    bool is_data_id_Valid() const;

    qint32 getLastUpdated() const;
    void setLastUpdated(const qint32 &last_updated);
    bool is_last_updated_Set() const;
    bool is_last_updated_Valid() const;

    qint32 getMaxTries() const;
    void setMaxTries(const qint32 &max_tries);
    bool is_max_tries_Set() const;
    bool is_max_tries_Valid() const;

    QString getQueueId() const;
    void setQueueId(const QString &queue_id);
    bool is_queue_id_Set() const;
    bool is_queue_id_Valid() const;

    QString getRecordStateKey() const;
    void setRecordStateKey(const QString &record_state_key);
    bool is_record_state_key_Set() const;
    bool is_record_state_key_Valid() const;

    QString getRecordStateVal() const;
    void setRecordStateVal(const QString &record_state_val);
    bool is_record_state_val_Set() const;
    bool is_record_state_val_Valid() const;

    qint32 getTries() const;
    void setTries(const qint32 &tries);
    bool is_tries_Set() const;
    bool is_tries_Valid() const;

    QString getUserId() const;
    void setUserId(const QString &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    OAIPolicyEvalNotificationData getData() const;
    void setData(const OAIPolicyEvalNotificationData &data);
    bool is_data_Set() const;
    bool is_data_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_data_id;
    bool m_data_id_isSet;
    bool m_data_id_isValid;

    qint32 m_last_updated;
    bool m_last_updated_isSet;
    bool m_last_updated_isValid;

    qint32 m_max_tries;
    bool m_max_tries_isSet;
    bool m_max_tries_isValid;

    QString m_queue_id;
    bool m_queue_id_isSet;
    bool m_queue_id_isValid;

    QString m_record_state_key;
    bool m_record_state_key_isSet;
    bool m_record_state_key_isValid;

    QString m_record_state_val;
    bool m_record_state_val_isSet;
    bool m_record_state_val_isValid;

    qint32 m_tries;
    bool m_tries_isSet;
    bool m_tries_isValid;

    QString m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;

    OAIPolicyEvalNotificationData m_data;
    bool m_data_isSet;
    bool m_data_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPolicyEvalNotification)

#endif // OAIPolicyEvalNotification_H
