/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageImportContentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageImportContentResponse::OAIImageImportContentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageImportContentResponse::OAIImageImportContentResponse() {
    this->initializeModel();
}

OAIImageImportContentResponse::~OAIImageImportContentResponse() {}

void OAIImageImportContentResponse::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_digest_isSet = false;
    m_digest_isValid = false;
}

void OAIImageImportContentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageImportContentResponse::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_digest_isValid = ::OpenAPI::fromJsonValue(m_digest, json[QString("digest")]);
    m_digest_isSet = !json[QString("digest")].isNull() && m_digest_isValid;
}

QString OAIImageImportContentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageImportContentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_digest_isSet) {
        obj.insert(QString("digest"), ::OpenAPI::toJsonValue(m_digest));
    }
    return obj;
}

QDateTime OAIImageImportContentResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIImageImportContentResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIImageImportContentResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIImageImportContentResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIImageImportContentResponse::getDigest() const {
    return m_digest;
}
void OAIImageImportContentResponse::setDigest(const QString &digest) {
    m_digest = digest;
    m_digest_isSet = true;
}

bool OAIImageImportContentResponse::is_digest_Set() const{
    return m_digest_isSet;
}

bool OAIImageImportContentResponse::is_digest_Valid() const{
    return m_digest_isValid;
}

bool OAIImageImportContentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digest_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageImportContentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
