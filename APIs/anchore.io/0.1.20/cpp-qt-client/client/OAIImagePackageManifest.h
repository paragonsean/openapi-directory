/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIImagePackageManifest.h
 *
 * 
 */

#ifndef OAIImagePackageManifest_H
#define OAIImagePackageManifest_H

#include <QJsonObject>

#include "OAIImportDescriptor.h"
#include "OAIImportDistribution.h"
#include "OAIImportPackage.h"
#include "OAIImportPackageRelationship.h"
#include "OAIImportSchema.h"
#include "OAIImportSource.h"
#include <QJsonValue>
#include <QList>
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIImagePackageManifest : public OAIObject {
public:
    OAIImagePackageManifest();
    OAIImagePackageManifest(QString json);
    ~OAIImagePackageManifest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIImportPackageRelationship> getArtifactRelationships() const;
    void setArtifactRelationships(const QList<OAIImportPackageRelationship> &artifact_relationships);
    bool is_artifact_relationships_Set() const;
    bool is_artifact_relationships_Valid() const;

    QList<OAIImportPackage> getArtifacts() const;
    void setArtifacts(const QList<OAIImportPackage> &artifacts);
    bool is_artifacts_Set() const;
    bool is_artifacts_Valid() const;

    OAIImportDescriptor getDescriptor() const;
    void setDescriptor(const OAIImportDescriptor &descriptor);
    bool is_descriptor_Set() const;
    bool is_descriptor_Valid() const;

    OAIImportDistribution getDistro() const;
    void setDistro(const OAIImportDistribution &distro);
    bool is_distro_Set() const;
    bool is_distro_Valid() const;

    OAIImportSchema getSchema() const;
    void setSchema(const OAIImportSchema &schema);
    bool is_schema_Set() const;
    bool is_schema_Valid() const;

    OAIImportSource getSource() const;
    void setSource(const OAIImportSource &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIImportPackageRelationship> m_artifact_relationships;
    bool m_artifact_relationships_isSet;
    bool m_artifact_relationships_isValid;

    QList<OAIImportPackage> m_artifacts;
    bool m_artifacts_isSet;
    bool m_artifacts_isValid;

    OAIImportDescriptor m_descriptor;
    bool m_descriptor_isSet;
    bool m_descriptor_isValid;

    OAIImportDistribution m_distro;
    bool m_distro_isSet;
    bool m_distro_isValid;

    OAIImportSchema m_schema;
    bool m_schema_isSet;
    bool m_schema_isValid;

    OAIImportSource m_source;
    bool m_source_isSet;
    bool m_source_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIImagePackageManifest)

#endif // OAIImagePackageManifest_H
