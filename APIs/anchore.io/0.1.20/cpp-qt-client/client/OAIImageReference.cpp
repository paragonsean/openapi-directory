/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageReference::OAIImageReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageReference::OAIImageReference() {
    this->initializeModel();
}

OAIImageReference::~OAIImageReference() {}

void OAIImageReference::initializeModel() {

    m_analyzed_at_isSet = false;
    m_analyzed_at_isValid = false;

    m_digest_isSet = false;
    m_digest_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_tag_history_isSet = false;
    m_tag_history_isValid = false;
}

void OAIImageReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageReference::fromJsonObject(QJsonObject json) {

    m_analyzed_at_isValid = ::OpenAPI::fromJsonValue(m_analyzed_at, json[QString("analyzed_at")]);
    m_analyzed_at_isSet = !json[QString("analyzed_at")].isNull() && m_analyzed_at_isValid;

    m_digest_isValid = ::OpenAPI::fromJsonValue(m_digest, json[QString("digest")]);
    m_digest_isSet = !json[QString("digest")].isNull() && m_digest_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_tag_history_isValid = ::OpenAPI::fromJsonValue(m_tag_history, json[QString("tag_history")]);
    m_tag_history_isSet = !json[QString("tag_history")].isNull() && m_tag_history_isValid;
}

QString OAIImageReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageReference::asJsonObject() const {
    QJsonObject obj;
    if (m_analyzed_at_isSet) {
        obj.insert(QString("analyzed_at"), ::OpenAPI::toJsonValue(m_analyzed_at));
    }
    if (m_digest_isSet) {
        obj.insert(QString("digest"), ::OpenAPI::toJsonValue(m_digest));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_tag_history.size() > 0) {
        obj.insert(QString("tag_history"), ::OpenAPI::toJsonValue(m_tag_history));
    }
    return obj;
}

QString OAIImageReference::getAnalyzedAt() const {
    return m_analyzed_at;
}
void OAIImageReference::setAnalyzedAt(const QString &analyzed_at) {
    m_analyzed_at = analyzed_at;
    m_analyzed_at_isSet = true;
}

bool OAIImageReference::is_analyzed_at_Set() const{
    return m_analyzed_at_isSet;
}

bool OAIImageReference::is_analyzed_at_Valid() const{
    return m_analyzed_at_isValid;
}

QString OAIImageReference::getDigest() const {
    return m_digest;
}
void OAIImageReference::setDigest(const QString &digest) {
    m_digest = digest;
    m_digest_isSet = true;
}

bool OAIImageReference::is_digest_Set() const{
    return m_digest_isSet;
}

bool OAIImageReference::is_digest_Valid() const{
    return m_digest_isValid;
}

QString OAIImageReference::getId() const {
    return m_id;
}
void OAIImageReference::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIImageReference::is_id_Set() const{
    return m_id_isSet;
}

bool OAIImageReference::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAITagEntry> OAIImageReference::getTagHistory() const {
    return m_tag_history;
}
void OAIImageReference::setTagHistory(const QList<OAITagEntry> &tag_history) {
    m_tag_history = tag_history;
    m_tag_history_isSet = true;
}

bool OAIImageReference::is_tag_history_Set() const{
    return m_tag_history_isSet;
}

bool OAIImageReference::is_tag_history_Valid() const{
    return m_tag_history_isValid;
}

bool OAIImageReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analyzed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_history.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
