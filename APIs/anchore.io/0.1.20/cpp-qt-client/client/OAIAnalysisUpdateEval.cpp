/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisUpdateEval.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysisUpdateEval::OAIAnalysisUpdateEval(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysisUpdateEval::OAIAnalysisUpdateEval() {
    this->initializeModel();
}

OAIAnalysisUpdateEval::~OAIAnalysisUpdateEval() {}

void OAIAnalysisUpdateEval::initializeModel() {

    m_analysis_status_isSet = false;
    m_analysis_status_isValid = false;

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_image_digest_isSet = false;
    m_image_digest_isValid = false;
}

void OAIAnalysisUpdateEval::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysisUpdateEval::fromJsonObject(QJsonObject json) {

    m_analysis_status_isValid = ::OpenAPI::fromJsonValue(m_analysis_status, json[QString("analysis_status")]);
    m_analysis_status_isSet = !json[QString("analysis_status")].isNull() && m_analysis_status_isValid;

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_image_digest_isValid = ::OpenAPI::fromJsonValue(m_image_digest, json[QString("image_digest")]);
    m_image_digest_isSet = !json[QString("image_digest")].isNull() && m_image_digest_isValid;
}

QString OAIAnalysisUpdateEval::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysisUpdateEval::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_status_isSet) {
        obj.insert(QString("analysis_status"), ::OpenAPI::toJsonValue(m_analysis_status));
    }
    if (m_annotations_isSet) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_image_digest_isSet) {
        obj.insert(QString("image_digest"), ::OpenAPI::toJsonValue(m_image_digest));
    }
    return obj;
}

QString OAIAnalysisUpdateEval::getAnalysisStatus() const {
    return m_analysis_status;
}
void OAIAnalysisUpdateEval::setAnalysisStatus(const QString &analysis_status) {
    m_analysis_status = analysis_status;
    m_analysis_status_isSet = true;
}

bool OAIAnalysisUpdateEval::is_analysis_status_Set() const{
    return m_analysis_status_isSet;
}

bool OAIAnalysisUpdateEval::is_analysis_status_Valid() const{
    return m_analysis_status_isValid;
}

OAIObject OAIAnalysisUpdateEval::getAnnotations() const {
    return m_annotations;
}
void OAIAnalysisUpdateEval::setAnnotations(const OAIObject &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIAnalysisUpdateEval::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIAnalysisUpdateEval::is_annotations_Valid() const{
    return m_annotations_isValid;
}

QString OAIAnalysisUpdateEval::getImageDigest() const {
    return m_image_digest;
}
void OAIAnalysisUpdateEval::setImageDigest(const QString &image_digest) {
    m_image_digest = image_digest;
    m_image_digest_isSet = true;
}

bool OAIAnalysisUpdateEval::is_image_digest_Set() const{
    return m_image_digest_isSet;
}

bool OAIAnalysisUpdateEval::is_image_digest_Valid() const{
    return m_image_digest_isValid;
}

bool OAIAnalysisUpdateEval::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_digest_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysisUpdateEval::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
