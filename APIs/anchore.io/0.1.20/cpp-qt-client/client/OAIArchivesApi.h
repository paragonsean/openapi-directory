/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIArchivesApi_H
#define OAI_OAIArchivesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAnalysisArchiveAddResult.h"
#include "OAIAnalysisArchiveTransitionRule.h"
#include "OAIApiErrorResponse.h"
#include "OAIArchiveSummary.h"
#include "OAIArchivedAnalysis.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIArchivesApi : public QObject {
    Q_OBJECT

public:
    OAIArchivesApi(const int timeOut = 0);
    ~OAIArchivesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  request_body QList<QString> [required]
    */
    virtual void archiveImageAnalysis(const QList<QString> &request_body);

    /**
    * @param[in]  oai_analysis_archive_transition_rule OAIAnalysisArchiveTransitionRule [required]
    */
    virtual void createAnalysisArchiveRule(const OAIAnalysisArchiveTransitionRule &oai_analysis_archive_transition_rule);

    /**
    * @param[in]  rule_id QString [required]
    */
    virtual void deleteAnalysisArchiveRule(const QString &rule_id);

    /**
    * @param[in]  image_digest QString [required]
    * @param[in]  force bool [optional]
    */
    virtual void deleteArchivedAnalysis(const QString &image_digest, const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  rule_id QString [required]
    */
    virtual void getAnalysisArchiveRule(const QString &rule_id);

    /**
    * @param[in]  image_digest QString [required]
    */
    virtual void getArchivedAnalysis(const QString &image_digest);


    virtual void listAnalysisArchive();

    /**
    * @param[in]  system_global bool [optional]
    */
    virtual void listAnalysisArchiveRules(const ::OpenAPI::OptionalParam<bool> &system_global = ::OpenAPI::OptionalParam<bool>());


    virtual void listArchives();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void archiveImageAnalysisCallback(OAIHttpRequestWorker *worker);
    void createAnalysisArchiveRuleCallback(OAIHttpRequestWorker *worker);
    void deleteAnalysisArchiveRuleCallback(OAIHttpRequestWorker *worker);
    void deleteArchivedAnalysisCallback(OAIHttpRequestWorker *worker);
    void getAnalysisArchiveRuleCallback(OAIHttpRequestWorker *worker);
    void getArchivedAnalysisCallback(OAIHttpRequestWorker *worker);
    void listAnalysisArchiveCallback(OAIHttpRequestWorker *worker);
    void listAnalysisArchiveRulesCallback(OAIHttpRequestWorker *worker);
    void listArchivesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void archiveImageAnalysisSignal(QList<OAIAnalysisArchiveAddResult> summary);
    void createAnalysisArchiveRuleSignal(OAIAnalysisArchiveTransitionRule summary);
    void deleteAnalysisArchiveRuleSignal();
    void deleteArchivedAnalysisSignal();
    void getAnalysisArchiveRuleSignal(OAIAnalysisArchiveTransitionRule summary);
    void getArchivedAnalysisSignal(OAIArchivedAnalysis summary);
    void listAnalysisArchiveSignal(QList<OAIArchivedAnalysis> summary);
    void listAnalysisArchiveRulesSignal(QList<OAIAnalysisArchiveTransitionRule> summary);
    void listArchivesSignal(OAIArchiveSummary summary);


    void archiveImageAnalysisSignalFull(OAIHttpRequestWorker *worker, QList<OAIAnalysisArchiveAddResult> summary);
    void createAnalysisArchiveRuleSignalFull(OAIHttpRequestWorker *worker, OAIAnalysisArchiveTransitionRule summary);
    void deleteAnalysisArchiveRuleSignalFull(OAIHttpRequestWorker *worker);
    void deleteArchivedAnalysisSignalFull(OAIHttpRequestWorker *worker);
    void getAnalysisArchiveRuleSignalFull(OAIHttpRequestWorker *worker, OAIAnalysisArchiveTransitionRule summary);
    void getArchivedAnalysisSignalFull(OAIHttpRequestWorker *worker, OAIArchivedAnalysis summary);
    void listAnalysisArchiveSignalFull(OAIHttpRequestWorker *worker, QList<OAIArchivedAnalysis> summary);
    void listAnalysisArchiveRulesSignalFull(OAIHttpRequestWorker *worker, QList<OAIAnalysisArchiveTransitionRule> summary);
    void listArchivesSignalFull(OAIHttpRequestWorker *worker, OAIArchiveSummary summary);

    Q_DECL_DEPRECATED_X("Use archiveImageAnalysisSignalError() instead")
    void archiveImageAnalysisSignalE(QList<OAIAnalysisArchiveAddResult> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void archiveImageAnalysisSignalError(QList<OAIAnalysisArchiveAddResult> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAnalysisArchiveRuleSignalError() instead")
    void createAnalysisArchiveRuleSignalE(OAIAnalysisArchiveTransitionRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAnalysisArchiveRuleSignalError(OAIAnalysisArchiveTransitionRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAnalysisArchiveRuleSignalError() instead")
    void deleteAnalysisArchiveRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAnalysisArchiveRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteArchivedAnalysisSignalError() instead")
    void deleteArchivedAnalysisSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteArchivedAnalysisSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnalysisArchiveRuleSignalError() instead")
    void getAnalysisArchiveRuleSignalE(OAIAnalysisArchiveTransitionRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnalysisArchiveRuleSignalError(OAIAnalysisArchiveTransitionRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getArchivedAnalysisSignalError() instead")
    void getArchivedAnalysisSignalE(OAIArchivedAnalysis summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getArchivedAnalysisSignalError(OAIArchivedAnalysis summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAnalysisArchiveSignalError() instead")
    void listAnalysisArchiveSignalE(QList<OAIArchivedAnalysis> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAnalysisArchiveSignalError(QList<OAIArchivedAnalysis> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAnalysisArchiveRulesSignalError() instead")
    void listAnalysisArchiveRulesSignalE(QList<OAIAnalysisArchiveTransitionRule> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAnalysisArchiveRulesSignalError(QList<OAIAnalysisArchiveTransitionRule> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listArchivesSignalError() instead")
    void listArchivesSignalE(OAIArchiveSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listArchivesSignalError(OAIArchiveSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use archiveImageAnalysisSignalErrorFull() instead")
    void archiveImageAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void archiveImageAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAnalysisArchiveRuleSignalErrorFull() instead")
    void createAnalysisArchiveRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAnalysisArchiveRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAnalysisArchiveRuleSignalErrorFull() instead")
    void deleteAnalysisArchiveRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAnalysisArchiveRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteArchivedAnalysisSignalErrorFull() instead")
    void deleteArchivedAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteArchivedAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnalysisArchiveRuleSignalErrorFull() instead")
    void getAnalysisArchiveRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnalysisArchiveRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getArchivedAnalysisSignalErrorFull() instead")
    void getArchivedAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getArchivedAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAnalysisArchiveSignalErrorFull() instead")
    void listAnalysisArchiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAnalysisArchiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAnalysisArchiveRulesSignalErrorFull() instead")
    void listAnalysisArchiveRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAnalysisArchiveRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listArchivesSignalErrorFull() instead")
    void listArchivesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listArchivesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
