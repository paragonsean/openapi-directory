/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceVersion::OAIServiceVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceVersion::OAIServiceVersion() {
    this->initializeModel();
}

OAIServiceVersion::~OAIServiceVersion() {}

void OAIServiceVersion::initializeModel() {

    m_api_isSet = false;
    m_api_isValid = false;

    m_db_isSet = false;
    m_db_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;
}

void OAIServiceVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceVersion::fromJsonObject(QJsonObject json) {

    m_api_isValid = ::OpenAPI::fromJsonValue(m_api, json[QString("api")]);
    m_api_isSet = !json[QString("api")].isNull() && m_api_isValid;

    m_db_isValid = ::OpenAPI::fromJsonValue(m_db, json[QString("db")]);
    m_db_isSet = !json[QString("db")].isNull() && m_db_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;
}

QString OAIServiceVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_api.isSet()) {
        obj.insert(QString("api"), ::OpenAPI::toJsonValue(m_api));
    }
    if (m_db.isSet()) {
        obj.insert(QString("db"), ::OpenAPI::toJsonValue(m_db));
    }
    if (m_service.isSet()) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    return obj;
}

OAIServiceVersion_api OAIServiceVersion::getApi() const {
    return m_api;
}
void OAIServiceVersion::setApi(const OAIServiceVersion_api &api) {
    m_api = api;
    m_api_isSet = true;
}

bool OAIServiceVersion::is_api_Set() const{
    return m_api_isSet;
}

bool OAIServiceVersion::is_api_Valid() const{
    return m_api_isValid;
}

OAIServiceVersion_db OAIServiceVersion::getDb() const {
    return m_db;
}
void OAIServiceVersion::setDb(const OAIServiceVersion_db &db) {
    m_db = db;
    m_db_isSet = true;
}

bool OAIServiceVersion::is_db_Set() const{
    return m_db_isSet;
}

bool OAIServiceVersion::is_db_Valid() const{
    return m_db_isValid;
}

OAIServiceVersion_service OAIServiceVersion::getService() const {
    return m_service;
}
void OAIServiceVersion::setService(const OAIServiceVersion_service &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIServiceVersion::is_service_Set() const{
    return m_service_isSet;
}

bool OAIServiceVersion::is_service_Valid() const{
    return m_service_isValid;
}

bool OAIServiceVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_db.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
