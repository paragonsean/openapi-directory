/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisArchiveSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysisArchiveSummary::OAIAnalysisArchiveSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysisArchiveSummary::OAIAnalysisArchiveSummary() {
    this->initializeModel();
}

OAIAnalysisArchiveSummary::~OAIAnalysisArchiveSummary() {}

void OAIAnalysisArchiveSummary::initializeModel() {

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_total_data_bytes_isSet = false;
    m_total_data_bytes_isValid = false;

    m_total_image_count_isSet = false;
    m_total_image_count_isValid = false;

    m_total_tag_count_isSet = false;
    m_total_tag_count_isValid = false;
}

void OAIAnalysisArchiveSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysisArchiveSummary::fromJsonObject(QJsonObject json) {

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_total_data_bytes_isValid = ::OpenAPI::fromJsonValue(m_total_data_bytes, json[QString("total_data_bytes")]);
    m_total_data_bytes_isSet = !json[QString("total_data_bytes")].isNull() && m_total_data_bytes_isValid;

    m_total_image_count_isValid = ::OpenAPI::fromJsonValue(m_total_image_count, json[QString("total_image_count")]);
    m_total_image_count_isSet = !json[QString("total_image_count")].isNull() && m_total_image_count_isValid;

    m_total_tag_count_isValid = ::OpenAPI::fromJsonValue(m_total_tag_count, json[QString("total_tag_count")]);
    m_total_tag_count_isSet = !json[QString("total_tag_count")].isNull() && m_total_tag_count_isValid;
}

QString OAIAnalysisArchiveSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysisArchiveSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_total_data_bytes_isSet) {
        obj.insert(QString("total_data_bytes"), ::OpenAPI::toJsonValue(m_total_data_bytes));
    }
    if (m_total_image_count_isSet) {
        obj.insert(QString("total_image_count"), ::OpenAPI::toJsonValue(m_total_image_count));
    }
    if (m_total_tag_count_isSet) {
        obj.insert(QString("total_tag_count"), ::OpenAPI::toJsonValue(m_total_tag_count));
    }
    return obj;
}

QDateTime OAIAnalysisArchiveSummary::getLastUpdated() const {
    return m_last_updated;
}
void OAIAnalysisArchiveSummary::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIAnalysisArchiveSummary::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIAnalysisArchiveSummary::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

qint32 OAIAnalysisArchiveSummary::getTotalDataBytes() const {
    return m_total_data_bytes;
}
void OAIAnalysisArchiveSummary::setTotalDataBytes(const qint32 &total_data_bytes) {
    m_total_data_bytes = total_data_bytes;
    m_total_data_bytes_isSet = true;
}

bool OAIAnalysisArchiveSummary::is_total_data_bytes_Set() const{
    return m_total_data_bytes_isSet;
}

bool OAIAnalysisArchiveSummary::is_total_data_bytes_Valid() const{
    return m_total_data_bytes_isValid;
}

qint32 OAIAnalysisArchiveSummary::getTotalImageCount() const {
    return m_total_image_count;
}
void OAIAnalysisArchiveSummary::setTotalImageCount(const qint32 &total_image_count) {
    m_total_image_count = total_image_count;
    m_total_image_count_isSet = true;
}

bool OAIAnalysisArchiveSummary::is_total_image_count_Set() const{
    return m_total_image_count_isSet;
}

bool OAIAnalysisArchiveSummary::is_total_image_count_Valid() const{
    return m_total_image_count_isValid;
}

qint32 OAIAnalysisArchiveSummary::getTotalTagCount() const {
    return m_total_tag_count;
}
void OAIAnalysisArchiveSummary::setTotalTagCount(const qint32 &total_tag_count) {
    m_total_tag_count = total_tag_count;
    m_total_tag_count_isSet = true;
}

bool OAIAnalysisArchiveSummary::is_total_tag_count_Set() const{
    return m_total_tag_count_isSet;
}

bool OAIAnalysisArchiveSummary::is_total_tag_count_Valid() const{
    return m_total_tag_count_isValid;
}

bool OAIAnalysisArchiveSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_data_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_image_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_tag_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysisArchiveSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
