/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatusResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatusResponse::OAIStatusResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatusResponse::OAIStatusResponse() {
    this->initializeModel();
}

OAIStatusResponse::~OAIStatusResponse() {}

void OAIStatusResponse::initializeModel() {

    m_available_isSet = false;
    m_available_isValid = false;

    m_busy_isSet = false;
    m_busy_isValid = false;

    m_db_version_isSet = false;
    m_db_version_isValid = false;

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_up_isSet = false;
    m_up_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIStatusResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatusResponse::fromJsonObject(QJsonObject json) {

    m_available_isValid = ::OpenAPI::fromJsonValue(m_available, json[QString("available")]);
    m_available_isSet = !json[QString("available")].isNull() && m_available_isValid;

    m_busy_isValid = ::OpenAPI::fromJsonValue(m_busy, json[QString("busy")]);
    m_busy_isSet = !json[QString("busy")].isNull() && m_busy_isValid;

    m_db_version_isValid = ::OpenAPI::fromJsonValue(m_db_version, json[QString("db_version")]);
    m_db_version_isSet = !json[QString("db_version")].isNull() && m_db_version_isValid;

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_up_isValid = ::OpenAPI::fromJsonValue(m_up, json[QString("up")]);
    m_up_isSet = !json[QString("up")].isNull() && m_up_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIStatusResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatusResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_available_isSet) {
        obj.insert(QString("available"), ::OpenAPI::toJsonValue(m_available));
    }
    if (m_busy_isSet) {
        obj.insert(QString("busy"), ::OpenAPI::toJsonValue(m_busy));
    }
    if (m_db_version_isSet) {
        obj.insert(QString("db_version"), ::OpenAPI::toJsonValue(m_db_version));
    }
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_up_isSet) {
        obj.insert(QString("up"), ::OpenAPI::toJsonValue(m_up));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

bool OAIStatusResponse::isAvailable() const {
    return m_available;
}
void OAIStatusResponse::setAvailable(const bool &available) {
    m_available = available;
    m_available_isSet = true;
}

bool OAIStatusResponse::is_available_Set() const{
    return m_available_isSet;
}

bool OAIStatusResponse::is_available_Valid() const{
    return m_available_isValid;
}

bool OAIStatusResponse::isBusy() const {
    return m_busy;
}
void OAIStatusResponse::setBusy(const bool &busy) {
    m_busy = busy;
    m_busy_isSet = true;
}

bool OAIStatusResponse::is_busy_Set() const{
    return m_busy_isSet;
}

bool OAIStatusResponse::is_busy_Valid() const{
    return m_busy_isValid;
}

QString OAIStatusResponse::getDbVersion() const {
    return m_db_version;
}
void OAIStatusResponse::setDbVersion(const QString &db_version) {
    m_db_version = db_version;
    m_db_version_isSet = true;
}

bool OAIStatusResponse::is_db_version_Set() const{
    return m_db_version_isSet;
}

bool OAIStatusResponse::is_db_version_Valid() const{
    return m_db_version_isValid;
}

OAIObject OAIStatusResponse::getDetail() const {
    return m_detail;
}
void OAIStatusResponse::setDetail(const OAIObject &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIStatusResponse::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIStatusResponse::is_detail_Valid() const{
    return m_detail_isValid;
}

QString OAIStatusResponse::getMessage() const {
    return m_message;
}
void OAIStatusResponse::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIStatusResponse::is_message_Set() const{
    return m_message_isSet;
}

bool OAIStatusResponse::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIStatusResponse::isUp() const {
    return m_up;
}
void OAIStatusResponse::setUp(const bool &up) {
    m_up = up;
    m_up_isSet = true;
}

bool OAIStatusResponse::is_up_Set() const{
    return m_up_isSet;
}

bool OAIStatusResponse::is_up_Valid() const{
    return m_up_isValid;
}

QString OAIStatusResponse::getVersion() const {
    return m_version;
}
void OAIStatusResponse::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIStatusResponse::is_version_Set() const{
    return m_version_isSet;
}

bool OAIStatusResponse::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIStatusResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_busy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_up_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatusResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
