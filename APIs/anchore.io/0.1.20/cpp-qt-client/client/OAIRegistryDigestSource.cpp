/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegistryDigestSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegistryDigestSource::OAIRegistryDigestSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegistryDigestSource::OAIRegistryDigestSource() {
    this->initializeModel();
}

OAIRegistryDigestSource::~OAIRegistryDigestSource() {}

void OAIRegistryDigestSource::initializeModel() {

    m_creation_timestamp_override_isSet = false;
    m_creation_timestamp_override_isValid = false;

    m_dockerfile_isSet = false;
    m_dockerfile_isValid = false;

    m_pullstring_isSet = false;
    m_pullstring_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;
}

void OAIRegistryDigestSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegistryDigestSource::fromJsonObject(QJsonObject json) {

    m_creation_timestamp_override_isValid = ::OpenAPI::fromJsonValue(m_creation_timestamp_override, json[QString("creation_timestamp_override")]);
    m_creation_timestamp_override_isSet = !json[QString("creation_timestamp_override")].isNull() && m_creation_timestamp_override_isValid;

    m_dockerfile_isValid = ::OpenAPI::fromJsonValue(m_dockerfile, json[QString("dockerfile")]);
    m_dockerfile_isSet = !json[QString("dockerfile")].isNull() && m_dockerfile_isValid;

    m_pullstring_isValid = ::OpenAPI::fromJsonValue(m_pullstring, json[QString("pullstring")]);
    m_pullstring_isSet = !json[QString("pullstring")].isNull() && m_pullstring_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;
}

QString OAIRegistryDigestSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegistryDigestSource::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_timestamp_override_isSet) {
        obj.insert(QString("creation_timestamp_override"), ::OpenAPI::toJsonValue(m_creation_timestamp_override));
    }
    if (m_dockerfile_isSet) {
        obj.insert(QString("dockerfile"), ::OpenAPI::toJsonValue(m_dockerfile));
    }
    if (m_pullstring_isSet) {
        obj.insert(QString("pullstring"), ::OpenAPI::toJsonValue(m_pullstring));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    return obj;
}

QDateTime OAIRegistryDigestSource::getCreationTimestampOverride() const {
    return m_creation_timestamp_override;
}
void OAIRegistryDigestSource::setCreationTimestampOverride(const QDateTime &creation_timestamp_override) {
    m_creation_timestamp_override = creation_timestamp_override;
    m_creation_timestamp_override_isSet = true;
}

bool OAIRegistryDigestSource::is_creation_timestamp_override_Set() const{
    return m_creation_timestamp_override_isSet;
}

bool OAIRegistryDigestSource::is_creation_timestamp_override_Valid() const{
    return m_creation_timestamp_override_isValid;
}

QString OAIRegistryDigestSource::getDockerfile() const {
    return m_dockerfile;
}
void OAIRegistryDigestSource::setDockerfile(const QString &dockerfile) {
    m_dockerfile = dockerfile;
    m_dockerfile_isSet = true;
}

bool OAIRegistryDigestSource::is_dockerfile_Set() const{
    return m_dockerfile_isSet;
}

bool OAIRegistryDigestSource::is_dockerfile_Valid() const{
    return m_dockerfile_isValid;
}

QString OAIRegistryDigestSource::getPullstring() const {
    return m_pullstring;
}
void OAIRegistryDigestSource::setPullstring(const QString &pullstring) {
    m_pullstring = pullstring;
    m_pullstring_isSet = true;
}

bool OAIRegistryDigestSource::is_pullstring_Set() const{
    return m_pullstring_isSet;
}

bool OAIRegistryDigestSource::is_pullstring_Valid() const{
    return m_pullstring_isValid;
}

QString OAIRegistryDigestSource::getTag() const {
    return m_tag;
}
void OAIRegistryDigestSource::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIRegistryDigestSource::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIRegistryDigestSource::is_tag_Valid() const{
    return m_tag_isValid;
}

bool OAIRegistryDigestSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_timestamp_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dockerfile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pullstring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegistryDigestSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pullstring_isValid && m_tag_isValid && true;
}

} // namespace OpenAPI
