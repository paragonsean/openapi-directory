/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITriggerParamSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITriggerParamSpec::OAITriggerParamSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITriggerParamSpec::OAITriggerParamSpec() {
    this->initializeModel();
}

OAITriggerParamSpec::~OAITriggerParamSpec() {}

void OAITriggerParamSpec::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_example_isSet = false;
    m_example_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_superceded_by_isSet = false;
    m_superceded_by_isValid = false;

    m_validator_isSet = false;
    m_validator_isValid = false;
}

void OAITriggerParamSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITriggerParamSpec::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_example_isValid = ::OpenAPI::fromJsonValue(m_example, json[QString("example")]);
    m_example_isSet = !json[QString("example")].isNull() && m_example_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_superceded_by_isValid = ::OpenAPI::fromJsonValue(m_superceded_by, json[QString("superceded_by")]);
    m_superceded_by_isSet = !json[QString("superceded_by")].isNull() && m_superceded_by_isValid;

    m_validator_isValid = ::OpenAPI::fromJsonValue(m_validator, json[QString("validator")]);
    m_validator_isSet = !json[QString("validator")].isNull() && m_validator_isValid;
}

QString OAITriggerParamSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITriggerParamSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_example_isSet) {
        obj.insert(QString("example"), ::OpenAPI::toJsonValue(m_example));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_superceded_by_isSet) {
        obj.insert(QString("superceded_by"), ::OpenAPI::toJsonValue(m_superceded_by));
    }
    if (m_validator_isSet) {
        obj.insert(QString("validator"), ::OpenAPI::toJsonValue(m_validator));
    }
    return obj;
}

QString OAITriggerParamSpec::getDescription() const {
    return m_description;
}
void OAITriggerParamSpec::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITriggerParamSpec::is_description_Set() const{
    return m_description_isSet;
}

bool OAITriggerParamSpec::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITriggerParamSpec::getExample() const {
    return m_example;
}
void OAITriggerParamSpec::setExample(const QString &example) {
    m_example = example;
    m_example_isSet = true;
}

bool OAITriggerParamSpec::is_example_Set() const{
    return m_example_isSet;
}

bool OAITriggerParamSpec::is_example_Valid() const{
    return m_example_isValid;
}

QString OAITriggerParamSpec::getName() const {
    return m_name;
}
void OAITriggerParamSpec::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITriggerParamSpec::is_name_Set() const{
    return m_name_isSet;
}

bool OAITriggerParamSpec::is_name_Valid() const{
    return m_name_isValid;
}

bool OAITriggerParamSpec::isRequired() const {
    return m_required;
}
void OAITriggerParamSpec::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAITriggerParamSpec::is_required_Set() const{
    return m_required_isSet;
}

bool OAITriggerParamSpec::is_required_Valid() const{
    return m_required_isValid;
}

QString OAITriggerParamSpec::getState() const {
    return m_state;
}
void OAITriggerParamSpec::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAITriggerParamSpec::is_state_Set() const{
    return m_state_isSet;
}

bool OAITriggerParamSpec::is_state_Valid() const{
    return m_state_isValid;
}

QString OAITriggerParamSpec::getSupercededBy() const {
    return m_superceded_by;
}
void OAITriggerParamSpec::setSupercededBy(const QString &superceded_by) {
    m_superceded_by = superceded_by;
    m_superceded_by_isSet = true;
}

bool OAITriggerParamSpec::is_superceded_by_Set() const{
    return m_superceded_by_isSet;
}

bool OAITriggerParamSpec::is_superceded_by_Valid() const{
    return m_superceded_by_isValid;
}

OAIObject OAITriggerParamSpec::getValidator() const {
    return m_validator;
}
void OAITriggerParamSpec::setValidator(const OAIObject &validator) {
    m_validator = validator;
    m_validator_isSet = true;
}

bool OAITriggerParamSpec::is_validator_Set() const{
    return m_validator_isSet;
}

bool OAITriggerParamSpec::is_validator_Valid() const{
    return m_validator_isValid;
}

bool OAITriggerParamSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_example_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_superceded_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validator_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITriggerParamSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
