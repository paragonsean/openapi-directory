/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPolicyBundle.h
 *
 * A bundle containing a set of policies, whitelists, and rules for mapping them to specific images
 */

#ifndef OAIPolicyBundle_H
#define OAIPolicyBundle_H

#include <QJsonObject>

#include "OAIImageSelectionRule.h"
#include "OAIMappingRule.h"
#include "OAIPolicy.h"
#include "OAIWhitelist.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIImageSelectionRule;
class OAIMappingRule;
class OAIPolicy;
class OAIWhitelist;

class OAIPolicyBundle : public OAIObject {
public:
    OAIPolicyBundle();
    OAIPolicyBundle(QString json);
    ~OAIPolicyBundle() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIImageSelectionRule> getBlacklistedImages() const;
    void setBlacklistedImages(const QList<OAIImageSelectionRule> &blacklisted_images);
    bool is_blacklisted_images_Set() const;
    bool is_blacklisted_images_Valid() const;

    QString getComment() const;
    void setComment(const QString &comment);
    bool is_comment_Set() const;
    bool is_comment_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QList<OAIMappingRule> getMappings() const;
    void setMappings(const QList<OAIMappingRule> &mappings);
    bool is_mappings_Set() const;
    bool is_mappings_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIPolicy> getPolicies() const;
    void setPolicies(const QList<OAIPolicy> &policies);
    bool is_policies_Set() const;
    bool is_policies_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    QList<OAIImageSelectionRule> getWhitelistedImages() const;
    void setWhitelistedImages(const QList<OAIImageSelectionRule> &whitelisted_images);
    bool is_whitelisted_images_Set() const;
    bool is_whitelisted_images_Valid() const;

    QList<OAIWhitelist> getWhitelists() const;
    void setWhitelists(const QList<OAIWhitelist> &whitelists);
    bool is_whitelists_Set() const;
    bool is_whitelists_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIImageSelectionRule> m_blacklisted_images;
    bool m_blacklisted_images_isSet;
    bool m_blacklisted_images_isValid;

    QString m_comment;
    bool m_comment_isSet;
    bool m_comment_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QList<OAIMappingRule> m_mappings;
    bool m_mappings_isSet;
    bool m_mappings_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIPolicy> m_policies;
    bool m_policies_isSet;
    bool m_policies_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;

    QList<OAIImageSelectionRule> m_whitelisted_images;
    bool m_whitelisted_images_isSet;
    bool m_whitelisted_images_isValid;

    QList<OAIWhitelist> m_whitelists;
    bool m_whitelists_isSet;
    bool m_whitelists_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPolicyBundle)

#endif // OAIPolicyBundle_H
