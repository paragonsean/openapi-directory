/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetadataResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetadataResponse::OAIMetadataResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetadataResponse::OAIMetadataResponse() {
    this->initializeModel();
}

OAIMetadataResponse::~OAIMetadataResponse() {}

void OAIMetadataResponse::initializeModel() {

    m_image_digest_isSet = false;
    m_image_digest_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_metadata_type_isSet = false;
    m_metadata_type_isValid = false;
}

void OAIMetadataResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetadataResponse::fromJsonObject(QJsonObject json) {

    m_image_digest_isValid = ::OpenAPI::fromJsonValue(m_image_digest, json[QString("imageDigest")]);
    m_image_digest_isSet = !json[QString("imageDigest")].isNull() && m_image_digest_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_metadata_type_isValid = ::OpenAPI::fromJsonValue(m_metadata_type, json[QString("metadata_type")]);
    m_metadata_type_isSet = !json[QString("metadata_type")].isNull() && m_metadata_type_isValid;
}

QString OAIMetadataResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetadataResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_image_digest_isSet) {
        obj.insert(QString("imageDigest"), ::OpenAPI::toJsonValue(m_image_digest));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_metadata_type_isSet) {
        obj.insert(QString("metadata_type"), ::OpenAPI::toJsonValue(m_metadata_type));
    }
    return obj;
}

QString OAIMetadataResponse::getImageDigest() const {
    return m_image_digest;
}
void OAIMetadataResponse::setImageDigest(const QString &image_digest) {
    m_image_digest = image_digest;
    m_image_digest_isSet = true;
}

bool OAIMetadataResponse::is_image_digest_Set() const{
    return m_image_digest_isSet;
}

bool OAIMetadataResponse::is_image_digest_Valid() const{
    return m_image_digest_isValid;
}

QJsonValue OAIMetadataResponse::getMetadata() const {
    return m_metadata;
}
void OAIMetadataResponse::setMetadata(const QJsonValue &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIMetadataResponse::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIMetadataResponse::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIMetadataResponse::getMetadataType() const {
    return m_metadata_type;
}
void OAIMetadataResponse::setMetadataType(const QString &metadata_type) {
    m_metadata_type = metadata_type;
    m_metadata_type_isSet = true;
}

bool OAIMetadataResponse::is_metadata_type_Set() const{
    return m_metadata_type_isSet;
}

bool OAIMetadataResponse::is_metadata_type_Valid() const{
    return m_metadata_type_isValid;
}

bool OAIMetadataResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetadataResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
