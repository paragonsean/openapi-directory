/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWhitelistItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWhitelistItem::OAIWhitelistItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWhitelistItem::OAIWhitelistItem() {
    this->initializeModel();
}

OAIWhitelistItem::~OAIWhitelistItem() {}

void OAIWhitelistItem::initializeModel() {

    m_expires_on_isSet = false;
    m_expires_on_isValid = false;

    m_gate_isSet = false;
    m_gate_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_trigger_id_isSet = false;
    m_trigger_id_isValid = false;
}

void OAIWhitelistItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWhitelistItem::fromJsonObject(QJsonObject json) {

    m_expires_on_isValid = ::OpenAPI::fromJsonValue(m_expires_on, json[QString("expires_on")]);
    m_expires_on_isSet = !json[QString("expires_on")].isNull() && m_expires_on_isValid;

    m_gate_isValid = ::OpenAPI::fromJsonValue(m_gate, json[QString("gate")]);
    m_gate_isSet = !json[QString("gate")].isNull() && m_gate_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_trigger_id_isValid = ::OpenAPI::fromJsonValue(m_trigger_id, json[QString("trigger_id")]);
    m_trigger_id_isSet = !json[QString("trigger_id")].isNull() && m_trigger_id_isValid;
}

QString OAIWhitelistItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWhitelistItem::asJsonObject() const {
    QJsonObject obj;
    if (m_expires_on_isSet) {
        obj.insert(QString("expires_on"), ::OpenAPI::toJsonValue(m_expires_on));
    }
    if (m_gate_isSet) {
        obj.insert(QString("gate"), ::OpenAPI::toJsonValue(m_gate));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_trigger_id_isSet) {
        obj.insert(QString("trigger_id"), ::OpenAPI::toJsonValue(m_trigger_id));
    }
    return obj;
}

QDateTime OAIWhitelistItem::getExpiresOn() const {
    return m_expires_on;
}
void OAIWhitelistItem::setExpiresOn(const QDateTime &expires_on) {
    m_expires_on = expires_on;
    m_expires_on_isSet = true;
}

bool OAIWhitelistItem::is_expires_on_Set() const{
    return m_expires_on_isSet;
}

bool OAIWhitelistItem::is_expires_on_Valid() const{
    return m_expires_on_isValid;
}

QString OAIWhitelistItem::getGate() const {
    return m_gate;
}
void OAIWhitelistItem::setGate(const QString &gate) {
    m_gate = gate;
    m_gate_isSet = true;
}

bool OAIWhitelistItem::is_gate_Set() const{
    return m_gate_isSet;
}

bool OAIWhitelistItem::is_gate_Valid() const{
    return m_gate_isValid;
}

QString OAIWhitelistItem::getId() const {
    return m_id;
}
void OAIWhitelistItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWhitelistItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWhitelistItem::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWhitelistItem::getTriggerId() const {
    return m_trigger_id;
}
void OAIWhitelistItem::setTriggerId(const QString &trigger_id) {
    m_trigger_id = trigger_id;
    m_trigger_id_isSet = true;
}

bool OAIWhitelistItem::is_trigger_id_Set() const{
    return m_trigger_id_isSet;
}

bool OAIWhitelistItem::is_trigger_id_Valid() const{
    return m_trigger_id_isValid;
}

bool OAIWhitelistItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expires_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWhitelistItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_gate_isValid && m_trigger_id_isValid && true;
}

} // namespace OpenAPI
