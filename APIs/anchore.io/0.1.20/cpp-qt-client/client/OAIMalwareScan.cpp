/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMalwareScan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMalwareScan::OAIMalwareScan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMalwareScan::OAIMalwareScan() {
    this->initializeModel();
}

OAIMalwareScan::~OAIMalwareScan() {}

void OAIMalwareScan::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_findings_isSet = false;
    m_findings_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_scanner_isSet = false;
    m_scanner_isValid = false;
}

void OAIMalwareScan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMalwareScan::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_findings_isValid = ::OpenAPI::fromJsonValue(m_findings, json[QString("findings")]);
    m_findings_isSet = !json[QString("findings")].isNull() && m_findings_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_scanner_isValid = ::OpenAPI::fromJsonValue(m_scanner, json[QString("scanner")]);
    m_scanner_isSet = !json[QString("scanner")].isNull() && m_scanner_isValid;
}

QString OAIMalwareScan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMalwareScan::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_findings.size() > 0) {
        obj.insert(QString("findings"), ::OpenAPI::toJsonValue(m_findings));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_scanner_isSet) {
        obj.insert(QString("scanner"), ::OpenAPI::toJsonValue(m_scanner));
    }
    return obj;
}

bool OAIMalwareScan::isEnabled() const {
    return m_enabled;
}
void OAIMalwareScan::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIMalwareScan::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIMalwareScan::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QList<OAIMalwareScan_findings_inner> OAIMalwareScan::getFindings() const {
    return m_findings;
}
void OAIMalwareScan::setFindings(const QList<OAIMalwareScan_findings_inner> &findings) {
    m_findings = findings;
    m_findings_isSet = true;
}

bool OAIMalwareScan::is_findings_Set() const{
    return m_findings_isSet;
}

bool OAIMalwareScan::is_findings_Valid() const{
    return m_findings_isValid;
}

OAIObject OAIMalwareScan::getMetadata() const {
    return m_metadata;
}
void OAIMalwareScan::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIMalwareScan::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIMalwareScan::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIMalwareScan::getScanner() const {
    return m_scanner;
}
void OAIMalwareScan::setScanner(const QString &scanner) {
    m_scanner = scanner;
    m_scanner_isSet = true;
}

bool OAIMalwareScan::is_scanner_Set() const{
    return m_scanner_isSet;
}

bool OAIMalwareScan::is_scanner_Valid() const{
    return m_scanner_isValid;
}

bool OAIMalwareScan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_findings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scanner_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMalwareScan::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
