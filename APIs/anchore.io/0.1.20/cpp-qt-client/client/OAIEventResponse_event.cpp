/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventResponse_event.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventResponse_event::OAIEventResponse_event(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventResponse_event::OAIEventResponse_event() {
    this->initializeModel();
}

OAIEventResponse_event::~OAIEventResponse_event() {}

void OAIEventResponse_event::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIEventResponse_event::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventResponse_event::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIEventResponse_event::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventResponse_event::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_resource.isSet()) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIEventResponse_event::getCategory() const {
    return m_category;
}
void OAIEventResponse_event::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIEventResponse_event::is_category_Set() const{
    return m_category_isSet;
}

bool OAIEventResponse_event::is_category_Valid() const{
    return m_category_isValid;
}

OAIObject OAIEventResponse_event::getDetails() const {
    return m_details;
}
void OAIEventResponse_event::setDetails(const OAIObject &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIEventResponse_event::is_details_Set() const{
    return m_details_isSet;
}

bool OAIEventResponse_event::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIEventResponse_event::getLevel() const {
    return m_level;
}
void OAIEventResponse_event::setLevel(const QString &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIEventResponse_event::is_level_Set() const{
    return m_level_isSet;
}

bool OAIEventResponse_event::is_level_Valid() const{
    return m_level_isValid;
}

QString OAIEventResponse_event::getMessage() const {
    return m_message;
}
void OAIEventResponse_event::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIEventResponse_event::is_message_Set() const{
    return m_message_isSet;
}

bool OAIEventResponse_event::is_message_Valid() const{
    return m_message_isValid;
}

OAIEventResponse_event_resource OAIEventResponse_event::getResource() const {
    return m_resource;
}
void OAIEventResponse_event::setResource(const OAIEventResponse_event_resource &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIEventResponse_event::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIEventResponse_event::is_resource_Valid() const{
    return m_resource_isValid;
}

OAIEventResponse_event_source OAIEventResponse_event::getSource() const {
    return m_source;
}
void OAIEventResponse_event::setSource(const OAIEventResponse_event_source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIEventResponse_event::is_source_Set() const{
    return m_source_isSet;
}

bool OAIEventResponse_event::is_source_Valid() const{
    return m_source_isValid;
}

QDateTime OAIEventResponse_event::getTimestamp() const {
    return m_timestamp;
}
void OAIEventResponse_event::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIEventResponse_event::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIEventResponse_event::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIEventResponse_event::getType() const {
    return m_type;
}
void OAIEventResponse_event::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEventResponse_event::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEventResponse_event::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIEventResponse_event::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventResponse_event::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
