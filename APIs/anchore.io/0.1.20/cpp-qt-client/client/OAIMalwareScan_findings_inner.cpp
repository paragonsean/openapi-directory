/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMalwareScan_findings_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMalwareScan_findings_inner::OAIMalwareScan_findings_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMalwareScan_findings_inner::OAIMalwareScan_findings_inner() {
    this->initializeModel();
}

OAIMalwareScan_findings_inner::~OAIMalwareScan_findings_inner() {}

void OAIMalwareScan_findings_inner::initializeModel() {

    m_path_isSet = false;
    m_path_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;
}

void OAIMalwareScan_findings_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMalwareScan_findings_inner::fromJsonObject(QJsonObject json) {

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_signature_isValid = ::OpenAPI::fromJsonValue(m_signature, json[QString("signature")]);
    m_signature_isSet = !json[QString("signature")].isNull() && m_signature_isValid;
}

QString OAIMalwareScan_findings_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMalwareScan_findings_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_signature_isSet) {
        obj.insert(QString("signature"), ::OpenAPI::toJsonValue(m_signature));
    }
    return obj;
}

QString OAIMalwareScan_findings_inner::getPath() const {
    return m_path;
}
void OAIMalwareScan_findings_inner::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIMalwareScan_findings_inner::is_path_Set() const{
    return m_path_isSet;
}

bool OAIMalwareScan_findings_inner::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIMalwareScan_findings_inner::getSignature() const {
    return m_signature;
}
void OAIMalwareScan_findings_inner::setSignature(const QString &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool OAIMalwareScan_findings_inner::is_signature_Set() const{
    return m_signature_isSet;
}

bool OAIMalwareScan_findings_inner::is_signature_Valid() const{
    return m_signature_isValid;
}

bool OAIMalwareScan_findings_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMalwareScan_findings_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
