/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeedSyncResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeedSyncResult::OAIFeedSyncResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeedSyncResult::OAIFeedSyncResult() {
    this->initializeModel();
}

OAIFeedSyncResult::~OAIFeedSyncResult() {}

void OAIFeedSyncResult::initializeModel() {

    m_feed_isSet = false;
    m_feed_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_total_time_seconds_isSet = false;
    m_total_time_seconds_isValid = false;
}

void OAIFeedSyncResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeedSyncResult::fromJsonObject(QJsonObject json) {

    m_feed_isValid = ::OpenAPI::fromJsonValue(m_feed, json[QString("feed")]);
    m_feed_isSet = !json[QString("feed")].isNull() && m_feed_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_total_time_seconds_isValid = ::OpenAPI::fromJsonValue(m_total_time_seconds, json[QString("total_time_seconds")]);
    m_total_time_seconds_isSet = !json[QString("total_time_seconds")].isNull() && m_total_time_seconds_isValid;
}

QString OAIFeedSyncResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeedSyncResult::asJsonObject() const {
    QJsonObject obj;
    if (m_feed_isSet) {
        obj.insert(QString("feed"), ::OpenAPI::toJsonValue(m_feed));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_total_time_seconds_isSet) {
        obj.insert(QString("total_time_seconds"), ::OpenAPI::toJsonValue(m_total_time_seconds));
    }
    return obj;
}

QString OAIFeedSyncResult::getFeed() const {
    return m_feed;
}
void OAIFeedSyncResult::setFeed(const QString &feed) {
    m_feed = feed;
    m_feed_isSet = true;
}

bool OAIFeedSyncResult::is_feed_Set() const{
    return m_feed_isSet;
}

bool OAIFeedSyncResult::is_feed_Valid() const{
    return m_feed_isValid;
}

QList<OAIGroupSyncResult> OAIFeedSyncResult::getGroups() const {
    return m_groups;
}
void OAIFeedSyncResult::setGroups(const QList<OAIGroupSyncResult> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIFeedSyncResult::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIFeedSyncResult::is_groups_Valid() const{
    return m_groups_isValid;
}

QString OAIFeedSyncResult::getStatus() const {
    return m_status;
}
void OAIFeedSyncResult::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIFeedSyncResult::is_status_Set() const{
    return m_status_isSet;
}

bool OAIFeedSyncResult::is_status_Valid() const{
    return m_status_isValid;
}

double OAIFeedSyncResult::getTotalTimeSeconds() const {
    return m_total_time_seconds;
}
void OAIFeedSyncResult::setTotalTimeSeconds(const double &total_time_seconds) {
    m_total_time_seconds = total_time_seconds;
    m_total_time_seconds_isSet = true;
}

bool OAIFeedSyncResult::is_total_time_seconds_Set() const{
    return m_total_time_seconds_isSet;
}

bool OAIFeedSyncResult::is_total_time_seconds_Valid() const{
    return m_total_time_seconds_isValid;
}

bool OAIFeedSyncResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_feed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_time_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeedSyncResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
