/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicyBundleRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicyBundleRecord::OAIPolicyBundleRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicyBundleRecord::OAIPolicyBundleRecord() {
    this->initializeModel();
}

OAIPolicyBundleRecord::~OAIPolicyBundleRecord() {}

void OAIPolicyBundleRecord::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_policy_id_isSet = false;
    m_policy_id_isValid = false;

    m_policy_source_isSet = false;
    m_policy_source_isValid = false;

    m_policybundle_isSet = false;
    m_policybundle_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIPolicyBundleRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicyBundleRecord::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_policy_id_isValid = ::OpenAPI::fromJsonValue(m_policy_id, json[QString("policyId")]);
    m_policy_id_isSet = !json[QString("policyId")].isNull() && m_policy_id_isValid;

    m_policy_source_isValid = ::OpenAPI::fromJsonValue(m_policy_source, json[QString("policy_source")]);
    m_policy_source_isSet = !json[QString("policy_source")].isNull() && m_policy_source_isValid;

    m_policybundle_isValid = ::OpenAPI::fromJsonValue(m_policybundle, json[QString("policybundle")]);
    m_policybundle_isSet = !json[QString("policybundle")].isNull() && m_policybundle_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIPolicyBundleRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicyBundleRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_policy_id_isSet) {
        obj.insert(QString("policyId"), ::OpenAPI::toJsonValue(m_policy_id));
    }
    if (m_policy_source_isSet) {
        obj.insert(QString("policy_source"), ::OpenAPI::toJsonValue(m_policy_source));
    }
    if (m_policybundle.isSet()) {
        obj.insert(QString("policybundle"), ::OpenAPI::toJsonValue(m_policybundle));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

bool OAIPolicyBundleRecord::isActive() const {
    return m_active;
}
void OAIPolicyBundleRecord::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIPolicyBundleRecord::is_active_Set() const{
    return m_active_isSet;
}

bool OAIPolicyBundleRecord::is_active_Valid() const{
    return m_active_isValid;
}

QDateTime OAIPolicyBundleRecord::getCreatedAt() const {
    return m_created_at;
}
void OAIPolicyBundleRecord::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPolicyBundleRecord::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPolicyBundleRecord::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIPolicyBundleRecord::getLastUpdated() const {
    return m_last_updated;
}
void OAIPolicyBundleRecord::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIPolicyBundleRecord::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIPolicyBundleRecord::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIPolicyBundleRecord::getPolicyId() const {
    return m_policy_id;
}
void OAIPolicyBundleRecord::setPolicyId(const QString &policy_id) {
    m_policy_id = policy_id;
    m_policy_id_isSet = true;
}

bool OAIPolicyBundleRecord::is_policy_id_Set() const{
    return m_policy_id_isSet;
}

bool OAIPolicyBundleRecord::is_policy_id_Valid() const{
    return m_policy_id_isValid;
}

QString OAIPolicyBundleRecord::getPolicySource() const {
    return m_policy_source;
}
void OAIPolicyBundleRecord::setPolicySource(const QString &policy_source) {
    m_policy_source = policy_source;
    m_policy_source_isSet = true;
}

bool OAIPolicyBundleRecord::is_policy_source_Set() const{
    return m_policy_source_isSet;
}

bool OAIPolicyBundleRecord::is_policy_source_Valid() const{
    return m_policy_source_isValid;
}

OAIPolicyBundle OAIPolicyBundleRecord::getPolicybundle() const {
    return m_policybundle;
}
void OAIPolicyBundleRecord::setPolicybundle(const OAIPolicyBundle &policybundle) {
    m_policybundle = policybundle;
    m_policybundle_isSet = true;
}

bool OAIPolicyBundleRecord::is_policybundle_Set() const{
    return m_policybundle_isSet;
}

bool OAIPolicyBundleRecord::is_policybundle_Valid() const{
    return m_policybundle_isValid;
}

QString OAIPolicyBundleRecord::getUserId() const {
    return m_user_id;
}
void OAIPolicyBundleRecord::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIPolicyBundleRecord::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIPolicyBundleRecord::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIPolicyBundleRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policybundle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicyBundleRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
