/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImagePackageManifest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImagePackageManifest::OAIImagePackageManifest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImagePackageManifest::OAIImagePackageManifest() {
    this->initializeModel();
}

OAIImagePackageManifest::~OAIImagePackageManifest() {}

void OAIImagePackageManifest::initializeModel() {

    m_artifact_relationships_isSet = false;
    m_artifact_relationships_isValid = false;

    m_artifacts_isSet = false;
    m_artifacts_isValid = false;

    m_descriptor_isSet = false;
    m_descriptor_isValid = false;

    m_distro_isSet = false;
    m_distro_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIImagePackageManifest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImagePackageManifest::fromJsonObject(QJsonObject json) {

    m_artifact_relationships_isValid = ::OpenAPI::fromJsonValue(m_artifact_relationships, json[QString("artifactRelationships")]);
    m_artifact_relationships_isSet = !json[QString("artifactRelationships")].isNull() && m_artifact_relationships_isValid;

    m_artifacts_isValid = ::OpenAPI::fromJsonValue(m_artifacts, json[QString("artifacts")]);
    m_artifacts_isSet = !json[QString("artifacts")].isNull() && m_artifacts_isValid;

    m_descriptor_isValid = ::OpenAPI::fromJsonValue(m_descriptor, json[QString("descriptor")]);
    m_descriptor_isSet = !json[QString("descriptor")].isNull() && m_descriptor_isValid;

    m_distro_isValid = ::OpenAPI::fromJsonValue(m_distro, json[QString("distro")]);
    m_distro_isSet = !json[QString("distro")].isNull() && m_distro_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIImagePackageManifest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImagePackageManifest::asJsonObject() const {
    QJsonObject obj;
    if (m_artifact_relationships.size() > 0) {
        obj.insert(QString("artifactRelationships"), ::OpenAPI::toJsonValue(m_artifact_relationships));
    }
    if (m_artifacts.size() > 0) {
        obj.insert(QString("artifacts"), ::OpenAPI::toJsonValue(m_artifacts));
    }
    if (m_descriptor.isSet()) {
        obj.insert(QString("descriptor"), ::OpenAPI::toJsonValue(m_descriptor));
    }
    if (m_distro.isSet()) {
        obj.insert(QString("distro"), ::OpenAPI::toJsonValue(m_distro));
    }
    if (m_schema.isSet()) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QList<OAIImportPackageRelationship> OAIImagePackageManifest::getArtifactRelationships() const {
    return m_artifact_relationships;
}
void OAIImagePackageManifest::setArtifactRelationships(const QList<OAIImportPackageRelationship> &artifact_relationships) {
    m_artifact_relationships = artifact_relationships;
    m_artifact_relationships_isSet = true;
}

bool OAIImagePackageManifest::is_artifact_relationships_Set() const{
    return m_artifact_relationships_isSet;
}

bool OAIImagePackageManifest::is_artifact_relationships_Valid() const{
    return m_artifact_relationships_isValid;
}

QList<OAIImportPackage> OAIImagePackageManifest::getArtifacts() const {
    return m_artifacts;
}
void OAIImagePackageManifest::setArtifacts(const QList<OAIImportPackage> &artifacts) {
    m_artifacts = artifacts;
    m_artifacts_isSet = true;
}

bool OAIImagePackageManifest::is_artifacts_Set() const{
    return m_artifacts_isSet;
}

bool OAIImagePackageManifest::is_artifacts_Valid() const{
    return m_artifacts_isValid;
}

OAIImportDescriptor OAIImagePackageManifest::getDescriptor() const {
    return m_descriptor;
}
void OAIImagePackageManifest::setDescriptor(const OAIImportDescriptor &descriptor) {
    m_descriptor = descriptor;
    m_descriptor_isSet = true;
}

bool OAIImagePackageManifest::is_descriptor_Set() const{
    return m_descriptor_isSet;
}

bool OAIImagePackageManifest::is_descriptor_Valid() const{
    return m_descriptor_isValid;
}

OAIImportDistribution OAIImagePackageManifest::getDistro() const {
    return m_distro;
}
void OAIImagePackageManifest::setDistro(const OAIImportDistribution &distro) {
    m_distro = distro;
    m_distro_isSet = true;
}

bool OAIImagePackageManifest::is_distro_Set() const{
    return m_distro_isSet;
}

bool OAIImagePackageManifest::is_distro_Valid() const{
    return m_distro_isValid;
}

OAIImportSchema OAIImagePackageManifest::getSchema() const {
    return m_schema;
}
void OAIImagePackageManifest::setSchema(const OAIImportSchema &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIImagePackageManifest::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIImagePackageManifest::is_schema_Valid() const{
    return m_schema_isValid;
}

OAIImportSource OAIImagePackageManifest::getSource() const {
    return m_source;
}
void OAIImagePackageManifest::setSource(const OAIImportSource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIImagePackageManifest::is_source_Set() const{
    return m_source_isSet;
}

bool OAIImagePackageManifest::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIImagePackageManifest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifact_relationships.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_descriptor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_distro.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImagePackageManifest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_artifacts_isValid && m_distro_isValid && m_source_isValid && true;
}

} // namespace OpenAPI
