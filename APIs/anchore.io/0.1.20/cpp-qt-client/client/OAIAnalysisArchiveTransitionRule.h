/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAnalysisArchiveTransitionRule.h
 *
 * A rule for auto-archiving image analysis by time and/or tag-history
 */

#ifndef OAIAnalysisArchiveTransitionRule_H
#define OAIAnalysisArchiveTransitionRule_H

#include <QJsonObject>

#include "OAIAnalysisArchiveTransitionRuleExclude.h"
#include "OAIImageSelector.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAnalysisArchiveTransitionRuleExclude;
class OAIImageSelector;

class OAIAnalysisArchiveTransitionRule : public OAIObject {
public:
    OAIAnalysisArchiveTransitionRule();
    OAIAnalysisArchiveTransitionRule(QString json);
    ~OAIAnalysisArchiveTransitionRule() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAnalysisAgeDays() const;
    void setAnalysisAgeDays(const qint32 &analysis_age_days);
    bool is_analysis_age_days_Set() const;
    bool is_analysis_age_days_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    OAIAnalysisArchiveTransitionRuleExclude getExclude() const;
    void setExclude(const OAIAnalysisArchiveTransitionRuleExclude &exclude);
    bool is_exclude_Set() const;
    bool is_exclude_Valid() const;

    QDateTime getLastUpdated() const;
    void setLastUpdated(const QDateTime &last_updated);
    bool is_last_updated_Set() const;
    bool is_last_updated_Valid() const;

    qint32 getMaxImagesPerAccount() const;
    void setMaxImagesPerAccount(const qint32 &max_images_per_account);
    bool is_max_images_per_account_Set() const;
    bool is_max_images_per_account_Valid() const;

    QString getRuleId() const;
    void setRuleId(const QString &rule_id);
    bool is_rule_id_Set() const;
    bool is_rule_id_Valid() const;

    OAIImageSelector getSelector() const;
    void setSelector(const OAIImageSelector &selector);
    bool is_selector_Set() const;
    bool is_selector_Valid() const;

    bool isSystemGlobal() const;
    void setSystemGlobal(const bool &system_global);
    bool is_system_global_Set() const;
    bool is_system_global_Valid() const;

    qint32 getTagVersionsNewer() const;
    void setTagVersionsNewer(const qint32 &tag_versions_newer);
    bool is_tag_versions_newer_Set() const;
    bool is_tag_versions_newer_Valid() const;

    QString getTransition() const;
    void setTransition(const QString &transition);
    bool is_transition_Set() const;
    bool is_transition_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_analysis_age_days;
    bool m_analysis_age_days_isSet;
    bool m_analysis_age_days_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    OAIAnalysisArchiveTransitionRuleExclude m_exclude;
    bool m_exclude_isSet;
    bool m_exclude_isValid;

    QDateTime m_last_updated;
    bool m_last_updated_isSet;
    bool m_last_updated_isValid;

    qint32 m_max_images_per_account;
    bool m_max_images_per_account_isSet;
    bool m_max_images_per_account_isValid;

    QString m_rule_id;
    bool m_rule_id_isSet;
    bool m_rule_id_isValid;

    OAIImageSelector m_selector;
    bool m_selector_isSet;
    bool m_selector_isValid;

    bool m_system_global;
    bool m_system_global_isSet;
    bool m_system_global_isValid;

    qint32 m_tag_versions_newer;
    bool m_tag_versions_newer_isSet;
    bool m_tag_versions_newer_isValid;

    QString m_transition;
    bool m_transition_isSet;
    bool m_transition_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAnalysisArchiveTransitionRule)

#endif // OAIAnalysisArchiveTransitionRule_H
