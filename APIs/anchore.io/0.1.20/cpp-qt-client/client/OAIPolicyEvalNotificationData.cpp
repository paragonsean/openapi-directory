/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicyEvalNotificationData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicyEvalNotificationData::OAIPolicyEvalNotificationData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicyEvalNotificationData::OAIPolicyEvalNotificationData() {
    this->initializeModel();
}

OAIPolicyEvalNotificationData::~OAIPolicyEvalNotificationData() {}

void OAIPolicyEvalNotificationData::initializeModel() {

    m_notification_type_isSet = false;
    m_notification_type_isValid = false;

    m_notification_user_isSet = false;
    m_notification_user_isValid = false;

    m_notification_user_email_isSet = false;
    m_notification_user_email_isValid = false;

    m_notification_payload_isSet = false;
    m_notification_payload_isValid = false;
}

void OAIPolicyEvalNotificationData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicyEvalNotificationData::fromJsonObject(QJsonObject json) {

    m_notification_type_isValid = ::OpenAPI::fromJsonValue(m_notification_type, json[QString("notification_type")]);
    m_notification_type_isSet = !json[QString("notification_type")].isNull() && m_notification_type_isValid;

    m_notification_user_isValid = ::OpenAPI::fromJsonValue(m_notification_user, json[QString("notification_user")]);
    m_notification_user_isSet = !json[QString("notification_user")].isNull() && m_notification_user_isValid;

    m_notification_user_email_isValid = ::OpenAPI::fromJsonValue(m_notification_user_email, json[QString("notification_user_email")]);
    m_notification_user_email_isSet = !json[QString("notification_user_email")].isNull() && m_notification_user_email_isValid;

    m_notification_payload_isValid = ::OpenAPI::fromJsonValue(m_notification_payload, json[QString("notification_payload")]);
    m_notification_payload_isSet = !json[QString("notification_payload")].isNull() && m_notification_payload_isValid;
}

QString OAIPolicyEvalNotificationData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicyEvalNotificationData::asJsonObject() const {
    QJsonObject obj;
    if (m_notification_type_isSet) {
        obj.insert(QString("notification_type"), ::OpenAPI::toJsonValue(m_notification_type));
    }
    if (m_notification_user_isSet) {
        obj.insert(QString("notification_user"), ::OpenAPI::toJsonValue(m_notification_user));
    }
    if (m_notification_user_email_isSet) {
        obj.insert(QString("notification_user_email"), ::OpenAPI::toJsonValue(m_notification_user_email));
    }
    if (m_notification_payload.isSet()) {
        obj.insert(QString("notification_payload"), ::OpenAPI::toJsonValue(m_notification_payload));
    }
    return obj;
}

QString OAIPolicyEvalNotificationData::getNotificationType() const {
    return m_notification_type;
}
void OAIPolicyEvalNotificationData::setNotificationType(const QString &notification_type) {
    m_notification_type = notification_type;
    m_notification_type_isSet = true;
}

bool OAIPolicyEvalNotificationData::is_notification_type_Set() const{
    return m_notification_type_isSet;
}

bool OAIPolicyEvalNotificationData::is_notification_type_Valid() const{
    return m_notification_type_isValid;
}

QString OAIPolicyEvalNotificationData::getNotificationUser() const {
    return m_notification_user;
}
void OAIPolicyEvalNotificationData::setNotificationUser(const QString &notification_user) {
    m_notification_user = notification_user;
    m_notification_user_isSet = true;
}

bool OAIPolicyEvalNotificationData::is_notification_user_Set() const{
    return m_notification_user_isSet;
}

bool OAIPolicyEvalNotificationData::is_notification_user_Valid() const{
    return m_notification_user_isValid;
}

QString OAIPolicyEvalNotificationData::getNotificationUserEmail() const {
    return m_notification_user_email;
}
void OAIPolicyEvalNotificationData::setNotificationUserEmail(const QString &notification_user_email) {
    m_notification_user_email = notification_user_email;
    m_notification_user_email_isSet = true;
}

bool OAIPolicyEvalNotificationData::is_notification_user_email_Set() const{
    return m_notification_user_email_isSet;
}

bool OAIPolicyEvalNotificationData::is_notification_user_email_Valid() const{
    return m_notification_user_email_isValid;
}

OAIPolicyEvalNotificationPayload OAIPolicyEvalNotificationData::getNotificationPayload() const {
    return m_notification_payload;
}
void OAIPolicyEvalNotificationData::setNotificationPayload(const OAIPolicyEvalNotificationPayload &notification_payload) {
    m_notification_payload = notification_payload;
    m_notification_payload_isSet = true;
}

bool OAIPolicyEvalNotificationData::is_notification_payload_Set() const{
    return m_notification_payload_isSet;
}

bool OAIPolicyEvalNotificationData::is_notification_payload_Valid() const{
    return m_notification_payload_isValid;
}

bool OAIPolicyEvalNotificationData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_notification_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_user_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_payload.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicyEvalNotificationData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
