/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITriggerSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITriggerSpec::OAITriggerSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITriggerSpec::OAITriggerSpec() {
    this->initializeModel();
}

OAITriggerSpec::~OAITriggerSpec() {}

void OAITriggerSpec::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_superceded_by_isSet = false;
    m_superceded_by_isValid = false;
}

void OAITriggerSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITriggerSpec::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_superceded_by_isValid = ::OpenAPI::fromJsonValue(m_superceded_by, json[QString("superceded_by")]);
    m_superceded_by_isSet = !json[QString("superceded_by")].isNull() && m_superceded_by_isValid;
}

QString OAITriggerSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITriggerSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_superceded_by_isSet) {
        obj.insert(QString("superceded_by"), ::OpenAPI::toJsonValue(m_superceded_by));
    }
    return obj;
}

QString OAITriggerSpec::getDescription() const {
    return m_description;
}
void OAITriggerSpec::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITriggerSpec::is_description_Set() const{
    return m_description_isSet;
}

bool OAITriggerSpec::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITriggerSpec::getName() const {
    return m_name;
}
void OAITriggerSpec::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITriggerSpec::is_name_Set() const{
    return m_name_isSet;
}

bool OAITriggerSpec::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAITriggerParamSpec> OAITriggerSpec::getParameters() const {
    return m_parameters;
}
void OAITriggerSpec::setParameters(const QList<OAITriggerParamSpec> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAITriggerSpec::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAITriggerSpec::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAITriggerSpec::getState() const {
    return m_state;
}
void OAITriggerSpec::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAITriggerSpec::is_state_Set() const{
    return m_state_isSet;
}

bool OAITriggerSpec::is_state_Valid() const{
    return m_state_isValid;
}

QString OAITriggerSpec::getSupercededBy() const {
    return m_superceded_by;
}
void OAITriggerSpec::setSupercededBy(const QString &superceded_by) {
    m_superceded_by = superceded_by;
    m_superceded_by_isSet = true;
}

bool OAITriggerSpec::is_superceded_by_Set() const{
    return m_superceded_by_isSet;
}

bool OAITriggerSpec::is_superceded_by_Valid() const{
    return m_superceded_by_isValid;
}

bool OAITriggerSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_superceded_by_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITriggerSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
