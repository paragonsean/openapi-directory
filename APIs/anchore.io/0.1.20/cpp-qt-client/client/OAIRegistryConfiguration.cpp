/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegistryConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegistryConfiguration::OAIRegistryConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegistryConfiguration::OAIRegistryConfiguration() {
    this->initializeModel();
}

OAIRegistryConfiguration::~OAIRegistryConfiguration() {}

void OAIRegistryConfiguration::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_last_upated_isSet = false;
    m_last_upated_isValid = false;

    m_registry_isSet = false;
    m_registry_isValid = false;

    m_registry_name_isSet = false;
    m_registry_name_isValid = false;

    m_registry_type_isSet = false;
    m_registry_type_isValid = false;

    m_registry_user_isSet = false;
    m_registry_user_isValid = false;

    m_registry_verify_isSet = false;
    m_registry_verify_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIRegistryConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegistryConfiguration::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_last_upated_isValid = ::OpenAPI::fromJsonValue(m_last_upated, json[QString("last_upated")]);
    m_last_upated_isSet = !json[QString("last_upated")].isNull() && m_last_upated_isValid;

    m_registry_isValid = ::OpenAPI::fromJsonValue(m_registry, json[QString("registry")]);
    m_registry_isSet = !json[QString("registry")].isNull() && m_registry_isValid;

    m_registry_name_isValid = ::OpenAPI::fromJsonValue(m_registry_name, json[QString("registry_name")]);
    m_registry_name_isSet = !json[QString("registry_name")].isNull() && m_registry_name_isValid;

    m_registry_type_isValid = ::OpenAPI::fromJsonValue(m_registry_type, json[QString("registry_type")]);
    m_registry_type_isSet = !json[QString("registry_type")].isNull() && m_registry_type_isValid;

    m_registry_user_isValid = ::OpenAPI::fromJsonValue(m_registry_user, json[QString("registry_user")]);
    m_registry_user_isSet = !json[QString("registry_user")].isNull() && m_registry_user_isValid;

    m_registry_verify_isValid = ::OpenAPI::fromJsonValue(m_registry_verify, json[QString("registry_verify")]);
    m_registry_verify_isSet = !json[QString("registry_verify")].isNull() && m_registry_verify_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIRegistryConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegistryConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_last_upated_isSet) {
        obj.insert(QString("last_upated"), ::OpenAPI::toJsonValue(m_last_upated));
    }
    if (m_registry_isSet) {
        obj.insert(QString("registry"), ::OpenAPI::toJsonValue(m_registry));
    }
    if (m_registry_name_isSet) {
        obj.insert(QString("registry_name"), ::OpenAPI::toJsonValue(m_registry_name));
    }
    if (m_registry_type_isSet) {
        obj.insert(QString("registry_type"), ::OpenAPI::toJsonValue(m_registry_type));
    }
    if (m_registry_user_isSet) {
        obj.insert(QString("registry_user"), ::OpenAPI::toJsonValue(m_registry_user));
    }
    if (m_registry_verify_isSet) {
        obj.insert(QString("registry_verify"), ::OpenAPI::toJsonValue(m_registry_verify));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QDateTime OAIRegistryConfiguration::getCreatedAt() const {
    return m_created_at;
}
void OAIRegistryConfiguration::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIRegistryConfiguration::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIRegistryConfiguration::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIRegistryConfiguration::getLastUpated() const {
    return m_last_upated;
}
void OAIRegistryConfiguration::setLastUpated(const QDateTime &last_upated) {
    m_last_upated = last_upated;
    m_last_upated_isSet = true;
}

bool OAIRegistryConfiguration::is_last_upated_Set() const{
    return m_last_upated_isSet;
}

bool OAIRegistryConfiguration::is_last_upated_Valid() const{
    return m_last_upated_isValid;
}

QString OAIRegistryConfiguration::getRegistry() const {
    return m_registry;
}
void OAIRegistryConfiguration::setRegistry(const QString &registry) {
    m_registry = registry;
    m_registry_isSet = true;
}

bool OAIRegistryConfiguration::is_registry_Set() const{
    return m_registry_isSet;
}

bool OAIRegistryConfiguration::is_registry_Valid() const{
    return m_registry_isValid;
}

QString OAIRegistryConfiguration::getRegistryName() const {
    return m_registry_name;
}
void OAIRegistryConfiguration::setRegistryName(const QString &registry_name) {
    m_registry_name = registry_name;
    m_registry_name_isSet = true;
}

bool OAIRegistryConfiguration::is_registry_name_Set() const{
    return m_registry_name_isSet;
}

bool OAIRegistryConfiguration::is_registry_name_Valid() const{
    return m_registry_name_isValid;
}

QString OAIRegistryConfiguration::getRegistryType() const {
    return m_registry_type;
}
void OAIRegistryConfiguration::setRegistryType(const QString &registry_type) {
    m_registry_type = registry_type;
    m_registry_type_isSet = true;
}

bool OAIRegistryConfiguration::is_registry_type_Set() const{
    return m_registry_type_isSet;
}

bool OAIRegistryConfiguration::is_registry_type_Valid() const{
    return m_registry_type_isValid;
}

QString OAIRegistryConfiguration::getRegistryUser() const {
    return m_registry_user;
}
void OAIRegistryConfiguration::setRegistryUser(const QString &registry_user) {
    m_registry_user = registry_user;
    m_registry_user_isSet = true;
}

bool OAIRegistryConfiguration::is_registry_user_Set() const{
    return m_registry_user_isSet;
}

bool OAIRegistryConfiguration::is_registry_user_Valid() const{
    return m_registry_user_isValid;
}

bool OAIRegistryConfiguration::isRegistryVerify() const {
    return m_registry_verify;
}
void OAIRegistryConfiguration::setRegistryVerify(const bool &registry_verify) {
    m_registry_verify = registry_verify;
    m_registry_verify_isSet = true;
}

bool OAIRegistryConfiguration::is_registry_verify_Set() const{
    return m_registry_verify_isSet;
}

bool OAIRegistryConfiguration::is_registry_verify_Valid() const{
    return m_registry_verify_isValid;
}

QString OAIRegistryConfiguration::getUserId() const {
    return m_user_id;
}
void OAIRegistryConfiguration::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIRegistryConfiguration::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIRegistryConfiguration::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIRegistryConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_upated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_verify_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegistryConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
