/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIImagesApi_H
#define OAI_OAIImagesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAnchoreImage.h"
#include "OAIApiErrorResponse.h"
#include "OAIContentFilesResponse.h"
#include "OAIContentJAVAPackageResponse.h"
#include "OAIContentMalwareResponse.h"
#include "OAIContentPackageResponse.h"
#include "OAIDeleteImageResponse.h"
#include "OAIHttpFileElement.h"
#include "OAIImageAnalysisRequest.h"
#include "OAIMetadataResponse.h"
#include "OAIObject.h"
#include "OAIVulnerabilityResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIImagesApi : public QObject {
    Q_OBJECT

public:
    OAIImagesApi(const int timeOut = 0);
    ~OAIImagesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_image_analysis_request OAIImageAnalysisRequest [required]
    * @param[in]  force bool [optional]
    * @param[in]  autosubscribe bool [optional]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void addImage(const OAIImageAnalysisRequest &oai_image_analysis_request, const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &autosubscribe = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  image_digest QString [required]
    * @param[in]  force bool [optional]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void deleteImage(const QString &image_digest, const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  image_id QString [required]
    * @param[in]  force bool [optional]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void deleteImageByImageId(const QString &image_id, const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  image_digests QList<QString> [required]
    * @param[in]  force bool [optional]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void deleteImagesAsync(const QList<QString> &image_digests, const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  image_digest QString [required]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void getImage(const QString &image_digest, const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  image_id QString [required]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void getImageByImageId(const QString &image_id, const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  image_digest QString [required]
    * @param[in]  ctype QString [required]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void getImageContentByType(const QString &image_digest, const QString &ctype, const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  image_digest QString [required]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void getImageContentByTypeFiles(const QString &image_digest, const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  image_id QString [required]
    * @param[in]  ctype QString [required]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void getImageContentByTypeImageId(const QString &image_id, const QString &ctype, const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  image_id QString [required]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void getImageContentByTypeImageIdFiles(const QString &image_id, const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  image_id QString [required]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void getImageContentByTypeImageIdJavapackage(const QString &image_id, const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  image_digest QString [required]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void getImageContentByTypeJavapackage(const QString &image_digest, const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  image_digest QString [required]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void getImageContentByTypeMalware(const QString &image_digest, const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  image_digest QString [required]
    * @param[in]  mtype QString [required]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void getImageMetadataByType(const QString &image_digest, const QString &mtype, const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  image_digest QString [required]
    * @param[in]  tag QString [required]
    * @param[in]  policy_id QString [optional]
    * @param[in]  detail bool [optional]
    * @param[in]  history bool [optional]
    * @param[in]  interactive bool [optional]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void getImagePolicyCheck(const QString &image_digest, const QString &tag, const ::OpenAPI::OptionalParam<QString> &policy_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &detail = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &history = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &interactive = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  image_id QString [required]
    * @param[in]  tag QString [required]
    * @param[in]  policy_id QString [optional]
    * @param[in]  detail bool [optional]
    * @param[in]  history bool [optional]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void getImagePolicyCheckByImageId(const QString &image_id, const QString &tag, const ::OpenAPI::OptionalParam<QString> &policy_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &detail = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &history = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  image_digest QString [required]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void getImageSbomNative(const QString &image_digest, const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  image_digest QString [required]
    * @param[in]  vtype QString [required]
    * @param[in]  force_refresh bool [optional]
    * @param[in]  vendor_only bool [optional]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void getImageVulnerabilitiesByType(const QString &image_digest, const QString &vtype, const ::OpenAPI::OptionalParam<bool> &force_refresh = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &vendor_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  image_id QString [required]
    * @param[in]  vtype QString [required]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void getImageVulnerabilitiesByTypeImageId(const QString &image_id, const QString &vtype, const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  image_digest QString [required]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void getImageVulnerabilityTypes(const QString &image_digest, const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  image_id QString [required]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void getImageVulnerabilityTypesByImageId(const QString &image_id, const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  image_digest QString [required]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void listImageContent(const QString &image_digest, const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  image_id QString [required]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void listImageContentByImageid(const QString &image_id, const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  image_digest QString [required]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void listImageMetadata(const QString &image_digest, const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  history bool [optional]
    * @param[in]  fulltag QString [optional]
    * @param[in]  image_status QString [optional]
    * @param[in]  analysis_status QString [optional]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void listImages(const ::OpenAPI::OptionalParam<bool> &history = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &fulltag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &image_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &analysis_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addImageCallback(OAIHttpRequestWorker *worker);
    void deleteImageCallback(OAIHttpRequestWorker *worker);
    void deleteImageByImageIdCallback(OAIHttpRequestWorker *worker);
    void deleteImagesAsyncCallback(OAIHttpRequestWorker *worker);
    void getImageCallback(OAIHttpRequestWorker *worker);
    void getImageByImageIdCallback(OAIHttpRequestWorker *worker);
    void getImageContentByTypeCallback(OAIHttpRequestWorker *worker);
    void getImageContentByTypeFilesCallback(OAIHttpRequestWorker *worker);
    void getImageContentByTypeImageIdCallback(OAIHttpRequestWorker *worker);
    void getImageContentByTypeImageIdFilesCallback(OAIHttpRequestWorker *worker);
    void getImageContentByTypeImageIdJavapackageCallback(OAIHttpRequestWorker *worker);
    void getImageContentByTypeJavapackageCallback(OAIHttpRequestWorker *worker);
    void getImageContentByTypeMalwareCallback(OAIHttpRequestWorker *worker);
    void getImageMetadataByTypeCallback(OAIHttpRequestWorker *worker);
    void getImagePolicyCheckCallback(OAIHttpRequestWorker *worker);
    void getImagePolicyCheckByImageIdCallback(OAIHttpRequestWorker *worker);
    void getImageSbomNativeCallback(OAIHttpRequestWorker *worker);
    void getImageVulnerabilitiesByTypeCallback(OAIHttpRequestWorker *worker);
    void getImageVulnerabilitiesByTypeImageIdCallback(OAIHttpRequestWorker *worker);
    void getImageVulnerabilityTypesCallback(OAIHttpRequestWorker *worker);
    void getImageVulnerabilityTypesByImageIdCallback(OAIHttpRequestWorker *worker);
    void listImageContentCallback(OAIHttpRequestWorker *worker);
    void listImageContentByImageidCallback(OAIHttpRequestWorker *worker);
    void listImageMetadataCallback(OAIHttpRequestWorker *worker);
    void listImagesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addImageSignal(QList<OAIAnchoreImage> summary);
    void deleteImageSignal(OAIDeleteImageResponse summary);
    void deleteImageByImageIdSignal(OAIDeleteImageResponse summary);
    void deleteImagesAsyncSignal(QList<OAIDeleteImageResponse> summary);
    void getImageSignal(QList<OAIAnchoreImage> summary);
    void getImageByImageIdSignal(QList<OAIAnchoreImage> summary);
    void getImageContentByTypeSignal(OAIContentPackageResponse summary);
    void getImageContentByTypeFilesSignal(OAIContentFilesResponse summary);
    void getImageContentByTypeImageIdSignal(OAIContentPackageResponse summary);
    void getImageContentByTypeImageIdFilesSignal(OAIContentFilesResponse summary);
    void getImageContentByTypeImageIdJavapackageSignal(OAIContentJAVAPackageResponse summary);
    void getImageContentByTypeJavapackageSignal(OAIContentJAVAPackageResponse summary);
    void getImageContentByTypeMalwareSignal(OAIContentMalwareResponse summary);
    void getImageMetadataByTypeSignal(OAIMetadataResponse summary);
    void getImagePolicyCheckSignal(QList<OAIObject> summary);
    void getImagePolicyCheckByImageIdSignal(QList<OAIObject> summary);
    void getImageSbomNativeSignal(OAIHttpFileElement summary);
    void getImageVulnerabilitiesByTypeSignal(OAIVulnerabilityResponse summary);
    void getImageVulnerabilitiesByTypeImageIdSignal(OAIVulnerabilityResponse summary);
    void getImageVulnerabilityTypesSignal(QList<QString> summary);
    void getImageVulnerabilityTypesByImageIdSignal(QList<QString> summary);
    void listImageContentSignal(QList<QString> summary);
    void listImageContentByImageidSignal(QList<QString> summary);
    void listImageMetadataSignal(QList<QString> summary);
    void listImagesSignal(QList<OAIAnchoreImage> summary);


    void addImageSignalFull(OAIHttpRequestWorker *worker, QList<OAIAnchoreImage> summary);
    void deleteImageSignalFull(OAIHttpRequestWorker *worker, OAIDeleteImageResponse summary);
    void deleteImageByImageIdSignalFull(OAIHttpRequestWorker *worker, OAIDeleteImageResponse summary);
    void deleteImagesAsyncSignalFull(OAIHttpRequestWorker *worker, QList<OAIDeleteImageResponse> summary);
    void getImageSignalFull(OAIHttpRequestWorker *worker, QList<OAIAnchoreImage> summary);
    void getImageByImageIdSignalFull(OAIHttpRequestWorker *worker, QList<OAIAnchoreImage> summary);
    void getImageContentByTypeSignalFull(OAIHttpRequestWorker *worker, OAIContentPackageResponse summary);
    void getImageContentByTypeFilesSignalFull(OAIHttpRequestWorker *worker, OAIContentFilesResponse summary);
    void getImageContentByTypeImageIdSignalFull(OAIHttpRequestWorker *worker, OAIContentPackageResponse summary);
    void getImageContentByTypeImageIdFilesSignalFull(OAIHttpRequestWorker *worker, OAIContentFilesResponse summary);
    void getImageContentByTypeImageIdJavapackageSignalFull(OAIHttpRequestWorker *worker, OAIContentJAVAPackageResponse summary);
    void getImageContentByTypeJavapackageSignalFull(OAIHttpRequestWorker *worker, OAIContentJAVAPackageResponse summary);
    void getImageContentByTypeMalwareSignalFull(OAIHttpRequestWorker *worker, OAIContentMalwareResponse summary);
    void getImageMetadataByTypeSignalFull(OAIHttpRequestWorker *worker, OAIMetadataResponse summary);
    void getImagePolicyCheckSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getImagePolicyCheckByImageIdSignalFull(OAIHttpRequestWorker *worker, QList<OAIObject> summary);
    void getImageSbomNativeSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getImageVulnerabilitiesByTypeSignalFull(OAIHttpRequestWorker *worker, OAIVulnerabilityResponse summary);
    void getImageVulnerabilitiesByTypeImageIdSignalFull(OAIHttpRequestWorker *worker, OAIVulnerabilityResponse summary);
    void getImageVulnerabilityTypesSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getImageVulnerabilityTypesByImageIdSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void listImageContentSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void listImageContentByImageidSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void listImageMetadataSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void listImagesSignalFull(OAIHttpRequestWorker *worker, QList<OAIAnchoreImage> summary);

    Q_DECL_DEPRECATED_X("Use addImageSignalError() instead")
    void addImageSignalE(QList<OAIAnchoreImage> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addImageSignalError(QList<OAIAnchoreImage> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteImageSignalError() instead")
    void deleteImageSignalE(OAIDeleteImageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteImageSignalError(OAIDeleteImageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteImageByImageIdSignalError() instead")
    void deleteImageByImageIdSignalE(OAIDeleteImageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteImageByImageIdSignalError(OAIDeleteImageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteImagesAsyncSignalError() instead")
    void deleteImagesAsyncSignalE(QList<OAIDeleteImageResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteImagesAsyncSignalError(QList<OAIDeleteImageResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageSignalError() instead")
    void getImageSignalE(QList<OAIAnchoreImage> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageSignalError(QList<OAIAnchoreImage> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageByImageIdSignalError() instead")
    void getImageByImageIdSignalE(QList<OAIAnchoreImage> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageByImageIdSignalError(QList<OAIAnchoreImage> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageContentByTypeSignalError() instead")
    void getImageContentByTypeSignalE(OAIContentPackageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageContentByTypeSignalError(OAIContentPackageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageContentByTypeFilesSignalError() instead")
    void getImageContentByTypeFilesSignalE(OAIContentFilesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageContentByTypeFilesSignalError(OAIContentFilesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageContentByTypeImageIdSignalError() instead")
    void getImageContentByTypeImageIdSignalE(OAIContentPackageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageContentByTypeImageIdSignalError(OAIContentPackageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageContentByTypeImageIdFilesSignalError() instead")
    void getImageContentByTypeImageIdFilesSignalE(OAIContentFilesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageContentByTypeImageIdFilesSignalError(OAIContentFilesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageContentByTypeImageIdJavapackageSignalError() instead")
    void getImageContentByTypeImageIdJavapackageSignalE(OAIContentJAVAPackageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageContentByTypeImageIdJavapackageSignalError(OAIContentJAVAPackageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageContentByTypeJavapackageSignalError() instead")
    void getImageContentByTypeJavapackageSignalE(OAIContentJAVAPackageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageContentByTypeJavapackageSignalError(OAIContentJAVAPackageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageContentByTypeMalwareSignalError() instead")
    void getImageContentByTypeMalwareSignalE(OAIContentMalwareResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageContentByTypeMalwareSignalError(OAIContentMalwareResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageMetadataByTypeSignalError() instead")
    void getImageMetadataByTypeSignalE(OAIMetadataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageMetadataByTypeSignalError(OAIMetadataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImagePolicyCheckSignalError() instead")
    void getImagePolicyCheckSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImagePolicyCheckSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImagePolicyCheckByImageIdSignalError() instead")
    void getImagePolicyCheckByImageIdSignalE(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImagePolicyCheckByImageIdSignalError(QList<OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageSbomNativeSignalError() instead")
    void getImageSbomNativeSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageSbomNativeSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageVulnerabilitiesByTypeSignalError() instead")
    void getImageVulnerabilitiesByTypeSignalE(OAIVulnerabilityResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageVulnerabilitiesByTypeSignalError(OAIVulnerabilityResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageVulnerabilitiesByTypeImageIdSignalError() instead")
    void getImageVulnerabilitiesByTypeImageIdSignalE(OAIVulnerabilityResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageVulnerabilitiesByTypeImageIdSignalError(OAIVulnerabilityResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageVulnerabilityTypesSignalError() instead")
    void getImageVulnerabilityTypesSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageVulnerabilityTypesSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageVulnerabilityTypesByImageIdSignalError() instead")
    void getImageVulnerabilityTypesByImageIdSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageVulnerabilityTypesByImageIdSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listImageContentSignalError() instead")
    void listImageContentSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listImageContentSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listImageContentByImageidSignalError() instead")
    void listImageContentByImageidSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listImageContentByImageidSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listImageMetadataSignalError() instead")
    void listImageMetadataSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listImageMetadataSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listImagesSignalError() instead")
    void listImagesSignalE(QList<OAIAnchoreImage> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listImagesSignalError(QList<OAIAnchoreImage> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addImageSignalErrorFull() instead")
    void addImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteImageSignalErrorFull() instead")
    void deleteImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteImageByImageIdSignalErrorFull() instead")
    void deleteImageByImageIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteImageByImageIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteImagesAsyncSignalErrorFull() instead")
    void deleteImagesAsyncSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteImagesAsyncSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageSignalErrorFull() instead")
    void getImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageByImageIdSignalErrorFull() instead")
    void getImageByImageIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageByImageIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageContentByTypeSignalErrorFull() instead")
    void getImageContentByTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageContentByTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageContentByTypeFilesSignalErrorFull() instead")
    void getImageContentByTypeFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageContentByTypeFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageContentByTypeImageIdSignalErrorFull() instead")
    void getImageContentByTypeImageIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageContentByTypeImageIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageContentByTypeImageIdFilesSignalErrorFull() instead")
    void getImageContentByTypeImageIdFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageContentByTypeImageIdFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageContentByTypeImageIdJavapackageSignalErrorFull() instead")
    void getImageContentByTypeImageIdJavapackageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageContentByTypeImageIdJavapackageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageContentByTypeJavapackageSignalErrorFull() instead")
    void getImageContentByTypeJavapackageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageContentByTypeJavapackageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageContentByTypeMalwareSignalErrorFull() instead")
    void getImageContentByTypeMalwareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageContentByTypeMalwareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageMetadataByTypeSignalErrorFull() instead")
    void getImageMetadataByTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageMetadataByTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImagePolicyCheckSignalErrorFull() instead")
    void getImagePolicyCheckSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImagePolicyCheckSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImagePolicyCheckByImageIdSignalErrorFull() instead")
    void getImagePolicyCheckByImageIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImagePolicyCheckByImageIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageSbomNativeSignalErrorFull() instead")
    void getImageSbomNativeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageSbomNativeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageVulnerabilitiesByTypeSignalErrorFull() instead")
    void getImageVulnerabilitiesByTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageVulnerabilitiesByTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageVulnerabilitiesByTypeImageIdSignalErrorFull() instead")
    void getImageVulnerabilitiesByTypeImageIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageVulnerabilitiesByTypeImageIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageVulnerabilityTypesSignalErrorFull() instead")
    void getImageVulnerabilityTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageVulnerabilityTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageVulnerabilityTypesByImageIdSignalErrorFull() instead")
    void getImageVulnerabilityTypesByImageIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageVulnerabilityTypesByImageIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listImageContentSignalErrorFull() instead")
    void listImageContentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listImageContentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listImageContentByImageidSignalErrorFull() instead")
    void listImageContentByImageidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listImageContentByImageidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listImageMetadataSignalErrorFull() instead")
    void listImageMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listImageMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listImagesSignalErrorFull() instead")
    void listImagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listImagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
