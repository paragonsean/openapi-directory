/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAnchoreImage.h
 *
 * A unique image in the engine. May have multiple tags or references. Unique to an image content across registries or repositories.
 */

#ifndef OAIAnchoreImage_H
#define OAIAnchoreImage_H

#include <QJsonObject>

#include "OAIImageDetail.h"
#include "OAIObject.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIImageDetail;

class OAIAnchoreImage : public OAIObject {
public:
    OAIAnchoreImage();
    OAIAnchoreImage(QString json);
    ~OAIAnchoreImage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAnalysisStatus() const;
    void setAnalysisStatus(const QString &analysis_status);
    bool is_analysis_status_Set() const;
    bool is_analysis_status_Valid() const;

    OAIObject getAnnotations() const;
    void setAnnotations(const OAIObject &annotations);
    bool is_annotations_Set() const;
    bool is_annotations_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getImageDigest() const;
    void setImageDigest(const QString &image_digest);
    bool is_image_digest_Set() const;
    bool is_image_digest_Valid() const;

    OAIObject getImageContent() const;
    void setImageContent(const OAIObject &image_content);
    bool is_image_content_Set() const;
    bool is_image_content_Valid() const;

    QList<OAIImageDetail> getImageDetail() const;
    void setImageDetail(const QList<OAIImageDetail> &image_detail);
    bool is_image_detail_Set() const;
    bool is_image_detail_Valid() const;

    QString getImageStatus() const;
    void setImageStatus(const QString &image_status);
    bool is_image_status_Set() const;
    bool is_image_status_Valid() const;

    QDateTime getLastUpdated() const;
    void setLastUpdated(const QDateTime &last_updated);
    bool is_last_updated_Set() const;
    bool is_last_updated_Valid() const;

    QString getRecordVersion() const;
    void setRecordVersion(const QString &record_version);
    bool is_record_version_Set() const;
    bool is_record_version_Valid() const;

    QString getUserId() const;
    void setUserId(const QString &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_analysis_status;
    bool m_analysis_status_isSet;
    bool m_analysis_status_isValid;

    OAIObject m_annotations;
    bool m_annotations_isSet;
    bool m_annotations_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_image_digest;
    bool m_image_digest_isSet;
    bool m_image_digest_isValid;

    OAIObject m_image_content;
    bool m_image_content_isSet;
    bool m_image_content_isValid;

    QList<OAIImageDetail> m_image_detail;
    bool m_image_detail_isSet;
    bool m_image_detail_isValid;

    QString m_image_status;
    bool m_image_status_isSet;
    bool m_image_status_isValid;

    QDateTime m_last_updated;
    bool m_last_updated_isSet;
    bool m_last_updated_isValid;

    QString m_record_version;
    bool m_record_version_isSet;
    bool m_record_version_isValid;

    QString m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAnchoreImage)

#endif // OAIAnchoreImage_H
