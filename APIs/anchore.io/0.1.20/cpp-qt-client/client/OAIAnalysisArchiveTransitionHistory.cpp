/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisArchiveTransitionHistory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysisArchiveTransitionHistory::OAIAnalysisArchiveTransitionHistory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysisArchiveTransitionHistory::OAIAnalysisArchiveTransitionHistory() {
    this->initializeModel();
}

OAIAnalysisArchiveTransitionHistory::~OAIAnalysisArchiveTransitionHistory() {}

void OAIAnalysisArchiveTransitionHistory::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_image_digest_isSet = false;
    m_image_digest_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_rule_id_isSet = false;
    m_rule_id_isValid = false;

    m_transition_isSet = false;
    m_transition_isValid = false;

    m_transition_task_id_isSet = false;
    m_transition_task_id_isValid = false;
}

void OAIAnalysisArchiveTransitionHistory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysisArchiveTransitionHistory::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_image_digest_isValid = ::OpenAPI::fromJsonValue(m_image_digest, json[QString("imageDigest")]);
    m_image_digest_isSet = !json[QString("imageDigest")].isNull() && m_image_digest_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_rule_id_isValid = ::OpenAPI::fromJsonValue(m_rule_id, json[QString("rule_id")]);
    m_rule_id_isSet = !json[QString("rule_id")].isNull() && m_rule_id_isValid;

    m_transition_isValid = ::OpenAPI::fromJsonValue(m_transition, json[QString("transition")]);
    m_transition_isSet = !json[QString("transition")].isNull() && m_transition_isValid;

    m_transition_task_id_isValid = ::OpenAPI::fromJsonValue(m_transition_task_id, json[QString("transition_task_id")]);
    m_transition_task_id_isSet = !json[QString("transition_task_id")].isNull() && m_transition_task_id_isValid;
}

QString OAIAnalysisArchiveTransitionHistory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysisArchiveTransitionHistory::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_image_digest_isSet) {
        obj.insert(QString("imageDigest"), ::OpenAPI::toJsonValue(m_image_digest));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_rule_id_isSet) {
        obj.insert(QString("rule_id"), ::OpenAPI::toJsonValue(m_rule_id));
    }
    if (m_transition_isSet) {
        obj.insert(QString("transition"), ::OpenAPI::toJsonValue(m_transition));
    }
    if (m_transition_task_id_isSet) {
        obj.insert(QString("transition_task_id"), ::OpenAPI::toJsonValue(m_transition_task_id));
    }
    return obj;
}

QDateTime OAIAnalysisArchiveTransitionHistory::getCreatedAt() const {
    return m_created_at;
}
void OAIAnalysisArchiveTransitionHistory::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAnalysisArchiveTransitionHistory::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAnalysisArchiveTransitionHistory::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIAnalysisArchiveTransitionHistory::getImageDigest() const {
    return m_image_digest;
}
void OAIAnalysisArchiveTransitionHistory::setImageDigest(const QString &image_digest) {
    m_image_digest = image_digest;
    m_image_digest_isSet = true;
}

bool OAIAnalysisArchiveTransitionHistory::is_image_digest_Set() const{
    return m_image_digest_isSet;
}

bool OAIAnalysisArchiveTransitionHistory::is_image_digest_Valid() const{
    return m_image_digest_isValid;
}

QDateTime OAIAnalysisArchiveTransitionHistory::getLastUpdated() const {
    return m_last_updated;
}
void OAIAnalysisArchiveTransitionHistory::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIAnalysisArchiveTransitionHistory::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIAnalysisArchiveTransitionHistory::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIAnalysisArchiveTransitionHistory::getRuleId() const {
    return m_rule_id;
}
void OAIAnalysisArchiveTransitionHistory::setRuleId(const QString &rule_id) {
    m_rule_id = rule_id;
    m_rule_id_isSet = true;
}

bool OAIAnalysisArchiveTransitionHistory::is_rule_id_Set() const{
    return m_rule_id_isSet;
}

bool OAIAnalysisArchiveTransitionHistory::is_rule_id_Valid() const{
    return m_rule_id_isValid;
}

QString OAIAnalysisArchiveTransitionHistory::getTransition() const {
    return m_transition;
}
void OAIAnalysisArchiveTransitionHistory::setTransition(const QString &transition) {
    m_transition = transition;
    m_transition_isSet = true;
}

bool OAIAnalysisArchiveTransitionHistory::is_transition_Set() const{
    return m_transition_isSet;
}

bool OAIAnalysisArchiveTransitionHistory::is_transition_Valid() const{
    return m_transition_isValid;
}

QString OAIAnalysisArchiveTransitionHistory::getTransitionTaskId() const {
    return m_transition_task_id;
}
void OAIAnalysisArchiveTransitionHistory::setTransitionTaskId(const QString &transition_task_id) {
    m_transition_task_id = transition_task_id;
    m_transition_task_id_isSet = true;
}

bool OAIAnalysisArchiveTransitionHistory::is_transition_task_id_Set() const{
    return m_transition_task_id_isSet;
}

bool OAIAnalysisArchiveTransitionHistory::is_transition_task_id_Valid() const{
    return m_transition_task_id_isValid;
}

bool OAIAnalysisArchiveTransitionHistory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transition_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysisArchiveTransitionHistory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
