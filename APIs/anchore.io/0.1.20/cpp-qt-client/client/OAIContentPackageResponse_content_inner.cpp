/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContentPackageResponse_content_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContentPackageResponse_content_inner::OAIContentPackageResponse_content_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContentPackageResponse_content_inner::OAIContentPackageResponse_content_inner() {
    this->initializeModel();
}

OAIContentPackageResponse_content_inner::~OAIContentPackageResponse_content_inner() {}

void OAIContentPackageResponse_content_inner::initializeModel() {

    m_cpes_isSet = false;
    m_cpes_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_licenses_isSet = false;
    m_licenses_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_package_isSet = false;
    m_package_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIContentPackageResponse_content_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContentPackageResponse_content_inner::fromJsonObject(QJsonObject json) {

    m_cpes_isValid = ::OpenAPI::fromJsonValue(m_cpes, json[QString("cpes")]);
    m_cpes_isSet = !json[QString("cpes")].isNull() && m_cpes_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_licenses_isValid = ::OpenAPI::fromJsonValue(m_licenses, json[QString("licenses")]);
    m_licenses_isSet = !json[QString("licenses")].isNull() && m_licenses_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_package_isValid = ::OpenAPI::fromJsonValue(m_package, json[QString("package")]);
    m_package_isSet = !json[QString("package")].isNull() && m_package_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIContentPackageResponse_content_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContentPackageResponse_content_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_cpes.size() > 0) {
        obj.insert(QString("cpes"), ::OpenAPI::toJsonValue(m_cpes));
    }
    if (m_license_isSet) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_licenses.size() > 0) {
        obj.insert(QString("licenses"), ::OpenAPI::toJsonValue(m_licenses));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_package_isSet) {
        obj.insert(QString("package"), ::OpenAPI::toJsonValue(m_package));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<QString> OAIContentPackageResponse_content_inner::getCpes() const {
    return m_cpes;
}
void OAIContentPackageResponse_content_inner::setCpes(const QList<QString> &cpes) {
    m_cpes = cpes;
    m_cpes_isSet = true;
}

bool OAIContentPackageResponse_content_inner::is_cpes_Set() const{
    return m_cpes_isSet;
}

bool OAIContentPackageResponse_content_inner::is_cpes_Valid() const{
    return m_cpes_isValid;
}

QString OAIContentPackageResponse_content_inner::getLicense() const {
    return m_license;
}
void OAIContentPackageResponse_content_inner::setLicense(const QString &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAIContentPackageResponse_content_inner::is_license_Set() const{
    return m_license_isSet;
}

bool OAIContentPackageResponse_content_inner::is_license_Valid() const{
    return m_license_isValid;
}

QList<QString> OAIContentPackageResponse_content_inner::getLicenses() const {
    return m_licenses;
}
void OAIContentPackageResponse_content_inner::setLicenses(const QList<QString> &licenses) {
    m_licenses = licenses;
    m_licenses_isSet = true;
}

bool OAIContentPackageResponse_content_inner::is_licenses_Set() const{
    return m_licenses_isSet;
}

bool OAIContentPackageResponse_content_inner::is_licenses_Valid() const{
    return m_licenses_isValid;
}

QString OAIContentPackageResponse_content_inner::getLocation() const {
    return m_location;
}
void OAIContentPackageResponse_content_inner::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIContentPackageResponse_content_inner::is_location_Set() const{
    return m_location_isSet;
}

bool OAIContentPackageResponse_content_inner::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIContentPackageResponse_content_inner::getOrigin() const {
    return m_origin;
}
void OAIContentPackageResponse_content_inner::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIContentPackageResponse_content_inner::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIContentPackageResponse_content_inner::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAIContentPackageResponse_content_inner::getPackage() const {
    return m_package;
}
void OAIContentPackageResponse_content_inner::setPackage(const QString &package) {
    m_package = package;
    m_package_isSet = true;
}

bool OAIContentPackageResponse_content_inner::is_package_Set() const{
    return m_package_isSet;
}

bool OAIContentPackageResponse_content_inner::is_package_Valid() const{
    return m_package_isValid;
}

QString OAIContentPackageResponse_content_inner::getSize() const {
    return m_size;
}
void OAIContentPackageResponse_content_inner::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIContentPackageResponse_content_inner::is_size_Set() const{
    return m_size_isSet;
}

bool OAIContentPackageResponse_content_inner::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIContentPackageResponse_content_inner::getType() const {
    return m_type;
}
void OAIContentPackageResponse_content_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIContentPackageResponse_content_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIContentPackageResponse_content_inner::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIContentPackageResponse_content_inner::getVersion() const {
    return m_version;
}
void OAIContentPackageResponse_content_inner::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIContentPackageResponse_content_inner::is_version_Set() const{
    return m_version_isSet;
}

bool OAIContentPackageResponse_content_inner::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIContentPackageResponse_content_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cpes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_licenses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContentPackageResponse_content_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
