/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPoliciesApi_H
#define OAI_OAIPoliciesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiErrorResponse.h"
#include "OAIPolicyBundle.h"
#include "OAIPolicyBundleRecord.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPoliciesApi : public QObject {
    Q_OBJECT

public:
    OAIPoliciesApi(const int timeOut = 0);
    ~OAIPoliciesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_policy_bundle OAIPolicyBundle [required]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void addPolicy(const OAIPolicyBundle &oai_policy_bundle, const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  policy_id QString [required]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void deletePolicy(const QString &policy_id, const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  policy_id QString [required]
    * @param[in]  detail bool [optional]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void getPolicy(const QString &policy_id, const ::OpenAPI::OptionalParam<bool> &detail = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  detail bool [optional]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void listPolicies(const ::OpenAPI::OptionalParam<bool> &detail = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  policy_id QString [required]
    * @param[in]  oai_policy_bundle_record OAIPolicyBundleRecord [required]
    * @param[in]  active bool [optional]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void updatePolicy(const QString &policy_id, const OAIPolicyBundleRecord &oai_policy_bundle_record, const ::OpenAPI::OptionalParam<bool> &active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addPolicyCallback(OAIHttpRequestWorker *worker);
    void deletePolicyCallback(OAIHttpRequestWorker *worker);
    void getPolicyCallback(OAIHttpRequestWorker *worker);
    void listPoliciesCallback(OAIHttpRequestWorker *worker);
    void updatePolicyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addPolicySignal(OAIPolicyBundleRecord summary);
    void deletePolicySignal();
    void getPolicySignal(QList<OAIPolicyBundleRecord> summary);
    void listPoliciesSignal(QList<OAIPolicyBundleRecord> summary);
    void updatePolicySignal(QList<OAIPolicyBundleRecord> summary);


    void addPolicySignalFull(OAIHttpRequestWorker *worker, OAIPolicyBundleRecord summary);
    void deletePolicySignalFull(OAIHttpRequestWorker *worker);
    void getPolicySignalFull(OAIHttpRequestWorker *worker, QList<OAIPolicyBundleRecord> summary);
    void listPoliciesSignalFull(OAIHttpRequestWorker *worker, QList<OAIPolicyBundleRecord> summary);
    void updatePolicySignalFull(OAIHttpRequestWorker *worker, QList<OAIPolicyBundleRecord> summary);

    Q_DECL_DEPRECATED_X("Use addPolicySignalError() instead")
    void addPolicySignalE(OAIPolicyBundleRecord summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addPolicySignalError(OAIPolicyBundleRecord summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePolicySignalError() instead")
    void deletePolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPolicySignalError() instead")
    void getPolicySignalE(QList<OAIPolicyBundleRecord> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPolicySignalError(QList<OAIPolicyBundleRecord> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPoliciesSignalError() instead")
    void listPoliciesSignalE(QList<OAIPolicyBundleRecord> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPoliciesSignalError(QList<OAIPolicyBundleRecord> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePolicySignalError() instead")
    void updatePolicySignalE(QList<OAIPolicyBundleRecord> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePolicySignalError(QList<OAIPolicyBundleRecord> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addPolicySignalErrorFull() instead")
    void addPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePolicySignalErrorFull() instead")
    void deletePolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPolicySignalErrorFull() instead")
    void getPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPoliciesSignalErrorFull() instead")
    void listPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePolicySignalErrorFull() instead")
    void updatePolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
