/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportContentDigests.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportContentDigests::OAIImportContentDigests(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportContentDigests::OAIImportContentDigests() {
    this->initializeModel();
}

OAIImportContentDigests::~OAIImportContentDigests() {}

void OAIImportContentDigests::initializeModel() {

    m_dockerfile_isSet = false;
    m_dockerfile_isValid = false;

    m_image_config_isSet = false;
    m_image_config_isValid = false;

    m_manifest_isSet = false;
    m_manifest_isValid = false;

    m_packages_isSet = false;
    m_packages_isValid = false;

    m_parent_manifest_isSet = false;
    m_parent_manifest_isValid = false;
}

void OAIImportContentDigests::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportContentDigests::fromJsonObject(QJsonObject json) {

    m_dockerfile_isValid = ::OpenAPI::fromJsonValue(m_dockerfile, json[QString("dockerfile")]);
    m_dockerfile_isSet = !json[QString("dockerfile")].isNull() && m_dockerfile_isValid;

    m_image_config_isValid = ::OpenAPI::fromJsonValue(m_image_config, json[QString("image_config")]);
    m_image_config_isSet = !json[QString("image_config")].isNull() && m_image_config_isValid;

    m_manifest_isValid = ::OpenAPI::fromJsonValue(m_manifest, json[QString("manifest")]);
    m_manifest_isSet = !json[QString("manifest")].isNull() && m_manifest_isValid;

    m_packages_isValid = ::OpenAPI::fromJsonValue(m_packages, json[QString("packages")]);
    m_packages_isSet = !json[QString("packages")].isNull() && m_packages_isValid;

    m_parent_manifest_isValid = ::OpenAPI::fromJsonValue(m_parent_manifest, json[QString("parent_manifest")]);
    m_parent_manifest_isSet = !json[QString("parent_manifest")].isNull() && m_parent_manifest_isValid;
}

QString OAIImportContentDigests::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportContentDigests::asJsonObject() const {
    QJsonObject obj;
    if (m_dockerfile_isSet) {
        obj.insert(QString("dockerfile"), ::OpenAPI::toJsonValue(m_dockerfile));
    }
    if (m_image_config_isSet) {
        obj.insert(QString("image_config"), ::OpenAPI::toJsonValue(m_image_config));
    }
    if (m_manifest_isSet) {
        obj.insert(QString("manifest"), ::OpenAPI::toJsonValue(m_manifest));
    }
    if (m_packages_isSet) {
        obj.insert(QString("packages"), ::OpenAPI::toJsonValue(m_packages));
    }
    if (m_parent_manifest_isSet) {
        obj.insert(QString("parent_manifest"), ::OpenAPI::toJsonValue(m_parent_manifest));
    }
    return obj;
}

QString OAIImportContentDigests::getDockerfile() const {
    return m_dockerfile;
}
void OAIImportContentDigests::setDockerfile(const QString &dockerfile) {
    m_dockerfile = dockerfile;
    m_dockerfile_isSet = true;
}

bool OAIImportContentDigests::is_dockerfile_Set() const{
    return m_dockerfile_isSet;
}

bool OAIImportContentDigests::is_dockerfile_Valid() const{
    return m_dockerfile_isValid;
}

QString OAIImportContentDigests::getImageConfig() const {
    return m_image_config;
}
void OAIImportContentDigests::setImageConfig(const QString &image_config) {
    m_image_config = image_config;
    m_image_config_isSet = true;
}

bool OAIImportContentDigests::is_image_config_Set() const{
    return m_image_config_isSet;
}

bool OAIImportContentDigests::is_image_config_Valid() const{
    return m_image_config_isValid;
}

QString OAIImportContentDigests::getManifest() const {
    return m_manifest;
}
void OAIImportContentDigests::setManifest(const QString &manifest) {
    m_manifest = manifest;
    m_manifest_isSet = true;
}

bool OAIImportContentDigests::is_manifest_Set() const{
    return m_manifest_isSet;
}

bool OAIImportContentDigests::is_manifest_Valid() const{
    return m_manifest_isValid;
}

QString OAIImportContentDigests::getPackages() const {
    return m_packages;
}
void OAIImportContentDigests::setPackages(const QString &packages) {
    m_packages = packages;
    m_packages_isSet = true;
}

bool OAIImportContentDigests::is_packages_Set() const{
    return m_packages_isSet;
}

bool OAIImportContentDigests::is_packages_Valid() const{
    return m_packages_isValid;
}

QString OAIImportContentDigests::getParentManifest() const {
    return m_parent_manifest;
}
void OAIImportContentDigests::setParentManifest(const QString &parent_manifest) {
    m_parent_manifest = parent_manifest;
    m_parent_manifest_isSet = true;
}

bool OAIImportContentDigests::is_parent_manifest_Set() const{
    return m_parent_manifest_isSet;
}

bool OAIImportContentDigests::is_parent_manifest_Valid() const{
    return m_parent_manifest_isValid;
}

bool OAIImportContentDigests::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dockerfile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_packages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_manifest_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportContentDigests::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_image_config_isValid && m_manifest_isValid && m_packages_isValid && true;
}

} // namespace OpenAPI
