/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStandaloneVulnerability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStandaloneVulnerability::OAIStandaloneVulnerability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStandaloneVulnerability::OAIStandaloneVulnerability() {
    this->initializeModel();
}

OAIStandaloneVulnerability::~OAIStandaloneVulnerability() {}

void OAIStandaloneVulnerability::initializeModel() {

    m_affected_packages_isSet = false;
    m_affected_packages_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_nvd_data_isSet = false;
    m_nvd_data_isValid = false;

    m_references_isSet = false;
    m_references_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_vendor_data_isSet = false;
    m_vendor_data_isValid = false;
}

void OAIStandaloneVulnerability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStandaloneVulnerability::fromJsonObject(QJsonObject json) {

    m_affected_packages_isValid = ::OpenAPI::fromJsonValue(m_affected_packages, json[QString("affected_packages")]);
    m_affected_packages_isSet = !json[QString("affected_packages")].isNull() && m_affected_packages_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;

    m_nvd_data_isValid = ::OpenAPI::fromJsonValue(m_nvd_data, json[QString("nvd_data")]);
    m_nvd_data_isSet = !json[QString("nvd_data")].isNull() && m_nvd_data_isValid;

    m_references_isValid = ::OpenAPI::fromJsonValue(m_references, json[QString("references")]);
    m_references_isSet = !json[QString("references")].isNull() && m_references_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_vendor_data_isValid = ::OpenAPI::fromJsonValue(m_vendor_data, json[QString("vendor_data")]);
    m_vendor_data_isSet = !json[QString("vendor_data")].isNull() && m_vendor_data_isValid;
}

QString OAIStandaloneVulnerability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStandaloneVulnerability::asJsonObject() const {
    QJsonObject obj;
    if (m_affected_packages.size() > 0) {
        obj.insert(QString("affected_packages"), ::OpenAPI::toJsonValue(m_affected_packages));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_nvd_data.size() > 0) {
        obj.insert(QString("nvd_data"), ::OpenAPI::toJsonValue(m_nvd_data));
    }
    if (m_references.size() > 0) {
        obj.insert(QString("references"), ::OpenAPI::toJsonValue(m_references));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_vendor_data.size() > 0) {
        obj.insert(QString("vendor_data"), ::OpenAPI::toJsonValue(m_vendor_data));
    }
    return obj;
}

QList<OAIPackageReference> OAIStandaloneVulnerability::getAffectedPackages() const {
    return m_affected_packages;
}
void OAIStandaloneVulnerability::setAffectedPackages(const QList<OAIPackageReference> &affected_packages) {
    m_affected_packages = affected_packages;
    m_affected_packages_isSet = true;
}

bool OAIStandaloneVulnerability::is_affected_packages_Set() const{
    return m_affected_packages_isSet;
}

bool OAIStandaloneVulnerability::is_affected_packages_Valid() const{
    return m_affected_packages_isValid;
}

QString OAIStandaloneVulnerability::getDescription() const {
    return m_description;
}
void OAIStandaloneVulnerability::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStandaloneVulnerability::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStandaloneVulnerability::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIStandaloneVulnerability::getId() const {
    return m_id;
}
void OAIStandaloneVulnerability::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStandaloneVulnerability::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStandaloneVulnerability::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIStandaloneVulnerability::getLink() const {
    return m_link;
}
void OAIStandaloneVulnerability::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIStandaloneVulnerability::is_link_Set() const{
    return m_link_isSet;
}

bool OAIStandaloneVulnerability::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIStandaloneVulnerability::getRNamespace() const {
    return m_r_namespace;
}
void OAIStandaloneVulnerability::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIStandaloneVulnerability::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIStandaloneVulnerability::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QList<OAINvdDataObject> OAIStandaloneVulnerability::getNvdData() const {
    return m_nvd_data;
}
void OAIStandaloneVulnerability::setNvdData(const QList<OAINvdDataObject> &nvd_data) {
    m_nvd_data = nvd_data;
    m_nvd_data_isSet = true;
}

bool OAIStandaloneVulnerability::is_nvd_data_Set() const{
    return m_nvd_data_isSet;
}

bool OAIStandaloneVulnerability::is_nvd_data_Valid() const{
    return m_nvd_data_isValid;
}

QList<OAIVulnerabilityReference> OAIStandaloneVulnerability::getReferences() const {
    return m_references;
}
void OAIStandaloneVulnerability::setReferences(const QList<OAIVulnerabilityReference> &references) {
    m_references = references;
    m_references_isSet = true;
}

bool OAIStandaloneVulnerability::is_references_Set() const{
    return m_references_isSet;
}

bool OAIStandaloneVulnerability::is_references_Valid() const{
    return m_references_isValid;
}

QString OAIStandaloneVulnerability::getSeverity() const {
    return m_severity;
}
void OAIStandaloneVulnerability::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIStandaloneVulnerability::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIStandaloneVulnerability::is_severity_Valid() const{
    return m_severity_isValid;
}

QList<OAIVendorDataObject> OAIStandaloneVulnerability::getVendorData() const {
    return m_vendor_data;
}
void OAIStandaloneVulnerability::setVendorData(const QList<OAIVendorDataObject> &vendor_data) {
    m_vendor_data = vendor_data;
    m_vendor_data_isSet = true;
}

bool OAIStandaloneVulnerability::is_vendor_data_Set() const{
    return m_vendor_data_isSet;
}

bool OAIStandaloneVulnerability::is_vendor_data_Valid() const{
    return m_vendor_data_isValid;
}

bool OAIStandaloneVulnerability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affected_packages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nvd_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStandaloneVulnerability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
