/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegistryConfigurationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegistryConfigurationRequest::OAIRegistryConfigurationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegistryConfigurationRequest::OAIRegistryConfigurationRequest() {
    this->initializeModel();
}

OAIRegistryConfigurationRequest::~OAIRegistryConfigurationRequest() {}

void OAIRegistryConfigurationRequest::initializeModel() {

    m_registry_isSet = false;
    m_registry_isValid = false;

    m_registry_name_isSet = false;
    m_registry_name_isValid = false;

    m_registry_pass_isSet = false;
    m_registry_pass_isValid = false;

    m_registry_type_isSet = false;
    m_registry_type_isValid = false;

    m_registry_user_isSet = false;
    m_registry_user_isValid = false;

    m_registry_verify_isSet = false;
    m_registry_verify_isValid = false;
}

void OAIRegistryConfigurationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegistryConfigurationRequest::fromJsonObject(QJsonObject json) {

    m_registry_isValid = ::OpenAPI::fromJsonValue(m_registry, json[QString("registry")]);
    m_registry_isSet = !json[QString("registry")].isNull() && m_registry_isValid;

    m_registry_name_isValid = ::OpenAPI::fromJsonValue(m_registry_name, json[QString("registry_name")]);
    m_registry_name_isSet = !json[QString("registry_name")].isNull() && m_registry_name_isValid;

    m_registry_pass_isValid = ::OpenAPI::fromJsonValue(m_registry_pass, json[QString("registry_pass")]);
    m_registry_pass_isSet = !json[QString("registry_pass")].isNull() && m_registry_pass_isValid;

    m_registry_type_isValid = ::OpenAPI::fromJsonValue(m_registry_type, json[QString("registry_type")]);
    m_registry_type_isSet = !json[QString("registry_type")].isNull() && m_registry_type_isValid;

    m_registry_user_isValid = ::OpenAPI::fromJsonValue(m_registry_user, json[QString("registry_user")]);
    m_registry_user_isSet = !json[QString("registry_user")].isNull() && m_registry_user_isValid;

    m_registry_verify_isValid = ::OpenAPI::fromJsonValue(m_registry_verify, json[QString("registry_verify")]);
    m_registry_verify_isSet = !json[QString("registry_verify")].isNull() && m_registry_verify_isValid;
}

QString OAIRegistryConfigurationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegistryConfigurationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_registry_isSet) {
        obj.insert(QString("registry"), ::OpenAPI::toJsonValue(m_registry));
    }
    if (m_registry_name_isSet) {
        obj.insert(QString("registry_name"), ::OpenAPI::toJsonValue(m_registry_name));
    }
    if (m_registry_pass_isSet) {
        obj.insert(QString("registry_pass"), ::OpenAPI::toJsonValue(m_registry_pass));
    }
    if (m_registry_type_isSet) {
        obj.insert(QString("registry_type"), ::OpenAPI::toJsonValue(m_registry_type));
    }
    if (m_registry_user_isSet) {
        obj.insert(QString("registry_user"), ::OpenAPI::toJsonValue(m_registry_user));
    }
    if (m_registry_verify_isSet) {
        obj.insert(QString("registry_verify"), ::OpenAPI::toJsonValue(m_registry_verify));
    }
    return obj;
}

QString OAIRegistryConfigurationRequest::getRegistry() const {
    return m_registry;
}
void OAIRegistryConfigurationRequest::setRegistry(const QString &registry) {
    m_registry = registry;
    m_registry_isSet = true;
}

bool OAIRegistryConfigurationRequest::is_registry_Set() const{
    return m_registry_isSet;
}

bool OAIRegistryConfigurationRequest::is_registry_Valid() const{
    return m_registry_isValid;
}

QString OAIRegistryConfigurationRequest::getRegistryName() const {
    return m_registry_name;
}
void OAIRegistryConfigurationRequest::setRegistryName(const QString &registry_name) {
    m_registry_name = registry_name;
    m_registry_name_isSet = true;
}

bool OAIRegistryConfigurationRequest::is_registry_name_Set() const{
    return m_registry_name_isSet;
}

bool OAIRegistryConfigurationRequest::is_registry_name_Valid() const{
    return m_registry_name_isValid;
}

QString OAIRegistryConfigurationRequest::getRegistryPass() const {
    return m_registry_pass;
}
void OAIRegistryConfigurationRequest::setRegistryPass(const QString &registry_pass) {
    m_registry_pass = registry_pass;
    m_registry_pass_isSet = true;
}

bool OAIRegistryConfigurationRequest::is_registry_pass_Set() const{
    return m_registry_pass_isSet;
}

bool OAIRegistryConfigurationRequest::is_registry_pass_Valid() const{
    return m_registry_pass_isValid;
}

QString OAIRegistryConfigurationRequest::getRegistryType() const {
    return m_registry_type;
}
void OAIRegistryConfigurationRequest::setRegistryType(const QString &registry_type) {
    m_registry_type = registry_type;
    m_registry_type_isSet = true;
}

bool OAIRegistryConfigurationRequest::is_registry_type_Set() const{
    return m_registry_type_isSet;
}

bool OAIRegistryConfigurationRequest::is_registry_type_Valid() const{
    return m_registry_type_isValid;
}

QString OAIRegistryConfigurationRequest::getRegistryUser() const {
    return m_registry_user;
}
void OAIRegistryConfigurationRequest::setRegistryUser(const QString &registry_user) {
    m_registry_user = registry_user;
    m_registry_user_isSet = true;
}

bool OAIRegistryConfigurationRequest::is_registry_user_Set() const{
    return m_registry_user_isSet;
}

bool OAIRegistryConfigurationRequest::is_registry_user_Valid() const{
    return m_registry_user_isValid;
}

bool OAIRegistryConfigurationRequest::isRegistryVerify() const {
    return m_registry_verify;
}
void OAIRegistryConfigurationRequest::setRegistryVerify(const bool &registry_verify) {
    m_registry_verify = registry_verify;
    m_registry_verify_isSet = true;
}

bool OAIRegistryConfigurationRequest::is_registry_verify_Set() const{
    return m_registry_verify_isSet;
}

bool OAIRegistryConfigurationRequest::is_registry_verify_Valid() const{
    return m_registry_verify_isValid;
}

bool OAIRegistryConfigurationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_registry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_pass_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_verify_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegistryConfigurationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
