/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisUpdateNotification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysisUpdateNotification::OAIAnalysisUpdateNotification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysisUpdateNotification::OAIAnalysisUpdateNotification() {
    this->initializeModel();
}

OAIAnalysisUpdateNotification::~OAIAnalysisUpdateNotification() {}

void OAIAnalysisUpdateNotification::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_data_id_isSet = false;
    m_data_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_max_tries_isSet = false;
    m_max_tries_isValid = false;

    m_queue_id_isSet = false;
    m_queue_id_isValid = false;

    m_record_state_key_isSet = false;
    m_record_state_key_isValid = false;

    m_record_state_val_isSet = false;
    m_record_state_val_isValid = false;

    m_tries_isSet = false;
    m_tries_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;
}

void OAIAnalysisUpdateNotification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysisUpdateNotification::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_data_id_isValid = ::OpenAPI::fromJsonValue(m_data_id, json[QString("dataId")]);
    m_data_id_isSet = !json[QString("dataId")].isNull() && m_data_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_max_tries_isValid = ::OpenAPI::fromJsonValue(m_max_tries, json[QString("max_tries")]);
    m_max_tries_isSet = !json[QString("max_tries")].isNull() && m_max_tries_isValid;

    m_queue_id_isValid = ::OpenAPI::fromJsonValue(m_queue_id, json[QString("queueId")]);
    m_queue_id_isSet = !json[QString("queueId")].isNull() && m_queue_id_isValid;

    m_record_state_key_isValid = ::OpenAPI::fromJsonValue(m_record_state_key, json[QString("record_state_key")]);
    m_record_state_key_isSet = !json[QString("record_state_key")].isNull() && m_record_state_key_isValid;

    m_record_state_val_isValid = ::OpenAPI::fromJsonValue(m_record_state_val, json[QString("record_state_val")]);
    m_record_state_val_isSet = !json[QString("record_state_val")].isNull() && m_record_state_val_isValid;

    m_tries_isValid = ::OpenAPI::fromJsonValue(m_tries, json[QString("tries")]);
    m_tries_isSet = !json[QString("tries")].isNull() && m_tries_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;
}

QString OAIAnalysisUpdateNotification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysisUpdateNotification::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_data_id_isSet) {
        obj.insert(QString("dataId"), ::OpenAPI::toJsonValue(m_data_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_max_tries_isSet) {
        obj.insert(QString("max_tries"), ::OpenAPI::toJsonValue(m_max_tries));
    }
    if (m_queue_id_isSet) {
        obj.insert(QString("queueId"), ::OpenAPI::toJsonValue(m_queue_id));
    }
    if (m_record_state_key_isSet) {
        obj.insert(QString("record_state_key"), ::OpenAPI::toJsonValue(m_record_state_key));
    }
    if (m_record_state_val_isSet) {
        obj.insert(QString("record_state_val"), ::OpenAPI::toJsonValue(m_record_state_val));
    }
    if (m_tries_isSet) {
        obj.insert(QString("tries"), ::OpenAPI::toJsonValue(m_tries));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    return obj;
}

qint32 OAIAnalysisUpdateNotification::getCreatedAt() const {
    return m_created_at;
}
void OAIAnalysisUpdateNotification::setCreatedAt(const qint32 &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAnalysisUpdateNotification::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAnalysisUpdateNotification::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIAnalysisUpdateNotification::getDataId() const {
    return m_data_id;
}
void OAIAnalysisUpdateNotification::setDataId(const QString &data_id) {
    m_data_id = data_id;
    m_data_id_isSet = true;
}

bool OAIAnalysisUpdateNotification::is_data_id_Set() const{
    return m_data_id_isSet;
}

bool OAIAnalysisUpdateNotification::is_data_id_Valid() const{
    return m_data_id_isValid;
}

qint32 OAIAnalysisUpdateNotification::getLastUpdated() const {
    return m_last_updated;
}
void OAIAnalysisUpdateNotification::setLastUpdated(const qint32 &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIAnalysisUpdateNotification::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIAnalysisUpdateNotification::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

qint32 OAIAnalysisUpdateNotification::getMaxTries() const {
    return m_max_tries;
}
void OAIAnalysisUpdateNotification::setMaxTries(const qint32 &max_tries) {
    m_max_tries = max_tries;
    m_max_tries_isSet = true;
}

bool OAIAnalysisUpdateNotification::is_max_tries_Set() const{
    return m_max_tries_isSet;
}

bool OAIAnalysisUpdateNotification::is_max_tries_Valid() const{
    return m_max_tries_isValid;
}

QString OAIAnalysisUpdateNotification::getQueueId() const {
    return m_queue_id;
}
void OAIAnalysisUpdateNotification::setQueueId(const QString &queue_id) {
    m_queue_id = queue_id;
    m_queue_id_isSet = true;
}

bool OAIAnalysisUpdateNotification::is_queue_id_Set() const{
    return m_queue_id_isSet;
}

bool OAIAnalysisUpdateNotification::is_queue_id_Valid() const{
    return m_queue_id_isValid;
}

QString OAIAnalysisUpdateNotification::getRecordStateKey() const {
    return m_record_state_key;
}
void OAIAnalysisUpdateNotification::setRecordStateKey(const QString &record_state_key) {
    m_record_state_key = record_state_key;
    m_record_state_key_isSet = true;
}

bool OAIAnalysisUpdateNotification::is_record_state_key_Set() const{
    return m_record_state_key_isSet;
}

bool OAIAnalysisUpdateNotification::is_record_state_key_Valid() const{
    return m_record_state_key_isValid;
}

QString OAIAnalysisUpdateNotification::getRecordStateVal() const {
    return m_record_state_val;
}
void OAIAnalysisUpdateNotification::setRecordStateVal(const QString &record_state_val) {
    m_record_state_val = record_state_val;
    m_record_state_val_isSet = true;
}

bool OAIAnalysisUpdateNotification::is_record_state_val_Set() const{
    return m_record_state_val_isSet;
}

bool OAIAnalysisUpdateNotification::is_record_state_val_Valid() const{
    return m_record_state_val_isValid;
}

qint32 OAIAnalysisUpdateNotification::getTries() const {
    return m_tries;
}
void OAIAnalysisUpdateNotification::setTries(const qint32 &tries) {
    m_tries = tries;
    m_tries_isSet = true;
}

bool OAIAnalysisUpdateNotification::is_tries_Set() const{
    return m_tries_isSet;
}

bool OAIAnalysisUpdateNotification::is_tries_Valid() const{
    return m_tries_isValid;
}

QString OAIAnalysisUpdateNotification::getUserId() const {
    return m_user_id;
}
void OAIAnalysisUpdateNotification::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAnalysisUpdateNotification::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAnalysisUpdateNotification::is_user_id_Valid() const{
    return m_user_id_isValid;
}

OAIAnalysisUpdateNotificationData OAIAnalysisUpdateNotification::getData() const {
    return m_data;
}
void OAIAnalysisUpdateNotification::setData(const OAIAnalysisUpdateNotificationData &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIAnalysisUpdateNotification::is_data_Set() const{
    return m_data_isSet;
}

bool OAIAnalysisUpdateNotification::is_data_Valid() const{
    return m_data_isValid;
}

bool OAIAnalysisUpdateNotification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_tries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_state_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_state_val_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysisUpdateNotification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
