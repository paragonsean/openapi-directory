/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportPackageRelationship.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportPackageRelationship::OAIImportPackageRelationship(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportPackageRelationship::OAIImportPackageRelationship() {
    this->initializeModel();
}

OAIImportPackageRelationship::~OAIImportPackageRelationship() {}

void OAIImportPackageRelationship::initializeModel() {

    m_child_isSet = false;
    m_child_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIImportPackageRelationship::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportPackageRelationship::fromJsonObject(QJsonObject json) {

    m_child_isValid = ::OpenAPI::fromJsonValue(m_child, json[QString("child")]);
    m_child_isSet = !json[QString("child")].isNull() && m_child_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIImportPackageRelationship::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportPackageRelationship::asJsonObject() const {
    QJsonObject obj;
    if (m_child_isSet) {
        obj.insert(QString("child"), ::OpenAPI::toJsonValue(m_child));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_parent_isSet) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIImportPackageRelationship::getChild() const {
    return m_child;
}
void OAIImportPackageRelationship::setChild(const QString &child) {
    m_child = child;
    m_child_isSet = true;
}

bool OAIImportPackageRelationship::is_child_Set() const{
    return m_child_isSet;
}

bool OAIImportPackageRelationship::is_child_Valid() const{
    return m_child_isValid;
}

QMap<QString, QJsonValue> OAIImportPackageRelationship::getMetadata() const {
    return m_metadata;
}
void OAIImportPackageRelationship::setMetadata(const QMap<QString, QJsonValue> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIImportPackageRelationship::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIImportPackageRelationship::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIImportPackageRelationship::getParent() const {
    return m_parent;
}
void OAIImportPackageRelationship::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIImportPackageRelationship::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIImportPackageRelationship::is_parent_Valid() const{
    return m_parent_isValid;
}

QString OAIImportPackageRelationship::getType() const {
    return m_type;
}
void OAIImportPackageRelationship::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIImportPackageRelationship::is_type_Set() const{
    return m_type_isSet;
}

bool OAIImportPackageRelationship::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIImportPackageRelationship::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_child_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportPackageRelationship::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_child_isValid && m_parent_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
