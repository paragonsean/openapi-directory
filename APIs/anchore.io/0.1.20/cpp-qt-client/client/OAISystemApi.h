/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISystemApi_H
#define OAI_OAISystemApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAnchoreErrorCode.h"
#include "OAIApiErrorResponse.h"
#include "OAIFeedMetadata.h"
#include "OAIFeedSyncResult.h"
#include "OAIGateSpec.h"
#include "OAIService.h"
#include "OAIStatusResponse.h"
#include "OAISystemStatusResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISystemApi : public QObject {
    Q_OBJECT

public:
    OAISystemApi(const int timeOut = 0);
    ~OAISystemApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  feed QString [required]
    */
    virtual void deleteFeed(const QString &feed);

    /**
    * @param[in]  feed QString [required]
    * @param[in]  group QString [required]
    */
    virtual void deleteFeedGroup(const QString &feed, const QString &group);

    /**
    * @param[in]  servicename QString [required]
    * @param[in]  hostid QString [required]
    */
    virtual void deleteService(const QString &servicename, const QString &hostid);


    virtual void describeErrorCodes();


    virtual void describePolicy();


    virtual void getServiceDetail();

    /**
    * @param[in]  servicename QString [required]
    */
    virtual void getServicesByName(const QString &servicename);

    /**
    * @param[in]  servicename QString [required]
    * @param[in]  hostid QString [required]
    */
    virtual void getServicesByNameAndHost(const QString &servicename, const QString &hostid);


    virtual void getStatus();


    virtual void getSystemFeeds();


    virtual void listServices();

    /**
    * @param[in]  flush bool [optional]
    * @param[in]  sync bool [optional]
    */
    virtual void postSystemFeeds(const ::OpenAPI::OptionalParam<bool> &flush = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sync = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  webhook_type QString [required]
    * @param[in]  notification_type QString [optional]
    */
    virtual void testWebhook(const QString &webhook_type, const ::OpenAPI::OptionalParam<QString> &notification_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  feed QString [required]
    * @param[in]  enabled bool [required]
    */
    virtual void toggleFeedEnabled(const QString &feed, const bool &enabled);

    /**
    * @param[in]  feed QString [required]
    * @param[in]  group QString [required]
    * @param[in]  enabled bool [required]
    */
    virtual void toggleGroupEnabled(const QString &feed, const QString &group, const bool &enabled);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteFeedCallback(OAIHttpRequestWorker *worker);
    void deleteFeedGroupCallback(OAIHttpRequestWorker *worker);
    void deleteServiceCallback(OAIHttpRequestWorker *worker);
    void describeErrorCodesCallback(OAIHttpRequestWorker *worker);
    void describePolicyCallback(OAIHttpRequestWorker *worker);
    void getServiceDetailCallback(OAIHttpRequestWorker *worker);
    void getServicesByNameCallback(OAIHttpRequestWorker *worker);
    void getServicesByNameAndHostCallback(OAIHttpRequestWorker *worker);
    void getStatusCallback(OAIHttpRequestWorker *worker);
    void getSystemFeedsCallback(OAIHttpRequestWorker *worker);
    void listServicesCallback(OAIHttpRequestWorker *worker);
    void postSystemFeedsCallback(OAIHttpRequestWorker *worker);
    void testWebhookCallback(OAIHttpRequestWorker *worker);
    void toggleFeedEnabledCallback(OAIHttpRequestWorker *worker);
    void toggleGroupEnabledCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteFeedSignal();
    void deleteFeedGroupSignal();
    void deleteServiceSignal();
    void describeErrorCodesSignal(QList<OAIAnchoreErrorCode> summary);
    void describePolicySignal(QList<OAIGateSpec> summary);
    void getServiceDetailSignal(OAISystemStatusResponse summary);
    void getServicesByNameSignal(QList<OAIService> summary);
    void getServicesByNameAndHostSignal(QList<OAIService> summary);
    void getStatusSignal(OAIStatusResponse summary);
    void getSystemFeedsSignal(QList<OAIFeedMetadata> summary);
    void listServicesSignal(QList<OAIService> summary);
    void postSystemFeedsSignal(QList<OAIFeedSyncResult> summary);
    void testWebhookSignal();
    void toggleFeedEnabledSignal(OAIFeedMetadata summary);
    void toggleGroupEnabledSignal(QList<OAIFeedMetadata> summary);


    void deleteFeedSignalFull(OAIHttpRequestWorker *worker);
    void deleteFeedGroupSignalFull(OAIHttpRequestWorker *worker);
    void deleteServiceSignalFull(OAIHttpRequestWorker *worker);
    void describeErrorCodesSignalFull(OAIHttpRequestWorker *worker, QList<OAIAnchoreErrorCode> summary);
    void describePolicySignalFull(OAIHttpRequestWorker *worker, QList<OAIGateSpec> summary);
    void getServiceDetailSignalFull(OAIHttpRequestWorker *worker, OAISystemStatusResponse summary);
    void getServicesByNameSignalFull(OAIHttpRequestWorker *worker, QList<OAIService> summary);
    void getServicesByNameAndHostSignalFull(OAIHttpRequestWorker *worker, QList<OAIService> summary);
    void getStatusSignalFull(OAIHttpRequestWorker *worker, OAIStatusResponse summary);
    void getSystemFeedsSignalFull(OAIHttpRequestWorker *worker, QList<OAIFeedMetadata> summary);
    void listServicesSignalFull(OAIHttpRequestWorker *worker, QList<OAIService> summary);
    void postSystemFeedsSignalFull(OAIHttpRequestWorker *worker, QList<OAIFeedSyncResult> summary);
    void testWebhookSignalFull(OAIHttpRequestWorker *worker);
    void toggleFeedEnabledSignalFull(OAIHttpRequestWorker *worker, OAIFeedMetadata summary);
    void toggleGroupEnabledSignalFull(OAIHttpRequestWorker *worker, QList<OAIFeedMetadata> summary);

    Q_DECL_DEPRECATED_X("Use deleteFeedSignalError() instead")
    void deleteFeedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFeedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFeedGroupSignalError() instead")
    void deleteFeedGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFeedGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServiceSignalError() instead")
    void deleteServiceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeErrorCodesSignalError() instead")
    void describeErrorCodesSignalE(QList<OAIAnchoreErrorCode> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeErrorCodesSignalError(QList<OAIAnchoreErrorCode> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describePolicySignalError() instead")
    void describePolicySignalE(QList<OAIGateSpec> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describePolicySignalError(QList<OAIGateSpec> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceDetailSignalError() instead")
    void getServiceDetailSignalE(OAISystemStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceDetailSignalError(OAISystemStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServicesByNameSignalError() instead")
    void getServicesByNameSignalE(QList<OAIService> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServicesByNameSignalError(QList<OAIService> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServicesByNameAndHostSignalError() instead")
    void getServicesByNameAndHostSignalE(QList<OAIService> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServicesByNameAndHostSignalError(QList<OAIService> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatusSignalError() instead")
    void getStatusSignalE(OAIStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatusSignalError(OAIStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSystemFeedsSignalError() instead")
    void getSystemFeedsSignalE(QList<OAIFeedMetadata> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSystemFeedsSignalError(QList<OAIFeedMetadata> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServicesSignalError() instead")
    void listServicesSignalE(QList<OAIService> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listServicesSignalError(QList<OAIService> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSystemFeedsSignalError() instead")
    void postSystemFeedsSignalE(QList<OAIFeedSyncResult> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postSystemFeedsSignalError(QList<OAIFeedSyncResult> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testWebhookSignalError() instead")
    void testWebhookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void testWebhookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use toggleFeedEnabledSignalError() instead")
    void toggleFeedEnabledSignalE(OAIFeedMetadata summary, QNetworkReply::NetworkError error_type, QString error_str);
    void toggleFeedEnabledSignalError(OAIFeedMetadata summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use toggleGroupEnabledSignalError() instead")
    void toggleGroupEnabledSignalE(QList<OAIFeedMetadata> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void toggleGroupEnabledSignalError(QList<OAIFeedMetadata> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteFeedSignalErrorFull() instead")
    void deleteFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFeedGroupSignalErrorFull() instead")
    void deleteFeedGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFeedGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServiceSignalErrorFull() instead")
    void deleteServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeErrorCodesSignalErrorFull() instead")
    void describeErrorCodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeErrorCodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describePolicySignalErrorFull() instead")
    void describePolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describePolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceDetailSignalErrorFull() instead")
    void getServiceDetailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceDetailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServicesByNameSignalErrorFull() instead")
    void getServicesByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServicesByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServicesByNameAndHostSignalErrorFull() instead")
    void getServicesByNameAndHostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServicesByNameAndHostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatusSignalErrorFull() instead")
    void getStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSystemFeedsSignalErrorFull() instead")
    void getSystemFeedsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSystemFeedsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServicesSignalErrorFull() instead")
    void listServicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listServicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSystemFeedsSignalErrorFull() instead")
    void postSystemFeedsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSystemFeedsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testWebhookSignalErrorFull() instead")
    void testWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use toggleFeedEnabledSignalErrorFull() instead")
    void toggleFeedEnabledSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void toggleFeedEnabledSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use toggleGroupEnabledSignalErrorFull() instead")
    void toggleGroupEnabledSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void toggleGroupEnabledSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
