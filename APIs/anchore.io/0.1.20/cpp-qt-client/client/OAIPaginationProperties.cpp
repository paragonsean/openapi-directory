/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaginationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaginationProperties::OAIPaginationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaginationProperties::OAIPaginationProperties() {
    this->initializeModel();
}

OAIPaginationProperties::~OAIPaginationProperties() {}

void OAIPaginationProperties::initializeModel() {

    m_next_page_isSet = false;
    m_next_page_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_returned_count_isSet = false;
    m_returned_count_isValid = false;
}

void OAIPaginationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaginationProperties::fromJsonObject(QJsonObject json) {

    m_next_page_isValid = ::OpenAPI::fromJsonValue(m_next_page, json[QString("next_page")]);
    m_next_page_isSet = !json[QString("next_page")].isNull() && m_next_page_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_returned_count_isValid = ::OpenAPI::fromJsonValue(m_returned_count, json[QString("returned_count")]);
    m_returned_count_isSet = !json[QString("returned_count")].isNull() && m_returned_count_isValid;
}

QString OAIPaginationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaginationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_isSet) {
        obj.insert(QString("next_page"), ::OpenAPI::toJsonValue(m_next_page));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_returned_count_isSet) {
        obj.insert(QString("returned_count"), ::OpenAPI::toJsonValue(m_returned_count));
    }
    return obj;
}

QString OAIPaginationProperties::getNextPage() const {
    return m_next_page;
}
void OAIPaginationProperties::setNextPage(const QString &next_page) {
    m_next_page = next_page;
    m_next_page_isSet = true;
}

bool OAIPaginationProperties::is_next_page_Set() const{
    return m_next_page_isSet;
}

bool OAIPaginationProperties::is_next_page_Valid() const{
    return m_next_page_isValid;
}

QString OAIPaginationProperties::getPage() const {
    return m_page;
}
void OAIPaginationProperties::setPage(const QString &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIPaginationProperties::is_page_Set() const{
    return m_page_isSet;
}

bool OAIPaginationProperties::is_page_Valid() const{
    return m_page_isValid;
}

qint32 OAIPaginationProperties::getReturnedCount() const {
    return m_returned_count;
}
void OAIPaginationProperties::setReturnedCount(const qint32 &returned_count) {
    m_returned_count = returned_count;
    m_returned_count_isSet = true;
}

bool OAIPaginationProperties::is_returned_count_Set() const{
    return m_returned_count_isSet;
}

bool OAIPaginationProperties::is_returned_count_Valid() const{
    return m_returned_count_isValid;
}

bool OAIPaginationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_returned_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaginationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
