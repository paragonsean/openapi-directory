/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRegistriesApi_H
#define OAI_OAIRegistriesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiErrorResponse.h"
#include "OAIRegistryConfiguration.h"
#include "OAIRegistryConfigurationRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRegistriesApi : public QObject {
    Q_OBJECT

public:
    OAIRegistriesApi(const int timeOut = 0);
    ~OAIRegistriesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_registry_configuration_request OAIRegistryConfigurationRequest [required]
    * @param[in]  validate bool [optional]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void createRegistry(const OAIRegistryConfigurationRequest &oai_registry_configuration_request, const ::OpenAPI::OptionalParam<bool> &validate = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  registry QString [required]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void deleteRegistry(const QString &registry, const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  registry QString [required]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void getRegistry(const QString &registry, const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void listRegistries(const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  registry QString [required]
    * @param[in]  oai_registry_configuration_request OAIRegistryConfigurationRequest [required]
    * @param[in]  validate bool [optional]
    * @param[in]  x_anchore_account QString [optional]
    */
    virtual void updateRegistry(const QString &registry, const OAIRegistryConfigurationRequest &oai_registry_configuration_request, const ::OpenAPI::OptionalParam<bool> &validate = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_anchore_account = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createRegistryCallback(OAIHttpRequestWorker *worker);
    void deleteRegistryCallback(OAIHttpRequestWorker *worker);
    void getRegistryCallback(OAIHttpRequestWorker *worker);
    void listRegistriesCallback(OAIHttpRequestWorker *worker);
    void updateRegistryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createRegistrySignal(QList<OAIRegistryConfiguration> summary);
    void deleteRegistrySignal();
    void getRegistrySignal(QList<OAIRegistryConfiguration> summary);
    void listRegistriesSignal(QList<OAIRegistryConfiguration> summary);
    void updateRegistrySignal(QList<OAIRegistryConfiguration> summary);


    void createRegistrySignalFull(OAIHttpRequestWorker *worker, QList<OAIRegistryConfiguration> summary);
    void deleteRegistrySignalFull(OAIHttpRequestWorker *worker);
    void getRegistrySignalFull(OAIHttpRequestWorker *worker, QList<OAIRegistryConfiguration> summary);
    void listRegistriesSignalFull(OAIHttpRequestWorker *worker, QList<OAIRegistryConfiguration> summary);
    void updateRegistrySignalFull(OAIHttpRequestWorker *worker, QList<OAIRegistryConfiguration> summary);

    Q_DECL_DEPRECATED_X("Use createRegistrySignalError() instead")
    void createRegistrySignalE(QList<OAIRegistryConfiguration> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRegistrySignalError(QList<OAIRegistryConfiguration> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRegistrySignalError() instead")
    void deleteRegistrySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRegistrySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegistrySignalError() instead")
    void getRegistrySignalE(QList<OAIRegistryConfiguration> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegistrySignalError(QList<OAIRegistryConfiguration> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRegistriesSignalError() instead")
    void listRegistriesSignalE(QList<OAIRegistryConfiguration> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRegistriesSignalError(QList<OAIRegistryConfiguration> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRegistrySignalError() instead")
    void updateRegistrySignalE(QList<OAIRegistryConfiguration> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRegistrySignalError(QList<OAIRegistryConfiguration> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createRegistrySignalErrorFull() instead")
    void createRegistrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRegistrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRegistrySignalErrorFull() instead")
    void deleteRegistrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRegistrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegistrySignalErrorFull() instead")
    void getRegistrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegistrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRegistriesSignalErrorFull() instead")
    void listRegistriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRegistriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRegistrySignalErrorFull() instead")
    void updateRegistrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRegistrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
