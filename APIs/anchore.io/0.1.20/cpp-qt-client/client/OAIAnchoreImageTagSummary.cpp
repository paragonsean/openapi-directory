/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnchoreImageTagSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnchoreImageTagSummary::OAIAnchoreImageTagSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnchoreImageTagSummary::OAIAnchoreImageTagSummary() {
    this->initializeModel();
}

OAIAnchoreImageTagSummary::~OAIAnchoreImageTagSummary() {}

void OAIAnchoreImageTagSummary::initializeModel() {

    m_analysis_status_isSet = false;
    m_analysis_status_isValid = false;

    m_analyzed_at_isSet = false;
    m_analyzed_at_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_fulltag_isSet = false;
    m_fulltag_isValid = false;

    m_image_digest_isSet = false;
    m_image_digest_isValid = false;

    m_image_id_isSet = false;
    m_image_id_isValid = false;

    m_image_status_isSet = false;
    m_image_status_isValid = false;

    m_parent_digest_isSet = false;
    m_parent_digest_isValid = false;

    m_tag_detected_at_isSet = false;
    m_tag_detected_at_isValid = false;
}

void OAIAnchoreImageTagSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnchoreImageTagSummary::fromJsonObject(QJsonObject json) {

    m_analysis_status_isValid = ::OpenAPI::fromJsonValue(m_analysis_status, json[QString("analysis_status")]);
    m_analysis_status_isSet = !json[QString("analysis_status")].isNull() && m_analysis_status_isValid;

    m_analyzed_at_isValid = ::OpenAPI::fromJsonValue(m_analyzed_at, json[QString("analyzed_at")]);
    m_analyzed_at_isSet = !json[QString("analyzed_at")].isNull() && m_analyzed_at_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_fulltag_isValid = ::OpenAPI::fromJsonValue(m_fulltag, json[QString("fulltag")]);
    m_fulltag_isSet = !json[QString("fulltag")].isNull() && m_fulltag_isValid;

    m_image_digest_isValid = ::OpenAPI::fromJsonValue(m_image_digest, json[QString("imageDigest")]);
    m_image_digest_isSet = !json[QString("imageDigest")].isNull() && m_image_digest_isValid;

    m_image_id_isValid = ::OpenAPI::fromJsonValue(m_image_id, json[QString("imageId")]);
    m_image_id_isSet = !json[QString("imageId")].isNull() && m_image_id_isValid;

    m_image_status_isValid = ::OpenAPI::fromJsonValue(m_image_status, json[QString("image_status")]);
    m_image_status_isSet = !json[QString("image_status")].isNull() && m_image_status_isValid;

    m_parent_digest_isValid = ::OpenAPI::fromJsonValue(m_parent_digest, json[QString("parentDigest")]);
    m_parent_digest_isSet = !json[QString("parentDigest")].isNull() && m_parent_digest_isValid;

    m_tag_detected_at_isValid = ::OpenAPI::fromJsonValue(m_tag_detected_at, json[QString("tag_detected_at")]);
    m_tag_detected_at_isSet = !json[QString("tag_detected_at")].isNull() && m_tag_detected_at_isValid;
}

QString OAIAnchoreImageTagSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnchoreImageTagSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_status_isSet) {
        obj.insert(QString("analysis_status"), ::OpenAPI::toJsonValue(m_analysis_status));
    }
    if (m_analyzed_at_isSet) {
        obj.insert(QString("analyzed_at"), ::OpenAPI::toJsonValue(m_analyzed_at));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_fulltag_isSet) {
        obj.insert(QString("fulltag"), ::OpenAPI::toJsonValue(m_fulltag));
    }
    if (m_image_digest_isSet) {
        obj.insert(QString("imageDigest"), ::OpenAPI::toJsonValue(m_image_digest));
    }
    if (m_image_id_isSet) {
        obj.insert(QString("imageId"), ::OpenAPI::toJsonValue(m_image_id));
    }
    if (m_image_status_isSet) {
        obj.insert(QString("image_status"), ::OpenAPI::toJsonValue(m_image_status));
    }
    if (m_parent_digest_isSet) {
        obj.insert(QString("parentDigest"), ::OpenAPI::toJsonValue(m_parent_digest));
    }
    if (m_tag_detected_at_isSet) {
        obj.insert(QString("tag_detected_at"), ::OpenAPI::toJsonValue(m_tag_detected_at));
    }
    return obj;
}

QString OAIAnchoreImageTagSummary::getAnalysisStatus() const {
    return m_analysis_status;
}
void OAIAnchoreImageTagSummary::setAnalysisStatus(const QString &analysis_status) {
    m_analysis_status = analysis_status;
    m_analysis_status_isSet = true;
}

bool OAIAnchoreImageTagSummary::is_analysis_status_Set() const{
    return m_analysis_status_isSet;
}

bool OAIAnchoreImageTagSummary::is_analysis_status_Valid() const{
    return m_analysis_status_isValid;
}

qint32 OAIAnchoreImageTagSummary::getAnalyzedAt() const {
    return m_analyzed_at;
}
void OAIAnchoreImageTagSummary::setAnalyzedAt(const qint32 &analyzed_at) {
    m_analyzed_at = analyzed_at;
    m_analyzed_at_isSet = true;
}

bool OAIAnchoreImageTagSummary::is_analyzed_at_Set() const{
    return m_analyzed_at_isSet;
}

bool OAIAnchoreImageTagSummary::is_analyzed_at_Valid() const{
    return m_analyzed_at_isValid;
}

qint32 OAIAnchoreImageTagSummary::getCreatedAt() const {
    return m_created_at;
}
void OAIAnchoreImageTagSummary::setCreatedAt(const qint32 &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAnchoreImageTagSummary::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAnchoreImageTagSummary::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIAnchoreImageTagSummary::getFulltag() const {
    return m_fulltag;
}
void OAIAnchoreImageTagSummary::setFulltag(const QString &fulltag) {
    m_fulltag = fulltag;
    m_fulltag_isSet = true;
}

bool OAIAnchoreImageTagSummary::is_fulltag_Set() const{
    return m_fulltag_isSet;
}

bool OAIAnchoreImageTagSummary::is_fulltag_Valid() const{
    return m_fulltag_isValid;
}

QString OAIAnchoreImageTagSummary::getImageDigest() const {
    return m_image_digest;
}
void OAIAnchoreImageTagSummary::setImageDigest(const QString &image_digest) {
    m_image_digest = image_digest;
    m_image_digest_isSet = true;
}

bool OAIAnchoreImageTagSummary::is_image_digest_Set() const{
    return m_image_digest_isSet;
}

bool OAIAnchoreImageTagSummary::is_image_digest_Valid() const{
    return m_image_digest_isValid;
}

QString OAIAnchoreImageTagSummary::getImageId() const {
    return m_image_id;
}
void OAIAnchoreImageTagSummary::setImageId(const QString &image_id) {
    m_image_id = image_id;
    m_image_id_isSet = true;
}

bool OAIAnchoreImageTagSummary::is_image_id_Set() const{
    return m_image_id_isSet;
}

bool OAIAnchoreImageTagSummary::is_image_id_Valid() const{
    return m_image_id_isValid;
}

QString OAIAnchoreImageTagSummary::getImageStatus() const {
    return m_image_status;
}
void OAIAnchoreImageTagSummary::setImageStatus(const QString &image_status) {
    m_image_status = image_status;
    m_image_status_isSet = true;
}

bool OAIAnchoreImageTagSummary::is_image_status_Set() const{
    return m_image_status_isSet;
}

bool OAIAnchoreImageTagSummary::is_image_status_Valid() const{
    return m_image_status_isValid;
}

QString OAIAnchoreImageTagSummary::getParentDigest() const {
    return m_parent_digest;
}
void OAIAnchoreImageTagSummary::setParentDigest(const QString &parent_digest) {
    m_parent_digest = parent_digest;
    m_parent_digest_isSet = true;
}

bool OAIAnchoreImageTagSummary::is_parent_digest_Set() const{
    return m_parent_digest_isSet;
}

bool OAIAnchoreImageTagSummary::is_parent_digest_Valid() const{
    return m_parent_digest_isValid;
}

qint32 OAIAnchoreImageTagSummary::getTagDetectedAt() const {
    return m_tag_detected_at;
}
void OAIAnchoreImageTagSummary::setTagDetectedAt(const qint32 &tag_detected_at) {
    m_tag_detected_at = tag_detected_at;
    m_tag_detected_at_isSet = true;
}

bool OAIAnchoreImageTagSummary::is_tag_detected_at_Set() const{
    return m_tag_detected_at_isSet;
}

bool OAIAnchoreImageTagSummary::is_tag_detected_at_Valid() const{
    return m_tag_detected_at_isValid;
}

bool OAIAnchoreImageTagSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analyzed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulltag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_detected_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnchoreImageTagSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
