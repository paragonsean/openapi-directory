/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeedMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeedMetadata::OAIFeedMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeedMetadata::OAIFeedMetadata() {
    this->initializeModel();
}

OAIFeedMetadata::~OAIFeedMetadata() {}

void OAIFeedMetadata::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_last_full_sync_isSet = false;
    m_last_full_sync_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIFeedMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeedMetadata::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_last_full_sync_isValid = ::OpenAPI::fromJsonValue(m_last_full_sync, json[QString("last_full_sync")]);
    m_last_full_sync_isSet = !json[QString("last_full_sync")].isNull() && m_last_full_sync_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIFeedMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeedMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_last_full_sync_isSet) {
        obj.insert(QString("last_full_sync"), ::OpenAPI::toJsonValue(m_last_full_sync));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QDateTime OAIFeedMetadata::getCreatedAt() const {
    return m_created_at;
}
void OAIFeedMetadata::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIFeedMetadata::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIFeedMetadata::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<OAIFeedGroupMetadata> OAIFeedMetadata::getGroups() const {
    return m_groups;
}
void OAIFeedMetadata::setGroups(const QList<OAIFeedGroupMetadata> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIFeedMetadata::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIFeedMetadata::is_groups_Valid() const{
    return m_groups_isValid;
}

QDateTime OAIFeedMetadata::getLastFullSync() const {
    return m_last_full_sync;
}
void OAIFeedMetadata::setLastFullSync(const QDateTime &last_full_sync) {
    m_last_full_sync = last_full_sync;
    m_last_full_sync_isSet = true;
}

bool OAIFeedMetadata::is_last_full_sync_Set() const{
    return m_last_full_sync_isSet;
}

bool OAIFeedMetadata::is_last_full_sync_Valid() const{
    return m_last_full_sync_isValid;
}

QString OAIFeedMetadata::getName() const {
    return m_name;
}
void OAIFeedMetadata::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFeedMetadata::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFeedMetadata::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIFeedMetadata::getUpdatedAt() const {
    return m_updated_at;
}
void OAIFeedMetadata::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIFeedMetadata::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIFeedMetadata::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIFeedMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_full_sync_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeedMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
