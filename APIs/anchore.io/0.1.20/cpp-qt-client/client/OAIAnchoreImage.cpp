/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnchoreImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnchoreImage::OAIAnchoreImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnchoreImage::OAIAnchoreImage() {
    this->initializeModel();
}

OAIAnchoreImage::~OAIAnchoreImage() {}

void OAIAnchoreImage::initializeModel() {

    m_analysis_status_isSet = false;
    m_analysis_status_isValid = false;

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_image_digest_isSet = false;
    m_image_digest_isValid = false;

    m_image_content_isSet = false;
    m_image_content_isValid = false;

    m_image_detail_isSet = false;
    m_image_detail_isValid = false;

    m_image_status_isSet = false;
    m_image_status_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_record_version_isSet = false;
    m_record_version_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIAnchoreImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnchoreImage::fromJsonObject(QJsonObject json) {

    m_analysis_status_isValid = ::OpenAPI::fromJsonValue(m_analysis_status, json[QString("analysis_status")]);
    m_analysis_status_isSet = !json[QString("analysis_status")].isNull() && m_analysis_status_isValid;

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_image_digest_isValid = ::OpenAPI::fromJsonValue(m_image_digest, json[QString("imageDigest")]);
    m_image_digest_isSet = !json[QString("imageDigest")].isNull() && m_image_digest_isValid;

    m_image_content_isValid = ::OpenAPI::fromJsonValue(m_image_content, json[QString("image_content")]);
    m_image_content_isSet = !json[QString("image_content")].isNull() && m_image_content_isValid;

    m_image_detail_isValid = ::OpenAPI::fromJsonValue(m_image_detail, json[QString("image_detail")]);
    m_image_detail_isSet = !json[QString("image_detail")].isNull() && m_image_detail_isValid;

    m_image_status_isValid = ::OpenAPI::fromJsonValue(m_image_status, json[QString("image_status")]);
    m_image_status_isSet = !json[QString("image_status")].isNull() && m_image_status_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_record_version_isValid = ::OpenAPI::fromJsonValue(m_record_version, json[QString("record_version")]);
    m_record_version_isSet = !json[QString("record_version")].isNull() && m_record_version_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIAnchoreImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnchoreImage::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_status_isSet) {
        obj.insert(QString("analysis_status"), ::OpenAPI::toJsonValue(m_analysis_status));
    }
    if (m_annotations_isSet) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_image_digest_isSet) {
        obj.insert(QString("imageDigest"), ::OpenAPI::toJsonValue(m_image_digest));
    }
    if (m_image_content_isSet) {
        obj.insert(QString("image_content"), ::OpenAPI::toJsonValue(m_image_content));
    }
    if (m_image_detail.size() > 0) {
        obj.insert(QString("image_detail"), ::OpenAPI::toJsonValue(m_image_detail));
    }
    if (m_image_status_isSet) {
        obj.insert(QString("image_status"), ::OpenAPI::toJsonValue(m_image_status));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_record_version_isSet) {
        obj.insert(QString("record_version"), ::OpenAPI::toJsonValue(m_record_version));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIAnchoreImage::getAnalysisStatus() const {
    return m_analysis_status;
}
void OAIAnchoreImage::setAnalysisStatus(const QString &analysis_status) {
    m_analysis_status = analysis_status;
    m_analysis_status_isSet = true;
}

bool OAIAnchoreImage::is_analysis_status_Set() const{
    return m_analysis_status_isSet;
}

bool OAIAnchoreImage::is_analysis_status_Valid() const{
    return m_analysis_status_isValid;
}

OAIObject OAIAnchoreImage::getAnnotations() const {
    return m_annotations;
}
void OAIAnchoreImage::setAnnotations(const OAIObject &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIAnchoreImage::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIAnchoreImage::is_annotations_Valid() const{
    return m_annotations_isValid;
}

QDateTime OAIAnchoreImage::getCreatedAt() const {
    return m_created_at;
}
void OAIAnchoreImage::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAnchoreImage::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAnchoreImage::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIAnchoreImage::getImageDigest() const {
    return m_image_digest;
}
void OAIAnchoreImage::setImageDigest(const QString &image_digest) {
    m_image_digest = image_digest;
    m_image_digest_isSet = true;
}

bool OAIAnchoreImage::is_image_digest_Set() const{
    return m_image_digest_isSet;
}

bool OAIAnchoreImage::is_image_digest_Valid() const{
    return m_image_digest_isValid;
}

OAIObject OAIAnchoreImage::getImageContent() const {
    return m_image_content;
}
void OAIAnchoreImage::setImageContent(const OAIObject &image_content) {
    m_image_content = image_content;
    m_image_content_isSet = true;
}

bool OAIAnchoreImage::is_image_content_Set() const{
    return m_image_content_isSet;
}

bool OAIAnchoreImage::is_image_content_Valid() const{
    return m_image_content_isValid;
}

QList<OAIImageDetail> OAIAnchoreImage::getImageDetail() const {
    return m_image_detail;
}
void OAIAnchoreImage::setImageDetail(const QList<OAIImageDetail> &image_detail) {
    m_image_detail = image_detail;
    m_image_detail_isSet = true;
}

bool OAIAnchoreImage::is_image_detail_Set() const{
    return m_image_detail_isSet;
}

bool OAIAnchoreImage::is_image_detail_Valid() const{
    return m_image_detail_isValid;
}

QString OAIAnchoreImage::getImageStatus() const {
    return m_image_status;
}
void OAIAnchoreImage::setImageStatus(const QString &image_status) {
    m_image_status = image_status;
    m_image_status_isSet = true;
}

bool OAIAnchoreImage::is_image_status_Set() const{
    return m_image_status_isSet;
}

bool OAIAnchoreImage::is_image_status_Valid() const{
    return m_image_status_isValid;
}

QDateTime OAIAnchoreImage::getLastUpdated() const {
    return m_last_updated;
}
void OAIAnchoreImage::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIAnchoreImage::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIAnchoreImage::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIAnchoreImage::getRecordVersion() const {
    return m_record_version;
}
void OAIAnchoreImage::setRecordVersion(const QString &record_version) {
    m_record_version = record_version;
    m_record_version_isSet = true;
}

bool OAIAnchoreImage::is_record_version_Set() const{
    return m_record_version_isSet;
}

bool OAIAnchoreImage::is_record_version_Valid() const{
    return m_record_version_isValid;
}

QString OAIAnchoreImage::getUserId() const {
    return m_user_id;
}
void OAIAnchoreImage::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAnchoreImage::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAnchoreImage::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIAnchoreImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_detail.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnchoreImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
