/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportSource::OAIImportSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportSource::OAIImportSource() {
    this->initializeModel();
}

OAIImportSource::~OAIImportSource() {}

void OAIImportSource::initializeModel() {

    m_target_isSet = false;
    m_target_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIImportSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportSource::fromJsonObject(QJsonObject json) {

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIImportSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportSource::asJsonObject() const {
    QJsonObject obj;
    if (m_target.size() > 0) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIImportSource::getTarget() const {
    return m_target;
}
void OAIImportSource::setTarget(const QMap<QString, QJsonValue> &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIImportSource::is_target_Set() const{
    return m_target_isSet;
}

bool OAIImportSource::is_target_Valid() const{
    return m_target_isValid;
}

QString OAIImportSource::getType() const {
    return m_type;
}
void OAIImportSource::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIImportSource::is_type_Set() const{
    return m_type_isSet;
}

bool OAIImportSource::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIImportSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
