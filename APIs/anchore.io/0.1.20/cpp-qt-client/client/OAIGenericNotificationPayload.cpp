/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenericNotificationPayload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenericNotificationPayload::OAIGenericNotificationPayload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenericNotificationPayload::OAIGenericNotificationPayload() {
    this->initializeModel();
}

OAIGenericNotificationPayload::~OAIGenericNotificationPayload() {}

void OAIGenericNotificationPayload::initializeModel() {

    m_notification_id_isSet = false;
    m_notification_id_isValid = false;

    m_subscription_key_isSet = false;
    m_subscription_key_isValid = false;

    m_subscription_type_isSet = false;
    m_subscription_type_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIGenericNotificationPayload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenericNotificationPayload::fromJsonObject(QJsonObject json) {

    m_notification_id_isValid = ::OpenAPI::fromJsonValue(m_notification_id, json[QString("notificationId")]);
    m_notification_id_isSet = !json[QString("notificationId")].isNull() && m_notification_id_isValid;

    m_subscription_key_isValid = ::OpenAPI::fromJsonValue(m_subscription_key, json[QString("subscription_key")]);
    m_subscription_key_isSet = !json[QString("subscription_key")].isNull() && m_subscription_key_isValid;

    m_subscription_type_isValid = ::OpenAPI::fromJsonValue(m_subscription_type, json[QString("subscription_type")]);
    m_subscription_type_isSet = !json[QString("subscription_type")].isNull() && m_subscription_type_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIGenericNotificationPayload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenericNotificationPayload::asJsonObject() const {
    QJsonObject obj;
    if (m_notification_id_isSet) {
        obj.insert(QString("notificationId"), ::OpenAPI::toJsonValue(m_notification_id));
    }
    if (m_subscription_key_isSet) {
        obj.insert(QString("subscription_key"), ::OpenAPI::toJsonValue(m_subscription_key));
    }
    if (m_subscription_type_isSet) {
        obj.insert(QString("subscription_type"), ::OpenAPI::toJsonValue(m_subscription_type));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIGenericNotificationPayload::getNotificationId() const {
    return m_notification_id;
}
void OAIGenericNotificationPayload::setNotificationId(const QString &notification_id) {
    m_notification_id = notification_id;
    m_notification_id_isSet = true;
}

bool OAIGenericNotificationPayload::is_notification_id_Set() const{
    return m_notification_id_isSet;
}

bool OAIGenericNotificationPayload::is_notification_id_Valid() const{
    return m_notification_id_isValid;
}

QString OAIGenericNotificationPayload::getSubscriptionKey() const {
    return m_subscription_key;
}
void OAIGenericNotificationPayload::setSubscriptionKey(const QString &subscription_key) {
    m_subscription_key = subscription_key;
    m_subscription_key_isSet = true;
}

bool OAIGenericNotificationPayload::is_subscription_key_Set() const{
    return m_subscription_key_isSet;
}

bool OAIGenericNotificationPayload::is_subscription_key_Valid() const{
    return m_subscription_key_isValid;
}

QString OAIGenericNotificationPayload::getSubscriptionType() const {
    return m_subscription_type;
}
void OAIGenericNotificationPayload::setSubscriptionType(const QString &subscription_type) {
    m_subscription_type = subscription_type;
    m_subscription_type_isSet = true;
}

bool OAIGenericNotificationPayload::is_subscription_type_Set() const{
    return m_subscription_type_isSet;
}

bool OAIGenericNotificationPayload::is_subscription_type_Valid() const{
    return m_subscription_type_isValid;
}

QString OAIGenericNotificationPayload::getUserId() const {
    return m_user_id;
}
void OAIGenericNotificationPayload::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIGenericNotificationPayload::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIGenericNotificationPayload::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIGenericNotificationPayload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_notification_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenericNotificationPayload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
