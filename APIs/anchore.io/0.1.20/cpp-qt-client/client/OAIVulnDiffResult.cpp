/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVulnDiffResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVulnDiffResult::OAIVulnDiffResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVulnDiffResult::OAIVulnDiffResult() {
    this->initializeModel();
}

OAIVulnDiffResult::~OAIVulnDiffResult() {}

void OAIVulnDiffResult::initializeModel() {

    m_added_isSet = false;
    m_added_isValid = false;

    m_removed_isSet = false;
    m_removed_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIVulnDiffResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVulnDiffResult::fromJsonObject(QJsonObject json) {

    m_added_isValid = ::OpenAPI::fromJsonValue(m_added, json[QString("added")]);
    m_added_isSet = !json[QString("added")].isNull() && m_added_isValid;

    m_removed_isValid = ::OpenAPI::fromJsonValue(m_removed, json[QString("removed")]);
    m_removed_isSet = !json[QString("removed")].isNull() && m_removed_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;
}

QString OAIVulnDiffResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVulnDiffResult::asJsonObject() const {
    QJsonObject obj;
    if (m_added.size() > 0) {
        obj.insert(QString("added"), ::OpenAPI::toJsonValue(m_added));
    }
    if (m_removed.size() > 0) {
        obj.insert(QString("removed"), ::OpenAPI::toJsonValue(m_removed));
    }
    if (m_updated.size() > 0) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

QList<QJsonValue> OAIVulnDiffResult::getAdded() const {
    return m_added;
}
void OAIVulnDiffResult::setAdded(const QList<QJsonValue> &added) {
    m_added = added;
    m_added_isSet = true;
}

bool OAIVulnDiffResult::is_added_Set() const{
    return m_added_isSet;
}

bool OAIVulnDiffResult::is_added_Valid() const{
    return m_added_isValid;
}

QList<QJsonValue> OAIVulnDiffResult::getRemoved() const {
    return m_removed;
}
void OAIVulnDiffResult::setRemoved(const QList<QJsonValue> &removed) {
    m_removed = removed;
    m_removed_isSet = true;
}

bool OAIVulnDiffResult::is_removed_Set() const{
    return m_removed_isSet;
}

bool OAIVulnDiffResult::is_removed_Valid() const{
    return m_removed_isValid;
}

QList<QJsonValue> OAIVulnDiffResult::getUpdated() const {
    return m_updated;
}
void OAIVulnDiffResult::setUpdated(const QList<QJsonValue> &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIVulnDiffResult::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIVulnDiffResult::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIVulnDiffResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_removed.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVulnDiffResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
