/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArchivedAnalysis.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArchivedAnalysis::OAIArchivedAnalysis(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArchivedAnalysis::OAIArchivedAnalysis() {
    this->initializeModel();
}

OAIArchivedAnalysis::~OAIArchivedAnalysis() {}

void OAIArchivedAnalysis::initializeModel() {

    m_analyzed_at_isSet = false;
    m_analyzed_at_isValid = false;

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_archive_size_bytes_isSet = false;
    m_archive_size_bytes_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_image_digest_isSet = false;
    m_image_digest_isValid = false;

    m_image_detail_isSet = false;
    m_image_detail_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_parent_digest_isSet = false;
    m_parent_digest_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIArchivedAnalysis::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArchivedAnalysis::fromJsonObject(QJsonObject json) {

    m_analyzed_at_isValid = ::OpenAPI::fromJsonValue(m_analyzed_at, json[QString("analyzed_at")]);
    m_analyzed_at_isSet = !json[QString("analyzed_at")].isNull() && m_analyzed_at_isValid;

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_archive_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_archive_size_bytes, json[QString("archive_size_bytes")]);
    m_archive_size_bytes_isSet = !json[QString("archive_size_bytes")].isNull() && m_archive_size_bytes_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_image_digest_isValid = ::OpenAPI::fromJsonValue(m_image_digest, json[QString("imageDigest")]);
    m_image_digest_isSet = !json[QString("imageDigest")].isNull() && m_image_digest_isValid;

    m_image_detail_isValid = ::OpenAPI::fromJsonValue(m_image_detail, json[QString("image_detail")]);
    m_image_detail_isSet = !json[QString("image_detail")].isNull() && m_image_detail_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_parent_digest_isValid = ::OpenAPI::fromJsonValue(m_parent_digest, json[QString("parentDigest")]);
    m_parent_digest_isSet = !json[QString("parentDigest")].isNull() && m_parent_digest_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIArchivedAnalysis::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArchivedAnalysis::asJsonObject() const {
    QJsonObject obj;
    if (m_analyzed_at_isSet) {
        obj.insert(QString("analyzed_at"), ::OpenAPI::toJsonValue(m_analyzed_at));
    }
    if (m_annotations_isSet) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_archive_size_bytes_isSet) {
        obj.insert(QString("archive_size_bytes"), ::OpenAPI::toJsonValue(m_archive_size_bytes));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_image_digest_isSet) {
        obj.insert(QString("imageDigest"), ::OpenAPI::toJsonValue(m_image_digest));
    }
    if (m_image_detail.size() > 0) {
        obj.insert(QString("image_detail"), ::OpenAPI::toJsonValue(m_image_detail));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_parent_digest_isSet) {
        obj.insert(QString("parentDigest"), ::OpenAPI::toJsonValue(m_parent_digest));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QDateTime OAIArchivedAnalysis::getAnalyzedAt() const {
    return m_analyzed_at;
}
void OAIArchivedAnalysis::setAnalyzedAt(const QDateTime &analyzed_at) {
    m_analyzed_at = analyzed_at;
    m_analyzed_at_isSet = true;
}

bool OAIArchivedAnalysis::is_analyzed_at_Set() const{
    return m_analyzed_at_isSet;
}

bool OAIArchivedAnalysis::is_analyzed_at_Valid() const{
    return m_analyzed_at_isValid;
}

OAIObject OAIArchivedAnalysis::getAnnotations() const {
    return m_annotations;
}
void OAIArchivedAnalysis::setAnnotations(const OAIObject &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIArchivedAnalysis::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIArchivedAnalysis::is_annotations_Valid() const{
    return m_annotations_isValid;
}

qint32 OAIArchivedAnalysis::getArchiveSizeBytes() const {
    return m_archive_size_bytes;
}
void OAIArchivedAnalysis::setArchiveSizeBytes(const qint32 &archive_size_bytes) {
    m_archive_size_bytes = archive_size_bytes;
    m_archive_size_bytes_isSet = true;
}

bool OAIArchivedAnalysis::is_archive_size_bytes_Set() const{
    return m_archive_size_bytes_isSet;
}

bool OAIArchivedAnalysis::is_archive_size_bytes_Valid() const{
    return m_archive_size_bytes_isValid;
}

QDateTime OAIArchivedAnalysis::getCreatedAt() const {
    return m_created_at;
}
void OAIArchivedAnalysis::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIArchivedAnalysis::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIArchivedAnalysis::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIArchivedAnalysis::getImageDigest() const {
    return m_image_digest;
}
void OAIArchivedAnalysis::setImageDigest(const QString &image_digest) {
    m_image_digest = image_digest;
    m_image_digest_isSet = true;
}

bool OAIArchivedAnalysis::is_image_digest_Set() const{
    return m_image_digest_isSet;
}

bool OAIArchivedAnalysis::is_image_digest_Valid() const{
    return m_image_digest_isValid;
}

QList<OAITagEntry> OAIArchivedAnalysis::getImageDetail() const {
    return m_image_detail;
}
void OAIArchivedAnalysis::setImageDetail(const QList<OAITagEntry> &image_detail) {
    m_image_detail = image_detail;
    m_image_detail_isSet = true;
}

bool OAIArchivedAnalysis::is_image_detail_Set() const{
    return m_image_detail_isSet;
}

bool OAIArchivedAnalysis::is_image_detail_Valid() const{
    return m_image_detail_isValid;
}

QDateTime OAIArchivedAnalysis::getLastUpdated() const {
    return m_last_updated;
}
void OAIArchivedAnalysis::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIArchivedAnalysis::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIArchivedAnalysis::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIArchivedAnalysis::getParentDigest() const {
    return m_parent_digest;
}
void OAIArchivedAnalysis::setParentDigest(const QString &parent_digest) {
    m_parent_digest = parent_digest;
    m_parent_digest_isSet = true;
}

bool OAIArchivedAnalysis::is_parent_digest_Set() const{
    return m_parent_digest_isSet;
}

bool OAIArchivedAnalysis::is_parent_digest_Valid() const{
    return m_parent_digest_isValid;
}

QString OAIArchivedAnalysis::getStatus() const {
    return m_status;
}
void OAIArchivedAnalysis::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIArchivedAnalysis::is_status_Set() const{
    return m_status_isSet;
}

bool OAIArchivedAnalysis::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIArchivedAnalysis::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analyzed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_archive_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_detail.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArchivedAnalysis::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
