/**
 * Anchore Engine API Server
 * This is the Anchore Engine API. Provides the primary external API for users of the service.
 *
 * The version of the OpenAPI document: 0.1.20
 * Contact: nurmi@anchore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVendorDataObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVendorDataObject::OAIVendorDataObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVendorDataObject::OAIVendorDataObject() {
    this->initializeModel();
}

OAIVendorDataObject::~OAIVendorDataObject() {}

void OAIVendorDataObject::initializeModel() {

    m_cvss_v2_isSet = false;
    m_cvss_v2_isValid = false;

    m_cvss_v3_isSet = false;
    m_cvss_v3_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIVendorDataObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVendorDataObject::fromJsonObject(QJsonObject json) {

    m_cvss_v2_isValid = ::OpenAPI::fromJsonValue(m_cvss_v2, json[QString("cvss_v2")]);
    m_cvss_v2_isSet = !json[QString("cvss_v2")].isNull() && m_cvss_v2_isValid;

    m_cvss_v3_isValid = ::OpenAPI::fromJsonValue(m_cvss_v3, json[QString("cvss_v3")]);
    m_cvss_v3_isSet = !json[QString("cvss_v3")].isNull() && m_cvss_v3_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIVendorDataObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVendorDataObject::asJsonObject() const {
    QJsonObject obj;
    if (m_cvss_v2.isSet()) {
        obj.insert(QString("cvss_v2"), ::OpenAPI::toJsonValue(m_cvss_v2));
    }
    if (m_cvss_v3.isSet()) {
        obj.insert(QString("cvss_v3"), ::OpenAPI::toJsonValue(m_cvss_v3));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

OAICVSSV2Scores OAIVendorDataObject::getCvssV2() const {
    return m_cvss_v2;
}
void OAIVendorDataObject::setCvssV2(const OAICVSSV2Scores &cvss_v2) {
    m_cvss_v2 = cvss_v2;
    m_cvss_v2_isSet = true;
}

bool OAIVendorDataObject::is_cvss_v2_Set() const{
    return m_cvss_v2_isSet;
}

bool OAIVendorDataObject::is_cvss_v2_Valid() const{
    return m_cvss_v2_isValid;
}

OAICVSSV3Scores OAIVendorDataObject::getCvssV3() const {
    return m_cvss_v3;
}
void OAIVendorDataObject::setCvssV3(const OAICVSSV3Scores &cvss_v3) {
    m_cvss_v3 = cvss_v3;
    m_cvss_v3_isSet = true;
}

bool OAIVendorDataObject::is_cvss_v3_Set() const{
    return m_cvss_v3_isSet;
}

bool OAIVendorDataObject::is_cvss_v3_Valid() const{
    return m_cvss_v3_isValid;
}

QString OAIVendorDataObject::getId() const {
    return m_id;
}
void OAIVendorDataObject::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVendorDataObject::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVendorDataObject::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIVendorDataObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cvss_v2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cvss_v3.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVendorDataObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
