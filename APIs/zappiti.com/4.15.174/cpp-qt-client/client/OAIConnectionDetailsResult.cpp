/**
 * Zappiti Player API
 * Move your app forward with the Zappiti Player API. Use http://your-player-ip:8990/ as base URL for your requests.
 *
 * The version of the OpenAPI document: 4.15.174
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionDetailsResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionDetailsResult::OAIConnectionDetailsResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionDetailsResult::OAIConnectionDetailsResult() {
    this->initializeModel();
}

OAIConnectionDetailsResult::~OAIConnectionDetailsResult() {}

void OAIConnectionDetailsResult::initializeModel() {

    m_auth_key_isSet = false;
    m_auth_key_isValid = false;

    m_collection_isSet = false;
    m_collection_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_server_ip_isSet = false;
    m_server_ip_isValid = false;

    m_server_port_isSet = false;
    m_server_port_isValid = false;
}

void OAIConnectionDetailsResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectionDetailsResult::fromJsonObject(QJsonObject json) {

    m_auth_key_isValid = ::OpenAPI::fromJsonValue(m_auth_key, json[QString("AuthKey")]);
    m_auth_key_isSet = !json[QString("AuthKey")].isNull() && m_auth_key_isValid;

    m_collection_isValid = ::OpenAPI::fromJsonValue(m_collection, json[QString("Collection")]);
    m_collection_isSet = !json[QString("Collection")].isNull() && m_collection_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("Email")]);
    m_email_isSet = !json[QString("Email")].isNull() && m_email_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("ErrorCode")]);
    m_error_code_isSet = !json[QString("ErrorCode")].isNull() && m_error_code_isValid;

    m_server_ip_isValid = ::OpenAPI::fromJsonValue(m_server_ip, json[QString("ServerIp")]);
    m_server_ip_isSet = !json[QString("ServerIp")].isNull() && m_server_ip_isValid;

    m_server_port_isValid = ::OpenAPI::fromJsonValue(m_server_port, json[QString("ServerPort")]);
    m_server_port_isSet = !json[QString("ServerPort")].isNull() && m_server_port_isValid;
}

QString OAIConnectionDetailsResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectionDetailsResult::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_key_isSet) {
        obj.insert(QString("AuthKey"), ::OpenAPI::toJsonValue(m_auth_key));
    }
    if (m_collection_isSet) {
        obj.insert(QString("Collection"), ::OpenAPI::toJsonValue(m_collection));
    }
    if (m_email_isSet) {
        obj.insert(QString("Email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_error_code.isSet()) {
        obj.insert(QString("ErrorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_server_ip_isSet) {
        obj.insert(QString("ServerIp"), ::OpenAPI::toJsonValue(m_server_ip));
    }
    if (m_server_port_isSet) {
        obj.insert(QString("ServerPort"), ::OpenAPI::toJsonValue(m_server_port));
    }
    return obj;
}

QString OAIConnectionDetailsResult::getAuthKey() const {
    return m_auth_key;
}
void OAIConnectionDetailsResult::setAuthKey(const QString &auth_key) {
    m_auth_key = auth_key;
    m_auth_key_isSet = true;
}

bool OAIConnectionDetailsResult::is_auth_key_Set() const{
    return m_auth_key_isSet;
}

bool OAIConnectionDetailsResult::is_auth_key_Valid() const{
    return m_auth_key_isValid;
}

QString OAIConnectionDetailsResult::getCollection() const {
    return m_collection;
}
void OAIConnectionDetailsResult::setCollection(const QString &collection) {
    m_collection = collection;
    m_collection_isSet = true;
}

bool OAIConnectionDetailsResult::is_collection_Set() const{
    return m_collection_isSet;
}

bool OAIConnectionDetailsResult::is_collection_Valid() const{
    return m_collection_isValid;
}

QString OAIConnectionDetailsResult::getEmail() const {
    return m_email;
}
void OAIConnectionDetailsResult::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIConnectionDetailsResult::is_email_Set() const{
    return m_email_isSet;
}

bool OAIConnectionDetailsResult::is_email_Valid() const{
    return m_email_isValid;
}

OAIErrorCode OAIConnectionDetailsResult::getErrorCode() const {
    return m_error_code;
}
void OAIConnectionDetailsResult::setErrorCode(const OAIErrorCode &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIConnectionDetailsResult::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIConnectionDetailsResult::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIConnectionDetailsResult::getServerIp() const {
    return m_server_ip;
}
void OAIConnectionDetailsResult::setServerIp(const QString &server_ip) {
    m_server_ip = server_ip;
    m_server_ip_isSet = true;
}

bool OAIConnectionDetailsResult::is_server_ip_Set() const{
    return m_server_ip_isSet;
}

bool OAIConnectionDetailsResult::is_server_ip_Valid() const{
    return m_server_ip_isValid;
}

qint32 OAIConnectionDetailsResult::getServerPort() const {
    return m_server_port;
}
void OAIConnectionDetailsResult::setServerPort(const qint32 &server_port) {
    m_server_port = server_port;
    m_server_port_isSet = true;
}

bool OAIConnectionDetailsResult::is_server_port_Set() const{
    return m_server_port_isSet;
}

bool OAIConnectionDetailsResult::is_server_port_Valid() const{
    return m_server_port_isValid;
}

bool OAIConnectionDetailsResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_port_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectionDetailsResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
