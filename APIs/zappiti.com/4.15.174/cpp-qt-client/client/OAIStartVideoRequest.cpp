/**
 * Zappiti Player API
 * Move your app forward with the Zappiti Player API. Use http://your-player-ip:8990/ as base URL for your requests.
 *
 * The version of the OpenAPI document: 4.15.174
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartVideoRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartVideoRequest::OAIStartVideoRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartVideoRequest::OAIStartVideoRequest() {
    this->initializeModel();
}

OAIStartVideoRequest::~OAIStartVideoRequest() {}

void OAIStartVideoRequest::initializeModel() {

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_auth_key_isSet = false;
    m_auth_key_isValid = false;

    m_collection_isSet = false;
    m_collection_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_media_id_isSet = false;
    m_media_id_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;
}

void OAIStartVideoRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartVideoRequest::fromJsonObject(QJsonObject json) {

    m_api_key_isValid = ::OpenAPI::fromJsonValue(m_api_key, json[QString("ApiKey")]);
    m_api_key_isSet = !json[QString("ApiKey")].isNull() && m_api_key_isValid;

    m_auth_key_isValid = ::OpenAPI::fromJsonValue(m_auth_key, json[QString("AuthKey")]);
    m_auth_key_isSet = !json[QString("AuthKey")].isNull() && m_auth_key_isValid;

    m_collection_isValid = ::OpenAPI::fromJsonValue(m_collection, json[QString("Collection")]);
    m_collection_isSet = !json[QString("Collection")].isNull() && m_collection_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("Ip")]);
    m_ip_isSet = !json[QString("Ip")].isNull() && m_ip_isValid;

    m_media_id_isValid = ::OpenAPI::fromJsonValue(m_media_id, json[QString("MediaId")]);
    m_media_id_isSet = !json[QString("MediaId")].isNull() && m_media_id_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;
}

QString OAIStartVideoRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartVideoRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_api_key_isSet) {
        obj.insert(QString("ApiKey"), ::OpenAPI::toJsonValue(m_api_key));
    }
    if (m_auth_key_isSet) {
        obj.insert(QString("AuthKey"), ::OpenAPI::toJsonValue(m_auth_key));
    }
    if (m_collection_isSet) {
        obj.insert(QString("Collection"), ::OpenAPI::toJsonValue(m_collection));
    }
    if (m_ip_isSet) {
        obj.insert(QString("Ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_media_id_isSet) {
        obj.insert(QString("MediaId"), ::OpenAPI::toJsonValue(m_media_id));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    return obj;
}

QString OAIStartVideoRequest::getApiKey() const {
    return m_api_key;
}
void OAIStartVideoRequest::setApiKey(const QString &api_key) {
    m_api_key = api_key;
    m_api_key_isSet = true;
}

bool OAIStartVideoRequest::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAIStartVideoRequest::is_api_key_Valid() const{
    return m_api_key_isValid;
}

QString OAIStartVideoRequest::getAuthKey() const {
    return m_auth_key;
}
void OAIStartVideoRequest::setAuthKey(const QString &auth_key) {
    m_auth_key = auth_key;
    m_auth_key_isSet = true;
}

bool OAIStartVideoRequest::is_auth_key_Set() const{
    return m_auth_key_isSet;
}

bool OAIStartVideoRequest::is_auth_key_Valid() const{
    return m_auth_key_isValid;
}

QString OAIStartVideoRequest::getCollection() const {
    return m_collection;
}
void OAIStartVideoRequest::setCollection(const QString &collection) {
    m_collection = collection;
    m_collection_isSet = true;
}

bool OAIStartVideoRequest::is_collection_Set() const{
    return m_collection_isSet;
}

bool OAIStartVideoRequest::is_collection_Valid() const{
    return m_collection_isValid;
}

QString OAIStartVideoRequest::getIp() const {
    return m_ip;
}
void OAIStartVideoRequest::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIStartVideoRequest::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIStartVideoRequest::is_ip_Valid() const{
    return m_ip_isValid;
}

QString OAIStartVideoRequest::getMediaId() const {
    return m_media_id;
}
void OAIStartVideoRequest::setMediaId(const QString &media_id) {
    m_media_id = media_id;
    m_media_id_isSet = true;
}

bool OAIStartVideoRequest::is_media_id_Set() const{
    return m_media_id_isSet;
}

bool OAIStartVideoRequest::is_media_id_Valid() const{
    return m_media_id_isValid;
}

qint32 OAIStartVideoRequest::getPort() const {
    return m_port;
}
void OAIStartVideoRequest::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIStartVideoRequest::is_port_Set() const{
    return m_port_isSet;
}

bool OAIStartVideoRequest::is_port_Valid() const{
    return m_port_isValid;
}

bool OAIStartVideoRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartVideoRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
