/**
 * Zappiti Player API
 * Move your app forward with the Zappiti Player API. Use http://your-player-ip:8990/ as base URL for your requests.
 *
 * The version of the OpenAPI document: 4.15.174
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILastMediaResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILastMediaResult::OAILastMediaResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILastMediaResult::OAILastMediaResult() {
    this->initializeModel();
}

OAILastMediaResult::~OAILastMediaResult() {}

void OAILastMediaResult::initializeModel() {

    m_actors_isSet = false;
    m_actors_isValid = false;

    m_background_url_isSet = false;
    m_background_url_isValid = false;

    m_directors_isSet = false;
    m_directors_isValid = false;

    m_episode_isSet = false;
    m_episode_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_poster_url_isSet = false;
    m_poster_url_isValid = false;

    m_runtime_isSet = false;
    m_runtime_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_synopsis_isSet = false;
    m_synopsis_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_tv_show_name_isSet = false;
    m_tv_show_name_isValid = false;
}

void OAILastMediaResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILastMediaResult::fromJsonObject(QJsonObject json) {

    m_actors_isValid = ::OpenAPI::fromJsonValue(m_actors, json[QString("Actors")]);
    m_actors_isSet = !json[QString("Actors")].isNull() && m_actors_isValid;

    m_background_url_isValid = ::OpenAPI::fromJsonValue(m_background_url, json[QString("BackgroundUrl")]);
    m_background_url_isSet = !json[QString("BackgroundUrl")].isNull() && m_background_url_isValid;

    m_directors_isValid = ::OpenAPI::fromJsonValue(m_directors, json[QString("Directors")]);
    m_directors_isSet = !json[QString("Directors")].isNull() && m_directors_isValid;

    m_episode_isValid = ::OpenAPI::fromJsonValue(m_episode, json[QString("Episode")]);
    m_episode_isSet = !json[QString("Episode")].isNull() && m_episode_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("ErrorCode")]);
    m_error_code_isSet = !json[QString("ErrorCode")].isNull() && m_error_code_isValid;

    m_poster_url_isValid = ::OpenAPI::fromJsonValue(m_poster_url, json[QString("PosterUrl")]);
    m_poster_url_isSet = !json[QString("PosterUrl")].isNull() && m_poster_url_isValid;

    m_runtime_isValid = ::OpenAPI::fromJsonValue(m_runtime, json[QString("Runtime")]);
    m_runtime_isSet = !json[QString("Runtime")].isNull() && m_runtime_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("Season")]);
    m_season_isSet = !json[QString("Season")].isNull() && m_season_isValid;

    m_synopsis_isValid = ::OpenAPI::fromJsonValue(m_synopsis, json[QString("Synopsis")]);
    m_synopsis_isSet = !json[QString("Synopsis")].isNull() && m_synopsis_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_tv_show_name_isValid = ::OpenAPI::fromJsonValue(m_tv_show_name, json[QString("TvShowName")]);
    m_tv_show_name_isSet = !json[QString("TvShowName")].isNull() && m_tv_show_name_isValid;
}

QString OAILastMediaResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILastMediaResult::asJsonObject() const {
    QJsonObject obj;
    if (m_actors.size() > 0) {
        obj.insert(QString("Actors"), ::OpenAPI::toJsonValue(m_actors));
    }
    if (m_background_url_isSet) {
        obj.insert(QString("BackgroundUrl"), ::OpenAPI::toJsonValue(m_background_url));
    }
    if (m_directors.size() > 0) {
        obj.insert(QString("Directors"), ::OpenAPI::toJsonValue(m_directors));
    }
    if (m_episode_isSet) {
        obj.insert(QString("Episode"), ::OpenAPI::toJsonValue(m_episode));
    }
    if (m_error_code.isSet()) {
        obj.insert(QString("ErrorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_poster_url_isSet) {
        obj.insert(QString("PosterUrl"), ::OpenAPI::toJsonValue(m_poster_url));
    }
    if (m_runtime_isSet) {
        obj.insert(QString("Runtime"), ::OpenAPI::toJsonValue(m_runtime));
    }
    if (m_season_isSet) {
        obj.insert(QString("Season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_synopsis_isSet) {
        obj.insert(QString("Synopsis"), ::OpenAPI::toJsonValue(m_synopsis));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_tv_show_name_isSet) {
        obj.insert(QString("TvShowName"), ::OpenAPI::toJsonValue(m_tv_show_name));
    }
    return obj;
}

QList<QString> OAILastMediaResult::getActors() const {
    return m_actors;
}
void OAILastMediaResult::setActors(const QList<QString> &actors) {
    m_actors = actors;
    m_actors_isSet = true;
}

bool OAILastMediaResult::is_actors_Set() const{
    return m_actors_isSet;
}

bool OAILastMediaResult::is_actors_Valid() const{
    return m_actors_isValid;
}

QString OAILastMediaResult::getBackgroundUrl() const {
    return m_background_url;
}
void OAILastMediaResult::setBackgroundUrl(const QString &background_url) {
    m_background_url = background_url;
    m_background_url_isSet = true;
}

bool OAILastMediaResult::is_background_url_Set() const{
    return m_background_url_isSet;
}

bool OAILastMediaResult::is_background_url_Valid() const{
    return m_background_url_isValid;
}

QList<QString> OAILastMediaResult::getDirectors() const {
    return m_directors;
}
void OAILastMediaResult::setDirectors(const QList<QString> &directors) {
    m_directors = directors;
    m_directors_isSet = true;
}

bool OAILastMediaResult::is_directors_Set() const{
    return m_directors_isSet;
}

bool OAILastMediaResult::is_directors_Valid() const{
    return m_directors_isValid;
}

qint32 OAILastMediaResult::getEpisode() const {
    return m_episode;
}
void OAILastMediaResult::setEpisode(const qint32 &episode) {
    m_episode = episode;
    m_episode_isSet = true;
}

bool OAILastMediaResult::is_episode_Set() const{
    return m_episode_isSet;
}

bool OAILastMediaResult::is_episode_Valid() const{
    return m_episode_isValid;
}

OAIErrorCode OAILastMediaResult::getErrorCode() const {
    return m_error_code;
}
void OAILastMediaResult::setErrorCode(const OAIErrorCode &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAILastMediaResult::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAILastMediaResult::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAILastMediaResult::getPosterUrl() const {
    return m_poster_url;
}
void OAILastMediaResult::setPosterUrl(const QString &poster_url) {
    m_poster_url = poster_url;
    m_poster_url_isSet = true;
}

bool OAILastMediaResult::is_poster_url_Set() const{
    return m_poster_url_isSet;
}

bool OAILastMediaResult::is_poster_url_Valid() const{
    return m_poster_url_isValid;
}

qint32 OAILastMediaResult::getRuntime() const {
    return m_runtime;
}
void OAILastMediaResult::setRuntime(const qint32 &runtime) {
    m_runtime = runtime;
    m_runtime_isSet = true;
}

bool OAILastMediaResult::is_runtime_Set() const{
    return m_runtime_isSet;
}

bool OAILastMediaResult::is_runtime_Valid() const{
    return m_runtime_isValid;
}

qint32 OAILastMediaResult::getSeason() const {
    return m_season;
}
void OAILastMediaResult::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAILastMediaResult::is_season_Set() const{
    return m_season_isSet;
}

bool OAILastMediaResult::is_season_Valid() const{
    return m_season_isValid;
}

QString OAILastMediaResult::getSynopsis() const {
    return m_synopsis;
}
void OAILastMediaResult::setSynopsis(const QString &synopsis) {
    m_synopsis = synopsis;
    m_synopsis_isSet = true;
}

bool OAILastMediaResult::is_synopsis_Set() const{
    return m_synopsis_isSet;
}

bool OAILastMediaResult::is_synopsis_Valid() const{
    return m_synopsis_isValid;
}

QString OAILastMediaResult::getTitle() const {
    return m_title;
}
void OAILastMediaResult::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAILastMediaResult::is_title_Set() const{
    return m_title_isSet;
}

bool OAILastMediaResult::is_title_Valid() const{
    return m_title_isValid;
}

QString OAILastMediaResult::getTvShowName() const {
    return m_tv_show_name;
}
void OAILastMediaResult::setTvShowName(const QString &tv_show_name) {
    m_tv_show_name = tv_show_name;
    m_tv_show_name_isSet = true;
}

bool OAILastMediaResult::is_tv_show_name_Set() const{
    return m_tv_show_name_isSet;
}

bool OAILastMediaResult::is_tv_show_name_Valid() const{
    return m_tv_show_name_isValid;
}

bool OAILastMediaResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_episode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_poster_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synopsis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tv_show_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILastMediaResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
