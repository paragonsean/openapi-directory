/**
 * Zappiti Player API
 * Move your app forward with the Zappiti Player API. Use http://your-player-ip:8990/ as base URL for your requests.
 *
 * The version of the OpenAPI document: 4.15.174
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorCode::OAIErrorCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorCode::OAIErrorCode() {
    this->initializeModel();
}

OAIErrorCode::~OAIErrorCode() {}

void OAIErrorCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIErrorCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIErrorCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("None", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Exist", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::EXIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NotInstalled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::NOTINSTALLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NotRunning", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::NOTRUNNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Running", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::RUNNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FailToStart", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::FAILTOSTART;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BadApiKey", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::BADAPIKEY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIErrorCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIErrorCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIErrorCode::NONE:
            val = "None";
            break;
        case eOAIErrorCode::FAILED:
            val = "Failed";
            break;
        case eOAIErrorCode::EXIST:
            val = "Exist";
            break;
        case eOAIErrorCode::NOTINSTALLED:
            val = "NotInstalled";
            break;
        case eOAIErrorCode::NOTRUNNING:
            val = "NotRunning";
            break;
        case eOAIErrorCode::RUNNING:
            val = "Running";
            break;
        case eOAIErrorCode::FAILTOSTART:
            val = "FailToStart";
            break;
        case eOAIErrorCode::BADAPIKEY:
            val = "BadApiKey";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIErrorCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIErrorCode::eOAIErrorCode OAIErrorCode::getValue() const {
    return m_value;
}

void OAIErrorCode::setValue(const OAIErrorCode::eOAIErrorCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIErrorCode::isSet() const {
    
    return m_value_isSet;
}

bool OAIErrorCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
