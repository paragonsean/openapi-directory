/**
 * Zappiti Player API
 * Move your app forward with the Zappiti Player API. Use http://your-player-ip:8990/ as base URL for your requests.
 *
 * The version of the OpenAPI document: 4.15.174
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorCode from './ErrorCode';

/**
 * The ConnectionDetailsResult model module.
 * @module model/ConnectionDetailsResult
 * @version 4.15.174
 */
class ConnectionDetailsResult {
    /**
     * Constructs a new <code>ConnectionDetailsResult</code>.
     * @alias module:model/ConnectionDetailsResult
     */
    constructor() { 
        
        ConnectionDetailsResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConnectionDetailsResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectionDetailsResult} obj Optional instance to populate.
     * @return {module:model/ConnectionDetailsResult} The populated <code>ConnectionDetailsResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectionDetailsResult();

            if (data.hasOwnProperty('AuthKey')) {
                obj['AuthKey'] = ApiClient.convertToType(data['AuthKey'], 'String');
            }
            if (data.hasOwnProperty('Collection')) {
                obj['Collection'] = ApiClient.convertToType(data['Collection'], 'String');
            }
            if (data.hasOwnProperty('Email')) {
                obj['Email'] = ApiClient.convertToType(data['Email'], 'String');
            }
            if (data.hasOwnProperty('ErrorCode')) {
                obj['ErrorCode'] = ErrorCode.constructFromObject(data['ErrorCode']);
            }
            if (data.hasOwnProperty('ServerIp')) {
                obj['ServerIp'] = ApiClient.convertToType(data['ServerIp'], 'String');
            }
            if (data.hasOwnProperty('ServerPort')) {
                obj['ServerPort'] = ApiClient.convertToType(data['ServerPort'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectionDetailsResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectionDetailsResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AuthKey'] && !(typeof data['AuthKey'] === 'string' || data['AuthKey'] instanceof String)) {
            throw new Error("Expected the field `AuthKey` to be a primitive type in the JSON string but got " + data['AuthKey']);
        }
        // ensure the json data is a string
        if (data['Collection'] && !(typeof data['Collection'] === 'string' || data['Collection'] instanceof String)) {
            throw new Error("Expected the field `Collection` to be a primitive type in the JSON string but got " + data['Collection']);
        }
        // ensure the json data is a string
        if (data['Email'] && !(typeof data['Email'] === 'string' || data['Email'] instanceof String)) {
            throw new Error("Expected the field `Email` to be a primitive type in the JSON string but got " + data['Email']);
        }
        // ensure the json data is a string
        if (data['ServerIp'] && !(typeof data['ServerIp'] === 'string' || data['ServerIp'] instanceof String)) {
            throw new Error("Expected the field `ServerIp` to be a primitive type in the JSON string but got " + data['ServerIp']);
        }

        return true;
    }


}



/**
 * User's Authentification key
 * @member {String} AuthKey
 */
ConnectionDetailsResult.prototype['AuthKey'] = undefined;

/**
 * User's collection id
 * @member {String} Collection
 */
ConnectionDetailsResult.prototype['Collection'] = undefined;

/**
 * User's email used for the collection
 * @member {String} Email
 */
ConnectionDetailsResult.prototype['Email'] = undefined;

/**
 * @member {module:model/ErrorCode} ErrorCode
 */
ConnectionDetailsResult.prototype['ErrorCode'] = undefined;

/**
 * Server's IP
 * @member {String} ServerIp
 */
ConnectionDetailsResult.prototype['ServerIp'] = undefined;

/**
 * Port used by the server
 * @member {Number} ServerPort
 */
ConnectionDetailsResult.prototype['ServerPort'] = undefined;






export default ConnectionDetailsResult;

