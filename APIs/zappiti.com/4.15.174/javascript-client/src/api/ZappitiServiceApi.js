/**
 * Zappiti Player API
 * Move your app forward with the Zappiti Player API. Use http://your-player-ip:8990/ as base URL for your requests.
 *
 * The version of the OpenAPI document: 4.15.174
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CheckZappitiServiceRequest from '../model/CheckZappitiServiceRequest';
import CheckZappitiServiceResult from '../model/CheckZappitiServiceResult';
import InstallZappitiServiceRequest from '../model/InstallZappitiServiceRequest';
import InstallZappitiServiceResult from '../model/InstallZappitiServiceResult';
import StartZappitiServiceRequest from '../model/StartZappitiServiceRequest';
import StartZappitiServiceResult from '../model/StartZappitiServiceResult';

/**
* ZappitiService service.
* @module api/ZappitiServiceApi
* @version 4.15.174
*/
export default class ZappitiServiceApi {

    /**
    * Constructs a new ZappitiServiceApi. 
    * @alias module:api/ZappitiServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the checkZappitiServicePost operation.
     * @callback module:api/ZappitiServiceApi~checkZappitiServicePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckZappitiServiceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if Zappiti Service app status on the player
     * ErrorCode.NotInstalled ErrorCode.NotRunning ErrorCode.Running 
     * @param {module:model/CheckZappitiServiceRequest} body 
     * @param {module:api/ZappitiServiceApi~checkZappitiServicePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckZappitiServiceResult}
     */
    checkZappitiServicePost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling checkZappitiServicePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckZappitiServiceResult;
      return this.apiClient.callApi(
        '/CheckZappitiService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the installZappitiServicePost operation.
     * @callback module:api/ZappitiServiceApi~installZappitiServicePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstallZappitiServiceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Open a popup that allow the user to install Zappiti Service, if not already installed
     * @param {module:model/InstallZappitiServiceRequest} body 
     * @param {module:api/ZappitiServiceApi~installZappitiServicePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstallZappitiServiceResult}
     */
    installZappitiServicePost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling installZappitiServicePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InstallZappitiServiceResult;
      return this.apiClient.callApi(
        '/InstallZappitiService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startZappitiServicePost operation.
     * @callback module:api/ZappitiServiceApi~startZappitiServicePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartZappitiServiceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start Zappiti Service if not started yet
     * @param {module:model/StartZappitiServiceRequest} body 
     * @param {module:api/ZappitiServiceApi~startZappitiServicePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartZappitiServiceResult}
     */
    startZappitiServicePost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling startZappitiServicePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartZappitiServiceResult;
      return this.apiClient.callApi(
        '/StartZappitiService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
