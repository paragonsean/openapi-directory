/**
 * Zappiti Player API
 * Move your app forward with the Zappiti Player API. Use http://your-player-ip:8990/ as base URL for your requests.
 *
 * The version of the OpenAPI document: 4.15.174
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConnectionDetailsRequest from '../model/ConnectionDetailsRequest';
import ConnectionDetailsResult from '../model/ConnectionDetailsResult';
import IsAliveRequest from '../model/IsAliveRequest';
import IsAliveResult from '../model/IsAliveResult';

/**
* General service.
* @module api/GeneralApi
* @version 4.15.174
*/
export default class GeneralApi {

    /**
    * Constructs a new GeneralApi. 
    * @alias module:api/GeneralApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the connectionDetailsPost operation.
     * @callback module:api/GeneralApi~connectionDetailsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionDetailsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user's login details
     * @param {module:model/ConnectionDetailsRequest} body 
     * @param {module:api/GeneralApi~connectionDetailsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionDetailsResult}
     */
    connectionDetailsPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling connectionDetailsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConnectionDetailsResult;
      return this.apiClient.callApi(
        '/ConnectionDetails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the isAlivePost operation.
     * @callback module:api/GeneralApi~isAlivePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IsAliveResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get server status
     * @param {module:model/IsAliveRequest} body 
     * @param {module:api/GeneralApi~isAlivePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IsAliveResult}
     */
    isAlivePost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling isAlivePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IsAliveResult;
      return this.apiClient.callApi(
        '/IsAlive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
