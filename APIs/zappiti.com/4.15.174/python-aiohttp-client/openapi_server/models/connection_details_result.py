# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_code import ErrorCode
from openapi_server import util


class ConnectionDetailsResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_key: str=None, collection: str=None, email: str=None, error_code: ErrorCode=None, server_ip: str=None, server_port: int=None):
        """ConnectionDetailsResult - a model defined in OpenAPI

        :param auth_key: The auth_key of this ConnectionDetailsResult.
        :param collection: The collection of this ConnectionDetailsResult.
        :param email: The email of this ConnectionDetailsResult.
        :param error_code: The error_code of this ConnectionDetailsResult.
        :param server_ip: The server_ip of this ConnectionDetailsResult.
        :param server_port: The server_port of this ConnectionDetailsResult.
        """
        self.openapi_types = {
            'auth_key': str,
            'collection': str,
            'email': str,
            'error_code': ErrorCode,
            'server_ip': str,
            'server_port': int
        }

        self.attribute_map = {
            'auth_key': 'AuthKey',
            'collection': 'Collection',
            'email': 'Email',
            'error_code': 'ErrorCode',
            'server_ip': 'ServerIp',
            'server_port': 'ServerPort'
        }

        self._auth_key = auth_key
        self._collection = collection
        self._email = email
        self._error_code = error_code
        self._server_ip = server_ip
        self._server_port = server_port

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionDetailsResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionDetailsResult of this ConnectionDetailsResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_key(self):
        """Gets the auth_key of this ConnectionDetailsResult.

        User's Authentification key

        :return: The auth_key of this ConnectionDetailsResult.
        :rtype: str
        """
        return self._auth_key

    @auth_key.setter
    def auth_key(self, auth_key):
        """Sets the auth_key of this ConnectionDetailsResult.

        User's Authentification key

        :param auth_key: The auth_key of this ConnectionDetailsResult.
        :type auth_key: str
        """

        self._auth_key = auth_key

    @property
    def collection(self):
        """Gets the collection of this ConnectionDetailsResult.

        User's collection id

        :return: The collection of this ConnectionDetailsResult.
        :rtype: str
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this ConnectionDetailsResult.

        User's collection id

        :param collection: The collection of this ConnectionDetailsResult.
        :type collection: str
        """

        self._collection = collection

    @property
    def email(self):
        """Gets the email of this ConnectionDetailsResult.

        User's email used for the collection

        :return: The email of this ConnectionDetailsResult.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ConnectionDetailsResult.

        User's email used for the collection

        :param email: The email of this ConnectionDetailsResult.
        :type email: str
        """

        self._email = email

    @property
    def error_code(self):
        """Gets the error_code of this ConnectionDetailsResult.


        :return: The error_code of this ConnectionDetailsResult.
        :rtype: ErrorCode
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ConnectionDetailsResult.


        :param error_code: The error_code of this ConnectionDetailsResult.
        :type error_code: ErrorCode
        """

        self._error_code = error_code

    @property
    def server_ip(self):
        """Gets the server_ip of this ConnectionDetailsResult.

        Server's IP

        :return: The server_ip of this ConnectionDetailsResult.
        :rtype: str
        """
        return self._server_ip

    @server_ip.setter
    def server_ip(self, server_ip):
        """Sets the server_ip of this ConnectionDetailsResult.

        Server's IP

        :param server_ip: The server_ip of this ConnectionDetailsResult.
        :type server_ip: str
        """

        self._server_ip = server_ip

    @property
    def server_port(self):
        """Gets the server_port of this ConnectionDetailsResult.

        Port used by the server

        :return: The server_port of this ConnectionDetailsResult.
        :rtype: int
        """
        return self._server_port

    @server_port.setter
    def server_port(self, server_port):
        """Sets the server_port of this ConnectionDetailsResult.

        Port used by the server

        :param server_port: The server_port of this ConnectionDetailsResult.
        :type server_port: int
        """

        self._server_port = server_port
