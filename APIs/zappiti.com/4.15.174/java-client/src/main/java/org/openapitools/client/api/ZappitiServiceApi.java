/*
 * Zappiti Player API
 * Move your app forward with the Zappiti Player API. Use http://your-player-ip:8990/ as base URL for your requests.
 *
 * The version of the OpenAPI document: 4.15.174
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CheckZappitiServiceRequest;
import org.openapitools.client.model.CheckZappitiServiceResult;
import org.openapitools.client.model.InstallZappitiServiceRequest;
import org.openapitools.client.model.InstallZappitiServiceResult;
import org.openapitools.client.model.StartZappitiServiceRequest;
import org.openapitools.client.model.StartZappitiServiceResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZappitiServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ZappitiServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ZappitiServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for checkZappitiServicePost
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CheckZappitiServiceResult </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkZappitiServicePostCall(CheckZappitiServiceRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/CheckZappitiService";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkZappitiServicePostValidateBeforeCall(CheckZappitiServiceRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling checkZappitiServicePost(Async)");
        }

        return checkZappitiServicePostCall(body, _callback);

    }

    /**
     * Check if Zappiti Service app status on the player
     * ErrorCode.NotInstalled ErrorCode.NotRunning ErrorCode.Running 
     * @param body  (required)
     * @return CheckZappitiServiceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CheckZappitiServiceResult </td><td>  -  </td></tr>
     </table>
     */
    public CheckZappitiServiceResult checkZappitiServicePost(CheckZappitiServiceRequest body) throws ApiException {
        ApiResponse<CheckZappitiServiceResult> localVarResp = checkZappitiServicePostWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Check if Zappiti Service app status on the player
     * ErrorCode.NotInstalled ErrorCode.NotRunning ErrorCode.Running 
     * @param body  (required)
     * @return ApiResponse&lt;CheckZappitiServiceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CheckZappitiServiceResult </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckZappitiServiceResult> checkZappitiServicePostWithHttpInfo(CheckZappitiServiceRequest body) throws ApiException {
        okhttp3.Call localVarCall = checkZappitiServicePostValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CheckZappitiServiceResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check if Zappiti Service app status on the player (asynchronously)
     * ErrorCode.NotInstalled ErrorCode.NotRunning ErrorCode.Running 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CheckZappitiServiceResult </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkZappitiServicePostAsync(CheckZappitiServiceRequest body, final ApiCallback<CheckZappitiServiceResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkZappitiServicePostValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CheckZappitiServiceResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for installZappitiServicePost
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InstallZappitiServiceResult </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call installZappitiServicePostCall(InstallZappitiServiceRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/InstallZappitiService";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call installZappitiServicePostValidateBeforeCall(InstallZappitiServiceRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling installZappitiServicePost(Async)");
        }

        return installZappitiServicePostCall(body, _callback);

    }

    /**
     * Open a popup that allow the user to install Zappiti Service, if not already installed
     * 
     * @param body  (required)
     * @return InstallZappitiServiceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InstallZappitiServiceResult </td><td>  -  </td></tr>
     </table>
     */
    public InstallZappitiServiceResult installZappitiServicePost(InstallZappitiServiceRequest body) throws ApiException {
        ApiResponse<InstallZappitiServiceResult> localVarResp = installZappitiServicePostWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Open a popup that allow the user to install Zappiti Service, if not already installed
     * 
     * @param body  (required)
     * @return ApiResponse&lt;InstallZappitiServiceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InstallZappitiServiceResult </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstallZappitiServiceResult> installZappitiServicePostWithHttpInfo(InstallZappitiServiceRequest body) throws ApiException {
        okhttp3.Call localVarCall = installZappitiServicePostValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<InstallZappitiServiceResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Open a popup that allow the user to install Zappiti Service, if not already installed (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> InstallZappitiServiceResult </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call installZappitiServicePostAsync(InstallZappitiServiceRequest body, final ApiCallback<InstallZappitiServiceResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = installZappitiServicePostValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<InstallZappitiServiceResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startZappitiServicePost
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StartZappitiServiceResult </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startZappitiServicePostCall(StartZappitiServiceRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/StartZappitiService";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startZappitiServicePostValidateBeforeCall(StartZappitiServiceRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling startZappitiServicePost(Async)");
        }

        return startZappitiServicePostCall(body, _callback);

    }

    /**
     * Start Zappiti Service if not started yet
     * 
     * @param body  (required)
     * @return StartZappitiServiceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StartZappitiServiceResult </td><td>  -  </td></tr>
     </table>
     */
    public StartZappitiServiceResult startZappitiServicePost(StartZappitiServiceRequest body) throws ApiException {
        ApiResponse<StartZappitiServiceResult> localVarResp = startZappitiServicePostWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Start Zappiti Service if not started yet
     * 
     * @param body  (required)
     * @return ApiResponse&lt;StartZappitiServiceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StartZappitiServiceResult </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartZappitiServiceResult> startZappitiServicePostWithHttpInfo(StartZappitiServiceRequest body) throws ApiException {
        okhttp3.Call localVarCall = startZappitiServicePostValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<StartZappitiServiceResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start Zappiti Service if not started yet (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StartZappitiServiceResult </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startZappitiServicePostAsync(StartZappitiServiceRequest body, final ApiCallback<StartZappitiServiceResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = startZappitiServicePostValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<StartZappitiServiceResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
