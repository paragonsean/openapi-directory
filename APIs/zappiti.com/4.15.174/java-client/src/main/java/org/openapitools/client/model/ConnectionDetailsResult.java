/*
 * Zappiti Player API
 * Move your app forward with the Zappiti Player API. Use http://your-player-ip:8990/ as base URL for your requests.
 *
 * The version of the OpenAPI document: 4.15.174
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.ErrorCode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConnectionDetailsResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:07.961218-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectionDetailsResult {
  public static final String SERIALIZED_NAME_AUTH_KEY = "AuthKey";
  @SerializedName(SERIALIZED_NAME_AUTH_KEY)
  private UUID authKey;

  public static final String SERIALIZED_NAME_COLLECTION = "Collection";
  @SerializedName(SERIALIZED_NAME_COLLECTION)
  private String collection;

  public static final String SERIALIZED_NAME_EMAIL = "Email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ERROR_CODE = "ErrorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private ErrorCode errorCode;

  public static final String SERIALIZED_NAME_SERVER_IP = "ServerIp";
  @SerializedName(SERIALIZED_NAME_SERVER_IP)
  private String serverIp;

  public static final String SERIALIZED_NAME_SERVER_PORT = "ServerPort";
  @SerializedName(SERIALIZED_NAME_SERVER_PORT)
  private Integer serverPort;

  public ConnectionDetailsResult() {
  }

  public ConnectionDetailsResult authKey(UUID authKey) {
    this.authKey = authKey;
    return this;
  }

  /**
   * User&#39;s Authentification key
   * @return authKey
   */
  @javax.annotation.Nullable
  public UUID getAuthKey() {
    return authKey;
  }

  public void setAuthKey(UUID authKey) {
    this.authKey = authKey;
  }


  public ConnectionDetailsResult collection(String collection) {
    this.collection = collection;
    return this;
  }

  /**
   * User&#39;s collection id
   * @return collection
   */
  @javax.annotation.Nullable
  public String getCollection() {
    return collection;
  }

  public void setCollection(String collection) {
    this.collection = collection;
  }


  public ConnectionDetailsResult email(String email) {
    this.email = email;
    return this;
  }

  /**
   * User&#39;s email used for the collection
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public ConnectionDetailsResult errorCode(ErrorCode errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  /**
   * Get errorCode
   * @return errorCode
   */
  @javax.annotation.Nullable
  public ErrorCode getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(ErrorCode errorCode) {
    this.errorCode = errorCode;
  }


  public ConnectionDetailsResult serverIp(String serverIp) {
    this.serverIp = serverIp;
    return this;
  }

  /**
   * Server&#39;s IP
   * @return serverIp
   */
  @javax.annotation.Nullable
  public String getServerIp() {
    return serverIp;
  }

  public void setServerIp(String serverIp) {
    this.serverIp = serverIp;
  }


  public ConnectionDetailsResult serverPort(Integer serverPort) {
    this.serverPort = serverPort;
    return this;
  }

  /**
   * Port used by the server
   * @return serverPort
   */
  @javax.annotation.Nullable
  public Integer getServerPort() {
    return serverPort;
  }

  public void setServerPort(Integer serverPort) {
    this.serverPort = serverPort;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectionDetailsResult connectionDetailsResult = (ConnectionDetailsResult) o;
    return Objects.equals(this.authKey, connectionDetailsResult.authKey) &&
        Objects.equals(this.collection, connectionDetailsResult.collection) &&
        Objects.equals(this.email, connectionDetailsResult.email) &&
        Objects.equals(this.errorCode, connectionDetailsResult.errorCode) &&
        Objects.equals(this.serverIp, connectionDetailsResult.serverIp) &&
        Objects.equals(this.serverPort, connectionDetailsResult.serverPort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authKey, collection, email, errorCode, serverIp, serverPort);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectionDetailsResult {\n");
    sb.append("    authKey: ").append(toIndentedString(authKey)).append("\n");
    sb.append("    collection: ").append(toIndentedString(collection)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    serverIp: ").append(toIndentedString(serverIp)).append("\n");
    sb.append("    serverPort: ").append(toIndentedString(serverPort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AuthKey");
    openapiFields.add("Collection");
    openapiFields.add("Email");
    openapiFields.add("ErrorCode");
    openapiFields.add("ServerIp");
    openapiFields.add("ServerPort");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectionDetailsResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectionDetailsResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectionDetailsResult is not found in the empty JSON string", ConnectionDetailsResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectionDetailsResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectionDetailsResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AuthKey") != null && !jsonObj.get("AuthKey").isJsonNull()) && !jsonObj.get("AuthKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AuthKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AuthKey").toString()));
      }
      if ((jsonObj.get("Collection") != null && !jsonObj.get("Collection").isJsonNull()) && !jsonObj.get("Collection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Collection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Collection").toString()));
      }
      if ((jsonObj.get("Email") != null && !jsonObj.get("Email").isJsonNull()) && !jsonObj.get("Email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Email").toString()));
      }
      // validate the optional field `ErrorCode`
      if (jsonObj.get("ErrorCode") != null && !jsonObj.get("ErrorCode").isJsonNull()) {
        ErrorCode.validateJsonElement(jsonObj.get("ErrorCode"));
      }
      if ((jsonObj.get("ServerIp") != null && !jsonObj.get("ServerIp").isJsonNull()) && !jsonObj.get("ServerIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServerIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServerIp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectionDetailsResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectionDetailsResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectionDetailsResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectionDetailsResult.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectionDetailsResult>() {
           @Override
           public void write(JsonWriter out, ConnectionDetailsResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectionDetailsResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectionDetailsResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectionDetailsResult
   * @throws IOException if the JSON string is invalid with respect to ConnectionDetailsResult
   */
  public static ConnectionDetailsResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectionDetailsResult.class);
  }

  /**
   * Convert an instance of ConnectionDetailsResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

