/*
 * Zappiti Player API
 * Move your app forward with the Zappiti Player API. Use http://your-player-ip:8990/ as base URL for your requests.
 *
 * The version of the OpenAPI document: 4.15.174
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ErrorCode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LastMediaResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:07.961218-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LastMediaResult {
  public static final String SERIALIZED_NAME_ACTORS = "Actors";
  @SerializedName(SERIALIZED_NAME_ACTORS)
  private List<String> actors = new ArrayList<>();

  public static final String SERIALIZED_NAME_BACKGROUND_URL = "BackgroundUrl";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_URL)
  private String backgroundUrl;

  public static final String SERIALIZED_NAME_DIRECTORS = "Directors";
  @SerializedName(SERIALIZED_NAME_DIRECTORS)
  private List<String> directors = new ArrayList<>();

  public static final String SERIALIZED_NAME_EPISODE = "Episode";
  @SerializedName(SERIALIZED_NAME_EPISODE)
  private Integer episode;

  public static final String SERIALIZED_NAME_ERROR_CODE = "ErrorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private ErrorCode errorCode;

  public static final String SERIALIZED_NAME_POSTER_URL = "PosterUrl";
  @SerializedName(SERIALIZED_NAME_POSTER_URL)
  private String posterUrl;

  public static final String SERIALIZED_NAME_RUNTIME = "Runtime";
  @SerializedName(SERIALIZED_NAME_RUNTIME)
  private Integer runtime;

  public static final String SERIALIZED_NAME_SEASON = "Season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private Integer season;

  public static final String SERIALIZED_NAME_SYNOPSIS = "Synopsis";
  @SerializedName(SERIALIZED_NAME_SYNOPSIS)
  private String synopsis;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TV_SHOW_NAME = "TvShowName";
  @SerializedName(SERIALIZED_NAME_TV_SHOW_NAME)
  private String tvShowName;

  public LastMediaResult() {
  }

  public LastMediaResult actors(List<String> actors) {
    this.actors = actors;
    return this;
  }

  public LastMediaResult addActorsItem(String actorsItem) {
    if (this.actors == null) {
      this.actors = new ArrayList<>();
    }
    this.actors.add(actorsItem);
    return this;
  }

  /**
   * Get actors
   * @return actors
   */
  @javax.annotation.Nullable
  public List<String> getActors() {
    return actors;
  }

  public void setActors(List<String> actors) {
    this.actors = actors;
  }


  public LastMediaResult backgroundUrl(String backgroundUrl) {
    this.backgroundUrl = backgroundUrl;
    return this;
  }

  /**
   * Get backgroundUrl
   * @return backgroundUrl
   */
  @javax.annotation.Nullable
  public String getBackgroundUrl() {
    return backgroundUrl;
  }

  public void setBackgroundUrl(String backgroundUrl) {
    this.backgroundUrl = backgroundUrl;
  }


  public LastMediaResult directors(List<String> directors) {
    this.directors = directors;
    return this;
  }

  public LastMediaResult addDirectorsItem(String directorsItem) {
    if (this.directors == null) {
      this.directors = new ArrayList<>();
    }
    this.directors.add(directorsItem);
    return this;
  }

  /**
   * Get directors
   * @return directors
   */
  @javax.annotation.Nullable
  public List<String> getDirectors() {
    return directors;
  }

  public void setDirectors(List<String> directors) {
    this.directors = directors;
  }


  public LastMediaResult episode(Integer episode) {
    this.episode = episode;
    return this;
  }

  /**
   * Get episode
   * @return episode
   */
  @javax.annotation.Nullable
  public Integer getEpisode() {
    return episode;
  }

  public void setEpisode(Integer episode) {
    this.episode = episode;
  }


  public LastMediaResult errorCode(ErrorCode errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  /**
   * Get errorCode
   * @return errorCode
   */
  @javax.annotation.Nullable
  public ErrorCode getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(ErrorCode errorCode) {
    this.errorCode = errorCode;
  }


  public LastMediaResult posterUrl(String posterUrl) {
    this.posterUrl = posterUrl;
    return this;
  }

  /**
   * Get posterUrl
   * @return posterUrl
   */
  @javax.annotation.Nullable
  public String getPosterUrl() {
    return posterUrl;
  }

  public void setPosterUrl(String posterUrl) {
    this.posterUrl = posterUrl;
  }


  public LastMediaResult runtime(Integer runtime) {
    this.runtime = runtime;
    return this;
  }

  /**
   * Get runtime
   * @return runtime
   */
  @javax.annotation.Nullable
  public Integer getRuntime() {
    return runtime;
  }

  public void setRuntime(Integer runtime) {
    this.runtime = runtime;
  }


  public LastMediaResult season(Integer season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public Integer getSeason() {
    return season;
  }

  public void setSeason(Integer season) {
    this.season = season;
  }


  public LastMediaResult synopsis(String synopsis) {
    this.synopsis = synopsis;
    return this;
  }

  /**
   * Get synopsis
   * @return synopsis
   */
  @javax.annotation.Nullable
  public String getSynopsis() {
    return synopsis;
  }

  public void setSynopsis(String synopsis) {
    this.synopsis = synopsis;
  }


  public LastMediaResult title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public LastMediaResult tvShowName(String tvShowName) {
    this.tvShowName = tvShowName;
    return this;
  }

  /**
   * Get tvShowName
   * @return tvShowName
   */
  @javax.annotation.Nullable
  public String getTvShowName() {
    return tvShowName;
  }

  public void setTvShowName(String tvShowName) {
    this.tvShowName = tvShowName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LastMediaResult lastMediaResult = (LastMediaResult) o;
    return Objects.equals(this.actors, lastMediaResult.actors) &&
        Objects.equals(this.backgroundUrl, lastMediaResult.backgroundUrl) &&
        Objects.equals(this.directors, lastMediaResult.directors) &&
        Objects.equals(this.episode, lastMediaResult.episode) &&
        Objects.equals(this.errorCode, lastMediaResult.errorCode) &&
        Objects.equals(this.posterUrl, lastMediaResult.posterUrl) &&
        Objects.equals(this.runtime, lastMediaResult.runtime) &&
        Objects.equals(this.season, lastMediaResult.season) &&
        Objects.equals(this.synopsis, lastMediaResult.synopsis) &&
        Objects.equals(this.title, lastMediaResult.title) &&
        Objects.equals(this.tvShowName, lastMediaResult.tvShowName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actors, backgroundUrl, directors, episode, errorCode, posterUrl, runtime, season, synopsis, title, tvShowName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LastMediaResult {\n");
    sb.append("    actors: ").append(toIndentedString(actors)).append("\n");
    sb.append("    backgroundUrl: ").append(toIndentedString(backgroundUrl)).append("\n");
    sb.append("    directors: ").append(toIndentedString(directors)).append("\n");
    sb.append("    episode: ").append(toIndentedString(episode)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    posterUrl: ").append(toIndentedString(posterUrl)).append("\n");
    sb.append("    runtime: ").append(toIndentedString(runtime)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    synopsis: ").append(toIndentedString(synopsis)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    tvShowName: ").append(toIndentedString(tvShowName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Actors");
    openapiFields.add("BackgroundUrl");
    openapiFields.add("Directors");
    openapiFields.add("Episode");
    openapiFields.add("ErrorCode");
    openapiFields.add("PosterUrl");
    openapiFields.add("Runtime");
    openapiFields.add("Season");
    openapiFields.add("Synopsis");
    openapiFields.add("Title");
    openapiFields.add("TvShowName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LastMediaResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LastMediaResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LastMediaResult is not found in the empty JSON string", LastMediaResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LastMediaResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LastMediaResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("Actors") != null && !jsonObj.get("Actors").isJsonNull() && !jsonObj.get("Actors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Actors` to be an array in the JSON string but got `%s`", jsonObj.get("Actors").toString()));
      }
      if ((jsonObj.get("BackgroundUrl") != null && !jsonObj.get("BackgroundUrl").isJsonNull()) && !jsonObj.get("BackgroundUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BackgroundUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BackgroundUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Directors") != null && !jsonObj.get("Directors").isJsonNull() && !jsonObj.get("Directors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Directors` to be an array in the JSON string but got `%s`", jsonObj.get("Directors").toString()));
      }
      // validate the optional field `ErrorCode`
      if (jsonObj.get("ErrorCode") != null && !jsonObj.get("ErrorCode").isJsonNull()) {
        ErrorCode.validateJsonElement(jsonObj.get("ErrorCode"));
      }
      if ((jsonObj.get("PosterUrl") != null && !jsonObj.get("PosterUrl").isJsonNull()) && !jsonObj.get("PosterUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PosterUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PosterUrl").toString()));
      }
      if ((jsonObj.get("Synopsis") != null && !jsonObj.get("Synopsis").isJsonNull()) && !jsonObj.get("Synopsis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Synopsis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Synopsis").toString()));
      }
      if ((jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
      if ((jsonObj.get("TvShowName") != null && !jsonObj.get("TvShowName").isJsonNull()) && !jsonObj.get("TvShowName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TvShowName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TvShowName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LastMediaResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LastMediaResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LastMediaResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LastMediaResult.class));

       return (TypeAdapter<T>) new TypeAdapter<LastMediaResult>() {
           @Override
           public void write(JsonWriter out, LastMediaResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LastMediaResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LastMediaResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LastMediaResult
   * @throws IOException if the JSON string is invalid with respect to LastMediaResult
   */
  public static LastMediaResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LastMediaResult.class);
  }

  /**
   * Convert an instance of LastMediaResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

