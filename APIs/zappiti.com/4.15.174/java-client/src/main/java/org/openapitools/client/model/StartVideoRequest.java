/*
 * Zappiti Player API
 * Move your app forward with the Zappiti Player API. Use http://your-player-ip:8990/ as base URL for your requests.
 *
 * The version of the OpenAPI document: 4.15.174
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartVideoRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:07.961218-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartVideoRequest {
  public static final String SERIALIZED_NAME_API_KEY = "ApiKey";
  @SerializedName(SERIALIZED_NAME_API_KEY)
  private UUID apiKey;

  public static final String SERIALIZED_NAME_AUTH_KEY = "AuthKey";
  @SerializedName(SERIALIZED_NAME_AUTH_KEY)
  private UUID authKey;

  public static final String SERIALIZED_NAME_COLLECTION = "Collection";
  @SerializedName(SERIALIZED_NAME_COLLECTION)
  private String collection;

  public static final String SERIALIZED_NAME_IP = "Ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_MEDIA_ID = "MediaId";
  @SerializedName(SERIALIZED_NAME_MEDIA_ID)
  private UUID mediaId;

  public static final String SERIALIZED_NAME_PORT = "Port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public StartVideoRequest() {
  }

  public StartVideoRequest apiKey(UUID apiKey) {
    this.apiKey = apiKey;
    return this;
  }

  /**
   * Client API Key
   * @return apiKey
   */
  @javax.annotation.Nullable
  public UUID getApiKey() {
    return apiKey;
  }

  public void setApiKey(UUID apiKey) {
    this.apiKey = apiKey;
  }


  public StartVideoRequest authKey(UUID authKey) {
    this.authKey = authKey;
    return this;
  }

  /**
   * User auth key
   * @return authKey
   */
  @javax.annotation.Nullable
  public UUID getAuthKey() {
    return authKey;
  }

  public void setAuthKey(UUID authKey) {
    this.authKey = authKey;
  }


  public StartVideoRequest collection(String collection) {
    this.collection = collection;
    return this;
  }

  /**
   * Collection id
   * @return collection
   */
  @javax.annotation.Nullable
  public String getCollection() {
    return collection;
  }

  public void setCollection(String collection) {
    this.collection = collection;
  }


  public StartVideoRequest ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * Server Ip
   * @return ip
   */
  @javax.annotation.Nullable
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public StartVideoRequest mediaId(UUID mediaId) {
    this.mediaId = mediaId;
    return this;
  }

  /**
   * Id of the video to start
   * @return mediaId
   */
  @javax.annotation.Nullable
  public UUID getMediaId() {
    return mediaId;
  }

  public void setMediaId(UUID mediaId) {
    this.mediaId = mediaId;
  }


  public StartVideoRequest port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Server Port
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartVideoRequest startVideoRequest = (StartVideoRequest) o;
    return Objects.equals(this.apiKey, startVideoRequest.apiKey) &&
        Objects.equals(this.authKey, startVideoRequest.authKey) &&
        Objects.equals(this.collection, startVideoRequest.collection) &&
        Objects.equals(this.ip, startVideoRequest.ip) &&
        Objects.equals(this.mediaId, startVideoRequest.mediaId) &&
        Objects.equals(this.port, startVideoRequest.port);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiKey, authKey, collection, ip, mediaId, port);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartVideoRequest {\n");
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("    authKey: ").append(toIndentedString(authKey)).append("\n");
    sb.append("    collection: ").append(toIndentedString(collection)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    mediaId: ").append(toIndentedString(mediaId)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApiKey");
    openapiFields.add("AuthKey");
    openapiFields.add("Collection");
    openapiFields.add("Ip");
    openapiFields.add("MediaId");
    openapiFields.add("Port");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartVideoRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartVideoRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartVideoRequest is not found in the empty JSON string", StartVideoRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartVideoRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartVideoRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ApiKey") != null && !jsonObj.get("ApiKey").isJsonNull()) && !jsonObj.get("ApiKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ApiKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ApiKey").toString()));
      }
      if ((jsonObj.get("AuthKey") != null && !jsonObj.get("AuthKey").isJsonNull()) && !jsonObj.get("AuthKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AuthKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AuthKey").toString()));
      }
      if ((jsonObj.get("Collection") != null && !jsonObj.get("Collection").isJsonNull()) && !jsonObj.get("Collection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Collection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Collection").toString()));
      }
      if ((jsonObj.get("Ip") != null && !jsonObj.get("Ip").isJsonNull()) && !jsonObj.get("Ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Ip").toString()));
      }
      if ((jsonObj.get("MediaId") != null && !jsonObj.get("MediaId").isJsonNull()) && !jsonObj.get("MediaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MediaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MediaId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartVideoRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartVideoRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartVideoRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartVideoRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartVideoRequest>() {
           @Override
           public void write(JsonWriter out, StartVideoRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartVideoRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartVideoRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartVideoRequest
   * @throws IOException if the JSON string is invalid with respect to StartVideoRequest
   */
  public static StartVideoRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartVideoRequest.class);
  }

  /**
   * Convert an instance of StartVideoRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

