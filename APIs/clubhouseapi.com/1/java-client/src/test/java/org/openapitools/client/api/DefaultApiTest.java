/*
 * Clubhouse API
 * Clubhouse API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Call phone number auth.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void callPhoneNumberAuthPostTest() throws ApiException {
        Object body = null;
        api.callPhoneNumberAuthPost(body);
        // TODO: test validations
    }

    /**
     * Clubhouse uses this to check for updates when app is not installed from App Store (eg TestFlight)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkForUpdateGetTest() throws ApiException {
        Integer isTestflight = null;
        api.checkForUpdateGet(isTestflight);
        // TODO: test validations
    }

    /**
     * checks waitlist status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkWaitlistStatusPostTest() throws ApiException {
        api.checkWaitlistStatusPost();
        // TODO: test validations
    }

    /**
     * Call phone number auth.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completePhoneNumberAuthPostTest() throws ApiException {
        Object body = null;
        api.completePhoneNumberAuthPost(body);
        // TODO: test validations
    }

    /**
     * creates a channel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createChannelPostTest() throws ApiException {
        Object body = null;
        api.createChannelPost(body);
        // TODO: test validations
    }

    /**
     * follows a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void followPostTest() throws ApiException {
        Object body = null;
        api.followPost(body);
        // TODO: test validations
    }

    /**
     * get actionable notifications (the bell again)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getActionableNotificationsGetTest() throws ApiException {
        api.getActionableNotificationsGet();
        // TODO: test validations
    }

    /**
     * gets all topics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllTopicsGetTest() throws ApiException {
        api.getAllTopicsGet();
        // TODO: test validations
    }

    /**
     * get all channels
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChannelsGetTest() throws ApiException {
        api.getChannelsGet();
        // TODO: test validations
    }

    /**
     * gets club by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClubPostTest() throws ApiException {
        Object body = null;
        api.getClubPost(body);
        // TODO: test validations
    }

    /**
     * looks up clubs by topic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClubsForTopicPostTest() throws ApiException {
        Object body = null;
        api.getClubsForTopicPost(body);
        // TODO: test validations
    }

    /**
     * is fetched when you tap Create Room
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCreateChannelTargetsPostTest() throws ApiException {
        Object body = null;
        api.getCreateChannelTargetsPost(body);
        // TODO: test validations
    }

    /**
     * the Upcoming for You page
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventsGetTest() throws ApiException {
        Boolean isFiltered = null;
        Integer pageSize = null;
        Integer page = null;
        api.getEventsGet(isFiltered, pageSize, page);
        // TODO: test validations
    }

    /**
     * get a list of the users and clubs that this user is following. Returned users have bios truncated to ~80 characters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFollowingPostTest() throws ApiException {
        Object body = null;
        api.getFollowingPost(body);
        // TODO: test validations
    }

    /**
     * get notifications (the bell icon)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNotificationsGetTest() throws ApiException {
        Integer pageSize = null;
        Integer page = null;
        api.getNotificationsGet(pageSize, page);
        // TODO: test validations
    }

    /**
     * gets online friends on the app homepage.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOnlineFriendsPostTest() throws ApiException {
        Object body = null;
        api.getOnlineFriendsPost(body);
        // TODO: test validations
    }

    /**
     * looks up user profile by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProfilePostTest() throws ApiException {
        Object body = null;
        api.getProfilePost(body);
        // TODO: test validations
    }

    /**
     * gets release notes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReleaseNotesPostTest() throws ApiException {
        api.getReleaseNotesPost();
        // TODO: test validations
    }

    /**
     * get notification settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSettingsGetTest() throws ApiException {
        api.getSettingsGet();
        // TODO: test validations
    }

    /**
     * find users to invite to clubs based on phone number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSuggestedClubInvitesPostTest() throws ApiException {
        Object body = null;
        api.getSuggestedClubInvitesPost(body);
        // TODO: test validations
    }

    /**
     * gets suggested follows during signup
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSuggestedFollowsAllGetTest() throws ApiException {
        Boolean inOnboarding = null;
        Integer pageSize = null;
        Integer page = null;
        api.getSuggestedFollowsAllGet(inOnboarding, pageSize, page);
        // TODO: test validations
    }

    /**
     * find people to follow by uploading contacts during signup
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSuggestedFollowsFriendsOnlyPostTest() throws ApiException {
        Object body = null;
        api.getSuggestedFollowsFriendsOnlyPost(body);
        // TODO: test validations
    }

    /**
     * find similar users. (The Sparkles button on Clubhouse&#39;s profile page)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSuggestedFollowsSimilarPostTest() throws ApiException {
        Object body = null;
        api.getSuggestedFollowsSimilarPost(body);
        // TODO: test validations
    }

    /**
     * find users to invite based on phone number.
     *
     * (also see https://zerforschung.org/posts/clubhouse-telefonnummern-en/ for @zerforschung&#39;s analysis of the privacy implications of this API)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSuggestedInvitesPostTest() throws ApiException {
        Object body = null;
        api.getSuggestedInvitesPost(body);
        // TODO: test validations
    }

    /**
     * gets suggested users when you start a private room
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSuggestedSpeakersPostTest() throws ApiException {
        Object body = null;
        api.getSuggestedSpeakersPost(body);
        // TODO: test validations
    }

    /**
     * looks up topic by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTopicPostTest() throws ApiException {
        Object body = null;
        api.getTopicPost(body);
        // TODO: test validations
    }

    /**
     * looks up users by topic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersForTopicGetTest() throws ApiException {
        Integer topicId = null;
        Integer pageSize = null;
        Integer page = null;
        api.getUsersForTopicGet(topicId, pageSize, page);
        // TODO: test validations
    }

    /**
     * called during signup
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWelcomeChannelGetTest() throws ApiException {
        api.getWelcomeChannelGet();
        // TODO: test validations
    }

    /**
     * wave to another user on the waitlist to give them access
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inviteFromWaitlistPostTest() throws ApiException {
        Object body = null;
        api.inviteFromWaitlistPost(body);
        // TODO: test validations
    }

    /**
     * invite a user to the app, using one of your invites
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inviteToAppPostTest() throws ApiException {
        Object body = null;
        api.inviteToAppPost(body);
        // TODO: test validations
    }

    /**
     * join a channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void joinChannelPostTest() throws ApiException {
        Object body = null;
        api.joinChannelPost(body);
        // TODO: test validations
    }

    /**
     * leave a channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void leaveChannelPostTest() throws ApiException {
        Object body = null;
        api.leaveChannelPost(body);
        // TODO: test validations
    }

    /**
     * gets user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mePostTest() throws ApiException {
        Object body = null;
        api.mePost(body);
        // TODO: test validations
    }

    /**
     * analytics
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recordActionTrailsPostTest() throws ApiException {
        Object body = null;
        api.recordActionTrailsPost(body);
        // TODO: test validations
    }

    /**
     * gets an access_token from a refresh_token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refreshTokenPostTest() throws ApiException {
        Object body = null;
        api.refreshTokenPost(body);
        // TODO: test validations
    }

    /**
     * Resend phone number auth.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resendPhoneNumberAuthPostTest() throws ApiException {
        Object body = null;
        api.resendPhoneNumberAuthPost(body);
        // TODO: test validations
    }

    /**
     * search clubs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchClubsPostTest() throws ApiException {
        Object body = null;
        api.searchClubsPost(body);
        // TODO: test validations
    }

    /**
     * search for users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchUsersPostTest() throws ApiException {
        Object body = null;
        api.searchUsersPost(body);
        // TODO: test validations
    }

    /**
     * Starts phone number auth.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startPhoneNumberAuthPostTest() throws ApiException {
        Object body = null;
        api.startPhoneNumberAuthPost(body);
        // TODO: test validations
    }

    /**
     * updates notification during signup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNotificationsPostTest() throws ApiException {
        Object body = null;
        api.updateNotificationsPost(body);
        // TODO: test validations
    }

    /**
     * edits username.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUsernamePostTest() throws ApiException {
        Object body = null;
        api.updateUsernamePost(body);
        // TODO: test validations
    }

}
