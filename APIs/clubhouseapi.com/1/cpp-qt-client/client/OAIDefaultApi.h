/**
 * Clubhouse API
 * Clubhouse API
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void callPhoneNumberAuthPost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  is_testflight qint32 [optional]
    */
    virtual void checkForUpdateGet(const ::OpenAPI::OptionalParam<qint32> &is_testflight = ::OpenAPI::OptionalParam<qint32>());


    virtual void checkWaitlistStatusPost();

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void completePhoneNumberAuthPost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void createChannelPost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void followPost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());


    virtual void getActionableNotificationsGet();


    virtual void getAllTopicsGet();


    virtual void getChannelsGet();

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void getClubPost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void getClubsForTopicPost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void getCreateChannelTargetsPost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  is_filtered bool [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void getEventsGet(const ::OpenAPI::OptionalParam<bool> &is_filtered = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void getFollowingPost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void getNotificationsGet(const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void getOnlineFriendsPost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void getProfilePost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());


    virtual void getReleaseNotesPost();


    virtual void getSettingsGet();

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void getSuggestedClubInvitesPost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  in_onboarding bool [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void getSuggestedFollowsAllGet(const ::OpenAPI::OptionalParam<bool> &in_onboarding = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void getSuggestedFollowsFriendsOnlyPost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void getSuggestedFollowsSimilarPost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void getSuggestedInvitesPost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void getSuggestedSpeakersPost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void getTopicPost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  topic_id qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void getUsersForTopicGet(const ::OpenAPI::OptionalParam<qint32> &topic_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());


    virtual void getWelcomeChannelGet();

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void inviteFromWaitlistPost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void inviteToAppPost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void joinChannelPost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void leaveChannelPost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void mePost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void recordActionTrailsPost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void refreshTokenPost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void resendPhoneNumberAuthPost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void searchClubsPost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void searchUsersPost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void startPhoneNumberAuthPost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void updateNotificationsPost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void updateUsernamePost(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void callPhoneNumberAuthPostCallback(OAIHttpRequestWorker *worker);
    void checkForUpdateGetCallback(OAIHttpRequestWorker *worker);
    void checkWaitlistStatusPostCallback(OAIHttpRequestWorker *worker);
    void completePhoneNumberAuthPostCallback(OAIHttpRequestWorker *worker);
    void createChannelPostCallback(OAIHttpRequestWorker *worker);
    void followPostCallback(OAIHttpRequestWorker *worker);
    void getActionableNotificationsGetCallback(OAIHttpRequestWorker *worker);
    void getAllTopicsGetCallback(OAIHttpRequestWorker *worker);
    void getChannelsGetCallback(OAIHttpRequestWorker *worker);
    void getClubPostCallback(OAIHttpRequestWorker *worker);
    void getClubsForTopicPostCallback(OAIHttpRequestWorker *worker);
    void getCreateChannelTargetsPostCallback(OAIHttpRequestWorker *worker);
    void getEventsGetCallback(OAIHttpRequestWorker *worker);
    void getFollowingPostCallback(OAIHttpRequestWorker *worker);
    void getNotificationsGetCallback(OAIHttpRequestWorker *worker);
    void getOnlineFriendsPostCallback(OAIHttpRequestWorker *worker);
    void getProfilePostCallback(OAIHttpRequestWorker *worker);
    void getReleaseNotesPostCallback(OAIHttpRequestWorker *worker);
    void getSettingsGetCallback(OAIHttpRequestWorker *worker);
    void getSuggestedClubInvitesPostCallback(OAIHttpRequestWorker *worker);
    void getSuggestedFollowsAllGetCallback(OAIHttpRequestWorker *worker);
    void getSuggestedFollowsFriendsOnlyPostCallback(OAIHttpRequestWorker *worker);
    void getSuggestedFollowsSimilarPostCallback(OAIHttpRequestWorker *worker);
    void getSuggestedInvitesPostCallback(OAIHttpRequestWorker *worker);
    void getSuggestedSpeakersPostCallback(OAIHttpRequestWorker *worker);
    void getTopicPostCallback(OAIHttpRequestWorker *worker);
    void getUsersForTopicGetCallback(OAIHttpRequestWorker *worker);
    void getWelcomeChannelGetCallback(OAIHttpRequestWorker *worker);
    void inviteFromWaitlistPostCallback(OAIHttpRequestWorker *worker);
    void inviteToAppPostCallback(OAIHttpRequestWorker *worker);
    void joinChannelPostCallback(OAIHttpRequestWorker *worker);
    void leaveChannelPostCallback(OAIHttpRequestWorker *worker);
    void mePostCallback(OAIHttpRequestWorker *worker);
    void recordActionTrailsPostCallback(OAIHttpRequestWorker *worker);
    void refreshTokenPostCallback(OAIHttpRequestWorker *worker);
    void resendPhoneNumberAuthPostCallback(OAIHttpRequestWorker *worker);
    void searchClubsPostCallback(OAIHttpRequestWorker *worker);
    void searchUsersPostCallback(OAIHttpRequestWorker *worker);
    void startPhoneNumberAuthPostCallback(OAIHttpRequestWorker *worker);
    void updateNotificationsPostCallback(OAIHttpRequestWorker *worker);
    void updateUsernamePostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void callPhoneNumberAuthPostSignal();
    void checkForUpdateGetSignal();
    void checkWaitlistStatusPostSignal();
    void completePhoneNumberAuthPostSignal();
    void createChannelPostSignal();
    void followPostSignal();
    void getActionableNotificationsGetSignal();
    void getAllTopicsGetSignal();
    void getChannelsGetSignal();
    void getClubPostSignal();
    void getClubsForTopicPostSignal();
    void getCreateChannelTargetsPostSignal();
    void getEventsGetSignal();
    void getFollowingPostSignal();
    void getNotificationsGetSignal();
    void getOnlineFriendsPostSignal();
    void getProfilePostSignal();
    void getReleaseNotesPostSignal();
    void getSettingsGetSignal();
    void getSuggestedClubInvitesPostSignal();
    void getSuggestedFollowsAllGetSignal();
    void getSuggestedFollowsFriendsOnlyPostSignal();
    void getSuggestedFollowsSimilarPostSignal();
    void getSuggestedInvitesPostSignal();
    void getSuggestedSpeakersPostSignal();
    void getTopicPostSignal();
    void getUsersForTopicGetSignal();
    void getWelcomeChannelGetSignal();
    void inviteFromWaitlistPostSignal();
    void inviteToAppPostSignal();
    void joinChannelPostSignal();
    void leaveChannelPostSignal();
    void mePostSignal();
    void recordActionTrailsPostSignal();
    void refreshTokenPostSignal();
    void resendPhoneNumberAuthPostSignal();
    void searchClubsPostSignal();
    void searchUsersPostSignal();
    void startPhoneNumberAuthPostSignal();
    void updateNotificationsPostSignal();
    void updateUsernamePostSignal();


    void callPhoneNumberAuthPostSignalFull(OAIHttpRequestWorker *worker);
    void checkForUpdateGetSignalFull(OAIHttpRequestWorker *worker);
    void checkWaitlistStatusPostSignalFull(OAIHttpRequestWorker *worker);
    void completePhoneNumberAuthPostSignalFull(OAIHttpRequestWorker *worker);
    void createChannelPostSignalFull(OAIHttpRequestWorker *worker);
    void followPostSignalFull(OAIHttpRequestWorker *worker);
    void getActionableNotificationsGetSignalFull(OAIHttpRequestWorker *worker);
    void getAllTopicsGetSignalFull(OAIHttpRequestWorker *worker);
    void getChannelsGetSignalFull(OAIHttpRequestWorker *worker);
    void getClubPostSignalFull(OAIHttpRequestWorker *worker);
    void getClubsForTopicPostSignalFull(OAIHttpRequestWorker *worker);
    void getCreateChannelTargetsPostSignalFull(OAIHttpRequestWorker *worker);
    void getEventsGetSignalFull(OAIHttpRequestWorker *worker);
    void getFollowingPostSignalFull(OAIHttpRequestWorker *worker);
    void getNotificationsGetSignalFull(OAIHttpRequestWorker *worker);
    void getOnlineFriendsPostSignalFull(OAIHttpRequestWorker *worker);
    void getProfilePostSignalFull(OAIHttpRequestWorker *worker);
    void getReleaseNotesPostSignalFull(OAIHttpRequestWorker *worker);
    void getSettingsGetSignalFull(OAIHttpRequestWorker *worker);
    void getSuggestedClubInvitesPostSignalFull(OAIHttpRequestWorker *worker);
    void getSuggestedFollowsAllGetSignalFull(OAIHttpRequestWorker *worker);
    void getSuggestedFollowsFriendsOnlyPostSignalFull(OAIHttpRequestWorker *worker);
    void getSuggestedFollowsSimilarPostSignalFull(OAIHttpRequestWorker *worker);
    void getSuggestedInvitesPostSignalFull(OAIHttpRequestWorker *worker);
    void getSuggestedSpeakersPostSignalFull(OAIHttpRequestWorker *worker);
    void getTopicPostSignalFull(OAIHttpRequestWorker *worker);
    void getUsersForTopicGetSignalFull(OAIHttpRequestWorker *worker);
    void getWelcomeChannelGetSignalFull(OAIHttpRequestWorker *worker);
    void inviteFromWaitlistPostSignalFull(OAIHttpRequestWorker *worker);
    void inviteToAppPostSignalFull(OAIHttpRequestWorker *worker);
    void joinChannelPostSignalFull(OAIHttpRequestWorker *worker);
    void leaveChannelPostSignalFull(OAIHttpRequestWorker *worker);
    void mePostSignalFull(OAIHttpRequestWorker *worker);
    void recordActionTrailsPostSignalFull(OAIHttpRequestWorker *worker);
    void refreshTokenPostSignalFull(OAIHttpRequestWorker *worker);
    void resendPhoneNumberAuthPostSignalFull(OAIHttpRequestWorker *worker);
    void searchClubsPostSignalFull(OAIHttpRequestWorker *worker);
    void searchUsersPostSignalFull(OAIHttpRequestWorker *worker);
    void startPhoneNumberAuthPostSignalFull(OAIHttpRequestWorker *worker);
    void updateNotificationsPostSignalFull(OAIHttpRequestWorker *worker);
    void updateUsernamePostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use callPhoneNumberAuthPostSignalError() instead")
    void callPhoneNumberAuthPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void callPhoneNumberAuthPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkForUpdateGetSignalError() instead")
    void checkForUpdateGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void checkForUpdateGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkWaitlistStatusPostSignalError() instead")
    void checkWaitlistStatusPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void checkWaitlistStatusPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completePhoneNumberAuthPostSignalError() instead")
    void completePhoneNumberAuthPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void completePhoneNumberAuthPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createChannelPostSignalError() instead")
    void createChannelPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createChannelPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use followPostSignalError() instead")
    void followPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void followPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionableNotificationsGetSignalError() instead")
    void getActionableNotificationsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getActionableNotificationsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllTopicsGetSignalError() instead")
    void getAllTopicsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAllTopicsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelsGetSignalError() instead")
    void getChannelsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClubPostSignalError() instead")
    void getClubPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getClubPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClubsForTopicPostSignalError() instead")
    void getClubsForTopicPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getClubsForTopicPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCreateChannelTargetsPostSignalError() instead")
    void getCreateChannelTargetsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getCreateChannelTargetsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventsGetSignalError() instead")
    void getEventsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getEventsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFollowingPostSignalError() instead")
    void getFollowingPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getFollowingPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsGetSignalError() instead")
    void getNotificationsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOnlineFriendsPostSignalError() instead")
    void getOnlineFriendsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getOnlineFriendsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProfilePostSignalError() instead")
    void getProfilePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getProfilePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReleaseNotesPostSignalError() instead")
    void getReleaseNotesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getReleaseNotesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSettingsGetSignalError() instead")
    void getSettingsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSettingsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSuggestedClubInvitesPostSignalError() instead")
    void getSuggestedClubInvitesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSuggestedClubInvitesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSuggestedFollowsAllGetSignalError() instead")
    void getSuggestedFollowsAllGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSuggestedFollowsAllGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSuggestedFollowsFriendsOnlyPostSignalError() instead")
    void getSuggestedFollowsFriendsOnlyPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSuggestedFollowsFriendsOnlyPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSuggestedFollowsSimilarPostSignalError() instead")
    void getSuggestedFollowsSimilarPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSuggestedFollowsSimilarPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSuggestedInvitesPostSignalError() instead")
    void getSuggestedInvitesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSuggestedInvitesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSuggestedSpeakersPostSignalError() instead")
    void getSuggestedSpeakersPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSuggestedSpeakersPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTopicPostSignalError() instead")
    void getTopicPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getTopicPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersForTopicGetSignalError() instead")
    void getUsersForTopicGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersForTopicGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWelcomeChannelGetSignalError() instead")
    void getWelcomeChannelGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getWelcomeChannelGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inviteFromWaitlistPostSignalError() instead")
    void inviteFromWaitlistPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void inviteFromWaitlistPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inviteToAppPostSignalError() instead")
    void inviteToAppPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void inviteToAppPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use joinChannelPostSignalError() instead")
    void joinChannelPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void joinChannelPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaveChannelPostSignalError() instead")
    void leaveChannelPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void leaveChannelPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mePostSignalError() instead")
    void mePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void mePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recordActionTrailsPostSignalError() instead")
    void recordActionTrailsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void recordActionTrailsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refreshTokenPostSignalError() instead")
    void refreshTokenPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void refreshTokenPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resendPhoneNumberAuthPostSignalError() instead")
    void resendPhoneNumberAuthPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resendPhoneNumberAuthPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchClubsPostSignalError() instead")
    void searchClubsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void searchClubsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchUsersPostSignalError() instead")
    void searchUsersPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void searchUsersPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startPhoneNumberAuthPostSignalError() instead")
    void startPhoneNumberAuthPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void startPhoneNumberAuthPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNotificationsPostSignalError() instead")
    void updateNotificationsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateNotificationsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUsernamePostSignalError() instead")
    void updateUsernamePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateUsernamePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use callPhoneNumberAuthPostSignalErrorFull() instead")
    void callPhoneNumberAuthPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void callPhoneNumberAuthPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkForUpdateGetSignalErrorFull() instead")
    void checkForUpdateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkForUpdateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkWaitlistStatusPostSignalErrorFull() instead")
    void checkWaitlistStatusPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkWaitlistStatusPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completePhoneNumberAuthPostSignalErrorFull() instead")
    void completePhoneNumberAuthPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void completePhoneNumberAuthPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createChannelPostSignalErrorFull() instead")
    void createChannelPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createChannelPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use followPostSignalErrorFull() instead")
    void followPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void followPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionableNotificationsGetSignalErrorFull() instead")
    void getActionableNotificationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActionableNotificationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllTopicsGetSignalErrorFull() instead")
    void getAllTopicsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllTopicsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelsGetSignalErrorFull() instead")
    void getChannelsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClubPostSignalErrorFull() instead")
    void getClubPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getClubPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClubsForTopicPostSignalErrorFull() instead")
    void getClubsForTopicPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getClubsForTopicPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCreateChannelTargetsPostSignalErrorFull() instead")
    void getCreateChannelTargetsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCreateChannelTargetsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventsGetSignalErrorFull() instead")
    void getEventsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFollowingPostSignalErrorFull() instead")
    void getFollowingPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFollowingPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsGetSignalErrorFull() instead")
    void getNotificationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOnlineFriendsPostSignalErrorFull() instead")
    void getOnlineFriendsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOnlineFriendsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProfilePostSignalErrorFull() instead")
    void getProfilePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProfilePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReleaseNotesPostSignalErrorFull() instead")
    void getReleaseNotesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReleaseNotesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSettingsGetSignalErrorFull() instead")
    void getSettingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSettingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSuggestedClubInvitesPostSignalErrorFull() instead")
    void getSuggestedClubInvitesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSuggestedClubInvitesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSuggestedFollowsAllGetSignalErrorFull() instead")
    void getSuggestedFollowsAllGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSuggestedFollowsAllGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSuggestedFollowsFriendsOnlyPostSignalErrorFull() instead")
    void getSuggestedFollowsFriendsOnlyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSuggestedFollowsFriendsOnlyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSuggestedFollowsSimilarPostSignalErrorFull() instead")
    void getSuggestedFollowsSimilarPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSuggestedFollowsSimilarPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSuggestedInvitesPostSignalErrorFull() instead")
    void getSuggestedInvitesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSuggestedInvitesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSuggestedSpeakersPostSignalErrorFull() instead")
    void getSuggestedSpeakersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSuggestedSpeakersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTopicPostSignalErrorFull() instead")
    void getTopicPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTopicPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersForTopicGetSignalErrorFull() instead")
    void getUsersForTopicGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersForTopicGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWelcomeChannelGetSignalErrorFull() instead")
    void getWelcomeChannelGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWelcomeChannelGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inviteFromWaitlistPostSignalErrorFull() instead")
    void inviteFromWaitlistPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inviteFromWaitlistPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inviteToAppPostSignalErrorFull() instead")
    void inviteToAppPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inviteToAppPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use joinChannelPostSignalErrorFull() instead")
    void joinChannelPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void joinChannelPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaveChannelPostSignalErrorFull() instead")
    void leaveChannelPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void leaveChannelPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mePostSignalErrorFull() instead")
    void mePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recordActionTrailsPostSignalErrorFull() instead")
    void recordActionTrailsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recordActionTrailsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refreshTokenPostSignalErrorFull() instead")
    void refreshTokenPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void refreshTokenPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resendPhoneNumberAuthPostSignalErrorFull() instead")
    void resendPhoneNumberAuthPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resendPhoneNumberAuthPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchClubsPostSignalErrorFull() instead")
    void searchClubsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchClubsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchUsersPostSignalErrorFull() instead")
    void searchUsersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchUsersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startPhoneNumberAuthPostSignalErrorFull() instead")
    void startPhoneNumberAuthPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startPhoneNumberAuthPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNotificationsPostSignalErrorFull() instead")
    void updateNotificationsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNotificationsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUsernamePostSignalErrorFull() instead")
    void updateUsernamePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUsernamePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
