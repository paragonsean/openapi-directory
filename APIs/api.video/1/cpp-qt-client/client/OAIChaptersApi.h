/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIChaptersApi_H
#define OAI_OAIChaptersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBad_request.h"
#include "OAIChapter.h"
#include "OAIChapters_list_response.h"
#include "OAIHttpFileElement.h"
#include "OAINot_found.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIChaptersApi : public QObject {
    Q_OBJECT

public:
    OAIChaptersApi(const int timeOut = 0);
    ~OAIChaptersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  video_id QString [required]
    * @param[in]  language QString [required]
    */
    virtual void dELETEVideosVideoIdChaptersLanguage(const QString &video_id, const QString &language);

    /**
    * @param[in]  video_id QString [required]
    * @param[in]  current_page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void gETVideosVideoIdChapters(const QString &video_id, const ::OpenAPI::OptionalParam<qint32> &current_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  video_id QString [required]
    * @param[in]  language QString [required]
    */
    virtual void gETVideosVideoIdChaptersLanguage(const QString &video_id, const QString &language);

    /**
    * @param[in]  video_id QString [required]
    * @param[in]  language QString [required]
    * @param[in]  file OAIHttpFileElement [required]
    */
    virtual void pOSTVideosVideoIdChaptersLanguage(const QString &video_id, const QString &language, const OAIHttpFileElement &file);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dELETEVideosVideoIdChaptersLanguageCallback(OAIHttpRequestWorker *worker);
    void gETVideosVideoIdChaptersCallback(OAIHttpRequestWorker *worker);
    void gETVideosVideoIdChaptersLanguageCallback(OAIHttpRequestWorker *worker);
    void pOSTVideosVideoIdChaptersLanguageCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dELETEVideosVideoIdChaptersLanguageSignal();
    void gETVideosVideoIdChaptersSignal(OAIChapters_list_response summary);
    void gETVideosVideoIdChaptersLanguageSignal(OAIChapter summary);
    void pOSTVideosVideoIdChaptersLanguageSignal(OAIChapter summary);


    void dELETEVideosVideoIdChaptersLanguageSignalFull(OAIHttpRequestWorker *worker);
    void gETVideosVideoIdChaptersSignalFull(OAIHttpRequestWorker *worker, OAIChapters_list_response summary);
    void gETVideosVideoIdChaptersLanguageSignalFull(OAIHttpRequestWorker *worker, OAIChapter summary);
    void pOSTVideosVideoIdChaptersLanguageSignalFull(OAIHttpRequestWorker *worker, OAIChapter summary);

    Q_DECL_DEPRECATED_X("Use dELETEVideosVideoIdChaptersLanguageSignalError() instead")
    void dELETEVideosVideoIdChaptersLanguageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dELETEVideosVideoIdChaptersLanguageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETVideosVideoIdChaptersSignalError() instead")
    void gETVideosVideoIdChaptersSignalE(OAIChapters_list_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETVideosVideoIdChaptersSignalError(OAIChapters_list_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETVideosVideoIdChaptersLanguageSignalError() instead")
    void gETVideosVideoIdChaptersLanguageSignalE(OAIChapter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETVideosVideoIdChaptersLanguageSignalError(OAIChapter summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTVideosVideoIdChaptersLanguageSignalError() instead")
    void pOSTVideosVideoIdChaptersLanguageSignalE(OAIChapter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTVideosVideoIdChaptersLanguageSignalError(OAIChapter summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dELETEVideosVideoIdChaptersLanguageSignalErrorFull() instead")
    void dELETEVideosVideoIdChaptersLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dELETEVideosVideoIdChaptersLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETVideosVideoIdChaptersSignalErrorFull() instead")
    void gETVideosVideoIdChaptersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETVideosVideoIdChaptersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETVideosVideoIdChaptersLanguageSignalErrorFull() instead")
    void gETVideosVideoIdChaptersLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETVideosVideoIdChaptersLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTVideosVideoIdChaptersLanguageSignalErrorFull() instead")
    void pOSTVideosVideoIdChaptersLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTVideosVideoIdChaptersLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
