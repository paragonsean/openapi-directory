/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideostatus_ingest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideostatus_ingest::OAIVideostatus_ingest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideostatus_ingest::OAIVideostatus_ingest() {
    this->initializeModel();
}

OAIVideostatus_ingest::~OAIVideostatus_ingest() {}

void OAIVideostatus_ingest::initializeModel() {

    m_filesize_isSet = false;
    m_filesize_isValid = false;

    m_received_bytes_isSet = false;
    m_received_bytes_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIVideostatus_ingest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideostatus_ingest::fromJsonObject(QJsonObject json) {

    m_filesize_isValid = ::OpenAPI::fromJsonValue(m_filesize, json[QString("filesize")]);
    m_filesize_isSet = !json[QString("filesize")].isNull() && m_filesize_isValid;

    m_received_bytes_isValid = ::OpenAPI::fromJsonValue(m_received_bytes, json[QString("receivedBytes")]);
    m_received_bytes_isSet = !json[QString("receivedBytes")].isNull() && m_received_bytes_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIVideostatus_ingest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideostatus_ingest::asJsonObject() const {
    QJsonObject obj;
    if (m_filesize_isSet) {
        obj.insert(QString("filesize"), ::OpenAPI::toJsonValue(m_filesize));
    }
    if (m_received_bytes.size() > 0) {
        obj.insert(QString("receivedBytes"), ::OpenAPI::toJsonValue(m_received_bytes));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint32 OAIVideostatus_ingest::getFilesize() const {
    return m_filesize;
}
void OAIVideostatus_ingest::setFilesize(const qint32 &filesize) {
    m_filesize = filesize;
    m_filesize_isSet = true;
}

bool OAIVideostatus_ingest::is_filesize_Set() const{
    return m_filesize_isSet;
}

bool OAIVideostatus_ingest::is_filesize_Valid() const{
    return m_filesize_isValid;
}

QList<OAIBytes_range> OAIVideostatus_ingest::getReceivedBytes() const {
    return m_received_bytes;
}
void OAIVideostatus_ingest::setReceivedBytes(const QList<OAIBytes_range> &received_bytes) {
    m_received_bytes = received_bytes;
    m_received_bytes_isSet = true;
}

bool OAIVideostatus_ingest::is_received_bytes_Set() const{
    return m_received_bytes_isSet;
}

bool OAIVideostatus_ingest::is_received_bytes_Valid() const{
    return m_received_bytes_isValid;
}

QString OAIVideostatus_ingest::getStatus() const {
    return m_status;
}
void OAIVideostatus_ingest::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIVideostatus_ingest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIVideostatus_ingest::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIVideostatus_ingest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filesize_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_bytes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideostatus_ingest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
