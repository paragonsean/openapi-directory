/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILive_stream_update_payload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILive_stream_update_payload::OAILive_stream_update_payload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILive_stream_update_payload::OAILive_stream_update_payload() {
    this->initializeModel();
}

OAILive_stream_update_payload::~OAILive_stream_update_payload() {}

void OAILive_stream_update_payload::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_r_public_isSet = false;
    m_r_public_isValid = false;

    m_record_isSet = false;
    m_record_isValid = false;
}

void OAILive_stream_update_payload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILive_stream_update_payload::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("playerId")]);
    m_player_id_isSet = !json[QString("playerId")].isNull() && m_player_id_isValid;

    m_r_public_isValid = ::OpenAPI::fromJsonValue(m_r_public, json[QString("public")]);
    m_r_public_isSet = !json[QString("public")].isNull() && m_r_public_isValid;

    m_record_isValid = ::OpenAPI::fromJsonValue(m_record, json[QString("record")]);
    m_record_isSet = !json[QString("record")].isNull() && m_record_isValid;
}

QString OAILive_stream_update_payload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILive_stream_update_payload::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("playerId"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_r_public_isSet) {
        obj.insert(QString("public"), ::OpenAPI::toJsonValue(m_r_public));
    }
    if (m_record_isSet) {
        obj.insert(QString("record"), ::OpenAPI::toJsonValue(m_record));
    }
    return obj;
}

QString OAILive_stream_update_payload::getName() const {
    return m_name;
}
void OAILive_stream_update_payload::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILive_stream_update_payload::is_name_Set() const{
    return m_name_isSet;
}

bool OAILive_stream_update_payload::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILive_stream_update_payload::getPlayerId() const {
    return m_player_id;
}
void OAILive_stream_update_payload::setPlayerId(const QString &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAILive_stream_update_payload::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAILive_stream_update_payload::is_player_id_Valid() const{
    return m_player_id_isValid;
}

bool OAILive_stream_update_payload::isRPublic() const {
    return m_r_public;
}
void OAILive_stream_update_payload::setRPublic(const bool &r_public) {
    m_r_public = r_public;
    m_r_public_isSet = true;
}

bool OAILive_stream_update_payload::is_r_public_Set() const{
    return m_r_public_isSet;
}

bool OAILive_stream_update_payload::is_r_public_Valid() const{
    return m_r_public_isValid;
}

bool OAILive_stream_update_payload::isRecord() const {
    return m_record;
}
void OAILive_stream_update_payload::setRecord(const bool &record) {
    m_record = record;
    m_record_isSet = true;
}

bool OAILive_stream_update_payload::is_record_Set() const{
    return m_record_isSet;
}

bool OAILive_stream_update_payload::is_record_Valid() const{
    return m_record_isValid;
}

bool OAILive_stream_update_payload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILive_stream_update_payload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
