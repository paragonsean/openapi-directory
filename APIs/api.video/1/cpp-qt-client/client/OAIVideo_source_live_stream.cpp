/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideo_source_live_stream.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideo_source_live_stream::OAIVideo_source_live_stream(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideo_source_live_stream::OAIVideo_source_live_stream() {
    this->initializeModel();
}

OAIVideo_source_live_stream::~OAIVideo_source_live_stream() {}

void OAIVideo_source_live_stream::initializeModel() {

    m_links_isSet = false;
    m_links_isValid = false;

    m_live_stream_id_isSet = false;
    m_live_stream_id_isValid = false;
}

void OAIVideo_source_live_stream::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideo_source_live_stream::fromJsonObject(QJsonObject json) {

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_live_stream_id_isValid = ::OpenAPI::fromJsonValue(m_live_stream_id, json[QString("liveStreamId")]);
    m_live_stream_id_isSet = !json[QString("liveStreamId")].isNull() && m_live_stream_id_isValid;
}

QString OAIVideo_source_live_stream::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideo_source_live_stream::asJsonObject() const {
    QJsonObject obj;
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_live_stream_id_isSet) {
        obj.insert(QString("liveStreamId"), ::OpenAPI::toJsonValue(m_live_stream_id));
    }
    return obj;
}

QList<OAIVideo_source_live_stream_link> OAIVideo_source_live_stream::getLinks() const {
    return m_links;
}
void OAIVideo_source_live_stream::setLinks(const QList<OAIVideo_source_live_stream_link> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIVideo_source_live_stream::is_links_Set() const{
    return m_links_isSet;
}

bool OAIVideo_source_live_stream::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIVideo_source_live_stream::getLiveStreamId() const {
    return m_live_stream_id;
}
void OAIVideo_source_live_stream::setLiveStreamId(const QString &live_stream_id) {
    m_live_stream_id = live_stream_id;
    m_live_stream_id_isSet = true;
}

bool OAIVideo_source_live_stream::is_live_stream_id_Set() const{
    return m_live_stream_id_isSet;
}

bool OAIVideo_source_live_stream::is_live_stream_id_Valid() const{
    return m_live_stream_id_isValid;
}

bool OAIVideo_source_live_stream::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_stream_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideo_source_live_stream::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
