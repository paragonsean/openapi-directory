/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpload_token.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpload_token::OAIUpload_token(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpload_token::OAIUpload_token() {
    this->initializeModel();
}

OAIUpload_token::~OAIUpload_token() {}

void OAIUpload_token::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;
}

void OAIUpload_token::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpload_token::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expiresAt")]);
    m_expires_at_isSet = !json[QString("expiresAt")].isNull() && m_expires_at_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;
}

QString OAIUpload_token::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpload_token::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expiresAt"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    return obj;
}

QDateTime OAIUpload_token::getCreatedAt() const {
    return m_created_at;
}
void OAIUpload_token::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIUpload_token::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIUpload_token::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIUpload_token::getExpiresAt() const {
    return m_expires_at;
}
void OAIUpload_token::setExpiresAt(const QDateTime &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIUpload_token::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIUpload_token::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

QString OAIUpload_token::getToken() const {
    return m_token;
}
void OAIUpload_token::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIUpload_token::is_token_Set() const{
    return m_token_isSet;
}

bool OAIUpload_token::is_token_Valid() const{
    return m_token_isValid;
}

qint32 OAIUpload_token::getTtl() const {
    return m_ttl;
}
void OAIUpload_token::setTtl(const qint32 &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIUpload_token::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIUpload_token::is_ttl_Valid() const{
    return m_ttl_isValid;
}

bool OAIUpload_token::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpload_token::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
