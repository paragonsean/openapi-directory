/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILive_stream_session_session.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILive_stream_session_session::OAILive_stream_session_session(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILive_stream_session_session::OAILive_stream_session_session() {
    this->initializeModel();
}

OAILive_stream_session_session::~OAILive_stream_session_session() {}

void OAILive_stream_session_session::initializeModel() {

    m_ended_at_isSet = false;
    m_ended_at_isValid = false;

    m_loaded_at_isSet = false;
    m_loaded_at_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;
}

void OAILive_stream_session_session::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILive_stream_session_session::fromJsonObject(QJsonObject json) {

    m_ended_at_isValid = ::OpenAPI::fromJsonValue(m_ended_at, json[QString("endedAt")]);
    m_ended_at_isSet = !json[QString("endedAt")].isNull() && m_ended_at_isValid;

    m_loaded_at_isValid = ::OpenAPI::fromJsonValue(m_loaded_at, json[QString("loadedAt")]);
    m_loaded_at_isSet = !json[QString("loadedAt")].isNull() && m_loaded_at_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("sessionId")]);
    m_session_id_isSet = !json[QString("sessionId")].isNull() && m_session_id_isValid;
}

QString OAILive_stream_session_session::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILive_stream_session_session::asJsonObject() const {
    QJsonObject obj;
    if (m_ended_at_isSet) {
        obj.insert(QString("endedAt"), ::OpenAPI::toJsonValue(m_ended_at));
    }
    if (m_loaded_at_isSet) {
        obj.insert(QString("loadedAt"), ::OpenAPI::toJsonValue(m_loaded_at));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("sessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    return obj;
}

QDateTime OAILive_stream_session_session::getEndedAt() const {
    return m_ended_at;
}
void OAILive_stream_session_session::setEndedAt(const QDateTime &ended_at) {
    m_ended_at = ended_at;
    m_ended_at_isSet = true;
}

bool OAILive_stream_session_session::is_ended_at_Set() const{
    return m_ended_at_isSet;
}

bool OAILive_stream_session_session::is_ended_at_Valid() const{
    return m_ended_at_isValid;
}

QDateTime OAILive_stream_session_session::getLoadedAt() const {
    return m_loaded_at;
}
void OAILive_stream_session_session::setLoadedAt(const QDateTime &loaded_at) {
    m_loaded_at = loaded_at;
    m_loaded_at_isSet = true;
}

bool OAILive_stream_session_session::is_loaded_at_Set() const{
    return m_loaded_at_isSet;
}

bool OAILive_stream_session_session::is_loaded_at_Valid() const{
    return m_loaded_at_isValid;
}

QString OAILive_stream_session_session::getSessionId() const {
    return m_session_id;
}
void OAILive_stream_session_session::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAILive_stream_session_session::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAILive_stream_session_session::is_session_id_Valid() const{
    return m_session_id_isValid;
}

bool OAILive_stream_session_session::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ended_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loaded_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILive_stream_session_session::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
