/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILive_stream_session_referrer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILive_stream_session_referrer::OAILive_stream_session_referrer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILive_stream_session_referrer::OAILive_stream_session_referrer() {
    this->initializeModel();
}

OAILive_stream_session_referrer::~OAILive_stream_session_referrer() {}

void OAILive_stream_session_referrer::initializeModel() {

    m_medium_isSet = false;
    m_medium_isValid = false;

    m_search_term_isSet = false;
    m_search_term_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAILive_stream_session_referrer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILive_stream_session_referrer::fromJsonObject(QJsonObject json) {

    m_medium_isValid = ::OpenAPI::fromJsonValue(m_medium, json[QString("medium")]);
    m_medium_isSet = !json[QString("medium")].isNull() && m_medium_isValid;

    m_search_term_isValid = ::OpenAPI::fromJsonValue(m_search_term, json[QString("searchTerm")]);
    m_search_term_isSet = !json[QString("searchTerm")].isNull() && m_search_term_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAILive_stream_session_referrer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILive_stream_session_referrer::asJsonObject() const {
    QJsonObject obj;
    if (m_medium_isSet) {
        obj.insert(QString("medium"), ::OpenAPI::toJsonValue(m_medium));
    }
    if (m_search_term_isSet) {
        obj.insert(QString("searchTerm"), ::OpenAPI::toJsonValue(m_search_term));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAILive_stream_session_referrer::getMedium() const {
    return m_medium;
}
void OAILive_stream_session_referrer::setMedium(const QString &medium) {
    m_medium = medium;
    m_medium_isSet = true;
}

bool OAILive_stream_session_referrer::is_medium_Set() const{
    return m_medium_isSet;
}

bool OAILive_stream_session_referrer::is_medium_Valid() const{
    return m_medium_isValid;
}

QString OAILive_stream_session_referrer::getSearchTerm() const {
    return m_search_term;
}
void OAILive_stream_session_referrer::setSearchTerm(const QString &search_term) {
    m_search_term = search_term;
    m_search_term_isSet = true;
}

bool OAILive_stream_session_referrer::is_search_term_Set() const{
    return m_search_term_isSet;
}

bool OAILive_stream_session_referrer::is_search_term_Valid() const{
    return m_search_term_isValid;
}

QString OAILive_stream_session_referrer::getSource() const {
    return m_source;
}
void OAILive_stream_session_referrer::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAILive_stream_session_referrer::is_source_Set() const{
    return m_source_isSet;
}

bool OAILive_stream_session_referrer::is_source_Valid() const{
    return m_source_isValid;
}

QString OAILive_stream_session_referrer::getUrl() const {
    return m_url;
}
void OAILive_stream_session_referrer::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAILive_stream_session_referrer::is_url_Set() const{
    return m_url_isSet;
}

bool OAILive_stream_session_referrer::is_url_Valid() const{
    return m_url_isValid;
}

bool OAILive_stream_session_referrer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_medium_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_term_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILive_stream_session_referrer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
