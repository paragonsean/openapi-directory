/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideostatus_encoding.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideostatus_encoding::OAIVideostatus_encoding(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideostatus_encoding::OAIVideostatus_encoding() {
    this->initializeModel();
}

OAIVideostatus_encoding::~OAIVideostatus_encoding() {}

void OAIVideostatus_encoding::initializeModel() {

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_playable_isSet = false;
    m_playable_isValid = false;

    m_qualities_isSet = false;
    m_qualities_isValid = false;
}

void OAIVideostatus_encoding::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideostatus_encoding::fromJsonObject(QJsonObject json) {

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_playable_isValid = ::OpenAPI::fromJsonValue(m_playable, json[QString("playable")]);
    m_playable_isSet = !json[QString("playable")].isNull() && m_playable_isValid;

    m_qualities_isValid = ::OpenAPI::fromJsonValue(m_qualities, json[QString("qualities")]);
    m_qualities_isSet = !json[QString("qualities")].isNull() && m_qualities_isValid;
}

QString OAIVideostatus_encoding::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideostatus_encoding::asJsonObject() const {
    QJsonObject obj;
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_playable_isSet) {
        obj.insert(QString("playable"), ::OpenAPI::toJsonValue(m_playable));
    }
    if (m_qualities.size() > 0) {
        obj.insert(QString("qualities"), ::OpenAPI::toJsonValue(m_qualities));
    }
    return obj;
}

OAIVideostatus_encoding_metadata OAIVideostatus_encoding::getMetadata() const {
    return m_metadata;
}
void OAIVideostatus_encoding::setMetadata(const OAIVideostatus_encoding_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIVideostatus_encoding::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIVideostatus_encoding::is_metadata_Valid() const{
    return m_metadata_isValid;
}

bool OAIVideostatus_encoding::isPlayable() const {
    return m_playable;
}
void OAIVideostatus_encoding::setPlayable(const bool &playable) {
    m_playable = playable;
    m_playable_isSet = true;
}

bool OAIVideostatus_encoding::is_playable_Set() const{
    return m_playable_isSet;
}

bool OAIVideostatus_encoding::is_playable_Valid() const{
    return m_playable_isValid;
}

QList<OAIQuality> OAIVideostatus_encoding::getQualities() const {
    return m_qualities;
}
void OAIVideostatus_encoding::setQualities(const QList<OAIQuality> &qualities) {
    m_qualities = qualities;
    m_qualities_isSet = true;
}

bool OAIVideostatus_encoding::is_qualities_Set() const{
    return m_qualities_isSet;
}

bool OAIVideostatus_encoding::is_qualities_Valid() const{
    return m_qualities_isValid;
}

bool OAIVideostatus_encoding::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_playable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qualities.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideostatus_encoding::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
