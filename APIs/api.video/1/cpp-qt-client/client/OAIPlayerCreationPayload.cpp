/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerCreationPayload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerCreationPayload::OAIPlayerCreationPayload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerCreationPayload::OAIPlayerCreationPayload() {
    this->initializeModel();
}

OAIPlayerCreationPayload::~OAIPlayerCreationPayload() {}

void OAIPlayerCreationPayload::initializeModel() {

    m_background_bottom_isSet = false;
    m_background_bottom_isValid = false;

    m_background_text_isSet = false;
    m_background_text_isValid = false;

    m_background_top_isSet = false;
    m_background_top_isValid = false;

    m_enable_api_isSet = false;
    m_enable_api_isValid = false;

    m_enable_controls_isSet = false;
    m_enable_controls_isValid = false;

    m_force_autoplay_isSet = false;
    m_force_autoplay_isValid = false;

    m_force_loop_isSet = false;
    m_force_loop_isValid = false;

    m_hide_title_isSet = false;
    m_hide_title_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_link_hover_isSet = false;
    m_link_hover_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_track_background_isSet = false;
    m_track_background_isValid = false;

    m_track_played_isSet = false;
    m_track_played_isValid = false;

    m_track_unplayed_isSet = false;
    m_track_unplayed_isValid = false;
}

void OAIPlayerCreationPayload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayerCreationPayload::fromJsonObject(QJsonObject json) {

    m_background_bottom_isValid = ::OpenAPI::fromJsonValue(m_background_bottom, json[QString("backgroundBottom")]);
    m_background_bottom_isSet = !json[QString("backgroundBottom")].isNull() && m_background_bottom_isValid;

    m_background_text_isValid = ::OpenAPI::fromJsonValue(m_background_text, json[QString("backgroundText")]);
    m_background_text_isSet = !json[QString("backgroundText")].isNull() && m_background_text_isValid;

    m_background_top_isValid = ::OpenAPI::fromJsonValue(m_background_top, json[QString("backgroundTop")]);
    m_background_top_isSet = !json[QString("backgroundTop")].isNull() && m_background_top_isValid;

    m_enable_api_isValid = ::OpenAPI::fromJsonValue(m_enable_api, json[QString("enableApi")]);
    m_enable_api_isSet = !json[QString("enableApi")].isNull() && m_enable_api_isValid;

    m_enable_controls_isValid = ::OpenAPI::fromJsonValue(m_enable_controls, json[QString("enableControls")]);
    m_enable_controls_isSet = !json[QString("enableControls")].isNull() && m_enable_controls_isValid;

    m_force_autoplay_isValid = ::OpenAPI::fromJsonValue(m_force_autoplay, json[QString("forceAutoplay")]);
    m_force_autoplay_isSet = !json[QString("forceAutoplay")].isNull() && m_force_autoplay_isValid;

    m_force_loop_isValid = ::OpenAPI::fromJsonValue(m_force_loop, json[QString("forceLoop")]);
    m_force_loop_isSet = !json[QString("forceLoop")].isNull() && m_force_loop_isValid;

    m_hide_title_isValid = ::OpenAPI::fromJsonValue(m_hide_title, json[QString("hideTitle")]);
    m_hide_title_isSet = !json[QString("hideTitle")].isNull() && m_hide_title_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_link_hover_isValid = ::OpenAPI::fromJsonValue(m_link_hover, json[QString("linkHover")]);
    m_link_hover_isSet = !json[QString("linkHover")].isNull() && m_link_hover_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_track_background_isValid = ::OpenAPI::fromJsonValue(m_track_background, json[QString("trackBackground")]);
    m_track_background_isSet = !json[QString("trackBackground")].isNull() && m_track_background_isValid;

    m_track_played_isValid = ::OpenAPI::fromJsonValue(m_track_played, json[QString("trackPlayed")]);
    m_track_played_isSet = !json[QString("trackPlayed")].isNull() && m_track_played_isValid;

    m_track_unplayed_isValid = ::OpenAPI::fromJsonValue(m_track_unplayed, json[QString("trackUnplayed")]);
    m_track_unplayed_isSet = !json[QString("trackUnplayed")].isNull() && m_track_unplayed_isValid;
}

QString OAIPlayerCreationPayload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayerCreationPayload::asJsonObject() const {
    QJsonObject obj;
    if (m_background_bottom_isSet) {
        obj.insert(QString("backgroundBottom"), ::OpenAPI::toJsonValue(m_background_bottom));
    }
    if (m_background_text_isSet) {
        obj.insert(QString("backgroundText"), ::OpenAPI::toJsonValue(m_background_text));
    }
    if (m_background_top_isSet) {
        obj.insert(QString("backgroundTop"), ::OpenAPI::toJsonValue(m_background_top));
    }
    if (m_enable_api_isSet) {
        obj.insert(QString("enableApi"), ::OpenAPI::toJsonValue(m_enable_api));
    }
    if (m_enable_controls_isSet) {
        obj.insert(QString("enableControls"), ::OpenAPI::toJsonValue(m_enable_controls));
    }
    if (m_force_autoplay_isSet) {
        obj.insert(QString("forceAutoplay"), ::OpenAPI::toJsonValue(m_force_autoplay));
    }
    if (m_force_loop_isSet) {
        obj.insert(QString("forceLoop"), ::OpenAPI::toJsonValue(m_force_loop));
    }
    if (m_hide_title_isSet) {
        obj.insert(QString("hideTitle"), ::OpenAPI::toJsonValue(m_hide_title));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_link_hover_isSet) {
        obj.insert(QString("linkHover"), ::OpenAPI::toJsonValue(m_link_hover));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_track_background_isSet) {
        obj.insert(QString("trackBackground"), ::OpenAPI::toJsonValue(m_track_background));
    }
    if (m_track_played_isSet) {
        obj.insert(QString("trackPlayed"), ::OpenAPI::toJsonValue(m_track_played));
    }
    if (m_track_unplayed_isSet) {
        obj.insert(QString("trackUnplayed"), ::OpenAPI::toJsonValue(m_track_unplayed));
    }
    return obj;
}

QString OAIPlayerCreationPayload::getBackgroundBottom() const {
    return m_background_bottom;
}
void OAIPlayerCreationPayload::setBackgroundBottom(const QString &background_bottom) {
    m_background_bottom = background_bottom;
    m_background_bottom_isSet = true;
}

bool OAIPlayerCreationPayload::is_background_bottom_Set() const{
    return m_background_bottom_isSet;
}

bool OAIPlayerCreationPayload::is_background_bottom_Valid() const{
    return m_background_bottom_isValid;
}

QString OAIPlayerCreationPayload::getBackgroundText() const {
    return m_background_text;
}
void OAIPlayerCreationPayload::setBackgroundText(const QString &background_text) {
    m_background_text = background_text;
    m_background_text_isSet = true;
}

bool OAIPlayerCreationPayload::is_background_text_Set() const{
    return m_background_text_isSet;
}

bool OAIPlayerCreationPayload::is_background_text_Valid() const{
    return m_background_text_isValid;
}

QString OAIPlayerCreationPayload::getBackgroundTop() const {
    return m_background_top;
}
void OAIPlayerCreationPayload::setBackgroundTop(const QString &background_top) {
    m_background_top = background_top;
    m_background_top_isSet = true;
}

bool OAIPlayerCreationPayload::is_background_top_Set() const{
    return m_background_top_isSet;
}

bool OAIPlayerCreationPayload::is_background_top_Valid() const{
    return m_background_top_isValid;
}

bool OAIPlayerCreationPayload::isEnableApi() const {
    return m_enable_api;
}
void OAIPlayerCreationPayload::setEnableApi(const bool &enable_api) {
    m_enable_api = enable_api;
    m_enable_api_isSet = true;
}

bool OAIPlayerCreationPayload::is_enable_api_Set() const{
    return m_enable_api_isSet;
}

bool OAIPlayerCreationPayload::is_enable_api_Valid() const{
    return m_enable_api_isValid;
}

bool OAIPlayerCreationPayload::isEnableControls() const {
    return m_enable_controls;
}
void OAIPlayerCreationPayload::setEnableControls(const bool &enable_controls) {
    m_enable_controls = enable_controls;
    m_enable_controls_isSet = true;
}

bool OAIPlayerCreationPayload::is_enable_controls_Set() const{
    return m_enable_controls_isSet;
}

bool OAIPlayerCreationPayload::is_enable_controls_Valid() const{
    return m_enable_controls_isValid;
}

bool OAIPlayerCreationPayload::isForceAutoplay() const {
    return m_force_autoplay;
}
void OAIPlayerCreationPayload::setForceAutoplay(const bool &force_autoplay) {
    m_force_autoplay = force_autoplay;
    m_force_autoplay_isSet = true;
}

bool OAIPlayerCreationPayload::is_force_autoplay_Set() const{
    return m_force_autoplay_isSet;
}

bool OAIPlayerCreationPayload::is_force_autoplay_Valid() const{
    return m_force_autoplay_isValid;
}

bool OAIPlayerCreationPayload::isForceLoop() const {
    return m_force_loop;
}
void OAIPlayerCreationPayload::setForceLoop(const bool &force_loop) {
    m_force_loop = force_loop;
    m_force_loop_isSet = true;
}

bool OAIPlayerCreationPayload::is_force_loop_Set() const{
    return m_force_loop_isSet;
}

bool OAIPlayerCreationPayload::is_force_loop_Valid() const{
    return m_force_loop_isValid;
}

bool OAIPlayerCreationPayload::isHideTitle() const {
    return m_hide_title;
}
void OAIPlayerCreationPayload::setHideTitle(const bool &hide_title) {
    m_hide_title = hide_title;
    m_hide_title_isSet = true;
}

bool OAIPlayerCreationPayload::is_hide_title_Set() const{
    return m_hide_title_isSet;
}

bool OAIPlayerCreationPayload::is_hide_title_Valid() const{
    return m_hide_title_isValid;
}

QString OAIPlayerCreationPayload::getLink() const {
    return m_link;
}
void OAIPlayerCreationPayload::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIPlayerCreationPayload::is_link_Set() const{
    return m_link_isSet;
}

bool OAIPlayerCreationPayload::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIPlayerCreationPayload::getLinkHover() const {
    return m_link_hover;
}
void OAIPlayerCreationPayload::setLinkHover(const QString &link_hover) {
    m_link_hover = link_hover;
    m_link_hover_isSet = true;
}

bool OAIPlayerCreationPayload::is_link_hover_Set() const{
    return m_link_hover_isSet;
}

bool OAIPlayerCreationPayload::is_link_hover_Valid() const{
    return m_link_hover_isValid;
}

QString OAIPlayerCreationPayload::getText() const {
    return m_text;
}
void OAIPlayerCreationPayload::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIPlayerCreationPayload::is_text_Set() const{
    return m_text_isSet;
}

bool OAIPlayerCreationPayload::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIPlayerCreationPayload::getTrackBackground() const {
    return m_track_background;
}
void OAIPlayerCreationPayload::setTrackBackground(const QString &track_background) {
    m_track_background = track_background;
    m_track_background_isSet = true;
}

bool OAIPlayerCreationPayload::is_track_background_Set() const{
    return m_track_background_isSet;
}

bool OAIPlayerCreationPayload::is_track_background_Valid() const{
    return m_track_background_isValid;
}

QString OAIPlayerCreationPayload::getTrackPlayed() const {
    return m_track_played;
}
void OAIPlayerCreationPayload::setTrackPlayed(const QString &track_played) {
    m_track_played = track_played;
    m_track_played_isSet = true;
}

bool OAIPlayerCreationPayload::is_track_played_Set() const{
    return m_track_played_isSet;
}

bool OAIPlayerCreationPayload::is_track_played_Valid() const{
    return m_track_played_isValid;
}

QString OAIPlayerCreationPayload::getTrackUnplayed() const {
    return m_track_unplayed;
}
void OAIPlayerCreationPayload::setTrackUnplayed(const QString &track_unplayed) {
    m_track_unplayed = track_unplayed;
    m_track_unplayed_isSet = true;
}

bool OAIPlayerCreationPayload::is_track_unplayed_Set() const{
    return m_track_unplayed_isSet;
}

bool OAIPlayerCreationPayload::is_track_unplayed_Valid() const{
    return m_track_unplayed_isValid;
}

bool OAIPlayerCreationPayload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_bottom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_top_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_api_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_controls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_autoplay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_loop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_hover_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_background_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_played_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_unplayed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayerCreationPayload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
