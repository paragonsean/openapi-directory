/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILive_stream_session.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILive_stream_session::OAILive_stream_session(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILive_stream_session::OAILive_stream_session() {
    this->initializeModel();
}

OAILive_stream_session::~OAILive_stream_session() {}

void OAILive_stream_session::initializeModel() {

    m_client_isSet = false;
    m_client_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_os_isSet = false;
    m_os_isValid = false;

    m_referrer_isSet = false;
    m_referrer_isValid = false;

    m_session_isSet = false;
    m_session_isValid = false;
}

void OAILive_stream_session::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILive_stream_session::fromJsonObject(QJsonObject json) {

    m_client_isValid = ::OpenAPI::fromJsonValue(m_client, json[QString("client")]);
    m_client_isSet = !json[QString("client")].isNull() && m_client_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_os_isValid = ::OpenAPI::fromJsonValue(m_os, json[QString("os")]);
    m_os_isSet = !json[QString("os")].isNull() && m_os_isValid;

    m_referrer_isValid = ::OpenAPI::fromJsonValue(m_referrer, json[QString("referrer")]);
    m_referrer_isSet = !json[QString("referrer")].isNull() && m_referrer_isValid;

    m_session_isValid = ::OpenAPI::fromJsonValue(m_session, json[QString("session")]);
    m_session_isSet = !json[QString("session")].isNull() && m_session_isValid;
}

QString OAILive_stream_session::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILive_stream_session::asJsonObject() const {
    QJsonObject obj;
    if (m_client.isSet()) {
        obj.insert(QString("client"), ::OpenAPI::toJsonValue(m_client));
    }
    if (m_device.isSet()) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_os.isSet()) {
        obj.insert(QString("os"), ::OpenAPI::toJsonValue(m_os));
    }
    if (m_referrer.isSet()) {
        obj.insert(QString("referrer"), ::OpenAPI::toJsonValue(m_referrer));
    }
    if (m_session.isSet()) {
        obj.insert(QString("session"), ::OpenAPI::toJsonValue(m_session));
    }
    return obj;
}

OAILive_stream_session_client OAILive_stream_session::getClient() const {
    return m_client;
}
void OAILive_stream_session::setClient(const OAILive_stream_session_client &client) {
    m_client = client;
    m_client_isSet = true;
}

bool OAILive_stream_session::is_client_Set() const{
    return m_client_isSet;
}

bool OAILive_stream_session::is_client_Valid() const{
    return m_client_isValid;
}

OAILive_stream_session_device OAILive_stream_session::getDevice() const {
    return m_device;
}
void OAILive_stream_session::setDevice(const OAILive_stream_session_device &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAILive_stream_session::is_device_Set() const{
    return m_device_isSet;
}

bool OAILive_stream_session::is_device_Valid() const{
    return m_device_isValid;
}

OAILive_stream_session_location OAILive_stream_session::getLocation() const {
    return m_location;
}
void OAILive_stream_session::setLocation(const OAILive_stream_session_location &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAILive_stream_session::is_location_Set() const{
    return m_location_isSet;
}

bool OAILive_stream_session::is_location_Valid() const{
    return m_location_isValid;
}

OAIVideo_session_os OAILive_stream_session::getOs() const {
    return m_os;
}
void OAILive_stream_session::setOs(const OAIVideo_session_os &os) {
    m_os = os;
    m_os_isSet = true;
}

bool OAILive_stream_session::is_os_Set() const{
    return m_os_isSet;
}

bool OAILive_stream_session::is_os_Valid() const{
    return m_os_isValid;
}

OAILive_stream_session_referrer OAILive_stream_session::getReferrer() const {
    return m_referrer;
}
void OAILive_stream_session::setReferrer(const OAILive_stream_session_referrer &referrer) {
    m_referrer = referrer;
    m_referrer_isSet = true;
}

bool OAILive_stream_session::is_referrer_Set() const{
    return m_referrer_isSet;
}

bool OAILive_stream_session::is_referrer_Valid() const{
    return m_referrer_isValid;
}

OAILive_stream_session_session OAILive_stream_session::getSession() const {
    return m_session;
}
void OAILive_stream_session::setSession(const OAILive_stream_session_session &session) {
    m_session = session;
    m_session_isSet = true;
}

bool OAILive_stream_session::is_session_Set() const{
    return m_session_isSet;
}

bool OAILive_stream_session::is_session_Valid() const{
    return m_session_isValid;
}

bool OAILive_stream_session::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_os.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_referrer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_session.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILive_stream_session::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
