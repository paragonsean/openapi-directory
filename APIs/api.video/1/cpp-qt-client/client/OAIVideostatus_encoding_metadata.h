/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVideostatus_encoding_metadata.h
 *
 * 
 */

#ifndef OAIVideostatus_encoding_metadata_H
#define OAIVideostatus_encoding_metadata_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIVideostatus_encoding_metadata : public OAIObject {
public:
    OAIVideostatus_encoding_metadata();
    OAIVideostatus_encoding_metadata(QString json);
    ~OAIVideostatus_encoding_metadata() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAspectRatio() const;
    void setAspectRatio(const QString &aspect_ratio);
    bool is_aspect_ratio_Set() const;
    bool is_aspect_ratio_Valid() const;

    QString getAudioCodec() const;
    void setAudioCodec(const QString &audio_codec);
    bool is_audio_codec_Set() const;
    bool is_audio_codec_Valid() const;

    double getBitrate() const;
    void setBitrate(const double &bitrate);
    bool is_bitrate_Set() const;
    bool is_bitrate_Valid() const;

    qint32 getDuration() const;
    void setDuration(const qint32 &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    qint32 getFramerate() const;
    void setFramerate(const qint32 &framerate);
    bool is_framerate_Set() const;
    bool is_framerate_Valid() const;

    qint32 getHeight() const;
    void setHeight(const qint32 &height);
    bool is_height_Set() const;
    bool is_height_Valid() const;

    qint32 getSamplerate() const;
    void setSamplerate(const qint32 &samplerate);
    bool is_samplerate_Set() const;
    bool is_samplerate_Valid() const;

    QString getVideoCodec() const;
    void setVideoCodec(const QString &video_codec);
    bool is_video_codec_Set() const;
    bool is_video_codec_Valid() const;

    qint32 getWidth() const;
    void setWidth(const qint32 &width);
    bool is_width_Set() const;
    bool is_width_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_aspect_ratio;
    bool m_aspect_ratio_isSet;
    bool m_aspect_ratio_isValid;

    QString m_audio_codec;
    bool m_audio_codec_isSet;
    bool m_audio_codec_isValid;

    double m_bitrate;
    bool m_bitrate_isSet;
    bool m_bitrate_isValid;

    qint32 m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    qint32 m_framerate;
    bool m_framerate_isSet;
    bool m_framerate_isValid;

    qint32 m_height;
    bool m_height_isSet;
    bool m_height_isValid;

    qint32 m_samplerate;
    bool m_samplerate_isSet;
    bool m_samplerate_isValid;

    QString m_video_codec;
    bool m_video_codec_isSet;
    bool m_video_codec_isValid;

    qint32 m_width;
    bool m_width_isSet;
    bool m_width_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVideostatus_encoding_metadata)

#endif // OAIVideostatus_encoding_metadata_H
