/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVideosApi_H
#define OAI_OAIVideosApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBad_request.h"
#include "OAIHttpFileElement.h"
#include "OAINot_found.h"
#include "OAIVideo.h"
#include "OAIVideo_create_payload.h"
#include "OAIVideo_thumbnail_pick_payload.h"
#include "OAIVideo_update_payload.h"
#include "OAIVideos_list_response.h"
#include "OAIVideostatus.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVideosApi : public QObject {
    Q_OBJECT

public:
    OAIVideosApi(const int timeOut = 0);
    ~OAIVideosApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  video_id QString [required]
    */
    virtual void dELETEVideo(const QString &video_id);

    /**
    * @param[in]  video_id QString [required]
    */
    virtual void gETVideo(const QString &video_id);

    /**
    * @param[in]  video_id QString [required]
    */
    virtual void gETVideoStatus(const QString &video_id);

    /**
    * @param[in]  title QString [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  metadata QList<QString> [optional]
    * @param[in]  description QString [optional]
    * @param[in]  live_stream_id QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  current_page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void lISTVideos(const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &metadata = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &live_stream_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &current_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  video_id QString [required]
    * @param[in]  oai_video_update_payload OAIVideo_update_payload [optional]
    */
    virtual void pATCHVideo(const QString &video_id, const ::OpenAPI::OptionalParam<OAIVideo_update_payload> &oai_video_update_payload = ::OpenAPI::OptionalParam<OAIVideo_update_payload>());

    /**
    * @param[in]  video_id QString [required]
    * @param[in]  oai_video_thumbnail_pick_payload OAIVideo_thumbnail_pick_payload [optional]
    */
    virtual void pATCHVideosVideoIdThumbnail(const QString &video_id, const ::OpenAPI::OptionalParam<OAIVideo_thumbnail_pick_payload> &oai_video_thumbnail_pick_payload = ::OpenAPI::OptionalParam<OAIVideo_thumbnail_pick_payload>());

    /**
    * @param[in]  oai_video_create_payload OAIVideo_create_payload [optional]
    */
    virtual void pOSTVideo(const ::OpenAPI::OptionalParam<OAIVideo_create_payload> &oai_video_create_payload = ::OpenAPI::OptionalParam<OAIVideo_create_payload>());

    /**
    * @param[in]  video_id QString [required]
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  content_range QString [optional]
    */
    virtual void pOSTVideosVideoIdSource(const QString &video_id, const OAIHttpFileElement &file, const ::OpenAPI::OptionalParam<QString> &content_range = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  video_id QString [required]
    * @param[in]  file OAIHttpFileElement [required]
    */
    virtual void pOSTVideosVideoIdThumbnail(const QString &video_id, const OAIHttpFileElement &file);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dELETEVideoCallback(OAIHttpRequestWorker *worker);
    void gETVideoCallback(OAIHttpRequestWorker *worker);
    void gETVideoStatusCallback(OAIHttpRequestWorker *worker);
    void lISTVideosCallback(OAIHttpRequestWorker *worker);
    void pATCHVideoCallback(OAIHttpRequestWorker *worker);
    void pATCHVideosVideoIdThumbnailCallback(OAIHttpRequestWorker *worker);
    void pOSTVideoCallback(OAIHttpRequestWorker *worker);
    void pOSTVideosVideoIdSourceCallback(OAIHttpRequestWorker *worker);
    void pOSTVideosVideoIdThumbnailCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dELETEVideoSignal();
    void gETVideoSignal(OAIVideo summary);
    void gETVideoStatusSignal(OAIVideostatus summary);
    void lISTVideosSignal(OAIVideos_list_response summary);
    void pATCHVideoSignal(OAIVideo summary);
    void pATCHVideosVideoIdThumbnailSignal(OAIVideo summary);
    void pOSTVideoSignal(OAIVideo summary);
    void pOSTVideosVideoIdSourceSignal(OAIVideo summary);
    void pOSTVideosVideoIdThumbnailSignal(OAIVideo summary);


    void dELETEVideoSignalFull(OAIHttpRequestWorker *worker);
    void gETVideoSignalFull(OAIHttpRequestWorker *worker, OAIVideo summary);
    void gETVideoStatusSignalFull(OAIHttpRequestWorker *worker, OAIVideostatus summary);
    void lISTVideosSignalFull(OAIHttpRequestWorker *worker, OAIVideos_list_response summary);
    void pATCHVideoSignalFull(OAIHttpRequestWorker *worker, OAIVideo summary);
    void pATCHVideosVideoIdThumbnailSignalFull(OAIHttpRequestWorker *worker, OAIVideo summary);
    void pOSTVideoSignalFull(OAIHttpRequestWorker *worker, OAIVideo summary);
    void pOSTVideosVideoIdSourceSignalFull(OAIHttpRequestWorker *worker, OAIVideo summary);
    void pOSTVideosVideoIdThumbnailSignalFull(OAIHttpRequestWorker *worker, OAIVideo summary);

    Q_DECL_DEPRECATED_X("Use dELETEVideoSignalError() instead")
    void dELETEVideoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dELETEVideoSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETVideoSignalError() instead")
    void gETVideoSignalE(OAIVideo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETVideoSignalError(OAIVideo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETVideoStatusSignalError() instead")
    void gETVideoStatusSignalE(OAIVideostatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETVideoStatusSignalError(OAIVideostatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lISTVideosSignalError() instead")
    void lISTVideosSignalE(OAIVideos_list_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lISTVideosSignalError(OAIVideos_list_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pATCHVideoSignalError() instead")
    void pATCHVideoSignalE(OAIVideo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pATCHVideoSignalError(OAIVideo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pATCHVideosVideoIdThumbnailSignalError() instead")
    void pATCHVideosVideoIdThumbnailSignalE(OAIVideo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pATCHVideosVideoIdThumbnailSignalError(OAIVideo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTVideoSignalError() instead")
    void pOSTVideoSignalE(OAIVideo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTVideoSignalError(OAIVideo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTVideosVideoIdSourceSignalError() instead")
    void pOSTVideosVideoIdSourceSignalE(OAIVideo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTVideosVideoIdSourceSignalError(OAIVideo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTVideosVideoIdThumbnailSignalError() instead")
    void pOSTVideosVideoIdThumbnailSignalE(OAIVideo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTVideosVideoIdThumbnailSignalError(OAIVideo summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dELETEVideoSignalErrorFull() instead")
    void dELETEVideoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dELETEVideoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETVideoSignalErrorFull() instead")
    void gETVideoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETVideoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETVideoStatusSignalErrorFull() instead")
    void gETVideoStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETVideoStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lISTVideosSignalErrorFull() instead")
    void lISTVideosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lISTVideosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pATCHVideoSignalErrorFull() instead")
    void pATCHVideoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pATCHVideoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pATCHVideosVideoIdThumbnailSignalErrorFull() instead")
    void pATCHVideosVideoIdThumbnailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pATCHVideosVideoIdThumbnailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTVideoSignalErrorFull() instead")
    void pOSTVideoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTVideoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTVideosVideoIdSourceSignalErrorFull() instead")
    void pOSTVideosVideoIdSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTVideosVideoIdSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTVideosVideoIdThumbnailSignalErrorFull() instead")
    void pOSTVideosVideoIdThumbnailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTVideosVideoIdThumbnailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
