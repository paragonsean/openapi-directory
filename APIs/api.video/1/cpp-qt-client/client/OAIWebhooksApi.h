/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWebhooksApi_H
#define OAI_OAIWebhooksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBad_request.h"
#include "OAINot_found.h"
#include "OAIWebhook.h"
#include "OAIWebhooks_create_payload.h"
#include "OAIWebhooks_list_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWebhooksApi : public QObject {
    Q_OBJECT

public:
    OAIWebhooksApi(const int timeOut = 0);
    ~OAIWebhooksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  webhook_id QString [required]
    */
    virtual void dELETEWebhook(const QString &webhook_id);

    /**
    * @param[in]  webhook_id QString [required]
    */
    virtual void gETWebhook(const QString &webhook_id);

    /**
    * @param[in]  events QString [optional]
    * @param[in]  current_page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void lISTWebhooks(const ::OpenAPI::OptionalParam<QString> &events = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &current_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_webhooks_create_payload OAIWebhooks_create_payload [optional]
    */
    virtual void pOSTWebhooks(const ::OpenAPI::OptionalParam<OAIWebhooks_create_payload> &oai_webhooks_create_payload = ::OpenAPI::OptionalParam<OAIWebhooks_create_payload>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dELETEWebhookCallback(OAIHttpRequestWorker *worker);
    void gETWebhookCallback(OAIHttpRequestWorker *worker);
    void lISTWebhooksCallback(OAIHttpRequestWorker *worker);
    void pOSTWebhooksCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dELETEWebhookSignal();
    void gETWebhookSignal(OAIWebhook summary);
    void lISTWebhooksSignal(OAIWebhooks_list_response summary);
    void pOSTWebhooksSignal(OAIWebhook summary);


    void dELETEWebhookSignalFull(OAIHttpRequestWorker *worker);
    void gETWebhookSignalFull(OAIHttpRequestWorker *worker, OAIWebhook summary);
    void lISTWebhooksSignalFull(OAIHttpRequestWorker *worker, OAIWebhooks_list_response summary);
    void pOSTWebhooksSignalFull(OAIHttpRequestWorker *worker, OAIWebhook summary);

    Q_DECL_DEPRECATED_X("Use dELETEWebhookSignalError() instead")
    void dELETEWebhookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dELETEWebhookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETWebhookSignalError() instead")
    void gETWebhookSignalE(OAIWebhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETWebhookSignalError(OAIWebhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lISTWebhooksSignalError() instead")
    void lISTWebhooksSignalE(OAIWebhooks_list_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lISTWebhooksSignalError(OAIWebhooks_list_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTWebhooksSignalError() instead")
    void pOSTWebhooksSignalE(OAIWebhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTWebhooksSignalError(OAIWebhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dELETEWebhookSignalErrorFull() instead")
    void dELETEWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dELETEWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETWebhookSignalErrorFull() instead")
    void gETWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lISTWebhooksSignalErrorFull() instead")
    void lISTWebhooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lISTWebhooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTWebhooksSignalErrorFull() instead")
    void pOSTWebhooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTWebhooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
