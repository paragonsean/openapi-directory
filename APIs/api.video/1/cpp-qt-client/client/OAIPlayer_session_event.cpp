/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayer_session_event.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayer_session_event::OAIPlayer_session_event(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayer_session_event::OAIPlayer_session_event() {
    this->initializeModel();
}

OAIPlayer_session_event::~OAIPlayer_session_event() {}

void OAIPlayer_session_event::initializeModel() {

    m_at_isSet = false;
    m_at_isValid = false;

    m_emitted_at_isSet = false;
    m_emitted_at_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPlayer_session_event::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayer_session_event::fromJsonObject(QJsonObject json) {

    m_at_isValid = ::OpenAPI::fromJsonValue(m_at, json[QString("at")]);
    m_at_isSet = !json[QString("at")].isNull() && m_at_isValid;

    m_emitted_at_isValid = ::OpenAPI::fromJsonValue(m_emitted_at, json[QString("emittedAt")]);
    m_emitted_at_isSet = !json[QString("emittedAt")].isNull() && m_emitted_at_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPlayer_session_event::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayer_session_event::asJsonObject() const {
    QJsonObject obj;
    if (m_at_isSet) {
        obj.insert(QString("at"), ::OpenAPI::toJsonValue(m_at));
    }
    if (m_emitted_at_isSet) {
        obj.insert(QString("emittedAt"), ::OpenAPI::toJsonValue(m_emitted_at));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIPlayer_session_event::getAt() const {
    return m_at;
}
void OAIPlayer_session_event::setAt(const qint32 &at) {
    m_at = at;
    m_at_isSet = true;
}

bool OAIPlayer_session_event::is_at_Set() const{
    return m_at_isSet;
}

bool OAIPlayer_session_event::is_at_Valid() const{
    return m_at_isValid;
}

QDateTime OAIPlayer_session_event::getEmittedAt() const {
    return m_emitted_at;
}
void OAIPlayer_session_event::setEmittedAt(const QDateTime &emitted_at) {
    m_emitted_at = emitted_at;
    m_emitted_at_isSet = true;
}

bool OAIPlayer_session_event::is_emitted_at_Set() const{
    return m_emitted_at_isSet;
}

bool OAIPlayer_session_event::is_emitted_at_Valid() const{
    return m_emitted_at_isValid;
}

qint32 OAIPlayer_session_event::getFrom() const {
    return m_from;
}
void OAIPlayer_session_event::setFrom(const qint32 &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIPlayer_session_event::is_from_Set() const{
    return m_from_isSet;
}

bool OAIPlayer_session_event::is_from_Valid() const{
    return m_from_isValid;
}

qint32 OAIPlayer_session_event::getTo() const {
    return m_to;
}
void OAIPlayer_session_event::setTo(const qint32 &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIPlayer_session_event::is_to_Set() const{
    return m_to_isSet;
}

bool OAIPlayer_session_event::is_to_Valid() const{
    return m_to_isValid;
}

QString OAIPlayer_session_event::getType() const {
    return m_type;
}
void OAIPlayer_session_event::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPlayer_session_event::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPlayer_session_event::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPlayer_session_event::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emitted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayer_session_event::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
