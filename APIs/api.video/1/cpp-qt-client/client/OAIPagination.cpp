/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPagination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPagination::OAIPagination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPagination::OAIPagination() {
    this->initializeModel();
}

OAIPagination::~OAIPagination() {}

void OAIPagination::initializeModel() {

    m_current_page_isSet = false;
    m_current_page_isValid = false;

    m_current_page_items_isSet = false;
    m_current_page_items_isValid = false;

    m_items_total_isSet = false;
    m_items_total_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_pages_total_isSet = false;
    m_pages_total_isValid = false;
}

void OAIPagination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPagination::fromJsonObject(QJsonObject json) {

    m_current_page_isValid = ::OpenAPI::fromJsonValue(m_current_page, json[QString("currentPage")]);
    m_current_page_isSet = !json[QString("currentPage")].isNull() && m_current_page_isValid;

    m_current_page_items_isValid = ::OpenAPI::fromJsonValue(m_current_page_items, json[QString("currentPageItems")]);
    m_current_page_items_isSet = !json[QString("currentPageItems")].isNull() && m_current_page_items_isValid;

    m_items_total_isValid = ::OpenAPI::fromJsonValue(m_items_total, json[QString("itemsTotal")]);
    m_items_total_isSet = !json[QString("itemsTotal")].isNull() && m_items_total_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_pages_total_isValid = ::OpenAPI::fromJsonValue(m_pages_total, json[QString("pagesTotal")]);
    m_pages_total_isSet = !json[QString("pagesTotal")].isNull() && m_pages_total_isValid;
}

QString OAIPagination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPagination::asJsonObject() const {
    QJsonObject obj;
    if (m_current_page_isSet) {
        obj.insert(QString("currentPage"), ::OpenAPI::toJsonValue(m_current_page));
    }
    if (m_current_page_items_isSet) {
        obj.insert(QString("currentPageItems"), ::OpenAPI::toJsonValue(m_current_page_items));
    }
    if (m_items_total_isSet) {
        obj.insert(QString("itemsTotal"), ::OpenAPI::toJsonValue(m_items_total));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_pages_total_isSet) {
        obj.insert(QString("pagesTotal"), ::OpenAPI::toJsonValue(m_pages_total));
    }
    return obj;
}

qint32 OAIPagination::getCurrentPage() const {
    return m_current_page;
}
void OAIPagination::setCurrentPage(const qint32 &current_page) {
    m_current_page = current_page;
    m_current_page_isSet = true;
}

bool OAIPagination::is_current_page_Set() const{
    return m_current_page_isSet;
}

bool OAIPagination::is_current_page_Valid() const{
    return m_current_page_isValid;
}

qint32 OAIPagination::getCurrentPageItems() const {
    return m_current_page_items;
}
void OAIPagination::setCurrentPageItems(const qint32 &current_page_items) {
    m_current_page_items = current_page_items;
    m_current_page_items_isSet = true;
}

bool OAIPagination::is_current_page_items_Set() const{
    return m_current_page_items_isSet;
}

bool OAIPagination::is_current_page_items_Valid() const{
    return m_current_page_items_isValid;
}

qint32 OAIPagination::getItemsTotal() const {
    return m_items_total;
}
void OAIPagination::setItemsTotal(const qint32 &items_total) {
    m_items_total = items_total;
    m_items_total_isSet = true;
}

bool OAIPagination::is_items_total_Set() const{
    return m_items_total_isSet;
}

bool OAIPagination::is_items_total_Valid() const{
    return m_items_total_isValid;
}

QList<OAIPagination_link> OAIPagination::getLinks() const {
    return m_links;
}
void OAIPagination::setLinks(const QList<OAIPagination_link> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIPagination::is_links_Set() const{
    return m_links_isSet;
}

bool OAIPagination::is_links_Valid() const{
    return m_links_isValid;
}

qint32 OAIPagination::getPageSize() const {
    return m_page_size;
}
void OAIPagination::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIPagination::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIPagination::is_page_size_Valid() const{
    return m_page_size_isValid;
}

qint32 OAIPagination::getPagesTotal() const {
    return m_pages_total;
}
void OAIPagination::setPagesTotal(const qint32 &pages_total) {
    m_pages_total = pages_total;
    m_pages_total_isSet = true;
}

bool OAIPagination::is_pages_total_Set() const{
    return m_pages_total_isSet;
}

bool OAIPagination::is_pages_total_Valid() const{
    return m_pages_total_isValid;
}

bool OAIPagination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_page_items_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPagination::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_links_isValid && true;
}

} // namespace OpenAPI
