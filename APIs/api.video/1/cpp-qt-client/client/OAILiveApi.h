/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILiveApi_H
#define OAI_OAILiveApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBad_request.h"
#include "OAIHttpFileElement.h"
#include "OAILive_stream.h"
#include "OAILive_stream_create_payload.h"
#include "OAILive_stream_list_response.h"
#include "OAILive_stream_update_payload.h"
#include "OAINot_found.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILiveApi : public QObject {
    Q_OBJECT

public:
    OAILiveApi(const int timeOut = 0);
    ~OAILiveApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  live_stream_id QString [required]
    */
    virtual void dELETELiveStreamsLiveStreamId(const QString &live_stream_id);

    /**
    * @param[in]  live_stream_id QString [required]
    */
    virtual void dELETELiveStreamsLiveStreamIdThumbnail(const QString &live_stream_id);

    /**
    * @param[in]  stream_key QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  current_page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void gETLiveStreams(const ::OpenAPI::OptionalParam<QString> &stream_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &current_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  live_stream_id QString [required]
    */
    virtual void gETLiveStreamsLiveStreamId(const QString &live_stream_id);

    /**
    * @param[in]  live_stream_id QString [required]
    * @param[in]  oai_live_stream_update_payload OAILive_stream_update_payload [optional]
    */
    virtual void pATCHLiveStreamsLiveStreamId(const QString &live_stream_id, const ::OpenAPI::OptionalParam<OAILive_stream_update_payload> &oai_live_stream_update_payload = ::OpenAPI::OptionalParam<OAILive_stream_update_payload>());

    /**
    * @param[in]  oai_live_stream_create_payload OAILive_stream_create_payload [optional]
    */
    virtual void pOSTLiveStreams(const ::OpenAPI::OptionalParam<OAILive_stream_create_payload> &oai_live_stream_create_payload = ::OpenAPI::OptionalParam<OAILive_stream_create_payload>());

    /**
    * @param[in]  live_stream_id QString [required]
    * @param[in]  file OAIHttpFileElement [required]
    */
    virtual void pOSTLiveStreamsLiveStreamIdThumbnail(const QString &live_stream_id, const OAIHttpFileElement &file);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dELETELiveStreamsLiveStreamIdCallback(OAIHttpRequestWorker *worker);
    void dELETELiveStreamsLiveStreamIdThumbnailCallback(OAIHttpRequestWorker *worker);
    void gETLiveStreamsCallback(OAIHttpRequestWorker *worker);
    void gETLiveStreamsLiveStreamIdCallback(OAIHttpRequestWorker *worker);
    void pATCHLiveStreamsLiveStreamIdCallback(OAIHttpRequestWorker *worker);
    void pOSTLiveStreamsCallback(OAIHttpRequestWorker *worker);
    void pOSTLiveStreamsLiveStreamIdThumbnailCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dELETELiveStreamsLiveStreamIdSignal();
    void dELETELiveStreamsLiveStreamIdThumbnailSignal(OAILive_stream summary);
    void gETLiveStreamsSignal(OAILive_stream_list_response summary);
    void gETLiveStreamsLiveStreamIdSignal(OAILive_stream summary);
    void pATCHLiveStreamsLiveStreamIdSignal(OAILive_stream summary);
    void pOSTLiveStreamsSignal(OAILive_stream summary);
    void pOSTLiveStreamsLiveStreamIdThumbnailSignal(OAILive_stream summary);


    void dELETELiveStreamsLiveStreamIdSignalFull(OAIHttpRequestWorker *worker);
    void dELETELiveStreamsLiveStreamIdThumbnailSignalFull(OAIHttpRequestWorker *worker, OAILive_stream summary);
    void gETLiveStreamsSignalFull(OAIHttpRequestWorker *worker, OAILive_stream_list_response summary);
    void gETLiveStreamsLiveStreamIdSignalFull(OAIHttpRequestWorker *worker, OAILive_stream summary);
    void pATCHLiveStreamsLiveStreamIdSignalFull(OAIHttpRequestWorker *worker, OAILive_stream summary);
    void pOSTLiveStreamsSignalFull(OAIHttpRequestWorker *worker, OAILive_stream summary);
    void pOSTLiveStreamsLiveStreamIdThumbnailSignalFull(OAIHttpRequestWorker *worker, OAILive_stream summary);

    Q_DECL_DEPRECATED_X("Use dELETELiveStreamsLiveStreamIdSignalError() instead")
    void dELETELiveStreamsLiveStreamIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dELETELiveStreamsLiveStreamIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dELETELiveStreamsLiveStreamIdThumbnailSignalError() instead")
    void dELETELiveStreamsLiveStreamIdThumbnailSignalE(OAILive_stream summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dELETELiveStreamsLiveStreamIdThumbnailSignalError(OAILive_stream summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETLiveStreamsSignalError() instead")
    void gETLiveStreamsSignalE(OAILive_stream_list_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETLiveStreamsSignalError(OAILive_stream_list_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETLiveStreamsLiveStreamIdSignalError() instead")
    void gETLiveStreamsLiveStreamIdSignalE(OAILive_stream summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETLiveStreamsLiveStreamIdSignalError(OAILive_stream summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pATCHLiveStreamsLiveStreamIdSignalError() instead")
    void pATCHLiveStreamsLiveStreamIdSignalE(OAILive_stream summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pATCHLiveStreamsLiveStreamIdSignalError(OAILive_stream summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTLiveStreamsSignalError() instead")
    void pOSTLiveStreamsSignalE(OAILive_stream summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTLiveStreamsSignalError(OAILive_stream summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTLiveStreamsLiveStreamIdThumbnailSignalError() instead")
    void pOSTLiveStreamsLiveStreamIdThumbnailSignalE(OAILive_stream summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTLiveStreamsLiveStreamIdThumbnailSignalError(OAILive_stream summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dELETELiveStreamsLiveStreamIdSignalErrorFull() instead")
    void dELETELiveStreamsLiveStreamIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dELETELiveStreamsLiveStreamIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dELETELiveStreamsLiveStreamIdThumbnailSignalErrorFull() instead")
    void dELETELiveStreamsLiveStreamIdThumbnailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dELETELiveStreamsLiveStreamIdThumbnailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETLiveStreamsSignalErrorFull() instead")
    void gETLiveStreamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETLiveStreamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETLiveStreamsLiveStreamIdSignalErrorFull() instead")
    void gETLiveStreamsLiveStreamIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETLiveStreamsLiveStreamIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pATCHLiveStreamsLiveStreamIdSignalErrorFull() instead")
    void pATCHLiveStreamsLiveStreamIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pATCHLiveStreamsLiveStreamIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTLiveStreamsSignalErrorFull() instead")
    void pOSTLiveStreamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTLiveStreamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTLiveStreamsLiveStreamIdThumbnailSignalErrorFull() instead")
    void pOSTLiveStreamsLiveStreamIdThumbnailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTLiveStreamsLiveStreamIdThumbnailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
