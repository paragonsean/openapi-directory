/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILive_stream.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILive_stream::OAILive_stream(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILive_stream::OAILive_stream() {
    this->initializeModel();
}

OAILive_stream::~OAILive_stream() {}

void OAILive_stream::initializeModel() {

    m_assets_isSet = false;
    m_assets_isValid = false;

    m_broadcasting_isSet = false;
    m_broadcasting_isValid = false;

    m_live_stream_id_isSet = false;
    m_live_stream_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_r_public_isSet = false;
    m_r_public_isValid = false;

    m_record_isSet = false;
    m_record_isValid = false;

    m_stream_key_isSet = false;
    m_stream_key_isValid = false;
}

void OAILive_stream::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILive_stream::fromJsonObject(QJsonObject json) {

    m_assets_isValid = ::OpenAPI::fromJsonValue(m_assets, json[QString("assets")]);
    m_assets_isSet = !json[QString("assets")].isNull() && m_assets_isValid;

    m_broadcasting_isValid = ::OpenAPI::fromJsonValue(m_broadcasting, json[QString("broadcasting")]);
    m_broadcasting_isSet = !json[QString("broadcasting")].isNull() && m_broadcasting_isValid;

    m_live_stream_id_isValid = ::OpenAPI::fromJsonValue(m_live_stream_id, json[QString("liveStreamId")]);
    m_live_stream_id_isSet = !json[QString("liveStreamId")].isNull() && m_live_stream_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("playerId")]);
    m_player_id_isSet = !json[QString("playerId")].isNull() && m_player_id_isValid;

    m_r_public_isValid = ::OpenAPI::fromJsonValue(m_r_public, json[QString("public")]);
    m_r_public_isSet = !json[QString("public")].isNull() && m_r_public_isValid;

    m_record_isValid = ::OpenAPI::fromJsonValue(m_record, json[QString("record")]);
    m_record_isSet = !json[QString("record")].isNull() && m_record_isValid;

    m_stream_key_isValid = ::OpenAPI::fromJsonValue(m_stream_key, json[QString("streamKey")]);
    m_stream_key_isSet = !json[QString("streamKey")].isNull() && m_stream_key_isValid;
}

QString OAILive_stream::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILive_stream::asJsonObject() const {
    QJsonObject obj;
    if (m_assets.isSet()) {
        obj.insert(QString("assets"), ::OpenAPI::toJsonValue(m_assets));
    }
    if (m_broadcasting_isSet) {
        obj.insert(QString("broadcasting"), ::OpenAPI::toJsonValue(m_broadcasting));
    }
    if (m_live_stream_id_isSet) {
        obj.insert(QString("liveStreamId"), ::OpenAPI::toJsonValue(m_live_stream_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("playerId"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_r_public_isSet) {
        obj.insert(QString("public"), ::OpenAPI::toJsonValue(m_r_public));
    }
    if (m_record_isSet) {
        obj.insert(QString("record"), ::OpenAPI::toJsonValue(m_record));
    }
    if (m_stream_key_isSet) {
        obj.insert(QString("streamKey"), ::OpenAPI::toJsonValue(m_stream_key));
    }
    return obj;
}

OAILive_stream_assets OAILive_stream::getAssets() const {
    return m_assets;
}
void OAILive_stream::setAssets(const OAILive_stream_assets &assets) {
    m_assets = assets;
    m_assets_isSet = true;
}

bool OAILive_stream::is_assets_Set() const{
    return m_assets_isSet;
}

bool OAILive_stream::is_assets_Valid() const{
    return m_assets_isValid;
}

bool OAILive_stream::isBroadcasting() const {
    return m_broadcasting;
}
void OAILive_stream::setBroadcasting(const bool &broadcasting) {
    m_broadcasting = broadcasting;
    m_broadcasting_isSet = true;
}

bool OAILive_stream::is_broadcasting_Set() const{
    return m_broadcasting_isSet;
}

bool OAILive_stream::is_broadcasting_Valid() const{
    return m_broadcasting_isValid;
}

QString OAILive_stream::getLiveStreamId() const {
    return m_live_stream_id;
}
void OAILive_stream::setLiveStreamId(const QString &live_stream_id) {
    m_live_stream_id = live_stream_id;
    m_live_stream_id_isSet = true;
}

bool OAILive_stream::is_live_stream_id_Set() const{
    return m_live_stream_id_isSet;
}

bool OAILive_stream::is_live_stream_id_Valid() const{
    return m_live_stream_id_isValid;
}

QString OAILive_stream::getName() const {
    return m_name;
}
void OAILive_stream::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILive_stream::is_name_Set() const{
    return m_name_isSet;
}

bool OAILive_stream::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILive_stream::getPlayerId() const {
    return m_player_id;
}
void OAILive_stream::setPlayerId(const QString &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAILive_stream::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAILive_stream::is_player_id_Valid() const{
    return m_player_id_isValid;
}

bool OAILive_stream::isRPublic() const {
    return m_r_public;
}
void OAILive_stream::setRPublic(const bool &r_public) {
    m_r_public = r_public;
    m_r_public_isSet = true;
}

bool OAILive_stream::is_r_public_Set() const{
    return m_r_public_isSet;
}

bool OAILive_stream::is_r_public_Valid() const{
    return m_r_public_isValid;
}

bool OAILive_stream::isRecord() const {
    return m_record;
}
void OAILive_stream::setRecord(const bool &record) {
    m_record = record;
    m_record_isSet = true;
}

bool OAILive_stream::is_record_Set() const{
    return m_record_isSet;
}

bool OAILive_stream::is_record_Valid() const{
    return m_record_isValid;
}

QString OAILive_stream::getStreamKey() const {
    return m_stream_key;
}
void OAILive_stream::setStreamKey(const QString &stream_key) {
    m_stream_key = stream_key;
    m_stream_key_isSet = true;
}

bool OAILive_stream::is_stream_key_Set() const{
    return m_stream_key_isSet;
}

bool OAILive_stream::is_stream_key_Valid() const{
    return m_stream_key_isValid;
}

bool OAILive_stream::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_broadcasting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_stream_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILive_stream::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
