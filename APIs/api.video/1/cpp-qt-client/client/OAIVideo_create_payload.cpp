/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideo_create_payload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideo_create_payload::OAIVideo_create_payload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideo_create_payload::OAIVideo_create_payload() {
    this->initializeModel();
}

OAIVideo_create_payload::~OAIVideo_create_payload() {}

void OAIVideo_create_payload::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_mp4_support_isSet = false;
    m_mp4_support_isValid = false;

    m_panoramic_isSet = false;
    m_panoramic_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_r_public_isSet = false;
    m_r_public_isValid = false;

    m_published_at_isSet = false;
    m_published_at_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIVideo_create_payload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideo_create_payload::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_mp4_support_isValid = ::OpenAPI::fromJsonValue(m_mp4_support, json[QString("mp4Support")]);
    m_mp4_support_isSet = !json[QString("mp4Support")].isNull() && m_mp4_support_isValid;

    m_panoramic_isValid = ::OpenAPI::fromJsonValue(m_panoramic, json[QString("panoramic")]);
    m_panoramic_isSet = !json[QString("panoramic")].isNull() && m_panoramic_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("playerId")]);
    m_player_id_isSet = !json[QString("playerId")].isNull() && m_player_id_isValid;

    m_r_public_isValid = ::OpenAPI::fromJsonValue(m_r_public, json[QString("public")]);
    m_r_public_isSet = !json[QString("public")].isNull() && m_r_public_isValid;

    m_published_at_isValid = ::OpenAPI::fromJsonValue(m_published_at, json[QString("publishedAt")]);
    m_published_at_isSet = !json[QString("publishedAt")].isNull() && m_published_at_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIVideo_create_payload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideo_create_payload::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_mp4_support_isSet) {
        obj.insert(QString("mp4Support"), ::OpenAPI::toJsonValue(m_mp4_support));
    }
    if (m_panoramic_isSet) {
        obj.insert(QString("panoramic"), ::OpenAPI::toJsonValue(m_panoramic));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("playerId"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_r_public_isSet) {
        obj.insert(QString("public"), ::OpenAPI::toJsonValue(m_r_public));
    }
    if (m_published_at_isSet) {
        obj.insert(QString("publishedAt"), ::OpenAPI::toJsonValue(m_published_at));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIVideo_create_payload::getDescription() const {
    return m_description;
}
void OAIVideo_create_payload::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIVideo_create_payload::is_description_Set() const{
    return m_description_isSet;
}

bool OAIVideo_create_payload::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIMetadata> OAIVideo_create_payload::getMetadata() const {
    return m_metadata;
}
void OAIVideo_create_payload::setMetadata(const QList<OAIMetadata> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIVideo_create_payload::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIVideo_create_payload::is_metadata_Valid() const{
    return m_metadata_isValid;
}

bool OAIVideo_create_payload::isMp4Support() const {
    return m_mp4_support;
}
void OAIVideo_create_payload::setMp4Support(const bool &mp4_support) {
    m_mp4_support = mp4_support;
    m_mp4_support_isSet = true;
}

bool OAIVideo_create_payload::is_mp4_support_Set() const{
    return m_mp4_support_isSet;
}

bool OAIVideo_create_payload::is_mp4_support_Valid() const{
    return m_mp4_support_isValid;
}

bool OAIVideo_create_payload::isPanoramic() const {
    return m_panoramic;
}
void OAIVideo_create_payload::setPanoramic(const bool &panoramic) {
    m_panoramic = panoramic;
    m_panoramic_isSet = true;
}

bool OAIVideo_create_payload::is_panoramic_Set() const{
    return m_panoramic_isSet;
}

bool OAIVideo_create_payload::is_panoramic_Valid() const{
    return m_panoramic_isValid;
}

QString OAIVideo_create_payload::getPlayerId() const {
    return m_player_id;
}
void OAIVideo_create_payload::setPlayerId(const QString &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIVideo_create_payload::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIVideo_create_payload::is_player_id_Valid() const{
    return m_player_id_isValid;
}

bool OAIVideo_create_payload::isRPublic() const {
    return m_r_public;
}
void OAIVideo_create_payload::setRPublic(const bool &r_public) {
    m_r_public = r_public;
    m_r_public_isSet = true;
}

bool OAIVideo_create_payload::is_r_public_Set() const{
    return m_r_public_isSet;
}

bool OAIVideo_create_payload::is_r_public_Valid() const{
    return m_r_public_isValid;
}

QDateTime OAIVideo_create_payload::getPublishedAt() const {
    return m_published_at;
}
void OAIVideo_create_payload::setPublishedAt(const QDateTime &published_at) {
    m_published_at = published_at;
    m_published_at_isSet = true;
}

bool OAIVideo_create_payload::is_published_at_Set() const{
    return m_published_at_isSet;
}

bool OAIVideo_create_payload::is_published_at_Valid() const{
    return m_published_at_isValid;
}

QString OAIVideo_create_payload::getSource() const {
    return m_source;
}
void OAIVideo_create_payload::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIVideo_create_payload::is_source_Set() const{
    return m_source_isSet;
}

bool OAIVideo_create_payload::is_source_Valid() const{
    return m_source_isValid;
}

QList<QString> OAIVideo_create_payload::getTags() const {
    return m_tags;
}
void OAIVideo_create_payload::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIVideo_create_payload::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIVideo_create_payload::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIVideo_create_payload::getTitle() const {
    return m_title;
}
void OAIVideo_create_payload::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIVideo_create_payload::is_title_Set() const{
    return m_title_isSet;
}

bool OAIVideo_create_payload::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIVideo_create_payload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mp4_support_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_panoramic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideo_create_payload::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_title_isValid && true;
}

} // namespace OpenAPI
