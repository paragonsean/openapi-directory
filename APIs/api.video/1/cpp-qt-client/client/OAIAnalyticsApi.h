/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAnalyticsApi_H
#define OAI_OAIAnalyticsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAINot_found.h"
#include "OAIRaw_statistics_list_live_stream_analytics_response.h"
#include "OAIRaw_statistics_list_player_session_events_response.h"
#include "OAIRaw_statistics_list_sessions_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAnalyticsApi : public QObject {
    Q_OBJECT

public:
    OAIAnalyticsApi(const int timeOut = 0);
    ~OAIAnalyticsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  live_stream_id QString [required]
    * @param[in]  period QString [optional]
    * @param[in]  current_page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void gETAnalyticsLiveStreamsLiveStreamId(const QString &live_stream_id, const ::OpenAPI::OptionalParam<QString> &period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &current_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  session_id QString [required]
    * @param[in]  current_page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void gETAnalyticsSessionsSessionIdEvents(const QString &session_id, const ::OpenAPI::OptionalParam<qint32> &current_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  video_id QString [required]
    * @param[in]  period QString [optional]
    * @param[in]  metadata QList<QString> [optional]
    * @param[in]  current_page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void gETAnalyticsVideosVideoId(const QString &video_id, const ::OpenAPI::OptionalParam<QString> &period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &metadata = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &current_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void gETAnalyticsLiveStreamsLiveStreamIdCallback(OAIHttpRequestWorker *worker);
    void gETAnalyticsSessionsSessionIdEventsCallback(OAIHttpRequestWorker *worker);
    void gETAnalyticsVideosVideoIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void gETAnalyticsLiveStreamsLiveStreamIdSignal(OAIRaw_statistics_list_live_stream_analytics_response summary);
    void gETAnalyticsSessionsSessionIdEventsSignal(OAIRaw_statistics_list_player_session_events_response summary);
    void gETAnalyticsVideosVideoIdSignal(OAIRaw_statistics_list_sessions_response summary);


    void gETAnalyticsLiveStreamsLiveStreamIdSignalFull(OAIHttpRequestWorker *worker, OAIRaw_statistics_list_live_stream_analytics_response summary);
    void gETAnalyticsSessionsSessionIdEventsSignalFull(OAIHttpRequestWorker *worker, OAIRaw_statistics_list_player_session_events_response summary);
    void gETAnalyticsVideosVideoIdSignalFull(OAIHttpRequestWorker *worker, OAIRaw_statistics_list_sessions_response summary);

    Q_DECL_DEPRECATED_X("Use gETAnalyticsLiveStreamsLiveStreamIdSignalError() instead")
    void gETAnalyticsLiveStreamsLiveStreamIdSignalE(OAIRaw_statistics_list_live_stream_analytics_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAnalyticsLiveStreamsLiveStreamIdSignalError(OAIRaw_statistics_list_live_stream_analytics_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAnalyticsSessionsSessionIdEventsSignalError() instead")
    void gETAnalyticsSessionsSessionIdEventsSignalE(OAIRaw_statistics_list_player_session_events_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAnalyticsSessionsSessionIdEventsSignalError(OAIRaw_statistics_list_player_session_events_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAnalyticsVideosVideoIdSignalError() instead")
    void gETAnalyticsVideosVideoIdSignalE(OAIRaw_statistics_list_sessions_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAnalyticsVideosVideoIdSignalError(OAIRaw_statistics_list_sessions_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use gETAnalyticsLiveStreamsLiveStreamIdSignalErrorFull() instead")
    void gETAnalyticsLiveStreamsLiveStreamIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAnalyticsLiveStreamsLiveStreamIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAnalyticsSessionsSessionIdEventsSignalErrorFull() instead")
    void gETAnalyticsSessionsSessionIdEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAnalyticsSessionsSessionIdEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAnalyticsVideosVideoIdSignalErrorFull() instead")
    void gETAnalyticsVideosVideoIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAnalyticsVideosVideoIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
