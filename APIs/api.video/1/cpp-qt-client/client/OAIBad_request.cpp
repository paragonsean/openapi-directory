/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBad_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBad_request::OAIBad_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBad_request::OAIBad_request() {
    this->initializeModel();
}

OAIBad_request::~OAIBad_request() {}

void OAIBad_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_problems_isSet = false;
    m_problems_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIBad_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBad_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_problems_isValid = ::OpenAPI::fromJsonValue(m_problems, json[QString("problems")]);
    m_problems_isSet = !json[QString("problems")].isNull() && m_problems_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIBad_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBad_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_problems.size() > 0) {
        obj.insert(QString("problems"), ::OpenAPI::toJsonValue(m_problems));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIBad_request::getName() const {
    return m_name;
}
void OAIBad_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBad_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBad_request::is_name_Valid() const{
    return m_name_isValid;
}

QSet<OAIBad_request> OAIBad_request::getProblems() const {
    return m_problems;
}
void OAIBad_request::setProblems(const QSet<OAIBad_request> &problems) {
    m_problems = problems;
    m_problems_isSet = true;
}

bool OAIBad_request::is_problems_Set() const{
    return m_problems_isSet;
}

bool OAIBad_request::is_problems_Valid() const{
    return m_problems_isValid;
}

qint32 OAIBad_request::getStatus() const {
    return m_status;
}
void OAIBad_request::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBad_request::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBad_request::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIBad_request::getTitle() const {
    return m_title;
}
void OAIBad_request::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIBad_request::is_title_Set() const{
    return m_title_isSet;
}

bool OAIBad_request::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIBad_request::getType() const {
    return m_type;
}
void OAIBad_request::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBad_request::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBad_request::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIBad_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_problems.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBad_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
