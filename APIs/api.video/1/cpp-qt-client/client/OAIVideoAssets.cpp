/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoAssets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoAssets::OAIVideoAssets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoAssets::OAIVideoAssets() {
    this->initializeModel();
}

OAIVideoAssets::~OAIVideoAssets() {}

void OAIVideoAssets::initializeModel() {

    m_hls_isSet = false;
    m_hls_isValid = false;

    m_iframe_isSet = false;
    m_iframe_isValid = false;

    m_mp4_isSet = false;
    m_mp4_isValid = false;

    m_player_isSet = false;
    m_player_isValid = false;

    m_thumbnail_isSet = false;
    m_thumbnail_isValid = false;
}

void OAIVideoAssets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoAssets::fromJsonObject(QJsonObject json) {

    m_hls_isValid = ::OpenAPI::fromJsonValue(m_hls, json[QString("hls")]);
    m_hls_isSet = !json[QString("hls")].isNull() && m_hls_isValid;

    m_iframe_isValid = ::OpenAPI::fromJsonValue(m_iframe, json[QString("iframe")]);
    m_iframe_isSet = !json[QString("iframe")].isNull() && m_iframe_isValid;

    m_mp4_isValid = ::OpenAPI::fromJsonValue(m_mp4, json[QString("mp4")]);
    m_mp4_isSet = !json[QString("mp4")].isNull() && m_mp4_isValid;

    m_player_isValid = ::OpenAPI::fromJsonValue(m_player, json[QString("player")]);
    m_player_isSet = !json[QString("player")].isNull() && m_player_isValid;

    m_thumbnail_isValid = ::OpenAPI::fromJsonValue(m_thumbnail, json[QString("thumbnail")]);
    m_thumbnail_isSet = !json[QString("thumbnail")].isNull() && m_thumbnail_isValid;
}

QString OAIVideoAssets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoAssets::asJsonObject() const {
    QJsonObject obj;
    if (m_hls_isSet) {
        obj.insert(QString("hls"), ::OpenAPI::toJsonValue(m_hls));
    }
    if (m_iframe_isSet) {
        obj.insert(QString("iframe"), ::OpenAPI::toJsonValue(m_iframe));
    }
    if (m_mp4_isSet) {
        obj.insert(QString("mp4"), ::OpenAPI::toJsonValue(m_mp4));
    }
    if (m_player_isSet) {
        obj.insert(QString("player"), ::OpenAPI::toJsonValue(m_player));
    }
    if (m_thumbnail_isSet) {
        obj.insert(QString("thumbnail"), ::OpenAPI::toJsonValue(m_thumbnail));
    }
    return obj;
}

QString OAIVideoAssets::getHls() const {
    return m_hls;
}
void OAIVideoAssets::setHls(const QString &hls) {
    m_hls = hls;
    m_hls_isSet = true;
}

bool OAIVideoAssets::is_hls_Set() const{
    return m_hls_isSet;
}

bool OAIVideoAssets::is_hls_Valid() const{
    return m_hls_isValid;
}

QString OAIVideoAssets::getIframe() const {
    return m_iframe;
}
void OAIVideoAssets::setIframe(const QString &iframe) {
    m_iframe = iframe;
    m_iframe_isSet = true;
}

bool OAIVideoAssets::is_iframe_Set() const{
    return m_iframe_isSet;
}

bool OAIVideoAssets::is_iframe_Valid() const{
    return m_iframe_isValid;
}

QString OAIVideoAssets::getMp4() const {
    return m_mp4;
}
void OAIVideoAssets::setMp4(const QString &mp4) {
    m_mp4 = mp4;
    m_mp4_isSet = true;
}

bool OAIVideoAssets::is_mp4_Set() const{
    return m_mp4_isSet;
}

bool OAIVideoAssets::is_mp4_Valid() const{
    return m_mp4_isValid;
}

QString OAIVideoAssets::getPlayer() const {
    return m_player;
}
void OAIVideoAssets::setPlayer(const QString &player) {
    m_player = player;
    m_player_isSet = true;
}

bool OAIVideoAssets::is_player_Set() const{
    return m_player_isSet;
}

bool OAIVideoAssets::is_player_Valid() const{
    return m_player_isValid;
}

QString OAIVideoAssets::getThumbnail() const {
    return m_thumbnail;
}
void OAIVideoAssets::setThumbnail(const QString &thumbnail) {
    m_thumbnail = thumbnail;
    m_thumbnail_isSet = true;
}

bool OAIVideoAssets::is_thumbnail_Set() const{
    return m_thumbnail_isSet;
}

bool OAIVideoAssets::is_thumbnail_Valid() const{
    return m_thumbnail_isValid;
}

bool OAIVideoAssets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iframe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mp4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoAssets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
