/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideostatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideostatus::OAIVideostatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideostatus::OAIVideostatus() {
    this->initializeModel();
}

OAIVideostatus::~OAIVideostatus() {}

void OAIVideostatus::initializeModel() {

    m_encoding_isSet = false;
    m_encoding_isValid = false;

    m_ingest_isSet = false;
    m_ingest_isValid = false;
}

void OAIVideostatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideostatus::fromJsonObject(QJsonObject json) {

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;

    m_ingest_isValid = ::OpenAPI::fromJsonValue(m_ingest, json[QString("ingest")]);
    m_ingest_isSet = !json[QString("ingest")].isNull() && m_ingest_isValid;
}

QString OAIVideostatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideostatus::asJsonObject() const {
    QJsonObject obj;
    if (m_encoding.isSet()) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    if (m_ingest.isSet()) {
        obj.insert(QString("ingest"), ::OpenAPI::toJsonValue(m_ingest));
    }
    return obj;
}

OAIVideostatus_encoding OAIVideostatus::getEncoding() const {
    return m_encoding;
}
void OAIVideostatus::setEncoding(const OAIVideostatus_encoding &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAIVideostatus::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAIVideostatus::is_encoding_Valid() const{
    return m_encoding_isValid;
}

OAIVideostatus_ingest OAIVideostatus::getIngest() const {
    return m_ingest;
}
void OAIVideostatus::setIngest(const OAIVideostatus_ingest &ingest) {
    m_ingest = ingest;
    m_ingest_isSet = true;
}

bool OAIVideostatus::is_ingest_Set() const{
    return m_ingest_isSet;
}

bool OAIVideostatus::is_ingest_Valid() const{
    return m_ingest_isValid;
}

bool OAIVideostatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encoding.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingest.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideostatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
