/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPlayersApi_H
#define OAI_OAIPlayersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBad_request.h"
#include "OAIHttpFileElement.h"
#include "OAINot_found.h"
#include "OAIObject.h"
#include "OAIPlayer.h"
#include "OAIPlayerCreationPayload.h"
#include "OAIPlayerUpdatePayload.h"
#include "OAIPlayers_list_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPlayersApi : public QObject {
    Q_OBJECT

public:
    OAIPlayersApi(const int timeOut = 0);
    ~OAIPlayersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  player_id QString [required]
    */
    virtual void dELETEPlayersPlayerId(const QString &player_id);

    /**
    * @param[in]  player_id QString [required]
    */
    virtual void dELETEPlayersPlayerIdLogo(const QString &player_id);

    /**
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  current_page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void gETPlayers(const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &current_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  player_id QString [required]
    */
    virtual void gETPlayersPlayerId(const QString &player_id);

    /**
    * @param[in]  player_id QString [required]
    * @param[in]  oai_player_update_payload OAIPlayerUpdatePayload [required]
    */
    virtual void pATCHPlayersPlayerId(const QString &player_id, const OAIPlayerUpdatePayload &oai_player_update_payload);

    /**
    * @param[in]  oai_player_creation_payload OAIPlayerCreationPayload [required]
    */
    virtual void pOSTPlayers(const OAIPlayerCreationPayload &oai_player_creation_payload);

    /**
    * @param[in]  player_id QString [required]
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  link QString [required]
    */
    virtual void pOSTPlayersPlayerIdLogo(const QString &player_id, const OAIHttpFileElement &file, const QString &link);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dELETEPlayersPlayerIdCallback(OAIHttpRequestWorker *worker);
    void dELETEPlayersPlayerIdLogoCallback(OAIHttpRequestWorker *worker);
    void gETPlayersCallback(OAIHttpRequestWorker *worker);
    void gETPlayersPlayerIdCallback(OAIHttpRequestWorker *worker);
    void pATCHPlayersPlayerIdCallback(OAIHttpRequestWorker *worker);
    void pOSTPlayersCallback(OAIHttpRequestWorker *worker);
    void pOSTPlayersPlayerIdLogoCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dELETEPlayersPlayerIdSignal();
    void dELETEPlayersPlayerIdLogoSignal(OAIObject summary);
    void gETPlayersSignal(OAIPlayers_list_response summary);
    void gETPlayersPlayerIdSignal(OAIPlayer summary);
    void pATCHPlayersPlayerIdSignal(OAIPlayer summary);
    void pOSTPlayersSignal(OAIPlayer summary);
    void pOSTPlayersPlayerIdLogoSignal(OAIPlayer summary);


    void dELETEPlayersPlayerIdSignalFull(OAIHttpRequestWorker *worker);
    void dELETEPlayersPlayerIdLogoSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETPlayersSignalFull(OAIHttpRequestWorker *worker, OAIPlayers_list_response summary);
    void gETPlayersPlayerIdSignalFull(OAIHttpRequestWorker *worker, OAIPlayer summary);
    void pATCHPlayersPlayerIdSignalFull(OAIHttpRequestWorker *worker, OAIPlayer summary);
    void pOSTPlayersSignalFull(OAIHttpRequestWorker *worker, OAIPlayer summary);
    void pOSTPlayersPlayerIdLogoSignalFull(OAIHttpRequestWorker *worker, OAIPlayer summary);

    Q_DECL_DEPRECATED_X("Use dELETEPlayersPlayerIdSignalError() instead")
    void dELETEPlayersPlayerIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dELETEPlayersPlayerIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dELETEPlayersPlayerIdLogoSignalError() instead")
    void dELETEPlayersPlayerIdLogoSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dELETEPlayersPlayerIdLogoSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPlayersSignalError() instead")
    void gETPlayersSignalE(OAIPlayers_list_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPlayersSignalError(OAIPlayers_list_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPlayersPlayerIdSignalError() instead")
    void gETPlayersPlayerIdSignalE(OAIPlayer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPlayersPlayerIdSignalError(OAIPlayer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pATCHPlayersPlayerIdSignalError() instead")
    void pATCHPlayersPlayerIdSignalE(OAIPlayer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pATCHPlayersPlayerIdSignalError(OAIPlayer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPlayersSignalError() instead")
    void pOSTPlayersSignalE(OAIPlayer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPlayersSignalError(OAIPlayer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPlayersPlayerIdLogoSignalError() instead")
    void pOSTPlayersPlayerIdLogoSignalE(OAIPlayer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPlayersPlayerIdLogoSignalError(OAIPlayer summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dELETEPlayersPlayerIdSignalErrorFull() instead")
    void dELETEPlayersPlayerIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dELETEPlayersPlayerIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dELETEPlayersPlayerIdLogoSignalErrorFull() instead")
    void dELETEPlayersPlayerIdLogoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dELETEPlayersPlayerIdLogoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPlayersSignalErrorFull() instead")
    void gETPlayersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPlayersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPlayersPlayerIdSignalErrorFull() instead")
    void gETPlayersPlayerIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPlayersPlayerIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pATCHPlayersPlayerIdSignalErrorFull() instead")
    void pATCHPlayersPlayerIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pATCHPlayersPlayerIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPlayersSignalErrorFull() instead")
    void pOSTPlayersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPlayersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPlayersPlayerIdLogoSignalErrorFull() instead")
    void pOSTPlayersPlayerIdLogoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPlayersPlayerIdLogoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
