/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideostatus_encoding_metadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideostatus_encoding_metadata::OAIVideostatus_encoding_metadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideostatus_encoding_metadata::OAIVideostatus_encoding_metadata() {
    this->initializeModel();
}

OAIVideostatus_encoding_metadata::~OAIVideostatus_encoding_metadata() {}

void OAIVideostatus_encoding_metadata::initializeModel() {

    m_aspect_ratio_isSet = false;
    m_aspect_ratio_isValid = false;

    m_audio_codec_isSet = false;
    m_audio_codec_isValid = false;

    m_bitrate_isSet = false;
    m_bitrate_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_framerate_isSet = false;
    m_framerate_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_samplerate_isSet = false;
    m_samplerate_isValid = false;

    m_video_codec_isSet = false;
    m_video_codec_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIVideostatus_encoding_metadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideostatus_encoding_metadata::fromJsonObject(QJsonObject json) {

    m_aspect_ratio_isValid = ::OpenAPI::fromJsonValue(m_aspect_ratio, json[QString("aspectRatio")]);
    m_aspect_ratio_isSet = !json[QString("aspectRatio")].isNull() && m_aspect_ratio_isValid;

    m_audio_codec_isValid = ::OpenAPI::fromJsonValue(m_audio_codec, json[QString("audioCodec")]);
    m_audio_codec_isSet = !json[QString("audioCodec")].isNull() && m_audio_codec_isValid;

    m_bitrate_isValid = ::OpenAPI::fromJsonValue(m_bitrate, json[QString("bitrate")]);
    m_bitrate_isSet = !json[QString("bitrate")].isNull() && m_bitrate_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_framerate_isValid = ::OpenAPI::fromJsonValue(m_framerate, json[QString("framerate")]);
    m_framerate_isSet = !json[QString("framerate")].isNull() && m_framerate_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_samplerate_isValid = ::OpenAPI::fromJsonValue(m_samplerate, json[QString("samplerate")]);
    m_samplerate_isSet = !json[QString("samplerate")].isNull() && m_samplerate_isValid;

    m_video_codec_isValid = ::OpenAPI::fromJsonValue(m_video_codec, json[QString("videoCodec")]);
    m_video_codec_isSet = !json[QString("videoCodec")].isNull() && m_video_codec_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIVideostatus_encoding_metadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideostatus_encoding_metadata::asJsonObject() const {
    QJsonObject obj;
    if (m_aspect_ratio_isSet) {
        obj.insert(QString("aspectRatio"), ::OpenAPI::toJsonValue(m_aspect_ratio));
    }
    if (m_audio_codec_isSet) {
        obj.insert(QString("audioCodec"), ::OpenAPI::toJsonValue(m_audio_codec));
    }
    if (m_bitrate_isSet) {
        obj.insert(QString("bitrate"), ::OpenAPI::toJsonValue(m_bitrate));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_framerate_isSet) {
        obj.insert(QString("framerate"), ::OpenAPI::toJsonValue(m_framerate));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_samplerate_isSet) {
        obj.insert(QString("samplerate"), ::OpenAPI::toJsonValue(m_samplerate));
    }
    if (m_video_codec_isSet) {
        obj.insert(QString("videoCodec"), ::OpenAPI::toJsonValue(m_video_codec));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAIVideostatus_encoding_metadata::getAspectRatio() const {
    return m_aspect_ratio;
}
void OAIVideostatus_encoding_metadata::setAspectRatio(const QString &aspect_ratio) {
    m_aspect_ratio = aspect_ratio;
    m_aspect_ratio_isSet = true;
}

bool OAIVideostatus_encoding_metadata::is_aspect_ratio_Set() const{
    return m_aspect_ratio_isSet;
}

bool OAIVideostatus_encoding_metadata::is_aspect_ratio_Valid() const{
    return m_aspect_ratio_isValid;
}

QString OAIVideostatus_encoding_metadata::getAudioCodec() const {
    return m_audio_codec;
}
void OAIVideostatus_encoding_metadata::setAudioCodec(const QString &audio_codec) {
    m_audio_codec = audio_codec;
    m_audio_codec_isSet = true;
}

bool OAIVideostatus_encoding_metadata::is_audio_codec_Set() const{
    return m_audio_codec_isSet;
}

bool OAIVideostatus_encoding_metadata::is_audio_codec_Valid() const{
    return m_audio_codec_isValid;
}

double OAIVideostatus_encoding_metadata::getBitrate() const {
    return m_bitrate;
}
void OAIVideostatus_encoding_metadata::setBitrate(const double &bitrate) {
    m_bitrate = bitrate;
    m_bitrate_isSet = true;
}

bool OAIVideostatus_encoding_metadata::is_bitrate_Set() const{
    return m_bitrate_isSet;
}

bool OAIVideostatus_encoding_metadata::is_bitrate_Valid() const{
    return m_bitrate_isValid;
}

qint32 OAIVideostatus_encoding_metadata::getDuration() const {
    return m_duration;
}
void OAIVideostatus_encoding_metadata::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIVideostatus_encoding_metadata::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIVideostatus_encoding_metadata::is_duration_Valid() const{
    return m_duration_isValid;
}

qint32 OAIVideostatus_encoding_metadata::getFramerate() const {
    return m_framerate;
}
void OAIVideostatus_encoding_metadata::setFramerate(const qint32 &framerate) {
    m_framerate = framerate;
    m_framerate_isSet = true;
}

bool OAIVideostatus_encoding_metadata::is_framerate_Set() const{
    return m_framerate_isSet;
}

bool OAIVideostatus_encoding_metadata::is_framerate_Valid() const{
    return m_framerate_isValid;
}

qint32 OAIVideostatus_encoding_metadata::getHeight() const {
    return m_height;
}
void OAIVideostatus_encoding_metadata::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIVideostatus_encoding_metadata::is_height_Set() const{
    return m_height_isSet;
}

bool OAIVideostatus_encoding_metadata::is_height_Valid() const{
    return m_height_isValid;
}

qint32 OAIVideostatus_encoding_metadata::getSamplerate() const {
    return m_samplerate;
}
void OAIVideostatus_encoding_metadata::setSamplerate(const qint32 &samplerate) {
    m_samplerate = samplerate;
    m_samplerate_isSet = true;
}

bool OAIVideostatus_encoding_metadata::is_samplerate_Set() const{
    return m_samplerate_isSet;
}

bool OAIVideostatus_encoding_metadata::is_samplerate_Valid() const{
    return m_samplerate_isValid;
}

QString OAIVideostatus_encoding_metadata::getVideoCodec() const {
    return m_video_codec;
}
void OAIVideostatus_encoding_metadata::setVideoCodec(const QString &video_codec) {
    m_video_codec = video_codec;
    m_video_codec_isSet = true;
}

bool OAIVideostatus_encoding_metadata::is_video_codec_Set() const{
    return m_video_codec_isSet;
}

bool OAIVideostatus_encoding_metadata::is_video_codec_Valid() const{
    return m_video_codec_isValid;
}

qint32 OAIVideostatus_encoding_metadata::getWidth() const {
    return m_width;
}
void OAIVideostatus_encoding_metadata::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIVideostatus_encoding_metadata::is_width_Set() const{
    return m_width_isSet;
}

bool OAIVideostatus_encoding_metadata::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIVideostatus_encoding_metadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aspect_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_codec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_framerate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_samplerate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_codec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideostatus_encoding_metadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
