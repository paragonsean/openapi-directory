/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccount_quota.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccount_quota::OAIAccount_quota(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccount_quota::OAIAccount_quota() {
    this->initializeModel();
}

OAIAccount_quota::~OAIAccount_quota() {}

void OAIAccount_quota::initializeModel() {

    m_quota_remaining_isSet = false;
    m_quota_remaining_isValid = false;

    m_quota_total_isSet = false;
    m_quota_total_isValid = false;

    m_quota_used_isSet = false;
    m_quota_used_isValid = false;
}

void OAIAccount_quota::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccount_quota::fromJsonObject(QJsonObject json) {

    m_quota_remaining_isValid = ::OpenAPI::fromJsonValue(m_quota_remaining, json[QString("quotaRemaining")]);
    m_quota_remaining_isSet = !json[QString("quotaRemaining")].isNull() && m_quota_remaining_isValid;

    m_quota_total_isValid = ::OpenAPI::fromJsonValue(m_quota_total, json[QString("quotaTotal")]);
    m_quota_total_isSet = !json[QString("quotaTotal")].isNull() && m_quota_total_isValid;

    m_quota_used_isValid = ::OpenAPI::fromJsonValue(m_quota_used, json[QString("quotaUsed")]);
    m_quota_used_isSet = !json[QString("quotaUsed")].isNull() && m_quota_used_isValid;
}

QString OAIAccount_quota::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccount_quota::asJsonObject() const {
    QJsonObject obj;
    if (m_quota_remaining_isSet) {
        obj.insert(QString("quotaRemaining"), ::OpenAPI::toJsonValue(m_quota_remaining));
    }
    if (m_quota_total_isSet) {
        obj.insert(QString("quotaTotal"), ::OpenAPI::toJsonValue(m_quota_total));
    }
    if (m_quota_used_isSet) {
        obj.insert(QString("quotaUsed"), ::OpenAPI::toJsonValue(m_quota_used));
    }
    return obj;
}

double OAIAccount_quota::getQuotaRemaining() const {
    return m_quota_remaining;
}
void OAIAccount_quota::setQuotaRemaining(const double &quota_remaining) {
    m_quota_remaining = quota_remaining;
    m_quota_remaining_isSet = true;
}

bool OAIAccount_quota::is_quota_remaining_Set() const{
    return m_quota_remaining_isSet;
}

bool OAIAccount_quota::is_quota_remaining_Valid() const{
    return m_quota_remaining_isValid;
}

double OAIAccount_quota::getQuotaTotal() const {
    return m_quota_total;
}
void OAIAccount_quota::setQuotaTotal(const double &quota_total) {
    m_quota_total = quota_total;
    m_quota_total_isSet = true;
}

bool OAIAccount_quota::is_quota_total_Set() const{
    return m_quota_total_isSet;
}

bool OAIAccount_quota::is_quota_total_Valid() const{
    return m_quota_total_isValid;
}

double OAIAccount_quota::getQuotaUsed() const {
    return m_quota_used;
}
void OAIAccount_quota::setQuotaUsed(const double &quota_used) {
    m_quota_used = quota_used;
    m_quota_used_isSet = true;
}

bool OAIAccount_quota::is_quota_used_Set() const{
    return m_quota_used_isSet;
}

bool OAIAccount_quota::is_quota_used_Valid() const{
    return m_quota_used_isValid;
}

bool OAIAccount_quota::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_quota_remaining_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_used_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccount_quota::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
