/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayer::OAIPlayer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayer::OAIPlayer() {
    this->initializeModel();
}

OAIPlayer::~OAIPlayer() {}

void OAIPlayer::initializeModel() {

    m_background_bottom_isSet = false;
    m_background_bottom_isValid = false;

    m_background_text_isSet = false;
    m_background_text_isValid = false;

    m_background_top_isSet = false;
    m_background_top_isValid = false;

    m_enable_api_isSet = false;
    m_enable_api_isValid = false;

    m_enable_controls_isSet = false;
    m_enable_controls_isValid = false;

    m_force_autoplay_isSet = false;
    m_force_autoplay_isValid = false;

    m_force_loop_isSet = false;
    m_force_loop_isValid = false;

    m_hide_title_isSet = false;
    m_hide_title_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_link_hover_isSet = false;
    m_link_hover_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_track_background_isSet = false;
    m_track_background_isValid = false;

    m_track_played_isSet = false;
    m_track_played_isValid = false;

    m_track_unplayed_isSet = false;
    m_track_unplayed_isValid = false;

    m_assets_isSet = false;
    m_assets_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_link_active_isSet = false;
    m_link_active_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_shape_aspect_isSet = false;
    m_shape_aspect_isValid = false;

    m_shape_background_bottom_isSet = false;
    m_shape_background_bottom_isValid = false;

    m_shape_background_top_isSet = false;
    m_shape_background_top_isValid = false;

    m_shape_margin_isSet = false;
    m_shape_margin_isValid = false;

    m_shape_radius_isSet = false;
    m_shape_radius_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIPlayer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayer::fromJsonObject(QJsonObject json) {

    m_background_bottom_isValid = ::OpenAPI::fromJsonValue(m_background_bottom, json[QString("backgroundBottom")]);
    m_background_bottom_isSet = !json[QString("backgroundBottom")].isNull() && m_background_bottom_isValid;

    m_background_text_isValid = ::OpenAPI::fromJsonValue(m_background_text, json[QString("backgroundText")]);
    m_background_text_isSet = !json[QString("backgroundText")].isNull() && m_background_text_isValid;

    m_background_top_isValid = ::OpenAPI::fromJsonValue(m_background_top, json[QString("backgroundTop")]);
    m_background_top_isSet = !json[QString("backgroundTop")].isNull() && m_background_top_isValid;

    m_enable_api_isValid = ::OpenAPI::fromJsonValue(m_enable_api, json[QString("enableApi")]);
    m_enable_api_isSet = !json[QString("enableApi")].isNull() && m_enable_api_isValid;

    m_enable_controls_isValid = ::OpenAPI::fromJsonValue(m_enable_controls, json[QString("enableControls")]);
    m_enable_controls_isSet = !json[QString("enableControls")].isNull() && m_enable_controls_isValid;

    m_force_autoplay_isValid = ::OpenAPI::fromJsonValue(m_force_autoplay, json[QString("forceAutoplay")]);
    m_force_autoplay_isSet = !json[QString("forceAutoplay")].isNull() && m_force_autoplay_isValid;

    m_force_loop_isValid = ::OpenAPI::fromJsonValue(m_force_loop, json[QString("forceLoop")]);
    m_force_loop_isSet = !json[QString("forceLoop")].isNull() && m_force_loop_isValid;

    m_hide_title_isValid = ::OpenAPI::fromJsonValue(m_hide_title, json[QString("hideTitle")]);
    m_hide_title_isSet = !json[QString("hideTitle")].isNull() && m_hide_title_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_link_hover_isValid = ::OpenAPI::fromJsonValue(m_link_hover, json[QString("linkHover")]);
    m_link_hover_isSet = !json[QString("linkHover")].isNull() && m_link_hover_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_track_background_isValid = ::OpenAPI::fromJsonValue(m_track_background, json[QString("trackBackground")]);
    m_track_background_isSet = !json[QString("trackBackground")].isNull() && m_track_background_isValid;

    m_track_played_isValid = ::OpenAPI::fromJsonValue(m_track_played, json[QString("trackPlayed")]);
    m_track_played_isSet = !json[QString("trackPlayed")].isNull() && m_track_played_isValid;

    m_track_unplayed_isValid = ::OpenAPI::fromJsonValue(m_track_unplayed, json[QString("trackUnplayed")]);
    m_track_unplayed_isSet = !json[QString("trackUnplayed")].isNull() && m_track_unplayed_isValid;

    m_assets_isValid = ::OpenAPI::fromJsonValue(m_assets, json[QString("assets")]);
    m_assets_isSet = !json[QString("assets")].isNull() && m_assets_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_link_active_isValid = ::OpenAPI::fromJsonValue(m_link_active, json[QString("linkActive")]);
    m_link_active_isSet = !json[QString("linkActive")].isNull() && m_link_active_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("playerId")]);
    m_player_id_isSet = !json[QString("playerId")].isNull() && m_player_id_isValid;

    m_shape_aspect_isValid = ::OpenAPI::fromJsonValue(m_shape_aspect, json[QString("shapeAspect")]);
    m_shape_aspect_isSet = !json[QString("shapeAspect")].isNull() && m_shape_aspect_isValid;

    m_shape_background_bottom_isValid = ::OpenAPI::fromJsonValue(m_shape_background_bottom, json[QString("shapeBackgroundBottom")]);
    m_shape_background_bottom_isSet = !json[QString("shapeBackgroundBottom")].isNull() && m_shape_background_bottom_isValid;

    m_shape_background_top_isValid = ::OpenAPI::fromJsonValue(m_shape_background_top, json[QString("shapeBackgroundTop")]);
    m_shape_background_top_isSet = !json[QString("shapeBackgroundTop")].isNull() && m_shape_background_top_isValid;

    m_shape_margin_isValid = ::OpenAPI::fromJsonValue(m_shape_margin, json[QString("shapeMargin")]);
    m_shape_margin_isSet = !json[QString("shapeMargin")].isNull() && m_shape_margin_isValid;

    m_shape_radius_isValid = ::OpenAPI::fromJsonValue(m_shape_radius, json[QString("shapeRadius")]);
    m_shape_radius_isSet = !json[QString("shapeRadius")].isNull() && m_shape_radius_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIPlayer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayer::asJsonObject() const {
    QJsonObject obj;
    if (m_background_bottom_isSet) {
        obj.insert(QString("backgroundBottom"), ::OpenAPI::toJsonValue(m_background_bottom));
    }
    if (m_background_text_isSet) {
        obj.insert(QString("backgroundText"), ::OpenAPI::toJsonValue(m_background_text));
    }
    if (m_background_top_isSet) {
        obj.insert(QString("backgroundTop"), ::OpenAPI::toJsonValue(m_background_top));
    }
    if (m_enable_api_isSet) {
        obj.insert(QString("enableApi"), ::OpenAPI::toJsonValue(m_enable_api));
    }
    if (m_enable_controls_isSet) {
        obj.insert(QString("enableControls"), ::OpenAPI::toJsonValue(m_enable_controls));
    }
    if (m_force_autoplay_isSet) {
        obj.insert(QString("forceAutoplay"), ::OpenAPI::toJsonValue(m_force_autoplay));
    }
    if (m_force_loop_isSet) {
        obj.insert(QString("forceLoop"), ::OpenAPI::toJsonValue(m_force_loop));
    }
    if (m_hide_title_isSet) {
        obj.insert(QString("hideTitle"), ::OpenAPI::toJsonValue(m_hide_title));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_link_hover_isSet) {
        obj.insert(QString("linkHover"), ::OpenAPI::toJsonValue(m_link_hover));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_track_background_isSet) {
        obj.insert(QString("trackBackground"), ::OpenAPI::toJsonValue(m_track_background));
    }
    if (m_track_played_isSet) {
        obj.insert(QString("trackPlayed"), ::OpenAPI::toJsonValue(m_track_played));
    }
    if (m_track_unplayed_isSet) {
        obj.insert(QString("trackUnplayed"), ::OpenAPI::toJsonValue(m_track_unplayed));
    }
    if (m_assets.isSet()) {
        obj.insert(QString("assets"), ::OpenAPI::toJsonValue(m_assets));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_link_active_isSet) {
        obj.insert(QString("linkActive"), ::OpenAPI::toJsonValue(m_link_active));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("playerId"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_shape_aspect_isSet) {
        obj.insert(QString("shapeAspect"), ::OpenAPI::toJsonValue(m_shape_aspect));
    }
    if (m_shape_background_bottom_isSet) {
        obj.insert(QString("shapeBackgroundBottom"), ::OpenAPI::toJsonValue(m_shape_background_bottom));
    }
    if (m_shape_background_top_isSet) {
        obj.insert(QString("shapeBackgroundTop"), ::OpenAPI::toJsonValue(m_shape_background_top));
    }
    if (m_shape_margin_isSet) {
        obj.insert(QString("shapeMargin"), ::OpenAPI::toJsonValue(m_shape_margin));
    }
    if (m_shape_radius_isSet) {
        obj.insert(QString("shapeRadius"), ::OpenAPI::toJsonValue(m_shape_radius));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIPlayer::getBackgroundBottom() const {
    return m_background_bottom;
}
void OAIPlayer::setBackgroundBottom(const QString &background_bottom) {
    m_background_bottom = background_bottom;
    m_background_bottom_isSet = true;
}

bool OAIPlayer::is_background_bottom_Set() const{
    return m_background_bottom_isSet;
}

bool OAIPlayer::is_background_bottom_Valid() const{
    return m_background_bottom_isValid;
}

QString OAIPlayer::getBackgroundText() const {
    return m_background_text;
}
void OAIPlayer::setBackgroundText(const QString &background_text) {
    m_background_text = background_text;
    m_background_text_isSet = true;
}

bool OAIPlayer::is_background_text_Set() const{
    return m_background_text_isSet;
}

bool OAIPlayer::is_background_text_Valid() const{
    return m_background_text_isValid;
}

QString OAIPlayer::getBackgroundTop() const {
    return m_background_top;
}
void OAIPlayer::setBackgroundTop(const QString &background_top) {
    m_background_top = background_top;
    m_background_top_isSet = true;
}

bool OAIPlayer::is_background_top_Set() const{
    return m_background_top_isSet;
}

bool OAIPlayer::is_background_top_Valid() const{
    return m_background_top_isValid;
}

bool OAIPlayer::isEnableApi() const {
    return m_enable_api;
}
void OAIPlayer::setEnableApi(const bool &enable_api) {
    m_enable_api = enable_api;
    m_enable_api_isSet = true;
}

bool OAIPlayer::is_enable_api_Set() const{
    return m_enable_api_isSet;
}

bool OAIPlayer::is_enable_api_Valid() const{
    return m_enable_api_isValid;
}

bool OAIPlayer::isEnableControls() const {
    return m_enable_controls;
}
void OAIPlayer::setEnableControls(const bool &enable_controls) {
    m_enable_controls = enable_controls;
    m_enable_controls_isSet = true;
}

bool OAIPlayer::is_enable_controls_Set() const{
    return m_enable_controls_isSet;
}

bool OAIPlayer::is_enable_controls_Valid() const{
    return m_enable_controls_isValid;
}

bool OAIPlayer::isForceAutoplay() const {
    return m_force_autoplay;
}
void OAIPlayer::setForceAutoplay(const bool &force_autoplay) {
    m_force_autoplay = force_autoplay;
    m_force_autoplay_isSet = true;
}

bool OAIPlayer::is_force_autoplay_Set() const{
    return m_force_autoplay_isSet;
}

bool OAIPlayer::is_force_autoplay_Valid() const{
    return m_force_autoplay_isValid;
}

bool OAIPlayer::isForceLoop() const {
    return m_force_loop;
}
void OAIPlayer::setForceLoop(const bool &force_loop) {
    m_force_loop = force_loop;
    m_force_loop_isSet = true;
}

bool OAIPlayer::is_force_loop_Set() const{
    return m_force_loop_isSet;
}

bool OAIPlayer::is_force_loop_Valid() const{
    return m_force_loop_isValid;
}

bool OAIPlayer::isHideTitle() const {
    return m_hide_title;
}
void OAIPlayer::setHideTitle(const bool &hide_title) {
    m_hide_title = hide_title;
    m_hide_title_isSet = true;
}

bool OAIPlayer::is_hide_title_Set() const{
    return m_hide_title_isSet;
}

bool OAIPlayer::is_hide_title_Valid() const{
    return m_hide_title_isValid;
}

QString OAIPlayer::getLink() const {
    return m_link;
}
void OAIPlayer::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIPlayer::is_link_Set() const{
    return m_link_isSet;
}

bool OAIPlayer::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIPlayer::getLinkHover() const {
    return m_link_hover;
}
void OAIPlayer::setLinkHover(const QString &link_hover) {
    m_link_hover = link_hover;
    m_link_hover_isSet = true;
}

bool OAIPlayer::is_link_hover_Set() const{
    return m_link_hover_isSet;
}

bool OAIPlayer::is_link_hover_Valid() const{
    return m_link_hover_isValid;
}

QString OAIPlayer::getText() const {
    return m_text;
}
void OAIPlayer::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIPlayer::is_text_Set() const{
    return m_text_isSet;
}

bool OAIPlayer::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIPlayer::getTrackBackground() const {
    return m_track_background;
}
void OAIPlayer::setTrackBackground(const QString &track_background) {
    m_track_background = track_background;
    m_track_background_isSet = true;
}

bool OAIPlayer::is_track_background_Set() const{
    return m_track_background_isSet;
}

bool OAIPlayer::is_track_background_Valid() const{
    return m_track_background_isValid;
}

QString OAIPlayer::getTrackPlayed() const {
    return m_track_played;
}
void OAIPlayer::setTrackPlayed(const QString &track_played) {
    m_track_played = track_played;
    m_track_played_isSet = true;
}

bool OAIPlayer::is_track_played_Set() const{
    return m_track_played_isSet;
}

bool OAIPlayer::is_track_played_Valid() const{
    return m_track_played_isValid;
}

QString OAIPlayer::getTrackUnplayed() const {
    return m_track_unplayed;
}
void OAIPlayer::setTrackUnplayed(const QString &track_unplayed) {
    m_track_unplayed = track_unplayed;
    m_track_unplayed_isSet = true;
}

bool OAIPlayer::is_track_unplayed_Set() const{
    return m_track_unplayed_isSet;
}

bool OAIPlayer::is_track_unplayed_Valid() const{
    return m_track_unplayed_isValid;
}

OAIPlayer_allOf_assets OAIPlayer::getAssets() const {
    return m_assets;
}
void OAIPlayer::setAssets(const OAIPlayer_allOf_assets &assets) {
    m_assets = assets;
    m_assets_isSet = true;
}

bool OAIPlayer::is_assets_Set() const{
    return m_assets_isSet;
}

bool OAIPlayer::is_assets_Valid() const{
    return m_assets_isValid;
}

QDateTime OAIPlayer::getCreatedAt() const {
    return m_created_at;
}
void OAIPlayer::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPlayer::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPlayer::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIPlayer::getLinkActive() const {
    return m_link_active;
}
void OAIPlayer::setLinkActive(const QString &link_active) {
    m_link_active = link_active;
    m_link_active_isSet = true;
}

bool OAIPlayer::is_link_active_Set() const{
    return m_link_active_isSet;
}

bool OAIPlayer::is_link_active_Valid() const{
    return m_link_active_isValid;
}

QString OAIPlayer::getPlayerId() const {
    return m_player_id;
}
void OAIPlayer::setPlayerId(const QString &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIPlayer::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIPlayer::is_player_id_Valid() const{
    return m_player_id_isValid;
}

QString OAIPlayer::getShapeAspect() const {
    return m_shape_aspect;
}
void OAIPlayer::setShapeAspect(const QString &shape_aspect) {
    m_shape_aspect = shape_aspect;
    m_shape_aspect_isSet = true;
}

bool OAIPlayer::is_shape_aspect_Set() const{
    return m_shape_aspect_isSet;
}

bool OAIPlayer::is_shape_aspect_Valid() const{
    return m_shape_aspect_isValid;
}

QString OAIPlayer::getShapeBackgroundBottom() const {
    return m_shape_background_bottom;
}
void OAIPlayer::setShapeBackgroundBottom(const QString &shape_background_bottom) {
    m_shape_background_bottom = shape_background_bottom;
    m_shape_background_bottom_isSet = true;
}

bool OAIPlayer::is_shape_background_bottom_Set() const{
    return m_shape_background_bottom_isSet;
}

bool OAIPlayer::is_shape_background_bottom_Valid() const{
    return m_shape_background_bottom_isValid;
}

QString OAIPlayer::getShapeBackgroundTop() const {
    return m_shape_background_top;
}
void OAIPlayer::setShapeBackgroundTop(const QString &shape_background_top) {
    m_shape_background_top = shape_background_top;
    m_shape_background_top_isSet = true;
}

bool OAIPlayer::is_shape_background_top_Set() const{
    return m_shape_background_top_isSet;
}

bool OAIPlayer::is_shape_background_top_Valid() const{
    return m_shape_background_top_isValid;
}

qint32 OAIPlayer::getShapeMargin() const {
    return m_shape_margin;
}
void OAIPlayer::setShapeMargin(const qint32 &shape_margin) {
    m_shape_margin = shape_margin;
    m_shape_margin_isSet = true;
}

bool OAIPlayer::is_shape_margin_Set() const{
    return m_shape_margin_isSet;
}

bool OAIPlayer::is_shape_margin_Valid() const{
    return m_shape_margin_isValid;
}

qint32 OAIPlayer::getShapeRadius() const {
    return m_shape_radius;
}
void OAIPlayer::setShapeRadius(const qint32 &shape_radius) {
    m_shape_radius = shape_radius;
    m_shape_radius_isSet = true;
}

bool OAIPlayer::is_shape_radius_Set() const{
    return m_shape_radius_isSet;
}

bool OAIPlayer::is_shape_radius_Valid() const{
    return m_shape_radius_isValid;
}

QDateTime OAIPlayer::getUpdatedAt() const {
    return m_updated_at;
}
void OAIPlayer::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIPlayer::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIPlayer::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIPlayer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_bottom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_top_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_api_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_controls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_autoplay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_loop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_hover_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_background_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_played_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_unplayed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_aspect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_background_bottom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_background_top_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_margin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shape_radius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
