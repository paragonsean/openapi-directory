# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UploadToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, expires_at: datetime=None, token: str=None, ttl: int=None):
        """UploadToken - a model defined in OpenAPI

        :param created_at: The created_at of this UploadToken.
        :param expires_at: The expires_at of this UploadToken.
        :param token: The token of this UploadToken.
        :param ttl: The ttl of this UploadToken.
        """
        self.openapi_types = {
            'created_at': datetime,
            'expires_at': datetime,
            'token': str,
            'ttl': int
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'expires_at': 'expiresAt',
            'token': 'token',
            'ttl': 'ttl'
        }

        self._created_at = created_at
        self._expires_at = expires_at
        self._token = token
        self._ttl = ttl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UploadToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The upload-token of this UploadToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this UploadToken.

        When the token was created, displayed in ISO-8601 format.

        :return: The created_at of this UploadToken.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UploadToken.

        When the token was created, displayed in ISO-8601 format.

        :param created_at: The created_at of this UploadToken.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def expires_at(self):
        """Gets the expires_at of this UploadToken.

        When the token expires, displayed in ISO-8601 format.

        :return: The expires_at of this UploadToken.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this UploadToken.

        When the token expires, displayed in ISO-8601 format.

        :param expires_at: The expires_at of this UploadToken.
        :type expires_at: datetime
        """

        self._expires_at = expires_at

    @property
    def token(self):
        """Gets the token of this UploadToken.

        The unique identifier for the token you will use to authenticate an upload.

        :return: The token of this UploadToken.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this UploadToken.

        The unique identifier for the token you will use to authenticate an upload.

        :param token: The token of this UploadToken.
        :type token: str
        """

        self._token = token

    @property
    def ttl(self):
        """Gets the ttl of this UploadToken.

        Time-to-live - how long the upload token is valid for.

        :return: The ttl of this UploadToken.
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this UploadToken.

        Time-to-live - how long the upload token is valid for.

        :param ttl: The ttl of this UploadToken.
        :type ttl: int
        """
        if ttl is not None and ttl > 2147483647:
            raise ValueError("Invalid value for `ttl`, must be a value less than or equal to `2147483647`")
        if ttl is not None and ttl < 0:
            raise ValueError("Invalid value for `ttl`, must be a value greater than or equal to `0`")

        self._ttl = ttl
