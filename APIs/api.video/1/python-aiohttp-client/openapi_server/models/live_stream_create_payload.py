# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LiveStreamCreatePayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, player_id: str=None, public: bool=None, record: bool=False):
        """LiveStreamCreatePayload - a model defined in OpenAPI

        :param name: The name of this LiveStreamCreatePayload.
        :param player_id: The player_id of this LiveStreamCreatePayload.
        :param public: The public of this LiveStreamCreatePayload.
        :param record: The record of this LiveStreamCreatePayload.
        """
        self.openapi_types = {
            'name': str,
            'player_id': str,
            'public': bool,
            'record': bool
        }

        self.attribute_map = {
            'name': 'name',
            'player_id': 'playerId',
            'public': 'public',
            'record': 'record'
        }

        self._name = name
        self._player_id = player_id
        self._public = public
        self._record = record

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveStreamCreatePayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The live-stream-create-payload of this LiveStreamCreatePayload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this LiveStreamCreatePayload.

        Add a name for your live stream here.

        :return: The name of this LiveStreamCreatePayload.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LiveStreamCreatePayload.

        Add a name for your live stream here.

        :param name: The name of this LiveStreamCreatePayload.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def player_id(self):
        """Gets the player_id of this LiveStreamCreatePayload.

        The unique identifier for the player.

        :return: The player_id of this LiveStreamCreatePayload.
        :rtype: str
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this LiveStreamCreatePayload.

        The unique identifier for the player.

        :param player_id: The player_id of this LiveStreamCreatePayload.
        :type player_id: str
        """

        self._player_id = player_id

    @property
    def public(self):
        """Gets the public of this LiveStreamCreatePayload.

        BETA FEATURE Please limit all public = false (\"private\") livestreams to 3,000 users. Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view.

        :return: The public of this LiveStreamCreatePayload.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this LiveStreamCreatePayload.

        BETA FEATURE Please limit all public = false (\"private\") livestreams to 3,000 users. Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view.

        :param public: The public of this LiveStreamCreatePayload.
        :type public: bool
        """

        self._public = public

    @property
    def record(self):
        """Gets the record of this LiveStreamCreatePayload.

        Whether you are recording or not. True for record, false for not record.

        :return: The record of this LiveStreamCreatePayload.
        :rtype: bool
        """
        return self._record

    @record.setter
    def record(self, record):
        """Sets the record of this LiveStreamCreatePayload.

        Whether you are recording or not. True for record, false for not record.

        :param record: The record of this LiveStreamCreatePayload.
        :type record: bool
        """

        self._record = record
