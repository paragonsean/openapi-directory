# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VideostatusEncodingMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aspect_ratio: str=None, audio_codec: str=None, bitrate: float=None, duration: int=None, framerate: int=None, height: int=None, samplerate: int=None, video_codec: str=None, width: int=None):
        """VideostatusEncodingMetadata - a model defined in OpenAPI

        :param aspect_ratio: The aspect_ratio of this VideostatusEncodingMetadata.
        :param audio_codec: The audio_codec of this VideostatusEncodingMetadata.
        :param bitrate: The bitrate of this VideostatusEncodingMetadata.
        :param duration: The duration of this VideostatusEncodingMetadata.
        :param framerate: The framerate of this VideostatusEncodingMetadata.
        :param height: The height of this VideostatusEncodingMetadata.
        :param samplerate: The samplerate of this VideostatusEncodingMetadata.
        :param video_codec: The video_codec of this VideostatusEncodingMetadata.
        :param width: The width of this VideostatusEncodingMetadata.
        """
        self.openapi_types = {
            'aspect_ratio': str,
            'audio_codec': str,
            'bitrate': float,
            'duration': int,
            'framerate': int,
            'height': int,
            'samplerate': int,
            'video_codec': str,
            'width': int
        }

        self.attribute_map = {
            'aspect_ratio': 'aspectRatio',
            'audio_codec': 'audioCodec',
            'bitrate': 'bitrate',
            'duration': 'duration',
            'framerate': 'framerate',
            'height': 'height',
            'samplerate': 'samplerate',
            'video_codec': 'videoCodec',
            'width': 'width'
        }

        self._aspect_ratio = aspect_ratio
        self._audio_codec = audio_codec
        self._bitrate = bitrate
        self._duration = duration
        self._framerate = framerate
        self._height = height
        self._samplerate = samplerate
        self._video_codec = video_codec
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideostatusEncodingMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The videostatus_encoding_metadata of this VideostatusEncodingMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aspect_ratio(self):
        """Gets the aspect_ratio of this VideostatusEncodingMetadata.


        :return: The aspect_ratio of this VideostatusEncodingMetadata.
        :rtype: str
        """
        return self._aspect_ratio

    @aspect_ratio.setter
    def aspect_ratio(self, aspect_ratio):
        """Sets the aspect_ratio of this VideostatusEncodingMetadata.


        :param aspect_ratio: The aspect_ratio of this VideostatusEncodingMetadata.
        :type aspect_ratio: str
        """

        self._aspect_ratio = aspect_ratio

    @property
    def audio_codec(self):
        """Gets the audio_codec of this VideostatusEncodingMetadata.

        The method used to compress and decompress digital audio for your video.

        :return: The audio_codec of this VideostatusEncodingMetadata.
        :rtype: str
        """
        return self._audio_codec

    @audio_codec.setter
    def audio_codec(self, audio_codec):
        """Sets the audio_codec of this VideostatusEncodingMetadata.

        The method used to compress and decompress digital audio for your video.

        :param audio_codec: The audio_codec of this VideostatusEncodingMetadata.
        :type audio_codec: str
        """

        self._audio_codec = audio_codec

    @property
    def bitrate(self):
        """Gets the bitrate of this VideostatusEncodingMetadata.

        The number of bits processed per second.

        :return: The bitrate of this VideostatusEncodingMetadata.
        :rtype: float
        """
        return self._bitrate

    @bitrate.setter
    def bitrate(self, bitrate):
        """Sets the bitrate of this VideostatusEncodingMetadata.

        The number of bits processed per second.

        :param bitrate: The bitrate of this VideostatusEncodingMetadata.
        :type bitrate: float
        """

        self._bitrate = bitrate

    @property
    def duration(self):
        """Gets the duration of this VideostatusEncodingMetadata.

        The length of the video.

        :return: The duration of this VideostatusEncodingMetadata.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this VideostatusEncodingMetadata.

        The length of the video.

        :param duration: The duration of this VideostatusEncodingMetadata.
        :type duration: int
        """

        self._duration = duration

    @property
    def framerate(self):
        """Gets the framerate of this VideostatusEncodingMetadata.

        The frequency with which consecutive images or frames appear on a display. Shown in this API as frames per second (fps).

        :return: The framerate of this VideostatusEncodingMetadata.
        :rtype: int
        """
        return self._framerate

    @framerate.setter
    def framerate(self, framerate):
        """Sets the framerate of this VideostatusEncodingMetadata.

        The frequency with which consecutive images or frames appear on a display. Shown in this API as frames per second (fps).

        :param framerate: The framerate of this VideostatusEncodingMetadata.
        :type framerate: int
        """

        self._framerate = framerate

    @property
    def height(self):
        """Gets the height of this VideostatusEncodingMetadata.

        The height of the video in pixels.

        :return: The height of this VideostatusEncodingMetadata.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this VideostatusEncodingMetadata.

        The height of the video in pixels.

        :param height: The height of this VideostatusEncodingMetadata.
        :type height: int
        """

        self._height = height

    @property
    def samplerate(self):
        """Gets the samplerate of this VideostatusEncodingMetadata.

        How many samples per second a digital audio system uses to record an audio signal. The higher the rate, the higher the frequencies that can be recorded. They are presented in this API using hertz.

        :return: The samplerate of this VideostatusEncodingMetadata.
        :rtype: int
        """
        return self._samplerate

    @samplerate.setter
    def samplerate(self, samplerate):
        """Sets the samplerate of this VideostatusEncodingMetadata.

        How many samples per second a digital audio system uses to record an audio signal. The higher the rate, the higher the frequencies that can be recorded. They are presented in this API using hertz.

        :param samplerate: The samplerate of this VideostatusEncodingMetadata.
        :type samplerate: int
        """

        self._samplerate = samplerate

    @property
    def video_codec(self):
        """Gets the video_codec of this VideostatusEncodingMetadata.

        The method used to compress and decompress digital video. API Video supports all codecs in the libavcodec library. 

        :return: The video_codec of this VideostatusEncodingMetadata.
        :rtype: str
        """
        return self._video_codec

    @video_codec.setter
    def video_codec(self, video_codec):
        """Sets the video_codec of this VideostatusEncodingMetadata.

        The method used to compress and decompress digital video. API Video supports all codecs in the libavcodec library. 

        :param video_codec: The video_codec of this VideostatusEncodingMetadata.
        :type video_codec: str
        """

        self._video_codec = video_codec

    @property
    def width(self):
        """Gets the width of this VideostatusEncodingMetadata.

        The width of the video in pixels.

        :return: The width of this VideostatusEncodingMetadata.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this VideostatusEncodingMetadata.

        The width of the video in pixels.

        :param width: The width of this VideostatusEncodingMetadata.
        :type width: int
        """

        self._width = width
