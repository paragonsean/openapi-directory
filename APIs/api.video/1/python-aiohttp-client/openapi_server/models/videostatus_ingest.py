# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bytes_range import BytesRange
from openapi_server import util


class VideostatusIngest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filesize: int=None, received_bytes: List[BytesRange]=None, status: str=None):
        """VideostatusIngest - a model defined in OpenAPI

        :param filesize: The filesize of this VideostatusIngest.
        :param received_bytes: The received_bytes of this VideostatusIngest.
        :param status: The status of this VideostatusIngest.
        """
        self.openapi_types = {
            'filesize': int,
            'received_bytes': List[BytesRange],
            'status': str
        }

        self.attribute_map = {
            'filesize': 'filesize',
            'received_bytes': 'receivedBytes',
            'status': 'status'
        }

        self._filesize = filesize
        self._received_bytes = received_bytes
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideostatusIngest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The videostatus_ingest of this VideostatusIngest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filesize(self):
        """Gets the filesize of this VideostatusIngest.

        The size of your file in bytes.

        :return: The filesize of this VideostatusIngest.
        :rtype: int
        """
        return self._filesize

    @filesize.setter
    def filesize(self, filesize):
        """Sets the filesize of this VideostatusIngest.

        The size of your file in bytes.

        :param filesize: The filesize of this VideostatusIngest.
        :type filesize: int
        """

        self._filesize = filesize

    @property
    def received_bytes(self):
        """Gets the received_bytes of this VideostatusIngest.

        The total number of bytes received, listed for each chunk of the upload.

        :return: The received_bytes of this VideostatusIngest.
        :rtype: List[BytesRange]
        """
        return self._received_bytes

    @received_bytes.setter
    def received_bytes(self, received_bytes):
        """Sets the received_bytes of this VideostatusIngest.

        The total number of bytes received, listed for each chunk of the upload.

        :param received_bytes: The received_bytes of this VideostatusIngest.
        :type received_bytes: List[BytesRange]
        """

        self._received_bytes = received_bytes

    @property
    def status(self):
        """Gets the status of this VideostatusIngest.

        There are three possible ingest statuses. missing - you are missing information required to ingest the video. uploading - the video is in the process of being uploaded. uploaded - the video is ready for use.

        :return: The status of this VideostatusIngest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VideostatusIngest.

        There are three possible ingest statuses. missing - you are missing information required to ingest the video. uploading - the video is in the process of being uploaded. uploaded - the video is ready for use.

        :param status: The status of this VideostatusIngest.
        :type status: str
        """
        allowed_values = ["missing", "uploading", "uploaded"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
