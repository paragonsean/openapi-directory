# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class VideoThumbnailPickPayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timecode: str=None):
        """VideoThumbnailPickPayload - a model defined in OpenAPI

        :param timecode: The timecode of this VideoThumbnailPickPayload.
        """
        self.openapi_types = {
            'timecode': str
        }

        self.attribute_map = {
            'timecode': 'timecode'
        }

        self._timecode = timecode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoThumbnailPickPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The video-thumbnail-pick-payload of this VideoThumbnailPickPayload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timecode(self):
        """Gets the timecode of this VideoThumbnailPickPayload.

        Frame in video to be used as a placeholder before the video plays.  Example: '\"00:01:00.000\" for 1 minute into the video.' Valid Patterns:  \"hh:mm:ss.ms\" \"hh:mm:ss:frameNumber\" \"124\" (integer value is reported as seconds)  If selection is out of range, \"00:00:00.00\" will be chosen.

        :return: The timecode of this VideoThumbnailPickPayload.
        :rtype: str
        """
        return self._timecode

    @timecode.setter
    def timecode(self, timecode):
        """Sets the timecode of this VideoThumbnailPickPayload.

        Frame in video to be used as a placeholder before the video plays.  Example: '\"00:01:00.000\" for 1 minute into the video.' Valid Patterns:  \"hh:mm:ss.ms\" \"hh:mm:ss:frameNumber\" \"124\" (integer value is reported as seconds)  If selection is out of range, \"00:00:00.00\" will be chosen.

        :param timecode: The timecode of this VideoThumbnailPickPayload.
        :type timecode: str
        """
        if timecode is None:
            raise ValueError("Invalid value for `timecode`, must not be `None`")
        if timecode is not None and not re.search(r'0.0', timecode):
            raise ValueError("Invalid value for `timecode`, must be a follow pattern or equal to `/0.0/`")

        self._timecode = timecode
