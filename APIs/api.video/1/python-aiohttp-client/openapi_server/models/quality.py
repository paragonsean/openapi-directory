# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Quality(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, quality: str=None, status: str=None):
        """Quality - a model defined in OpenAPI

        :param quality: The quality of this Quality.
        :param status: The status of this Quality.
        """
        self.openapi_types = {
            'quality': str,
            'status': str
        }

        self.attribute_map = {
            'quality': 'quality',
            'status': 'status'
        }

        self._quality = quality
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Quality':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The quality of this Quality.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def quality(self):
        """Gets the quality of this Quality.

        The quality of the video you have, in pixels. Choices include 360p, 480p, 720p, 1080p, and 2160p.

        :return: The quality of this Quality.
        :rtype: str
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this Quality.

        The quality of the video you have, in pixels. Choices include 360p, 480p, 720p, 1080p, and 2160p.

        :param quality: The quality of this Quality.
        :type quality: str
        """
        allowed_values = ["240p", "360p", "480p", "720p", "1080p", "2160p"]  # noqa: E501
        if quality not in allowed_values:
            raise ValueError(
                "Invalid value for `quality` ({0}), must be one of {1}"
                .format(quality, allowed_values)
            )

        self._quality = quality

    @property
    def status(self):
        """Gets the status of this Quality.

        The status of your video. Statuses include waiting - the video is waiting to be encoded. encoding - the video is in the process of being encoded. encoded - the video was successfully encoded. failed - the video failed to be encoded.

        :return: The status of this Quality.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Quality.

        The status of your video. Statuses include waiting - the video is waiting to be encoded. encoding - the video is in the process of being encoded. encoded - the video was successfully encoded. failed - the video failed to be encoded.

        :param status: The status of this Quality.
        :type status: str
        """
        allowed_values = ["waiting", "encoding", "encoded", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
