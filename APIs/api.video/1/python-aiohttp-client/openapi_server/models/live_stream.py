# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.live_stream_assets import LiveStreamAssets
from openapi_server import util


class LiveStream(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets: LiveStreamAssets=None, broadcasting: bool=None, live_stream_id: str=None, name: str=None, player_id: str=None, public: bool=None, record: bool=None, stream_key: str=None):
        """LiveStream - a model defined in OpenAPI

        :param assets: The assets of this LiveStream.
        :param broadcasting: The broadcasting of this LiveStream.
        :param live_stream_id: The live_stream_id of this LiveStream.
        :param name: The name of this LiveStream.
        :param player_id: The player_id of this LiveStream.
        :param public: The public of this LiveStream.
        :param record: The record of this LiveStream.
        :param stream_key: The stream_key of this LiveStream.
        """
        self.openapi_types = {
            'assets': LiveStreamAssets,
            'broadcasting': bool,
            'live_stream_id': str,
            'name': str,
            'player_id': str,
            'public': bool,
            'record': bool,
            'stream_key': str
        }

        self.attribute_map = {
            'assets': 'assets',
            'broadcasting': 'broadcasting',
            'live_stream_id': 'liveStreamId',
            'name': 'name',
            'player_id': 'playerId',
            'public': 'public',
            'record': 'record',
            'stream_key': 'streamKey'
        }

        self._assets = assets
        self._broadcasting = broadcasting
        self._live_stream_id = live_stream_id
        self._name = name
        self._player_id = player_id
        self._public = public
        self._record = record
        self._stream_key = stream_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveStream':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The live-stream of this LiveStream.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self):
        """Gets the assets of this LiveStream.


        :return: The assets of this LiveStream.
        :rtype: LiveStreamAssets
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this LiveStream.


        :param assets: The assets of this LiveStream.
        :type assets: LiveStreamAssets
        """

        self._assets = assets

    @property
    def broadcasting(self):
        """Gets the broadcasting of this LiveStream.

        Whether or not you are broadcasting the live video you recorded for others to see. True means you are broadcasting to viewers, false means you are not.

        :return: The broadcasting of this LiveStream.
        :rtype: bool
        """
        return self._broadcasting

    @broadcasting.setter
    def broadcasting(self, broadcasting):
        """Sets the broadcasting of this LiveStream.

        Whether or not you are broadcasting the live video you recorded for others to see. True means you are broadcasting to viewers, false means you are not.

        :param broadcasting: The broadcasting of this LiveStream.
        :type broadcasting: bool
        """

        self._broadcasting = broadcasting

    @property
    def live_stream_id(self):
        """Gets the live_stream_id of this LiveStream.

        The unique identifier for the live stream. Live stream IDs begin with \"li.\"

        :return: The live_stream_id of this LiveStream.
        :rtype: str
        """
        return self._live_stream_id

    @live_stream_id.setter
    def live_stream_id(self, live_stream_id):
        """Sets the live_stream_id of this LiveStream.

        The unique identifier for the live stream. Live stream IDs begin with \"li.\"

        :param live_stream_id: The live_stream_id of this LiveStream.
        :type live_stream_id: str
        """

        self._live_stream_id = live_stream_id

    @property
    def name(self):
        """Gets the name of this LiveStream.

        The name of your live stream.

        :return: The name of this LiveStream.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LiveStream.

        The name of your live stream.

        :param name: The name of this LiveStream.
        :type name: str
        """

        self._name = name

    @property
    def player_id(self):
        """Gets the player_id of this LiveStream.

        The unique identifier for the player.

        :return: The player_id of this LiveStream.
        :rtype: str
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this LiveStream.

        The unique identifier for the player.

        :param player_id: The player_id of this LiveStream.
        :type player_id: str
        """

        self._player_id = player_id

    @property
    def public(self):
        """Gets the public of this LiveStream.

        BETA FEATURE Please limit all public = false (\"private\") livestreams to 3,000 users. Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view.

        :return: The public of this LiveStream.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this LiveStream.

        BETA FEATURE Please limit all public = false (\"private\") livestreams to 3,000 users. Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view.

        :param public: The public of this LiveStream.
        :type public: bool
        """

        self._public = public

    @property
    def record(self):
        """Gets the record of this LiveStream.

        Whether you are recording or not.

        :return: The record of this LiveStream.
        :rtype: bool
        """
        return self._record

    @record.setter
    def record(self, record):
        """Sets the record of this LiveStream.

        Whether you are recording or not.

        :param record: The record of this LiveStream.
        :type record: bool
        """

        self._record = record

    @property
    def stream_key(self):
        """Gets the stream_key of this LiveStream.

        The unique, private stream key that you use to begin streaming.

        :return: The stream_key of this LiveStream.
        :rtype: str
        """
        return self._stream_key

    @stream_key.setter
    def stream_key(self, stream_key):
        """Sets the stream_key of this LiveStream.

        The unique, private stream key that you use to begin streaming.

        :param stream_key: The stream_key of this LiveStream.
        :type stream_key: str
        """

        self._stream_key = stream_key
