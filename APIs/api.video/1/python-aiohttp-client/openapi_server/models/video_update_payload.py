# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metadata import Metadata
from openapi_server import util


class VideoUpdatePayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, metadata: List[Metadata]=None, mp4_support: bool=None, panoramic: bool=None, player_id: str=None, public: bool=None, tags: List[str]=None, title: str=None):
        """VideoUpdatePayload - a model defined in OpenAPI

        :param description: The description of this VideoUpdatePayload.
        :param metadata: The metadata of this VideoUpdatePayload.
        :param mp4_support: The mp4_support of this VideoUpdatePayload.
        :param panoramic: The panoramic of this VideoUpdatePayload.
        :param player_id: The player_id of this VideoUpdatePayload.
        :param public: The public of this VideoUpdatePayload.
        :param tags: The tags of this VideoUpdatePayload.
        :param title: The title of this VideoUpdatePayload.
        """
        self.openapi_types = {
            'description': str,
            'metadata': List[Metadata],
            'mp4_support': bool,
            'panoramic': bool,
            'player_id': str,
            'public': bool,
            'tags': List[str],
            'title': str
        }

        self.attribute_map = {
            'description': 'description',
            'metadata': 'metadata',
            'mp4_support': 'mp4Support',
            'panoramic': 'panoramic',
            'player_id': 'playerId',
            'public': 'public',
            'tags': 'tags',
            'title': 'title'
        }

        self._description = description
        self._metadata = metadata
        self._mp4_support = mp4_support
        self._panoramic = panoramic
        self._player_id = player_id
        self._public = public
        self._tags = tags
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoUpdatePayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The video-update-payload of this VideoUpdatePayload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this VideoUpdatePayload.

        A brief description of the video.

        :return: The description of this VideoUpdatePayload.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VideoUpdatePayload.

        A brief description of the video.

        :param description: The description of this VideoUpdatePayload.
        :type description: str
        """

        self._description = description

    @property
    def metadata(self):
        """Gets the metadata of this VideoUpdatePayload.

        A list (array) of dictionaries where each dictionary contains a key value pair that describes the video. As with tags, you must send the complete list of metadata you want as whatever you send here will overwrite the existing metadata for the video. [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) allows you to define a key that allows any value pair.

        :return: The metadata of this VideoUpdatePayload.
        :rtype: List[Metadata]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this VideoUpdatePayload.

        A list (array) of dictionaries where each dictionary contains a key value pair that describes the video. As with tags, you must send the complete list of metadata you want as whatever you send here will overwrite the existing metadata for the video. [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) allows you to define a key that allows any value pair.

        :param metadata: The metadata of this VideoUpdatePayload.
        :type metadata: List[Metadata]
        """

        self._metadata = metadata

    @property
    def mp4_support(self):
        """Gets the mp4_support of this VideoUpdatePayload.

        Whether the player supports the mp4 format.

        :return: The mp4_support of this VideoUpdatePayload.
        :rtype: bool
        """
        return self._mp4_support

    @mp4_support.setter
    def mp4_support(self, mp4_support):
        """Sets the mp4_support of this VideoUpdatePayload.

        Whether the player supports the mp4 format.

        :param mp4_support: The mp4_support of this VideoUpdatePayload.
        :type mp4_support: bool
        """

        self._mp4_support = mp4_support

    @property
    def panoramic(self):
        """Gets the panoramic of this VideoUpdatePayload.

        Whether the video is a 360 degree or immersive video.

        :return: The panoramic of this VideoUpdatePayload.
        :rtype: bool
        """
        return self._panoramic

    @panoramic.setter
    def panoramic(self, panoramic):
        """Sets the panoramic of this VideoUpdatePayload.

        Whether the video is a 360 degree or immersive video.

        :param panoramic: The panoramic of this VideoUpdatePayload.
        :type panoramic: bool
        """

        self._panoramic = panoramic

    @property
    def player_id(self):
        """Gets the player_id of this VideoUpdatePayload.

        The unique ID for the player you want to associate with your video.

        :return: The player_id of this VideoUpdatePayload.
        :rtype: str
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this VideoUpdatePayload.

        The unique ID for the player you want to associate with your video.

        :param player_id: The player_id of this VideoUpdatePayload.
        :type player_id: str
        """

        self._player_id = player_id

    @property
    def public(self):
        """Gets the public of this VideoUpdatePayload.

        Whether the video is publicly available or not. False means it is set to private. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos).

        :return: The public of this VideoUpdatePayload.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this VideoUpdatePayload.

        Whether the video is publicly available or not. False means it is set to private. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos).

        :param public: The public of this VideoUpdatePayload.
        :type public: bool
        """

        self._public = public

    @property
    def tags(self):
        """Gets the tags of this VideoUpdatePayload.

        A list of terms or words you want to tag the video with. Make sure the list includes all the tags you want as whatever you send in this list will overwrite the existing list for the video.

        :return: The tags of this VideoUpdatePayload.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this VideoUpdatePayload.

        A list of terms or words you want to tag the video with. Make sure the list includes all the tags you want as whatever you send in this list will overwrite the existing list for the video.

        :param tags: The tags of this VideoUpdatePayload.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def title(self):
        """Gets the title of this VideoUpdatePayload.

        The title you want to use for your video.

        :return: The title of this VideoUpdatePayload.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this VideoUpdatePayload.

        The title you want to use for your video.

        :param title: The title of this VideoUpdatePayload.
        :type title: str
        """

        self._title = title
