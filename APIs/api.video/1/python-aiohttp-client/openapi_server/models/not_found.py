# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NotFound(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, status: int=None, title: str=None, type: str=None):
        """NotFound - a model defined in OpenAPI

        :param name: The name of this NotFound.
        :param status: The status of this NotFound.
        :param title: The title of this NotFound.
        :param type: The type of this NotFound.
        """
        self.openapi_types = {
            'name': str,
            'status': int,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'name': 'name',
            'status': 'status',
            'title': 'title',
            'type': 'type'
        }

        self._name = name
        self._status = status
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotFound':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The not-found of this NotFound.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this NotFound.


        :return: The name of this NotFound.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NotFound.


        :param name: The name of this NotFound.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this NotFound.


        :return: The status of this NotFound.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NotFound.


        :param status: The status of this NotFound.
        :type status: int
        """

        self._status = status

    @property
    def title(self):
        """Gets the title of this NotFound.


        :return: The title of this NotFound.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this NotFound.


        :param title: The title of this NotFound.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this NotFound.


        :return: The type of this NotFound.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NotFound.


        :param type: The type of this NotFound.
        :type type: str
        """

        self._type = type
