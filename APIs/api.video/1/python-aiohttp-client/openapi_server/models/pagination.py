# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pagination_link import PaginationLink
from openapi_server import util


class Pagination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_page: int=None, current_page_items: int=None, items_total: int=None, links: List[PaginationLink]=None, page_size: int=None, pages_total: int=None):
        """Pagination - a model defined in OpenAPI

        :param current_page: The current_page of this Pagination.
        :param current_page_items: The current_page_items of this Pagination.
        :param items_total: The items_total of this Pagination.
        :param links: The links of this Pagination.
        :param page_size: The page_size of this Pagination.
        :param pages_total: The pages_total of this Pagination.
        """
        self.openapi_types = {
            'current_page': int,
            'current_page_items': int,
            'items_total': int,
            'links': List[PaginationLink],
            'page_size': int,
            'pages_total': int
        }

        self.attribute_map = {
            'current_page': 'currentPage',
            'current_page_items': 'currentPageItems',
            'items_total': 'itemsTotal',
            'links': 'links',
            'page_size': 'pageSize',
            'pages_total': 'pagesTotal'
        }

        self._current_page = current_page
        self._current_page_items = current_page_items
        self._items_total = items_total
        self._links = links
        self._page_size = page_size
        self._pages_total = pages_total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Pagination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The pagination of this Pagination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_page(self):
        """Gets the current_page of this Pagination.

        The current page index.

        :return: The current_page of this Pagination.
        :rtype: int
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page):
        """Sets the current_page of this Pagination.

        The current page index.

        :param current_page: The current_page of this Pagination.
        :type current_page: int
        """

        self._current_page = current_page

    @property
    def current_page_items(self):
        """Gets the current_page_items of this Pagination.

        The number of items on the current page.

        :return: The current_page_items of this Pagination.
        :rtype: int
        """
        return self._current_page_items

    @current_page_items.setter
    def current_page_items(self, current_page_items):
        """Sets the current_page_items of this Pagination.

        The number of items on the current page.

        :param current_page_items: The current_page_items of this Pagination.
        :type current_page_items: int
        """

        self._current_page_items = current_page_items

    @property
    def items_total(self):
        """Gets the items_total of this Pagination.

        Total number of items that exist.

        :return: The items_total of this Pagination.
        :rtype: int
        """
        return self._items_total

    @items_total.setter
    def items_total(self, items_total):
        """Sets the items_total of this Pagination.

        Total number of items that exist.

        :param items_total: The items_total of this Pagination.
        :type items_total: int
        """

        self._items_total = items_total

    @property
    def links(self):
        """Gets the links of this Pagination.


        :return: The links of this Pagination.
        :rtype: List[PaginationLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Pagination.


        :param links: The links of this Pagination.
        :type links: List[PaginationLink]
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def page_size(self):
        """Gets the page_size of this Pagination.

        Maximum number of item per page.

        :return: The page_size of this Pagination.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this Pagination.

        Maximum number of item per page.

        :param page_size: The page_size of this Pagination.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def pages_total(self):
        """Gets the pages_total of this Pagination.

        Number of items listed in the current page.

        :return: The pages_total of this Pagination.
        :rtype: int
        """
        return self._pages_total

    @pages_total.setter
    def pages_total(self, pages_total):
        """Sets the pages_total of this Pagination.

        Number of items listed in the current page.

        :param pages_total: The pages_total of this Pagination.
        :type pages_total: int
        """

        self._pages_total = pages_total
