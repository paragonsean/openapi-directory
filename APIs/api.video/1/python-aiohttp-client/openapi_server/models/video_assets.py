# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VideoAssets(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hls: str=None, iframe: str=None, mp4: str=None, player: str=None, thumbnail: str=None):
        """VideoAssets - a model defined in OpenAPI

        :param hls: The hls of this VideoAssets.
        :param iframe: The iframe of this VideoAssets.
        :param mp4: The mp4 of this VideoAssets.
        :param player: The player of this VideoAssets.
        :param thumbnail: The thumbnail of this VideoAssets.
        """
        self.openapi_types = {
            'hls': str,
            'iframe': str,
            'mp4': str,
            'player': str,
            'thumbnail': str
        }

        self.attribute_map = {
            'hls': 'hls',
            'iframe': 'iframe',
            'mp4': 'mp4',
            'player': 'player',
            'thumbnail': 'thumbnail'
        }

        self._hls = hls
        self._iframe = iframe
        self._mp4 = mp4
        self._player = player
        self._thumbnail = thumbnail

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoAssets':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The videoAssets of this VideoAssets.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hls(self):
        """Gets the hls of this VideoAssets.

        This is the manifest URL. For HTTP Live Streaming (HLS), when a HLS video stream is initiated, the first file to download is the manifest. This file has the extension M3U8, and provides the video player with information about the various bitrates available for streaming.

        :return: The hls of this VideoAssets.
        :rtype: str
        """
        return self._hls

    @hls.setter
    def hls(self, hls):
        """Sets the hls of this VideoAssets.

        This is the manifest URL. For HTTP Live Streaming (HLS), when a HLS video stream is initiated, the first file to download is the manifest. This file has the extension M3U8, and provides the video player with information about the various bitrates available for streaming.

        :param hls: The hls of this VideoAssets.
        :type hls: str
        """

        self._hls = hls

    @property
    def iframe(self):
        """Gets the iframe of this VideoAssets.

        Code to use video from a third party website

        :return: The iframe of this VideoAssets.
        :rtype: str
        """
        return self._iframe

    @iframe.setter
    def iframe(self, iframe):
        """Sets the iframe of this VideoAssets.

        Code to use video from a third party website

        :param iframe: The iframe of this VideoAssets.
        :type iframe: str
        """

        self._iframe = iframe

    @property
    def mp4(self):
        """Gets the mp4 of this VideoAssets.

        Available only if mp4Support is enabled. Raw mp4 url.

        :return: The mp4 of this VideoAssets.
        :rtype: str
        """
        return self._mp4

    @mp4.setter
    def mp4(self, mp4):
        """Sets the mp4 of this VideoAssets.

        Available only if mp4Support is enabled. Raw mp4 url.

        :param mp4: The mp4 of this VideoAssets.
        :type mp4: str
        """

        self._mp4 = mp4

    @property
    def player(self):
        """Gets the player of this VideoAssets.

        Raw url of the player.

        :return: The player of this VideoAssets.
        :rtype: str
        """
        return self._player

    @player.setter
    def player(self, player):
        """Sets the player of this VideoAssets.

        Raw url of the player.

        :param player: The player of this VideoAssets.
        :type player: str
        """

        self._player = player

    @property
    def thumbnail(self):
        """Gets the thumbnail of this VideoAssets.

        Poster of the video.

        :return: The thumbnail of this VideoAssets.
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this VideoAssets.

        Poster of the video.

        :param thumbnail: The thumbnail of this VideoAssets.
        :type thumbnail: str
        """

        self._thumbnail = thumbnail
