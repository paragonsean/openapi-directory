# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlayerSessionEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, at: int=None, emitted_at: datetime=None, _from: int=None, to: int=None, type: str=None):
        """PlayerSessionEvent - a model defined in OpenAPI

        :param at: The at of this PlayerSessionEvent.
        :param emitted_at: The emitted_at of this PlayerSessionEvent.
        :param _from: The _from of this PlayerSessionEvent.
        :param to: The to of this PlayerSessionEvent.
        :param type: The type of this PlayerSessionEvent.
        """
        self.openapi_types = {
            'at': int,
            'emitted_at': datetime,
            '_from': int,
            'to': int,
            'type': str
        }

        self.attribute_map = {
            'at': 'at',
            'emitted_at': 'emittedAt',
            '_from': 'from',
            'to': 'to',
            'type': 'type'
        }

        self._at = at
        self._emitted_at = emitted_at
        self.__from = _from
        self._to = to
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlayerSessionEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The player-session-event of this PlayerSessionEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def at(self):
        """Gets the at of this PlayerSessionEvent.


        :return: The at of this PlayerSessionEvent.
        :rtype: int
        """
        return self._at

    @at.setter
    def at(self, at):
        """Sets the at of this PlayerSessionEvent.


        :param at: The at of this PlayerSessionEvent.
        :type at: int
        """

        self._at = at

    @property
    def emitted_at(self):
        """Gets the emitted_at of this PlayerSessionEvent.

        When an event occurred, presented in ISO-8601 format.

        :return: The emitted_at of this PlayerSessionEvent.
        :rtype: datetime
        """
        return self._emitted_at

    @emitted_at.setter
    def emitted_at(self, emitted_at):
        """Sets the emitted_at of this PlayerSessionEvent.

        When an event occurred, presented in ISO-8601 format.

        :param emitted_at: The emitted_at of this PlayerSessionEvent.
        :type emitted_at: datetime
        """

        self._emitted_at = emitted_at

    @property
    def _from(self):
        """Gets the _from of this PlayerSessionEvent.


        :return: The _from of this PlayerSessionEvent.
        :rtype: int
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this PlayerSessionEvent.


        :param _from: The _from of this PlayerSessionEvent.
        :type _from: int
        """

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this PlayerSessionEvent.


        :return: The to of this PlayerSessionEvent.
        :rtype: int
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this PlayerSessionEvent.


        :param to: The to of this PlayerSessionEvent.
        :type to: int
        """

        self._to = to

    @property
    def type(self):
        """Gets the type of this PlayerSessionEvent.

        Possible values are: ready, play, pause, resume, seek.backward, seek.forward, end

        :return: The type of this PlayerSessionEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PlayerSessionEvent.

        Possible values are: ready, play, pause, resume, seek.backward, seek.forward, end

        :param type: The type of this PlayerSessionEvent.
        :type type: str
        """

        self._type = type
