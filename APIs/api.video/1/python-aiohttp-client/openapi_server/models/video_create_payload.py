# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metadata import Metadata
from openapi_server import util


class VideoCreatePayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, metadata: List[Metadata]=None, mp4_support: bool=True, panoramic: bool=False, player_id: str=None, public: bool=True, published_at: datetime=None, source: str=None, tags: List[str]=None, title: str=None):
        """VideoCreatePayload - a model defined in OpenAPI

        :param description: The description of this VideoCreatePayload.
        :param metadata: The metadata of this VideoCreatePayload.
        :param mp4_support: The mp4_support of this VideoCreatePayload.
        :param panoramic: The panoramic of this VideoCreatePayload.
        :param player_id: The player_id of this VideoCreatePayload.
        :param public: The public of this VideoCreatePayload.
        :param published_at: The published_at of this VideoCreatePayload.
        :param source: The source of this VideoCreatePayload.
        :param tags: The tags of this VideoCreatePayload.
        :param title: The title of this VideoCreatePayload.
        """
        self.openapi_types = {
            'description': str,
            'metadata': List[Metadata],
            'mp4_support': bool,
            'panoramic': bool,
            'player_id': str,
            'public': bool,
            'published_at': datetime,
            'source': str,
            'tags': List[str],
            'title': str
        }

        self.attribute_map = {
            'description': 'description',
            'metadata': 'metadata',
            'mp4_support': 'mp4Support',
            'panoramic': 'panoramic',
            'player_id': 'playerId',
            'public': 'public',
            'published_at': 'publishedAt',
            'source': 'source',
            'tags': 'tags',
            'title': 'title'
        }

        self._description = description
        self._metadata = metadata
        self._mp4_support = mp4_support
        self._panoramic = panoramic
        self._player_id = player_id
        self._public = public
        self._published_at = published_at
        self._source = source
        self._tags = tags
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoCreatePayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The video-create-payload of this VideoCreatePayload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this VideoCreatePayload.

        A brief description of your video.

        :return: The description of this VideoCreatePayload.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VideoCreatePayload.

        A brief description of your video.

        :param description: The description of this VideoCreatePayload.
        :type description: str
        """

        self._description = description

    @property
    def metadata(self):
        """Gets the metadata of this VideoCreatePayload.

        A list of key value pairs that you use to provide metadata for your video. These pairs can be made dynamic, allowing you to segment your audience. Read more on [dynamic metadata](https://api.video/blog/endpoints/dynamic-metadata).

        :return: The metadata of this VideoCreatePayload.
        :rtype: List[Metadata]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this VideoCreatePayload.

        A list of key value pairs that you use to provide metadata for your video. These pairs can be made dynamic, allowing you to segment your audience. Read more on [dynamic metadata](https://api.video/blog/endpoints/dynamic-metadata).

        :param metadata: The metadata of this VideoCreatePayload.
        :type metadata: List[Metadata]
        """

        self._metadata = metadata

    @property
    def mp4_support(self):
        """Gets the mp4_support of this VideoCreatePayload.

        Enables mp4 version in addition to streamed version.

        :return: The mp4_support of this VideoCreatePayload.
        :rtype: bool
        """
        return self._mp4_support

    @mp4_support.setter
    def mp4_support(self, mp4_support):
        """Sets the mp4_support of this VideoCreatePayload.

        Enables mp4 version in addition to streamed version.

        :param mp4_support: The mp4_support of this VideoCreatePayload.
        :type mp4_support: bool
        """

        self._mp4_support = mp4_support

    @property
    def panoramic(self):
        """Gets the panoramic of this VideoCreatePayload.

        Indicates if your video is a 360/immersive video.

        :return: The panoramic of this VideoCreatePayload.
        :rtype: bool
        """
        return self._panoramic

    @panoramic.setter
    def panoramic(self, panoramic):
        """Sets the panoramic of this VideoCreatePayload.

        Indicates if your video is a 360/immersive video.

        :param panoramic: The panoramic of this VideoCreatePayload.
        :type panoramic: bool
        """

        self._panoramic = panoramic

    @property
    def player_id(self):
        """Gets the player_id of this VideoCreatePayload.

        The unique identification number for your video player.

        :return: The player_id of this VideoCreatePayload.
        :rtype: str
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this VideoCreatePayload.

        The unique identification number for your video player.

        :param player_id: The player_id of this VideoCreatePayload.
        :type player_id: str
        """

        self._player_id = player_id

    @property
    def public(self):
        """Gets the public of this VideoCreatePayload.

        Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos).

        :return: The public of this VideoCreatePayload.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this VideoCreatePayload.

        Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos).

        :param public: The public of this VideoCreatePayload.
        :type public: bool
        """

        self._public = public

    @property
    def published_at(self):
        """Gets the published_at of this VideoCreatePayload.

        The API uses ISO-8601 format for time, and includes 3 places for milliseconds.

        :return: The published_at of this VideoCreatePayload.
        :rtype: datetime
        """
        return self._published_at

    @published_at.setter
    def published_at(self, published_at):
        """Sets the published_at of this VideoCreatePayload.

        The API uses ISO-8601 format for time, and includes 3 places for milliseconds.

        :param published_at: The published_at of this VideoCreatePayload.
        :type published_at: datetime
        """

        self._published_at = published_at

    @property
    def source(self):
        """Gets the source of this VideoCreatePayload.

        If you add a video already on the web, this is where you enter the url for the video.

        :return: The source of this VideoCreatePayload.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this VideoCreatePayload.

        If you add a video already on the web, this is where you enter the url for the video.

        :param source: The source of this VideoCreatePayload.
        :type source: str
        """

        self._source = source

    @property
    def tags(self):
        """Gets the tags of this VideoCreatePayload.

        A list of tags you want to use to describe your video.

        :return: The tags of this VideoCreatePayload.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this VideoCreatePayload.

        A list of tags you want to use to describe your video.

        :param tags: The tags of this VideoCreatePayload.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def title(self):
        """Gets the title of this VideoCreatePayload.

        The title of your new video.

        :return: The title of this VideoCreatePayload.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this VideoCreatePayload.

        The title of your new video.

        :param title: The title of this VideoCreatePayload.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
