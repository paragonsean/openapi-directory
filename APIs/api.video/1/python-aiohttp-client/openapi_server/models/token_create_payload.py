# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TokenCreatePayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ttl: int=0):
        """TokenCreatePayload - a model defined in OpenAPI

        :param ttl: The ttl of this TokenCreatePayload.
        """
        self.openapi_types = {
            'ttl': int
        }

        self.attribute_map = {
            'ttl': 'ttl'
        }

        self._ttl = ttl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TokenCreatePayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The token-create-payload of this TokenCreatePayload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ttl(self):
        """Gets the ttl of this TokenCreatePayload.

        Time in seconds that the token will be active. A value of 0 means that the token has no exipration date. The default is to have no expiration.

        :return: The ttl of this TokenCreatePayload.
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this TokenCreatePayload.

        Time in seconds that the token will be active. A value of 0 means that the token has no exipration date. The default is to have no expiration.

        :param ttl: The ttl of this TokenCreatePayload.
        :type ttl: int
        """
        if ttl is not None and ttl > 2147483647:
            raise ValueError("Invalid value for `ttl`, must be a value less than or equal to `2147483647`")
        if ttl is not None and ttl < 0:
            raise ValueError("Invalid value for `ttl`, must be a value greater than or equal to `0`")

        self._ttl = ttl
