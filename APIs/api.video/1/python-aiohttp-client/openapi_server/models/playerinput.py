# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Playerinput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, background_bottom: str=None, background_text: str=None, background_top: str=None, enable_api: bool=True, enable_controls: bool=True, force_autoplay: bool=False, force_loop: bool=False, hide_title: bool=False, link: str=None, link_hover: str=None, text: str=None, track_background: str=None, track_played: str=None, track_unplayed: str=None):
        """Playerinput - a model defined in OpenAPI

        :param background_bottom: The background_bottom of this Playerinput.
        :param background_text: The background_text of this Playerinput.
        :param background_top: The background_top of this Playerinput.
        :param enable_api: The enable_api of this Playerinput.
        :param enable_controls: The enable_controls of this Playerinput.
        :param force_autoplay: The force_autoplay of this Playerinput.
        :param force_loop: The force_loop of this Playerinput.
        :param hide_title: The hide_title of this Playerinput.
        :param link: The link of this Playerinput.
        :param link_hover: The link_hover of this Playerinput.
        :param text: The text of this Playerinput.
        :param track_background: The track_background of this Playerinput.
        :param track_played: The track_played of this Playerinput.
        :param track_unplayed: The track_unplayed of this Playerinput.
        """
        self.openapi_types = {
            'background_bottom': str,
            'background_text': str,
            'background_top': str,
            'enable_api': bool,
            'enable_controls': bool,
            'force_autoplay': bool,
            'force_loop': bool,
            'hide_title': bool,
            'link': str,
            'link_hover': str,
            'text': str,
            'track_background': str,
            'track_played': str,
            'track_unplayed': str
        }

        self.attribute_map = {
            'background_bottom': 'backgroundBottom',
            'background_text': 'backgroundText',
            'background_top': 'backgroundTop',
            'enable_api': 'enableApi',
            'enable_controls': 'enableControls',
            'force_autoplay': 'forceAutoplay',
            'force_loop': 'forceLoop',
            'hide_title': 'hideTitle',
            'link': 'link',
            'link_hover': 'linkHover',
            'text': 'text',
            'track_background': 'trackBackground',
            'track_played': 'trackPlayed',
            'track_unplayed': 'trackUnplayed'
        }

        self._background_bottom = background_bottom
        self._background_text = background_text
        self._background_top = background_top
        self._enable_api = enable_api
        self._enable_controls = enable_controls
        self._force_autoplay = force_autoplay
        self._force_loop = force_loop
        self._hide_title = hide_title
        self._link = link
        self._link_hover = link_hover
        self._text = text
        self._track_background = track_background
        self._track_played = track_played
        self._track_unplayed = track_unplayed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Playerinput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The playerinput of this Playerinput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def background_bottom(self):
        """Gets the background_bottom of this Playerinput.

        RGBA color: bottom 50% of background. Default: rgba(0, 0, 0, .7)

        :return: The background_bottom of this Playerinput.
        :rtype: str
        """
        return self._background_bottom

    @background_bottom.setter
    def background_bottom(self, background_bottom):
        """Sets the background_bottom of this Playerinput.

        RGBA color: bottom 50% of background. Default: rgba(0, 0, 0, .7)

        :param background_bottom: The background_bottom of this Playerinput.
        :type background_bottom: str
        """

        self._background_bottom = background_bottom

    @property
    def background_text(self):
        """Gets the background_text of this Playerinput.

        RGBA color for title text. Default: rgba(255, 255, 255, 1)

        :return: The background_text of this Playerinput.
        :rtype: str
        """
        return self._background_text

    @background_text.setter
    def background_text(self, background_text):
        """Sets the background_text of this Playerinput.

        RGBA color for title text. Default: rgba(255, 255, 255, 1)

        :param background_text: The background_text of this Playerinput.
        :type background_text: str
        """

        self._background_text = background_text

    @property
    def background_top(self):
        """Gets the background_top of this Playerinput.

        RGBA color: top 50% of background. Default: rgba(0, 0, 0, .7)

        :return: The background_top of this Playerinput.
        :rtype: str
        """
        return self._background_top

    @background_top.setter
    def background_top(self, background_top):
        """Sets the background_top of this Playerinput.

        RGBA color: top 50% of background. Default: rgba(0, 0, 0, .7)

        :param background_top: The background_top of this Playerinput.
        :type background_top: str
        """

        self._background_top = background_top

    @property
    def enable_api(self):
        """Gets the enable_api of this Playerinput.

        enable/disable player SDK access. Default: true

        :return: The enable_api of this Playerinput.
        :rtype: bool
        """
        return self._enable_api

    @enable_api.setter
    def enable_api(self, enable_api):
        """Sets the enable_api of this Playerinput.

        enable/disable player SDK access. Default: true

        :param enable_api: The enable_api of this Playerinput.
        :type enable_api: bool
        """

        self._enable_api = enable_api

    @property
    def enable_controls(self):
        """Gets the enable_controls of this Playerinput.

        enable/disable player controls. Default: true

        :return: The enable_controls of this Playerinput.
        :rtype: bool
        """
        return self._enable_controls

    @enable_controls.setter
    def enable_controls(self, enable_controls):
        """Sets the enable_controls of this Playerinput.

        enable/disable player controls. Default: true

        :param enable_controls: The enable_controls of this Playerinput.
        :type enable_controls: bool
        """

        self._enable_controls = enable_controls

    @property
    def force_autoplay(self):
        """Gets the force_autoplay of this Playerinput.

        enable/disable player autoplay. Default: false

        :return: The force_autoplay of this Playerinput.
        :rtype: bool
        """
        return self._force_autoplay

    @force_autoplay.setter
    def force_autoplay(self, force_autoplay):
        """Sets the force_autoplay of this Playerinput.

        enable/disable player autoplay. Default: false

        :param force_autoplay: The force_autoplay of this Playerinput.
        :type force_autoplay: bool
        """

        self._force_autoplay = force_autoplay

    @property
    def force_loop(self):
        """Gets the force_loop of this Playerinput.

        enable/disable looping. Default: false

        :return: The force_loop of this Playerinput.
        :rtype: bool
        """
        return self._force_loop

    @force_loop.setter
    def force_loop(self, force_loop):
        """Sets the force_loop of this Playerinput.

        enable/disable looping. Default: false

        :param force_loop: The force_loop of this Playerinput.
        :type force_loop: bool
        """

        self._force_loop = force_loop

    @property
    def hide_title(self):
        """Gets the hide_title of this Playerinput.

        enable/disable title. Default: false

        :return: The hide_title of this Playerinput.
        :rtype: bool
        """
        return self._hide_title

    @hide_title.setter
    def hide_title(self, hide_title):
        """Sets the hide_title of this Playerinput.

        enable/disable title. Default: false

        :param hide_title: The hide_title of this Playerinput.
        :type hide_title: bool
        """

        self._hide_title = hide_title

    @property
    def link(self):
        """Gets the link of this Playerinput.

        RGBA color for all controls. Default: rgba(255, 255, 255, 1)

        :return: The link of this Playerinput.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Playerinput.

        RGBA color for all controls. Default: rgba(255, 255, 255, 1)

        :param link: The link of this Playerinput.
        :type link: str
        """

        self._link = link

    @property
    def link_hover(self):
        """Gets the link_hover of this Playerinput.

        RGBA color for all controls when hovered. Default: rgba(255, 255, 255, 1)

        :return: The link_hover of this Playerinput.
        :rtype: str
        """
        return self._link_hover

    @link_hover.setter
    def link_hover(self, link_hover):
        """Sets the link_hover of this Playerinput.

        RGBA color for all controls when hovered. Default: rgba(255, 255, 255, 1)

        :param link_hover: The link_hover of this Playerinput.
        :type link_hover: str
        """

        self._link_hover = link_hover

    @property
    def text(self):
        """Gets the text of this Playerinput.

        RGBA color for timer text. Default: rgba(255, 255, 255, 1)

        :return: The text of this Playerinput.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Playerinput.

        RGBA color for timer text. Default: rgba(255, 255, 255, 1)

        :param text: The text of this Playerinput.
        :type text: str
        """

        self._text = text

    @property
    def track_background(self):
        """Gets the track_background of this Playerinput.

        RGBA color playback bar: background. Default: rgba(255, 255, 255, .2)

        :return: The track_background of this Playerinput.
        :rtype: str
        """
        return self._track_background

    @track_background.setter
    def track_background(self, track_background):
        """Sets the track_background of this Playerinput.

        RGBA color playback bar: background. Default: rgba(255, 255, 255, .2)

        :param track_background: The track_background of this Playerinput.
        :type track_background: str
        """

        self._track_background = track_background

    @property
    def track_played(self):
        """Gets the track_played of this Playerinput.

        RGBA color playback bar: played content. Default: rgba(88, 131, 255, .95)

        :return: The track_played of this Playerinput.
        :rtype: str
        """
        return self._track_played

    @track_played.setter
    def track_played(self, track_played):
        """Sets the track_played of this Playerinput.

        RGBA color playback bar: played content. Default: rgba(88, 131, 255, .95)

        :param track_played: The track_played of this Playerinput.
        :type track_played: str
        """

        self._track_played = track_played

    @property
    def track_unplayed(self):
        """Gets the track_unplayed of this Playerinput.

        RGBA color playback bar: downloaded but unplayed (buffered) content. Default: rgba(255, 255, 255, .35)

        :return: The track_unplayed of this Playerinput.
        :rtype: str
        """
        return self._track_unplayed

    @track_unplayed.setter
    def track_unplayed(self, track_unplayed):
        """Sets the track_unplayed of this Playerinput.

        RGBA color playback bar: downloaded but unplayed (buffered) content. Default: rgba(255, 255, 255, .35)

        :param track_unplayed: The track_unplayed of this Playerinput.
        :type track_unplayed: str
        """

        self._track_unplayed = track_unplayed
