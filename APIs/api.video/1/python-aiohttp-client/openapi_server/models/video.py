# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metadata import Metadata
from openapi_server.models.video_assets import VideoAssets
from openapi_server.models.video_source import VideoSource
from openapi_server import util


class Video(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets: VideoAssets=None, description: str=None, metadata: List[Metadata]=None, mp4_support: bool=None, panoramic: bool=None, player_id: str=None, public: bool=None, published_at: str=None, source: VideoSource=None, tags: List[object]=None, title: str=None, updated_at: datetime=None, video_id: str=None):
        """Video - a model defined in OpenAPI

        :param assets: The assets of this Video.
        :param description: The description of this Video.
        :param metadata: The metadata of this Video.
        :param mp4_support: The mp4_support of this Video.
        :param panoramic: The panoramic of this Video.
        :param player_id: The player_id of this Video.
        :param public: The public of this Video.
        :param published_at: The published_at of this Video.
        :param source: The source of this Video.
        :param tags: The tags of this Video.
        :param title: The title of this Video.
        :param updated_at: The updated_at of this Video.
        :param video_id: The video_id of this Video.
        """
        self.openapi_types = {
            'assets': VideoAssets,
            'description': str,
            'metadata': List[Metadata],
            'mp4_support': bool,
            'panoramic': bool,
            'player_id': str,
            'public': bool,
            'published_at': str,
            'source': VideoSource,
            'tags': List[object],
            'title': str,
            'updated_at': datetime,
            'video_id': str
        }

        self.attribute_map = {
            'assets': 'assets',
            'description': 'description',
            'metadata': 'metadata',
            'mp4_support': 'mp4Support',
            'panoramic': 'panoramic',
            'player_id': 'playerId',
            'public': 'public',
            'published_at': 'publishedAt',
            'source': 'source',
            'tags': 'tags',
            'title': 'title',
            'updated_at': 'updatedAt',
            'video_id': 'videoId'
        }

        self._assets = assets
        self._description = description
        self._metadata = metadata
        self._mp4_support = mp4_support
        self._panoramic = panoramic
        self._player_id = player_id
        self._public = public
        self._published_at = published_at
        self._source = source
        self._tags = tags
        self._title = title
        self._updated_at = updated_at
        self._video_id = video_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Video':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The video of this Video.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self):
        """Gets the assets of this Video.


        :return: The assets of this Video.
        :rtype: VideoAssets
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this Video.


        :param assets: The assets of this Video.
        :type assets: VideoAssets
        """

        self._assets = assets

    @property
    def description(self):
        """Gets the description of this Video.

        A description for the video content. 

        :return: The description of this Video.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Video.

        A description for the video content. 

        :param description: The description of this Video.
        :type description: str
        """

        self._description = description

    @property
    def metadata(self):
        """Gets the metadata of this Video.

        Metadata you can use to categorise and filter videos. Metadata is a list of dictionaries, where each dictionary represents a key value pair for categorising a video. [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) allows you to define a key that allows any value pair. 

        :return: The metadata of this Video.
        :rtype: List[Metadata]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Video.

        Metadata you can use to categorise and filter videos. Metadata is a list of dictionaries, where each dictionary represents a key value pair for categorising a video. [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) allows you to define a key that allows any value pair. 

        :param metadata: The metadata of this Video.
        :type metadata: List[Metadata]
        """

        self._metadata = metadata

    @property
    def mp4_support(self):
        """Gets the mp4_support of this Video.

        This lets you know whether mp4 is supported. If enabled, an mp4 URL will be provided in the response for the video. 

        :return: The mp4_support of this Video.
        :rtype: bool
        """
        return self._mp4_support

    @mp4_support.setter
    def mp4_support(self, mp4_support):
        """Sets the mp4_support of this Video.

        This lets you know whether mp4 is supported. If enabled, an mp4 URL will be provided in the response for the video. 

        :param mp4_support: The mp4_support of this Video.
        :type mp4_support: bool
        """

        self._mp4_support = mp4_support

    @property
    def panoramic(self):
        """Gets the panoramic of this Video.

        Defines if video is panoramic. 

        :return: The panoramic of this Video.
        :rtype: bool
        """
        return self._panoramic

    @panoramic.setter
    def panoramic(self, panoramic):
        """Sets the panoramic of this Video.

        Defines if video is panoramic. 

        :param panoramic: The panoramic of this Video.
        :type panoramic: bool
        """

        self._panoramic = panoramic

    @property
    def player_id(self):
        """Gets the player_id of this Video.

        The id of the player that will be applied on the video. 

        :return: The player_id of this Video.
        :rtype: str
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this Video.

        The id of the player that will be applied on the video. 

        :param player_id: The player_id of this Video.
        :type player_id: str
        """

        self._player_id = player_id

    @property
    def public(self):
        """Gets the public of this Video.

        Defines if the content is publicly reachable or if a unique token is needed for each play session. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos). 

        :return: The public of this Video.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this Video.

        Defines if the content is publicly reachable or if a unique token is needed for each play session. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos). 

        :param public: The public of this Video.
        :type public: bool
        """

        self._public = public

    @property
    def published_at(self):
        """Gets the published_at of this Video.

        The date and time the API created the video. Date and time are provided using ISO-8601 UTC format.

        :return: The published_at of this Video.
        :rtype: str
        """
        return self._published_at

    @published_at.setter
    def published_at(self, published_at):
        """Sets the published_at of this Video.

        The date and time the API created the video. Date and time are provided using ISO-8601 UTC format.

        :param published_at: The published_at of this Video.
        :type published_at: str
        """

        self._published_at = published_at

    @property
    def source(self):
        """Gets the source of this Video.


        :return: The source of this Video.
        :rtype: VideoSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Video.


        :param source: The source of this Video.
        :type source: VideoSource
        """

        self._source = source

    @property
    def tags(self):
        """Gets the tags of this Video.

        One array of tags (each tag is a string) in order to categorize a video. Tags may include spaces.  

        :return: The tags of this Video.
        :rtype: List[object]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Video.

        One array of tags (each tag is a string) in order to categorize a video. Tags may include spaces.  

        :param tags: The tags of this Video.
        :type tags: List[object]
        """

        self._tags = tags

    @property
    def title(self):
        """Gets the title of this Video.

        The title of the video content. 

        :return: The title of this Video.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Video.

        The title of the video content. 

        :param title: The title of this Video.
        :type title: str
        """

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this Video.

        The date and time the video was updated. Date and time are provided using ISO-8601 UTC format.

        :return: The updated_at of this Video.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Video.

        The date and time the video was updated. Date and time are provided using ISO-8601 UTC format.

        :param updated_at: The updated_at of this Video.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def video_id(self):
        """Gets the video_id of this Video.

        The unique identifier of the video object.

        :return: The video_id of this Video.
        :rtype: str
        """
        return self._video_id

    @video_id.setter
    def video_id(self, video_id):
        """Sets the video_id of this Video.

        The unique identifier of the video object.

        :param video_id: The video_id of this Video.
        :type video_id: str
        """

        self._video_id = video_id
