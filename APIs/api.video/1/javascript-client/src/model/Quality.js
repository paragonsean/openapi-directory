/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Quality model module.
 * @module model/Quality
 * @version 1
 */
class Quality {
    /**
     * Constructs a new <code>Quality</code>.
     * @alias module:model/Quality
     */
    constructor() { 
        
        Quality.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Quality</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Quality} obj Optional instance to populate.
     * @return {module:model/Quality} The populated <code>Quality</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Quality();

            if (data.hasOwnProperty('quality')) {
                obj['quality'] = ApiClient.convertToType(data['quality'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Quality</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Quality</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['quality'] && !(typeof data['quality'] === 'string' || data['quality'] instanceof String)) {
            throw new Error("Expected the field `quality` to be a primitive type in the JSON string but got " + data['quality']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * The quality of the video you have, in pixels. Choices include 360p, 480p, 720p, 1080p, and 2160p.
 * @member {module:model/Quality.QualityEnum} quality
 */
Quality.prototype['quality'] = undefined;

/**
 * The status of your video. Statuses include waiting - the video is waiting to be encoded. encoding - the video is in the process of being encoded. encoded - the video was successfully encoded. failed - the video failed to be encoded.
 * @member {module:model/Quality.StatusEnum} status
 */
Quality.prototype['status'] = undefined;





/**
 * Allowed values for the <code>quality</code> property.
 * @enum {String}
 * @readonly
 */
Quality['QualityEnum'] = {

    /**
     * value: "240p"
     * @const
     */
    "240p": "240p",

    /**
     * value: "360p"
     * @const
     */
    "360p": "360p",

    /**
     * value: "480p"
     * @const
     */
    "480p": "480p",

    /**
     * value: "720p"
     * @const
     */
    "720p": "720p",

    /**
     * value: "1080p"
     * @const
     */
    "1080p": "1080p",

    /**
     * value: "2160p"
     * @const
     */
    "2160p": "2160p"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Quality['StatusEnum'] = {

    /**
     * value: "waiting"
     * @const
     */
    "waiting": "waiting",

    /**
     * value: "encoding"
     * @const
     */
    "encoding": "encoding",

    /**
     * value: "encoded"
     * @const
     */
    "encoded": "encoded",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed"
};



export default Quality;

