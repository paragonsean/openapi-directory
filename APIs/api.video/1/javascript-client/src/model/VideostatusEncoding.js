/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Quality from './Quality';
import VideostatusEncodingMetadata from './VideostatusEncodingMetadata';

/**
 * The VideostatusEncoding model module.
 * @module model/VideostatusEncoding
 * @version 1
 */
class VideostatusEncoding {
    /**
     * Constructs a new <code>VideostatusEncoding</code>.
     * @alias module:model/VideostatusEncoding
     */
    constructor() { 
        
        VideostatusEncoding.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VideostatusEncoding</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideostatusEncoding} obj Optional instance to populate.
     * @return {module:model/VideostatusEncoding} The populated <code>VideostatusEncoding</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideostatusEncoding();

            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = VideostatusEncodingMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('playable')) {
                obj['playable'] = ApiClient.convertToType(data['playable'], 'Boolean');
            }
            if (data.hasOwnProperty('qualities')) {
                obj['qualities'] = ApiClient.convertToType(data['qualities'], [Quality]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideostatusEncoding</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideostatusEncoding</code>.
     */
    static validateJSON(data) {
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          VideostatusEncodingMetadata.validateJSON(data['metadata']);
        }
        if (data['qualities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['qualities'])) {
                throw new Error("Expected the field `qualities` to be an array in the JSON data but got " + data['qualities']);
            }
            // validate the optional field `qualities` (array)
            for (const item of data['qualities']) {
                Quality.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/VideostatusEncodingMetadata} metadata
 */
VideostatusEncoding.prototype['metadata'] = undefined;

/**
 * Whether the video is playable or not.
 * @member {Boolean} playable
 */
VideostatusEncoding.prototype['playable'] = undefined;

/**
 * Available qualities the video can be viewed in.
 * @member {Array.<module:model/Quality>} qualities
 */
VideostatusEncoding.prototype['qualities'] = undefined;






export default VideostatusEncoding;

