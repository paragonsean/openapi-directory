/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Playerinput model module.
 * @module model/Playerinput
 * @version 1
 */
class Playerinput {
    /**
     * Constructs a new <code>Playerinput</code>.
     * @alias module:model/Playerinput
     */
    constructor() { 
        
        Playerinput.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['enableApi'] = true;
        obj['enableControls'] = true;
        obj['forceAutoplay'] = false;
        obj['forceLoop'] = false;
        obj['hideTitle'] = false;
    }

    /**
     * Constructs a <code>Playerinput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Playerinput} obj Optional instance to populate.
     * @return {module:model/Playerinput} The populated <code>Playerinput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Playerinput();

            if (data.hasOwnProperty('backgroundBottom')) {
                obj['backgroundBottom'] = ApiClient.convertToType(data['backgroundBottom'], 'String');
            }
            if (data.hasOwnProperty('backgroundText')) {
                obj['backgroundText'] = ApiClient.convertToType(data['backgroundText'], 'String');
            }
            if (data.hasOwnProperty('backgroundTop')) {
                obj['backgroundTop'] = ApiClient.convertToType(data['backgroundTop'], 'String');
            }
            if (data.hasOwnProperty('enableApi')) {
                obj['enableApi'] = ApiClient.convertToType(data['enableApi'], 'Boolean');
            }
            if (data.hasOwnProperty('enableControls')) {
                obj['enableControls'] = ApiClient.convertToType(data['enableControls'], 'Boolean');
            }
            if (data.hasOwnProperty('forceAutoplay')) {
                obj['forceAutoplay'] = ApiClient.convertToType(data['forceAutoplay'], 'Boolean');
            }
            if (data.hasOwnProperty('forceLoop')) {
                obj['forceLoop'] = ApiClient.convertToType(data['forceLoop'], 'Boolean');
            }
            if (data.hasOwnProperty('hideTitle')) {
                obj['hideTitle'] = ApiClient.convertToType(data['hideTitle'], 'Boolean');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('linkHover')) {
                obj['linkHover'] = ApiClient.convertToType(data['linkHover'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('trackBackground')) {
                obj['trackBackground'] = ApiClient.convertToType(data['trackBackground'], 'String');
            }
            if (data.hasOwnProperty('trackPlayed')) {
                obj['trackPlayed'] = ApiClient.convertToType(data['trackPlayed'], 'String');
            }
            if (data.hasOwnProperty('trackUnplayed')) {
                obj['trackUnplayed'] = ApiClient.convertToType(data['trackUnplayed'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Playerinput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Playerinput</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['backgroundBottom'] && !(typeof data['backgroundBottom'] === 'string' || data['backgroundBottom'] instanceof String)) {
            throw new Error("Expected the field `backgroundBottom` to be a primitive type in the JSON string but got " + data['backgroundBottom']);
        }
        // ensure the json data is a string
        if (data['backgroundText'] && !(typeof data['backgroundText'] === 'string' || data['backgroundText'] instanceof String)) {
            throw new Error("Expected the field `backgroundText` to be a primitive type in the JSON string but got " + data['backgroundText']);
        }
        // ensure the json data is a string
        if (data['backgroundTop'] && !(typeof data['backgroundTop'] === 'string' || data['backgroundTop'] instanceof String)) {
            throw new Error("Expected the field `backgroundTop` to be a primitive type in the JSON string but got " + data['backgroundTop']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['linkHover'] && !(typeof data['linkHover'] === 'string' || data['linkHover'] instanceof String)) {
            throw new Error("Expected the field `linkHover` to be a primitive type in the JSON string but got " + data['linkHover']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['trackBackground'] && !(typeof data['trackBackground'] === 'string' || data['trackBackground'] instanceof String)) {
            throw new Error("Expected the field `trackBackground` to be a primitive type in the JSON string but got " + data['trackBackground']);
        }
        // ensure the json data is a string
        if (data['trackPlayed'] && !(typeof data['trackPlayed'] === 'string' || data['trackPlayed'] instanceof String)) {
            throw new Error("Expected the field `trackPlayed` to be a primitive type in the JSON string but got " + data['trackPlayed']);
        }
        // ensure the json data is a string
        if (data['trackUnplayed'] && !(typeof data['trackUnplayed'] === 'string' || data['trackUnplayed'] instanceof String)) {
            throw new Error("Expected the field `trackUnplayed` to be a primitive type in the JSON string but got " + data['trackUnplayed']);
        }

        return true;
    }


}



/**
 * RGBA color: bottom 50% of background. Default: rgba(0, 0, 0, .7)
 * @member {String} backgroundBottom
 */
Playerinput.prototype['backgroundBottom'] = undefined;

/**
 * RGBA color for title text. Default: rgba(255, 255, 255, 1)
 * @member {String} backgroundText
 */
Playerinput.prototype['backgroundText'] = undefined;

/**
 * RGBA color: top 50% of background. Default: rgba(0, 0, 0, .7)
 * @member {String} backgroundTop
 */
Playerinput.prototype['backgroundTop'] = undefined;

/**
 * enable/disable player SDK access. Default: true
 * @member {Boolean} enableApi
 * @default true
 */
Playerinput.prototype['enableApi'] = true;

/**
 * enable/disable player controls. Default: true
 * @member {Boolean} enableControls
 * @default true
 */
Playerinput.prototype['enableControls'] = true;

/**
 * enable/disable player autoplay. Default: false
 * @member {Boolean} forceAutoplay
 * @default false
 */
Playerinput.prototype['forceAutoplay'] = false;

/**
 * enable/disable looping. Default: false
 * @member {Boolean} forceLoop
 * @default false
 */
Playerinput.prototype['forceLoop'] = false;

/**
 * enable/disable title. Default: false
 * @member {Boolean} hideTitle
 * @default false
 */
Playerinput.prototype['hideTitle'] = false;

/**
 * RGBA color for all controls. Default: rgba(255, 255, 255, 1)
 * @member {String} link
 */
Playerinput.prototype['link'] = undefined;

/**
 * RGBA color for all controls when hovered. Default: rgba(255, 255, 255, 1)
 * @member {String} linkHover
 */
Playerinput.prototype['linkHover'] = undefined;

/**
 * RGBA color for timer text. Default: rgba(255, 255, 255, 1)
 * @member {String} text
 */
Playerinput.prototype['text'] = undefined;

/**
 * RGBA color playback bar: background. Default: rgba(255, 255, 255, .2)
 * @member {String} trackBackground
 */
Playerinput.prototype['trackBackground'] = undefined;

/**
 * RGBA color playback bar: played content. Default: rgba(88, 131, 255, .95)
 * @member {String} trackPlayed
 */
Playerinput.prototype['trackPlayed'] = undefined;

/**
 * RGBA color playback bar: downloaded but unplayed (buffered) content. Default: rgba(255, 255, 255, .35)
 * @member {String} trackUnplayed
 */
Playerinput.prototype['trackUnplayed'] = undefined;






export default Playerinput;

