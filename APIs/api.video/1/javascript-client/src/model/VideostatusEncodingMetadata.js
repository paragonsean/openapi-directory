/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VideostatusEncodingMetadata model module.
 * @module model/VideostatusEncodingMetadata
 * @version 1
 */
class VideostatusEncodingMetadata {
    /**
     * Constructs a new <code>VideostatusEncodingMetadata</code>.
     * @alias module:model/VideostatusEncodingMetadata
     */
    constructor() { 
        
        VideostatusEncodingMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VideostatusEncodingMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideostatusEncodingMetadata} obj Optional instance to populate.
     * @return {module:model/VideostatusEncodingMetadata} The populated <code>VideostatusEncodingMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideostatusEncodingMetadata();

            if (data.hasOwnProperty('aspectRatio')) {
                obj['aspectRatio'] = ApiClient.convertToType(data['aspectRatio'], 'String');
            }
            if (data.hasOwnProperty('audioCodec')) {
                obj['audioCodec'] = ApiClient.convertToType(data['audioCodec'], 'String');
            }
            if (data.hasOwnProperty('bitrate')) {
                obj['bitrate'] = ApiClient.convertToType(data['bitrate'], 'Number');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('framerate')) {
                obj['framerate'] = ApiClient.convertToType(data['framerate'], 'Number');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('samplerate')) {
                obj['samplerate'] = ApiClient.convertToType(data['samplerate'], 'Number');
            }
            if (data.hasOwnProperty('videoCodec')) {
                obj['videoCodec'] = ApiClient.convertToType(data['videoCodec'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideostatusEncodingMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideostatusEncodingMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['aspectRatio'] && !(typeof data['aspectRatio'] === 'string' || data['aspectRatio'] instanceof String)) {
            throw new Error("Expected the field `aspectRatio` to be a primitive type in the JSON string but got " + data['aspectRatio']);
        }
        // ensure the json data is a string
        if (data['audioCodec'] && !(typeof data['audioCodec'] === 'string' || data['audioCodec'] instanceof String)) {
            throw new Error("Expected the field `audioCodec` to be a primitive type in the JSON string but got " + data['audioCodec']);
        }
        // ensure the json data is a string
        if (data['videoCodec'] && !(typeof data['videoCodec'] === 'string' || data['videoCodec'] instanceof String)) {
            throw new Error("Expected the field `videoCodec` to be a primitive type in the JSON string but got " + data['videoCodec']);
        }

        return true;
    }


}



/**
 * @member {String} aspectRatio
 */
VideostatusEncodingMetadata.prototype['aspectRatio'] = undefined;

/**
 * The method used to compress and decompress digital audio for your video.
 * @member {String} audioCodec
 */
VideostatusEncodingMetadata.prototype['audioCodec'] = undefined;

/**
 * The number of bits processed per second.
 * @member {Number} bitrate
 */
VideostatusEncodingMetadata.prototype['bitrate'] = undefined;

/**
 * The length of the video.
 * @member {Number} duration
 */
VideostatusEncodingMetadata.prototype['duration'] = undefined;

/**
 * The frequency with which consecutive images or frames appear on a display. Shown in this API as frames per second (fps).
 * @member {Number} framerate
 */
VideostatusEncodingMetadata.prototype['framerate'] = undefined;

/**
 * The height of the video in pixels.
 * @member {Number} height
 */
VideostatusEncodingMetadata.prototype['height'] = undefined;

/**
 * How many samples per second a digital audio system uses to record an audio signal. The higher the rate, the higher the frequencies that can be recorded. They are presented in this API using hertz.
 * @member {Number} samplerate
 */
VideostatusEncodingMetadata.prototype['samplerate'] = undefined;

/**
 * The method used to compress and decompress digital video. API Video supports all codecs in the libavcodec library. 
 * @member {String} videoCodec
 */
VideostatusEncodingMetadata.prototype['videoCodec'] = undefined;

/**
 * The width of the video in pixels.
 * @member {Number} width
 */
VideostatusEncodingMetadata.prototype['width'] = undefined;






export default VideostatusEncodingMetadata;

