/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Metadata from './Metadata';
import VideoAssets from './VideoAssets';
import VideoSource from './VideoSource';

/**
 * The Video model module.
 * @module model/Video
 * @version 1
 */
class Video {
    /**
     * Constructs a new <code>Video</code>.
     * @alias module:model/Video
     */
    constructor() { 
        
        Video.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Video</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Video} obj Optional instance to populate.
     * @return {module:model/Video} The populated <code>Video</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Video();

            if (data.hasOwnProperty('assets')) {
                obj['assets'] = VideoAssets.constructFromObject(data['assets']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [Metadata]);
            }
            if (data.hasOwnProperty('mp4Support')) {
                obj['mp4Support'] = ApiClient.convertToType(data['mp4Support'], 'Boolean');
            }
            if (data.hasOwnProperty('panoramic')) {
                obj['panoramic'] = ApiClient.convertToType(data['panoramic'], 'Boolean');
            }
            if (data.hasOwnProperty('playerId')) {
                obj['playerId'] = ApiClient.convertToType(data['playerId'], 'String');
            }
            if (data.hasOwnProperty('public')) {
                obj['public'] = ApiClient.convertToType(data['public'], 'Boolean');
            }
            if (data.hasOwnProperty('publishedAt')) {
                obj['publishedAt'] = ApiClient.convertToType(data['publishedAt'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = VideoSource.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [Object]);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('videoId')) {
                obj['videoId'] = ApiClient.convertToType(data['videoId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Video</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Video</code>.
     */
    static validateJSON(data) {
        // validate the optional field `assets`
        if (data['assets']) { // data not null
          VideoAssets.validateJSON(data['assets']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['metadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metadata'])) {
                throw new Error("Expected the field `metadata` to be an array in the JSON data but got " + data['metadata']);
            }
            // validate the optional field `metadata` (array)
            for (const item of data['metadata']) {
                Metadata.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['playerId'] && !(typeof data['playerId'] === 'string' || data['playerId'] instanceof String)) {
            throw new Error("Expected the field `playerId` to be a primitive type in the JSON string but got " + data['playerId']);
        }
        // ensure the json data is a string
        if (data['publishedAt'] && !(typeof data['publishedAt'] === 'string' || data['publishedAt'] instanceof String)) {
            throw new Error("Expected the field `publishedAt` to be a primitive type in the JSON string but got " + data['publishedAt']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          VideoSource.validateJSON(data['source']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['videoId'] && !(typeof data['videoId'] === 'string' || data['videoId'] instanceof String)) {
            throw new Error("Expected the field `videoId` to be a primitive type in the JSON string but got " + data['videoId']);
        }

        return true;
    }


}



/**
 * @member {module:model/VideoAssets} assets
 */
Video.prototype['assets'] = undefined;

/**
 * A description for the video content. 
 * @member {String} description
 */
Video.prototype['description'] = undefined;

/**
 * Metadata you can use to categorise and filter videos. Metadata is a list of dictionaries, where each dictionary represents a key value pair for categorising a video. [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) allows you to define a key that allows any value pair. 
 * @member {Array.<module:model/Metadata>} metadata
 */
Video.prototype['metadata'] = undefined;

/**
 * This lets you know whether mp4 is supported. If enabled, an mp4 URL will be provided in the response for the video. 
 * @member {Boolean} mp4Support
 */
Video.prototype['mp4Support'] = undefined;

/**
 * Defines if video is panoramic. 
 * @member {Boolean} panoramic
 */
Video.prototype['panoramic'] = undefined;

/**
 * The id of the player that will be applied on the video. 
 * @member {String} playerId
 */
Video.prototype['playerId'] = undefined;

/**
 * Defines if the content is publicly reachable or if a unique token is needed for each play session. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos). 
 * @member {Boolean} public
 */
Video.prototype['public'] = undefined;

/**
 * The date and time the API created the video. Date and time are provided using ISO-8601 UTC format.
 * @member {String} publishedAt
 */
Video.prototype['publishedAt'] = undefined;

/**
 * @member {module:model/VideoSource} source
 */
Video.prototype['source'] = undefined;

/**
 * One array of tags (each tag is a string) in order to categorize a video. Tags may include spaces.  
 * @member {Array.<Object>} tags
 */
Video.prototype['tags'] = undefined;

/**
 * The title of the video content. 
 * @member {String} title
 */
Video.prototype['title'] = undefined;

/**
 * The date and time the video was updated. Date and time are provided using ISO-8601 UTC format.
 * @member {Date} updatedAt
 */
Video.prototype['updatedAt'] = undefined;

/**
 * The unique identifier of the video object.
 * @member {String} videoId
 */
Video.prototype['videoId'] = undefined;






export default Video;

