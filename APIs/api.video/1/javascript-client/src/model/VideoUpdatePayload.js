/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Metadata from './Metadata';

/**
 * The VideoUpdatePayload model module.
 * @module model/VideoUpdatePayload
 * @version 1
 */
class VideoUpdatePayload {
    /**
     * Constructs a new <code>VideoUpdatePayload</code>.
     * @alias module:model/VideoUpdatePayload
     */
    constructor() { 
        
        VideoUpdatePayload.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VideoUpdatePayload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoUpdatePayload} obj Optional instance to populate.
     * @return {module:model/VideoUpdatePayload} The populated <code>VideoUpdatePayload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoUpdatePayload();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [Metadata]);
            }
            if (data.hasOwnProperty('mp4Support')) {
                obj['mp4Support'] = ApiClient.convertToType(data['mp4Support'], 'Boolean');
            }
            if (data.hasOwnProperty('panoramic')) {
                obj['panoramic'] = ApiClient.convertToType(data['panoramic'], 'Boolean');
            }
            if (data.hasOwnProperty('playerId')) {
                obj['playerId'] = ApiClient.convertToType(data['playerId'], 'String');
            }
            if (data.hasOwnProperty('public')) {
                obj['public'] = ApiClient.convertToType(data['public'], 'Boolean');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoUpdatePayload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoUpdatePayload</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['metadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metadata'])) {
                throw new Error("Expected the field `metadata` to be an array in the JSON data but got " + data['metadata']);
            }
            // validate the optional field `metadata` (array)
            for (const item of data['metadata']) {
                Metadata.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['playerId'] && !(typeof data['playerId'] === 'string' || data['playerId'] instanceof String)) {
            throw new Error("Expected the field `playerId` to be a primitive type in the JSON string but got " + data['playerId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * A brief description of the video.
 * @member {String} description
 */
VideoUpdatePayload.prototype['description'] = undefined;

/**
 * A list (array) of dictionaries where each dictionary contains a key value pair that describes the video. As with tags, you must send the complete list of metadata you want as whatever you send here will overwrite the existing metadata for the video. [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) allows you to define a key that allows any value pair.
 * @member {Array.<module:model/Metadata>} metadata
 */
VideoUpdatePayload.prototype['metadata'] = undefined;

/**
 * Whether the player supports the mp4 format.
 * @member {Boolean} mp4Support
 */
VideoUpdatePayload.prototype['mp4Support'] = undefined;

/**
 * Whether the video is a 360 degree or immersive video.
 * @member {Boolean} panoramic
 */
VideoUpdatePayload.prototype['panoramic'] = undefined;

/**
 * The unique ID for the player you want to associate with your video.
 * @member {String} playerId
 */
VideoUpdatePayload.prototype['playerId'] = undefined;

/**
 * Whether the video is publicly available or not. False means it is set to private. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos).
 * @member {Boolean} public
 */
VideoUpdatePayload.prototype['public'] = undefined;

/**
 * A list of terms or words you want to tag the video with. Make sure the list includes all the tags you want as whatever you send in this list will overwrite the existing list for the video.
 * @member {Array.<String>} tags
 */
VideoUpdatePayload.prototype['tags'] = undefined;

/**
 * The title you want to use for your video.
 * @member {String} title
 */
VideoUpdatePayload.prototype['title'] = undefined;






export default VideoUpdatePayload;

