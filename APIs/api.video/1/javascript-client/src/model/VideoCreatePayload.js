/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Metadata from './Metadata';

/**
 * The VideoCreatePayload model module.
 * @module model/VideoCreatePayload
 * @version 1
 */
class VideoCreatePayload {
    /**
     * Constructs a new <code>VideoCreatePayload</code>.
     * @alias module:model/VideoCreatePayload
     * @param title {String} The title of your new video.
     */
    constructor(title) { 
        
        VideoCreatePayload.initialize(this, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, title) { 
        obj['mp4Support'] = true;
        obj['panoramic'] = false;
        obj['public'] = true;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>VideoCreatePayload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoCreatePayload} obj Optional instance to populate.
     * @return {module:model/VideoCreatePayload} The populated <code>VideoCreatePayload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoCreatePayload();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [Metadata]);
            }
            if (data.hasOwnProperty('mp4Support')) {
                obj['mp4Support'] = ApiClient.convertToType(data['mp4Support'], 'Boolean');
            }
            if (data.hasOwnProperty('panoramic')) {
                obj['panoramic'] = ApiClient.convertToType(data['panoramic'], 'Boolean');
            }
            if (data.hasOwnProperty('playerId')) {
                obj['playerId'] = ApiClient.convertToType(data['playerId'], 'String');
            }
            if (data.hasOwnProperty('public')) {
                obj['public'] = ApiClient.convertToType(data['public'], 'Boolean');
            }
            if (data.hasOwnProperty('publishedAt')) {
                obj['publishedAt'] = ApiClient.convertToType(data['publishedAt'], 'Date');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoCreatePayload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoCreatePayload</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VideoCreatePayload.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['metadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metadata'])) {
                throw new Error("Expected the field `metadata` to be an array in the JSON data but got " + data['metadata']);
            }
            // validate the optional field `metadata` (array)
            for (const item of data['metadata']) {
                Metadata.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['playerId'] && !(typeof data['playerId'] === 'string' || data['playerId'] instanceof String)) {
            throw new Error("Expected the field `playerId` to be a primitive type in the JSON string but got " + data['playerId']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

VideoCreatePayload.RequiredProperties = ["title"];

/**
 * A brief description of your video.
 * @member {String} description
 */
VideoCreatePayload.prototype['description'] = undefined;

/**
 * A list of key value pairs that you use to provide metadata for your video. These pairs can be made dynamic, allowing you to segment your audience. Read more on [dynamic metadata](https://api.video/blog/endpoints/dynamic-metadata).
 * @member {Array.<module:model/Metadata>} metadata
 */
VideoCreatePayload.prototype['metadata'] = undefined;

/**
 * Enables mp4 version in addition to streamed version.
 * @member {Boolean} mp4Support
 * @default true
 */
VideoCreatePayload.prototype['mp4Support'] = true;

/**
 * Indicates if your video is a 360/immersive video.
 * @member {Boolean} panoramic
 * @default false
 */
VideoCreatePayload.prototype['panoramic'] = false;

/**
 * The unique identification number for your video player.
 * @member {String} playerId
 */
VideoCreatePayload.prototype['playerId'] = undefined;

/**
 * Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos).
 * @member {Boolean} public
 * @default true
 */
VideoCreatePayload.prototype['public'] = true;

/**
 * The API uses ISO-8601 format for time, and includes 3 places for milliseconds.
 * @member {Date} publishedAt
 */
VideoCreatePayload.prototype['publishedAt'] = undefined;

/**
 * If you add a video already on the web, this is where you enter the url for the video.
 * @member {String} source
 */
VideoCreatePayload.prototype['source'] = undefined;

/**
 * A list of tags you want to use to describe your video.
 * @member {Array.<String>} tags
 */
VideoCreatePayload.prototype['tags'] = undefined;

/**
 * The title of your new video.
 * @member {String} title
 */
VideoCreatePayload.prototype['title'] = undefined;






export default VideoCreatePayload;

