/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LiveStreamSessionReferrer model module.
 * @module model/LiveStreamSessionReferrer
 * @version 1
 */
class LiveStreamSessionReferrer {
    /**
     * Constructs a new <code>LiveStreamSessionReferrer</code>.
     * @alias module:model/LiveStreamSessionReferrer
     */
    constructor() { 
        
        LiveStreamSessionReferrer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LiveStreamSessionReferrer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LiveStreamSessionReferrer} obj Optional instance to populate.
     * @return {module:model/LiveStreamSessionReferrer} The populated <code>LiveStreamSessionReferrer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LiveStreamSessionReferrer();

            if (data.hasOwnProperty('medium')) {
                obj['medium'] = ApiClient.convertToType(data['medium'], 'String');
            }
            if (data.hasOwnProperty('searchTerm')) {
                obj['searchTerm'] = ApiClient.convertToType(data['searchTerm'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LiveStreamSessionReferrer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LiveStreamSessionReferrer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['medium'] && !(typeof data['medium'] === 'string' || data['medium'] instanceof String)) {
            throw new Error("Expected the field `medium` to be a primitive type in the JSON string but got " + data['medium']);
        }
        // ensure the json data is a string
        if (data['searchTerm'] && !(typeof data['searchTerm'] === 'string' || data['searchTerm'] instanceof String)) {
            throw new Error("Expected the field `searchTerm` to be a primitive type in the JSON string but got " + data['searchTerm']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * The type of search that brought the viewer to the live stream. Organic would be they found it on their own, paid would be they found it via an advertisement.
 * @member {String} medium
 */
LiveStreamSessionReferrer.prototype['medium'] = undefined;

/**
 * What term they searched for that led them to the live stream.
 * @member {String} searchTerm
 */
LiveStreamSessionReferrer.prototype['searchTerm'] = undefined;

/**
 * Where the viewer came from to see the live stream (usually where they searched from).
 * @member {String} source
 */
LiveStreamSessionReferrer.prototype['source'] = undefined;

/**
 * The website the viewer of the live stream was referred to in order to view the live stream.
 * @member {String} url
 */
LiveStreamSessionReferrer.prototype['url'] = undefined;






export default LiveStreamSessionReferrer;

