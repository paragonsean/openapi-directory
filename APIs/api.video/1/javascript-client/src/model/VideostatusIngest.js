/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BytesRange from './BytesRange';

/**
 * The VideostatusIngest model module.
 * @module model/VideostatusIngest
 * @version 1
 */
class VideostatusIngest {
    /**
     * Constructs a new <code>VideostatusIngest</code>.
     * Details about the capturing, transferring, and storing of your video for use immediately or in the future.
     * @alias module:model/VideostatusIngest
     */
    constructor() { 
        
        VideostatusIngest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VideostatusIngest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideostatusIngest} obj Optional instance to populate.
     * @return {module:model/VideostatusIngest} The populated <code>VideostatusIngest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideostatusIngest();

            if (data.hasOwnProperty('filesize')) {
                obj['filesize'] = ApiClient.convertToType(data['filesize'], 'Number');
            }
            if (data.hasOwnProperty('receivedBytes')) {
                obj['receivedBytes'] = ApiClient.convertToType(data['receivedBytes'], [BytesRange]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideostatusIngest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideostatusIngest</code>.
     */
    static validateJSON(data) {
        if (data['receivedBytes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['receivedBytes'])) {
                throw new Error("Expected the field `receivedBytes` to be an array in the JSON data but got " + data['receivedBytes']);
            }
            // validate the optional field `receivedBytes` (array)
            for (const item of data['receivedBytes']) {
                BytesRange.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * The size of your file in bytes.
 * @member {Number} filesize
 */
VideostatusIngest.prototype['filesize'] = undefined;

/**
 * The total number of bytes received, listed for each chunk of the upload.
 * @member {Array.<module:model/BytesRange>} receivedBytes
 */
VideostatusIngest.prototype['receivedBytes'] = undefined;

/**
 * There are three possible ingest statuses. missing - you are missing information required to ingest the video. uploading - the video is in the process of being uploaded. uploaded - the video is ready for use.
 * @member {module:model/VideostatusIngest.StatusEnum} status
 */
VideostatusIngest.prototype['status'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
VideostatusIngest['StatusEnum'] = {

    /**
     * value: "missing"
     * @const
     */
    "missing": "missing",

    /**
     * value: "uploading"
     * @const
     */
    "uploading": "uploading",

    /**
     * value: "uploaded"
     * @const
     */
    "uploaded": "uploaded"
};



export default VideostatusIngest;

