/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LiveStreamCreatePayload model module.
 * @module model/LiveStreamCreatePayload
 * @version 1
 */
class LiveStreamCreatePayload {
    /**
     * Constructs a new <code>LiveStreamCreatePayload</code>.
     * @alias module:model/LiveStreamCreatePayload
     * @param name {String} Add a name for your live stream here.
     */
    constructor(name) { 
        
        LiveStreamCreatePayload.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
        obj['record'] = false;
    }

    /**
     * Constructs a <code>LiveStreamCreatePayload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LiveStreamCreatePayload} obj Optional instance to populate.
     * @return {module:model/LiveStreamCreatePayload} The populated <code>LiveStreamCreatePayload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LiveStreamCreatePayload();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('playerId')) {
                obj['playerId'] = ApiClient.convertToType(data['playerId'], 'String');
            }
            if (data.hasOwnProperty('public')) {
                obj['public'] = ApiClient.convertToType(data['public'], 'Boolean');
            }
            if (data.hasOwnProperty('record')) {
                obj['record'] = ApiClient.convertToType(data['record'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LiveStreamCreatePayload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LiveStreamCreatePayload</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LiveStreamCreatePayload.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['playerId'] && !(typeof data['playerId'] === 'string' || data['playerId'] instanceof String)) {
            throw new Error("Expected the field `playerId` to be a primitive type in the JSON string but got " + data['playerId']);
        }

        return true;
    }


}

LiveStreamCreatePayload.RequiredProperties = ["name"];

/**
 * Add a name for your live stream here.
 * @member {String} name
 */
LiveStreamCreatePayload.prototype['name'] = undefined;

/**
 * The unique identifier for the player.
 * @member {String} playerId
 */
LiveStreamCreatePayload.prototype['playerId'] = undefined;

/**
 * BETA FEATURE Please limit all public = false (\"private\") livestreams to 3,000 users. Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view.
 * @member {Boolean} public
 */
LiveStreamCreatePayload.prototype['public'] = undefined;

/**
 * Whether you are recording or not. True for record, false for not record.
 * @member {Boolean} record
 * @default false
 */
LiveStreamCreatePayload.prototype['record'] = false;






export default LiveStreamCreatePayload;

