/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VideoSessionClient from './VideoSessionClient';
import VideoSessionDevice from './VideoSessionDevice';
import VideoSessionLocation from './VideoSessionLocation';
import VideoSessionOs from './VideoSessionOs';
import VideoSessionReferrer from './VideoSessionReferrer';
import VideoSessionSession from './VideoSessionSession';

/**
 * The VideoSession model module.
 * @module model/VideoSession
 * @version 1
 */
class VideoSession {
    /**
     * Constructs a new <code>VideoSession</code>.
     * @alias module:model/VideoSession
     */
    constructor() { 
        
        VideoSession.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VideoSession</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoSession} obj Optional instance to populate.
     * @return {module:model/VideoSession} The populated <code>VideoSession</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoSession();

            if (data.hasOwnProperty('client')) {
                obj['client'] = VideoSessionClient.constructFromObject(data['client']);
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = VideoSessionDevice.constructFromObject(data['device']);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = VideoSessionLocation.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('os')) {
                obj['os'] = VideoSessionOs.constructFromObject(data['os']);
            }
            if (data.hasOwnProperty('referrer')) {
                obj['referrer'] = VideoSessionReferrer.constructFromObject(data['referrer']);
            }
            if (data.hasOwnProperty('session')) {
                obj['session'] = VideoSessionSession.constructFromObject(data['session']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoSession</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoSession</code>.
     */
    static validateJSON(data) {
        // validate the optional field `client`
        if (data['client']) { // data not null
          VideoSessionClient.validateJSON(data['client']);
        }
        // validate the optional field `device`
        if (data['device']) { // data not null
          VideoSessionDevice.validateJSON(data['device']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          VideoSessionLocation.validateJSON(data['location']);
        }
        // validate the optional field `os`
        if (data['os']) { // data not null
          VideoSessionOs.validateJSON(data['os']);
        }
        // validate the optional field `referrer`
        if (data['referrer']) { // data not null
          VideoSessionReferrer.validateJSON(data['referrer']);
        }
        // validate the optional field `session`
        if (data['session']) { // data not null
          VideoSessionSession.validateJSON(data['session']);
        }

        return true;
    }


}



/**
 * @member {module:model/VideoSessionClient} client
 */
VideoSession.prototype['client'] = undefined;

/**
 * @member {module:model/VideoSessionDevice} device
 */
VideoSession.prototype['device'] = undefined;

/**
 * @member {module:model/VideoSessionLocation} location
 */
VideoSession.prototype['location'] = undefined;

/**
 * @member {module:model/VideoSessionOs} os
 */
VideoSession.prototype['os'] = undefined;

/**
 * @member {module:model/VideoSessionReferrer} referrer
 */
VideoSession.prototype['referrer'] = undefined;

/**
 * @member {module:model/VideoSessionSession} session
 */
VideoSession.prototype['session'] = undefined;






export default VideoSession;

