/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequest from '../model/BadRequest';
import LiveStream from '../model/LiveStream';
import LiveStreamCreatePayload from '../model/LiveStreamCreatePayload';
import LiveStreamListResponse from '../model/LiveStreamListResponse';
import LiveStreamUpdatePayload from '../model/LiveStreamUpdatePayload';
import NotFound from '../model/NotFound';

/**
* Live service.
* @module api/LiveApi
* @version 1
*/
export default class LiveApi {

    /**
    * Constructs a new LiveApi. 
    * @alias module:api/LiveApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dELETELiveStreamsLiveStreamId operation.
     * @callback module:api/LiveApi~dELETELiveStreamsLiveStreamIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a live stream
     * @param {String} liveStreamId The unique ID for the live stream that you want to remove.
     * @param {module:api/LiveApi~dELETELiveStreamsLiveStreamIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dELETELiveStreamsLiveStreamId(liveStreamId, callback) {
      let postBody = null;
      // verify the required parameter 'liveStreamId' is set
      if (liveStreamId === undefined || liveStreamId === null) {
        throw new Error("Missing the required parameter 'liveStreamId' when calling dELETELiveStreamsLiveStreamId");
      }

      let pathParams = {
        'liveStreamId': liveStreamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/live-streams/{liveStreamId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dELETELiveStreamsLiveStreamIdThumbnail operation.
     * @callback module:api/LiveApi~dELETELiveStreamsLiveStreamIdThumbnailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiveStream} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a thumbnail
     * Send the unique identifier for a live stream to delete it from the system.
     * @param {String} liveStreamId The unique identifier for the live stream you want to delete. 
     * @param {module:api/LiveApi~dELETELiveStreamsLiveStreamIdThumbnailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiveStream}
     */
    dELETELiveStreamsLiveStreamIdThumbnail(liveStreamId, callback) {
      let postBody = null;
      // verify the required parameter 'liveStreamId' is set
      if (liveStreamId === undefined || liveStreamId === null) {
        throw new Error("Missing the required parameter 'liveStreamId' when calling dELETELiveStreamsLiveStreamIdThumbnail");
      }

      let pathParams = {
        'liveStreamId': liveStreamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LiveStream;
      return this.apiClient.callApi(
        '/live-streams/{liveStreamId}/thumbnail', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETLiveStreams operation.
     * @callback module:api/LiveApi~gETLiveStreamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiveStreamListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all live streams
     * With no parameters added to the url, this will return all livestreams. Query by name or key to limit the list.
     * @param {Object} opts Optional parameters
     * @param {String} [streamKey] The unique stream key that allows you to stream videos.
     * @param {String} [name] You can filter live streams by their name or a part of their name.
     * @param {String} [sortBy] Allowed: createdAt, publishedAt, name. createdAt - the time a livestream was created using the specified streamKey. publishedAt - the time a livestream was published using the specified streamKey. name - the name of the livestream. If you choose one of the time based options, the time is presented in ISO-8601 format.
     * @param {module:model/String} [sortOrder] Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones. For title, it is 0-9 and A-Z ascending and Z-A, 9-0 descending.
     * @param {Number} [currentPage = 1)] Choose the number of search results to return per page. Minimum value: 1
     * @param {Number} [pageSize = 25)] Results per page. Allowed values 1-100, default is 25.
     * @param {module:api/LiveApi~gETLiveStreamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiveStreamListResponse}
     */
    gETLiveStreams(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'streamKey': opts['streamKey'],
        'name': opts['name'],
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'currentPage': opts['currentPage'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LiveStreamListResponse;
      return this.apiClient.callApi(
        '/live-streams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETLiveStreamsLiveStreamId operation.
     * @callback module:api/LiveApi~gETLiveStreamsLiveStreamIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiveStream} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show live stream
     * Supply a LivestreamId, and you'll get all the details for streaming into, and watching the livestream. Tutorials that use the [show livestream endpoint](https://api.video/blog/endpoints/live-stream-status).
     * @param {String} liveStreamId The unique ID for the live stream you want to watch.
     * @param {module:api/LiveApi~gETLiveStreamsLiveStreamIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiveStream}
     */
    gETLiveStreamsLiveStreamId(liveStreamId, callback) {
      let postBody = null;
      // verify the required parameter 'liveStreamId' is set
      if (liveStreamId === undefined || liveStreamId === null) {
        throw new Error("Missing the required parameter 'liveStreamId' when calling gETLiveStreamsLiveStreamId");
      }

      let pathParams = {
        'liveStreamId': liveStreamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LiveStream;
      return this.apiClient.callApi(
        '/live-streams/{liveStreamId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pATCHLiveStreamsLiveStreamId operation.
     * @callback module:api/LiveApi~pATCHLiveStreamsLiveStreamIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiveStream} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a live stream
     * Use this endpoint to update the player, or to turn recording on/off (saving a copy of the livestream). NOTE: If the livestream is actively streaming, changing the recording status will only affect the NEXT stream.    The public=false 'private livestream' is available as a BETA feature, and should be limited to livestreams of 3,000 viewers or fewer.
     * @param {String} liveStreamId The unique ID for the live stream that you want to update information for such as player details, or whether you want the recording on or off.
     * @param {Object} opts Optional parameters
     * @param {module:model/LiveStreamUpdatePayload} [liveStreamUpdatePayload] 
     * @param {module:api/LiveApi~pATCHLiveStreamsLiveStreamIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiveStream}
     */
    pATCHLiveStreamsLiveStreamId(liveStreamId, opts, callback) {
      opts = opts || {};
      let postBody = opts['liveStreamUpdatePayload'];
      // verify the required parameter 'liveStreamId' is set
      if (liveStreamId === undefined || liveStreamId === null) {
        throw new Error("Missing the required parameter 'liveStreamId' when calling pATCHLiveStreamsLiveStreamId");
      }

      let pathParams = {
        'liveStreamId': liveStreamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LiveStream;
      return this.apiClient.callApi(
        '/live-streams/{liveStreamId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTLiveStreams operation.
     * @callback module:api/LiveApi~pOSTLiveStreamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiveStream} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create live stream
     * A live stream will give you the 'connection point' to RTMP your video stream to api.video. It will also give you the details for viewers to watch the same livestream.  The public=false 'private livestream' is available as a BETA feature, and should be limited to livestreams of 3,000 viewers or fewer. See our [Live Stream Tutorial](https://api.video/blog/tutorials/live-stream-tutorial) for a walkthrough of this API with OBS. Your RTMP endpoint for the livestream is rtmp://broadcast.api.video/s/{streamKey} Tutorials that [create live streams](https://api.video/blog/endpoints/live-create).
     * @param {Object} opts Optional parameters
     * @param {module:model/LiveStreamCreatePayload} [liveStreamCreatePayload] 
     * @param {module:api/LiveApi~pOSTLiveStreamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiveStream}
     */
    pOSTLiveStreams(opts, callback) {
      opts = opts || {};
      let postBody = opts['liveStreamCreatePayload'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LiveStream;
      return this.apiClient.callApi(
        '/live-streams', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTLiveStreamsLiveStreamIdThumbnail operation.
     * @callback module:api/LiveApi~pOSTLiveStreamsLiveStreamIdThumbnailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiveStream} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a thumbnail
     * Upload an image to use as a backdrop for your livestream. Tutorials that [update live stream thumbnails](https://api.video/blog/endpoints/live-upload-a-thumbnail).
     * @param {String} liveStreamId The unique ID for the live stream you want to upload.
     * @param {File} file The image to be added as a thumbnail.
     * @param {module:api/LiveApi~pOSTLiveStreamsLiveStreamIdThumbnailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiveStream}
     */
    pOSTLiveStreamsLiveStreamIdThumbnail(liveStreamId, file, callback) {
      let postBody = null;
      // verify the required parameter 'liveStreamId' is set
      if (liveStreamId === undefined || liveStreamId === null) {
        throw new Error("Missing the required parameter 'liveStreamId' when calling pOSTLiveStreamsLiveStreamIdThumbnail");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling pOSTLiveStreamsLiveStreamIdThumbnail");
      }

      let pathParams = {
        'liveStreamId': liveStreamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = LiveStream;
      return this.apiClient.callApi(
        '/live-streams/{liveStreamId}/thumbnail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
