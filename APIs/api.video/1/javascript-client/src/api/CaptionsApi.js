/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequest from '../model/BadRequest';
import CaptionsListResponse from '../model/CaptionsListResponse';
import CaptionsUpdatePayload from '../model/CaptionsUpdatePayload';
import NotFound from '../model/NotFound';
import Subtitle from '../model/Subtitle';

/**
* Captions service.
* @module api/CaptionsApi
* @version 1
*/
export default class CaptionsApi {

    /**
    * Constructs a new CaptionsApi. 
    * @alias module:api/CaptionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dELETEVideosVideoIdCaptionsLanguage operation.
     * @callback module:api/CaptionsApi~dELETEVideosVideoIdCaptionsLanguageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a caption
     * Delete a caption in a specific language by providing the video ID for the video you want to delete the caption from and the language the caption is in.
     * @param {String} videoId The unique identifier for the video you want to delete a caption from.
     * @param {String} language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
     * @param {module:api/CaptionsApi~dELETEVideosVideoIdCaptionsLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dELETEVideosVideoIdCaptionsLanguage(videoId, language, callback) {
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling dELETEVideosVideoIdCaptionsLanguage");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling dELETEVideosVideoIdCaptionsLanguage");
      }

      let pathParams = {
        'videoId': videoId,
        'language': language
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/videos/{videoId}/captions/{language}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETVideosVideoIdCaptions operation.
     * @callback module:api/CaptionsApi~gETVideosVideoIdCaptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CaptionsListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List video captions
     * Retrieve a list of available captions for the videoId you provide.
     * @param {String} videoId The unique identifier for the video you want to retrieve a list of captions for.
     * @param {Object} opts Optional parameters
     * @param {Number} [currentPage = 1)] Choose the number of search results to return per page. Minimum value: 1
     * @param {Number} [pageSize = 25)] Results per page. Allowed values 1-100, default is 25.
     * @param {module:api/CaptionsApi~gETVideosVideoIdCaptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CaptionsListResponse}
     */
    gETVideosVideoIdCaptions(videoId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling gETVideosVideoIdCaptions");
      }

      let pathParams = {
        'videoId': videoId
      };
      let queryParams = {
        'currentPage': opts['currentPage'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CaptionsListResponse;
      return this.apiClient.callApi(
        '/videos/{videoId}/captions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETVideosVideoIdCaptionsLanguage operation.
     * @callback module:api/CaptionsApi~gETVideosVideoIdCaptionsLanguageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subtitle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show a caption
     * Display a caption for a video in a specific language. If the language is available, the caption is returned. Otherwise, you will get a response indicating the caption was not found. Tutorials that use the [captions endpoint](https://api.video/blog/endpoints/captions).
     * @param {String} videoId The unique identifier for the video you want captions for.
     * @param {String} language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation
     * @param {module:api/CaptionsApi~gETVideosVideoIdCaptionsLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subtitle}
     */
    gETVideosVideoIdCaptionsLanguage(videoId, language, callback) {
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling gETVideosVideoIdCaptionsLanguage");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling gETVideosVideoIdCaptionsLanguage");
      }

      let pathParams = {
        'videoId': videoId,
        'language': language
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Subtitle;
      return this.apiClient.callApi(
        '/videos/{videoId}/captions/{language}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pATCHVideosVideoIdCaptionsLanguage operation.
     * @callback module:api/CaptionsApi~pATCHVideosVideoIdCaptionsLanguageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subtitle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update caption
     * To have the captions on automatically, use this PATCH to set default: true.
     * @param {String} videoId The unique identifier for the video you want to have automatic captions for. 
     * @param {String} language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
     * @param {Object} opts Optional parameters
     * @param {module:model/CaptionsUpdatePayload} [captionsUpdatePayload] 
     * @param {module:api/CaptionsApi~pATCHVideosVideoIdCaptionsLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subtitle}
     */
    pATCHVideosVideoIdCaptionsLanguage(videoId, language, opts, callback) {
      opts = opts || {};
      let postBody = opts['captionsUpdatePayload'];
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling pATCHVideosVideoIdCaptionsLanguage");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling pATCHVideosVideoIdCaptionsLanguage");
      }

      let pathParams = {
        'videoId': videoId,
        'language': language
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Subtitle;
      return this.apiClient.callApi(
        '/videos/{videoId}/captions/{language}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTVideosVideoIdCaptionsLanguage operation.
     * @callback module:api/CaptionsApi~pOSTVideosVideoIdCaptionsLanguageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subtitle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a caption
     * Upload a VTT file to add captions to your video.  Read our [captioning tutorial](https://api.video/blog/tutorials/adding-captions) for more details.
     * @param {String} videoId The unique identifier for the video you want to add a caption to.
     * @param {String} language A valid BCP 47 language representation.
     * @param {File} file The video text track (VTT) you want to upload.
     * @param {module:api/CaptionsApi~pOSTVideosVideoIdCaptionsLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subtitle}
     */
    pOSTVideosVideoIdCaptionsLanguage(videoId, language, file, callback) {
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling pOSTVideosVideoIdCaptionsLanguage");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling pOSTVideosVideoIdCaptionsLanguage");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling pOSTVideosVideoIdCaptionsLanguage");
      }

      let pathParams = {
        'videoId': videoId,
        'language': language
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Subtitle;
      return this.apiClient.callApi(
        '/videos/{videoId}/captions/{language}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
