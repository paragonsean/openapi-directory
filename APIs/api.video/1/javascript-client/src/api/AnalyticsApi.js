/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NotFound from '../model/NotFound';
import RawStatisticsListLiveStreamAnalyticsResponse from '../model/RawStatisticsListLiveStreamAnalyticsResponse';
import RawStatisticsListPlayerSessionEventsResponse from '../model/RawStatisticsListPlayerSessionEventsResponse';
import RawStatisticsListSessionsResponse from '../model/RawStatisticsListSessionsResponse';

/**
* Analytics service.
* @module api/AnalyticsApi
* @version 1
*/
export default class AnalyticsApi {

    /**
    * Constructs a new AnalyticsApi. 
    * @alias module:api/AnalyticsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gETAnalyticsLiveStreamsLiveStreamId operation.
     * @callback module:api/AnalyticsApi~gETAnalyticsLiveStreamsLiveStreamIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RawStatisticsListLiveStreamAnalyticsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List live stream player sessions
     * @param {String} liveStreamId The unique identifier for the live stream you want to retrieve analytics for.
     * @param {Object} opts Optional parameters
     * @param {String} [period] Period must have one of the following formats:  - For a day : \"2018-01-01\", - For a week: \"2018-W01\",  - For a month: \"2018-01\" - For a year: \"2018\" For a range period:  -  Date range: \"2018-01-01/2018-01-15\" 
     * @param {Number} [currentPage = 1)] Choose the number of search results to return per page. Minimum value: 1
     * @param {Number} [pageSize = 25)] Results per page. Allowed values 1-100, default is 25.
     * @param {module:api/AnalyticsApi~gETAnalyticsLiveStreamsLiveStreamIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RawStatisticsListLiveStreamAnalyticsResponse}
     */
    gETAnalyticsLiveStreamsLiveStreamId(liveStreamId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'liveStreamId' is set
      if (liveStreamId === undefined || liveStreamId === null) {
        throw new Error("Missing the required parameter 'liveStreamId' when calling gETAnalyticsLiveStreamsLiveStreamId");
      }

      let pathParams = {
        'liveStreamId': liveStreamId
      };
      let queryParams = {
        'period': opts['period'],
        'currentPage': opts['currentPage'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RawStatisticsListLiveStreamAnalyticsResponse;
      return this.apiClient.callApi(
        '/analytics/live-streams/{liveStreamId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETAnalyticsSessionsSessionIdEvents operation.
     * @callback module:api/AnalyticsApi~gETAnalyticsSessionsSessionIdEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RawStatisticsListPlayerSessionEventsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List player session events
     * Useful to track and measure video's engagement.
     * @param {String} sessionId A unique identifier you can use to reference and track a session with.
     * @param {Object} opts Optional parameters
     * @param {Number} [currentPage = 1)] Choose the number of search results to return per page. Minimum value: 1
     * @param {Number} [pageSize = 25)] Results per page. Allowed values 1-100, default is 25.
     * @param {module:api/AnalyticsApi~gETAnalyticsSessionsSessionIdEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RawStatisticsListPlayerSessionEventsResponse}
     */
    gETAnalyticsSessionsSessionIdEvents(sessionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling gETAnalyticsSessionsSessionIdEvents");
      }

      let pathParams = {
        'sessionId': sessionId
      };
      let queryParams = {
        'currentPage': opts['currentPage'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RawStatisticsListPlayerSessionEventsResponse;
      return this.apiClient.callApi(
        '/analytics/sessions/{sessionId}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETAnalyticsVideosVideoId operation.
     * @callback module:api/AnalyticsApi~gETAnalyticsVideosVideoIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RawStatisticsListSessionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List video player sessions
     * Retrieve all available user sessions for a specific video. Tutorials that use the [analytics endpoint](https://api.video/blog/endpoints/analytics).
     * @param {String} videoId The unique identifier for the video you want to retrieve session information for.
     * @param {Object} opts Optional parameters
     * @param {String} [period] Period must have one of the following formats:  - For a day : 2018-01-01, - For a week: 2018-W01,  - For a month: 2018-01 - For a year: 2018 For a range period:  -  Date range: 2018-01-01/2018-01-15 
     * @param {Array.<String>} [metadata] Metadata and [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) filter. Send an array of key value pairs you want to filter sessios with.
     * @param {Number} [currentPage = 1)] Choose the number of search results to return per page. Minimum value: 1
     * @param {Number} [pageSize = 25)] Results per page. Allowed values 1-100, default is 25.
     * @param {module:api/AnalyticsApi~gETAnalyticsVideosVideoIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RawStatisticsListSessionsResponse}
     */
    gETAnalyticsVideosVideoId(videoId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling gETAnalyticsVideosVideoId");
      }

      let pathParams = {
        'videoId': videoId
      };
      let queryParams = {
        'period': opts['period'],
        'metadata': this.apiClient.buildCollectionParam(opts['metadata'], 'multi'),
        'currentPage': opts['currentPage'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RawStatisticsListSessionsResponse;
      return this.apiClient.callApi(
        '/analytics/videos/{videoId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
