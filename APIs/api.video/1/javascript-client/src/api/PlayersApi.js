/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequest from '../model/BadRequest';
import NotFound from '../model/NotFound';
import Player from '../model/Player';
import PlayerCreationPayload from '../model/PlayerCreationPayload';
import PlayerUpdatePayload from '../model/PlayerUpdatePayload';
import PlayersListResponse from '../model/PlayersListResponse';

/**
* Players service.
* @module api/PlayersApi
* @version 1
*/
export default class PlayersApi {

    /**
    * Constructs a new PlayersApi. 
    * @alias module:api/PlayersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dELETEPlayersPlayerId operation.
     * @callback module:api/PlayersApi~dELETEPlayersPlayerIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a player
     * Delete a player if you no longer need it. You can delete any player that you have the player ID for.
     * @param {String} playerId The unique identifier for the player you want to delete.
     * @param {module:api/PlayersApi~dELETEPlayersPlayerIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dELETEPlayersPlayerId(playerId, callback) {
      let postBody = null;
      // verify the required parameter 'playerId' is set
      if (playerId === undefined || playerId === null) {
        throw new Error("Missing the required parameter 'playerId' when calling dELETEPlayersPlayerId");
      }

      let pathParams = {
        'playerId': playerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/players/{playerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dELETEPlayersPlayerIdLogo operation.
     * @callback module:api/PlayersApi~dELETEPlayersPlayerIdLogoCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete logo
     * @param {String} playerId The unique identifier for the player.
     * @param {module:api/PlayersApi~dELETEPlayersPlayerIdLogoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    dELETEPlayersPlayerIdLogo(playerId, callback) {
      let postBody = null;
      // verify the required parameter 'playerId' is set
      if (playerId === undefined || playerId === null) {
        throw new Error("Missing the required parameter 'playerId' when calling dELETEPlayersPlayerIdLogo");
      }

      let pathParams = {
        'playerId': playerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/players/{playerId}/logo', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETPlayers operation.
     * @callback module:api/PlayersApi~gETPlayersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlayersListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all players
     * Retrieve a list of all the players you created, as well as details about each one. Tutorials that use the [player endpoint](https://api.video/blog/endpoints/player).
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [sortBy] createdAt is the time the player was created. updatedAt is the time the player was last updated. The time is presented in ISO-8601 format.
     * @param {module:model/String} [sortOrder] Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones.
     * @param {Number} [currentPage = 1)] Choose the number of search results to return per page. Minimum value: 1
     * @param {Number} [pageSize = 25)] Results per page. Allowed values 1-100, default is 25.
     * @param {module:api/PlayersApi~gETPlayersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlayersListResponse}
     */
    gETPlayers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'currentPage': opts['currentPage'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlayersListResponse;
      return this.apiClient.callApi(
        '/players', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETPlayersPlayerId operation.
     * @callback module:api/PlayersApi~gETPlayersPlayerIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Player} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show a player
     * Use a player ID to retrieve details about the player and display it for viewers.
     * @param {String} playerId The unique identifier for the player you want to retrieve. 
     * @param {module:api/PlayersApi~gETPlayersPlayerIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Player}
     */
    gETPlayersPlayerId(playerId, callback) {
      let postBody = null;
      // verify the required parameter 'playerId' is set
      if (playerId === undefined || playerId === null) {
        throw new Error("Missing the required parameter 'playerId' when calling gETPlayersPlayerId");
      }

      let pathParams = {
        'playerId': playerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Player;
      return this.apiClient.callApi(
        '/players/{playerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pATCHPlayersPlayerId operation.
     * @callback module:api/PlayersApi~pATCHPlayersPlayerIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Player} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a player
     * Use a player ID to update specific details for a player. NOTE: It may take up to 10 min before the new player configuration is available from our CDN.
     * @param {String} playerId The unique identifier for the player.
     * @param {module:model/PlayerUpdatePayload} playerUpdatePayload 
     * @param {module:api/PlayersApi~pATCHPlayersPlayerIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Player}
     */
    pATCHPlayersPlayerId(playerId, playerUpdatePayload, callback) {
      let postBody = playerUpdatePayload;
      // verify the required parameter 'playerId' is set
      if (playerId === undefined || playerId === null) {
        throw new Error("Missing the required parameter 'playerId' when calling pATCHPlayersPlayerId");
      }
      // verify the required parameter 'playerUpdatePayload' is set
      if (playerUpdatePayload === undefined || playerUpdatePayload === null) {
        throw new Error("Missing the required parameter 'playerUpdatePayload' when calling pATCHPlayersPlayerId");
      }

      let pathParams = {
        'playerId': playerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Player;
      return this.apiClient.callApi(
        '/players/{playerId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTPlayers operation.
     * @callback module:api/PlayersApi~pOSTPlayersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Player} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a player
     * Create a player for your video, and customise it.
     * @param {module:model/PlayerCreationPayload} playerCreationPayload 
     * @param {module:api/PlayersApi~pOSTPlayersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Player}
     */
    pOSTPlayers(playerCreationPayload, callback) {
      let postBody = playerCreationPayload;
      // verify the required parameter 'playerCreationPayload' is set
      if (playerCreationPayload === undefined || playerCreationPayload === null) {
        throw new Error("Missing the required parameter 'playerCreationPayload' when calling pOSTPlayers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Player;
      return this.apiClient.callApi(
        '/players', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTPlayersPlayerIdLogo operation.
     * @callback module:api/PlayersApi~pOSTPlayersPlayerIdLogoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Player} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a logo
     * The uploaded image maximum size should be 200x100 and its weight should be 200KB.  It will be scaled down to 30px height and converted to PNG to be displayed in the player.
     * @param {String} playerId The unique identifier for the player.
     * @param {File} file The name of the file you want to use for your logo.
     * @param {String} link The path to the file you want to upload and use as a logo.
     * @param {module:api/PlayersApi~pOSTPlayersPlayerIdLogoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Player}
     */
    pOSTPlayersPlayerIdLogo(playerId, file, link, callback) {
      let postBody = null;
      // verify the required parameter 'playerId' is set
      if (playerId === undefined || playerId === null) {
        throw new Error("Missing the required parameter 'playerId' when calling pOSTPlayersPlayerIdLogo");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling pOSTPlayersPlayerIdLogo");
      }
      // verify the required parameter 'link' is set
      if (link === undefined || link === null) {
        throw new Error("Missing the required parameter 'link' when calling pOSTPlayersPlayerIdLogo");
      }

      let pathParams = {
        'playerId': playerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'link': link
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Player;
      return this.apiClient.callApi(
        '/players/{playerId}/logo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
