/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequest from '../model/BadRequest';
import NotFound from '../model/NotFound';
import Video from '../model/Video';
import VideoCreatePayload from '../model/VideoCreatePayload';
import VideoThumbnailPickPayload from '../model/VideoThumbnailPickPayload';
import VideoUpdatePayload from '../model/VideoUpdatePayload';
import VideosListResponse from '../model/VideosListResponse';
import Videostatus from '../model/Videostatus';

/**
* Videos service.
* @module api/VideosApi
* @version 1
*/
export default class VideosApi {

    /**
    * Constructs a new VideosApi. 
    * @alias module:api/VideosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dELETEVideo operation.
     * @callback module:api/VideosApi~dELETEVideoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a video
     * If you do not need a video any longer, you can send a request to delete it. All you need is the videoId. Tutorials using [video deletion](https://api.video/blog/endpoints/video-delete).
     * @param {String} videoId The video ID for the video you want to delete.
     * @param {module:api/VideosApi~dELETEVideoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dELETEVideo(videoId, callback) {
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling dELETEVideo");
      }

      let pathParams = {
        'videoId': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/videos/{videoId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETVideo operation.
     * @callback module:api/VideosApi~gETVideoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Video} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show a video
     * This call provides the same JSON information provided on video creation. For private videos, it will generate a unique token url. Use this to retrieve any details you need about a video, or set up a private viewing URL. Tutorials using [video GET](https://api.video/blog/endpoints/video-get).
     * @param {String} videoId The unique identifier for the video you want details about.
     * @param {module:api/VideosApi~gETVideoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Video}
     */
    gETVideo(videoId, callback) {
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling gETVideo");
      }

      let pathParams = {
        'videoId': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Video;
      return this.apiClient.callApi(
        '/videos/{videoId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETVideoStatus operation.
     * @callback module:api/VideosApi~gETVideoStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Videostatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show video status
     * This API provides upload status & encoding status to determine when the video is uploaded or ready to playback. Once encoding is completed, the response also lists the available stream qualities. Tutorials using [video status](https://api.video/blog/endpoints/video-status).
     * @param {String} videoId The unique identifier for the video you want the status for.
     * @param {module:api/VideosApi~gETVideoStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Videostatus}
     */
    gETVideoStatus(videoId, callback) {
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling gETVideoStatus");
      }

      let pathParams = {
        'videoId': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Videostatus;
      return this.apiClient.callApi(
        '/videos/{videoId}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lISTVideos operation.
     * @callback module:api/VideosApi~lISTVideosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideosListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all videos
     * Requests to this endpoint return a list of your videos (with all their details). With no parameters added to this query, the API returns all videos. You can filter what videos the API returns using the parameters described below.  We have [several tutorials](https://api.video/blog/endpoints/video-list) that demonstrate this endpoint.
     * @param {Object} opts Optional parameters
     * @param {String} [title] The title of a specific video you want to find. The search will match exactly to what term you provide and return any videos that contain the same term as part of their titles.
     * @param {Array.<String>} [tags] A tag is a category you create and apply to videos. You can search for videos with particular tags by listing one or more here. Only videos that have all the tags you list will be returned.
     * @param {Array.<String>} [metadata] Videos can be tagged with metadata tags in key:value pairs. You can search for videos with specific key value pairs using this parameter. [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) allows you to define a key that allows any value pair.
     * @param {String} [description] If you described a video with a term or sentence, you can add it here to return videos containing this string.
     * @param {String} [liveStreamId] If you know the ID for a live stream, you can retrieve the stream by adding the ID for it here.
     * @param {String} [sortBy] Allowed: publishedAt, title. You can search by the time videos were published at, or by title.
     * @param {String} [sortOrder] Allowed: asc, desc. asc is ascending and sorts from A to Z. desc is descending and sorts from Z to A.
     * @param {Number} [currentPage = 1)] Choose the number of search results to return per page. Minimum value: 1
     * @param {Number} [pageSize = 25)] Results per page. Allowed values 1-100, default is 25.
     * @param {module:api/VideosApi~lISTVideosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideosListResponse}
     */
    lISTVideos(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'title': opts['title'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'metadata': this.apiClient.buildCollectionParam(opts['metadata'], 'multi'),
        'description': opts['description'],
        'liveStreamId': opts['liveStreamId'],
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'currentPage': opts['currentPage'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VideosListResponse;
      return this.apiClient.callApi(
        '/videos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pATCHVideo operation.
     * @callback module:api/VideosApi~pATCHVideoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Video} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a video
     * Use this endpoint to update the parameters associated with your video. The video you are updating is determined by the video ID you provide in the path. For each parameter you want to update, include the update in the request body. NOTE: If you are updating an array, you must provide the entire array as what you provide here overwrites what is in the system rather than appending to it. Tutorials using [video update](https://api.video/blog/endpoints/video-update).
     * @param {String} videoId The video ID for the video you want to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/VideoUpdatePayload} [videoUpdatePayload] 
     * @param {module:api/VideosApi~pATCHVideoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Video}
     */
    pATCHVideo(videoId, opts, callback) {
      opts = opts || {};
      let postBody = opts['videoUpdatePayload'];
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling pATCHVideo");
      }

      let pathParams = {
        'videoId': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Video;
      return this.apiClient.callApi(
        '/videos/{videoId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pATCHVideosVideoIdThumbnail operation.
     * @callback module:api/VideosApi~pATCHVideosVideoIdThumbnailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Video} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pick a thumbnail
     * Pick a thumbnail from the given time code. If you'd like to upload an image for your thumbnail, use the [Upload a Thumbnail](https://docs.api.video/reference#post_videos-videoid-thumbnail) endpoint. There may be a short delay for the thumbnail to update. Tutorials using [Thumbnail picking](https://api.video/blog/endpoints/video-pick-a-thumbnail).
     * @param {String} videoId Unique identifier of the video you want to add a thumbnail to, where you use a section of your video as the thumbnail.
     * @param {Object} opts Optional parameters
     * @param {module:model/VideoThumbnailPickPayload} [videoThumbnailPickPayload] 
     * @param {module:api/VideosApi~pATCHVideosVideoIdThumbnailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Video}
     */
    pATCHVideosVideoIdThumbnail(videoId, opts, callback) {
      opts = opts || {};
      let postBody = opts['videoThumbnailPickPayload'];
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling pATCHVideosVideoIdThumbnail");
      }

      let pathParams = {
        'videoId': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Video;
      return this.apiClient.callApi(
        '/videos/{videoId}/thumbnail', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTVideo operation.
     * @callback module:api/VideosApi~pOSTVideoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Video} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a video
     * To create a video, you create its container&parameters first, before adding the video file (exception - when using an existing HTTP source). * Videos are public by default. [Learn about Private videos](https://api.video/blog/tutorials/tutorial-private-videos) * Up to 6 responsive video streams will be created (from 240p to 4k) * Mp4 encoded versions are created at the highest quality (max 1080p) by default. * Panoramic videos are for videos recorded in 360 degrees.  You can toggle this after your 360 video upload. * Searchable parameters: title, description, tags and metadata   ```shell $ curl https://ws.api.video/videos \\ -H 'Authorization: Bearer {access_token} \\ -d '{\"title\":\"My video\",       \"description\":\"so many details\",      \"mp4Support\":true }' ```    ## add an URL to upload on creation You can also create a video directly from a video hosted on a third-party server by giving its URI in `source` parameter: ```shell $ curl https://ws.api.video/videos \\ -H 'Authorization: Bearer {access_token} \\ -d '{\"source\":\"http://uri/to/video.mp4\", \"title\":\"My video\"}' ```  In this case, the service will respond `202 Accepted` and ingest the video asynchronously. ## Track users with Dynamic Metadata Metadata values can be a key:value where the values are predefined, but Dynamic metadata allows you to enter *any* value for a defined key.  To defined a dynamic metadata pair use: ``` \"metadata\":[{\"dynamicKey\": \"__dynamicKey__\"}] ```  The double underscore on both sides of the value allows any variable to be added for a given video session. Added the the url you might have: ``` <iframe type=\"text/html\" src=\"https://embed.api.video/vod/vi6QvU9dhYCzW3BpPvPsZUa8?metadata[classUserName]=Doug\" width=\"960\" height=\"320\" frameborder=\"0\" scrollling=\"no\"></iframe> ```   This video session will be tagged as watched by Doug - allowing for in-depth analysis on how each viewer interacts with the videos. ### We have tutorials on: * [Creating and uploading videos](https://api.video/blog/tutorials/video-upload-tutorial) * [Uploading large videos](https://api.video/blog/tutorials/video-upload-tutorial-large-videos)   * [Using tags with videos](https://api.video/blog/tutorials/video-tagging-best-practices) * [Private videos](https://api.video/blog/tutorials/tutorial-private-videos) * [Using Dynamic Metadata](https://api.video/blog/tutorials/dynamic-metadata)  * Full list of [tutorials](https://api.video/blog/endpoints/video-create) that demonstrate this endpoint. 
     * @param {Object} opts Optional parameters
     * @param {module:model/VideoCreatePayload} [videoCreatePayload] video to create
     * @param {module:api/VideosApi~pOSTVideoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Video}
     */
    pOSTVideo(opts, callback) {
      opts = opts || {};
      let postBody = opts['videoCreatePayload'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Video;
      return this.apiClient.callApi(
        '/videos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTVideosVideoIdSource operation.
     * @callback module:api/VideosApi~pOSTVideosVideoIdSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Video} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a video
     * To upload a video to the videoId you created. Replace {videoId} with the id you'd like to use, {access_token} with your token, and /path/to/video.mp4 with the path to the video you'd like to upload. You can only upload your video to the videoId once. ```bash curl https://ws.api.video/videos/{videoId}/source \\   -H 'Authorization: Bearer {access_token}' \\   -F file=@/path/to/video.mp4    ``` Tutorials using [video upload](https://api.video/blog/endpoints/video-upload).
     * @param {String} videoId Enter the videoId you want to use to upload your video.
     * @param {File} file The path to the video you would like to upload. The path must be local. If you want to use a video from an online source, you must use the \\\"/videos\\\" endpoint and add the \\\"source\\\" parameter when you create a new video.
     * @param {Object} opts Optional parameters
     * @param {String} [contentRange] Content-Range represents the range of bytes that will be returned as a result of the request. Byte ranges are inclusive, meaning that bytes 0-999 represents the first 1000 bytes in a file or object.
     * @param {module:api/VideosApi~pOSTVideosVideoIdSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Video}
     */
    pOSTVideosVideoIdSource(videoId, file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling pOSTVideosVideoIdSource");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling pOSTVideosVideoIdSource");
      }

      let pathParams = {
        'videoId': videoId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Range': opts['contentRange']
      };
      let formParams = {
        'file': file
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Video;
      return this.apiClient.callApi(
        '/videos/{videoId}/source', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTVideosVideoIdThumbnail operation.
     * @callback module:api/VideosApi~pOSTVideosVideoIdThumbnailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Video} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a thumbnail
     * The thumbnail is the poster that appears in the player window before video playback begins. This endpoint allows you to upload an image for the thumbnail. To select a still frame from the video using a time stamp, use [Pick a Thumbnail](https://docs.api.video/reference#patch_videos-videoid-thumbnail) to pick a time in the video.  Note: There may be a short delay before the new thumbnail is delivered to our CDN. Tutorials using [Thumbnail upload](https://api.video/blog/endpoints/videos-upload-a-thumbnail).
     * @param {String} videoId Unique identifier of the chosen video 
     * @param {File} file The image to be added as a thumbnail.
     * @param {module:api/VideosApi~pOSTVideosVideoIdThumbnailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Video}
     */
    pOSTVideosVideoIdThumbnail(videoId, file, callback) {
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling pOSTVideosVideoIdThumbnail");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling pOSTVideosVideoIdThumbnail");
      }

      let pathParams = {
        'videoId': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Video;
      return this.apiClient.callApi(
        '/videos/{videoId}/thumbnail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
