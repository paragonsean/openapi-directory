/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequest from '../model/BadRequest';
import Chapter from '../model/Chapter';
import ChaptersListResponse from '../model/ChaptersListResponse';
import NotFound from '../model/NotFound';

/**
* Chapters service.
* @module api/ChaptersApi
* @version 1
*/
export default class ChaptersApi {

    /**
    * Constructs a new ChaptersApi. 
    * @alias module:api/ChaptersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dELETEVideosVideoIdChaptersLanguage operation.
     * @callback module:api/ChaptersApi~dELETEVideosVideoIdChaptersLanguageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a chapter
     * @param {String} videoId The unique identifier for the video you want to delete a chapter from. 
     * @param {String} language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
     * @param {module:api/ChaptersApi~dELETEVideosVideoIdChaptersLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dELETEVideosVideoIdChaptersLanguage(videoId, language, callback) {
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling dELETEVideosVideoIdChaptersLanguage");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling dELETEVideosVideoIdChaptersLanguage");
      }

      let pathParams = {
        'videoId': videoId,
        'language': language
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/videos/{videoId}/chapters/{language}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETVideosVideoIdChapters operation.
     * @callback module:api/ChaptersApi~gETVideosVideoIdChaptersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChaptersListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List video chapters
     * Retrieve a list of all chapters for a specified video.
     * @param {String} videoId The unique identifier for the video you want to retrieve a list of chapters for.
     * @param {Object} opts Optional parameters
     * @param {Number} [currentPage = 1)] Choose the number of search results to return per page. Minimum value: 1
     * @param {Number} [pageSize = 25)] Results per page. Allowed values 1-100, default is 25.
     * @param {module:api/ChaptersApi~gETVideosVideoIdChaptersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChaptersListResponse}
     */
    gETVideosVideoIdChapters(videoId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling gETVideosVideoIdChapters");
      }

      let pathParams = {
        'videoId': videoId
      };
      let queryParams = {
        'currentPage': opts['currentPage'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChaptersListResponse;
      return this.apiClient.callApi(
        '/videos/{videoId}/chapters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETVideosVideoIdChaptersLanguage operation.
     * @callback module:api/ChaptersApi~gETVideosVideoIdChaptersLanguageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Chapter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show a chapter
     * Chapters help your viewers find the sections of the video they are most interested in viewing. Tutorials that use the [chapters endpoint](https://api.video/blog/endpoints/chapters).
     * @param {String} videoId The unique identifier for the video you want to show a chapter for.
     * @param {String} language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
     * @param {module:api/ChaptersApi~gETVideosVideoIdChaptersLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Chapter}
     */
    gETVideosVideoIdChaptersLanguage(videoId, language, callback) {
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling gETVideosVideoIdChaptersLanguage");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling gETVideosVideoIdChaptersLanguage");
      }

      let pathParams = {
        'videoId': videoId,
        'language': language
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Chapter;
      return this.apiClient.callApi(
        '/videos/{videoId}/chapters/{language}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTVideosVideoIdChaptersLanguage operation.
     * @callback module:api/ChaptersApi~pOSTVideosVideoIdChaptersLanguageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Chapter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a chapter
     * Chapters help break the video into sections. Read our [tutorial](https://api.video/blog/tutorials/adding-chapters-to-your-videos) for more details.
     * @param {String} videoId The unique identifier for the video you want to upload a chapter for.
     * @param {String} language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
     * @param {File} file The VTT file describing the chapters you want to upload.
     * @param {module:api/ChaptersApi~pOSTVideosVideoIdChaptersLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Chapter}
     */
    pOSTVideosVideoIdChaptersLanguage(videoId, language, file, callback) {
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling pOSTVideosVideoIdChaptersLanguage");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling pOSTVideosVideoIdChaptersLanguage");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling pOSTVideosVideoIdChaptersLanguage");
      }

      let pathParams = {
        'videoId': videoId,
        'language': language
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Chapter;
      return this.apiClient.callApi(
        '/videos/{videoId}/chapters/{language}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
