/**
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequest from '../model/BadRequest';
import NotFound from '../model/NotFound';
import TokenCreatePayload from '../model/TokenCreatePayload';
import TokenListResponse from '../model/TokenListResponse';
import UploadToken from '../model/UploadToken';
import Video from '../model/Video';

/**
* VideosDelegatedUpload service.
* @module api/VideosDelegatedUploadApi
* @version 1
*/
export default class VideosDelegatedUploadApi {

    /**
    * Constructs a new VideosDelegatedUploadApi. 
    * @alias module:api/VideosDelegatedUploadApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dELETEUploadTokensUploadToken operation.
     * @callback module:api/VideosDelegatedUploadApi~dELETEUploadTokensUploadTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an upload token
     * Delete an existing upload token. This is especially useful for tokens you may have created that do not expire.
     * @param {String} uploadToken The unique identifier for the upload token you want to delete. Deleting a token will make it so the token can no longer be used for authentication.
     * @param {module:api/VideosDelegatedUploadApi~dELETEUploadTokensUploadTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dELETEUploadTokensUploadToken(uploadToken, callback) {
      let postBody = null;
      // verify the required parameter 'uploadToken' is set
      if (uploadToken === undefined || uploadToken === null) {
        throw new Error("Missing the required parameter 'uploadToken' when calling dELETEUploadTokensUploadToken");
      }

      let pathParams = {
        'uploadToken': uploadToken
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/upload-tokens/{uploadToken}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETUploadTokens operation.
     * @callback module:api/VideosDelegatedUploadApi~gETUploadTokensCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all active upload tokens.
     * A delegated token is used to allow secure uploads without exposing your API key. Use this endpoint to retrieve a list of all currently active delegated tokens. Tutorials using [delegated upload](https://api.video/blog/endpoints/delegated-upload).
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [sortBy] Allowed: createdAt, ttl. You can use these to sort by when a token was created, or how much longer the token will be active (ttl - time to live). Date and time is presented in ISO-8601 format.
     * @param {module:model/String} [sortOrder] Allowed: asc, desc. Ascending is 0-9 or A-Z. Descending is 9-0 or Z-A.
     * @param {Number} [currentPage = 1)] Choose the number of search results to return per page. Minimum value: 1
     * @param {Number} [pageSize = 25)] Results per page. Allowed values 1-100, default is 25.
     * @param {module:api/VideosDelegatedUploadApi~gETUploadTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenListResponse}
     */
    gETUploadTokens(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'currentPage': opts['currentPage'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TokenListResponse;
      return this.apiClient.callApi(
        '/upload-tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETUploadTokensUploadToken operation.
     * @callback module:api/VideosDelegatedUploadApi~gETUploadTokensUploadTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show upload token
     * You can retrieve details about a specific upload token if you have the unique identifier for the upload token. Add it in the path of the endpoint. Details include time-to-live (ttl), when the token was created, and when it will expire.
     * @param {String} uploadToken The unique identifier for the token you want information about.
     * @param {module:api/VideosDelegatedUploadApi~gETUploadTokensUploadTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadToken}
     */
    gETUploadTokensUploadToken(uploadToken, callback) {
      let postBody = null;
      // verify the required parameter 'uploadToken' is set
      if (uploadToken === undefined || uploadToken === null) {
        throw new Error("Missing the required parameter 'uploadToken' when calling gETUploadTokensUploadToken");
      }

      let pathParams = {
        'uploadToken': uploadToken
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UploadToken;
      return this.apiClient.callApi(
        '/upload-tokens/{uploadToken}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTUpload operation.
     * @callback module:api/VideosDelegatedUploadApi~pOSTUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Video} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload with an upload token
     * When given a token, anyone can upload a file to the URI `https://ws.api.video/upload?token=<tokenId>`.  Example with cURL:  ```curl $ curl  --request POST --url 'https://ws.api.video/upload?token=toXXX'  --header 'content-type: multipart/form-data'  -F file=@video.mp4 ```  Or in an HTML form, with a little JavaScript to convert the form into JSON: ```html <!--form for user interaction--> <form name=\"videoUploadForm\" >   <label for=video>Video:</label>   <input type=file name=source/><br/>   <input value=\"Submit\" type=\"submit\"> </form> <div></div> <!--JS takes the form data      uses FormData to turn the response into JSON.     then uses POST to upload the video file.     Update the token parameter in the url to your upload token.     --> <script>    var form = document.forms.namedItem(\"videoUploadForm\");     form.addEventListener('submit', function(ev) {   ev.preventDefault();      var oOutput = document.querySelector(\"div\"),          oData = new FormData(form);      var oReq = new XMLHttpRequest();         oReq.open(\"POST\", \"https://ws.api.video/upload?token=toXXX\", true);      oReq.send(oData);   oReq.onload = function(oEvent) {        if (oReq.status ==201) {          oOutput.innerHTML = \"Your video is uploaded!<br/>\"  + oReq.response;        } else {          oOutput.innerHTML = \"Error \" + oReq.status + \" occurred when trying to upload your file.<br />\";        }      };    }, false);  </script> ```   ### Dealing with large files  We have created a <a href='https://api.video/blog/tutorials/uploading-large-files-with-javascript'>tutorial</a> to walk through the steps required.
     * @param {String} token The unique identifier for the token you want to use to upload a video.
     * @param {File} file The path to the video you want to upload.
     * @param {Object} opts Optional parameters
     * @param {String} [contentRange] Content-Range represents the range of bytes that will be returned as a result of the request. Byte ranges are inclusive, meaning that bytes 0-999 represents the first 1000 bytes in a file or object.
     * @param {String} [videoId] The video id returned by the first call to this endpoint in a large video upload scenario.
     * @param {module:api/VideosDelegatedUploadApi~pOSTUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Video}
     */
    pOSTUpload(token, file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling pOSTUpload");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling pOSTUpload");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
        'Content-Range': opts['contentRange']
      };
      let formParams = {
        'file': file,
        'videoId': opts['videoId']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Video;
      return this.apiClient.callApi(
        '/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTUploadTokens operation.
     * @callback module:api/VideosDelegatedUploadApi~pOSTUploadTokensCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate an upload token
     * Use this endpoint to generate an upload token. You can use this token to authenticate video uploads while keeping your API key safe. Tutorials using [delegated upload](https://api.video/blog/endpoints/delegated-upload).
     * @param {Object} opts Optional parameters
     * @param {module:model/TokenCreatePayload} [tokenCreatePayload] 
     * @param {module:api/VideosDelegatedUploadApi~pOSTUploadTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadToken}
     */
    pOSTUploadTokens(opts, callback) {
      opts = opts || {};
      let postBody = opts['tokenCreatePayload'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UploadToken;
      return this.apiClient.callApi(
        '/upload-tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
