/*
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LiveStreamAssets;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LiveStream
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:56.056867-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LiveStream {
  public static final String SERIALIZED_NAME_ASSETS = "assets";
  @SerializedName(SERIALIZED_NAME_ASSETS)
  private LiveStreamAssets assets;

  public static final String SERIALIZED_NAME_BROADCASTING = "broadcasting";
  @SerializedName(SERIALIZED_NAME_BROADCASTING)
  private Boolean broadcasting;

  public static final String SERIALIZED_NAME_LIVE_STREAM_ID = "liveStreamId";
  @SerializedName(SERIALIZED_NAME_LIVE_STREAM_ID)
  private String liveStreamId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PLAYER_ID = "playerId";
  @SerializedName(SERIALIZED_NAME_PLAYER_ID)
  private String playerId;

  public static final String SERIALIZED_NAME_PUBLIC = "public";
  @SerializedName(SERIALIZED_NAME_PUBLIC)
  private Boolean _public;

  public static final String SERIALIZED_NAME_RECORD = "record";
  @SerializedName(SERIALIZED_NAME_RECORD)
  private Boolean record;

  public static final String SERIALIZED_NAME_STREAM_KEY = "streamKey";
  @SerializedName(SERIALIZED_NAME_STREAM_KEY)
  private String streamKey;

  public LiveStream() {
  }

  public LiveStream assets(LiveStreamAssets assets) {
    this.assets = assets;
    return this;
  }

  /**
   * Get assets
   * @return assets
   */
  @javax.annotation.Nullable
  public LiveStreamAssets getAssets() {
    return assets;
  }

  public void setAssets(LiveStreamAssets assets) {
    this.assets = assets;
  }


  public LiveStream broadcasting(Boolean broadcasting) {
    this.broadcasting = broadcasting;
    return this;
  }

  /**
   * Whether or not you are broadcasting the live video you recorded for others to see. True means you are broadcasting to viewers, false means you are not.
   * @return broadcasting
   */
  @javax.annotation.Nullable
  public Boolean getBroadcasting() {
    return broadcasting;
  }

  public void setBroadcasting(Boolean broadcasting) {
    this.broadcasting = broadcasting;
  }


  public LiveStream liveStreamId(String liveStreamId) {
    this.liveStreamId = liveStreamId;
    return this;
  }

  /**
   * The unique identifier for the live stream. Live stream IDs begin with \&quot;li.\&quot;
   * @return liveStreamId
   */
  @javax.annotation.Nullable
  public String getLiveStreamId() {
    return liveStreamId;
  }

  public void setLiveStreamId(String liveStreamId) {
    this.liveStreamId = liveStreamId;
  }


  public LiveStream name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of your live stream.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public LiveStream playerId(String playerId) {
    this.playerId = playerId;
    return this;
  }

  /**
   * The unique identifier for the player.
   * @return playerId
   */
  @javax.annotation.Nullable
  public String getPlayerId() {
    return playerId;
  }

  public void setPlayerId(String playerId) {
    this.playerId = playerId;
  }


  public LiveStream _public(Boolean _public) {
    this._public = _public;
    return this;
  }

  /**
   * BETA FEATURE Please limit all public &#x3D; false (\&quot;private\&quot;) livestreams to 3,000 users. Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view.
   * @return _public
   */
  @javax.annotation.Nullable
  public Boolean getPublic() {
    return _public;
  }

  public void setPublic(Boolean _public) {
    this._public = _public;
  }


  public LiveStream record(Boolean record) {
    this.record = record;
    return this;
  }

  /**
   * Whether you are recording or not.
   * @return record
   */
  @javax.annotation.Nullable
  public Boolean getRecord() {
    return record;
  }

  public void setRecord(Boolean record) {
    this.record = record;
  }


  public LiveStream streamKey(String streamKey) {
    this.streamKey = streamKey;
    return this;
  }

  /**
   * The unique, private stream key that you use to begin streaming.
   * @return streamKey
   */
  @javax.annotation.Nullable
  public String getStreamKey() {
    return streamKey;
  }

  public void setStreamKey(String streamKey) {
    this.streamKey = streamKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveStream liveStream = (LiveStream) o;
    return Objects.equals(this.assets, liveStream.assets) &&
        Objects.equals(this.broadcasting, liveStream.broadcasting) &&
        Objects.equals(this.liveStreamId, liveStream.liveStreamId) &&
        Objects.equals(this.name, liveStream.name) &&
        Objects.equals(this.playerId, liveStream.playerId) &&
        Objects.equals(this._public, liveStream._public) &&
        Objects.equals(this.record, liveStream.record) &&
        Objects.equals(this.streamKey, liveStream.streamKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assets, broadcasting, liveStreamId, name, playerId, _public, record, streamKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveStream {\n");
    sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
    sb.append("    broadcasting: ").append(toIndentedString(broadcasting)).append("\n");
    sb.append("    liveStreamId: ").append(toIndentedString(liveStreamId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    playerId: ").append(toIndentedString(playerId)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    record: ").append(toIndentedString(record)).append("\n");
    sb.append("    streamKey: ").append(toIndentedString(streamKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assets");
    openapiFields.add("broadcasting");
    openapiFields.add("liveStreamId");
    openapiFields.add("name");
    openapiFields.add("playerId");
    openapiFields.add("public");
    openapiFields.add("record");
    openapiFields.add("streamKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LiveStream
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LiveStream.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveStream is not found in the empty JSON string", LiveStream.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LiveStream.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LiveStream` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `assets`
      if (jsonObj.get("assets") != null && !jsonObj.get("assets").isJsonNull()) {
        LiveStreamAssets.validateJsonElement(jsonObj.get("assets"));
      }
      if ((jsonObj.get("liveStreamId") != null && !jsonObj.get("liveStreamId").isJsonNull()) && !jsonObj.get("liveStreamId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liveStreamId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liveStreamId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("playerId") != null && !jsonObj.get("playerId").isJsonNull()) && !jsonObj.get("playerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `playerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("playerId").toString()));
      }
      if ((jsonObj.get("streamKey") != null && !jsonObj.get("streamKey").isJsonNull()) && !jsonObj.get("streamKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streamKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streamKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveStream.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveStream' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveStream> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveStream.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveStream>() {
           @Override
           public void write(JsonWriter out, LiveStream value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveStream read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LiveStream given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LiveStream
   * @throws IOException if the JSON string is invalid with respect to LiveStream
   */
  public static LiveStream fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveStream.class);
  }

  /**
   * Convert an instance of LiveStream to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

