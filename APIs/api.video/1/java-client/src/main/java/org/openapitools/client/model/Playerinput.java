/*
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Playerinput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:56.056867-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Playerinput {
  public static final String SERIALIZED_NAME_BACKGROUND_BOTTOM = "backgroundBottom";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_BOTTOM)
  private String backgroundBottom;

  public static final String SERIALIZED_NAME_BACKGROUND_TEXT = "backgroundText";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_TEXT)
  private String backgroundText;

  public static final String SERIALIZED_NAME_BACKGROUND_TOP = "backgroundTop";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_TOP)
  private String backgroundTop;

  public static final String SERIALIZED_NAME_ENABLE_API = "enableApi";
  @SerializedName(SERIALIZED_NAME_ENABLE_API)
  private Boolean enableApi = true;

  public static final String SERIALIZED_NAME_ENABLE_CONTROLS = "enableControls";
  @SerializedName(SERIALIZED_NAME_ENABLE_CONTROLS)
  private Boolean enableControls = true;

  public static final String SERIALIZED_NAME_FORCE_AUTOPLAY = "forceAutoplay";
  @SerializedName(SERIALIZED_NAME_FORCE_AUTOPLAY)
  private Boolean forceAutoplay = false;

  public static final String SERIALIZED_NAME_FORCE_LOOP = "forceLoop";
  @SerializedName(SERIALIZED_NAME_FORCE_LOOP)
  private Boolean forceLoop = false;

  public static final String SERIALIZED_NAME_HIDE_TITLE = "hideTitle";
  @SerializedName(SERIALIZED_NAME_HIDE_TITLE)
  private Boolean hideTitle = false;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_LINK_HOVER = "linkHover";
  @SerializedName(SERIALIZED_NAME_LINK_HOVER)
  private String linkHover;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TRACK_BACKGROUND = "trackBackground";
  @SerializedName(SERIALIZED_NAME_TRACK_BACKGROUND)
  private String trackBackground;

  public static final String SERIALIZED_NAME_TRACK_PLAYED = "trackPlayed";
  @SerializedName(SERIALIZED_NAME_TRACK_PLAYED)
  private String trackPlayed;

  public static final String SERIALIZED_NAME_TRACK_UNPLAYED = "trackUnplayed";
  @SerializedName(SERIALIZED_NAME_TRACK_UNPLAYED)
  private String trackUnplayed;

  public Playerinput() {
  }

  public Playerinput backgroundBottom(String backgroundBottom) {
    this.backgroundBottom = backgroundBottom;
    return this;
  }

  /**
   * RGBA color: bottom 50% of background. Default: rgba(0, 0, 0, .7)
   * @return backgroundBottom
   */
  @javax.annotation.Nullable
  public String getBackgroundBottom() {
    return backgroundBottom;
  }

  public void setBackgroundBottom(String backgroundBottom) {
    this.backgroundBottom = backgroundBottom;
  }


  public Playerinput backgroundText(String backgroundText) {
    this.backgroundText = backgroundText;
    return this;
  }

  /**
   * RGBA color for title text. Default: rgba(255, 255, 255, 1)
   * @return backgroundText
   */
  @javax.annotation.Nullable
  public String getBackgroundText() {
    return backgroundText;
  }

  public void setBackgroundText(String backgroundText) {
    this.backgroundText = backgroundText;
  }


  public Playerinput backgroundTop(String backgroundTop) {
    this.backgroundTop = backgroundTop;
    return this;
  }

  /**
   * RGBA color: top 50% of background. Default: rgba(0, 0, 0, .7)
   * @return backgroundTop
   */
  @javax.annotation.Nullable
  public String getBackgroundTop() {
    return backgroundTop;
  }

  public void setBackgroundTop(String backgroundTop) {
    this.backgroundTop = backgroundTop;
  }


  public Playerinput enableApi(Boolean enableApi) {
    this.enableApi = enableApi;
    return this;
  }

  /**
   * enable/disable player SDK access. Default: true
   * @return enableApi
   */
  @javax.annotation.Nullable
  public Boolean getEnableApi() {
    return enableApi;
  }

  public void setEnableApi(Boolean enableApi) {
    this.enableApi = enableApi;
  }


  public Playerinput enableControls(Boolean enableControls) {
    this.enableControls = enableControls;
    return this;
  }

  /**
   * enable/disable player controls. Default: true
   * @return enableControls
   */
  @javax.annotation.Nullable
  public Boolean getEnableControls() {
    return enableControls;
  }

  public void setEnableControls(Boolean enableControls) {
    this.enableControls = enableControls;
  }


  public Playerinput forceAutoplay(Boolean forceAutoplay) {
    this.forceAutoplay = forceAutoplay;
    return this;
  }

  /**
   * enable/disable player autoplay. Default: false
   * @return forceAutoplay
   */
  @javax.annotation.Nullable
  public Boolean getForceAutoplay() {
    return forceAutoplay;
  }

  public void setForceAutoplay(Boolean forceAutoplay) {
    this.forceAutoplay = forceAutoplay;
  }


  public Playerinput forceLoop(Boolean forceLoop) {
    this.forceLoop = forceLoop;
    return this;
  }

  /**
   * enable/disable looping. Default: false
   * @return forceLoop
   */
  @javax.annotation.Nullable
  public Boolean getForceLoop() {
    return forceLoop;
  }

  public void setForceLoop(Boolean forceLoop) {
    this.forceLoop = forceLoop;
  }


  public Playerinput hideTitle(Boolean hideTitle) {
    this.hideTitle = hideTitle;
    return this;
  }

  /**
   * enable/disable title. Default: false
   * @return hideTitle
   */
  @javax.annotation.Nullable
  public Boolean getHideTitle() {
    return hideTitle;
  }

  public void setHideTitle(Boolean hideTitle) {
    this.hideTitle = hideTitle;
  }


  public Playerinput link(String link) {
    this.link = link;
    return this;
  }

  /**
   * RGBA color for all controls. Default: rgba(255, 255, 255, 1)
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public Playerinput linkHover(String linkHover) {
    this.linkHover = linkHover;
    return this;
  }

  /**
   * RGBA color for all controls when hovered. Default: rgba(255, 255, 255, 1)
   * @return linkHover
   */
  @javax.annotation.Nullable
  public String getLinkHover() {
    return linkHover;
  }

  public void setLinkHover(String linkHover) {
    this.linkHover = linkHover;
  }


  public Playerinput text(String text) {
    this.text = text;
    return this;
  }

  /**
   * RGBA color for timer text. Default: rgba(255, 255, 255, 1)
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public Playerinput trackBackground(String trackBackground) {
    this.trackBackground = trackBackground;
    return this;
  }

  /**
   * RGBA color playback bar: background. Default: rgba(255, 255, 255, .2)
   * @return trackBackground
   */
  @javax.annotation.Nullable
  public String getTrackBackground() {
    return trackBackground;
  }

  public void setTrackBackground(String trackBackground) {
    this.trackBackground = trackBackground;
  }


  public Playerinput trackPlayed(String trackPlayed) {
    this.trackPlayed = trackPlayed;
    return this;
  }

  /**
   * RGBA color playback bar: played content. Default: rgba(88, 131, 255, .95)
   * @return trackPlayed
   */
  @javax.annotation.Nullable
  public String getTrackPlayed() {
    return trackPlayed;
  }

  public void setTrackPlayed(String trackPlayed) {
    this.trackPlayed = trackPlayed;
  }


  public Playerinput trackUnplayed(String trackUnplayed) {
    this.trackUnplayed = trackUnplayed;
    return this;
  }

  /**
   * RGBA color playback bar: downloaded but unplayed (buffered) content. Default: rgba(255, 255, 255, .35)
   * @return trackUnplayed
   */
  @javax.annotation.Nullable
  public String getTrackUnplayed() {
    return trackUnplayed;
  }

  public void setTrackUnplayed(String trackUnplayed) {
    this.trackUnplayed = trackUnplayed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Playerinput playerinput = (Playerinput) o;
    return Objects.equals(this.backgroundBottom, playerinput.backgroundBottom) &&
        Objects.equals(this.backgroundText, playerinput.backgroundText) &&
        Objects.equals(this.backgroundTop, playerinput.backgroundTop) &&
        Objects.equals(this.enableApi, playerinput.enableApi) &&
        Objects.equals(this.enableControls, playerinput.enableControls) &&
        Objects.equals(this.forceAutoplay, playerinput.forceAutoplay) &&
        Objects.equals(this.forceLoop, playerinput.forceLoop) &&
        Objects.equals(this.hideTitle, playerinput.hideTitle) &&
        Objects.equals(this.link, playerinput.link) &&
        Objects.equals(this.linkHover, playerinput.linkHover) &&
        Objects.equals(this.text, playerinput.text) &&
        Objects.equals(this.trackBackground, playerinput.trackBackground) &&
        Objects.equals(this.trackPlayed, playerinput.trackPlayed) &&
        Objects.equals(this.trackUnplayed, playerinput.trackUnplayed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundBottom, backgroundText, backgroundTop, enableApi, enableControls, forceAutoplay, forceLoop, hideTitle, link, linkHover, text, trackBackground, trackPlayed, trackUnplayed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Playerinput {\n");
    sb.append("    backgroundBottom: ").append(toIndentedString(backgroundBottom)).append("\n");
    sb.append("    backgroundText: ").append(toIndentedString(backgroundText)).append("\n");
    sb.append("    backgroundTop: ").append(toIndentedString(backgroundTop)).append("\n");
    sb.append("    enableApi: ").append(toIndentedString(enableApi)).append("\n");
    sb.append("    enableControls: ").append(toIndentedString(enableControls)).append("\n");
    sb.append("    forceAutoplay: ").append(toIndentedString(forceAutoplay)).append("\n");
    sb.append("    forceLoop: ").append(toIndentedString(forceLoop)).append("\n");
    sb.append("    hideTitle: ").append(toIndentedString(hideTitle)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    linkHover: ").append(toIndentedString(linkHover)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    trackBackground: ").append(toIndentedString(trackBackground)).append("\n");
    sb.append("    trackPlayed: ").append(toIndentedString(trackPlayed)).append("\n");
    sb.append("    trackUnplayed: ").append(toIndentedString(trackUnplayed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backgroundBottom");
    openapiFields.add("backgroundText");
    openapiFields.add("backgroundTop");
    openapiFields.add("enableApi");
    openapiFields.add("enableControls");
    openapiFields.add("forceAutoplay");
    openapiFields.add("forceLoop");
    openapiFields.add("hideTitle");
    openapiFields.add("link");
    openapiFields.add("linkHover");
    openapiFields.add("text");
    openapiFields.add("trackBackground");
    openapiFields.add("trackPlayed");
    openapiFields.add("trackUnplayed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Playerinput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Playerinput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Playerinput is not found in the empty JSON string", Playerinput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Playerinput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Playerinput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("backgroundBottom") != null && !jsonObj.get("backgroundBottom").isJsonNull()) && !jsonObj.get("backgroundBottom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backgroundBottom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backgroundBottom").toString()));
      }
      if ((jsonObj.get("backgroundText") != null && !jsonObj.get("backgroundText").isJsonNull()) && !jsonObj.get("backgroundText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backgroundText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backgroundText").toString()));
      }
      if ((jsonObj.get("backgroundTop") != null && !jsonObj.get("backgroundTop").isJsonNull()) && !jsonObj.get("backgroundTop").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backgroundTop` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backgroundTop").toString()));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("linkHover") != null && !jsonObj.get("linkHover").isJsonNull()) && !jsonObj.get("linkHover").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkHover` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkHover").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("trackBackground") != null && !jsonObj.get("trackBackground").isJsonNull()) && !jsonObj.get("trackBackground").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackBackground` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackBackground").toString()));
      }
      if ((jsonObj.get("trackPlayed") != null && !jsonObj.get("trackPlayed").isJsonNull()) && !jsonObj.get("trackPlayed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackPlayed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackPlayed").toString()));
      }
      if ((jsonObj.get("trackUnplayed") != null && !jsonObj.get("trackUnplayed").isJsonNull()) && !jsonObj.get("trackUnplayed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackUnplayed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackUnplayed").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Playerinput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Playerinput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Playerinput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Playerinput.class));

       return (TypeAdapter<T>) new TypeAdapter<Playerinput>() {
           @Override
           public void write(JsonWriter out, Playerinput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Playerinput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Playerinput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Playerinput
   * @throws IOException if the JSON string is invalid with respect to Playerinput
   */
  public static Playerinput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Playerinput.class);
  }

  /**
   * Convert an instance of Playerinput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

