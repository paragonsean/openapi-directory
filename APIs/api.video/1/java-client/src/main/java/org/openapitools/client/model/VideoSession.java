/*
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.VideoSessionClient;
import org.openapitools.client.model.VideoSessionDevice;
import org.openapitools.client.model.VideoSessionLocation;
import org.openapitools.client.model.VideoSessionOs;
import org.openapitools.client.model.VideoSessionReferrer;
import org.openapitools.client.model.VideoSessionSession;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VideoSession
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:56.056867-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoSession {
  public static final String SERIALIZED_NAME_CLIENT = "client";
  @SerializedName(SERIALIZED_NAME_CLIENT)
  private VideoSessionClient client;

  public static final String SERIALIZED_NAME_DEVICE = "device";
  @SerializedName(SERIALIZED_NAME_DEVICE)
  private VideoSessionDevice device;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private VideoSessionLocation location;

  public static final String SERIALIZED_NAME_OS = "os";
  @SerializedName(SERIALIZED_NAME_OS)
  private VideoSessionOs os;

  public static final String SERIALIZED_NAME_REFERRER = "referrer";
  @SerializedName(SERIALIZED_NAME_REFERRER)
  private VideoSessionReferrer referrer;

  public static final String SERIALIZED_NAME_SESSION = "session";
  @SerializedName(SERIALIZED_NAME_SESSION)
  private VideoSessionSession session;

  public VideoSession() {
  }

  public VideoSession client(VideoSessionClient client) {
    this.client = client;
    return this;
  }

  /**
   * Get client
   * @return client
   */
  @javax.annotation.Nullable
  public VideoSessionClient getClient() {
    return client;
  }

  public void setClient(VideoSessionClient client) {
    this.client = client;
  }


  public VideoSession device(VideoSessionDevice device) {
    this.device = device;
    return this;
  }

  /**
   * Get device
   * @return device
   */
  @javax.annotation.Nullable
  public VideoSessionDevice getDevice() {
    return device;
  }

  public void setDevice(VideoSessionDevice device) {
    this.device = device;
  }


  public VideoSession location(VideoSessionLocation location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public VideoSessionLocation getLocation() {
    return location;
  }

  public void setLocation(VideoSessionLocation location) {
    this.location = location;
  }


  public VideoSession os(VideoSessionOs os) {
    this.os = os;
    return this;
  }

  /**
   * Get os
   * @return os
   */
  @javax.annotation.Nullable
  public VideoSessionOs getOs() {
    return os;
  }

  public void setOs(VideoSessionOs os) {
    this.os = os;
  }


  public VideoSession referrer(VideoSessionReferrer referrer) {
    this.referrer = referrer;
    return this;
  }

  /**
   * Get referrer
   * @return referrer
   */
  @javax.annotation.Nullable
  public VideoSessionReferrer getReferrer() {
    return referrer;
  }

  public void setReferrer(VideoSessionReferrer referrer) {
    this.referrer = referrer;
  }


  public VideoSession session(VideoSessionSession session) {
    this.session = session;
    return this;
  }

  /**
   * Get session
   * @return session
   */
  @javax.annotation.Nullable
  public VideoSessionSession getSession() {
    return session;
  }

  public void setSession(VideoSessionSession session) {
    this.session = session;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoSession videoSession = (VideoSession) o;
    return Objects.equals(this.client, videoSession.client) &&
        Objects.equals(this.device, videoSession.device) &&
        Objects.equals(this.location, videoSession.location) &&
        Objects.equals(this.os, videoSession.os) &&
        Objects.equals(this.referrer, videoSession.referrer) &&
        Objects.equals(this.session, videoSession.session);
  }

  @Override
  public int hashCode() {
    return Objects.hash(client, device, location, os, referrer, session);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoSession {\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    os: ").append(toIndentedString(os)).append("\n");
    sb.append("    referrer: ").append(toIndentedString(referrer)).append("\n");
    sb.append("    session: ").append(toIndentedString(session)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("client");
    openapiFields.add("device");
    openapiFields.add("location");
    openapiFields.add("os");
    openapiFields.add("referrer");
    openapiFields.add("session");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoSession
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoSession.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoSession is not found in the empty JSON string", VideoSession.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoSession.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoSession` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `client`
      if (jsonObj.get("client") != null && !jsonObj.get("client").isJsonNull()) {
        VideoSessionClient.validateJsonElement(jsonObj.get("client"));
      }
      // validate the optional field `device`
      if (jsonObj.get("device") != null && !jsonObj.get("device").isJsonNull()) {
        VideoSessionDevice.validateJsonElement(jsonObj.get("device"));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        VideoSessionLocation.validateJsonElement(jsonObj.get("location"));
      }
      // validate the optional field `os`
      if (jsonObj.get("os") != null && !jsonObj.get("os").isJsonNull()) {
        VideoSessionOs.validateJsonElement(jsonObj.get("os"));
      }
      // validate the optional field `referrer`
      if (jsonObj.get("referrer") != null && !jsonObj.get("referrer").isJsonNull()) {
        VideoSessionReferrer.validateJsonElement(jsonObj.get("referrer"));
      }
      // validate the optional field `session`
      if (jsonObj.get("session") != null && !jsonObj.get("session").isJsonNull()) {
        VideoSessionSession.validateJsonElement(jsonObj.get("session"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoSession.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoSession' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoSession> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoSession.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoSession>() {
           @Override
           public void write(JsonWriter out, VideoSession value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoSession read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoSession given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoSession
   * @throws IOException if the JSON string is invalid with respect to VideoSession
   */
  public static VideoSession fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoSession.class);
  }

  /**
   * Convert an instance of VideoSession to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

