/*
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.NotFound;
import org.openapitools.client.model.RawStatisticsListLiveStreamAnalyticsResponse;
import org.openapitools.client.model.RawStatisticsListPlayerSessionEventsResponse;
import org.openapitools.client.model.RawStatisticsListSessionsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnalyticsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AnalyticsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnalyticsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call gETAnalyticsLiveStreamsLiveStreamIdCall(String liveStreamId, String period, Integer currentPage, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analytics/live-streams/{liveStreamId}"
            .replace("{" + "liveStreamId" + "}", localVarApiClient.escapeString(liveStreamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period", period));
        }

        if (currentPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentPage", currentPage));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETAnalyticsLiveStreamsLiveStreamIdValidateBeforeCall(String liveStreamId, String period, Integer currentPage, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liveStreamId' is set
        if (liveStreamId == null) {
            throw new ApiException("Missing the required parameter 'liveStreamId' when calling gETAnalyticsLiveStreamsLiveStreamId(Async)");
        }

        return gETAnalyticsLiveStreamsLiveStreamIdCall(liveStreamId, period, currentPage, pageSize, _callback);

    }


    private ApiResponse<RawStatisticsListLiveStreamAnalyticsResponse> gETAnalyticsLiveStreamsLiveStreamIdWithHttpInfo(String liveStreamId, String period, Integer currentPage, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = gETAnalyticsLiveStreamsLiveStreamIdValidateBeforeCall(liveStreamId, period, currentPage, pageSize, null);
        Type localVarReturnType = new TypeToken<RawStatisticsListLiveStreamAnalyticsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call gETAnalyticsLiveStreamsLiveStreamIdAsync(String liveStreamId, String period, Integer currentPage, Integer pageSize, final ApiCallback<RawStatisticsListLiveStreamAnalyticsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETAnalyticsLiveStreamsLiveStreamIdValidateBeforeCall(liveStreamId, period, currentPage, pageSize, _callback);
        Type localVarReturnType = new TypeToken<RawStatisticsListLiveStreamAnalyticsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgETAnalyticsLiveStreamsLiveStreamIdRequest {
        private final String liveStreamId;
        private String period;
        private Integer currentPage;
        private Integer pageSize;

        private APIgETAnalyticsLiveStreamsLiveStreamIdRequest(String liveStreamId) {
            this.liveStreamId = liveStreamId;
        }

        /**
         * Set period
         * @param period Period must have one of the following formats:  - For a day : \&quot;2018-01-01\&quot;, - For a week: \&quot;2018-W01\&quot;,  - For a month: \&quot;2018-01\&quot; - For a year: \&quot;2018\&quot; For a range period:  -  Date range: \&quot;2018-01-01/2018-01-15\&quot;  (optional)
         * @return APIgETAnalyticsLiveStreamsLiveStreamIdRequest
         */
        public APIgETAnalyticsLiveStreamsLiveStreamIdRequest period(String period) {
            this.period = period;
            return this;
        }

        /**
         * Set currentPage
         * @param currentPage Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
         * @return APIgETAnalyticsLiveStreamsLiveStreamIdRequest
         */
        public APIgETAnalyticsLiveStreamsLiveStreamIdRequest currentPage(Integer currentPage) {
            this.currentPage = currentPage;
            return this;
        }

        /**
         * Set pageSize
         * @param pageSize Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
         * @return APIgETAnalyticsLiveStreamsLiveStreamIdRequest
         */
        public APIgETAnalyticsLiveStreamsLiveStreamIdRequest pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Build call for gETAnalyticsLiveStreamsLiveStreamId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return gETAnalyticsLiveStreamsLiveStreamIdCall(liveStreamId, period, currentPage, pageSize, _callback);
        }

        /**
         * Execute gETAnalyticsLiveStreamsLiveStreamId request
         * @return RawStatisticsListLiveStreamAnalyticsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public RawStatisticsListLiveStreamAnalyticsResponse execute() throws ApiException {
            ApiResponse<RawStatisticsListLiveStreamAnalyticsResponse> localVarResp = gETAnalyticsLiveStreamsLiveStreamIdWithHttpInfo(liveStreamId, period, currentPage, pageSize);
            return localVarResp.getData();
        }

        /**
         * Execute gETAnalyticsLiveStreamsLiveStreamId request with HTTP info returned
         * @return ApiResponse&lt;RawStatisticsListLiveStreamAnalyticsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RawStatisticsListLiveStreamAnalyticsResponse> executeWithHttpInfo() throws ApiException {
            return gETAnalyticsLiveStreamsLiveStreamIdWithHttpInfo(liveStreamId, period, currentPage, pageSize);
        }

        /**
         * Execute gETAnalyticsLiveStreamsLiveStreamId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RawStatisticsListLiveStreamAnalyticsResponse> _callback) throws ApiException {
            return gETAnalyticsLiveStreamsLiveStreamIdAsync(liveStreamId, period, currentPage, pageSize, _callback);
        }
    }

    /**
     * List live stream player sessions
     * 
     * @param liveStreamId The unique identifier for the live stream you want to retrieve analytics for. (required)
     * @return APIgETAnalyticsLiveStreamsLiveStreamIdRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public APIgETAnalyticsLiveStreamsLiveStreamIdRequest gETAnalyticsLiveStreamsLiveStreamId(String liveStreamId) {
        return new APIgETAnalyticsLiveStreamsLiveStreamIdRequest(liveStreamId);
    }
    private okhttp3.Call gETAnalyticsSessionsSessionIdEventsCall(String sessionId, Integer currentPage, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analytics/sessions/{sessionId}/events"
            .replace("{" + "sessionId" + "}", localVarApiClient.escapeString(sessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currentPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentPage", currentPage));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETAnalyticsSessionsSessionIdEventsValidateBeforeCall(String sessionId, Integer currentPage, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling gETAnalyticsSessionsSessionIdEvents(Async)");
        }

        return gETAnalyticsSessionsSessionIdEventsCall(sessionId, currentPage, pageSize, _callback);

    }


    private ApiResponse<RawStatisticsListPlayerSessionEventsResponse> gETAnalyticsSessionsSessionIdEventsWithHttpInfo(String sessionId, Integer currentPage, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = gETAnalyticsSessionsSessionIdEventsValidateBeforeCall(sessionId, currentPage, pageSize, null);
        Type localVarReturnType = new TypeToken<RawStatisticsListPlayerSessionEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call gETAnalyticsSessionsSessionIdEventsAsync(String sessionId, Integer currentPage, Integer pageSize, final ApiCallback<RawStatisticsListPlayerSessionEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETAnalyticsSessionsSessionIdEventsValidateBeforeCall(sessionId, currentPage, pageSize, _callback);
        Type localVarReturnType = new TypeToken<RawStatisticsListPlayerSessionEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgETAnalyticsSessionsSessionIdEventsRequest {
        private final String sessionId;
        private Integer currentPage;
        private Integer pageSize;

        private APIgETAnalyticsSessionsSessionIdEventsRequest(String sessionId) {
            this.sessionId = sessionId;
        }

        /**
         * Set currentPage
         * @param currentPage Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
         * @return APIgETAnalyticsSessionsSessionIdEventsRequest
         */
        public APIgETAnalyticsSessionsSessionIdEventsRequest currentPage(Integer currentPage) {
            this.currentPage = currentPage;
            return this;
        }

        /**
         * Set pageSize
         * @param pageSize Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
         * @return APIgETAnalyticsSessionsSessionIdEventsRequest
         */
        public APIgETAnalyticsSessionsSessionIdEventsRequest pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Build call for gETAnalyticsSessionsSessionIdEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return gETAnalyticsSessionsSessionIdEventsCall(sessionId, currentPage, pageSize, _callback);
        }

        /**
         * Execute gETAnalyticsSessionsSessionIdEvents request
         * @return RawStatisticsListPlayerSessionEventsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public RawStatisticsListPlayerSessionEventsResponse execute() throws ApiException {
            ApiResponse<RawStatisticsListPlayerSessionEventsResponse> localVarResp = gETAnalyticsSessionsSessionIdEventsWithHttpInfo(sessionId, currentPage, pageSize);
            return localVarResp.getData();
        }

        /**
         * Execute gETAnalyticsSessionsSessionIdEvents request with HTTP info returned
         * @return ApiResponse&lt;RawStatisticsListPlayerSessionEventsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RawStatisticsListPlayerSessionEventsResponse> executeWithHttpInfo() throws ApiException {
            return gETAnalyticsSessionsSessionIdEventsWithHttpInfo(sessionId, currentPage, pageSize);
        }

        /**
         * Execute gETAnalyticsSessionsSessionIdEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RawStatisticsListPlayerSessionEventsResponse> _callback) throws ApiException {
            return gETAnalyticsSessionsSessionIdEventsAsync(sessionId, currentPage, pageSize, _callback);
        }
    }

    /**
     * List player session events
     * Useful to track and measure video&#39;s engagement.
     * @param sessionId A unique identifier you can use to reference and track a session with. (required)
     * @return APIgETAnalyticsSessionsSessionIdEventsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public APIgETAnalyticsSessionsSessionIdEventsRequest gETAnalyticsSessionsSessionIdEvents(String sessionId) {
        return new APIgETAnalyticsSessionsSessionIdEventsRequest(sessionId);
    }
    private okhttp3.Call gETAnalyticsVideosVideoIdCall(String videoId, String period, List<String> metadata, Integer currentPage, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analytics/videos/{videoId}"
            .replace("{" + "videoId" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period", period));
        }

        if (metadata != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "metadata", metadata));
        }

        if (currentPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentPage", currentPage));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETAnalyticsVideosVideoIdValidateBeforeCall(String videoId, String period, List<String> metadata, Integer currentPage, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling gETAnalyticsVideosVideoId(Async)");
        }

        return gETAnalyticsVideosVideoIdCall(videoId, period, metadata, currentPage, pageSize, _callback);

    }


    private ApiResponse<RawStatisticsListSessionsResponse> gETAnalyticsVideosVideoIdWithHttpInfo(String videoId, String period, List<String> metadata, Integer currentPage, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = gETAnalyticsVideosVideoIdValidateBeforeCall(videoId, period, metadata, currentPage, pageSize, null);
        Type localVarReturnType = new TypeToken<RawStatisticsListSessionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call gETAnalyticsVideosVideoIdAsync(String videoId, String period, List<String> metadata, Integer currentPage, Integer pageSize, final ApiCallback<RawStatisticsListSessionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETAnalyticsVideosVideoIdValidateBeforeCall(videoId, period, metadata, currentPage, pageSize, _callback);
        Type localVarReturnType = new TypeToken<RawStatisticsListSessionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgETAnalyticsVideosVideoIdRequest {
        private final String videoId;
        private String period;
        private List<String> metadata;
        private Integer currentPage;
        private Integer pageSize;

        private APIgETAnalyticsVideosVideoIdRequest(String videoId) {
            this.videoId = videoId;
        }

        /**
         * Set period
         * @param period Period must have one of the following formats:  - For a day : 2018-01-01, - For a week: 2018-W01,  - For a month: 2018-01 - For a year: 2018 For a range period:  -  Date range: 2018-01-01/2018-01-15  (optional)
         * @return APIgETAnalyticsVideosVideoIdRequest
         */
        public APIgETAnalyticsVideosVideoIdRequest period(String period) {
            this.period = period;
            return this;
        }

        /**
         * Set metadata
         * @param metadata Metadata and [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) filter. Send an array of key value pairs you want to filter sessios with. (optional)
         * @return APIgETAnalyticsVideosVideoIdRequest
         */
        public APIgETAnalyticsVideosVideoIdRequest metadata(List<String> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Set currentPage
         * @param currentPage Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
         * @return APIgETAnalyticsVideosVideoIdRequest
         */
        public APIgETAnalyticsVideosVideoIdRequest currentPage(Integer currentPage) {
            this.currentPage = currentPage;
            return this;
        }

        /**
         * Set pageSize
         * @param pageSize Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
         * @return APIgETAnalyticsVideosVideoIdRequest
         */
        public APIgETAnalyticsVideosVideoIdRequest pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Build call for gETAnalyticsVideosVideoId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return gETAnalyticsVideosVideoIdCall(videoId, period, metadata, currentPage, pageSize, _callback);
        }

        /**
         * Execute gETAnalyticsVideosVideoId request
         * @return RawStatisticsListSessionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public RawStatisticsListSessionsResponse execute() throws ApiException {
            ApiResponse<RawStatisticsListSessionsResponse> localVarResp = gETAnalyticsVideosVideoIdWithHttpInfo(videoId, period, metadata, currentPage, pageSize);
            return localVarResp.getData();
        }

        /**
         * Execute gETAnalyticsVideosVideoId request with HTTP info returned
         * @return ApiResponse&lt;RawStatisticsListSessionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RawStatisticsListSessionsResponse> executeWithHttpInfo() throws ApiException {
            return gETAnalyticsVideosVideoIdWithHttpInfo(videoId, period, metadata, currentPage, pageSize);
        }

        /**
         * Execute gETAnalyticsVideosVideoId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RawStatisticsListSessionsResponse> _callback) throws ApiException {
            return gETAnalyticsVideosVideoIdAsync(videoId, period, metadata, currentPage, pageSize, _callback);
        }
    }

    /**
     * List video player sessions
     * Retrieve all available user sessions for a specific video. Tutorials that use the [analytics endpoint](https://api.video/blog/endpoints/analytics).
     * @param videoId The unique identifier for the video you want to retrieve session information for. (required)
     * @return APIgETAnalyticsVideosVideoIdRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public APIgETAnalyticsVideosVideoIdRequest gETAnalyticsVideosVideoId(String videoId) {
        return new APIgETAnalyticsVideosVideoIdRequest(videoId);
    }
}
