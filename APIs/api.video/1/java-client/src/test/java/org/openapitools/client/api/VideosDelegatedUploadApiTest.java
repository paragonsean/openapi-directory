/*
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BadRequest;
import java.io.File;
import org.openapitools.client.model.NotFound;
import org.openapitools.client.model.TokenCreatePayload;
import org.openapitools.client.model.TokenListResponse;
import org.openapitools.client.model.UploadToken;
import org.openapitools.client.model.Video;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VideosDelegatedUploadApi
 */
@Disabled
public class VideosDelegatedUploadApiTest {

    private final VideosDelegatedUploadApi api = new VideosDelegatedUploadApi();

    /**
     * Delete an upload token
     *
     * Delete an existing upload token. This is especially useful for tokens you may have created that do not expire.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dELETEUploadTokensUploadTokenTest() throws ApiException {
        String uploadToken = null;
        api.dELETEUploadTokensUploadToken(uploadToken);
        // TODO: test validations
    }

    /**
     * List all active upload tokens.
     *
     * A delegated token is used to allow secure uploads without exposing your API key. Use this endpoint to retrieve a list of all currently active delegated tokens. Tutorials using [delegated upload](https://api.video/blog/endpoints/delegated-upload).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETUploadTokensTest() throws ApiException {
        String sortBy = null;
        String sortOrder = null;
        Integer currentPage = null;
        Integer pageSize = null;
        TokenListResponse response = api.gETUploadTokens()
                .sortBy(sortBy)
                .sortOrder(sortOrder)
                .currentPage(currentPage)
                .pageSize(pageSize)
                .execute();
        // TODO: test validations
    }

    /**
     * Show upload token
     *
     * You can retrieve details about a specific upload token if you have the unique identifier for the upload token. Add it in the path of the endpoint. Details include time-to-live (ttl), when the token was created, and when it will expire.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETUploadTokensUploadTokenTest() throws ApiException {
        String uploadToken = null;
        UploadToken response = api.gETUploadTokensUploadToken(uploadToken);
        // TODO: test validations
    }

    /**
     * Upload with an upload token
     *
     * When given a token, anyone can upload a file to the URI &#x60;https://ws.api.video/upload?token&#x3D;&lt;tokenId&gt;&#x60;.  Example with cURL:  &#x60;&#x60;&#x60;curl $ curl  --request POST --url &#39;https://ws.api.video/upload?token&#x3D;toXXX&#39;  --header &#39;content-type: multipart/form-data&#39;  -F file&#x3D;@video.mp4 &#x60;&#x60;&#x60;  Or in an HTML form, with a little JavaScript to convert the form into JSON: &#x60;&#x60;&#x60;html &lt;!--form for user interaction--&gt; &lt;form name&#x3D;\&quot;videoUploadForm\&quot; &gt;   &lt;label for&#x3D;video&gt;Video:&lt;/label&gt;   &lt;input type&#x3D;file name&#x3D;source/&gt;&lt;br/&gt;   &lt;input value&#x3D;\&quot;Submit\&quot; type&#x3D;\&quot;submit\&quot;&gt; &lt;/form&gt; &lt;div&gt;&lt;/div&gt; &lt;!--JS takes the form data      uses FormData to turn the response into JSON.     then uses POST to upload the video file.     Update the token parameter in the url to your upload token.     --&gt; &lt;script&gt;    var form &#x3D; document.forms.namedItem(\&quot;videoUploadForm\&quot;);     form.addEventListener(&#39;submit&#39;, function(ev) {   ev.preventDefault();      var oOutput &#x3D; document.querySelector(\&quot;div\&quot;),          oData &#x3D; new FormData(form);      var oReq &#x3D; new XMLHttpRequest();         oReq.open(\&quot;POST\&quot;, \&quot;https://ws.api.video/upload?token&#x3D;toXXX\&quot;, true);      oReq.send(oData);   oReq.onload &#x3D; function(oEvent) {        if (oReq.status &#x3D;&#x3D;201) {          oOutput.innerHTML &#x3D; \&quot;Your video is uploaded!&lt;br/&gt;\&quot;  + oReq.response;        } else {          oOutput.innerHTML &#x3D; \&quot;Error \&quot; + oReq.status + \&quot; occurred when trying to upload your file.&lt;br /&gt;\&quot;;        }      };    }, false);  &lt;/script&gt; &#x60;&#x60;&#x60;   ### Dealing with large files  We have created a &lt;a href&#x3D;&#39;https://api.video/blog/tutorials/uploading-large-files-with-javascript&#39;&gt;tutorial&lt;/a&gt; to walk through the steps required.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTUploadTest() throws ApiException {
        String token = null;
        File _file = null;
        String contentRange = null;
        String videoId = null;
        Video response = api.pOSTUpload(token, _file, contentRange, videoId);
        // TODO: test validations
    }

    /**
     * Generate an upload token
     *
     * Use this endpoint to generate an upload token. You can use this token to authenticate video uploads while keeping your API key safe. Tutorials using [delegated upload](https://api.video/blog/endpoints/delegated-upload).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTUploadTokensTest() throws ApiException {
        TokenCreatePayload tokenCreatePayload = null;
        UploadToken response = api.pOSTUploadTokens(tokenCreatePayload);
        // TODO: test validations
    }

}
