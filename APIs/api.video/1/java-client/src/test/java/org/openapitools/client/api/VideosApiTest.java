/*
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BadRequest;
import java.io.File;
import org.openapitools.client.model.NotFound;
import org.openapitools.client.model.Video;
import org.openapitools.client.model.VideoCreatePayload;
import org.openapitools.client.model.VideoThumbnailPickPayload;
import org.openapitools.client.model.VideoUpdatePayload;
import org.openapitools.client.model.VideosListResponse;
import org.openapitools.client.model.Videostatus;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VideosApi
 */
@Disabled
public class VideosApiTest {

    private final VideosApi api = new VideosApi();

    /**
     * Delete a video
     *
     * If you do not need a video any longer, you can send a request to delete it. All you need is the videoId. Tutorials using [video deletion](https://api.video/blog/endpoints/video-delete).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dELETEVideoTest() throws ApiException {
        String videoId = null;
        api.dELETEVideo(videoId);
        // TODO: test validations
    }

    /**
     * Show a video
     *
     * This call provides the same JSON information provided on video creation. For private videos, it will generate a unique token url. Use this to retrieve any details you need about a video, or set up a private viewing URL. Tutorials using [video GET](https://api.video/blog/endpoints/video-get).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETVideoTest() throws ApiException {
        String videoId = null;
        Video response = api.gETVideo(videoId);
        // TODO: test validations
    }

    /**
     * Show video status
     *
     * This API provides upload status &amp; encoding status to determine when the video is uploaded or ready to playback. Once encoding is completed, the response also lists the available stream qualities. Tutorials using [video status](https://api.video/blog/endpoints/video-status).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETVideoStatusTest() throws ApiException {
        String videoId = null;
        Videostatus response = api.gETVideoStatus(videoId);
        // TODO: test validations
    }

    /**
     * List all videos
     *
     * Requests to this endpoint return a list of your videos (with all their details). With no parameters added to this query, the API returns all videos. You can filter what videos the API returns using the parameters described below.  We have [several tutorials](https://api.video/blog/endpoints/video-list) that demonstrate this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lISTVideosTest() throws ApiException {
        String title = null;
        List<String> tags = null;
        List<String> metadata = null;
        String description = null;
        String liveStreamId = null;
        String sortBy = null;
        String sortOrder = null;
        Integer currentPage = null;
        Integer pageSize = null;
        VideosListResponse response = api.lISTVideos()
                .title(title)
                .tags(tags)
                .metadata(metadata)
                .description(description)
                .liveStreamId(liveStreamId)
                .sortBy(sortBy)
                .sortOrder(sortOrder)
                .currentPage(currentPage)
                .pageSize(pageSize)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a video
     *
     * Use this endpoint to update the parameters associated with your video. The video you are updating is determined by the video ID you provide in the path. For each parameter you want to update, include the update in the request body. NOTE: If you are updating an array, you must provide the entire array as what you provide here overwrites what is in the system rather than appending to it. Tutorials using [video update](https://api.video/blog/endpoints/video-update).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pATCHVideoTest() throws ApiException {
        String videoId = null;
        VideoUpdatePayload videoUpdatePayload = null;
        Video response = api.pATCHVideo(videoId, videoUpdatePayload);
        // TODO: test validations
    }

    /**
     * Pick a thumbnail
     *
     * Pick a thumbnail from the given time code. If you&#39;d like to upload an image for your thumbnail, use the [Upload a Thumbnail](https://docs.api.video/reference#post_videos-videoid-thumbnail) endpoint. There may be a short delay for the thumbnail to update. Tutorials using [Thumbnail picking](https://api.video/blog/endpoints/video-pick-a-thumbnail).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pATCHVideosVideoIdThumbnailTest() throws ApiException {
        String videoId = null;
        VideoThumbnailPickPayload videoThumbnailPickPayload = null;
        Video response = api.pATCHVideosVideoIdThumbnail(videoId, videoThumbnailPickPayload);
        // TODO: test validations
    }

    /**
     * Create a video
     *
     * To create a video, you create its container&amp;parameters first, before adding the video file (exception - when using an existing HTTP source). * Videos are public by default. [Learn about Private videos](https://api.video/blog/tutorials/tutorial-private-videos) * Up to 6 responsive video streams will be created (from 240p to 4k) * Mp4 encoded versions are created at the highest quality (max 1080p) by default. * Panoramic videos are for videos recorded in 360 degrees.  You can toggle this after your 360 video upload. * Searchable parameters: title, description, tags and metadata   &#x60;&#x60;&#x60;shell $ curl https://ws.api.video/videos \\ -H &#39;Authorization: Bearer {access_token} \\ -d &#39;{\&quot;title\&quot;:\&quot;My video\&quot;,       \&quot;description\&quot;:\&quot;so many details\&quot;,      \&quot;mp4Support\&quot;:true }&#39; &#x60;&#x60;&#x60;    ## add an URL to upload on creation You can also create a video directly from a video hosted on a third-party server by giving its URI in &#x60;source&#x60; parameter: &#x60;&#x60;&#x60;shell $ curl https://ws.api.video/videos \\ -H &#39;Authorization: Bearer {access_token} \\ -d &#39;{\&quot;source\&quot;:\&quot;http://uri/to/video.mp4\&quot;, \&quot;title\&quot;:\&quot;My video\&quot;}&#39; &#x60;&#x60;&#x60;  In this case, the service will respond &#x60;202 Accepted&#x60; and ingest the video asynchronously. ## Track users with Dynamic Metadata Metadata values can be a key:value where the values are predefined, but Dynamic metadata allows you to enter *any* value for a defined key.  To defined a dynamic metadata pair use: &#x60;&#x60;&#x60; \&quot;metadata\&quot;:[{\&quot;dynamicKey\&quot;: \&quot;__dynamicKey__\&quot;}] &#x60;&#x60;&#x60;  The double underscore on both sides of the value allows any variable to be added for a given video session. Added the the url you might have: &#x60;&#x60;&#x60; &lt;iframe type&#x3D;\&quot;text/html\&quot; src&#x3D;\&quot;https://embed.api.video/vod/vi6QvU9dhYCzW3BpPvPsZUa8?metadata[classUserName]&#x3D;Doug\&quot; width&#x3D;\&quot;960\&quot; height&#x3D;\&quot;320\&quot; frameborder&#x3D;\&quot;0\&quot; scrollling&#x3D;\&quot;no\&quot;&gt;&lt;/iframe&gt; &#x60;&#x60;&#x60;   This video session will be tagged as watched by Doug - allowing for in-depth analysis on how each viewer interacts with the videos. ### We have tutorials on: * [Creating and uploading videos](https://api.video/blog/tutorials/video-upload-tutorial) * [Uploading large videos](https://api.video/blog/tutorials/video-upload-tutorial-large-videos)   * [Using tags with videos](https://api.video/blog/tutorials/video-tagging-best-practices) * [Private videos](https://api.video/blog/tutorials/tutorial-private-videos) * [Using Dynamic Metadata](https://api.video/blog/tutorials/dynamic-metadata)  * Full list of [tutorials](https://api.video/blog/endpoints/video-create) that demonstrate this endpoint. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTVideoTest() throws ApiException {
        VideoCreatePayload videoCreatePayload = null;
        Video response = api.pOSTVideo(videoCreatePayload);
        // TODO: test validations
    }

    /**
     * Upload a video
     *
     * To upload a video to the videoId you created. Replace {videoId} with the id you&#39;d like to use, {access_token} with your token, and /path/to/video.mp4 with the path to the video you&#39;d like to upload. You can only upload your video to the videoId once. &#x60;&#x60;&#x60;bash curl https://ws.api.video/videos/{videoId}/source \\   -H &#39;Authorization: Bearer {access_token}&#39; \\   -F file&#x3D;@/path/to/video.mp4    &#x60;&#x60;&#x60; Tutorials using [video upload](https://api.video/blog/endpoints/video-upload).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTVideosVideoIdSourceTest() throws ApiException {
        String videoId = null;
        File _file = null;
        String contentRange = null;
        Video response = api.pOSTVideosVideoIdSource(videoId, _file, contentRange);
        // TODO: test validations
    }

    /**
     * Upload a thumbnail
     *
     * The thumbnail is the poster that appears in the player window before video playback begins. This endpoint allows you to upload an image for the thumbnail. To select a still frame from the video using a time stamp, use [Pick a Thumbnail](https://docs.api.video/reference#patch_videos-videoid-thumbnail) to pick a time in the video.  Note: There may be a short delay before the new thumbnail is delivered to our CDN. Tutorials using [Thumbnail upload](https://api.video/blog/endpoints/videos-upload-a-thumbnail).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTVideosVideoIdThumbnailTest() throws ApiException {
        String videoId = null;
        File _file = null;
        Video response = api.pOSTVideosVideoIdThumbnail(videoId, _file);
        // TODO: test validations
    }

}
