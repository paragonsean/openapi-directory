/**
 * CROssBAR Data API
 * # About CROssBAR & data **CROssBAR**: Comprehensive Resource of Biomedical Relations with Deep Learning Applications and Knowledge Graph Representations CROssBAR is a comprehensive system that integrates large-scale biomedical data from various resources e.g UniProt, ChEMBL, Drugbank, EFO, HPO, InterPro & PubChem and stores them in a new NoSQL database, enrich these data with deep learning based prediction of relations between numerous biomedical entities, rigorously analyse the enriched data to obtain biologically meaningful modules and display them to the user via easy to interpret, interactive and heterogeneous knowledge graphs. CROssBAR platform exposes a set of 12 endpoints to query data stored in the CROssBAR database. These endpoints help the user to find data of interest using different parameters provided by the API endpoint. For example, https://www.ebi.ac.uk/tools/crossbar/proteins?accession=A0A023GRW5 -> will provide protein information about accession 'A0A023GRW5' including its interactions, functions, cross-references, variations and more. https://www.ebi.ac.uk/tools/crossbar/activities?moleculeChemblId=CHEMBL465983 -> will provide ChEMBL bio-interactions related information including targets and bio-activity measurements associated with molecule chembl id 'CHEMBL465983'  **Knowledge graphs** Another use case of CROssBAR's API endpoints is in building knowledge graphs. These endpoints can be *weaved* together (output from one API endpoint fed as input to another API endpoint) programmatically to link nodes like protein, disease, drugs etc. as nodes of the graph. The endpoints are designed to be independent from each other which allows users the flexibility to drive biological networks from any facet e.g drug-centric, disease-centric, gene-centric etc. Our service for knowledge graph construction is available at https://crossbar.kansil.org. An example for the part of the background queries on the CROssBAR API during the construction of a knowledge graph,  (with the aim of keeping the example simple, we have only included the processes related to pathways, genes/proteins and drugs/compounds) In this example, we would like to find bio-active compounds (with a pChEMBL value threshold of at least 6.0) & drugs targeting all proteins belonging to \"WNT ligand biogenesis and trafficking\" pathway (based on Reactome pathway annotations). This can be achieved by using endpoints listed on this swagger documentation as illustrated in following steps- Find bio-active compounds (with a pChEMBL value threshold of at least 6.0) & drugs targeting all proteins belonging to \"WNT ligand biogenesis and trafficking\" pathway (based on Reactome annotations) This can be achieved by using endpoints listed on [this swagger documentation](https://www.ebi.ac.uk/tools/crossbar/swagger-ui.html) as illustrated in following steps- 1. Get all proteins from “/proteins” API endpoint which have a reactome pathway name equal to \"WNT ligand biogenesis and trafficking\". 2. From the collection of uniprot protein accessions collected from step 1 above, we query “/targets” API endpoint to obtain the ‘target_chembl_id’s of these proteins. 3. From the collection of target_chembl_ids collected from step 2 above, we query “/activities” API endpoint with pChEMBL value >=6, to obtain the ’molecule_chembl_id’s of the molecules that we need.  4. From the collection of uniprot protein accessions collected from step 1 above, we find out Drug names and ids from the “/drugs” API endpoint that targets our proteins. 5. From the collection of ’molecule_chembl_id’s obtained in step3, we query “/molecules” endpoint to get the compounds that are interacting with the genes/proteins belonging to the “WNT ligand biogenesis and trafficking” pathway.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: crossbar_dev@ebi.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICrossbarProteinVariation.h
 *
 * 
 */

#ifndef OAICrossbarProteinVariation_H
#define OAICrossbarProteinVariation_H

#include <QJsonObject>

#include "OAIFeaturePosition.h"
#include "OAIVariationAssociation.h"
#include "OAIVariationEvidence.h"
#include "OAIVariationXref.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIVariationAssociation;
class OAIFeaturePosition;
class OAIVariationEvidence;
class OAIVariationXref;

class OAICrossbarProteinVariation : public OAIObject {
public:
    OAICrossbarProteinVariation();
    OAICrossbarProteinVariation(QString json);
    ~OAICrossbarProteinVariation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAlternativeSequence() const;
    void setAlternativeSequence(const QString &alternative_sequence);
    bool is_alternative_sequence_Set() const;
    bool is_alternative_sequence_Valid() const;

    QList<OAIVariationAssociation> getAssociation() const;
    void setAssociation(const QList<OAIVariationAssociation> &association);
    bool is_association_Set() const;
    bool is_association_Valid() const;

    OAIFeaturePosition getBegin() const;
    void setBegin(const OAIFeaturePosition &begin);
    bool is_begin_Set() const;
    bool is_begin_Valid() const;

    QString getClinicalSignificances() const;
    void setClinicalSignificances(const QString &clinical_significances);
    bool is_clinical_significances_Set() const;
    bool is_clinical_significances_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIFeaturePosition getEnd() const;
    void setEnd(const OAIFeaturePosition &end);
    bool is_end_Set() const;
    bool is_end_Valid() const;

    QList<OAIVariationEvidence> getEvidences() const;
    void setEvidences(const QList<OAIVariationEvidence> &evidences);
    bool is_evidences_Set() const;
    bool is_evidences_Valid() const;

    QString getFtId() const;
    void setFtId(const QString &ft_id);
    bool is_ft_id_Set() const;
    bool is_ft_id_Valid() const;

    qint64 getSomaticStatus() const;
    void setSomaticStatus(const qint64 &somatic_status);
    bool is_somatic_status_Set() const;
    bool is_somatic_status_Valid() const;

    QString getSourceType() const;
    void setSourceType(const QString &source_type);
    bool is_source_type_Set() const;
    bool is_source_type_Valid() const;

    QString getWildType() const;
    void setWildType(const QString &wild_type);
    bool is_wild_type_Set() const;
    bool is_wild_type_Valid() const;

    QList<OAIVariationXref> getXrefs() const;
    void setXrefs(const QList<OAIVariationXref> &xrefs);
    bool is_xrefs_Set() const;
    bool is_xrefs_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_alternative_sequence;
    bool m_alternative_sequence_isSet;
    bool m_alternative_sequence_isValid;

    QList<OAIVariationAssociation> m_association;
    bool m_association_isSet;
    bool m_association_isValid;

    OAIFeaturePosition m_begin;
    bool m_begin_isSet;
    bool m_begin_isValid;

    QString m_clinical_significances;
    bool m_clinical_significances_isSet;
    bool m_clinical_significances_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIFeaturePosition m_end;
    bool m_end_isSet;
    bool m_end_isValid;

    QList<OAIVariationEvidence> m_evidences;
    bool m_evidences_isSet;
    bool m_evidences_isValid;

    QString m_ft_id;
    bool m_ft_id_isSet;
    bool m_ft_id_isValid;

    qint64 m_somatic_status;
    bool m_somatic_status_isSet;
    bool m_somatic_status_isValid;

    QString m_source_type;
    bool m_source_type_isSet;
    bool m_source_type_isValid;

    QString m_wild_type;
    bool m_wild_type_isSet;
    bool m_wild_type_isValid;

    QList<OAIVariationXref> m_xrefs;
    bool m_xrefs_isSet;
    bool m_xrefs_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICrossbarProteinVariation)

#endif // OAICrossbarProteinVariation_H
