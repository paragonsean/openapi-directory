/**
 * CROssBAR Data API
 * # About CROssBAR & data **CROssBAR**: Comprehensive Resource of Biomedical Relations with Deep Learning Applications and Knowledge Graph Representations CROssBAR is a comprehensive system that integrates large-scale biomedical data from various resources e.g UniProt, ChEMBL, Drugbank, EFO, HPO, InterPro & PubChem and stores them in a new NoSQL database, enrich these data with deep learning based prediction of relations between numerous biomedical entities, rigorously analyse the enriched data to obtain biologically meaningful modules and display them to the user via easy to interpret, interactive and heterogeneous knowledge graphs. CROssBAR platform exposes a set of 12 endpoints to query data stored in the CROssBAR database. These endpoints help the user to find data of interest using different parameters provided by the API endpoint. For example, https://www.ebi.ac.uk/tools/crossbar/proteins?accession=A0A023GRW5 -> will provide protein information about accession 'A0A023GRW5' including its interactions, functions, cross-references, variations and more. https://www.ebi.ac.uk/tools/crossbar/activities?moleculeChemblId=CHEMBL465983 -> will provide ChEMBL bio-interactions related information including targets and bio-activity measurements associated with molecule chembl id 'CHEMBL465983'  **Knowledge graphs** Another use case of CROssBAR's API endpoints is in building knowledge graphs. These endpoints can be *weaved* together (output from one API endpoint fed as input to another API endpoint) programmatically to link nodes like protein, disease, drugs etc. as nodes of the graph. The endpoints are designed to be independent from each other which allows users the flexibility to drive biological networks from any facet e.g drug-centric, disease-centric, gene-centric etc. Our service for knowledge graph construction is available at https://crossbar.kansil.org. An example for the part of the background queries on the CROssBAR API during the construction of a knowledge graph,  (with the aim of keeping the example simple, we have only included the processes related to pathways, genes/proteins and drugs/compounds) In this example, we would like to find bio-active compounds (with a pChEMBL value threshold of at least 6.0) & drugs targeting all proteins belonging to \"WNT ligand biogenesis and trafficking\" pathway (based on Reactome pathway annotations). This can be achieved by using endpoints listed on this swagger documentation as illustrated in following steps- Find bio-active compounds (with a pChEMBL value threshold of at least 6.0) & drugs targeting all proteins belonging to \"WNT ligand biogenesis and trafficking\" pathway (based on Reactome annotations) This can be achieved by using endpoints listed on [this swagger documentation](https://www.ebi.ac.uk/tools/crossbar/swagger-ui.html) as illustrated in following steps- 1. Get all proteins from “/proteins” API endpoint which have a reactome pathway name equal to \"WNT ligand biogenesis and trafficking\". 2. From the collection of uniprot protein accessions collected from step 1 above, we query “/targets” API endpoint to obtain the ‘target_chembl_id’s of these proteins. 3. From the collection of target_chembl_ids collected from step 2 above, we query “/activities” API endpoint with pChEMBL value >=6, to obtain the ’molecule_chembl_id’s of the molecules that we need.  4. From the collection of uniprot protein accessions collected from step 1 above, we find out Drug names and ids from the “/drugs” API endpoint that targets our proteins. 5. From the collection of ’molecule_chembl_id’s obtained in step3, we query “/molecules” endpoint to get the compounds that are interacting with the genes/proteins belonging to the “WNT ligand biogenesis and trafficking” pathway.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: crossbar_dev@ebi.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICrossbarPCCompound.h
 *
 * 
 */

#ifndef OAICrossbarPCCompound_H
#define OAICrossbarPCCompound_H

#include <QJsonObject>

#include <QByteArray>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICrossbarPCCompound : public OAIObject {
public:
    OAICrossbarPCCompound();
    OAICrossbarPCCompound(QString json);
    ~OAICrossbarPCCompound() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAlogp() const;
    void setAlogp(const double &alogp);
    bool is_alogp_Set() const;
    bool is_alogp_Valid() const;

    qint64 getAtomChiralCount() const;
    void setAtomChiralCount(const qint64 &atom_chiral_count);
    bool is_atom_chiral_count_Set() const;
    bool is_atom_chiral_count_Valid() const;

    qint64 getAtomChiralDefCount() const;
    void setAtomChiralDefCount(const qint64 &atom_chiral_def_count);
    bool is_atom_chiral_def_count_Set() const;
    bool is_atom_chiral_def_count_Valid() const;

    qint64 getBondChiralCount() const;
    void setBondChiralCount(const qint64 &bond_chiral_count);
    bool is_bond_chiral_count_Set() const;
    bool is_bond_chiral_count_Valid() const;

    qint64 getBondChiralDefCount() const;
    void setBondChiralDefCount(const qint64 &bond_chiral_def_count);
    bool is_bond_chiral_def_count_Set() const;
    bool is_bond_chiral_def_count_Valid() const;

    qint64 getBondChiralUndefCount() const;
    void setBondChiralUndefCount(const qint64 &bond_chiral_undef_count);
    bool is_bond_chiral_undef_count_Set() const;
    bool is_bond_chiral_undef_count_Valid() const;

    QString getCanonicalSmiles() const;
    void setCanonicalSmiles(const QString &canonical_smiles);
    bool is_canonical_smiles_Set() const;
    bool is_canonical_smiles_Valid() const;

    qint32 getCid() const;
    void setCid(const qint32 &cid);
    bool is_cid_Set() const;
    bool is_cid_Valid() const;

    qint64 getCovalentUnitCount() const;
    void setCovalentUnitCount(const qint64 &covalent_unit_count);
    bool is_covalent_unit_count_Set() const;
    bool is_covalent_unit_count_Valid() const;

    QByteArray getFingerPrint() const;
    void setFingerPrint(const QByteArray &finger_print);
    bool is_finger_print_Set() const;
    bool is_finger_print_Valid() const;

    double getFullMwt() const;
    void setFullMwt(const double &full_mwt);
    bool is_full_mwt_Set() const;
    bool is_full_mwt_Valid() const;

    qint64 getHeavyAtomsCount() const;
    void setHeavyAtomsCount(const qint64 &heavy_atoms_count);
    bool is_heavy_atoms_count_Set() const;
    bool is_heavy_atoms_count_Valid() const;

    QString getInchiKey() const;
    void setInchiKey(const QString &inchi_key);
    bool is_inchi_key_Set() const;
    bool is_inchi_key_Valid() const;

    qint64 getIsotopeAtomCount() const;
    void setIsotopeAtomCount(const qint64 &isotope_atom_count);
    bool is_isotope_atom_count_Set() const;
    bool is_isotope_atom_count_Valid() const;

    double getPolarSurfaceArea() const;
    void setPolarSurfaceArea(const double &polar_surface_area);
    bool is_polar_surface_area_Set() const;
    bool is_polar_surface_area_Valid() const;

    QString getStandardInchi() const;
    void setStandardInchi(const QString &standard_inchi);
    bool is_standard_inchi_Set() const;
    bool is_standard_inchi_Valid() const;

    qint64 getTautomersCount() const;
    void setTautomersCount(const qint64 &tautomers_count);
    bool is_tautomers_count_Set() const;
    bool is_tautomers_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_alogp;
    bool m_alogp_isSet;
    bool m_alogp_isValid;

    qint64 m_atom_chiral_count;
    bool m_atom_chiral_count_isSet;
    bool m_atom_chiral_count_isValid;

    qint64 m_atom_chiral_def_count;
    bool m_atom_chiral_def_count_isSet;
    bool m_atom_chiral_def_count_isValid;

    qint64 m_bond_chiral_count;
    bool m_bond_chiral_count_isSet;
    bool m_bond_chiral_count_isValid;

    qint64 m_bond_chiral_def_count;
    bool m_bond_chiral_def_count_isSet;
    bool m_bond_chiral_def_count_isValid;

    qint64 m_bond_chiral_undef_count;
    bool m_bond_chiral_undef_count_isSet;
    bool m_bond_chiral_undef_count_isValid;

    QString m_canonical_smiles;
    bool m_canonical_smiles_isSet;
    bool m_canonical_smiles_isValid;

    qint32 m_cid;
    bool m_cid_isSet;
    bool m_cid_isValid;

    qint64 m_covalent_unit_count;
    bool m_covalent_unit_count_isSet;
    bool m_covalent_unit_count_isValid;

    QByteArray m_finger_print;
    bool m_finger_print_isSet;
    bool m_finger_print_isValid;

    double m_full_mwt;
    bool m_full_mwt_isSet;
    bool m_full_mwt_isValid;

    qint64 m_heavy_atoms_count;
    bool m_heavy_atoms_count_isSet;
    bool m_heavy_atoms_count_isValid;

    QString m_inchi_key;
    bool m_inchi_key_isSet;
    bool m_inchi_key_isValid;

    qint64 m_isotope_atom_count;
    bool m_isotope_atom_count_isSet;
    bool m_isotope_atom_count_isValid;

    double m_polar_surface_area;
    bool m_polar_surface_area_isSet;
    bool m_polar_surface_area_isValid;

    QString m_standard_inchi;
    bool m_standard_inchi_isSet;
    bool m_standard_inchi_isValid;

    qint64 m_tautomers_count;
    bool m_tautomers_count_isSet;
    bool m_tautomers_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICrossbarPCCompound)

#endif // OAICrossbarPCCompound_H
