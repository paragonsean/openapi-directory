/**
 * CROssBAR Data API
 * # About CROssBAR & data **CROssBAR**: Comprehensive Resource of Biomedical Relations with Deep Learning Applications and Knowledge Graph Representations CROssBAR is a comprehensive system that integrates large-scale biomedical data from various resources e.g UniProt, ChEMBL, Drugbank, EFO, HPO, InterPro & PubChem and stores them in a new NoSQL database, enrich these data with deep learning based prediction of relations between numerous biomedical entities, rigorously analyse the enriched data to obtain biologically meaningful modules and display them to the user via easy to interpret, interactive and heterogeneous knowledge graphs. CROssBAR platform exposes a set of 12 endpoints to query data stored in the CROssBAR database. These endpoints help the user to find data of interest using different parameters provided by the API endpoint. For example, https://www.ebi.ac.uk/tools/crossbar/proteins?accession=A0A023GRW5 -> will provide protein information about accession 'A0A023GRW5' including its interactions, functions, cross-references, variations and more. https://www.ebi.ac.uk/tools/crossbar/activities?moleculeChemblId=CHEMBL465983 -> will provide ChEMBL bio-interactions related information including targets and bio-activity measurements associated with molecule chembl id 'CHEMBL465983'  **Knowledge graphs** Another use case of CROssBAR's API endpoints is in building knowledge graphs. These endpoints can be *weaved* together (output from one API endpoint fed as input to another API endpoint) programmatically to link nodes like protein, disease, drugs etc. as nodes of the graph. The endpoints are designed to be independent from each other which allows users the flexibility to drive biological networks from any facet e.g drug-centric, disease-centric, gene-centric etc. Our service for knowledge graph construction is available at https://crossbar.kansil.org. An example for the part of the background queries on the CROssBAR API during the construction of a knowledge graph,  (with the aim of keeping the example simple, we have only included the processes related to pathways, genes/proteins and drugs/compounds) In this example, we would like to find bio-active compounds (with a pChEMBL value threshold of at least 6.0) & drugs targeting all proteins belonging to \"WNT ligand biogenesis and trafficking\" pathway (based on Reactome pathway annotations). This can be achieved by using endpoints listed on this swagger documentation as illustrated in following steps- Find bio-active compounds (with a pChEMBL value threshold of at least 6.0) & drugs targeting all proteins belonging to \"WNT ligand biogenesis and trafficking\" pathway (based on Reactome annotations) This can be achieved by using endpoints listed on [this swagger documentation](https://www.ebi.ac.uk/tools/crossbar/swagger-ui.html) as illustrated in following steps- 1. Get all proteins from “/proteins” API endpoint which have a reactome pathway name equal to \"WNT ligand biogenesis and trafficking\". 2. From the collection of uniprot protein accessions collected from step 1 above, we query “/targets” API endpoint to obtain the ‘target_chembl_id’s of these proteins. 3. From the collection of target_chembl_ids collected from step 2 above, we query “/activities” API endpoint with pChEMBL value >=6, to obtain the ’molecule_chembl_id’s of the molecules that we need.  4. From the collection of uniprot protein accessions collected from step 1 above, we find out Drug names and ids from the “/drugs” API endpoint that targets our proteins. 5. From the collection of ’molecule_chembl_id’s obtained in step3, we query “/molecules” endpoint to get the compounds that are interacting with the genes/proteins belonging to the “WNT ligand biogenesis and trafficking” pathway.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: crossbar_dev@ebi.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProtein.h
 *
 * 
 */

#ifndef OAIProtein_H
#define OAIProtein_H

#include <QJsonObject>

#include "OAICrossReferences.h"
#include "OAICrossbarProteinVariation.h"
#include "OAIFeatures.h"
#include "OAIProteinInteraction.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICrossReferences;
class OAIFeatures;
class OAIProteinInteraction;
class OAICrossbarProteinVariation;

class OAIProtein : public OAIObject {
public:
    OAIProtein();
    OAIProtein(QString json);
    ~OAIProtein() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccession() const;
    void setAccession(const QString &accession);
    bool is_accession_Set() const;
    bool is_accession_Valid() const;

    QString getChromosome() const;
    void setChromosome(const QString &chromosome);
    bool is_chromosome_Set() const;
    bool is_chromosome_Valid() const;

    OAICrossReferences getCrossreferences() const;
    void setCrossreferences(const OAICrossReferences &crossreferences);
    bool is_crossreferences_Set() const;
    bool is_crossreferences_Valid() const;

    QList<QString> getEcNumbers() const;
    void setEcNumbers(const QList<QString> &ec_numbers);
    bool is_ec_numbers_Set() const;
    bool is_ec_numbers_Valid() const;

    OAIFeatures getFeatures() const;
    void setFeatures(const OAIFeatures &features);
    bool is_features_Set() const;
    bool is_features_Valid() const;

    QString getFullName() const;
    void setFullName(const QString &full_name);
    bool is_full_name_Set() const;
    bool is_full_name_Valid() const;

    QList<QString> getGenes() const;
    void setGenes(const QList<QString> &genes);
    bool is_genes_Set() const;
    bool is_genes_Valid() const;

    QList<OAIProteinInteraction> getInteractions() const;
    void setInteractions(const QList<OAIProteinInteraction> &interactions);
    bool is_interactions_Set() const;
    bool is_interactions_Valid() const;

    double getLength() const;
    void setLength(const double &length);
    bool is_length_Set() const;
    bool is_length_Valid() const;

    double getMass() const;
    void setMass(const double &mass);
    bool is_mass_Set() const;
    bool is_mass_Valid() const;

    qint32 getTaxId() const;
    void setTaxId(const qint32 &tax_id);
    bool is_tax_id_Set() const;
    bool is_tax_id_Valid() const;

    QList<OAICrossbarProteinVariation> getVariations() const;
    void setVariations(const QList<OAICrossbarProteinVariation> &variations);
    bool is_variations_Set() const;
    bool is_variations_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_accession;
    bool m_accession_isSet;
    bool m_accession_isValid;

    QString m_chromosome;
    bool m_chromosome_isSet;
    bool m_chromosome_isValid;

    OAICrossReferences m_crossreferences;
    bool m_crossreferences_isSet;
    bool m_crossreferences_isValid;

    QList<QString> m_ec_numbers;
    bool m_ec_numbers_isSet;
    bool m_ec_numbers_isValid;

    OAIFeatures m_features;
    bool m_features_isSet;
    bool m_features_isValid;

    QString m_full_name;
    bool m_full_name_isSet;
    bool m_full_name_isValid;

    QList<QString> m_genes;
    bool m_genes_isSet;
    bool m_genes_isValid;

    QList<OAIProteinInteraction> m_interactions;
    bool m_interactions_isSet;
    bool m_interactions_isValid;

    double m_length;
    bool m_length_isSet;
    bool m_length_isValid;

    double m_mass;
    bool m_mass_isSet;
    bool m_mass_isValid;

    qint32 m_tax_id;
    bool m_tax_id_isSet;
    bool m_tax_id_isValid;

    QList<OAICrossbarProteinVariation> m_variations;
    bool m_variations_isSet;
    bool m_variations_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProtein)

#endif // OAIProtein_H
