/**
 * CROssBAR Data API
 * # About CROssBAR & data **CROssBAR**: Comprehensive Resource of Biomedical Relations with Deep Learning Applications and Knowledge Graph Representations CROssBAR is a comprehensive system that integrates large-scale biomedical data from various resources e.g UniProt, ChEMBL, Drugbank, EFO, HPO, InterPro & PubChem and stores them in a new NoSQL database, enrich these data with deep learning based prediction of relations between numerous biomedical entities, rigorously analyse the enriched data to obtain biologically meaningful modules and display them to the user via easy to interpret, interactive and heterogeneous knowledge graphs. CROssBAR platform exposes a set of 12 endpoints to query data stored in the CROssBAR database. These endpoints help the user to find data of interest using different parameters provided by the API endpoint. For example, https://www.ebi.ac.uk/tools/crossbar/proteins?accession=A0A023GRW5 -> will provide protein information about accession 'A0A023GRW5' including its interactions, functions, cross-references, variations and more. https://www.ebi.ac.uk/tools/crossbar/activities?moleculeChemblId=CHEMBL465983 -> will provide ChEMBL bio-interactions related information including targets and bio-activity measurements associated with molecule chembl id 'CHEMBL465983'  **Knowledge graphs** Another use case of CROssBAR's API endpoints is in building knowledge graphs. These endpoints can be *weaved* together (output from one API endpoint fed as input to another API endpoint) programmatically to link nodes like protein, disease, drugs etc. as nodes of the graph. The endpoints are designed to be independent from each other which allows users the flexibility to drive biological networks from any facet e.g drug-centric, disease-centric, gene-centric etc. Our service for knowledge graph construction is available at https://crossbar.kansil.org. An example for the part of the background queries on the CROssBAR API during the construction of a knowledge graph,  (with the aim of keeping the example simple, we have only included the processes related to pathways, genes/proteins and drugs/compounds) In this example, we would like to find bio-active compounds (with a pChEMBL value threshold of at least 6.0) & drugs targeting all proteins belonging to \"WNT ligand biogenesis and trafficking\" pathway (based on Reactome pathway annotations). This can be achieved by using endpoints listed on this swagger documentation as illustrated in following steps- Find bio-active compounds (with a pChEMBL value threshold of at least 6.0) & drugs targeting all proteins belonging to \"WNT ligand biogenesis and trafficking\" pathway (based on Reactome annotations) This can be achieved by using endpoints listed on [this swagger documentation](https://www.ebi.ac.uk/tools/crossbar/swagger-ui.html) as illustrated in following steps- 1. Get all proteins from “/proteins” API endpoint which have a reactome pathway name equal to \"WNT ligand biogenesis and trafficking\". 2. From the collection of uniprot protein accessions collected from step 1 above, we query “/targets” API endpoint to obtain the ‘target_chembl_id’s of these proteins. 3. From the collection of target_chembl_ids collected from step 2 above, we query “/activities” API endpoint with pChEMBL value >=6, to obtain the ’molecule_chembl_id’s of the molecules that we need.  4. From the collection of uniprot protein accessions collected from step 1 above, we find out Drug names and ids from the “/drugs” API endpoint that targets our proteins. 5. From the collection of ’molecule_chembl_id’s obtained in step3, we query “/molecules” endpoint to get the compounds that are interacting with the genes/proteins belonging to the “WNT ligand biogenesis and trafficking” pathway.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: crossbar_dev@ebi.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICrossReferences.h
 *
 * 
 */

#ifndef OAICrossReferences_H
#define OAICrossReferences_H

#include <QJsonObject>

#include "OAIEnsembl.h"
#include "OAIGo.h"
#include "OAIInterpro.h"
#include "OAIKegg.h"
#include "OAIOmim.h"
#include "OAIOpenTargets.h"
#include "OAIOrphanet.h"
#include "OAIPDBe.h"
#include "OAIPfam.h"
#include "OAIReactome.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEnsembl;
class OAIGo;
class OAIInterpro;
class OAIKegg;
class OAIOmim;
class OAIOpenTargets;
class OAIOrphanet;
class OAIPDBe;
class OAIPfam;
class OAIReactome;

class OAICrossReferences : public OAIObject {
public:
    OAICrossReferences();
    OAICrossReferences(QString json);
    ~OAICrossReferences() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIEnsembl> getEnsembl() const;
    void setEnsembl(const QList<OAIEnsembl> &ensembl);
    bool is_ensembl_Set() const;
    bool is_ensembl_Valid() const;

    QList<OAIGo> getGo() const;
    void setGo(const QList<OAIGo> &go);
    bool is_go_Set() const;
    bool is_go_Valid() const;

    QList<OAIInterpro> getInterpro() const;
    void setInterpro(const QList<OAIInterpro> &interpro);
    bool is_interpro_Set() const;
    bool is_interpro_Valid() const;

    QList<OAIKegg> getKegg() const;
    void setKegg(const QList<OAIKegg> &kegg);
    bool is_kegg_Set() const;
    bool is_kegg_Valid() const;

    QList<OAIOmim> getOmim() const;
    void setOmim(const QList<OAIOmim> &omim);
    bool is_omim_Set() const;
    bool is_omim_Valid() const;

    QList<OAIOpenTargets> getOpenTargets() const;
    void setOpenTargets(const QList<OAIOpenTargets> &open_targets);
    bool is_open_targets_Set() const;
    bool is_open_targets_Valid() const;

    QList<OAIOrphanet> getOrphanet() const;
    void setOrphanet(const QList<OAIOrphanet> &orphanet);
    bool is_orphanet_Set() const;
    bool is_orphanet_Valid() const;

    QList<OAIPDBe> getPdBe() const;
    void setPdBe(const QList<OAIPDBe> &pd_be);
    bool is_pd_be_Set() const;
    bool is_pd_be_Valid() const;

    QList<OAIPfam> getPfam() const;
    void setPfam(const QList<OAIPfam> &pfam);
    bool is_pfam_Set() const;
    bool is_pfam_Valid() const;

    QList<OAIReactome> getReactome() const;
    void setReactome(const QList<OAIReactome> &reactome);
    bool is_reactome_Set() const;
    bool is_reactome_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIEnsembl> m_ensembl;
    bool m_ensembl_isSet;
    bool m_ensembl_isValid;

    QList<OAIGo> m_go;
    bool m_go_isSet;
    bool m_go_isValid;

    QList<OAIInterpro> m_interpro;
    bool m_interpro_isSet;
    bool m_interpro_isValid;

    QList<OAIKegg> m_kegg;
    bool m_kegg_isSet;
    bool m_kegg_isValid;

    QList<OAIOmim> m_omim;
    bool m_omim_isSet;
    bool m_omim_isValid;

    QList<OAIOpenTargets> m_open_targets;
    bool m_open_targets_isSet;
    bool m_open_targets_isValid;

    QList<OAIOrphanet> m_orphanet;
    bool m_orphanet_isSet;
    bool m_orphanet_isValid;

    QList<OAIPDBe> m_pd_be;
    bool m_pd_be_isSet;
    bool m_pd_be_isValid;

    QList<OAIPfam> m_pfam;
    bool m_pfam_isSet;
    bool m_pfam_isValid;

    QList<OAIReactome> m_reactome;
    bool m_reactome_isSet;
    bool m_reactome_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICrossReferences)

#endif // OAICrossReferences_H
