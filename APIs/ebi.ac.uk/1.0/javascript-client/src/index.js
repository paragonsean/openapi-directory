/**
 * CROssBAR Data API
 * # About CROssBAR & data **CROssBAR**: Comprehensive Resource of Biomedical Relations with Deep Learning Applications and Knowledge Graph Representations CROssBAR is a comprehensive system that integrates large-scale biomedical data from various resources e.g UniProt, ChEMBL, Drugbank, EFO, HPO, InterPro & PubChem and stores them in a new NoSQL database, enrich these data with deep learning based prediction of relations between numerous biomedical entities, rigorously analyse the enriched data to obtain biologically meaningful modules and display them to the user via easy to interpret, interactive and heterogeneous knowledge graphs. CROssBAR platform exposes a set of 12 endpoints to query data stored in the CROssBAR database. These endpoints help the user to find data of interest using different parameters provided by the API endpoint. For example, https://www.ebi.ac.uk/tools/crossbar/proteins?accession=A0A023GRW5 -> will provide protein information about accession 'A0A023GRW5' including its interactions, functions, cross-references, variations and more. https://www.ebi.ac.uk/tools/crossbar/activities?moleculeChemblId=CHEMBL465983 -> will provide ChEMBL bio-interactions related information including targets and bio-activity measurements associated with molecule chembl id 'CHEMBL465983'  **Knowledge graphs** Another use case of CROssBAR's API endpoints is in building knowledge graphs. These endpoints can be *weaved* together (output from one API endpoint fed as input to another API endpoint) programmatically to link nodes like protein, disease, drugs etc. as nodes of the graph. The endpoints are designed to be independent from each other which allows users the flexibility to drive biological networks from any facet e.g drug-centric, disease-centric, gene-centric etc. Our service for knowledge graph construction is available at https://crossbar.kansil.org. An example for the part of the background queries on the CROssBAR API during the construction of a knowledge graph,  (with the aim of keeping the example simple, we have only included the processes related to pathways, genes/proteins and drugs/compounds) In this example, we would like to find bio-active compounds (with a pChEMBL value threshold of at least 6.0) & drugs targeting all proteins belonging to \"WNT ligand biogenesis and trafficking\" pathway (based on Reactome pathway annotations). This can be achieved by using endpoints listed on this swagger documentation as illustrated in following steps- Find bio-active compounds (with a pChEMBL value threshold of at least 6.0) & drugs targeting all proteins belonging to \"WNT ligand biogenesis and trafficking\" pathway (based on Reactome annotations) This can be achieved by using endpoints listed on [this swagger documentation](https://www.ebi.ac.uk/tools/crossbar/swagger-ui.html) as illustrated in following steps- 1. Get all proteins from “/proteins” API endpoint which have a reactome pathway name equal to \"WNT ligand biogenesis and trafficking\". 2. From the collection of uniprot protein accessions collected from step 1 above, we query “/targets” API endpoint to obtain the ‘target_chembl_id’s of these proteins. 3. From the collection of target_chembl_ids collected from step 2 above, we query “/activities” API endpoint with pChEMBL value >=6, to obtain the ’molecule_chembl_id’s of the molecules that we need.  4. From the collection of uniprot protein accessions collected from step 1 above, we find out Drug names and ids from the “/drugs” API endpoint that targets our proteins. 5. From the collection of ’molecule_chembl_id’s obtained in step3, we query “/molecules” endpoint to get the compounds that are interacting with the genes/proteins belonging to the “WNT ligand biogenesis and trafficking” pathway.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: crossbar_dev@ebi.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Activities from './model/Activities';
import Activity from './model/Activity';
import Assay from './model/Assay';
import AssayData from './model/AssayData';
import AssayOrganism from './model/AssayOrganism';
import Assays from './model/Assays';
import BioAssay from './model/BioAssay';
import BioAssayMetaData from './model/BioAssayMetaData';
import Bioassays from './model/Bioassays';
import CrossReferences from './model/CrossReferences';
import CrossbarDrug from './model/CrossbarDrug';
import CrossbarFeature from './model/CrossbarFeature';
import CrossbarMolecule from './model/CrossbarMolecule';
import CrossbarPCCompound from './model/CrossbarPCCompound';
import CrossbarProteinVariation from './model/CrossbarProteinVariation';
import CrossbarTarget from './model/CrossbarTarget';
import Drugs from './model/Drugs';
import EFO from './model/EFO';
import EFOEntities from './model/EFOEntities';
import Ensembl from './model/Ensembl';
import FeaturePosition from './model/FeaturePosition';
import Features from './model/Features';
import Fragment from './model/Fragment';
import Gene from './model/Gene';
import Go from './model/Go';
import GoEvidence from './model/GoEvidence';
import HPOEntity from './model/HPOEntity';
import HitPosition from './model/HitPosition';
import HpoEntities from './model/HpoEntities';
import Intact from './model/Intact';
import IntactInteractions from './model/IntactInteractions';
import Interactor from './model/Interactor';
import Interpro from './model/Interpro';
import Kegg from './model/Kegg';
import Molecules from './model/Molecules';
import Omim from './model/Omim';
import OpenTargets from './model/OpenTargets';
import Orphanet from './model/Orphanet';
import PDBe from './model/PDBe';
import PageMeta from './model/PageMeta';
import Pathway from './model/Pathway';
import Pfam from './model/Pfam';
import Protein from './model/Protein';
import ProteinInteraction from './model/ProteinInteraction';
import Proteins from './model/Proteins';
import PubchemCompounds from './model/PubchemCompounds';
import PubchemSubstances from './model/PubchemSubstances';
import Reactome from './model/Reactome';
import SidRelatedData from './model/SidRelatedData';
import Substance from './model/Substance';
import Target from './model/Target';
import TargetInfo from './model/TargetInfo';
import TargetType from './model/TargetType';
import Targets from './model/Targets';
import VariationAssociation from './model/VariationAssociation';
import VariationEvidence from './model/VariationEvidence';
import VariationEvidenceSource from './model/VariationEvidenceSource';
import VariationXref from './model/VariationXref';
import Xref from './model/Xref';
import ActivitiesApi from './api/ActivitiesApi';
import AssaysApi from './api/AssaysApi';
import DrugsApi from './api/DrugsApi';
import EFODiseaseTermsApi from './api/EFODiseaseTermsApi';
import HPOApi from './api/HPOApi';
import IntactApi from './api/IntactApi';
import MoleculesApi from './api/MoleculesApi';
import ProteinsApi from './api/ProteinsApi';
import PubChemBioassaySidsApi from './api/PubChemBioassaySidsApi';
import PubChemBiossaysApi from './api/PubChemBiossaysApi';
import PubChemCompoundsApi from './api/PubChemCompoundsApi';
import PubChemSubstancesApi from './api/PubChemSubstancesApi';
import TargetsApi from './api/TargetsApi';


/**
* # About CROssBAR &amp; data **CROssBAR**: Comprehensive Resource of Biomedical Relations with Deep Learning Applications and Knowledge Graph Representations CROssBAR is a comprehensive system that integrates large-scale biomedical data from various resources e.g UniProt, ChEMBL, Drugbank, EFO, HPO, InterPro &amp; PubChem and stores them in a new NoSQL database, enrich these data with deep learning based prediction of relations between numerous biomedical entities, rigorously analyse the enriched data to obtain biologically meaningful modules and display them to the user via easy to interpret, interactive and heterogeneous knowledge graphs. CROssBAR platform exposes a set of 12 endpoints to query data stored in the CROssBAR database. These endpoints help the user to find data of interest using different parameters provided by the API endpoint. For example, https://www.ebi.ac.uk/tools/crossbar/proteins?accession&#x3D;A0A023GRW5 -&gt; will provide protein information about accession &#39;A0A023GRW5&#39; including its interactions, functions, cross-references, variations and more. https://www.ebi.ac.uk/tools/crossbar/activities?moleculeChemblId&#x3D;CHEMBL465983 -&gt; will provide ChEMBL bio-interactions related information including targets and bio-activity measurements associated with molecule chembl id &#39;CHEMBL465983&#39;  **Knowledge graphs** Another use case of CROssBAR&#39;s API endpoints is in building knowledge graphs. These endpoints can be *weaved* together (output from one API endpoint fed as input to another API endpoint) programmatically to link nodes like protein, disease, drugs etc. as nodes of the graph. The endpoints are designed to be independent from each other which allows users the flexibility to drive biological networks from any facet e.g drug-centric, disease-centric, gene-centric etc. Our service for knowledge graph construction is available at https://crossbar.kansil.org. An example for the part of the background queries on the CROssBAR API during the construction of a knowledge graph,  (with the aim of keeping the example simple, we have only included the processes related to pathways, genes/proteins and drugs/compounds) In this example, we would like to find bio-active compounds (with a pChEMBL value threshold of at least 6.0) &amp; drugs targeting all proteins belonging to \&quot;WNT ligand biogenesis and trafficking\&quot; pathway (based on Reactome pathway annotations). This can be achieved by using endpoints listed on this swagger documentation as illustrated in following steps- Find bio-active compounds (with a pChEMBL value threshold of at least 6.0) &amp; drugs targeting all proteins belonging to \&quot;WNT ligand biogenesis and trafficking\&quot; pathway (based on Reactome annotations) This can be achieved by using endpoints listed on [this swagger documentation](https://www.ebi.ac.uk/tools/crossbar/swagger-ui.html) as illustrated in following steps- 1. Get all proteins from “/proteins” API endpoint which have a reactome pathway name equal to \&quot;WNT ligand biogenesis and trafficking\&quot;. 2. From the collection of uniprot protein accessions collected from step 1 above, we query “/targets” API endpoint to obtain the ‘target_chembl_id’s of these proteins. 3. From the collection of target_chembl_ids collected from step 2 above, we query “/activities” API endpoint with pChEMBL value &gt;&#x3D;6, to obtain the ’molecule_chembl_id’s of the molecules that we need.  4. From the collection of uniprot protein accessions collected from step 1 above, we find out Drug names and ids from the “/drugs” API endpoint that targets our proteins. 5. From the collection of ’molecule_chembl_id’s obtained in step3, we query “/molecules” endpoint to get the compounds that are interacting with the genes/proteins belonging to the “WNT ligand biogenesis and trafficking” pathway..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var CrOssBarDataApi = require('index'); // See note below*.
* var xxxSvc = new CrOssBarDataApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new CrOssBarDataApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new CrOssBarDataApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new CrOssBarDataApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Activities model constructor.
     * @property {module:model/Activities}
     */
    Activities,

    /**
     * The Activity model constructor.
     * @property {module:model/Activity}
     */
    Activity,

    /**
     * The Assay model constructor.
     * @property {module:model/Assay}
     */
    Assay,

    /**
     * The AssayData model constructor.
     * @property {module:model/AssayData}
     */
    AssayData,

    /**
     * The AssayOrganism model constructor.
     * @property {module:model/AssayOrganism}
     */
    AssayOrganism,

    /**
     * The Assays model constructor.
     * @property {module:model/Assays}
     */
    Assays,

    /**
     * The BioAssay model constructor.
     * @property {module:model/BioAssay}
     */
    BioAssay,

    /**
     * The BioAssayMetaData model constructor.
     * @property {module:model/BioAssayMetaData}
     */
    BioAssayMetaData,

    /**
     * The Bioassays model constructor.
     * @property {module:model/Bioassays}
     */
    Bioassays,

    /**
     * The CrossReferences model constructor.
     * @property {module:model/CrossReferences}
     */
    CrossReferences,

    /**
     * The CrossbarDrug model constructor.
     * @property {module:model/CrossbarDrug}
     */
    CrossbarDrug,

    /**
     * The CrossbarFeature model constructor.
     * @property {module:model/CrossbarFeature}
     */
    CrossbarFeature,

    /**
     * The CrossbarMolecule model constructor.
     * @property {module:model/CrossbarMolecule}
     */
    CrossbarMolecule,

    /**
     * The CrossbarPCCompound model constructor.
     * @property {module:model/CrossbarPCCompound}
     */
    CrossbarPCCompound,

    /**
     * The CrossbarProteinVariation model constructor.
     * @property {module:model/CrossbarProteinVariation}
     */
    CrossbarProteinVariation,

    /**
     * The CrossbarTarget model constructor.
     * @property {module:model/CrossbarTarget}
     */
    CrossbarTarget,

    /**
     * The Drugs model constructor.
     * @property {module:model/Drugs}
     */
    Drugs,

    /**
     * The EFO model constructor.
     * @property {module:model/EFO}
     */
    EFO,

    /**
     * The EFOEntities model constructor.
     * @property {module:model/EFOEntities}
     */
    EFOEntities,

    /**
     * The Ensembl model constructor.
     * @property {module:model/Ensembl}
     */
    Ensembl,

    /**
     * The FeaturePosition model constructor.
     * @property {module:model/FeaturePosition}
     */
    FeaturePosition,

    /**
     * The Features model constructor.
     * @property {module:model/Features}
     */
    Features,

    /**
     * The Fragment model constructor.
     * @property {module:model/Fragment}
     */
    Fragment,

    /**
     * The Gene model constructor.
     * @property {module:model/Gene}
     */
    Gene,

    /**
     * The Go model constructor.
     * @property {module:model/Go}
     */
    Go,

    /**
     * The GoEvidence model constructor.
     * @property {module:model/GoEvidence}
     */
    GoEvidence,

    /**
     * The HPOEntity model constructor.
     * @property {module:model/HPOEntity}
     */
    HPOEntity,

    /**
     * The HitPosition model constructor.
     * @property {module:model/HitPosition}
     */
    HitPosition,

    /**
     * The HpoEntities model constructor.
     * @property {module:model/HpoEntities}
     */
    HpoEntities,

    /**
     * The Intact model constructor.
     * @property {module:model/Intact}
     */
    Intact,

    /**
     * The IntactInteractions model constructor.
     * @property {module:model/IntactInteractions}
     */
    IntactInteractions,

    /**
     * The Interactor model constructor.
     * @property {module:model/Interactor}
     */
    Interactor,

    /**
     * The Interpro model constructor.
     * @property {module:model/Interpro}
     */
    Interpro,

    /**
     * The Kegg model constructor.
     * @property {module:model/Kegg}
     */
    Kegg,

    /**
     * The Molecules model constructor.
     * @property {module:model/Molecules}
     */
    Molecules,

    /**
     * The Omim model constructor.
     * @property {module:model/Omim}
     */
    Omim,

    /**
     * The OpenTargets model constructor.
     * @property {module:model/OpenTargets}
     */
    OpenTargets,

    /**
     * The Orphanet model constructor.
     * @property {module:model/Orphanet}
     */
    Orphanet,

    /**
     * The PDBe model constructor.
     * @property {module:model/PDBe}
     */
    PDBe,

    /**
     * The PageMeta model constructor.
     * @property {module:model/PageMeta}
     */
    PageMeta,

    /**
     * The Pathway model constructor.
     * @property {module:model/Pathway}
     */
    Pathway,

    /**
     * The Pfam model constructor.
     * @property {module:model/Pfam}
     */
    Pfam,

    /**
     * The Protein model constructor.
     * @property {module:model/Protein}
     */
    Protein,

    /**
     * The ProteinInteraction model constructor.
     * @property {module:model/ProteinInteraction}
     */
    ProteinInteraction,

    /**
     * The Proteins model constructor.
     * @property {module:model/Proteins}
     */
    Proteins,

    /**
     * The PubchemCompounds model constructor.
     * @property {module:model/PubchemCompounds}
     */
    PubchemCompounds,

    /**
     * The PubchemSubstances model constructor.
     * @property {module:model/PubchemSubstances}
     */
    PubchemSubstances,

    /**
     * The Reactome model constructor.
     * @property {module:model/Reactome}
     */
    Reactome,

    /**
     * The SidRelatedData model constructor.
     * @property {module:model/SidRelatedData}
     */
    SidRelatedData,

    /**
     * The Substance model constructor.
     * @property {module:model/Substance}
     */
    Substance,

    /**
     * The Target model constructor.
     * @property {module:model/Target}
     */
    Target,

    /**
     * The TargetInfo model constructor.
     * @property {module:model/TargetInfo}
     */
    TargetInfo,

    /**
     * The TargetType model constructor.
     * @property {module:model/TargetType}
     */
    TargetType,

    /**
     * The Targets model constructor.
     * @property {module:model/Targets}
     */
    Targets,

    /**
     * The VariationAssociation model constructor.
     * @property {module:model/VariationAssociation}
     */
    VariationAssociation,

    /**
     * The VariationEvidence model constructor.
     * @property {module:model/VariationEvidence}
     */
    VariationEvidence,

    /**
     * The VariationEvidenceSource model constructor.
     * @property {module:model/VariationEvidenceSource}
     */
    VariationEvidenceSource,

    /**
     * The VariationXref model constructor.
     * @property {module:model/VariationXref}
     */
    VariationXref,

    /**
     * The Xref model constructor.
     * @property {module:model/Xref}
     */
    Xref,

    /**
    * The ActivitiesApi service constructor.
    * @property {module:api/ActivitiesApi}
    */
    ActivitiesApi,

    /**
    * The AssaysApi service constructor.
    * @property {module:api/AssaysApi}
    */
    AssaysApi,

    /**
    * The DrugsApi service constructor.
    * @property {module:api/DrugsApi}
    */
    DrugsApi,

    /**
    * The EFODiseaseTermsApi service constructor.
    * @property {module:api/EFODiseaseTermsApi}
    */
    EFODiseaseTermsApi,

    /**
    * The HPOApi service constructor.
    * @property {module:api/HPOApi}
    */
    HPOApi,

    /**
    * The IntactApi service constructor.
    * @property {module:api/IntactApi}
    */
    IntactApi,

    /**
    * The MoleculesApi service constructor.
    * @property {module:api/MoleculesApi}
    */
    MoleculesApi,

    /**
    * The ProteinsApi service constructor.
    * @property {module:api/ProteinsApi}
    */
    ProteinsApi,

    /**
    * The PubChemBioassaySidsApi service constructor.
    * @property {module:api/PubChemBioassaySidsApi}
    */
    PubChemBioassaySidsApi,

    /**
    * The PubChemBiossaysApi service constructor.
    * @property {module:api/PubChemBiossaysApi}
    */
    PubChemBiossaysApi,

    /**
    * The PubChemCompoundsApi service constructor.
    * @property {module:api/PubChemCompoundsApi}
    */
    PubChemCompoundsApi,

    /**
    * The PubChemSubstancesApi service constructor.
    * @property {module:api/PubChemSubstancesApi}
    */
    PubChemSubstancesApi,

    /**
    * The TargetsApi service constructor.
    * @property {module:api/TargetsApi}
    */
    TargetsApi
};
