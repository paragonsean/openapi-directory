# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.go_evidence import GoEvidence
from openapi_server import util


class Go(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, evidences: List[GoEvidence]=None, id: str=None, term: str=None):
        """Go - a model defined in OpenAPI

        :param evidences: The evidences of this Go.
        :param id: The id of this Go.
        :param term: The term of this Go.
        """
        self.openapi_types = {
            'evidences': List[GoEvidence],
            'id': str,
            'term': str
        }

        self.attribute_map = {
            'evidences': 'evidences',
            'id': 'id',
            'term': 'term'
        }

        self._evidences = evidences
        self._id = id
        self._term = term

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Go':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Go of this Go.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def evidences(self):
        """Gets the evidences of this Go.


        :return: The evidences of this Go.
        :rtype: List[GoEvidence]
        """
        return self._evidences

    @evidences.setter
    def evidences(self, evidences):
        """Sets the evidences of this Go.


        :param evidences: The evidences of this Go.
        :type evidences: List[GoEvidence]
        """

        self._evidences = evidences

    @property
    def id(self):
        """Gets the id of this Go.


        :return: The id of this Go.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Go.


        :param id: The id of this Go.
        :type id: str
        """

        self._id = id

    @property
    def term(self):
        """Gets the term of this Go.


        :return: The term of this Go.
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this Go.


        :param term: The term of this Go.
        :type term: str
        """

        self._term = term
