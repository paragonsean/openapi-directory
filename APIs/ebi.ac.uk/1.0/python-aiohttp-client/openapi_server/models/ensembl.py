# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Ensembl(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gene_id: str=None, id: str=None, isoform: str=None, protein_sequence_id: str=None):
        """Ensembl - a model defined in OpenAPI

        :param gene_id: The gene_id of this Ensembl.
        :param id: The id of this Ensembl.
        :param isoform: The isoform of this Ensembl.
        :param protein_sequence_id: The protein_sequence_id of this Ensembl.
        """
        self.openapi_types = {
            'gene_id': str,
            'id': str,
            'isoform': str,
            'protein_sequence_id': str
        }

        self.attribute_map = {
            'gene_id': 'geneId',
            'id': 'id',
            'isoform': 'isoform',
            'protein_sequence_id': 'proteinSequenceId'
        }

        self._gene_id = gene_id
        self._id = id
        self._isoform = isoform
        self._protein_sequence_id = protein_sequence_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Ensembl':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Ensembl of this Ensembl.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gene_id(self):
        """Gets the gene_id of this Ensembl.


        :return: The gene_id of this Ensembl.
        :rtype: str
        """
        return self._gene_id

    @gene_id.setter
    def gene_id(self, gene_id):
        """Sets the gene_id of this Ensembl.


        :param gene_id: The gene_id of this Ensembl.
        :type gene_id: str
        """

        self._gene_id = gene_id

    @property
    def id(self):
        """Gets the id of this Ensembl.


        :return: The id of this Ensembl.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Ensembl.


        :param id: The id of this Ensembl.
        :type id: str
        """

        self._id = id

    @property
    def isoform(self):
        """Gets the isoform of this Ensembl.


        :return: The isoform of this Ensembl.
        :rtype: str
        """
        return self._isoform

    @isoform.setter
    def isoform(self, isoform):
        """Sets the isoform of this Ensembl.


        :param isoform: The isoform of this Ensembl.
        :type isoform: str
        """

        self._isoform = isoform

    @property
    def protein_sequence_id(self):
        """Gets the protein_sequence_id of this Ensembl.


        :return: The protein_sequence_id of this Ensembl.
        :rtype: str
        """
        return self._protein_sequence_id

    @protein_sequence_id.setter
    def protein_sequence_id(self, protein_sequence_id):
        """Sets the protein_sequence_id of this Ensembl.


        :param protein_sequence_id: The protein_sequence_id of this Ensembl.
        :type protein_sequence_id: str
        """

        self._protein_sequence_id = protein_sequence_id
