# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EFO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: List[str]=None, doid: List[str]=None, icd9: List[str]=None, label: str=None, mesh: List[str]=None, ncit: List[str]=None, obo_id: str=None, omim: List[str]=None, short_form: str=None, snowmed: List[str]=None, synonyms: List[str]=None, umls: List[str]=None):
        """EFO - a model defined in OpenAPI

        :param description: The description of this EFO.
        :param doid: The doid of this EFO.
        :param icd9: The icd9 of this EFO.
        :param label: The label of this EFO.
        :param mesh: The mesh of this EFO.
        :param ncit: The ncit of this EFO.
        :param obo_id: The obo_id of this EFO.
        :param omim: The omim of this EFO.
        :param short_form: The short_form of this EFO.
        :param snowmed: The snowmed of this EFO.
        :param synonyms: The synonyms of this EFO.
        :param umls: The umls of this EFO.
        """
        self.openapi_types = {
            'description': List[str],
            'doid': List[str],
            'icd9': List[str],
            'label': str,
            'mesh': List[str],
            'ncit': List[str],
            'obo_id': str,
            'omim': List[str],
            'short_form': str,
            'snowmed': List[str],
            'synonyms': List[str],
            'umls': List[str]
        }

        self.attribute_map = {
            'description': 'description',
            'doid': 'doid',
            'icd9': 'icd9',
            'label': 'label',
            'mesh': 'mesh',
            'ncit': 'ncit',
            'obo_id': 'obo_id',
            'omim': 'omim',
            'short_form': 'short_form',
            'snowmed': 'snowmed',
            'synonyms': 'synonyms',
            'umls': 'umls'
        }

        self._description = description
        self._doid = doid
        self._icd9 = icd9
        self._label = label
        self._mesh = mesh
        self._ncit = ncit
        self._obo_id = obo_id
        self._omim = omim
        self._short_form = short_form
        self._snowmed = snowmed
        self._synonyms = synonyms
        self._umls = umls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EFO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EFO of this EFO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this EFO.


        :return: The description of this EFO.
        :rtype: List[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EFO.


        :param description: The description of this EFO.
        :type description: List[str]
        """

        self._description = description

    @property
    def doid(self):
        """Gets the doid of this EFO.


        :return: The doid of this EFO.
        :rtype: List[str]
        """
        return self._doid

    @doid.setter
    def doid(self, doid):
        """Sets the doid of this EFO.


        :param doid: The doid of this EFO.
        :type doid: List[str]
        """

        self._doid = doid

    @property
    def icd9(self):
        """Gets the icd9 of this EFO.


        :return: The icd9 of this EFO.
        :rtype: List[str]
        """
        return self._icd9

    @icd9.setter
    def icd9(self, icd9):
        """Sets the icd9 of this EFO.


        :param icd9: The icd9 of this EFO.
        :type icd9: List[str]
        """

        self._icd9 = icd9

    @property
    def label(self):
        """Gets the label of this EFO.


        :return: The label of this EFO.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this EFO.


        :param label: The label of this EFO.
        :type label: str
        """

        self._label = label

    @property
    def mesh(self):
        """Gets the mesh of this EFO.


        :return: The mesh of this EFO.
        :rtype: List[str]
        """
        return self._mesh

    @mesh.setter
    def mesh(self, mesh):
        """Sets the mesh of this EFO.


        :param mesh: The mesh of this EFO.
        :type mesh: List[str]
        """

        self._mesh = mesh

    @property
    def ncit(self):
        """Gets the ncit of this EFO.


        :return: The ncit of this EFO.
        :rtype: List[str]
        """
        return self._ncit

    @ncit.setter
    def ncit(self, ncit):
        """Sets the ncit of this EFO.


        :param ncit: The ncit of this EFO.
        :type ncit: List[str]
        """

        self._ncit = ncit

    @property
    def obo_id(self):
        """Gets the obo_id of this EFO.


        :return: The obo_id of this EFO.
        :rtype: str
        """
        return self._obo_id

    @obo_id.setter
    def obo_id(self, obo_id):
        """Sets the obo_id of this EFO.


        :param obo_id: The obo_id of this EFO.
        :type obo_id: str
        """

        self._obo_id = obo_id

    @property
    def omim(self):
        """Gets the omim of this EFO.


        :return: The omim of this EFO.
        :rtype: List[str]
        """
        return self._omim

    @omim.setter
    def omim(self, omim):
        """Sets the omim of this EFO.


        :param omim: The omim of this EFO.
        :type omim: List[str]
        """

        self._omim = omim

    @property
    def short_form(self):
        """Gets the short_form of this EFO.


        :return: The short_form of this EFO.
        :rtype: str
        """
        return self._short_form

    @short_form.setter
    def short_form(self, short_form):
        """Sets the short_form of this EFO.


        :param short_form: The short_form of this EFO.
        :type short_form: str
        """

        self._short_form = short_form

    @property
    def snowmed(self):
        """Gets the snowmed of this EFO.


        :return: The snowmed of this EFO.
        :rtype: List[str]
        """
        return self._snowmed

    @snowmed.setter
    def snowmed(self, snowmed):
        """Sets the snowmed of this EFO.


        :param snowmed: The snowmed of this EFO.
        :type snowmed: List[str]
        """

        self._snowmed = snowmed

    @property
    def synonyms(self):
        """Gets the synonyms of this EFO.


        :return: The synonyms of this EFO.
        :rtype: List[str]
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms):
        """Sets the synonyms of this EFO.


        :param synonyms: The synonyms of this EFO.
        :type synonyms: List[str]
        """

        self._synonyms = synonyms

    @property
    def umls(self):
        """Gets the umls of this EFO.


        :return: The umls of this EFO.
        :rtype: List[str]
        """
        return self._umls

    @umls.setter
    def umls(self, umls):
        """Sets the umls of this EFO.


        :param umls: The umls of this EFO.
        :type umls: List[str]
        """

        self._umls = umls
