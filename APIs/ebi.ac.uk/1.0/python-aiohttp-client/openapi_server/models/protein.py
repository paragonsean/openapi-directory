# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cross_references import CrossReferences
from openapi_server.models.crossbar_protein_variation import CrossbarProteinVariation
from openapi_server.models.features import Features
from openapi_server.models.protein_interaction import ProteinInteraction
from openapi_server import util


class Protein(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accession: str=None, chromosome: str=None, crossreferences: CrossReferences=None, ec_numbers: List[str]=None, features: Features=None, full_name: str=None, genes: List[str]=None, interactions: List[ProteinInteraction]=None, length: float=None, mass: float=None, tax_id: int=None, variations: List[CrossbarProteinVariation]=None):
        """Protein - a model defined in OpenAPI

        :param accession: The accession of this Protein.
        :param chromosome: The chromosome of this Protein.
        :param crossreferences: The crossreferences of this Protein.
        :param ec_numbers: The ec_numbers of this Protein.
        :param features: The features of this Protein.
        :param full_name: The full_name of this Protein.
        :param genes: The genes of this Protein.
        :param interactions: The interactions of this Protein.
        :param length: The length of this Protein.
        :param mass: The mass of this Protein.
        :param tax_id: The tax_id of this Protein.
        :param variations: The variations of this Protein.
        """
        self.openapi_types = {
            'accession': str,
            'chromosome': str,
            'crossreferences': CrossReferences,
            'ec_numbers': List[str],
            'features': Features,
            'full_name': str,
            'genes': List[str],
            'interactions': List[ProteinInteraction],
            'length': float,
            'mass': float,
            'tax_id': int,
            'variations': List[CrossbarProteinVariation]
        }

        self.attribute_map = {
            'accession': 'accession',
            'chromosome': 'chromosome',
            'crossreferences': 'crossreferences',
            'ec_numbers': 'ec_numbers',
            'features': 'features',
            'full_name': 'full_name',
            'genes': 'genes',
            'interactions': 'interactions',
            'length': 'length',
            'mass': 'mass',
            'tax_id': 'tax_id',
            'variations': 'variations'
        }

        self._accession = accession
        self._chromosome = chromosome
        self._crossreferences = crossreferences
        self._ec_numbers = ec_numbers
        self._features = features
        self._full_name = full_name
        self._genes = genes
        self._interactions = interactions
        self._length = length
        self._mass = mass
        self._tax_id = tax_id
        self._variations = variations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Protein':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Protein of this Protein.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accession(self):
        """Gets the accession of this Protein.


        :return: The accession of this Protein.
        :rtype: str
        """
        return self._accession

    @accession.setter
    def accession(self, accession):
        """Sets the accession of this Protein.


        :param accession: The accession of this Protein.
        :type accession: str
        """

        self._accession = accession

    @property
    def chromosome(self):
        """Gets the chromosome of this Protein.


        :return: The chromosome of this Protein.
        :rtype: str
        """
        return self._chromosome

    @chromosome.setter
    def chromosome(self, chromosome):
        """Sets the chromosome of this Protein.


        :param chromosome: The chromosome of this Protein.
        :type chromosome: str
        """

        self._chromosome = chromosome

    @property
    def crossreferences(self):
        """Gets the crossreferences of this Protein.


        :return: The crossreferences of this Protein.
        :rtype: CrossReferences
        """
        return self._crossreferences

    @crossreferences.setter
    def crossreferences(self, crossreferences):
        """Sets the crossreferences of this Protein.


        :param crossreferences: The crossreferences of this Protein.
        :type crossreferences: CrossReferences
        """

        self._crossreferences = crossreferences

    @property
    def ec_numbers(self):
        """Gets the ec_numbers of this Protein.


        :return: The ec_numbers of this Protein.
        :rtype: List[str]
        """
        return self._ec_numbers

    @ec_numbers.setter
    def ec_numbers(self, ec_numbers):
        """Sets the ec_numbers of this Protein.


        :param ec_numbers: The ec_numbers of this Protein.
        :type ec_numbers: List[str]
        """

        self._ec_numbers = ec_numbers

    @property
    def features(self):
        """Gets the features of this Protein.


        :return: The features of this Protein.
        :rtype: Features
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this Protein.


        :param features: The features of this Protein.
        :type features: Features
        """

        self._features = features

    @property
    def full_name(self):
        """Gets the full_name of this Protein.


        :return: The full_name of this Protein.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Protein.


        :param full_name: The full_name of this Protein.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def genes(self):
        """Gets the genes of this Protein.


        :return: The genes of this Protein.
        :rtype: List[str]
        """
        return self._genes

    @genes.setter
    def genes(self, genes):
        """Sets the genes of this Protein.


        :param genes: The genes of this Protein.
        :type genes: List[str]
        """

        self._genes = genes

    @property
    def interactions(self):
        """Gets the interactions of this Protein.


        :return: The interactions of this Protein.
        :rtype: List[ProteinInteraction]
        """
        return self._interactions

    @interactions.setter
    def interactions(self, interactions):
        """Sets the interactions of this Protein.


        :param interactions: The interactions of this Protein.
        :type interactions: List[ProteinInteraction]
        """

        self._interactions = interactions

    @property
    def length(self):
        """Gets the length of this Protein.


        :return: The length of this Protein.
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this Protein.


        :param length: The length of this Protein.
        :type length: float
        """

        self._length = length

    @property
    def mass(self):
        """Gets the mass of this Protein.


        :return: The mass of this Protein.
        :rtype: float
        """
        return self._mass

    @mass.setter
    def mass(self, mass):
        """Sets the mass of this Protein.


        :param mass: The mass of this Protein.
        :type mass: float
        """

        self._mass = mass

    @property
    def tax_id(self):
        """Gets the tax_id of this Protein.


        :return: The tax_id of this Protein.
        :rtype: int
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id):
        """Sets the tax_id of this Protein.


        :param tax_id: The tax_id of this Protein.
        :type tax_id: int
        """

        self._tax_id = tax_id

    @property
    def variations(self):
        """Gets the variations of this Protein.


        :return: The variations of this Protein.
        :rtype: List[CrossbarProteinVariation]
        """
        return self._variations

    @variations.setter
    def variations(self, variations):
        """Sets the variations of this Protein.


        :param variations: The variations of this Protein.
        :type variations: List[CrossbarProteinVariation]
        """

        self._variations = variations
