# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.crossbar_feature import CrossbarFeature
from openapi_server import util


class Features(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_site: List[CrossbarFeature]=None, binding_site: List[CrossbarFeature]=None, chain: List[CrossbarFeature]=None, domain: List[CrossbarFeature]=None, mutagen: List[CrossbarFeature]=None, region: List[CrossbarFeature]=None, top_dom: List[CrossbarFeature]=None, variant: List[CrossbarFeature]=None):
        """Features - a model defined in OpenAPI

        :param active_site: The active_site of this Features.
        :param binding_site: The binding_site of this Features.
        :param chain: The chain of this Features.
        :param domain: The domain of this Features.
        :param mutagen: The mutagen of this Features.
        :param region: The region of this Features.
        :param top_dom: The top_dom of this Features.
        :param variant: The variant of this Features.
        """
        self.openapi_types = {
            'active_site': List[CrossbarFeature],
            'binding_site': List[CrossbarFeature],
            'chain': List[CrossbarFeature],
            'domain': List[CrossbarFeature],
            'mutagen': List[CrossbarFeature],
            'region': List[CrossbarFeature],
            'top_dom': List[CrossbarFeature],
            'variant': List[CrossbarFeature]
        }

        self.attribute_map = {
            'active_site': 'active_site',
            'binding_site': 'binding_site',
            'chain': 'chain',
            'domain': 'domain',
            'mutagen': 'mutagen',
            'region': 'region',
            'top_dom': 'top_dom',
            'variant': 'variant'
        }

        self._active_site = active_site
        self._binding_site = binding_site
        self._chain = chain
        self._domain = domain
        self._mutagen = mutagen
        self._region = region
        self._top_dom = top_dom
        self._variant = variant

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Features':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Features of this Features.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_site(self):
        """Gets the active_site of this Features.


        :return: The active_site of this Features.
        :rtype: List[CrossbarFeature]
        """
        return self._active_site

    @active_site.setter
    def active_site(self, active_site):
        """Sets the active_site of this Features.


        :param active_site: The active_site of this Features.
        :type active_site: List[CrossbarFeature]
        """

        self._active_site = active_site

    @property
    def binding_site(self):
        """Gets the binding_site of this Features.


        :return: The binding_site of this Features.
        :rtype: List[CrossbarFeature]
        """
        return self._binding_site

    @binding_site.setter
    def binding_site(self, binding_site):
        """Sets the binding_site of this Features.


        :param binding_site: The binding_site of this Features.
        :type binding_site: List[CrossbarFeature]
        """

        self._binding_site = binding_site

    @property
    def chain(self):
        """Gets the chain of this Features.


        :return: The chain of this Features.
        :rtype: List[CrossbarFeature]
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this Features.


        :param chain: The chain of this Features.
        :type chain: List[CrossbarFeature]
        """

        self._chain = chain

    @property
    def domain(self):
        """Gets the domain of this Features.


        :return: The domain of this Features.
        :rtype: List[CrossbarFeature]
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Features.


        :param domain: The domain of this Features.
        :type domain: List[CrossbarFeature]
        """

        self._domain = domain

    @property
    def mutagen(self):
        """Gets the mutagen of this Features.


        :return: The mutagen of this Features.
        :rtype: List[CrossbarFeature]
        """
        return self._mutagen

    @mutagen.setter
    def mutagen(self, mutagen):
        """Sets the mutagen of this Features.


        :param mutagen: The mutagen of this Features.
        :type mutagen: List[CrossbarFeature]
        """

        self._mutagen = mutagen

    @property
    def region(self):
        """Gets the region of this Features.


        :return: The region of this Features.
        :rtype: List[CrossbarFeature]
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Features.


        :param region: The region of this Features.
        :type region: List[CrossbarFeature]
        """

        self._region = region

    @property
    def top_dom(self):
        """Gets the top_dom of this Features.


        :return: The top_dom of this Features.
        :rtype: List[CrossbarFeature]
        """
        return self._top_dom

    @top_dom.setter
    def top_dom(self, top_dom):
        """Sets the top_dom of this Features.


        :param top_dom: The top_dom of this Features.
        :type top_dom: List[CrossbarFeature]
        """

        self._top_dom = top_dom

    @property
    def variant(self):
        """Gets the variant of this Features.


        :return: The variant of this Features.
        :rtype: List[CrossbarFeature]
        """
        return self._variant

    @variant.setter
    def variant(self, variant):
        """Sets the variant of this Features.


        :param variant: The variant of this Features.
        :type variant: List[CrossbarFeature]
        """

        self._variant = variant
