# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PDBe(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chains: str=None, id: str=None, method: str=None, resolution: str=None):
        """PDBe - a model defined in OpenAPI

        :param chains: The chains of this PDBe.
        :param id: The id of this PDBe.
        :param method: The method of this PDBe.
        :param resolution: The resolution of this PDBe.
        """
        self.openapi_types = {
            'chains': str,
            'id': str,
            'method': str,
            'resolution': str
        }

        self.attribute_map = {
            'chains': 'chains',
            'id': 'id',
            'method': 'method',
            'resolution': 'resolution'
        }

        self._chains = chains
        self._id = id
        self._method = method
        self._resolution = resolution

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PDBe':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PDBe of this PDBe.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chains(self):
        """Gets the chains of this PDBe.


        :return: The chains of this PDBe.
        :rtype: str
        """
        return self._chains

    @chains.setter
    def chains(self, chains):
        """Sets the chains of this PDBe.


        :param chains: The chains of this PDBe.
        :type chains: str
        """

        self._chains = chains

    @property
    def id(self):
        """Gets the id of this PDBe.


        :return: The id of this PDBe.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PDBe.


        :param id: The id of this PDBe.
        :type id: str
        """

        self._id = id

    @property
    def method(self):
        """Gets the method of this PDBe.


        :return: The method of this PDBe.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this PDBe.


        :param method: The method of this PDBe.
        :type method: str
        """

        self._method = method

    @property
    def resolution(self):
        """Gets the resolution of this PDBe.


        :return: The resolution of this PDBe.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this PDBe.


        :param resolution: The resolution of this PDBe.
        :type resolution: str
        """

        self._resolution = resolution
