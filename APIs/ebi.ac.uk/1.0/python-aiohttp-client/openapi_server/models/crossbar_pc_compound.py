# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CrossbarPCCompound(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alogp: float=None, atom_chiral_count: int=None, atom_chiral_def_count: int=None, bond_chiral_count: int=None, bond_chiral_def_count: int=None, bond_chiral_undef_count: int=None, canonical_smiles: str=None, cid: int=None, covalent_unit_count: int=None, finger_print: str=None, full_mwt: float=None, heavy_atoms_count: int=None, inchi_key: str=None, isotope_atom_count: int=None, polar_surface_area: float=None, standard_inchi: str=None, tautomers_count: int=None):
        """CrossbarPCCompound - a model defined in OpenAPI

        :param alogp: The alogp of this CrossbarPCCompound.
        :param atom_chiral_count: The atom_chiral_count of this CrossbarPCCompound.
        :param atom_chiral_def_count: The atom_chiral_def_count of this CrossbarPCCompound.
        :param bond_chiral_count: The bond_chiral_count of this CrossbarPCCompound.
        :param bond_chiral_def_count: The bond_chiral_def_count of this CrossbarPCCompound.
        :param bond_chiral_undef_count: The bond_chiral_undef_count of this CrossbarPCCompound.
        :param canonical_smiles: The canonical_smiles of this CrossbarPCCompound.
        :param cid: The cid of this CrossbarPCCompound.
        :param covalent_unit_count: The covalent_unit_count of this CrossbarPCCompound.
        :param finger_print: The finger_print of this CrossbarPCCompound.
        :param full_mwt: The full_mwt of this CrossbarPCCompound.
        :param heavy_atoms_count: The heavy_atoms_count of this CrossbarPCCompound.
        :param inchi_key: The inchi_key of this CrossbarPCCompound.
        :param isotope_atom_count: The isotope_atom_count of this CrossbarPCCompound.
        :param polar_surface_area: The polar_surface_area of this CrossbarPCCompound.
        :param standard_inchi: The standard_inchi of this CrossbarPCCompound.
        :param tautomers_count: The tautomers_count of this CrossbarPCCompound.
        """
        self.openapi_types = {
            'alogp': float,
            'atom_chiral_count': int,
            'atom_chiral_def_count': int,
            'bond_chiral_count': int,
            'bond_chiral_def_count': int,
            'bond_chiral_undef_count': int,
            'canonical_smiles': str,
            'cid': int,
            'covalent_unit_count': int,
            'finger_print': str,
            'full_mwt': float,
            'heavy_atoms_count': int,
            'inchi_key': str,
            'isotope_atom_count': int,
            'polar_surface_area': float,
            'standard_inchi': str,
            'tautomers_count': int
        }

        self.attribute_map = {
            'alogp': 'alogp',
            'atom_chiral_count': 'atom_chiral_count',
            'atom_chiral_def_count': 'atom_chiral_def_count',
            'bond_chiral_count': 'bond_chiral_count',
            'bond_chiral_def_count': 'bond_chiral_def_count',
            'bond_chiral_undef_count': 'bond_chiral_undef_count',
            'canonical_smiles': 'canonical_smiles',
            'cid': 'cid',
            'covalent_unit_count': 'covalent_unit_count',
            'finger_print': 'finger_print',
            'full_mwt': 'full_mwt',
            'heavy_atoms_count': 'heavy_atoms_count',
            'inchi_key': 'inchi_key',
            'isotope_atom_count': 'isotope_atom_count',
            'polar_surface_area': 'polar_surface_area',
            'standard_inchi': 'standard_inchi',
            'tautomers_count': 'tautomers_count'
        }

        self._alogp = alogp
        self._atom_chiral_count = atom_chiral_count
        self._atom_chiral_def_count = atom_chiral_def_count
        self._bond_chiral_count = bond_chiral_count
        self._bond_chiral_def_count = bond_chiral_def_count
        self._bond_chiral_undef_count = bond_chiral_undef_count
        self._canonical_smiles = canonical_smiles
        self._cid = cid
        self._covalent_unit_count = covalent_unit_count
        self._finger_print = finger_print
        self._full_mwt = full_mwt
        self._heavy_atoms_count = heavy_atoms_count
        self._inchi_key = inchi_key
        self._isotope_atom_count = isotope_atom_count
        self._polar_surface_area = polar_surface_area
        self._standard_inchi = standard_inchi
        self._tautomers_count = tautomers_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CrossbarPCCompound':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CrossbarPCCompound of this CrossbarPCCompound.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alogp(self):
        """Gets the alogp of this CrossbarPCCompound.


        :return: The alogp of this CrossbarPCCompound.
        :rtype: float
        """
        return self._alogp

    @alogp.setter
    def alogp(self, alogp):
        """Sets the alogp of this CrossbarPCCompound.


        :param alogp: The alogp of this CrossbarPCCompound.
        :type alogp: float
        """

        self._alogp = alogp

    @property
    def atom_chiral_count(self):
        """Gets the atom_chiral_count of this CrossbarPCCompound.


        :return: The atom_chiral_count of this CrossbarPCCompound.
        :rtype: int
        """
        return self._atom_chiral_count

    @atom_chiral_count.setter
    def atom_chiral_count(self, atom_chiral_count):
        """Sets the atom_chiral_count of this CrossbarPCCompound.


        :param atom_chiral_count: The atom_chiral_count of this CrossbarPCCompound.
        :type atom_chiral_count: int
        """

        self._atom_chiral_count = atom_chiral_count

    @property
    def atom_chiral_def_count(self):
        """Gets the atom_chiral_def_count of this CrossbarPCCompound.


        :return: The atom_chiral_def_count of this CrossbarPCCompound.
        :rtype: int
        """
        return self._atom_chiral_def_count

    @atom_chiral_def_count.setter
    def atom_chiral_def_count(self, atom_chiral_def_count):
        """Sets the atom_chiral_def_count of this CrossbarPCCompound.


        :param atom_chiral_def_count: The atom_chiral_def_count of this CrossbarPCCompound.
        :type atom_chiral_def_count: int
        """

        self._atom_chiral_def_count = atom_chiral_def_count

    @property
    def bond_chiral_count(self):
        """Gets the bond_chiral_count of this CrossbarPCCompound.


        :return: The bond_chiral_count of this CrossbarPCCompound.
        :rtype: int
        """
        return self._bond_chiral_count

    @bond_chiral_count.setter
    def bond_chiral_count(self, bond_chiral_count):
        """Sets the bond_chiral_count of this CrossbarPCCompound.


        :param bond_chiral_count: The bond_chiral_count of this CrossbarPCCompound.
        :type bond_chiral_count: int
        """

        self._bond_chiral_count = bond_chiral_count

    @property
    def bond_chiral_def_count(self):
        """Gets the bond_chiral_def_count of this CrossbarPCCompound.


        :return: The bond_chiral_def_count of this CrossbarPCCompound.
        :rtype: int
        """
        return self._bond_chiral_def_count

    @bond_chiral_def_count.setter
    def bond_chiral_def_count(self, bond_chiral_def_count):
        """Sets the bond_chiral_def_count of this CrossbarPCCompound.


        :param bond_chiral_def_count: The bond_chiral_def_count of this CrossbarPCCompound.
        :type bond_chiral_def_count: int
        """

        self._bond_chiral_def_count = bond_chiral_def_count

    @property
    def bond_chiral_undef_count(self):
        """Gets the bond_chiral_undef_count of this CrossbarPCCompound.


        :return: The bond_chiral_undef_count of this CrossbarPCCompound.
        :rtype: int
        """
        return self._bond_chiral_undef_count

    @bond_chiral_undef_count.setter
    def bond_chiral_undef_count(self, bond_chiral_undef_count):
        """Sets the bond_chiral_undef_count of this CrossbarPCCompound.


        :param bond_chiral_undef_count: The bond_chiral_undef_count of this CrossbarPCCompound.
        :type bond_chiral_undef_count: int
        """

        self._bond_chiral_undef_count = bond_chiral_undef_count

    @property
    def canonical_smiles(self):
        """Gets the canonical_smiles of this CrossbarPCCompound.


        :return: The canonical_smiles of this CrossbarPCCompound.
        :rtype: str
        """
        return self._canonical_smiles

    @canonical_smiles.setter
    def canonical_smiles(self, canonical_smiles):
        """Sets the canonical_smiles of this CrossbarPCCompound.


        :param canonical_smiles: The canonical_smiles of this CrossbarPCCompound.
        :type canonical_smiles: str
        """

        self._canonical_smiles = canonical_smiles

    @property
    def cid(self):
        """Gets the cid of this CrossbarPCCompound.


        :return: The cid of this CrossbarPCCompound.
        :rtype: int
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this CrossbarPCCompound.


        :param cid: The cid of this CrossbarPCCompound.
        :type cid: int
        """

        self._cid = cid

    @property
    def covalent_unit_count(self):
        """Gets the covalent_unit_count of this CrossbarPCCompound.


        :return: The covalent_unit_count of this CrossbarPCCompound.
        :rtype: int
        """
        return self._covalent_unit_count

    @covalent_unit_count.setter
    def covalent_unit_count(self, covalent_unit_count):
        """Sets the covalent_unit_count of this CrossbarPCCompound.


        :param covalent_unit_count: The covalent_unit_count of this CrossbarPCCompound.
        :type covalent_unit_count: int
        """

        self._covalent_unit_count = covalent_unit_count

    @property
    def finger_print(self):
        """Gets the finger_print of this CrossbarPCCompound.


        :return: The finger_print of this CrossbarPCCompound.
        :rtype: str
        """
        return self._finger_print

    @finger_print.setter
    def finger_print(self, finger_print):
        """Sets the finger_print of this CrossbarPCCompound.


        :param finger_print: The finger_print of this CrossbarPCCompound.
        :type finger_print: str
        """
        if finger_print is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', finger_print):
            raise ValueError("Invalid value for `finger_print`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")

        self._finger_print = finger_print

    @property
    def full_mwt(self):
        """Gets the full_mwt of this CrossbarPCCompound.


        :return: The full_mwt of this CrossbarPCCompound.
        :rtype: float
        """
        return self._full_mwt

    @full_mwt.setter
    def full_mwt(self, full_mwt):
        """Sets the full_mwt of this CrossbarPCCompound.


        :param full_mwt: The full_mwt of this CrossbarPCCompound.
        :type full_mwt: float
        """

        self._full_mwt = full_mwt

    @property
    def heavy_atoms_count(self):
        """Gets the heavy_atoms_count of this CrossbarPCCompound.


        :return: The heavy_atoms_count of this CrossbarPCCompound.
        :rtype: int
        """
        return self._heavy_atoms_count

    @heavy_atoms_count.setter
    def heavy_atoms_count(self, heavy_atoms_count):
        """Sets the heavy_atoms_count of this CrossbarPCCompound.


        :param heavy_atoms_count: The heavy_atoms_count of this CrossbarPCCompound.
        :type heavy_atoms_count: int
        """

        self._heavy_atoms_count = heavy_atoms_count

    @property
    def inchi_key(self):
        """Gets the inchi_key of this CrossbarPCCompound.


        :return: The inchi_key of this CrossbarPCCompound.
        :rtype: str
        """
        return self._inchi_key

    @inchi_key.setter
    def inchi_key(self, inchi_key):
        """Sets the inchi_key of this CrossbarPCCompound.


        :param inchi_key: The inchi_key of this CrossbarPCCompound.
        :type inchi_key: str
        """

        self._inchi_key = inchi_key

    @property
    def isotope_atom_count(self):
        """Gets the isotope_atom_count of this CrossbarPCCompound.


        :return: The isotope_atom_count of this CrossbarPCCompound.
        :rtype: int
        """
        return self._isotope_atom_count

    @isotope_atom_count.setter
    def isotope_atom_count(self, isotope_atom_count):
        """Sets the isotope_atom_count of this CrossbarPCCompound.


        :param isotope_atom_count: The isotope_atom_count of this CrossbarPCCompound.
        :type isotope_atom_count: int
        """

        self._isotope_atom_count = isotope_atom_count

    @property
    def polar_surface_area(self):
        """Gets the polar_surface_area of this CrossbarPCCompound.


        :return: The polar_surface_area of this CrossbarPCCompound.
        :rtype: float
        """
        return self._polar_surface_area

    @polar_surface_area.setter
    def polar_surface_area(self, polar_surface_area):
        """Sets the polar_surface_area of this CrossbarPCCompound.


        :param polar_surface_area: The polar_surface_area of this CrossbarPCCompound.
        :type polar_surface_area: float
        """

        self._polar_surface_area = polar_surface_area

    @property
    def standard_inchi(self):
        """Gets the standard_inchi of this CrossbarPCCompound.


        :return: The standard_inchi of this CrossbarPCCompound.
        :rtype: str
        """
        return self._standard_inchi

    @standard_inchi.setter
    def standard_inchi(self, standard_inchi):
        """Sets the standard_inchi of this CrossbarPCCompound.


        :param standard_inchi: The standard_inchi of this CrossbarPCCompound.
        :type standard_inchi: str
        """

        self._standard_inchi = standard_inchi

    @property
    def tautomers_count(self):
        """Gets the tautomers_count of this CrossbarPCCompound.


        :return: The tautomers_count of this CrossbarPCCompound.
        :rtype: int
        """
        return self._tautomers_count

    @tautomers_count.setter
    def tautomers_count(self, tautomers_count):
        """Sets the tautomers_count of this CrossbarPCCompound.


        :param tautomers_count: The tautomers_count of this CrossbarPCCompound.
        :type tautomers_count: int
        """

        self._tautomers_count = tautomers_count
