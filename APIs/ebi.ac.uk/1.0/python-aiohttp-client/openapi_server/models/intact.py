# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.interactor import Interactor
from openapi_server import util


class Intact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence: float=None, interaction_ac: List[str]=None, interactor_a: Interactor=None, interactor_b: Interactor=None, method: str=None, source_db: str=None):
        """Intact - a model defined in OpenAPI

        :param confidence: The confidence of this Intact.
        :param interaction_ac: The interaction_ac of this Intact.
        :param interactor_a: The interactor_a of this Intact.
        :param interactor_b: The interactor_b of this Intact.
        :param method: The method of this Intact.
        :param source_db: The source_db of this Intact.
        """
        self.openapi_types = {
            'confidence': float,
            'interaction_ac': List[str],
            'interactor_a': Interactor,
            'interactor_b': Interactor,
            'method': str,
            'source_db': str
        }

        self.attribute_map = {
            'confidence': 'confidence',
            'interaction_ac': 'interaction_ac',
            'interactor_a': 'interactor_a',
            'interactor_b': 'interactor_b',
            'method': 'method',
            'source_db': 'source_db'
        }

        self._confidence = confidence
        self._interaction_ac = interaction_ac
        self._interactor_a = interactor_a
        self._interactor_b = interactor_b
        self._method = method
        self._source_db = source_db

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Intact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Intact of this Intact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence(self):
        """Gets the confidence of this Intact.


        :return: The confidence of this Intact.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this Intact.


        :param confidence: The confidence of this Intact.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def interaction_ac(self):
        """Gets the interaction_ac of this Intact.


        :return: The interaction_ac of this Intact.
        :rtype: List[str]
        """
        return self._interaction_ac

    @interaction_ac.setter
    def interaction_ac(self, interaction_ac):
        """Sets the interaction_ac of this Intact.


        :param interaction_ac: The interaction_ac of this Intact.
        :type interaction_ac: List[str]
        """

        self._interaction_ac = interaction_ac

    @property
    def interactor_a(self):
        """Gets the interactor_a of this Intact.


        :return: The interactor_a of this Intact.
        :rtype: Interactor
        """
        return self._interactor_a

    @interactor_a.setter
    def interactor_a(self, interactor_a):
        """Sets the interactor_a of this Intact.


        :param interactor_a: The interactor_a of this Intact.
        :type interactor_a: Interactor
        """

        self._interactor_a = interactor_a

    @property
    def interactor_b(self):
        """Gets the interactor_b of this Intact.


        :return: The interactor_b of this Intact.
        :rtype: Interactor
        """
        return self._interactor_b

    @interactor_b.setter
    def interactor_b(self, interactor_b):
        """Sets the interactor_b of this Intact.


        :param interactor_b: The interactor_b of this Intact.
        :type interactor_b: Interactor
        """

        self._interactor_b = interactor_b

    @property
    def method(self):
        """Gets the method of this Intact.


        :return: The method of this Intact.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this Intact.


        :param method: The method of this Intact.
        :type method: str
        """

        self._method = method

    @property
    def source_db(self):
        """Gets the source_db of this Intact.


        :return: The source_db of this Intact.
        :rtype: str
        """
        return self._source_db

    @source_db.setter
    def source_db(self, source_db):
        """Sets the source_db of this Intact.


        :param source_db: The source_db of this Intact.
        :type source_db: str
        """

        self._source_db = source_db
