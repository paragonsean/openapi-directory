# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fragment import Fragment
from openapi_server.models.hit_position import HitPosition
from openapi_server import util


class Interpro(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entry_id: str=None, entry_name: str=None, entry_type: str=None, fragments: List[Fragment]=None, hit_position: HitPosition=None):
        """Interpro - a model defined in OpenAPI

        :param entry_id: The entry_id of this Interpro.
        :param entry_name: The entry_name of this Interpro.
        :param entry_type: The entry_type of this Interpro.
        :param fragments: The fragments of this Interpro.
        :param hit_position: The hit_position of this Interpro.
        """
        self.openapi_types = {
            'entry_id': str,
            'entry_name': str,
            'entry_type': str,
            'fragments': List[Fragment],
            'hit_position': HitPosition
        }

        self.attribute_map = {
            'entry_id': 'entry_id',
            'entry_name': 'entry_name',
            'entry_type': 'entry_type',
            'fragments': 'fragments',
            'hit_position': 'hit_position'
        }

        self._entry_id = entry_id
        self._entry_name = entry_name
        self._entry_type = entry_type
        self._fragments = fragments
        self._hit_position = hit_position

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Interpro':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Interpro of this Interpro.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entry_id(self):
        """Gets the entry_id of this Interpro.


        :return: The entry_id of this Interpro.
        :rtype: str
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this Interpro.


        :param entry_id: The entry_id of this Interpro.
        :type entry_id: str
        """

        self._entry_id = entry_id

    @property
    def entry_name(self):
        """Gets the entry_name of this Interpro.


        :return: The entry_name of this Interpro.
        :rtype: str
        """
        return self._entry_name

    @entry_name.setter
    def entry_name(self, entry_name):
        """Sets the entry_name of this Interpro.


        :param entry_name: The entry_name of this Interpro.
        :type entry_name: str
        """

        self._entry_name = entry_name

    @property
    def entry_type(self):
        """Gets the entry_type of this Interpro.


        :return: The entry_type of this Interpro.
        :rtype: str
        """
        return self._entry_type

    @entry_type.setter
    def entry_type(self, entry_type):
        """Sets the entry_type of this Interpro.


        :param entry_type: The entry_type of this Interpro.
        :type entry_type: str
        """

        self._entry_type = entry_type

    @property
    def fragments(self):
        """Gets the fragments of this Interpro.


        :return: The fragments of this Interpro.
        :rtype: List[Fragment]
        """
        return self._fragments

    @fragments.setter
    def fragments(self, fragments):
        """Sets the fragments of this Interpro.


        :param fragments: The fragments of this Interpro.
        :type fragments: List[Fragment]
        """

        self._fragments = fragments

    @property
    def hit_position(self):
        """Gets the hit_position of this Interpro.


        :return: The hit_position of this Interpro.
        :rtype: HitPosition
        """
        return self._hit_position

    @hit_position.setter
    def hit_position(self, hit_position):
        """Sets the hit_position of this Interpro.


        :param hit_position: The hit_position of this Interpro.
        :type hit_position: HitPosition
        """

        self._hit_position = hit_position
