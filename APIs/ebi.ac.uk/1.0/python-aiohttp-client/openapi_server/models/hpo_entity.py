# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gene import Gene
from openapi_server import util


class HPOEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, db_references: List[str]=None, gene: List[Gene]=None, hpo_id: str=None, synonyms: List[str]=None, term_name: str=None):
        """HPOEntity - a model defined in OpenAPI

        :param db_references: The db_references of this HPOEntity.
        :param gene: The gene of this HPOEntity.
        :param hpo_id: The hpo_id of this HPOEntity.
        :param synonyms: The synonyms of this HPOEntity.
        :param term_name: The term_name of this HPOEntity.
        """
        self.openapi_types = {
            'db_references': List[str],
            'gene': List[Gene],
            'hpo_id': str,
            'synonyms': List[str],
            'term_name': str
        }

        self.attribute_map = {
            'db_references': 'db_references',
            'gene': 'gene',
            'hpo_id': 'hpo_id',
            'synonyms': 'synonyms',
            'term_name': 'term_name'
        }

        self._db_references = db_references
        self._gene = gene
        self._hpo_id = hpo_id
        self._synonyms = synonyms
        self._term_name = term_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HPOEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HPOEntity of this HPOEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def db_references(self):
        """Gets the db_references of this HPOEntity.


        :return: The db_references of this HPOEntity.
        :rtype: List[str]
        """
        return self._db_references

    @db_references.setter
    def db_references(self, db_references):
        """Sets the db_references of this HPOEntity.


        :param db_references: The db_references of this HPOEntity.
        :type db_references: List[str]
        """

        self._db_references = db_references

    @property
    def gene(self):
        """Gets the gene of this HPOEntity.


        :return: The gene of this HPOEntity.
        :rtype: List[Gene]
        """
        return self._gene

    @gene.setter
    def gene(self, gene):
        """Sets the gene of this HPOEntity.


        :param gene: The gene of this HPOEntity.
        :type gene: List[Gene]
        """

        self._gene = gene

    @property
    def hpo_id(self):
        """Gets the hpo_id of this HPOEntity.


        :return: The hpo_id of this HPOEntity.
        :rtype: str
        """
        return self._hpo_id

    @hpo_id.setter
    def hpo_id(self, hpo_id):
        """Sets the hpo_id of this HPOEntity.


        :param hpo_id: The hpo_id of this HPOEntity.
        :type hpo_id: str
        """

        self._hpo_id = hpo_id

    @property
    def synonyms(self):
        """Gets the synonyms of this HPOEntity.


        :return: The synonyms of this HPOEntity.
        :rtype: List[str]
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms):
        """Sets the synonyms of this HPOEntity.


        :param synonyms: The synonyms of this HPOEntity.
        :type synonyms: List[str]
        """

        self._synonyms = synonyms

    @property
    def term_name(self):
        """Gets the term_name of this HPOEntity.


        :return: The term_name of this HPOEntity.
        :rtype: str
        """
        return self._term_name

    @term_name.setter
    def term_name(self, term_name):
        """Sets the term_name of this HPOEntity.


        :param term_name: The term_name of this HPOEntity.
        :type term_name: str
        """

        self._term_name = term_name
