# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pathway import Pathway
from openapi_server.models.target import Target
from openapi_server import util


class CrossbarDrug(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alogp: float=None, canonical_smiles: str=None, chembl_id: str=None, full_mwt: float=None, identifier: str=None, inchi_key: str=None, kegg_cid: str=None, molecule_type: str=None, name: str=None, pathway: List[Pathway]=None, pb_structures: List[str]=None, polar_surface_area: float=None, pubchem_cid: str=None, pubchem_sid: str=None, standard_inchi: str=None, targets: List[Target]=None, uniprot_accession: str=None):
        """CrossbarDrug - a model defined in OpenAPI

        :param alogp: The alogp of this CrossbarDrug.
        :param canonical_smiles: The canonical_smiles of this CrossbarDrug.
        :param chembl_id: The chembl_id of this CrossbarDrug.
        :param full_mwt: The full_mwt of this CrossbarDrug.
        :param identifier: The identifier of this CrossbarDrug.
        :param inchi_key: The inchi_key of this CrossbarDrug.
        :param kegg_cid: The kegg_cid of this CrossbarDrug.
        :param molecule_type: The molecule_type of this CrossbarDrug.
        :param name: The name of this CrossbarDrug.
        :param pathway: The pathway of this CrossbarDrug.
        :param pb_structures: The pb_structures of this CrossbarDrug.
        :param polar_surface_area: The polar_surface_area of this CrossbarDrug.
        :param pubchem_cid: The pubchem_cid of this CrossbarDrug.
        :param pubchem_sid: The pubchem_sid of this CrossbarDrug.
        :param standard_inchi: The standard_inchi of this CrossbarDrug.
        :param targets: The targets of this CrossbarDrug.
        :param uniprot_accession: The uniprot_accession of this CrossbarDrug.
        """
        self.openapi_types = {
            'alogp': float,
            'canonical_smiles': str,
            'chembl_id': str,
            'full_mwt': float,
            'identifier': str,
            'inchi_key': str,
            'kegg_cid': str,
            'molecule_type': str,
            'name': str,
            'pathway': List[Pathway],
            'pb_structures': List[str],
            'polar_surface_area': float,
            'pubchem_cid': str,
            'pubchem_sid': str,
            'standard_inchi': str,
            'targets': List[Target],
            'uniprot_accession': str
        }

        self.attribute_map = {
            'alogp': 'alogp',
            'canonical_smiles': 'canonical_smiles',
            'chembl_id': 'chembl_id',
            'full_mwt': 'full_mwt',
            'identifier': 'identifier',
            'inchi_key': 'inchi_key',
            'kegg_cid': 'kegg_cid',
            'molecule_type': 'molecule_type',
            'name': 'name',
            'pathway': 'pathway',
            'pb_structures': 'pb_structures',
            'polar_surface_area': 'polar_surface_area',
            'pubchem_cid': 'pubchem_cid',
            'pubchem_sid': 'pubchem_sid',
            'standard_inchi': 'standard_inchi',
            'targets': 'targets',
            'uniprot_accession': 'uniprot_accession'
        }

        self._alogp = alogp
        self._canonical_smiles = canonical_smiles
        self._chembl_id = chembl_id
        self._full_mwt = full_mwt
        self._identifier = identifier
        self._inchi_key = inchi_key
        self._kegg_cid = kegg_cid
        self._molecule_type = molecule_type
        self._name = name
        self._pathway = pathway
        self._pb_structures = pb_structures
        self._polar_surface_area = polar_surface_area
        self._pubchem_cid = pubchem_cid
        self._pubchem_sid = pubchem_sid
        self._standard_inchi = standard_inchi
        self._targets = targets
        self._uniprot_accession = uniprot_accession

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CrossbarDrug':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CrossbarDrug of this CrossbarDrug.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alogp(self):
        """Gets the alogp of this CrossbarDrug.


        :return: The alogp of this CrossbarDrug.
        :rtype: float
        """
        return self._alogp

    @alogp.setter
    def alogp(self, alogp):
        """Sets the alogp of this CrossbarDrug.


        :param alogp: The alogp of this CrossbarDrug.
        :type alogp: float
        """

        self._alogp = alogp

    @property
    def canonical_smiles(self):
        """Gets the canonical_smiles of this CrossbarDrug.


        :return: The canonical_smiles of this CrossbarDrug.
        :rtype: str
        """
        return self._canonical_smiles

    @canonical_smiles.setter
    def canonical_smiles(self, canonical_smiles):
        """Sets the canonical_smiles of this CrossbarDrug.


        :param canonical_smiles: The canonical_smiles of this CrossbarDrug.
        :type canonical_smiles: str
        """

        self._canonical_smiles = canonical_smiles

    @property
    def chembl_id(self):
        """Gets the chembl_id of this CrossbarDrug.


        :return: The chembl_id of this CrossbarDrug.
        :rtype: str
        """
        return self._chembl_id

    @chembl_id.setter
    def chembl_id(self, chembl_id):
        """Sets the chembl_id of this CrossbarDrug.


        :param chembl_id: The chembl_id of this CrossbarDrug.
        :type chembl_id: str
        """

        self._chembl_id = chembl_id

    @property
    def full_mwt(self):
        """Gets the full_mwt of this CrossbarDrug.


        :return: The full_mwt of this CrossbarDrug.
        :rtype: float
        """
        return self._full_mwt

    @full_mwt.setter
    def full_mwt(self, full_mwt):
        """Sets the full_mwt of this CrossbarDrug.


        :param full_mwt: The full_mwt of this CrossbarDrug.
        :type full_mwt: float
        """

        self._full_mwt = full_mwt

    @property
    def identifier(self):
        """Gets the identifier of this CrossbarDrug.


        :return: The identifier of this CrossbarDrug.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this CrossbarDrug.


        :param identifier: The identifier of this CrossbarDrug.
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def inchi_key(self):
        """Gets the inchi_key of this CrossbarDrug.


        :return: The inchi_key of this CrossbarDrug.
        :rtype: str
        """
        return self._inchi_key

    @inchi_key.setter
    def inchi_key(self, inchi_key):
        """Sets the inchi_key of this CrossbarDrug.


        :param inchi_key: The inchi_key of this CrossbarDrug.
        :type inchi_key: str
        """

        self._inchi_key = inchi_key

    @property
    def kegg_cid(self):
        """Gets the kegg_cid of this CrossbarDrug.


        :return: The kegg_cid of this CrossbarDrug.
        :rtype: str
        """
        return self._kegg_cid

    @kegg_cid.setter
    def kegg_cid(self, kegg_cid):
        """Sets the kegg_cid of this CrossbarDrug.


        :param kegg_cid: The kegg_cid of this CrossbarDrug.
        :type kegg_cid: str
        """

        self._kegg_cid = kegg_cid

    @property
    def molecule_type(self):
        """Gets the molecule_type of this CrossbarDrug.


        :return: The molecule_type of this CrossbarDrug.
        :rtype: str
        """
        return self._molecule_type

    @molecule_type.setter
    def molecule_type(self, molecule_type):
        """Sets the molecule_type of this CrossbarDrug.


        :param molecule_type: The molecule_type of this CrossbarDrug.
        :type molecule_type: str
        """

        self._molecule_type = molecule_type

    @property
    def name(self):
        """Gets the name of this CrossbarDrug.


        :return: The name of this CrossbarDrug.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CrossbarDrug.


        :param name: The name of this CrossbarDrug.
        :type name: str
        """

        self._name = name

    @property
    def pathway(self):
        """Gets the pathway of this CrossbarDrug.


        :return: The pathway of this CrossbarDrug.
        :rtype: List[Pathway]
        """
        return self._pathway

    @pathway.setter
    def pathway(self, pathway):
        """Sets the pathway of this CrossbarDrug.


        :param pathway: The pathway of this CrossbarDrug.
        :type pathway: List[Pathway]
        """

        self._pathway = pathway

    @property
    def pb_structures(self):
        """Gets the pb_structures of this CrossbarDrug.


        :return: The pb_structures of this CrossbarDrug.
        :rtype: List[str]
        """
        return self._pb_structures

    @pb_structures.setter
    def pb_structures(self, pb_structures):
        """Sets the pb_structures of this CrossbarDrug.


        :param pb_structures: The pb_structures of this CrossbarDrug.
        :type pb_structures: List[str]
        """

        self._pb_structures = pb_structures

    @property
    def polar_surface_area(self):
        """Gets the polar_surface_area of this CrossbarDrug.


        :return: The polar_surface_area of this CrossbarDrug.
        :rtype: float
        """
        return self._polar_surface_area

    @polar_surface_area.setter
    def polar_surface_area(self, polar_surface_area):
        """Sets the polar_surface_area of this CrossbarDrug.


        :param polar_surface_area: The polar_surface_area of this CrossbarDrug.
        :type polar_surface_area: float
        """

        self._polar_surface_area = polar_surface_area

    @property
    def pubchem_cid(self):
        """Gets the pubchem_cid of this CrossbarDrug.


        :return: The pubchem_cid of this CrossbarDrug.
        :rtype: str
        """
        return self._pubchem_cid

    @pubchem_cid.setter
    def pubchem_cid(self, pubchem_cid):
        """Sets the pubchem_cid of this CrossbarDrug.


        :param pubchem_cid: The pubchem_cid of this CrossbarDrug.
        :type pubchem_cid: str
        """

        self._pubchem_cid = pubchem_cid

    @property
    def pubchem_sid(self):
        """Gets the pubchem_sid of this CrossbarDrug.


        :return: The pubchem_sid of this CrossbarDrug.
        :rtype: str
        """
        return self._pubchem_sid

    @pubchem_sid.setter
    def pubchem_sid(self, pubchem_sid):
        """Sets the pubchem_sid of this CrossbarDrug.


        :param pubchem_sid: The pubchem_sid of this CrossbarDrug.
        :type pubchem_sid: str
        """

        self._pubchem_sid = pubchem_sid

    @property
    def standard_inchi(self):
        """Gets the standard_inchi of this CrossbarDrug.


        :return: The standard_inchi of this CrossbarDrug.
        :rtype: str
        """
        return self._standard_inchi

    @standard_inchi.setter
    def standard_inchi(self, standard_inchi):
        """Sets the standard_inchi of this CrossbarDrug.


        :param standard_inchi: The standard_inchi of this CrossbarDrug.
        :type standard_inchi: str
        """

        self._standard_inchi = standard_inchi

    @property
    def targets(self):
        """Gets the targets of this CrossbarDrug.


        :return: The targets of this CrossbarDrug.
        :rtype: List[Target]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this CrossbarDrug.


        :param targets: The targets of this CrossbarDrug.
        :type targets: List[Target]
        """

        self._targets = targets

    @property
    def uniprot_accession(self):
        """Gets the uniprot_accession of this CrossbarDrug.


        :return: The uniprot_accession of this CrossbarDrug.
        :rtype: str
        """
        return self._uniprot_accession

    @uniprot_accession.setter
    def uniprot_accession(self, uniprot_accession):
        """Sets the uniprot_accession of this CrossbarDrug.


        :param uniprot_accession: The uniprot_accession of this CrossbarDrug.
        :type uniprot_accession: str
        """

        self._uniprot_accession = uniprot_accession
