# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ensembl import Ensembl
from openapi_server.models.go import Go
from openapi_server.models.interpro import Interpro
from openapi_server.models.kegg import Kegg
from openapi_server.models.omim import Omim
from openapi_server.models.open_targets import OpenTargets
from openapi_server.models.orphanet import Orphanet
from openapi_server.models.pdbe import PDBe
from openapi_server.models.pfam import Pfam
from openapi_server.models.reactome import Reactome
from openapi_server import util


class CrossReferences(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ensembl: List[Ensembl]=None, go: List[Go]=None, interpro: List[Interpro]=None, kegg: List[Kegg]=None, omim: List[Omim]=None, open_targets: List[OpenTargets]=None, orphanet: List[Orphanet]=None, pd_be: List[PDBe]=None, pfam: List[Pfam]=None, reactome: List[Reactome]=None):
        """CrossReferences - a model defined in OpenAPI

        :param ensembl: The ensembl of this CrossReferences.
        :param go: The go of this CrossReferences.
        :param interpro: The interpro of this CrossReferences.
        :param kegg: The kegg of this CrossReferences.
        :param omim: The omim of this CrossReferences.
        :param open_targets: The open_targets of this CrossReferences.
        :param orphanet: The orphanet of this CrossReferences.
        :param pd_be: The pd_be of this CrossReferences.
        :param pfam: The pfam of this CrossReferences.
        :param reactome: The reactome of this CrossReferences.
        """
        self.openapi_types = {
            'ensembl': List[Ensembl],
            'go': List[Go],
            'interpro': List[Interpro],
            'kegg': List[Kegg],
            'omim': List[Omim],
            'open_targets': List[OpenTargets],
            'orphanet': List[Orphanet],
            'pd_be': List[PDBe],
            'pfam': List[Pfam],
            'reactome': List[Reactome]
        }

        self.attribute_map = {
            'ensembl': 'ensembl',
            'go': 'go',
            'interpro': 'interpro',
            'kegg': 'kegg',
            'omim': 'omim',
            'open_targets': 'openTargets',
            'orphanet': 'orphanet',
            'pd_be': 'pdBe',
            'pfam': 'pfam',
            'reactome': 'reactome'
        }

        self._ensembl = ensembl
        self._go = go
        self._interpro = interpro
        self._kegg = kegg
        self._omim = omim
        self._open_targets = open_targets
        self._orphanet = orphanet
        self._pd_be = pd_be
        self._pfam = pfam
        self._reactome = reactome

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CrossReferences':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CrossReferences of this CrossReferences.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ensembl(self):
        """Gets the ensembl of this CrossReferences.


        :return: The ensembl of this CrossReferences.
        :rtype: List[Ensembl]
        """
        return self._ensembl

    @ensembl.setter
    def ensembl(self, ensembl):
        """Sets the ensembl of this CrossReferences.


        :param ensembl: The ensembl of this CrossReferences.
        :type ensembl: List[Ensembl]
        """

        self._ensembl = ensembl

    @property
    def go(self):
        """Gets the go of this CrossReferences.


        :return: The go of this CrossReferences.
        :rtype: List[Go]
        """
        return self._go

    @go.setter
    def go(self, go):
        """Sets the go of this CrossReferences.


        :param go: The go of this CrossReferences.
        :type go: List[Go]
        """

        self._go = go

    @property
    def interpro(self):
        """Gets the interpro of this CrossReferences.


        :return: The interpro of this CrossReferences.
        :rtype: List[Interpro]
        """
        return self._interpro

    @interpro.setter
    def interpro(self, interpro):
        """Sets the interpro of this CrossReferences.


        :param interpro: The interpro of this CrossReferences.
        :type interpro: List[Interpro]
        """

        self._interpro = interpro

    @property
    def kegg(self):
        """Gets the kegg of this CrossReferences.


        :return: The kegg of this CrossReferences.
        :rtype: List[Kegg]
        """
        return self._kegg

    @kegg.setter
    def kegg(self, kegg):
        """Sets the kegg of this CrossReferences.


        :param kegg: The kegg of this CrossReferences.
        :type kegg: List[Kegg]
        """

        self._kegg = kegg

    @property
    def omim(self):
        """Gets the omim of this CrossReferences.


        :return: The omim of this CrossReferences.
        :rtype: List[Omim]
        """
        return self._omim

    @omim.setter
    def omim(self, omim):
        """Sets the omim of this CrossReferences.


        :param omim: The omim of this CrossReferences.
        :type omim: List[Omim]
        """

        self._omim = omim

    @property
    def open_targets(self):
        """Gets the open_targets of this CrossReferences.


        :return: The open_targets of this CrossReferences.
        :rtype: List[OpenTargets]
        """
        return self._open_targets

    @open_targets.setter
    def open_targets(self, open_targets):
        """Sets the open_targets of this CrossReferences.


        :param open_targets: The open_targets of this CrossReferences.
        :type open_targets: List[OpenTargets]
        """

        self._open_targets = open_targets

    @property
    def orphanet(self):
        """Gets the orphanet of this CrossReferences.


        :return: The orphanet of this CrossReferences.
        :rtype: List[Orphanet]
        """
        return self._orphanet

    @orphanet.setter
    def orphanet(self, orphanet):
        """Sets the orphanet of this CrossReferences.


        :param orphanet: The orphanet of this CrossReferences.
        :type orphanet: List[Orphanet]
        """

        self._orphanet = orphanet

    @property
    def pd_be(self):
        """Gets the pd_be of this CrossReferences.


        :return: The pd_be of this CrossReferences.
        :rtype: List[PDBe]
        """
        return self._pd_be

    @pd_be.setter
    def pd_be(self, pd_be):
        """Sets the pd_be of this CrossReferences.


        :param pd_be: The pd_be of this CrossReferences.
        :type pd_be: List[PDBe]
        """

        self._pd_be = pd_be

    @property
    def pfam(self):
        """Gets the pfam of this CrossReferences.


        :return: The pfam of this CrossReferences.
        :rtype: List[Pfam]
        """
        return self._pfam

    @pfam.setter
    def pfam(self, pfam):
        """Sets the pfam of this CrossReferences.


        :param pfam: The pfam of this CrossReferences.
        :type pfam: List[Pfam]
        """

        self._pfam = pfam

    @property
    def reactome(self):
        """Gets the reactome of this CrossReferences.


        :return: The reactome of this CrossReferences.
        :rtype: List[Reactome]
        """
        return self._reactome

    @reactome.setter
    def reactome(self, reactome):
        """Sets the reactome of this CrossReferences.


        :param reactome: The reactome of this CrossReferences.
        :type reactome: List[Reactome]
        """

        self._reactome = reactome
