# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.feature_position import FeaturePosition
from openapi_server.models.variation_association import VariationAssociation
from openapi_server.models.variation_evidence import VariationEvidence
from openapi_server.models.variation_xref import VariationXref
from openapi_server import util


class CrossbarProteinVariation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternative_sequence: str=None, association: List[VariationAssociation]=None, begin: FeaturePosition=None, clinical_significances: str=None, description: str=None, end: FeaturePosition=None, evidences: List[VariationEvidence]=None, ft_id: str=None, somatic_status: int=None, source_type: str=None, wild_type: str=None, xrefs: List[VariationXref]=None):
        """CrossbarProteinVariation - a model defined in OpenAPI

        :param alternative_sequence: The alternative_sequence of this CrossbarProteinVariation.
        :param association: The association of this CrossbarProteinVariation.
        :param begin: The begin of this CrossbarProteinVariation.
        :param clinical_significances: The clinical_significances of this CrossbarProteinVariation.
        :param description: The description of this CrossbarProteinVariation.
        :param end: The end of this CrossbarProteinVariation.
        :param evidences: The evidences of this CrossbarProteinVariation.
        :param ft_id: The ft_id of this CrossbarProteinVariation.
        :param somatic_status: The somatic_status of this CrossbarProteinVariation.
        :param source_type: The source_type of this CrossbarProteinVariation.
        :param wild_type: The wild_type of this CrossbarProteinVariation.
        :param xrefs: The xrefs of this CrossbarProteinVariation.
        """
        self.openapi_types = {
            'alternative_sequence': str,
            'association': List[VariationAssociation],
            'begin': FeaturePosition,
            'clinical_significances': str,
            'description': str,
            'end': FeaturePosition,
            'evidences': List[VariationEvidence],
            'ft_id': str,
            'somatic_status': int,
            'source_type': str,
            'wild_type': str,
            'xrefs': List[VariationXref]
        }

        self.attribute_map = {
            'alternative_sequence': 'alternativeSequence',
            'association': 'association',
            'begin': 'begin',
            'clinical_significances': 'clinicalSignificances',
            'description': 'description',
            'end': 'end',
            'evidences': 'evidences',
            'ft_id': 'ftId',
            'somatic_status': 'somaticStatus',
            'source_type': 'sourceType',
            'wild_type': 'wildType',
            'xrefs': 'xrefs'
        }

        self._alternative_sequence = alternative_sequence
        self._association = association
        self._begin = begin
        self._clinical_significances = clinical_significances
        self._description = description
        self._end = end
        self._evidences = evidences
        self._ft_id = ft_id
        self._somatic_status = somatic_status
        self._source_type = source_type
        self._wild_type = wild_type
        self._xrefs = xrefs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CrossbarProteinVariation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CrossbarProteinVariation of this CrossbarProteinVariation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternative_sequence(self):
        """Gets the alternative_sequence of this CrossbarProteinVariation.


        :return: The alternative_sequence of this CrossbarProteinVariation.
        :rtype: str
        """
        return self._alternative_sequence

    @alternative_sequence.setter
    def alternative_sequence(self, alternative_sequence):
        """Sets the alternative_sequence of this CrossbarProteinVariation.


        :param alternative_sequence: The alternative_sequence of this CrossbarProteinVariation.
        :type alternative_sequence: str
        """

        self._alternative_sequence = alternative_sequence

    @property
    def association(self):
        """Gets the association of this CrossbarProteinVariation.


        :return: The association of this CrossbarProteinVariation.
        :rtype: List[VariationAssociation]
        """
        return self._association

    @association.setter
    def association(self, association):
        """Sets the association of this CrossbarProteinVariation.


        :param association: The association of this CrossbarProteinVariation.
        :type association: List[VariationAssociation]
        """

        self._association = association

    @property
    def begin(self):
        """Gets the begin of this CrossbarProteinVariation.


        :return: The begin of this CrossbarProteinVariation.
        :rtype: FeaturePosition
        """
        return self._begin

    @begin.setter
    def begin(self, begin):
        """Sets the begin of this CrossbarProteinVariation.


        :param begin: The begin of this CrossbarProteinVariation.
        :type begin: FeaturePosition
        """

        self._begin = begin

    @property
    def clinical_significances(self):
        """Gets the clinical_significances of this CrossbarProteinVariation.


        :return: The clinical_significances of this CrossbarProteinVariation.
        :rtype: str
        """
        return self._clinical_significances

    @clinical_significances.setter
    def clinical_significances(self, clinical_significances):
        """Sets the clinical_significances of this CrossbarProteinVariation.


        :param clinical_significances: The clinical_significances of this CrossbarProteinVariation.
        :type clinical_significances: str
        """

        self._clinical_significances = clinical_significances

    @property
    def description(self):
        """Gets the description of this CrossbarProteinVariation.


        :return: The description of this CrossbarProteinVariation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CrossbarProteinVariation.


        :param description: The description of this CrossbarProteinVariation.
        :type description: str
        """

        self._description = description

    @property
    def end(self):
        """Gets the end of this CrossbarProteinVariation.


        :return: The end of this CrossbarProteinVariation.
        :rtype: FeaturePosition
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this CrossbarProteinVariation.


        :param end: The end of this CrossbarProteinVariation.
        :type end: FeaturePosition
        """

        self._end = end

    @property
    def evidences(self):
        """Gets the evidences of this CrossbarProteinVariation.


        :return: The evidences of this CrossbarProteinVariation.
        :rtype: List[VariationEvidence]
        """
        return self._evidences

    @evidences.setter
    def evidences(self, evidences):
        """Sets the evidences of this CrossbarProteinVariation.


        :param evidences: The evidences of this CrossbarProteinVariation.
        :type evidences: List[VariationEvidence]
        """

        self._evidences = evidences

    @property
    def ft_id(self):
        """Gets the ft_id of this CrossbarProteinVariation.


        :return: The ft_id of this CrossbarProteinVariation.
        :rtype: str
        """
        return self._ft_id

    @ft_id.setter
    def ft_id(self, ft_id):
        """Sets the ft_id of this CrossbarProteinVariation.


        :param ft_id: The ft_id of this CrossbarProteinVariation.
        :type ft_id: str
        """

        self._ft_id = ft_id

    @property
    def somatic_status(self):
        """Gets the somatic_status of this CrossbarProteinVariation.


        :return: The somatic_status of this CrossbarProteinVariation.
        :rtype: int
        """
        return self._somatic_status

    @somatic_status.setter
    def somatic_status(self, somatic_status):
        """Sets the somatic_status of this CrossbarProteinVariation.


        :param somatic_status: The somatic_status of this CrossbarProteinVariation.
        :type somatic_status: int
        """

        self._somatic_status = somatic_status

    @property
    def source_type(self):
        """Gets the source_type of this CrossbarProteinVariation.


        :return: The source_type of this CrossbarProteinVariation.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this CrossbarProteinVariation.


        :param source_type: The source_type of this CrossbarProteinVariation.
        :type source_type: str
        """

        self._source_type = source_type

    @property
    def wild_type(self):
        """Gets the wild_type of this CrossbarProteinVariation.


        :return: The wild_type of this CrossbarProteinVariation.
        :rtype: str
        """
        return self._wild_type

    @wild_type.setter
    def wild_type(self, wild_type):
        """Sets the wild_type of this CrossbarProteinVariation.


        :param wild_type: The wild_type of this CrossbarProteinVariation.
        :type wild_type: str
        """

        self._wild_type = wild_type

    @property
    def xrefs(self):
        """Gets the xrefs of this CrossbarProteinVariation.


        :return: The xrefs of this CrossbarProteinVariation.
        :rtype: List[VariationXref]
        """
        return self._xrefs

    @xrefs.setter
    def xrefs(self, xrefs):
        """Sets the xrefs of this CrossbarProteinVariation.


        :param xrefs: The xrefs of this CrossbarProteinVariation.
        :type xrefs: List[VariationXref]
        """

        self._xrefs = xrefs
