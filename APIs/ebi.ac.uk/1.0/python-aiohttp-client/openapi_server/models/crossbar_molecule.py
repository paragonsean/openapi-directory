# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.xref import Xref
from openapi_server import util


class CrossbarMolecule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alogp: float=None, canonical_smiles: str=None, chirality: float=None, full_mwt: float=None, heavy_atoms_count: int=None, inchi_key: str=None, max_phase: int=None, molecular_species: str=None, molecular_type: str=None, molecule_chembl_id: str=None, parent_chembl_id: str=None, pref_name: str=None, prodrug: float=None, standard_inchi: str=None, xrefs: List[Xref]=None):
        """CrossbarMolecule - a model defined in OpenAPI

        :param alogp: The alogp of this CrossbarMolecule.
        :param canonical_smiles: The canonical_smiles of this CrossbarMolecule.
        :param chirality: The chirality of this CrossbarMolecule.
        :param full_mwt: The full_mwt of this CrossbarMolecule.
        :param heavy_atoms_count: The heavy_atoms_count of this CrossbarMolecule.
        :param inchi_key: The inchi_key of this CrossbarMolecule.
        :param max_phase: The max_phase of this CrossbarMolecule.
        :param molecular_species: The molecular_species of this CrossbarMolecule.
        :param molecular_type: The molecular_type of this CrossbarMolecule.
        :param molecule_chembl_id: The molecule_chembl_id of this CrossbarMolecule.
        :param parent_chembl_id: The parent_chembl_id of this CrossbarMolecule.
        :param pref_name: The pref_name of this CrossbarMolecule.
        :param prodrug: The prodrug of this CrossbarMolecule.
        :param standard_inchi: The standard_inchi of this CrossbarMolecule.
        :param xrefs: The xrefs of this CrossbarMolecule.
        """
        self.openapi_types = {
            'alogp': float,
            'canonical_smiles': str,
            'chirality': float,
            'full_mwt': float,
            'heavy_atoms_count': int,
            'inchi_key': str,
            'max_phase': int,
            'molecular_species': str,
            'molecular_type': str,
            'molecule_chembl_id': str,
            'parent_chembl_id': str,
            'pref_name': str,
            'prodrug': float,
            'standard_inchi': str,
            'xrefs': List[Xref]
        }

        self.attribute_map = {
            'alogp': 'alogp',
            'canonical_smiles': 'canonical_smiles',
            'chirality': 'chirality',
            'full_mwt': 'full_mwt',
            'heavy_atoms_count': 'heavy_atoms_count',
            'inchi_key': 'inchi_key',
            'max_phase': 'max_phase',
            'molecular_species': 'molecular_species',
            'molecular_type': 'molecular_type',
            'molecule_chembl_id': 'molecule_chembl_id',
            'parent_chembl_id': 'parent_chembl_id',
            'pref_name': 'pref_name',
            'prodrug': 'prodrug',
            'standard_inchi': 'standard_inchi',
            'xrefs': 'xrefs'
        }

        self._alogp = alogp
        self._canonical_smiles = canonical_smiles
        self._chirality = chirality
        self._full_mwt = full_mwt
        self._heavy_atoms_count = heavy_atoms_count
        self._inchi_key = inchi_key
        self._max_phase = max_phase
        self._molecular_species = molecular_species
        self._molecular_type = molecular_type
        self._molecule_chembl_id = molecule_chembl_id
        self._parent_chembl_id = parent_chembl_id
        self._pref_name = pref_name
        self._prodrug = prodrug
        self._standard_inchi = standard_inchi
        self._xrefs = xrefs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CrossbarMolecule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CrossbarMolecule of this CrossbarMolecule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alogp(self):
        """Gets the alogp of this CrossbarMolecule.


        :return: The alogp of this CrossbarMolecule.
        :rtype: float
        """
        return self._alogp

    @alogp.setter
    def alogp(self, alogp):
        """Sets the alogp of this CrossbarMolecule.


        :param alogp: The alogp of this CrossbarMolecule.
        :type alogp: float
        """

        self._alogp = alogp

    @property
    def canonical_smiles(self):
        """Gets the canonical_smiles of this CrossbarMolecule.


        :return: The canonical_smiles of this CrossbarMolecule.
        :rtype: str
        """
        return self._canonical_smiles

    @canonical_smiles.setter
    def canonical_smiles(self, canonical_smiles):
        """Sets the canonical_smiles of this CrossbarMolecule.


        :param canonical_smiles: The canonical_smiles of this CrossbarMolecule.
        :type canonical_smiles: str
        """

        self._canonical_smiles = canonical_smiles

    @property
    def chirality(self):
        """Gets the chirality of this CrossbarMolecule.


        :return: The chirality of this CrossbarMolecule.
        :rtype: float
        """
        return self._chirality

    @chirality.setter
    def chirality(self, chirality):
        """Sets the chirality of this CrossbarMolecule.


        :param chirality: The chirality of this CrossbarMolecule.
        :type chirality: float
        """

        self._chirality = chirality

    @property
    def full_mwt(self):
        """Gets the full_mwt of this CrossbarMolecule.


        :return: The full_mwt of this CrossbarMolecule.
        :rtype: float
        """
        return self._full_mwt

    @full_mwt.setter
    def full_mwt(self, full_mwt):
        """Sets the full_mwt of this CrossbarMolecule.


        :param full_mwt: The full_mwt of this CrossbarMolecule.
        :type full_mwt: float
        """

        self._full_mwt = full_mwt

    @property
    def heavy_atoms_count(self):
        """Gets the heavy_atoms_count of this CrossbarMolecule.


        :return: The heavy_atoms_count of this CrossbarMolecule.
        :rtype: int
        """
        return self._heavy_atoms_count

    @heavy_atoms_count.setter
    def heavy_atoms_count(self, heavy_atoms_count):
        """Sets the heavy_atoms_count of this CrossbarMolecule.


        :param heavy_atoms_count: The heavy_atoms_count of this CrossbarMolecule.
        :type heavy_atoms_count: int
        """

        self._heavy_atoms_count = heavy_atoms_count

    @property
    def inchi_key(self):
        """Gets the inchi_key of this CrossbarMolecule.


        :return: The inchi_key of this CrossbarMolecule.
        :rtype: str
        """
        return self._inchi_key

    @inchi_key.setter
    def inchi_key(self, inchi_key):
        """Sets the inchi_key of this CrossbarMolecule.


        :param inchi_key: The inchi_key of this CrossbarMolecule.
        :type inchi_key: str
        """

        self._inchi_key = inchi_key

    @property
    def max_phase(self):
        """Gets the max_phase of this CrossbarMolecule.


        :return: The max_phase of this CrossbarMolecule.
        :rtype: int
        """
        return self._max_phase

    @max_phase.setter
    def max_phase(self, max_phase):
        """Sets the max_phase of this CrossbarMolecule.


        :param max_phase: The max_phase of this CrossbarMolecule.
        :type max_phase: int
        """

        self._max_phase = max_phase

    @property
    def molecular_species(self):
        """Gets the molecular_species of this CrossbarMolecule.


        :return: The molecular_species of this CrossbarMolecule.
        :rtype: str
        """
        return self._molecular_species

    @molecular_species.setter
    def molecular_species(self, molecular_species):
        """Sets the molecular_species of this CrossbarMolecule.


        :param molecular_species: The molecular_species of this CrossbarMolecule.
        :type molecular_species: str
        """

        self._molecular_species = molecular_species

    @property
    def molecular_type(self):
        """Gets the molecular_type of this CrossbarMolecule.


        :return: The molecular_type of this CrossbarMolecule.
        :rtype: str
        """
        return self._molecular_type

    @molecular_type.setter
    def molecular_type(self, molecular_type):
        """Sets the molecular_type of this CrossbarMolecule.


        :param molecular_type: The molecular_type of this CrossbarMolecule.
        :type molecular_type: str
        """

        self._molecular_type = molecular_type

    @property
    def molecule_chembl_id(self):
        """Gets the molecule_chembl_id of this CrossbarMolecule.


        :return: The molecule_chembl_id of this CrossbarMolecule.
        :rtype: str
        """
        return self._molecule_chembl_id

    @molecule_chembl_id.setter
    def molecule_chembl_id(self, molecule_chembl_id):
        """Sets the molecule_chembl_id of this CrossbarMolecule.


        :param molecule_chembl_id: The molecule_chembl_id of this CrossbarMolecule.
        :type molecule_chembl_id: str
        """

        self._molecule_chembl_id = molecule_chembl_id

    @property
    def parent_chembl_id(self):
        """Gets the parent_chembl_id of this CrossbarMolecule.


        :return: The parent_chembl_id of this CrossbarMolecule.
        :rtype: str
        """
        return self._parent_chembl_id

    @parent_chembl_id.setter
    def parent_chembl_id(self, parent_chembl_id):
        """Sets the parent_chembl_id of this CrossbarMolecule.


        :param parent_chembl_id: The parent_chembl_id of this CrossbarMolecule.
        :type parent_chembl_id: str
        """

        self._parent_chembl_id = parent_chembl_id

    @property
    def pref_name(self):
        """Gets the pref_name of this CrossbarMolecule.


        :return: The pref_name of this CrossbarMolecule.
        :rtype: str
        """
        return self._pref_name

    @pref_name.setter
    def pref_name(self, pref_name):
        """Sets the pref_name of this CrossbarMolecule.


        :param pref_name: The pref_name of this CrossbarMolecule.
        :type pref_name: str
        """

        self._pref_name = pref_name

    @property
    def prodrug(self):
        """Gets the prodrug of this CrossbarMolecule.


        :return: The prodrug of this CrossbarMolecule.
        :rtype: float
        """
        return self._prodrug

    @prodrug.setter
    def prodrug(self, prodrug):
        """Sets the prodrug of this CrossbarMolecule.


        :param prodrug: The prodrug of this CrossbarMolecule.
        :type prodrug: float
        """

        self._prodrug = prodrug

    @property
    def standard_inchi(self):
        """Gets the standard_inchi of this CrossbarMolecule.


        :return: The standard_inchi of this CrossbarMolecule.
        :rtype: str
        """
        return self._standard_inchi

    @standard_inchi.setter
    def standard_inchi(self, standard_inchi):
        """Sets the standard_inchi of this CrossbarMolecule.


        :param standard_inchi: The standard_inchi of this CrossbarMolecule.
        :type standard_inchi: str
        """

        self._standard_inchi = standard_inchi

    @property
    def xrefs(self):
        """Gets the xrefs of this CrossbarMolecule.


        :return: The xrefs of this CrossbarMolecule.
        :rtype: List[Xref]
        """
        return self._xrefs

    @xrefs.setter
    def xrefs(self, xrefs):
        """Sets the xrefs of this CrossbarMolecule.


        :param xrefs: The xrefs of this CrossbarMolecule.
        :type xrefs: List[Xref]
        """

        self._xrefs = xrefs
