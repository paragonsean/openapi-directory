# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssayData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, standard_type: str=None, standard_units: str=None, standard_value: float=None):
        """AssayData - a model defined in OpenAPI

        :param standard_type: The standard_type of this AssayData.
        :param standard_units: The standard_units of this AssayData.
        :param standard_value: The standard_value of this AssayData.
        """
        self.openapi_types = {
            'standard_type': str,
            'standard_units': str,
            'standard_value': float
        }

        self.attribute_map = {
            'standard_type': 'standard_type',
            'standard_units': 'standard_units',
            'standard_value': 'standard_value'
        }

        self._standard_type = standard_type
        self._standard_units = standard_units
        self._standard_value = standard_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssayData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssayData of this AssayData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def standard_type(self):
        """Gets the standard_type of this AssayData.


        :return: The standard_type of this AssayData.
        :rtype: str
        """
        return self._standard_type

    @standard_type.setter
    def standard_type(self, standard_type):
        """Sets the standard_type of this AssayData.


        :param standard_type: The standard_type of this AssayData.
        :type standard_type: str
        """

        self._standard_type = standard_type

    @property
    def standard_units(self):
        """Gets the standard_units of this AssayData.


        :return: The standard_units of this AssayData.
        :rtype: str
        """
        return self._standard_units

    @standard_units.setter
    def standard_units(self, standard_units):
        """Sets the standard_units of this AssayData.


        :param standard_units: The standard_units of this AssayData.
        :type standard_units: str
        """

        self._standard_units = standard_units

    @property
    def standard_value(self):
        """Gets the standard_value of this AssayData.


        :return: The standard_value of this AssayData.
        :rtype: float
        """
        return self._standard_value

    @standard_value.setter
    def standard_value(self, standard_value):
        """Sets the standard_value of this AssayData.


        :param standard_value: The standard_value of this AssayData.
        :type standard_value: float
        """

        self._standard_value = standard_value
