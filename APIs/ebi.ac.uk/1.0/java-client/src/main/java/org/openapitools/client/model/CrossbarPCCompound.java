/*
 * CROssBAR Data API
 * # About CROssBAR & data **CROssBAR**: Comprehensive Resource of Biomedical Relations with Deep Learning Applications and Knowledge Graph Representations CROssBAR is a comprehensive system that integrates large-scale biomedical data from various resources e.g UniProt, ChEMBL, Drugbank, EFO, HPO, InterPro & PubChem and stores them in a new NoSQL database, enrich these data with deep learning based prediction of relations between numerous biomedical entities, rigorously analyse the enriched data to obtain biologically meaningful modules and display them to the user via easy to interpret, interactive and heterogeneous knowledge graphs. CROssBAR platform exposes a set of 12 endpoints to query data stored in the CROssBAR database. These endpoints help the user to find data of interest using different parameters provided by the API endpoint. For example, https://www.ebi.ac.uk/tools/crossbar/proteins?accession=A0A023GRW5 -> will provide protein information about accession 'A0A023GRW5' including its interactions, functions, cross-references, variations and more. https://www.ebi.ac.uk/tools/crossbar/activities?moleculeChemblId=CHEMBL465983 -> will provide ChEMBL bio-interactions related information including targets and bio-activity measurements associated with molecule chembl id 'CHEMBL465983'  **Knowledge graphs** Another use case of CROssBAR's API endpoints is in building knowledge graphs. These endpoints can be *weaved* together (output from one API endpoint fed as input to another API endpoint) programmatically to link nodes like protein, disease, drugs etc. as nodes of the graph. The endpoints are designed to be independent from each other which allows users the flexibility to drive biological networks from any facet e.g drug-centric, disease-centric, gene-centric etc. Our service for knowledge graph construction is available at https://crossbar.kansil.org. An example for the part of the background queries on the CROssBAR API during the construction of a knowledge graph,  (with the aim of keeping the example simple, we have only included the processes related to pathways, genes/proteins and drugs/compounds) In this example, we would like to find bio-active compounds (with a pChEMBL value threshold of at least 6.0) & drugs targeting all proteins belonging to \"WNT ligand biogenesis and trafficking\" pathway (based on Reactome pathway annotations). This can be achieved by using endpoints listed on this swagger documentation as illustrated in following steps- Find bio-active compounds (with a pChEMBL value threshold of at least 6.0) & drugs targeting all proteins belonging to \"WNT ligand biogenesis and trafficking\" pathway (based on Reactome annotations) This can be achieved by using endpoints listed on [this swagger documentation](https://www.ebi.ac.uk/tools/crossbar/swagger-ui.html) as illustrated in following steps- 1. Get all proteins from “/proteins” API endpoint which have a reactome pathway name equal to \"WNT ligand biogenesis and trafficking\". 2. From the collection of uniprot protein accessions collected from step 1 above, we query “/targets” API endpoint to obtain the ‘target_chembl_id’s of these proteins. 3. From the collection of target_chembl_ids collected from step 2 above, we query “/activities” API endpoint with pChEMBL value >=6, to obtain the ’molecule_chembl_id’s of the molecules that we need.  4. From the collection of uniprot protein accessions collected from step 1 above, we find out Drug names and ids from the “/drugs” API endpoint that targets our proteins. 5. From the collection of ’molecule_chembl_id’s obtained in step3, we query “/molecules” endpoint to get the compounds that are interacting with the genes/proteins belonging to the “WNT ligand biogenesis and trafficking” pathway.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: crossbar_dev@ebi.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CrossbarPCCompound
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:35.639788-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CrossbarPCCompound {
  public static final String SERIALIZED_NAME_ALOGP = "alogp";
  @SerializedName(SERIALIZED_NAME_ALOGP)
  private Double alogp;

  public static final String SERIALIZED_NAME_ATOM_CHIRAL_COUNT = "atom_chiral_count";
  @SerializedName(SERIALIZED_NAME_ATOM_CHIRAL_COUNT)
  private Long atomChiralCount;

  public static final String SERIALIZED_NAME_ATOM_CHIRAL_DEF_COUNT = "atom_chiral_def_count";
  @SerializedName(SERIALIZED_NAME_ATOM_CHIRAL_DEF_COUNT)
  private Long atomChiralDefCount;

  public static final String SERIALIZED_NAME_BOND_CHIRAL_COUNT = "bond_chiral_count";
  @SerializedName(SERIALIZED_NAME_BOND_CHIRAL_COUNT)
  private Long bondChiralCount;

  public static final String SERIALIZED_NAME_BOND_CHIRAL_DEF_COUNT = "bond_chiral_def_count";
  @SerializedName(SERIALIZED_NAME_BOND_CHIRAL_DEF_COUNT)
  private Long bondChiralDefCount;

  public static final String SERIALIZED_NAME_BOND_CHIRAL_UNDEF_COUNT = "bond_chiral_undef_count";
  @SerializedName(SERIALIZED_NAME_BOND_CHIRAL_UNDEF_COUNT)
  private Long bondChiralUndefCount;

  public static final String SERIALIZED_NAME_CANONICAL_SMILES = "canonical_smiles";
  @SerializedName(SERIALIZED_NAME_CANONICAL_SMILES)
  private String canonicalSmiles;

  public static final String SERIALIZED_NAME_CID = "cid";
  @SerializedName(SERIALIZED_NAME_CID)
  private Integer cid;

  public static final String SERIALIZED_NAME_COVALENT_UNIT_COUNT = "covalent_unit_count";
  @SerializedName(SERIALIZED_NAME_COVALENT_UNIT_COUNT)
  private Long covalentUnitCount;

  public static final String SERIALIZED_NAME_FINGER_PRINT = "finger_print";
  @SerializedName(SERIALIZED_NAME_FINGER_PRINT)
  private byte[] fingerPrint;

  public static final String SERIALIZED_NAME_FULL_MWT = "full_mwt";
  @SerializedName(SERIALIZED_NAME_FULL_MWT)
  private Double fullMwt;

  public static final String SERIALIZED_NAME_HEAVY_ATOMS_COUNT = "heavy_atoms_count";
  @SerializedName(SERIALIZED_NAME_HEAVY_ATOMS_COUNT)
  private Long heavyAtomsCount;

  public static final String SERIALIZED_NAME_INCHI_KEY = "inchi_key";
  @SerializedName(SERIALIZED_NAME_INCHI_KEY)
  private String inchiKey;

  public static final String SERIALIZED_NAME_ISOTOPE_ATOM_COUNT = "isotope_atom_count";
  @SerializedName(SERIALIZED_NAME_ISOTOPE_ATOM_COUNT)
  private Long isotopeAtomCount;

  public static final String SERIALIZED_NAME_POLAR_SURFACE_AREA = "polar_surface_area";
  @SerializedName(SERIALIZED_NAME_POLAR_SURFACE_AREA)
  private Double polarSurfaceArea;

  public static final String SERIALIZED_NAME_STANDARD_INCHI = "standard_inchi";
  @SerializedName(SERIALIZED_NAME_STANDARD_INCHI)
  private String standardInchi;

  public static final String SERIALIZED_NAME_TAUTOMERS_COUNT = "tautomers_count";
  @SerializedName(SERIALIZED_NAME_TAUTOMERS_COUNT)
  private Long tautomersCount;

  public CrossbarPCCompound() {
  }

  public CrossbarPCCompound alogp(Double alogp) {
    this.alogp = alogp;
    return this;
  }

  /**
   * Get alogp
   * @return alogp
   */
  @javax.annotation.Nullable
  public Double getAlogp() {
    return alogp;
  }

  public void setAlogp(Double alogp) {
    this.alogp = alogp;
  }


  public CrossbarPCCompound atomChiralCount(Long atomChiralCount) {
    this.atomChiralCount = atomChiralCount;
    return this;
  }

  /**
   * Get atomChiralCount
   * @return atomChiralCount
   */
  @javax.annotation.Nullable
  public Long getAtomChiralCount() {
    return atomChiralCount;
  }

  public void setAtomChiralCount(Long atomChiralCount) {
    this.atomChiralCount = atomChiralCount;
  }


  public CrossbarPCCompound atomChiralDefCount(Long atomChiralDefCount) {
    this.atomChiralDefCount = atomChiralDefCount;
    return this;
  }

  /**
   * Get atomChiralDefCount
   * @return atomChiralDefCount
   */
  @javax.annotation.Nullable
  public Long getAtomChiralDefCount() {
    return atomChiralDefCount;
  }

  public void setAtomChiralDefCount(Long atomChiralDefCount) {
    this.atomChiralDefCount = atomChiralDefCount;
  }


  public CrossbarPCCompound bondChiralCount(Long bondChiralCount) {
    this.bondChiralCount = bondChiralCount;
    return this;
  }

  /**
   * Get bondChiralCount
   * @return bondChiralCount
   */
  @javax.annotation.Nullable
  public Long getBondChiralCount() {
    return bondChiralCount;
  }

  public void setBondChiralCount(Long bondChiralCount) {
    this.bondChiralCount = bondChiralCount;
  }


  public CrossbarPCCompound bondChiralDefCount(Long bondChiralDefCount) {
    this.bondChiralDefCount = bondChiralDefCount;
    return this;
  }

  /**
   * Get bondChiralDefCount
   * @return bondChiralDefCount
   */
  @javax.annotation.Nullable
  public Long getBondChiralDefCount() {
    return bondChiralDefCount;
  }

  public void setBondChiralDefCount(Long bondChiralDefCount) {
    this.bondChiralDefCount = bondChiralDefCount;
  }


  public CrossbarPCCompound bondChiralUndefCount(Long bondChiralUndefCount) {
    this.bondChiralUndefCount = bondChiralUndefCount;
    return this;
  }

  /**
   * Get bondChiralUndefCount
   * @return bondChiralUndefCount
   */
  @javax.annotation.Nullable
  public Long getBondChiralUndefCount() {
    return bondChiralUndefCount;
  }

  public void setBondChiralUndefCount(Long bondChiralUndefCount) {
    this.bondChiralUndefCount = bondChiralUndefCount;
  }


  public CrossbarPCCompound canonicalSmiles(String canonicalSmiles) {
    this.canonicalSmiles = canonicalSmiles;
    return this;
  }

  /**
   * Get canonicalSmiles
   * @return canonicalSmiles
   */
  @javax.annotation.Nullable
  public String getCanonicalSmiles() {
    return canonicalSmiles;
  }

  public void setCanonicalSmiles(String canonicalSmiles) {
    this.canonicalSmiles = canonicalSmiles;
  }


  public CrossbarPCCompound cid(Integer cid) {
    this.cid = cid;
    return this;
  }

  /**
   * Get cid
   * @return cid
   */
  @javax.annotation.Nullable
  public Integer getCid() {
    return cid;
  }

  public void setCid(Integer cid) {
    this.cid = cid;
  }


  public CrossbarPCCompound covalentUnitCount(Long covalentUnitCount) {
    this.covalentUnitCount = covalentUnitCount;
    return this;
  }

  /**
   * Get covalentUnitCount
   * @return covalentUnitCount
   */
  @javax.annotation.Nullable
  public Long getCovalentUnitCount() {
    return covalentUnitCount;
  }

  public void setCovalentUnitCount(Long covalentUnitCount) {
    this.covalentUnitCount = covalentUnitCount;
  }


  public CrossbarPCCompound fingerPrint(byte[] fingerPrint) {
    this.fingerPrint = fingerPrint;
    return this;
  }

  /**
   * Get fingerPrint
   * @return fingerPrint
   */
  @javax.annotation.Nullable
  public byte[] getFingerPrint() {
    return fingerPrint;
  }

  public void setFingerPrint(byte[] fingerPrint) {
    this.fingerPrint = fingerPrint;
  }


  public CrossbarPCCompound fullMwt(Double fullMwt) {
    this.fullMwt = fullMwt;
    return this;
  }

  /**
   * Get fullMwt
   * @return fullMwt
   */
  @javax.annotation.Nullable
  public Double getFullMwt() {
    return fullMwt;
  }

  public void setFullMwt(Double fullMwt) {
    this.fullMwt = fullMwt;
  }


  public CrossbarPCCompound heavyAtomsCount(Long heavyAtomsCount) {
    this.heavyAtomsCount = heavyAtomsCount;
    return this;
  }

  /**
   * Get heavyAtomsCount
   * @return heavyAtomsCount
   */
  @javax.annotation.Nullable
  public Long getHeavyAtomsCount() {
    return heavyAtomsCount;
  }

  public void setHeavyAtomsCount(Long heavyAtomsCount) {
    this.heavyAtomsCount = heavyAtomsCount;
  }


  public CrossbarPCCompound inchiKey(String inchiKey) {
    this.inchiKey = inchiKey;
    return this;
  }

  /**
   * Get inchiKey
   * @return inchiKey
   */
  @javax.annotation.Nullable
  public String getInchiKey() {
    return inchiKey;
  }

  public void setInchiKey(String inchiKey) {
    this.inchiKey = inchiKey;
  }


  public CrossbarPCCompound isotopeAtomCount(Long isotopeAtomCount) {
    this.isotopeAtomCount = isotopeAtomCount;
    return this;
  }

  /**
   * Get isotopeAtomCount
   * @return isotopeAtomCount
   */
  @javax.annotation.Nullable
  public Long getIsotopeAtomCount() {
    return isotopeAtomCount;
  }

  public void setIsotopeAtomCount(Long isotopeAtomCount) {
    this.isotopeAtomCount = isotopeAtomCount;
  }


  public CrossbarPCCompound polarSurfaceArea(Double polarSurfaceArea) {
    this.polarSurfaceArea = polarSurfaceArea;
    return this;
  }

  /**
   * Get polarSurfaceArea
   * @return polarSurfaceArea
   */
  @javax.annotation.Nullable
  public Double getPolarSurfaceArea() {
    return polarSurfaceArea;
  }

  public void setPolarSurfaceArea(Double polarSurfaceArea) {
    this.polarSurfaceArea = polarSurfaceArea;
  }


  public CrossbarPCCompound standardInchi(String standardInchi) {
    this.standardInchi = standardInchi;
    return this;
  }

  /**
   * Get standardInchi
   * @return standardInchi
   */
  @javax.annotation.Nullable
  public String getStandardInchi() {
    return standardInchi;
  }

  public void setStandardInchi(String standardInchi) {
    this.standardInchi = standardInchi;
  }


  public CrossbarPCCompound tautomersCount(Long tautomersCount) {
    this.tautomersCount = tautomersCount;
    return this;
  }

  /**
   * Get tautomersCount
   * @return tautomersCount
   */
  @javax.annotation.Nullable
  public Long getTautomersCount() {
    return tautomersCount;
  }

  public void setTautomersCount(Long tautomersCount) {
    this.tautomersCount = tautomersCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CrossbarPCCompound crossbarPCCompound = (CrossbarPCCompound) o;
    return Objects.equals(this.alogp, crossbarPCCompound.alogp) &&
        Objects.equals(this.atomChiralCount, crossbarPCCompound.atomChiralCount) &&
        Objects.equals(this.atomChiralDefCount, crossbarPCCompound.atomChiralDefCount) &&
        Objects.equals(this.bondChiralCount, crossbarPCCompound.bondChiralCount) &&
        Objects.equals(this.bondChiralDefCount, crossbarPCCompound.bondChiralDefCount) &&
        Objects.equals(this.bondChiralUndefCount, crossbarPCCompound.bondChiralUndefCount) &&
        Objects.equals(this.canonicalSmiles, crossbarPCCompound.canonicalSmiles) &&
        Objects.equals(this.cid, crossbarPCCompound.cid) &&
        Objects.equals(this.covalentUnitCount, crossbarPCCompound.covalentUnitCount) &&
        Arrays.equals(this.fingerPrint, crossbarPCCompound.fingerPrint) &&
        Objects.equals(this.fullMwt, crossbarPCCompound.fullMwt) &&
        Objects.equals(this.heavyAtomsCount, crossbarPCCompound.heavyAtomsCount) &&
        Objects.equals(this.inchiKey, crossbarPCCompound.inchiKey) &&
        Objects.equals(this.isotopeAtomCount, crossbarPCCompound.isotopeAtomCount) &&
        Objects.equals(this.polarSurfaceArea, crossbarPCCompound.polarSurfaceArea) &&
        Objects.equals(this.standardInchi, crossbarPCCompound.standardInchi) &&
        Objects.equals(this.tautomersCount, crossbarPCCompound.tautomersCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alogp, atomChiralCount, atomChiralDefCount, bondChiralCount, bondChiralDefCount, bondChiralUndefCount, canonicalSmiles, cid, covalentUnitCount, Arrays.hashCode(fingerPrint), fullMwt, heavyAtomsCount, inchiKey, isotopeAtomCount, polarSurfaceArea, standardInchi, tautomersCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CrossbarPCCompound {\n");
    sb.append("    alogp: ").append(toIndentedString(alogp)).append("\n");
    sb.append("    atomChiralCount: ").append(toIndentedString(atomChiralCount)).append("\n");
    sb.append("    atomChiralDefCount: ").append(toIndentedString(atomChiralDefCount)).append("\n");
    sb.append("    bondChiralCount: ").append(toIndentedString(bondChiralCount)).append("\n");
    sb.append("    bondChiralDefCount: ").append(toIndentedString(bondChiralDefCount)).append("\n");
    sb.append("    bondChiralUndefCount: ").append(toIndentedString(bondChiralUndefCount)).append("\n");
    sb.append("    canonicalSmiles: ").append(toIndentedString(canonicalSmiles)).append("\n");
    sb.append("    cid: ").append(toIndentedString(cid)).append("\n");
    sb.append("    covalentUnitCount: ").append(toIndentedString(covalentUnitCount)).append("\n");
    sb.append("    fingerPrint: ").append(toIndentedString(fingerPrint)).append("\n");
    sb.append("    fullMwt: ").append(toIndentedString(fullMwt)).append("\n");
    sb.append("    heavyAtomsCount: ").append(toIndentedString(heavyAtomsCount)).append("\n");
    sb.append("    inchiKey: ").append(toIndentedString(inchiKey)).append("\n");
    sb.append("    isotopeAtomCount: ").append(toIndentedString(isotopeAtomCount)).append("\n");
    sb.append("    polarSurfaceArea: ").append(toIndentedString(polarSurfaceArea)).append("\n");
    sb.append("    standardInchi: ").append(toIndentedString(standardInchi)).append("\n");
    sb.append("    tautomersCount: ").append(toIndentedString(tautomersCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alogp");
    openapiFields.add("atom_chiral_count");
    openapiFields.add("atom_chiral_def_count");
    openapiFields.add("bond_chiral_count");
    openapiFields.add("bond_chiral_def_count");
    openapiFields.add("bond_chiral_undef_count");
    openapiFields.add("canonical_smiles");
    openapiFields.add("cid");
    openapiFields.add("covalent_unit_count");
    openapiFields.add("finger_print");
    openapiFields.add("full_mwt");
    openapiFields.add("heavy_atoms_count");
    openapiFields.add("inchi_key");
    openapiFields.add("isotope_atom_count");
    openapiFields.add("polar_surface_area");
    openapiFields.add("standard_inchi");
    openapiFields.add("tautomers_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CrossbarPCCompound
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CrossbarPCCompound.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CrossbarPCCompound is not found in the empty JSON string", CrossbarPCCompound.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CrossbarPCCompound.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CrossbarPCCompound` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("canonical_smiles") != null && !jsonObj.get("canonical_smiles").isJsonNull()) && !jsonObj.get("canonical_smiles").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `canonical_smiles` to be a primitive type in the JSON string but got `%s`", jsonObj.get("canonical_smiles").toString()));
      }
      if ((jsonObj.get("inchi_key") != null && !jsonObj.get("inchi_key").isJsonNull()) && !jsonObj.get("inchi_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inchi_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inchi_key").toString()));
      }
      if ((jsonObj.get("standard_inchi") != null && !jsonObj.get("standard_inchi").isJsonNull()) && !jsonObj.get("standard_inchi").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `standard_inchi` to be a primitive type in the JSON string but got `%s`", jsonObj.get("standard_inchi").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CrossbarPCCompound.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CrossbarPCCompound' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CrossbarPCCompound> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CrossbarPCCompound.class));

       return (TypeAdapter<T>) new TypeAdapter<CrossbarPCCompound>() {
           @Override
           public void write(JsonWriter out, CrossbarPCCompound value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CrossbarPCCompound read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CrossbarPCCompound given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CrossbarPCCompound
   * @throws IOException if the JSON string is invalid with respect to CrossbarPCCompound
   */
  public static CrossbarPCCompound fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CrossbarPCCompound.class);
  }

  /**
   * Convert an instance of CrossbarPCCompound to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

