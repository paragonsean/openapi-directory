/*
 * CROssBAR Data API
 * # About CROssBAR & data **CROssBAR**: Comprehensive Resource of Biomedical Relations with Deep Learning Applications and Knowledge Graph Representations CROssBAR is a comprehensive system that integrates large-scale biomedical data from various resources e.g UniProt, ChEMBL, Drugbank, EFO, HPO, InterPro & PubChem and stores them in a new NoSQL database, enrich these data with deep learning based prediction of relations between numerous biomedical entities, rigorously analyse the enriched data to obtain biologically meaningful modules and display them to the user via easy to interpret, interactive and heterogeneous knowledge graphs. CROssBAR platform exposes a set of 12 endpoints to query data stored in the CROssBAR database. These endpoints help the user to find data of interest using different parameters provided by the API endpoint. For example, https://www.ebi.ac.uk/tools/crossbar/proteins?accession=A0A023GRW5 -> will provide protein information about accession 'A0A023GRW5' including its interactions, functions, cross-references, variations and more. https://www.ebi.ac.uk/tools/crossbar/activities?moleculeChemblId=CHEMBL465983 -> will provide ChEMBL bio-interactions related information including targets and bio-activity measurements associated with molecule chembl id 'CHEMBL465983'  **Knowledge graphs** Another use case of CROssBAR's API endpoints is in building knowledge graphs. These endpoints can be *weaved* together (output from one API endpoint fed as input to another API endpoint) programmatically to link nodes like protein, disease, drugs etc. as nodes of the graph. The endpoints are designed to be independent from each other which allows users the flexibility to drive biological networks from any facet e.g drug-centric, disease-centric, gene-centric etc. Our service for knowledge graph construction is available at https://crossbar.kansil.org. An example for the part of the background queries on the CROssBAR API during the construction of a knowledge graph,  (with the aim of keeping the example simple, we have only included the processes related to pathways, genes/proteins and drugs/compounds) In this example, we would like to find bio-active compounds (with a pChEMBL value threshold of at least 6.0) & drugs targeting all proteins belonging to \"WNT ligand biogenesis and trafficking\" pathway (based on Reactome pathway annotations). This can be achieved by using endpoints listed on this swagger documentation as illustrated in following steps- Find bio-active compounds (with a pChEMBL value threshold of at least 6.0) & drugs targeting all proteins belonging to \"WNT ligand biogenesis and trafficking\" pathway (based on Reactome annotations) This can be achieved by using endpoints listed on [this swagger documentation](https://www.ebi.ac.uk/tools/crossbar/swagger-ui.html) as illustrated in following steps- 1. Get all proteins from “/proteins” API endpoint which have a reactome pathway name equal to \"WNT ligand biogenesis and trafficking\". 2. From the collection of uniprot protein accessions collected from step 1 above, we query “/targets” API endpoint to obtain the ‘target_chembl_id’s of these proteins. 3. From the collection of target_chembl_ids collected from step 2 above, we query “/activities” API endpoint with pChEMBL value >=6, to obtain the ’molecule_chembl_id’s of the molecules that we need.  4. From the collection of uniprot protein accessions collected from step 1 above, we find out Drug names and ids from the “/drugs” API endpoint that targets our proteins. 5. From the collection of ’molecule_chembl_id’s obtained in step3, we query “/molecules” endpoint to get the compounds that are interacting with the genes/proteins belonging to the “WNT ligand biogenesis and trafficking” pathway.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: crossbar_dev@ebi.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Pathway;
import org.openapitools.client.model.Target;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CrossbarDrug
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:35.639788-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CrossbarDrug {
  public static final String SERIALIZED_NAME_ALOGP = "alogp";
  @SerializedName(SERIALIZED_NAME_ALOGP)
  private Double alogp;

  public static final String SERIALIZED_NAME_CANONICAL_SMILES = "canonical_smiles";
  @SerializedName(SERIALIZED_NAME_CANONICAL_SMILES)
  private String canonicalSmiles;

  public static final String SERIALIZED_NAME_CHEMBL_ID = "chembl_id";
  @SerializedName(SERIALIZED_NAME_CHEMBL_ID)
  private String chemblId;

  public static final String SERIALIZED_NAME_FULL_MWT = "full_mwt";
  @SerializedName(SERIALIZED_NAME_FULL_MWT)
  private Double fullMwt;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public static final String SERIALIZED_NAME_INCHI_KEY = "inchi_key";
  @SerializedName(SERIALIZED_NAME_INCHI_KEY)
  private String inchiKey;

  public static final String SERIALIZED_NAME_KEGG_CID = "kegg_cid";
  @SerializedName(SERIALIZED_NAME_KEGG_CID)
  private String keggCid;

  public static final String SERIALIZED_NAME_MOLECULE_TYPE = "molecule_type";
  @SerializedName(SERIALIZED_NAME_MOLECULE_TYPE)
  private String moleculeType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATHWAY = "pathway";
  @SerializedName(SERIALIZED_NAME_PATHWAY)
  private List<Pathway> pathway = new ArrayList<>();

  public static final String SERIALIZED_NAME_PB_STRUCTURES = "pb_structures";
  @SerializedName(SERIALIZED_NAME_PB_STRUCTURES)
  private List<String> pbStructures = new ArrayList<>();

  public static final String SERIALIZED_NAME_POLAR_SURFACE_AREA = "polar_surface_area";
  @SerializedName(SERIALIZED_NAME_POLAR_SURFACE_AREA)
  private Double polarSurfaceArea;

  public static final String SERIALIZED_NAME_PUBCHEM_CID = "pubchem_cid";
  @SerializedName(SERIALIZED_NAME_PUBCHEM_CID)
  private String pubchemCid;

  public static final String SERIALIZED_NAME_PUBCHEM_SID = "pubchem_sid";
  @SerializedName(SERIALIZED_NAME_PUBCHEM_SID)
  private String pubchemSid;

  public static final String SERIALIZED_NAME_STANDARD_INCHI = "standard_inchi";
  @SerializedName(SERIALIZED_NAME_STANDARD_INCHI)
  private String standardInchi;

  public static final String SERIALIZED_NAME_TARGETS = "targets";
  @SerializedName(SERIALIZED_NAME_TARGETS)
  private List<Target> targets = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNIPROT_ACCESSION = "uniprot_accession";
  @SerializedName(SERIALIZED_NAME_UNIPROT_ACCESSION)
  private String uniprotAccession;

  public CrossbarDrug() {
  }

  public CrossbarDrug alogp(Double alogp) {
    this.alogp = alogp;
    return this;
  }

  /**
   * Get alogp
   * @return alogp
   */
  @javax.annotation.Nullable
  public Double getAlogp() {
    return alogp;
  }

  public void setAlogp(Double alogp) {
    this.alogp = alogp;
  }


  public CrossbarDrug canonicalSmiles(String canonicalSmiles) {
    this.canonicalSmiles = canonicalSmiles;
    return this;
  }

  /**
   * Get canonicalSmiles
   * @return canonicalSmiles
   */
  @javax.annotation.Nullable
  public String getCanonicalSmiles() {
    return canonicalSmiles;
  }

  public void setCanonicalSmiles(String canonicalSmiles) {
    this.canonicalSmiles = canonicalSmiles;
  }


  public CrossbarDrug chemblId(String chemblId) {
    this.chemblId = chemblId;
    return this;
  }

  /**
   * Get chemblId
   * @return chemblId
   */
  @javax.annotation.Nullable
  public String getChemblId() {
    return chemblId;
  }

  public void setChemblId(String chemblId) {
    this.chemblId = chemblId;
  }


  public CrossbarDrug fullMwt(Double fullMwt) {
    this.fullMwt = fullMwt;
    return this;
  }

  /**
   * Get fullMwt
   * @return fullMwt
   */
  @javax.annotation.Nullable
  public Double getFullMwt() {
    return fullMwt;
  }

  public void setFullMwt(Double fullMwt) {
    this.fullMwt = fullMwt;
  }


  public CrossbarDrug identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * Get identifier
   * @return identifier
   */
  @javax.annotation.Nullable
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public CrossbarDrug inchiKey(String inchiKey) {
    this.inchiKey = inchiKey;
    return this;
  }

  /**
   * Get inchiKey
   * @return inchiKey
   */
  @javax.annotation.Nullable
  public String getInchiKey() {
    return inchiKey;
  }

  public void setInchiKey(String inchiKey) {
    this.inchiKey = inchiKey;
  }


  public CrossbarDrug keggCid(String keggCid) {
    this.keggCid = keggCid;
    return this;
  }

  /**
   * Get keggCid
   * @return keggCid
   */
  @javax.annotation.Nullable
  public String getKeggCid() {
    return keggCid;
  }

  public void setKeggCid(String keggCid) {
    this.keggCid = keggCid;
  }


  public CrossbarDrug moleculeType(String moleculeType) {
    this.moleculeType = moleculeType;
    return this;
  }

  /**
   * Get moleculeType
   * @return moleculeType
   */
  @javax.annotation.Nullable
  public String getMoleculeType() {
    return moleculeType;
  }

  public void setMoleculeType(String moleculeType) {
    this.moleculeType = moleculeType;
  }


  public CrossbarDrug name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CrossbarDrug pathway(List<Pathway> pathway) {
    this.pathway = pathway;
    return this;
  }

  public CrossbarDrug addPathwayItem(Pathway pathwayItem) {
    if (this.pathway == null) {
      this.pathway = new ArrayList<>();
    }
    this.pathway.add(pathwayItem);
    return this;
  }

  /**
   * Get pathway
   * @return pathway
   */
  @javax.annotation.Nullable
  public List<Pathway> getPathway() {
    return pathway;
  }

  public void setPathway(List<Pathway> pathway) {
    this.pathway = pathway;
  }


  public CrossbarDrug pbStructures(List<String> pbStructures) {
    this.pbStructures = pbStructures;
    return this;
  }

  public CrossbarDrug addPbStructuresItem(String pbStructuresItem) {
    if (this.pbStructures == null) {
      this.pbStructures = new ArrayList<>();
    }
    this.pbStructures.add(pbStructuresItem);
    return this;
  }

  /**
   * Get pbStructures
   * @return pbStructures
   */
  @javax.annotation.Nullable
  public List<String> getPbStructures() {
    return pbStructures;
  }

  public void setPbStructures(List<String> pbStructures) {
    this.pbStructures = pbStructures;
  }


  public CrossbarDrug polarSurfaceArea(Double polarSurfaceArea) {
    this.polarSurfaceArea = polarSurfaceArea;
    return this;
  }

  /**
   * Get polarSurfaceArea
   * @return polarSurfaceArea
   */
  @javax.annotation.Nullable
  public Double getPolarSurfaceArea() {
    return polarSurfaceArea;
  }

  public void setPolarSurfaceArea(Double polarSurfaceArea) {
    this.polarSurfaceArea = polarSurfaceArea;
  }


  public CrossbarDrug pubchemCid(String pubchemCid) {
    this.pubchemCid = pubchemCid;
    return this;
  }

  /**
   * Get pubchemCid
   * @return pubchemCid
   */
  @javax.annotation.Nullable
  public String getPubchemCid() {
    return pubchemCid;
  }

  public void setPubchemCid(String pubchemCid) {
    this.pubchemCid = pubchemCid;
  }


  public CrossbarDrug pubchemSid(String pubchemSid) {
    this.pubchemSid = pubchemSid;
    return this;
  }

  /**
   * Get pubchemSid
   * @return pubchemSid
   */
  @javax.annotation.Nullable
  public String getPubchemSid() {
    return pubchemSid;
  }

  public void setPubchemSid(String pubchemSid) {
    this.pubchemSid = pubchemSid;
  }


  public CrossbarDrug standardInchi(String standardInchi) {
    this.standardInchi = standardInchi;
    return this;
  }

  /**
   * Get standardInchi
   * @return standardInchi
   */
  @javax.annotation.Nullable
  public String getStandardInchi() {
    return standardInchi;
  }

  public void setStandardInchi(String standardInchi) {
    this.standardInchi = standardInchi;
  }


  public CrossbarDrug targets(List<Target> targets) {
    this.targets = targets;
    return this;
  }

  public CrossbarDrug addTargetsItem(Target targetsItem) {
    if (this.targets == null) {
      this.targets = new ArrayList<>();
    }
    this.targets.add(targetsItem);
    return this;
  }

  /**
   * Get targets
   * @return targets
   */
  @javax.annotation.Nullable
  public List<Target> getTargets() {
    return targets;
  }

  public void setTargets(List<Target> targets) {
    this.targets = targets;
  }


  public CrossbarDrug uniprotAccession(String uniprotAccession) {
    this.uniprotAccession = uniprotAccession;
    return this;
  }

  /**
   * Get uniprotAccession
   * @return uniprotAccession
   */
  @javax.annotation.Nullable
  public String getUniprotAccession() {
    return uniprotAccession;
  }

  public void setUniprotAccession(String uniprotAccession) {
    this.uniprotAccession = uniprotAccession;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CrossbarDrug crossbarDrug = (CrossbarDrug) o;
    return Objects.equals(this.alogp, crossbarDrug.alogp) &&
        Objects.equals(this.canonicalSmiles, crossbarDrug.canonicalSmiles) &&
        Objects.equals(this.chemblId, crossbarDrug.chemblId) &&
        Objects.equals(this.fullMwt, crossbarDrug.fullMwt) &&
        Objects.equals(this.identifier, crossbarDrug.identifier) &&
        Objects.equals(this.inchiKey, crossbarDrug.inchiKey) &&
        Objects.equals(this.keggCid, crossbarDrug.keggCid) &&
        Objects.equals(this.moleculeType, crossbarDrug.moleculeType) &&
        Objects.equals(this.name, crossbarDrug.name) &&
        Objects.equals(this.pathway, crossbarDrug.pathway) &&
        Objects.equals(this.pbStructures, crossbarDrug.pbStructures) &&
        Objects.equals(this.polarSurfaceArea, crossbarDrug.polarSurfaceArea) &&
        Objects.equals(this.pubchemCid, crossbarDrug.pubchemCid) &&
        Objects.equals(this.pubchemSid, crossbarDrug.pubchemSid) &&
        Objects.equals(this.standardInchi, crossbarDrug.standardInchi) &&
        Objects.equals(this.targets, crossbarDrug.targets) &&
        Objects.equals(this.uniprotAccession, crossbarDrug.uniprotAccession);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alogp, canonicalSmiles, chemblId, fullMwt, identifier, inchiKey, keggCid, moleculeType, name, pathway, pbStructures, polarSurfaceArea, pubchemCid, pubchemSid, standardInchi, targets, uniprotAccession);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CrossbarDrug {\n");
    sb.append("    alogp: ").append(toIndentedString(alogp)).append("\n");
    sb.append("    canonicalSmiles: ").append(toIndentedString(canonicalSmiles)).append("\n");
    sb.append("    chemblId: ").append(toIndentedString(chemblId)).append("\n");
    sb.append("    fullMwt: ").append(toIndentedString(fullMwt)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    inchiKey: ").append(toIndentedString(inchiKey)).append("\n");
    sb.append("    keggCid: ").append(toIndentedString(keggCid)).append("\n");
    sb.append("    moleculeType: ").append(toIndentedString(moleculeType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pathway: ").append(toIndentedString(pathway)).append("\n");
    sb.append("    pbStructures: ").append(toIndentedString(pbStructures)).append("\n");
    sb.append("    polarSurfaceArea: ").append(toIndentedString(polarSurfaceArea)).append("\n");
    sb.append("    pubchemCid: ").append(toIndentedString(pubchemCid)).append("\n");
    sb.append("    pubchemSid: ").append(toIndentedString(pubchemSid)).append("\n");
    sb.append("    standardInchi: ").append(toIndentedString(standardInchi)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("    uniprotAccession: ").append(toIndentedString(uniprotAccession)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alogp");
    openapiFields.add("canonical_smiles");
    openapiFields.add("chembl_id");
    openapiFields.add("full_mwt");
    openapiFields.add("identifier");
    openapiFields.add("inchi_key");
    openapiFields.add("kegg_cid");
    openapiFields.add("molecule_type");
    openapiFields.add("name");
    openapiFields.add("pathway");
    openapiFields.add("pb_structures");
    openapiFields.add("polar_surface_area");
    openapiFields.add("pubchem_cid");
    openapiFields.add("pubchem_sid");
    openapiFields.add("standard_inchi");
    openapiFields.add("targets");
    openapiFields.add("uniprot_accession");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CrossbarDrug
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CrossbarDrug.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CrossbarDrug is not found in the empty JSON string", CrossbarDrug.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CrossbarDrug.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CrossbarDrug` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("canonical_smiles") != null && !jsonObj.get("canonical_smiles").isJsonNull()) && !jsonObj.get("canonical_smiles").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `canonical_smiles` to be a primitive type in the JSON string but got `%s`", jsonObj.get("canonical_smiles").toString()));
      }
      if ((jsonObj.get("chembl_id") != null && !jsonObj.get("chembl_id").isJsonNull()) && !jsonObj.get("chembl_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chembl_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chembl_id").toString()));
      }
      if ((jsonObj.get("identifier") != null && !jsonObj.get("identifier").isJsonNull()) && !jsonObj.get("identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifier").toString()));
      }
      if ((jsonObj.get("inchi_key") != null && !jsonObj.get("inchi_key").isJsonNull()) && !jsonObj.get("inchi_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inchi_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inchi_key").toString()));
      }
      if ((jsonObj.get("kegg_cid") != null && !jsonObj.get("kegg_cid").isJsonNull()) && !jsonObj.get("kegg_cid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kegg_cid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kegg_cid").toString()));
      }
      if ((jsonObj.get("molecule_type") != null && !jsonObj.get("molecule_type").isJsonNull()) && !jsonObj.get("molecule_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `molecule_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("molecule_type").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("pathway") != null && !jsonObj.get("pathway").isJsonNull()) {
        JsonArray jsonArraypathway = jsonObj.getAsJsonArray("pathway");
        if (jsonArraypathway != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pathway").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pathway` to be an array in the JSON string but got `%s`", jsonObj.get("pathway").toString()));
          }

          // validate the optional field `pathway` (array)
          for (int i = 0; i < jsonArraypathway.size(); i++) {
            Pathway.validateJsonElement(jsonArraypathway.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pb_structures") != null && !jsonObj.get("pb_structures").isJsonNull() && !jsonObj.get("pb_structures").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pb_structures` to be an array in the JSON string but got `%s`", jsonObj.get("pb_structures").toString()));
      }
      if ((jsonObj.get("pubchem_cid") != null && !jsonObj.get("pubchem_cid").isJsonNull()) && !jsonObj.get("pubchem_cid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pubchem_cid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pubchem_cid").toString()));
      }
      if ((jsonObj.get("pubchem_sid") != null && !jsonObj.get("pubchem_sid").isJsonNull()) && !jsonObj.get("pubchem_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pubchem_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pubchem_sid").toString()));
      }
      if ((jsonObj.get("standard_inchi") != null && !jsonObj.get("standard_inchi").isJsonNull()) && !jsonObj.get("standard_inchi").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `standard_inchi` to be a primitive type in the JSON string but got `%s`", jsonObj.get("standard_inchi").toString()));
      }
      if (jsonObj.get("targets") != null && !jsonObj.get("targets").isJsonNull()) {
        JsonArray jsonArraytargets = jsonObj.getAsJsonArray("targets");
        if (jsonArraytargets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("targets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `targets` to be an array in the JSON string but got `%s`", jsonObj.get("targets").toString()));
          }

          // validate the optional field `targets` (array)
          for (int i = 0; i < jsonArraytargets.size(); i++) {
            Target.validateJsonElement(jsonArraytargets.get(i));
          };
        }
      }
      if ((jsonObj.get("uniprot_accession") != null && !jsonObj.get("uniprot_accession").isJsonNull()) && !jsonObj.get("uniprot_accession").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniprot_accession` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniprot_accession").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CrossbarDrug.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CrossbarDrug' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CrossbarDrug> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CrossbarDrug.class));

       return (TypeAdapter<T>) new TypeAdapter<CrossbarDrug>() {
           @Override
           public void write(JsonWriter out, CrossbarDrug value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CrossbarDrug read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CrossbarDrug given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CrossbarDrug
   * @throws IOException if the JSON string is invalid with respect to CrossbarDrug
   */
  public static CrossbarDrug fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CrossbarDrug.class);
  }

  /**
   * Convert an instance of CrossbarDrug to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

