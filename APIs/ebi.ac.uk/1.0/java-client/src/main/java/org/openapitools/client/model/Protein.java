/*
 * CROssBAR Data API
 * # About CROssBAR & data **CROssBAR**: Comprehensive Resource of Biomedical Relations with Deep Learning Applications and Knowledge Graph Representations CROssBAR is a comprehensive system that integrates large-scale biomedical data from various resources e.g UniProt, ChEMBL, Drugbank, EFO, HPO, InterPro & PubChem and stores them in a new NoSQL database, enrich these data with deep learning based prediction of relations between numerous biomedical entities, rigorously analyse the enriched data to obtain biologically meaningful modules and display them to the user via easy to interpret, interactive and heterogeneous knowledge graphs. CROssBAR platform exposes a set of 12 endpoints to query data stored in the CROssBAR database. These endpoints help the user to find data of interest using different parameters provided by the API endpoint. For example, https://www.ebi.ac.uk/tools/crossbar/proteins?accession=A0A023GRW5 -> will provide protein information about accession 'A0A023GRW5' including its interactions, functions, cross-references, variations and more. https://www.ebi.ac.uk/tools/crossbar/activities?moleculeChemblId=CHEMBL465983 -> will provide ChEMBL bio-interactions related information including targets and bio-activity measurements associated with molecule chembl id 'CHEMBL465983'  **Knowledge graphs** Another use case of CROssBAR's API endpoints is in building knowledge graphs. These endpoints can be *weaved* together (output from one API endpoint fed as input to another API endpoint) programmatically to link nodes like protein, disease, drugs etc. as nodes of the graph. The endpoints are designed to be independent from each other which allows users the flexibility to drive biological networks from any facet e.g drug-centric, disease-centric, gene-centric etc. Our service for knowledge graph construction is available at https://crossbar.kansil.org. An example for the part of the background queries on the CROssBAR API during the construction of a knowledge graph,  (with the aim of keeping the example simple, we have only included the processes related to pathways, genes/proteins and drugs/compounds) In this example, we would like to find bio-active compounds (with a pChEMBL value threshold of at least 6.0) & drugs targeting all proteins belonging to \"WNT ligand biogenesis and trafficking\" pathway (based on Reactome pathway annotations). This can be achieved by using endpoints listed on this swagger documentation as illustrated in following steps- Find bio-active compounds (with a pChEMBL value threshold of at least 6.0) & drugs targeting all proteins belonging to \"WNT ligand biogenesis and trafficking\" pathway (based on Reactome annotations) This can be achieved by using endpoints listed on [this swagger documentation](https://www.ebi.ac.uk/tools/crossbar/swagger-ui.html) as illustrated in following steps- 1. Get all proteins from “/proteins” API endpoint which have a reactome pathway name equal to \"WNT ligand biogenesis and trafficking\". 2. From the collection of uniprot protein accessions collected from step 1 above, we query “/targets” API endpoint to obtain the ‘target_chembl_id’s of these proteins. 3. From the collection of target_chembl_ids collected from step 2 above, we query “/activities” API endpoint with pChEMBL value >=6, to obtain the ’molecule_chembl_id’s of the molecules that we need.  4. From the collection of uniprot protein accessions collected from step 1 above, we find out Drug names and ids from the “/drugs” API endpoint that targets our proteins. 5. From the collection of ’molecule_chembl_id’s obtained in step3, we query “/molecules” endpoint to get the compounds that are interacting with the genes/proteins belonging to the “WNT ligand biogenesis and trafficking” pathway.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: crossbar_dev@ebi.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CrossReferences;
import org.openapitools.client.model.CrossbarProteinVariation;
import org.openapitools.client.model.Features;
import org.openapitools.client.model.ProteinInteraction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Protein
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:35.639788-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Protein {
  public static final String SERIALIZED_NAME_ACCESSION = "accession";
  @SerializedName(SERIALIZED_NAME_ACCESSION)
  private String accession;

  public static final String SERIALIZED_NAME_CHROMOSOME = "chromosome";
  @SerializedName(SERIALIZED_NAME_CHROMOSOME)
  private String chromosome;

  public static final String SERIALIZED_NAME_CROSSREFERENCES = "crossreferences";
  @SerializedName(SERIALIZED_NAME_CROSSREFERENCES)
  private CrossReferences crossreferences;

  public static final String SERIALIZED_NAME_EC_NUMBERS = "ec_numbers";
  @SerializedName(SERIALIZED_NAME_EC_NUMBERS)
  private List<String> ecNumbers = new ArrayList<>();

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private Features features;

  public static final String SERIALIZED_NAME_FULL_NAME = "full_name";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_GENES = "genes";
  @SerializedName(SERIALIZED_NAME_GENES)
  private List<String> genes = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTERACTIONS = "interactions";
  @SerializedName(SERIALIZED_NAME_INTERACTIONS)
  private List<ProteinInteraction> interactions = new ArrayList<>();

  public static final String SERIALIZED_NAME_LENGTH = "length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private Double length;

  public static final String SERIALIZED_NAME_MASS = "mass";
  @SerializedName(SERIALIZED_NAME_MASS)
  private Double mass;

  public static final String SERIALIZED_NAME_TAX_ID = "tax_id";
  @SerializedName(SERIALIZED_NAME_TAX_ID)
  private Integer taxId;

  public static final String SERIALIZED_NAME_VARIATIONS = "variations";
  @SerializedName(SERIALIZED_NAME_VARIATIONS)
  private List<CrossbarProteinVariation> variations = new ArrayList<>();

  public Protein() {
  }

  public Protein accession(String accession) {
    this.accession = accession;
    return this;
  }

  /**
   * Get accession
   * @return accession
   */
  @javax.annotation.Nullable
  public String getAccession() {
    return accession;
  }

  public void setAccession(String accession) {
    this.accession = accession;
  }


  public Protein chromosome(String chromosome) {
    this.chromosome = chromosome;
    return this;
  }

  /**
   * Get chromosome
   * @return chromosome
   */
  @javax.annotation.Nullable
  public String getChromosome() {
    return chromosome;
  }

  public void setChromosome(String chromosome) {
    this.chromosome = chromosome;
  }


  public Protein crossreferences(CrossReferences crossreferences) {
    this.crossreferences = crossreferences;
    return this;
  }

  /**
   * Get crossreferences
   * @return crossreferences
   */
  @javax.annotation.Nullable
  public CrossReferences getCrossreferences() {
    return crossreferences;
  }

  public void setCrossreferences(CrossReferences crossreferences) {
    this.crossreferences = crossreferences;
  }


  public Protein ecNumbers(List<String> ecNumbers) {
    this.ecNumbers = ecNumbers;
    return this;
  }

  public Protein addEcNumbersItem(String ecNumbersItem) {
    if (this.ecNumbers == null) {
      this.ecNumbers = new ArrayList<>();
    }
    this.ecNumbers.add(ecNumbersItem);
    return this;
  }

  /**
   * Get ecNumbers
   * @return ecNumbers
   */
  @javax.annotation.Nullable
  public List<String> getEcNumbers() {
    return ecNumbers;
  }

  public void setEcNumbers(List<String> ecNumbers) {
    this.ecNumbers = ecNumbers;
  }


  public Protein features(Features features) {
    this.features = features;
    return this;
  }

  /**
   * Get features
   * @return features
   */
  @javax.annotation.Nullable
  public Features getFeatures() {
    return features;
  }

  public void setFeatures(Features features) {
    this.features = features;
  }


  public Protein fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * Get fullName
   * @return fullName
   */
  @javax.annotation.Nullable
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public Protein genes(List<String> genes) {
    this.genes = genes;
    return this;
  }

  public Protein addGenesItem(String genesItem) {
    if (this.genes == null) {
      this.genes = new ArrayList<>();
    }
    this.genes.add(genesItem);
    return this;
  }

  /**
   * Get genes
   * @return genes
   */
  @javax.annotation.Nullable
  public List<String> getGenes() {
    return genes;
  }

  public void setGenes(List<String> genes) {
    this.genes = genes;
  }


  public Protein interactions(List<ProteinInteraction> interactions) {
    this.interactions = interactions;
    return this;
  }

  public Protein addInteractionsItem(ProteinInteraction interactionsItem) {
    if (this.interactions == null) {
      this.interactions = new ArrayList<>();
    }
    this.interactions.add(interactionsItem);
    return this;
  }

  /**
   * Get interactions
   * @return interactions
   */
  @javax.annotation.Nullable
  public List<ProteinInteraction> getInteractions() {
    return interactions;
  }

  public void setInteractions(List<ProteinInteraction> interactions) {
    this.interactions = interactions;
  }


  public Protein length(Double length) {
    this.length = length;
    return this;
  }

  /**
   * Get length
   * @return length
   */
  @javax.annotation.Nullable
  public Double getLength() {
    return length;
  }

  public void setLength(Double length) {
    this.length = length;
  }


  public Protein mass(Double mass) {
    this.mass = mass;
    return this;
  }

  /**
   * Get mass
   * @return mass
   */
  @javax.annotation.Nullable
  public Double getMass() {
    return mass;
  }

  public void setMass(Double mass) {
    this.mass = mass;
  }


  public Protein taxId(Integer taxId) {
    this.taxId = taxId;
    return this;
  }

  /**
   * Get taxId
   * @return taxId
   */
  @javax.annotation.Nullable
  public Integer getTaxId() {
    return taxId;
  }

  public void setTaxId(Integer taxId) {
    this.taxId = taxId;
  }


  public Protein variations(List<CrossbarProteinVariation> variations) {
    this.variations = variations;
    return this;
  }

  public Protein addVariationsItem(CrossbarProteinVariation variationsItem) {
    if (this.variations == null) {
      this.variations = new ArrayList<>();
    }
    this.variations.add(variationsItem);
    return this;
  }

  /**
   * Get variations
   * @return variations
   */
  @javax.annotation.Nullable
  public List<CrossbarProteinVariation> getVariations() {
    return variations;
  }

  public void setVariations(List<CrossbarProteinVariation> variations) {
    this.variations = variations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Protein protein = (Protein) o;
    return Objects.equals(this.accession, protein.accession) &&
        Objects.equals(this.chromosome, protein.chromosome) &&
        Objects.equals(this.crossreferences, protein.crossreferences) &&
        Objects.equals(this.ecNumbers, protein.ecNumbers) &&
        Objects.equals(this.features, protein.features) &&
        Objects.equals(this.fullName, protein.fullName) &&
        Objects.equals(this.genes, protein.genes) &&
        Objects.equals(this.interactions, protein.interactions) &&
        Objects.equals(this.length, protein.length) &&
        Objects.equals(this.mass, protein.mass) &&
        Objects.equals(this.taxId, protein.taxId) &&
        Objects.equals(this.variations, protein.variations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accession, chromosome, crossreferences, ecNumbers, features, fullName, genes, interactions, length, mass, taxId, variations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Protein {\n");
    sb.append("    accession: ").append(toIndentedString(accession)).append("\n");
    sb.append("    chromosome: ").append(toIndentedString(chromosome)).append("\n");
    sb.append("    crossreferences: ").append(toIndentedString(crossreferences)).append("\n");
    sb.append("    ecNumbers: ").append(toIndentedString(ecNumbers)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    genes: ").append(toIndentedString(genes)).append("\n");
    sb.append("    interactions: ").append(toIndentedString(interactions)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    mass: ").append(toIndentedString(mass)).append("\n");
    sb.append("    taxId: ").append(toIndentedString(taxId)).append("\n");
    sb.append("    variations: ").append(toIndentedString(variations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accession");
    openapiFields.add("chromosome");
    openapiFields.add("crossreferences");
    openapiFields.add("ec_numbers");
    openapiFields.add("features");
    openapiFields.add("full_name");
    openapiFields.add("genes");
    openapiFields.add("interactions");
    openapiFields.add("length");
    openapiFields.add("mass");
    openapiFields.add("tax_id");
    openapiFields.add("variations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Protein
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Protein.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Protein is not found in the empty JSON string", Protein.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Protein.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Protein` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accession") != null && !jsonObj.get("accession").isJsonNull()) && !jsonObj.get("accession").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accession` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accession").toString()));
      }
      if ((jsonObj.get("chromosome") != null && !jsonObj.get("chromosome").isJsonNull()) && !jsonObj.get("chromosome").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chromosome` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chromosome").toString()));
      }
      // validate the optional field `crossreferences`
      if (jsonObj.get("crossreferences") != null && !jsonObj.get("crossreferences").isJsonNull()) {
        CrossReferences.validateJsonElement(jsonObj.get("crossreferences"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ec_numbers") != null && !jsonObj.get("ec_numbers").isJsonNull() && !jsonObj.get("ec_numbers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ec_numbers` to be an array in the JSON string but got `%s`", jsonObj.get("ec_numbers").toString()));
      }
      // validate the optional field `features`
      if (jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull()) {
        Features.validateJsonElement(jsonObj.get("features"));
      }
      if ((jsonObj.get("full_name") != null && !jsonObj.get("full_name").isJsonNull()) && !jsonObj.get("full_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("genes") != null && !jsonObj.get("genes").isJsonNull() && !jsonObj.get("genes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `genes` to be an array in the JSON string but got `%s`", jsonObj.get("genes").toString()));
      }
      if (jsonObj.get("interactions") != null && !jsonObj.get("interactions").isJsonNull()) {
        JsonArray jsonArrayinteractions = jsonObj.getAsJsonArray("interactions");
        if (jsonArrayinteractions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("interactions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `interactions` to be an array in the JSON string but got `%s`", jsonObj.get("interactions").toString()));
          }

          // validate the optional field `interactions` (array)
          for (int i = 0; i < jsonArrayinteractions.size(); i++) {
            ProteinInteraction.validateJsonElement(jsonArrayinteractions.get(i));
          };
        }
      }
      if (jsonObj.get("variations") != null && !jsonObj.get("variations").isJsonNull()) {
        JsonArray jsonArrayvariations = jsonObj.getAsJsonArray("variations");
        if (jsonArrayvariations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("variations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `variations` to be an array in the JSON string but got `%s`", jsonObj.get("variations").toString()));
          }

          // validate the optional field `variations` (array)
          for (int i = 0; i < jsonArrayvariations.size(); i++) {
            CrossbarProteinVariation.validateJsonElement(jsonArrayvariations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Protein.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Protein' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Protein> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Protein.class));

       return (TypeAdapter<T>) new TypeAdapter<Protein>() {
           @Override
           public void write(JsonWriter out, Protein value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Protein read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Protein given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Protein
   * @throws IOException if the JSON string is invalid with respect to Protein
   */
  public static Protein fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Protein.class);
  }

  /**
   * Convert an instance of Protein to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

