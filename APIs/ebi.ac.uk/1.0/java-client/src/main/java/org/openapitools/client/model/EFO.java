/*
 * CROssBAR Data API
 * # About CROssBAR & data **CROssBAR**: Comprehensive Resource of Biomedical Relations with Deep Learning Applications and Knowledge Graph Representations CROssBAR is a comprehensive system that integrates large-scale biomedical data from various resources e.g UniProt, ChEMBL, Drugbank, EFO, HPO, InterPro & PubChem and stores them in a new NoSQL database, enrich these data with deep learning based prediction of relations between numerous biomedical entities, rigorously analyse the enriched data to obtain biologically meaningful modules and display them to the user via easy to interpret, interactive and heterogeneous knowledge graphs. CROssBAR platform exposes a set of 12 endpoints to query data stored in the CROssBAR database. These endpoints help the user to find data of interest using different parameters provided by the API endpoint. For example, https://www.ebi.ac.uk/tools/crossbar/proteins?accession=A0A023GRW5 -> will provide protein information about accession 'A0A023GRW5' including its interactions, functions, cross-references, variations and more. https://www.ebi.ac.uk/tools/crossbar/activities?moleculeChemblId=CHEMBL465983 -> will provide ChEMBL bio-interactions related information including targets and bio-activity measurements associated with molecule chembl id 'CHEMBL465983'  **Knowledge graphs** Another use case of CROssBAR's API endpoints is in building knowledge graphs. These endpoints can be *weaved* together (output from one API endpoint fed as input to another API endpoint) programmatically to link nodes like protein, disease, drugs etc. as nodes of the graph. The endpoints are designed to be independent from each other which allows users the flexibility to drive biological networks from any facet e.g drug-centric, disease-centric, gene-centric etc. Our service for knowledge graph construction is available at https://crossbar.kansil.org. An example for the part of the background queries on the CROssBAR API during the construction of a knowledge graph,  (with the aim of keeping the example simple, we have only included the processes related to pathways, genes/proteins and drugs/compounds) In this example, we would like to find bio-active compounds (with a pChEMBL value threshold of at least 6.0) & drugs targeting all proteins belonging to \"WNT ligand biogenesis and trafficking\" pathway (based on Reactome pathway annotations). This can be achieved by using endpoints listed on this swagger documentation as illustrated in following steps- Find bio-active compounds (with a pChEMBL value threshold of at least 6.0) & drugs targeting all proteins belonging to \"WNT ligand biogenesis and trafficking\" pathway (based on Reactome annotations) This can be achieved by using endpoints listed on [this swagger documentation](https://www.ebi.ac.uk/tools/crossbar/swagger-ui.html) as illustrated in following steps- 1. Get all proteins from “/proteins” API endpoint which have a reactome pathway name equal to \"WNT ligand biogenesis and trafficking\". 2. From the collection of uniprot protein accessions collected from step 1 above, we query “/targets” API endpoint to obtain the ‘target_chembl_id’s of these proteins. 3. From the collection of target_chembl_ids collected from step 2 above, we query “/activities” API endpoint with pChEMBL value >=6, to obtain the ’molecule_chembl_id’s of the molecules that we need.  4. From the collection of uniprot protein accessions collected from step 1 above, we find out Drug names and ids from the “/drugs” API endpoint that targets our proteins. 5. From the collection of ’molecule_chembl_id’s obtained in step3, we query “/molecules” endpoint to get the compounds that are interacting with the genes/proteins belonging to the “WNT ligand biogenesis and trafficking” pathway.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: crossbar_dev@ebi.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EFO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:35.639788-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EFO {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private List<String> description = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOID = "doid";
  @SerializedName(SERIALIZED_NAME_DOID)
  private List<String> doid = new ArrayList<>();

  public static final String SERIALIZED_NAME_ICD9 = "icd9";
  @SerializedName(SERIALIZED_NAME_ICD9)
  private List<String> icd9 = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_MESH = "mesh";
  @SerializedName(SERIALIZED_NAME_MESH)
  private List<String> mesh = new ArrayList<>();

  public static final String SERIALIZED_NAME_NCIT = "ncit";
  @SerializedName(SERIALIZED_NAME_NCIT)
  private List<String> ncit = new ArrayList<>();

  public static final String SERIALIZED_NAME_OBO_ID = "obo_id";
  @SerializedName(SERIALIZED_NAME_OBO_ID)
  private String oboId;

  public static final String SERIALIZED_NAME_OMIM = "omim";
  @SerializedName(SERIALIZED_NAME_OMIM)
  private List<String> omim = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHORT_FORM = "short_form";
  @SerializedName(SERIALIZED_NAME_SHORT_FORM)
  private String shortForm;

  public static final String SERIALIZED_NAME_SNOWMED = "snowmed";
  @SerializedName(SERIALIZED_NAME_SNOWMED)
  private List<String> snowmed = new ArrayList<>();

  public static final String SERIALIZED_NAME_SYNONYMS = "synonyms";
  @SerializedName(SERIALIZED_NAME_SYNONYMS)
  private List<String> synonyms = new ArrayList<>();

  public static final String SERIALIZED_NAME_UMLS = "umls";
  @SerializedName(SERIALIZED_NAME_UMLS)
  private List<String> umls = new ArrayList<>();

  public EFO() {
  }

  public EFO description(List<String> description) {
    this.description = description;
    return this;
  }

  public EFO addDescriptionItem(String descriptionItem) {
    if (this.description == null) {
      this.description = new ArrayList<>();
    }
    this.description.add(descriptionItem);
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public List<String> getDescription() {
    return description;
  }

  public void setDescription(List<String> description) {
    this.description = description;
  }


  public EFO doid(List<String> doid) {
    this.doid = doid;
    return this;
  }

  public EFO addDoidItem(String doidItem) {
    if (this.doid == null) {
      this.doid = new ArrayList<>();
    }
    this.doid.add(doidItem);
    return this;
  }

  /**
   * Get doid
   * @return doid
   */
  @javax.annotation.Nullable
  public List<String> getDoid() {
    return doid;
  }

  public void setDoid(List<String> doid) {
    this.doid = doid;
  }


  public EFO icd9(List<String> icd9) {
    this.icd9 = icd9;
    return this;
  }

  public EFO addIcd9Item(String icd9Item) {
    if (this.icd9 == null) {
      this.icd9 = new ArrayList<>();
    }
    this.icd9.add(icd9Item);
    return this;
  }

  /**
   * Get icd9
   * @return icd9
   */
  @javax.annotation.Nullable
  public List<String> getIcd9() {
    return icd9;
  }

  public void setIcd9(List<String> icd9) {
    this.icd9 = icd9;
  }


  public EFO label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public EFO mesh(List<String> mesh) {
    this.mesh = mesh;
    return this;
  }

  public EFO addMeshItem(String meshItem) {
    if (this.mesh == null) {
      this.mesh = new ArrayList<>();
    }
    this.mesh.add(meshItem);
    return this;
  }

  /**
   * Get mesh
   * @return mesh
   */
  @javax.annotation.Nullable
  public List<String> getMesh() {
    return mesh;
  }

  public void setMesh(List<String> mesh) {
    this.mesh = mesh;
  }


  public EFO ncit(List<String> ncit) {
    this.ncit = ncit;
    return this;
  }

  public EFO addNcitItem(String ncitItem) {
    if (this.ncit == null) {
      this.ncit = new ArrayList<>();
    }
    this.ncit.add(ncitItem);
    return this;
  }

  /**
   * Get ncit
   * @return ncit
   */
  @javax.annotation.Nullable
  public List<String> getNcit() {
    return ncit;
  }

  public void setNcit(List<String> ncit) {
    this.ncit = ncit;
  }


  public EFO oboId(String oboId) {
    this.oboId = oboId;
    return this;
  }

  /**
   * Get oboId
   * @return oboId
   */
  @javax.annotation.Nullable
  public String getOboId() {
    return oboId;
  }

  public void setOboId(String oboId) {
    this.oboId = oboId;
  }


  public EFO omim(List<String> omim) {
    this.omim = omim;
    return this;
  }

  public EFO addOmimItem(String omimItem) {
    if (this.omim == null) {
      this.omim = new ArrayList<>();
    }
    this.omim.add(omimItem);
    return this;
  }

  /**
   * Get omim
   * @return omim
   */
  @javax.annotation.Nullable
  public List<String> getOmim() {
    return omim;
  }

  public void setOmim(List<String> omim) {
    this.omim = omim;
  }


  public EFO shortForm(String shortForm) {
    this.shortForm = shortForm;
    return this;
  }

  /**
   * Get shortForm
   * @return shortForm
   */
  @javax.annotation.Nullable
  public String getShortForm() {
    return shortForm;
  }

  public void setShortForm(String shortForm) {
    this.shortForm = shortForm;
  }


  public EFO snowmed(List<String> snowmed) {
    this.snowmed = snowmed;
    return this;
  }

  public EFO addSnowmedItem(String snowmedItem) {
    if (this.snowmed == null) {
      this.snowmed = new ArrayList<>();
    }
    this.snowmed.add(snowmedItem);
    return this;
  }

  /**
   * Get snowmed
   * @return snowmed
   */
  @javax.annotation.Nullable
  public List<String> getSnowmed() {
    return snowmed;
  }

  public void setSnowmed(List<String> snowmed) {
    this.snowmed = snowmed;
  }


  public EFO synonyms(List<String> synonyms) {
    this.synonyms = synonyms;
    return this;
  }

  public EFO addSynonymsItem(String synonymsItem) {
    if (this.synonyms == null) {
      this.synonyms = new ArrayList<>();
    }
    this.synonyms.add(synonymsItem);
    return this;
  }

  /**
   * Get synonyms
   * @return synonyms
   */
  @javax.annotation.Nullable
  public List<String> getSynonyms() {
    return synonyms;
  }

  public void setSynonyms(List<String> synonyms) {
    this.synonyms = synonyms;
  }


  public EFO umls(List<String> umls) {
    this.umls = umls;
    return this;
  }

  public EFO addUmlsItem(String umlsItem) {
    if (this.umls == null) {
      this.umls = new ArrayList<>();
    }
    this.umls.add(umlsItem);
    return this;
  }

  /**
   * Get umls
   * @return umls
   */
  @javax.annotation.Nullable
  public List<String> getUmls() {
    return umls;
  }

  public void setUmls(List<String> umls) {
    this.umls = umls;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EFO EFO = (EFO) o;
    return Objects.equals(this.description, EFO.description) &&
        Objects.equals(this.doid, EFO.doid) &&
        Objects.equals(this.icd9, EFO.icd9) &&
        Objects.equals(this.label, EFO.label) &&
        Objects.equals(this.mesh, EFO.mesh) &&
        Objects.equals(this.ncit, EFO.ncit) &&
        Objects.equals(this.oboId, EFO.oboId) &&
        Objects.equals(this.omim, EFO.omim) &&
        Objects.equals(this.shortForm, EFO.shortForm) &&
        Objects.equals(this.snowmed, EFO.snowmed) &&
        Objects.equals(this.synonyms, EFO.synonyms) &&
        Objects.equals(this.umls, EFO.umls);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, doid, icd9, label, mesh, ncit, oboId, omim, shortForm, snowmed, synonyms, umls);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EFO {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    doid: ").append(toIndentedString(doid)).append("\n");
    sb.append("    icd9: ").append(toIndentedString(icd9)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    mesh: ").append(toIndentedString(mesh)).append("\n");
    sb.append("    ncit: ").append(toIndentedString(ncit)).append("\n");
    sb.append("    oboId: ").append(toIndentedString(oboId)).append("\n");
    sb.append("    omim: ").append(toIndentedString(omim)).append("\n");
    sb.append("    shortForm: ").append(toIndentedString(shortForm)).append("\n");
    sb.append("    snowmed: ").append(toIndentedString(snowmed)).append("\n");
    sb.append("    synonyms: ").append(toIndentedString(synonyms)).append("\n");
    sb.append("    umls: ").append(toIndentedString(umls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("doid");
    openapiFields.add("icd9");
    openapiFields.add("label");
    openapiFields.add("mesh");
    openapiFields.add("ncit");
    openapiFields.add("obo_id");
    openapiFields.add("omim");
    openapiFields.add("short_form");
    openapiFields.add("snowmed");
    openapiFields.add("synonyms");
    openapiFields.add("umls");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EFO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EFO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EFO is not found in the empty JSON string", EFO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EFO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EFO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull() && !jsonObj.get("description").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be an array in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("doid") != null && !jsonObj.get("doid").isJsonNull() && !jsonObj.get("doid").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `doid` to be an array in the JSON string but got `%s`", jsonObj.get("doid").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("icd9") != null && !jsonObj.get("icd9").isJsonNull() && !jsonObj.get("icd9").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `icd9` to be an array in the JSON string but got `%s`", jsonObj.get("icd9").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("mesh") != null && !jsonObj.get("mesh").isJsonNull() && !jsonObj.get("mesh").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mesh` to be an array in the JSON string but got `%s`", jsonObj.get("mesh").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ncit") != null && !jsonObj.get("ncit").isJsonNull() && !jsonObj.get("ncit").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ncit` to be an array in the JSON string but got `%s`", jsonObj.get("ncit").toString()));
      }
      if ((jsonObj.get("obo_id") != null && !jsonObj.get("obo_id").isJsonNull()) && !jsonObj.get("obo_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `obo_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("obo_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("omim") != null && !jsonObj.get("omim").isJsonNull() && !jsonObj.get("omim").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `omim` to be an array in the JSON string but got `%s`", jsonObj.get("omim").toString()));
      }
      if ((jsonObj.get("short_form") != null && !jsonObj.get("short_form").isJsonNull()) && !jsonObj.get("short_form").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `short_form` to be a primitive type in the JSON string but got `%s`", jsonObj.get("short_form").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("snowmed") != null && !jsonObj.get("snowmed").isJsonNull() && !jsonObj.get("snowmed").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `snowmed` to be an array in the JSON string but got `%s`", jsonObj.get("snowmed").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("synonyms") != null && !jsonObj.get("synonyms").isJsonNull() && !jsonObj.get("synonyms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `synonyms` to be an array in the JSON string but got `%s`", jsonObj.get("synonyms").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("umls") != null && !jsonObj.get("umls").isJsonNull() && !jsonObj.get("umls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `umls` to be an array in the JSON string but got `%s`", jsonObj.get("umls").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EFO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EFO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EFO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EFO.class));

       return (TypeAdapter<T>) new TypeAdapter<EFO>() {
           @Override
           public void write(JsonWriter out, EFO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EFO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EFO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EFO
   * @throws IOException if the JSON string is invalid with respect to EFO
   */
  public static EFO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EFO.class);
  }

  /**
   * Convert an instance of EFO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

