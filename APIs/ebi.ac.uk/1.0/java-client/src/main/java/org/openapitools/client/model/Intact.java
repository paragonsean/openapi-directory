/*
 * CROssBAR Data API
 * # About CROssBAR & data **CROssBAR**: Comprehensive Resource of Biomedical Relations with Deep Learning Applications and Knowledge Graph Representations CROssBAR is a comprehensive system that integrates large-scale biomedical data from various resources e.g UniProt, ChEMBL, Drugbank, EFO, HPO, InterPro & PubChem and stores them in a new NoSQL database, enrich these data with deep learning based prediction of relations between numerous biomedical entities, rigorously analyse the enriched data to obtain biologically meaningful modules and display them to the user via easy to interpret, interactive and heterogeneous knowledge graphs. CROssBAR platform exposes a set of 12 endpoints to query data stored in the CROssBAR database. These endpoints help the user to find data of interest using different parameters provided by the API endpoint. For example, https://www.ebi.ac.uk/tools/crossbar/proteins?accession=A0A023GRW5 -> will provide protein information about accession 'A0A023GRW5' including its interactions, functions, cross-references, variations and more. https://www.ebi.ac.uk/tools/crossbar/activities?moleculeChemblId=CHEMBL465983 -> will provide ChEMBL bio-interactions related information including targets and bio-activity measurements associated with molecule chembl id 'CHEMBL465983'  **Knowledge graphs** Another use case of CROssBAR's API endpoints is in building knowledge graphs. These endpoints can be *weaved* together (output from one API endpoint fed as input to another API endpoint) programmatically to link nodes like protein, disease, drugs etc. as nodes of the graph. The endpoints are designed to be independent from each other which allows users the flexibility to drive biological networks from any facet e.g drug-centric, disease-centric, gene-centric etc. Our service for knowledge graph construction is available at https://crossbar.kansil.org. An example for the part of the background queries on the CROssBAR API during the construction of a knowledge graph,  (with the aim of keeping the example simple, we have only included the processes related to pathways, genes/proteins and drugs/compounds) In this example, we would like to find bio-active compounds (with a pChEMBL value threshold of at least 6.0) & drugs targeting all proteins belonging to \"WNT ligand biogenesis and trafficking\" pathway (based on Reactome pathway annotations). This can be achieved by using endpoints listed on this swagger documentation as illustrated in following steps- Find bio-active compounds (with a pChEMBL value threshold of at least 6.0) & drugs targeting all proteins belonging to \"WNT ligand biogenesis and trafficking\" pathway (based on Reactome annotations) This can be achieved by using endpoints listed on [this swagger documentation](https://www.ebi.ac.uk/tools/crossbar/swagger-ui.html) as illustrated in following steps- 1. Get all proteins from “/proteins” API endpoint which have a reactome pathway name equal to \"WNT ligand biogenesis and trafficking\". 2. From the collection of uniprot protein accessions collected from step 1 above, we query “/targets” API endpoint to obtain the ‘target_chembl_id’s of these proteins. 3. From the collection of target_chembl_ids collected from step 2 above, we query “/activities” API endpoint with pChEMBL value >=6, to obtain the ’molecule_chembl_id’s of the molecules that we need.  4. From the collection of uniprot protein accessions collected from step 1 above, we find out Drug names and ids from the “/drugs” API endpoint that targets our proteins. 5. From the collection of ’molecule_chembl_id’s obtained in step3, we query “/molecules” endpoint to get the compounds that are interacting with the genes/proteins belonging to the “WNT ligand biogenesis and trafficking” pathway.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: crossbar_dev@ebi.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Interactor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Intact
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:35.639788-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Intact {
  public static final String SERIALIZED_NAME_CONFIDENCE = "confidence";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private Double confidence;

  public static final String SERIALIZED_NAME_INTERACTION_AC = "interaction_ac";
  @SerializedName(SERIALIZED_NAME_INTERACTION_AC)
  private List<String> interactionAc = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTERACTOR_A = "interactor_a";
  @SerializedName(SERIALIZED_NAME_INTERACTOR_A)
  private Interactor interactorA;

  public static final String SERIALIZED_NAME_INTERACTOR_B = "interactor_b";
  @SerializedName(SERIALIZED_NAME_INTERACTOR_B)
  private Interactor interactorB;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_SOURCE_DB = "source_db";
  @SerializedName(SERIALIZED_NAME_SOURCE_DB)
  private String sourceDb;

  public Intact() {
  }

  public Intact confidence(Double confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * Get confidence
   * @return confidence
   */
  @javax.annotation.Nullable
  public Double getConfidence() {
    return confidence;
  }

  public void setConfidence(Double confidence) {
    this.confidence = confidence;
  }


  public Intact interactionAc(List<String> interactionAc) {
    this.interactionAc = interactionAc;
    return this;
  }

  public Intact addInteractionAcItem(String interactionAcItem) {
    if (this.interactionAc == null) {
      this.interactionAc = new ArrayList<>();
    }
    this.interactionAc.add(interactionAcItem);
    return this;
  }

  /**
   * Get interactionAc
   * @return interactionAc
   */
  @javax.annotation.Nullable
  public List<String> getInteractionAc() {
    return interactionAc;
  }

  public void setInteractionAc(List<String> interactionAc) {
    this.interactionAc = interactionAc;
  }


  public Intact interactorA(Interactor interactorA) {
    this.interactorA = interactorA;
    return this;
  }

  /**
   * Get interactorA
   * @return interactorA
   */
  @javax.annotation.Nullable
  public Interactor getInteractorA() {
    return interactorA;
  }

  public void setInteractorA(Interactor interactorA) {
    this.interactorA = interactorA;
  }


  public Intact interactorB(Interactor interactorB) {
    this.interactorB = interactorB;
    return this;
  }

  /**
   * Get interactorB
   * @return interactorB
   */
  @javax.annotation.Nullable
  public Interactor getInteractorB() {
    return interactorB;
  }

  public void setInteractorB(Interactor interactorB) {
    this.interactorB = interactorB;
  }


  public Intact method(String method) {
    this.method = method;
    return this;
  }

  /**
   * Get method
   * @return method
   */
  @javax.annotation.Nullable
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }


  public Intact sourceDb(String sourceDb) {
    this.sourceDb = sourceDb;
    return this;
  }

  /**
   * Get sourceDb
   * @return sourceDb
   */
  @javax.annotation.Nullable
  public String getSourceDb() {
    return sourceDb;
  }

  public void setSourceDb(String sourceDb) {
    this.sourceDb = sourceDb;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Intact intact = (Intact) o;
    return Objects.equals(this.confidence, intact.confidence) &&
        Objects.equals(this.interactionAc, intact.interactionAc) &&
        Objects.equals(this.interactorA, intact.interactorA) &&
        Objects.equals(this.interactorB, intact.interactorB) &&
        Objects.equals(this.method, intact.method) &&
        Objects.equals(this.sourceDb, intact.sourceDb);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confidence, interactionAc, interactorA, interactorB, method, sourceDb);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Intact {\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    interactionAc: ").append(toIndentedString(interactionAc)).append("\n");
    sb.append("    interactorA: ").append(toIndentedString(interactorA)).append("\n");
    sb.append("    interactorB: ").append(toIndentedString(interactorB)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    sourceDb: ").append(toIndentedString(sourceDb)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("confidence");
    openapiFields.add("interaction_ac");
    openapiFields.add("interactor_a");
    openapiFields.add("interactor_b");
    openapiFields.add("method");
    openapiFields.add("source_db");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Intact
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Intact.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Intact is not found in the empty JSON string", Intact.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Intact.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Intact` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("interaction_ac") != null && !jsonObj.get("interaction_ac").isJsonNull() && !jsonObj.get("interaction_ac").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `interaction_ac` to be an array in the JSON string but got `%s`", jsonObj.get("interaction_ac").toString()));
      }
      // validate the optional field `interactor_a`
      if (jsonObj.get("interactor_a") != null && !jsonObj.get("interactor_a").isJsonNull()) {
        Interactor.validateJsonElement(jsonObj.get("interactor_a"));
      }
      // validate the optional field `interactor_b`
      if (jsonObj.get("interactor_b") != null && !jsonObj.get("interactor_b").isJsonNull()) {
        Interactor.validateJsonElement(jsonObj.get("interactor_b"));
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if ((jsonObj.get("source_db") != null && !jsonObj.get("source_db").isJsonNull()) && !jsonObj.get("source_db").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_db` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_db").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Intact.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Intact' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Intact> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Intact.class));

       return (TypeAdapter<T>) new TypeAdapter<Intact>() {
           @Override
           public void write(JsonWriter out, Intact value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Intact read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Intact given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Intact
   * @throws IOException if the JSON string is invalid with respect to Intact
   */
  public static Intact fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Intact.class);
  }

  /**
   * Convert an instance of Intact to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

