/*
 * CROssBAR Data API
 * # About CROssBAR & data **CROssBAR**: Comprehensive Resource of Biomedical Relations with Deep Learning Applications and Knowledge Graph Representations CROssBAR is a comprehensive system that integrates large-scale biomedical data from various resources e.g UniProt, ChEMBL, Drugbank, EFO, HPO, InterPro & PubChem and stores them in a new NoSQL database, enrich these data with deep learning based prediction of relations between numerous biomedical entities, rigorously analyse the enriched data to obtain biologically meaningful modules and display them to the user via easy to interpret, interactive and heterogeneous knowledge graphs. CROssBAR platform exposes a set of 12 endpoints to query data stored in the CROssBAR database. These endpoints help the user to find data of interest using different parameters provided by the API endpoint. For example, https://www.ebi.ac.uk/tools/crossbar/proteins?accession=A0A023GRW5 -> will provide protein information about accession 'A0A023GRW5' including its interactions, functions, cross-references, variations and more. https://www.ebi.ac.uk/tools/crossbar/activities?moleculeChemblId=CHEMBL465983 -> will provide ChEMBL bio-interactions related information including targets and bio-activity measurements associated with molecule chembl id 'CHEMBL465983'  **Knowledge graphs** Another use case of CROssBAR's API endpoints is in building knowledge graphs. These endpoints can be *weaved* together (output from one API endpoint fed as input to another API endpoint) programmatically to link nodes like protein, disease, drugs etc. as nodes of the graph. The endpoints are designed to be independent from each other which allows users the flexibility to drive biological networks from any facet e.g drug-centric, disease-centric, gene-centric etc. Our service for knowledge graph construction is available at https://crossbar.kansil.org. An example for the part of the background queries on the CROssBAR API during the construction of a knowledge graph,  (with the aim of keeping the example simple, we have only included the processes related to pathways, genes/proteins and drugs/compounds) In this example, we would like to find bio-active compounds (with a pChEMBL value threshold of at least 6.0) & drugs targeting all proteins belonging to \"WNT ligand biogenesis and trafficking\" pathway (based on Reactome pathway annotations). This can be achieved by using endpoints listed on this swagger documentation as illustrated in following steps- Find bio-active compounds (with a pChEMBL value threshold of at least 6.0) & drugs targeting all proteins belonging to \"WNT ligand biogenesis and trafficking\" pathway (based on Reactome annotations) This can be achieved by using endpoints listed on [this swagger documentation](https://www.ebi.ac.uk/tools/crossbar/swagger-ui.html) as illustrated in following steps- 1. Get all proteins from “/proteins” API endpoint which have a reactome pathway name equal to \"WNT ligand biogenesis and trafficking\". 2. From the collection of uniprot protein accessions collected from step 1 above, we query “/targets” API endpoint to obtain the ‘target_chembl_id’s of these proteins. 3. From the collection of target_chembl_ids collected from step 2 above, we query “/activities” API endpoint with pChEMBL value >=6, to obtain the ’molecule_chembl_id’s of the molecules that we need.  4. From the collection of uniprot protein accessions collected from step 1 above, we find out Drug names and ids from the “/drugs” API endpoint that targets our proteins. 5. From the collection of ’molecule_chembl_id’s obtained in step3, we query “/molecules” endpoint to get the compounds that are interacting with the genes/proteins belonging to the “WNT ligand biogenesis and trafficking” pathway.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: crossbar_dev@ebi.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Proteins;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProteinsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProteinsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProteinsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getProteinsUsingGET
     * @param accession accession (optional)
     * @param ec ec (optional)
     * @param fullName fullName (optional)
     * @param gene gene (optional)
     * @param go go (optional)
     * @param interpro interpro (optional)
     * @param limit limit (optional, default to 10)
     * @param omim omim (optional)
     * @param orphanet orphanet (optional)
     * @param page page (optional, default to 0)
     * @param pfam pfam (optional)
     * @param reactome reactome (optional)
     * @param taxId taxId (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProteinsUsingGETCall(List<String> accession, List<String> ec, List<String> fullName, List<String> gene, List<String> go, List<String> interpro, Integer limit, List<String> omim, List<String> orphanet, Integer page, List<String> pfam, List<String> reactome, List<Integer> taxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/proteins";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accession != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "accession", accession));
        }

        if (ec != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ec", ec));
        }

        if (fullName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fullName", fullName));
        }

        if (gene != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "gene", gene));
        }

        if (go != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "go", go));
        }

        if (interpro != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "interpro", interpro));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (omim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "omim", omim));
        }

        if (orphanet != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "orphanet", orphanet));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pfam != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "pfam", pfam));
        }

        if (reactome != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "reactome", reactome));
        }

        if (taxId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "taxId", taxId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProteinsUsingGETValidateBeforeCall(List<String> accession, List<String> ec, List<String> fullName, List<String> gene, List<String> go, List<String> interpro, Integer limit, List<String> omim, List<String> orphanet, Integer page, List<String> pfam, List<String> reactome, List<Integer> taxId, final ApiCallback _callback) throws ApiException {
        return getProteinsUsingGETCall(accession, ec, fullName, gene, go, interpro, limit, omim, orphanet, page, pfam, reactome, taxId, _callback);

    }

    /**
     * Proteins collected from Uniprot for selective tax ids  HUMAN(9606), MOUSE(10090), RAT(10116), BOVINE(9913), ESCHERICHIA_COLI(83333), SUS_SCROFA(9823), MYCOBACTERIUM_TUBERCULOSIS(83332), ORYCTOLAGUS_CUNICULUS(9986), SACCHAROMYCES_CEREVISIAE(559292), CVHSA(694009) &amp; SARS2(2697049)
     * 
     * @param accession accession (optional)
     * @param ec ec (optional)
     * @param fullName fullName (optional)
     * @param gene gene (optional)
     * @param go go (optional)
     * @param interpro interpro (optional)
     * @param limit limit (optional, default to 10)
     * @param omim omim (optional)
     * @param orphanet orphanet (optional)
     * @param page page (optional, default to 0)
     * @param pfam pfam (optional)
     * @param reactome reactome (optional)
     * @param taxId taxId (optional)
     * @return Proteins
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Proteins getProteinsUsingGET(List<String> accession, List<String> ec, List<String> fullName, List<String> gene, List<String> go, List<String> interpro, Integer limit, List<String> omim, List<String> orphanet, Integer page, List<String> pfam, List<String> reactome, List<Integer> taxId) throws ApiException {
        ApiResponse<Proteins> localVarResp = getProteinsUsingGETWithHttpInfo(accession, ec, fullName, gene, go, interpro, limit, omim, orphanet, page, pfam, reactome, taxId);
        return localVarResp.getData();
    }

    /**
     * Proteins collected from Uniprot for selective tax ids  HUMAN(9606), MOUSE(10090), RAT(10116), BOVINE(9913), ESCHERICHIA_COLI(83333), SUS_SCROFA(9823), MYCOBACTERIUM_TUBERCULOSIS(83332), ORYCTOLAGUS_CUNICULUS(9986), SACCHAROMYCES_CEREVISIAE(559292), CVHSA(694009) &amp; SARS2(2697049)
     * 
     * @param accession accession (optional)
     * @param ec ec (optional)
     * @param fullName fullName (optional)
     * @param gene gene (optional)
     * @param go go (optional)
     * @param interpro interpro (optional)
     * @param limit limit (optional, default to 10)
     * @param omim omim (optional)
     * @param orphanet orphanet (optional)
     * @param page page (optional, default to 0)
     * @param pfam pfam (optional)
     * @param reactome reactome (optional)
     * @param taxId taxId (optional)
     * @return ApiResponse&lt;Proteins&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Proteins> getProteinsUsingGETWithHttpInfo(List<String> accession, List<String> ec, List<String> fullName, List<String> gene, List<String> go, List<String> interpro, Integer limit, List<String> omim, List<String> orphanet, Integer page, List<String> pfam, List<String> reactome, List<Integer> taxId) throws ApiException {
        okhttp3.Call localVarCall = getProteinsUsingGETValidateBeforeCall(accession, ec, fullName, gene, go, interpro, limit, omim, orphanet, page, pfam, reactome, taxId, null);
        Type localVarReturnType = new TypeToken<Proteins>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Proteins collected from Uniprot for selective tax ids  HUMAN(9606), MOUSE(10090), RAT(10116), BOVINE(9913), ESCHERICHIA_COLI(83333), SUS_SCROFA(9823), MYCOBACTERIUM_TUBERCULOSIS(83332), ORYCTOLAGUS_CUNICULUS(9986), SACCHAROMYCES_CEREVISIAE(559292), CVHSA(694009) &amp; SARS2(2697049) (asynchronously)
     * 
     * @param accession accession (optional)
     * @param ec ec (optional)
     * @param fullName fullName (optional)
     * @param gene gene (optional)
     * @param go go (optional)
     * @param interpro interpro (optional)
     * @param limit limit (optional, default to 10)
     * @param omim omim (optional)
     * @param orphanet orphanet (optional)
     * @param page page (optional, default to 0)
     * @param pfam pfam (optional)
     * @param reactome reactome (optional)
     * @param taxId taxId (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProteinsUsingGETAsync(List<String> accession, List<String> ec, List<String> fullName, List<String> gene, List<String> go, List<String> interpro, Integer limit, List<String> omim, List<String> orphanet, Integer page, List<String> pfam, List<String> reactome, List<Integer> taxId, final ApiCallback<Proteins> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProteinsUsingGETValidateBeforeCall(accession, ec, fullName, gene, go, interpro, limit, omim, orphanet, page, pfam, reactome, taxId, _callback);
        Type localVarReturnType = new TypeToken<Proteins>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
