/*
 * CROssBAR Data API
 * # About CROssBAR & data **CROssBAR**: Comprehensive Resource of Biomedical Relations with Deep Learning Applications and Knowledge Graph Representations CROssBAR is a comprehensive system that integrates large-scale biomedical data from various resources e.g UniProt, ChEMBL, Drugbank, EFO, HPO, InterPro & PubChem and stores them in a new NoSQL database, enrich these data with deep learning based prediction of relations between numerous biomedical entities, rigorously analyse the enriched data to obtain biologically meaningful modules and display them to the user via easy to interpret, interactive and heterogeneous knowledge graphs. CROssBAR platform exposes a set of 12 endpoints to query data stored in the CROssBAR database. These endpoints help the user to find data of interest using different parameters provided by the API endpoint. For example, https://www.ebi.ac.uk/tools/crossbar/proteins?accession=A0A023GRW5 -> will provide protein information about accession 'A0A023GRW5' including its interactions, functions, cross-references, variations and more. https://www.ebi.ac.uk/tools/crossbar/activities?moleculeChemblId=CHEMBL465983 -> will provide ChEMBL bio-interactions related information including targets and bio-activity measurements associated with molecule chembl id 'CHEMBL465983'  **Knowledge graphs** Another use case of CROssBAR's API endpoints is in building knowledge graphs. These endpoints can be *weaved* together (output from one API endpoint fed as input to another API endpoint) programmatically to link nodes like protein, disease, drugs etc. as nodes of the graph. The endpoints are designed to be independent from each other which allows users the flexibility to drive biological networks from any facet e.g drug-centric, disease-centric, gene-centric etc. Our service for knowledge graph construction is available at https://crossbar.kansil.org. An example for the part of the background queries on the CROssBAR API during the construction of a knowledge graph,  (with the aim of keeping the example simple, we have only included the processes related to pathways, genes/proteins and drugs/compounds) In this example, we would like to find bio-active compounds (with a pChEMBL value threshold of at least 6.0) & drugs targeting all proteins belonging to \"WNT ligand biogenesis and trafficking\" pathway (based on Reactome pathway annotations). This can be achieved by using endpoints listed on this swagger documentation as illustrated in following steps- Find bio-active compounds (with a pChEMBL value threshold of at least 6.0) & drugs targeting all proteins belonging to \"WNT ligand biogenesis and trafficking\" pathway (based on Reactome annotations) This can be achieved by using endpoints listed on [this swagger documentation](https://www.ebi.ac.uk/tools/crossbar/swagger-ui.html) as illustrated in following steps- 1. Get all proteins from “/proteins” API endpoint which have a reactome pathway name equal to \"WNT ligand biogenesis and trafficking\". 2. From the collection of uniprot protein accessions collected from step 1 above, we query “/targets” API endpoint to obtain the ‘target_chembl_id’s of these proteins. 3. From the collection of target_chembl_ids collected from step 2 above, we query “/activities” API endpoint with pChEMBL value >=6, to obtain the ’molecule_chembl_id’s of the molecules that we need.  4. From the collection of uniprot protein accessions collected from step 1 above, we find out Drug names and ids from the “/drugs” API endpoint that targets our proteins. 5. From the collection of ’molecule_chembl_id’s obtained in step3, we query “/molecules” endpoint to get the compounds that are interacting with the genes/proteins belonging to the “WNT ligand biogenesis and trafficking” pathway.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: crossbar_dev@ebi.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Fragment;
import org.openapitools.client.model.HitPosition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Interpro
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:35.639788-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Interpro {
  public static final String SERIALIZED_NAME_ENTRY_ID = "entry_id";
  @SerializedName(SERIALIZED_NAME_ENTRY_ID)
  private String entryId;

  public static final String SERIALIZED_NAME_ENTRY_NAME = "entry_name";
  @SerializedName(SERIALIZED_NAME_ENTRY_NAME)
  private String entryName;

  public static final String SERIALIZED_NAME_ENTRY_TYPE = "entry_type";
  @SerializedName(SERIALIZED_NAME_ENTRY_TYPE)
  private String entryType;

  public static final String SERIALIZED_NAME_FRAGMENTS = "fragments";
  @SerializedName(SERIALIZED_NAME_FRAGMENTS)
  private List<Fragment> fragments = new ArrayList<>();

  public static final String SERIALIZED_NAME_HIT_POSITION = "hit_position";
  @SerializedName(SERIALIZED_NAME_HIT_POSITION)
  private HitPosition hitPosition;

  public Interpro() {
  }

  public Interpro entryId(String entryId) {
    this.entryId = entryId;
    return this;
  }

  /**
   * Get entryId
   * @return entryId
   */
  @javax.annotation.Nullable
  public String getEntryId() {
    return entryId;
  }

  public void setEntryId(String entryId) {
    this.entryId = entryId;
  }


  public Interpro entryName(String entryName) {
    this.entryName = entryName;
    return this;
  }

  /**
   * Get entryName
   * @return entryName
   */
  @javax.annotation.Nullable
  public String getEntryName() {
    return entryName;
  }

  public void setEntryName(String entryName) {
    this.entryName = entryName;
  }


  public Interpro entryType(String entryType) {
    this.entryType = entryType;
    return this;
  }

  /**
   * Get entryType
   * @return entryType
   */
  @javax.annotation.Nullable
  public String getEntryType() {
    return entryType;
  }

  public void setEntryType(String entryType) {
    this.entryType = entryType;
  }


  public Interpro fragments(List<Fragment> fragments) {
    this.fragments = fragments;
    return this;
  }

  public Interpro addFragmentsItem(Fragment fragmentsItem) {
    if (this.fragments == null) {
      this.fragments = new ArrayList<>();
    }
    this.fragments.add(fragmentsItem);
    return this;
  }

  /**
   * Get fragments
   * @return fragments
   */
  @javax.annotation.Nullable
  public List<Fragment> getFragments() {
    return fragments;
  }

  public void setFragments(List<Fragment> fragments) {
    this.fragments = fragments;
  }


  public Interpro hitPosition(HitPosition hitPosition) {
    this.hitPosition = hitPosition;
    return this;
  }

  /**
   * Get hitPosition
   * @return hitPosition
   */
  @javax.annotation.Nullable
  public HitPosition getHitPosition() {
    return hitPosition;
  }

  public void setHitPosition(HitPosition hitPosition) {
    this.hitPosition = hitPosition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Interpro interpro = (Interpro) o;
    return Objects.equals(this.entryId, interpro.entryId) &&
        Objects.equals(this.entryName, interpro.entryName) &&
        Objects.equals(this.entryType, interpro.entryType) &&
        Objects.equals(this.fragments, interpro.fragments) &&
        Objects.equals(this.hitPosition, interpro.hitPosition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entryId, entryName, entryType, fragments, hitPosition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Interpro {\n");
    sb.append("    entryId: ").append(toIndentedString(entryId)).append("\n");
    sb.append("    entryName: ").append(toIndentedString(entryName)).append("\n");
    sb.append("    entryType: ").append(toIndentedString(entryType)).append("\n");
    sb.append("    fragments: ").append(toIndentedString(fragments)).append("\n");
    sb.append("    hitPosition: ").append(toIndentedString(hitPosition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entry_id");
    openapiFields.add("entry_name");
    openapiFields.add("entry_type");
    openapiFields.add("fragments");
    openapiFields.add("hit_position");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Interpro
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Interpro.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Interpro is not found in the empty JSON string", Interpro.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Interpro.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Interpro` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("entry_id") != null && !jsonObj.get("entry_id").isJsonNull()) && !jsonObj.get("entry_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entry_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entry_id").toString()));
      }
      if ((jsonObj.get("entry_name") != null && !jsonObj.get("entry_name").isJsonNull()) && !jsonObj.get("entry_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entry_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entry_name").toString()));
      }
      if ((jsonObj.get("entry_type") != null && !jsonObj.get("entry_type").isJsonNull()) && !jsonObj.get("entry_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entry_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entry_type").toString()));
      }
      if (jsonObj.get("fragments") != null && !jsonObj.get("fragments").isJsonNull()) {
        JsonArray jsonArrayfragments = jsonObj.getAsJsonArray("fragments");
        if (jsonArrayfragments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fragments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fragments` to be an array in the JSON string but got `%s`", jsonObj.get("fragments").toString()));
          }

          // validate the optional field `fragments` (array)
          for (int i = 0; i < jsonArrayfragments.size(); i++) {
            Fragment.validateJsonElement(jsonArrayfragments.get(i));
          };
        }
      }
      // validate the optional field `hit_position`
      if (jsonObj.get("hit_position") != null && !jsonObj.get("hit_position").isJsonNull()) {
        HitPosition.validateJsonElement(jsonObj.get("hit_position"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Interpro.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Interpro' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Interpro> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Interpro.class));

       return (TypeAdapter<T>) new TypeAdapter<Interpro>() {
           @Override
           public void write(JsonWriter out, Interpro value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Interpro read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Interpro given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Interpro
   * @throws IOException if the JSON string is invalid with respect to Interpro
   */
  public static Interpro fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Interpro.class);
  }

  /**
   * Convert an instance of Interpro to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

