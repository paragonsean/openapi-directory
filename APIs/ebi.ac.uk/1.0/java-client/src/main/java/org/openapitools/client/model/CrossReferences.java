/*
 * CROssBAR Data API
 * # About CROssBAR & data **CROssBAR**: Comprehensive Resource of Biomedical Relations with Deep Learning Applications and Knowledge Graph Representations CROssBAR is a comprehensive system that integrates large-scale biomedical data from various resources e.g UniProt, ChEMBL, Drugbank, EFO, HPO, InterPro & PubChem and stores them in a new NoSQL database, enrich these data with deep learning based prediction of relations between numerous biomedical entities, rigorously analyse the enriched data to obtain biologically meaningful modules and display them to the user via easy to interpret, interactive and heterogeneous knowledge graphs. CROssBAR platform exposes a set of 12 endpoints to query data stored in the CROssBAR database. These endpoints help the user to find data of interest using different parameters provided by the API endpoint. For example, https://www.ebi.ac.uk/tools/crossbar/proteins?accession=A0A023GRW5 -> will provide protein information about accession 'A0A023GRW5' including its interactions, functions, cross-references, variations and more. https://www.ebi.ac.uk/tools/crossbar/activities?moleculeChemblId=CHEMBL465983 -> will provide ChEMBL bio-interactions related information including targets and bio-activity measurements associated with molecule chembl id 'CHEMBL465983'  **Knowledge graphs** Another use case of CROssBAR's API endpoints is in building knowledge graphs. These endpoints can be *weaved* together (output from one API endpoint fed as input to another API endpoint) programmatically to link nodes like protein, disease, drugs etc. as nodes of the graph. The endpoints are designed to be independent from each other which allows users the flexibility to drive biological networks from any facet e.g drug-centric, disease-centric, gene-centric etc. Our service for knowledge graph construction is available at https://crossbar.kansil.org. An example for the part of the background queries on the CROssBAR API during the construction of a knowledge graph,  (with the aim of keeping the example simple, we have only included the processes related to pathways, genes/proteins and drugs/compounds) In this example, we would like to find bio-active compounds (with a pChEMBL value threshold of at least 6.0) & drugs targeting all proteins belonging to \"WNT ligand biogenesis and trafficking\" pathway (based on Reactome pathway annotations). This can be achieved by using endpoints listed on this swagger documentation as illustrated in following steps- Find bio-active compounds (with a pChEMBL value threshold of at least 6.0) & drugs targeting all proteins belonging to \"WNT ligand biogenesis and trafficking\" pathway (based on Reactome annotations) This can be achieved by using endpoints listed on [this swagger documentation](https://www.ebi.ac.uk/tools/crossbar/swagger-ui.html) as illustrated in following steps- 1. Get all proteins from “/proteins” API endpoint which have a reactome pathway name equal to \"WNT ligand biogenesis and trafficking\". 2. From the collection of uniprot protein accessions collected from step 1 above, we query “/targets” API endpoint to obtain the ‘target_chembl_id’s of these proteins. 3. From the collection of target_chembl_ids collected from step 2 above, we query “/activities” API endpoint with pChEMBL value >=6, to obtain the ’molecule_chembl_id’s of the molecules that we need.  4. From the collection of uniprot protein accessions collected from step 1 above, we find out Drug names and ids from the “/drugs” API endpoint that targets our proteins. 5. From the collection of ’molecule_chembl_id’s obtained in step3, we query “/molecules” endpoint to get the compounds that are interacting with the genes/proteins belonging to the “WNT ligand biogenesis and trafficking” pathway.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: crossbar_dev@ebi.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Ensembl;
import org.openapitools.client.model.Go;
import org.openapitools.client.model.Interpro;
import org.openapitools.client.model.Kegg;
import org.openapitools.client.model.Omim;
import org.openapitools.client.model.OpenTargets;
import org.openapitools.client.model.Orphanet;
import org.openapitools.client.model.PDBe;
import org.openapitools.client.model.Pfam;
import org.openapitools.client.model.Reactome;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CrossReferences
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:35.639788-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CrossReferences {
  public static final String SERIALIZED_NAME_ENSEMBL = "ensembl";
  @SerializedName(SERIALIZED_NAME_ENSEMBL)
  private List<Ensembl> ensembl = new ArrayList<>();

  public static final String SERIALIZED_NAME_GO = "go";
  @SerializedName(SERIALIZED_NAME_GO)
  private List<Go> go = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTERPRO = "interpro";
  @SerializedName(SERIALIZED_NAME_INTERPRO)
  private List<Interpro> interpro = new ArrayList<>();

  public static final String SERIALIZED_NAME_KEGG = "kegg";
  @SerializedName(SERIALIZED_NAME_KEGG)
  private List<Kegg> kegg = new ArrayList<>();

  public static final String SERIALIZED_NAME_OMIM = "omim";
  @SerializedName(SERIALIZED_NAME_OMIM)
  private List<Omim> omim = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPEN_TARGETS = "openTargets";
  @SerializedName(SERIALIZED_NAME_OPEN_TARGETS)
  private List<OpenTargets> openTargets = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORPHANET = "orphanet";
  @SerializedName(SERIALIZED_NAME_ORPHANET)
  private List<Orphanet> orphanet = new ArrayList<>();

  public static final String SERIALIZED_NAME_PD_BE = "pdBe";
  @SerializedName(SERIALIZED_NAME_PD_BE)
  private List<PDBe> pdBe = new ArrayList<>();

  public static final String SERIALIZED_NAME_PFAM = "pfam";
  @SerializedName(SERIALIZED_NAME_PFAM)
  private List<Pfam> pfam = new ArrayList<>();

  public static final String SERIALIZED_NAME_REACTOME = "reactome";
  @SerializedName(SERIALIZED_NAME_REACTOME)
  private List<Reactome> reactome = new ArrayList<>();

  public CrossReferences() {
  }

  public CrossReferences ensembl(List<Ensembl> ensembl) {
    this.ensembl = ensembl;
    return this;
  }

  public CrossReferences addEnsemblItem(Ensembl ensemblItem) {
    if (this.ensembl == null) {
      this.ensembl = new ArrayList<>();
    }
    this.ensembl.add(ensemblItem);
    return this;
  }

  /**
   * Get ensembl
   * @return ensembl
   */
  @javax.annotation.Nullable
  public List<Ensembl> getEnsembl() {
    return ensembl;
  }

  public void setEnsembl(List<Ensembl> ensembl) {
    this.ensembl = ensembl;
  }


  public CrossReferences go(List<Go> go) {
    this.go = go;
    return this;
  }

  public CrossReferences addGoItem(Go goItem) {
    if (this.go == null) {
      this.go = new ArrayList<>();
    }
    this.go.add(goItem);
    return this;
  }

  /**
   * Get go
   * @return go
   */
  @javax.annotation.Nullable
  public List<Go> getGo() {
    return go;
  }

  public void setGo(List<Go> go) {
    this.go = go;
  }


  public CrossReferences interpro(List<Interpro> interpro) {
    this.interpro = interpro;
    return this;
  }

  public CrossReferences addInterproItem(Interpro interproItem) {
    if (this.interpro == null) {
      this.interpro = new ArrayList<>();
    }
    this.interpro.add(interproItem);
    return this;
  }

  /**
   * Get interpro
   * @return interpro
   */
  @javax.annotation.Nullable
  public List<Interpro> getInterpro() {
    return interpro;
  }

  public void setInterpro(List<Interpro> interpro) {
    this.interpro = interpro;
  }


  public CrossReferences kegg(List<Kegg> kegg) {
    this.kegg = kegg;
    return this;
  }

  public CrossReferences addKeggItem(Kegg keggItem) {
    if (this.kegg == null) {
      this.kegg = new ArrayList<>();
    }
    this.kegg.add(keggItem);
    return this;
  }

  /**
   * Get kegg
   * @return kegg
   */
  @javax.annotation.Nullable
  public List<Kegg> getKegg() {
    return kegg;
  }

  public void setKegg(List<Kegg> kegg) {
    this.kegg = kegg;
  }


  public CrossReferences omim(List<Omim> omim) {
    this.omim = omim;
    return this;
  }

  public CrossReferences addOmimItem(Omim omimItem) {
    if (this.omim == null) {
      this.omim = new ArrayList<>();
    }
    this.omim.add(omimItem);
    return this;
  }

  /**
   * Get omim
   * @return omim
   */
  @javax.annotation.Nullable
  public List<Omim> getOmim() {
    return omim;
  }

  public void setOmim(List<Omim> omim) {
    this.omim = omim;
  }


  public CrossReferences openTargets(List<OpenTargets> openTargets) {
    this.openTargets = openTargets;
    return this;
  }

  public CrossReferences addOpenTargetsItem(OpenTargets openTargetsItem) {
    if (this.openTargets == null) {
      this.openTargets = new ArrayList<>();
    }
    this.openTargets.add(openTargetsItem);
    return this;
  }

  /**
   * Get openTargets
   * @return openTargets
   */
  @javax.annotation.Nullable
  public List<OpenTargets> getOpenTargets() {
    return openTargets;
  }

  public void setOpenTargets(List<OpenTargets> openTargets) {
    this.openTargets = openTargets;
  }


  public CrossReferences orphanet(List<Orphanet> orphanet) {
    this.orphanet = orphanet;
    return this;
  }

  public CrossReferences addOrphanetItem(Orphanet orphanetItem) {
    if (this.orphanet == null) {
      this.orphanet = new ArrayList<>();
    }
    this.orphanet.add(orphanetItem);
    return this;
  }

  /**
   * Get orphanet
   * @return orphanet
   */
  @javax.annotation.Nullable
  public List<Orphanet> getOrphanet() {
    return orphanet;
  }

  public void setOrphanet(List<Orphanet> orphanet) {
    this.orphanet = orphanet;
  }


  public CrossReferences pdBe(List<PDBe> pdBe) {
    this.pdBe = pdBe;
    return this;
  }

  public CrossReferences addPdBeItem(PDBe pdBeItem) {
    if (this.pdBe == null) {
      this.pdBe = new ArrayList<>();
    }
    this.pdBe.add(pdBeItem);
    return this;
  }

  /**
   * Get pdBe
   * @return pdBe
   */
  @javax.annotation.Nullable
  public List<PDBe> getPdBe() {
    return pdBe;
  }

  public void setPdBe(List<PDBe> pdBe) {
    this.pdBe = pdBe;
  }


  public CrossReferences pfam(List<Pfam> pfam) {
    this.pfam = pfam;
    return this;
  }

  public CrossReferences addPfamItem(Pfam pfamItem) {
    if (this.pfam == null) {
      this.pfam = new ArrayList<>();
    }
    this.pfam.add(pfamItem);
    return this;
  }

  /**
   * Get pfam
   * @return pfam
   */
  @javax.annotation.Nullable
  public List<Pfam> getPfam() {
    return pfam;
  }

  public void setPfam(List<Pfam> pfam) {
    this.pfam = pfam;
  }


  public CrossReferences reactome(List<Reactome> reactome) {
    this.reactome = reactome;
    return this;
  }

  public CrossReferences addReactomeItem(Reactome reactomeItem) {
    if (this.reactome == null) {
      this.reactome = new ArrayList<>();
    }
    this.reactome.add(reactomeItem);
    return this;
  }

  /**
   * Get reactome
   * @return reactome
   */
  @javax.annotation.Nullable
  public List<Reactome> getReactome() {
    return reactome;
  }

  public void setReactome(List<Reactome> reactome) {
    this.reactome = reactome;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CrossReferences crossReferences = (CrossReferences) o;
    return Objects.equals(this.ensembl, crossReferences.ensembl) &&
        Objects.equals(this.go, crossReferences.go) &&
        Objects.equals(this.interpro, crossReferences.interpro) &&
        Objects.equals(this.kegg, crossReferences.kegg) &&
        Objects.equals(this.omim, crossReferences.omim) &&
        Objects.equals(this.openTargets, crossReferences.openTargets) &&
        Objects.equals(this.orphanet, crossReferences.orphanet) &&
        Objects.equals(this.pdBe, crossReferences.pdBe) &&
        Objects.equals(this.pfam, crossReferences.pfam) &&
        Objects.equals(this.reactome, crossReferences.reactome);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ensembl, go, interpro, kegg, omim, openTargets, orphanet, pdBe, pfam, reactome);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CrossReferences {\n");
    sb.append("    ensembl: ").append(toIndentedString(ensembl)).append("\n");
    sb.append("    go: ").append(toIndentedString(go)).append("\n");
    sb.append("    interpro: ").append(toIndentedString(interpro)).append("\n");
    sb.append("    kegg: ").append(toIndentedString(kegg)).append("\n");
    sb.append("    omim: ").append(toIndentedString(omim)).append("\n");
    sb.append("    openTargets: ").append(toIndentedString(openTargets)).append("\n");
    sb.append("    orphanet: ").append(toIndentedString(orphanet)).append("\n");
    sb.append("    pdBe: ").append(toIndentedString(pdBe)).append("\n");
    sb.append("    pfam: ").append(toIndentedString(pfam)).append("\n");
    sb.append("    reactome: ").append(toIndentedString(reactome)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ensembl");
    openapiFields.add("go");
    openapiFields.add("interpro");
    openapiFields.add("kegg");
    openapiFields.add("omim");
    openapiFields.add("openTargets");
    openapiFields.add("orphanet");
    openapiFields.add("pdBe");
    openapiFields.add("pfam");
    openapiFields.add("reactome");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CrossReferences
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CrossReferences.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CrossReferences is not found in the empty JSON string", CrossReferences.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CrossReferences.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CrossReferences` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("ensembl") != null && !jsonObj.get("ensembl").isJsonNull()) {
        JsonArray jsonArrayensembl = jsonObj.getAsJsonArray("ensembl");
        if (jsonArrayensembl != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ensembl").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ensembl` to be an array in the JSON string but got `%s`", jsonObj.get("ensembl").toString()));
          }

          // validate the optional field `ensembl` (array)
          for (int i = 0; i < jsonArrayensembl.size(); i++) {
            Ensembl.validateJsonElement(jsonArrayensembl.get(i));
          };
        }
      }
      if (jsonObj.get("go") != null && !jsonObj.get("go").isJsonNull()) {
        JsonArray jsonArraygo = jsonObj.getAsJsonArray("go");
        if (jsonArraygo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("go").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `go` to be an array in the JSON string but got `%s`", jsonObj.get("go").toString()));
          }

          // validate the optional field `go` (array)
          for (int i = 0; i < jsonArraygo.size(); i++) {
            Go.validateJsonElement(jsonArraygo.get(i));
          };
        }
      }
      if (jsonObj.get("interpro") != null && !jsonObj.get("interpro").isJsonNull()) {
        JsonArray jsonArrayinterpro = jsonObj.getAsJsonArray("interpro");
        if (jsonArrayinterpro != null) {
          // ensure the json data is an array
          if (!jsonObj.get("interpro").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `interpro` to be an array in the JSON string but got `%s`", jsonObj.get("interpro").toString()));
          }

          // validate the optional field `interpro` (array)
          for (int i = 0; i < jsonArrayinterpro.size(); i++) {
            Interpro.validateJsonElement(jsonArrayinterpro.get(i));
          };
        }
      }
      if (jsonObj.get("kegg") != null && !jsonObj.get("kegg").isJsonNull()) {
        JsonArray jsonArraykegg = jsonObj.getAsJsonArray("kegg");
        if (jsonArraykegg != null) {
          // ensure the json data is an array
          if (!jsonObj.get("kegg").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `kegg` to be an array in the JSON string but got `%s`", jsonObj.get("kegg").toString()));
          }

          // validate the optional field `kegg` (array)
          for (int i = 0; i < jsonArraykegg.size(); i++) {
            Kegg.validateJsonElement(jsonArraykegg.get(i));
          };
        }
      }
      if (jsonObj.get("omim") != null && !jsonObj.get("omim").isJsonNull()) {
        JsonArray jsonArrayomim = jsonObj.getAsJsonArray("omim");
        if (jsonArrayomim != null) {
          // ensure the json data is an array
          if (!jsonObj.get("omim").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `omim` to be an array in the JSON string but got `%s`", jsonObj.get("omim").toString()));
          }

          // validate the optional field `omim` (array)
          for (int i = 0; i < jsonArrayomim.size(); i++) {
            Omim.validateJsonElement(jsonArrayomim.get(i));
          };
        }
      }
      if (jsonObj.get("openTargets") != null && !jsonObj.get("openTargets").isJsonNull()) {
        JsonArray jsonArrayopenTargets = jsonObj.getAsJsonArray("openTargets");
        if (jsonArrayopenTargets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("openTargets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `openTargets` to be an array in the JSON string but got `%s`", jsonObj.get("openTargets").toString()));
          }

          // validate the optional field `openTargets` (array)
          for (int i = 0; i < jsonArrayopenTargets.size(); i++) {
            OpenTargets.validateJsonElement(jsonArrayopenTargets.get(i));
          };
        }
      }
      if (jsonObj.get("orphanet") != null && !jsonObj.get("orphanet").isJsonNull()) {
        JsonArray jsonArrayorphanet = jsonObj.getAsJsonArray("orphanet");
        if (jsonArrayorphanet != null) {
          // ensure the json data is an array
          if (!jsonObj.get("orphanet").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `orphanet` to be an array in the JSON string but got `%s`", jsonObj.get("orphanet").toString()));
          }

          // validate the optional field `orphanet` (array)
          for (int i = 0; i < jsonArrayorphanet.size(); i++) {
            Orphanet.validateJsonElement(jsonArrayorphanet.get(i));
          };
        }
      }
      if (jsonObj.get("pdBe") != null && !jsonObj.get("pdBe").isJsonNull()) {
        JsonArray jsonArraypdBe = jsonObj.getAsJsonArray("pdBe");
        if (jsonArraypdBe != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pdBe").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pdBe` to be an array in the JSON string but got `%s`", jsonObj.get("pdBe").toString()));
          }

          // validate the optional field `pdBe` (array)
          for (int i = 0; i < jsonArraypdBe.size(); i++) {
            PDBe.validateJsonElement(jsonArraypdBe.get(i));
          };
        }
      }
      if (jsonObj.get("pfam") != null && !jsonObj.get("pfam").isJsonNull()) {
        JsonArray jsonArraypfam = jsonObj.getAsJsonArray("pfam");
        if (jsonArraypfam != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pfam").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pfam` to be an array in the JSON string but got `%s`", jsonObj.get("pfam").toString()));
          }

          // validate the optional field `pfam` (array)
          for (int i = 0; i < jsonArraypfam.size(); i++) {
            Pfam.validateJsonElement(jsonArraypfam.get(i));
          };
        }
      }
      if (jsonObj.get("reactome") != null && !jsonObj.get("reactome").isJsonNull()) {
        JsonArray jsonArrayreactome = jsonObj.getAsJsonArray("reactome");
        if (jsonArrayreactome != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reactome").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reactome` to be an array in the JSON string but got `%s`", jsonObj.get("reactome").toString()));
          }

          // validate the optional field `reactome` (array)
          for (int i = 0; i < jsonArrayreactome.size(); i++) {
            Reactome.validateJsonElement(jsonArrayreactome.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CrossReferences.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CrossReferences' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CrossReferences> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CrossReferences.class));

       return (TypeAdapter<T>) new TypeAdapter<CrossReferences>() {
           @Override
           public void write(JsonWriter out, CrossReferences value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CrossReferences read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CrossReferences given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CrossReferences
   * @throws IOException if the JSON string is invalid with respect to CrossReferences
   */
  public static CrossReferences fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CrossReferences.class);
  }

  /**
   * Convert an instance of CrossReferences to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

