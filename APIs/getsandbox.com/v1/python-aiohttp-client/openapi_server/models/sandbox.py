# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.configured_route_details import ConfiguredRouteDetails
import re
from openapi_server import util


class Sandbox(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_definition: str=None, child_sandboxes: list[Sandbox]=None, configured_routes: list[ConfiguredRouteDetails]=None, description: str=None, git_access_token: str=None, git_url: str=None, has_repository: bool=None, id: str=None, ip_whitelist: list[str]=None, name: str=None, parent_sandbox: Sandbox=None, properties: Dict[str, object]=None, proxy_status: str=None, runtime_version: str=None, sandbox_url: str=None, stack_type: str=None, transport_type: str=None):
        """Sandbox - a model defined in OpenAPI

        :param api_definition: The api_definition of this Sandbox.
        :param child_sandboxes: The child_sandboxes of this Sandbox.
        :param configured_routes: The configured_routes of this Sandbox.
        :param description: The description of this Sandbox.
        :param git_access_token: The git_access_token of this Sandbox.
        :param git_url: The git_url of this Sandbox.
        :param has_repository: The has_repository of this Sandbox.
        :param id: The id of this Sandbox.
        :param ip_whitelist: The ip_whitelist of this Sandbox.
        :param name: The name of this Sandbox.
        :param parent_sandbox: The parent_sandbox of this Sandbox.
        :param properties: The properties of this Sandbox.
        :param proxy_status: The proxy_status of this Sandbox.
        :param runtime_version: The runtime_version of this Sandbox.
        :param sandbox_url: The sandbox_url of this Sandbox.
        :param stack_type: The stack_type of this Sandbox.
        :param transport_type: The transport_type of this Sandbox.
        """
        self.openapi_types = {
            'api_definition': str,
            'child_sandboxes': list[Sandbox],
            'configured_routes': list[ConfiguredRouteDetails],
            'description': str,
            'git_access_token': str,
            'git_url': str,
            'has_repository': bool,
            'id': str,
            'ip_whitelist': list[str],
            'name': str,
            'parent_sandbox': Sandbox,
            'properties': Dict[str, object],
            'proxy_status': str,
            'runtime_version': str,
            'sandbox_url': str,
            'stack_type': str,
            'transport_type': str
        }

        self.attribute_map = {
            'api_definition': 'apiDefinition',
            'child_sandboxes': 'childSandboxes',
            'configured_routes': 'configuredRoutes',
            'description': 'description',
            'git_access_token': 'gitAccessToken',
            'git_url': 'gitUrl',
            'has_repository': 'hasRepository',
            'id': 'id',
            'ip_whitelist': 'ipWhitelist',
            'name': 'name',
            'parent_sandbox': 'parentSandbox',
            'properties': 'properties',
            'proxy_status': 'proxyStatus',
            'runtime_version': 'runtimeVersion',
            'sandbox_url': 'sandboxUrl',
            'stack_type': 'stackType',
            'transport_type': 'transportType'
        }

        self._api_definition = api_definition
        self._child_sandboxes = child_sandboxes
        self._configured_routes = configured_routes
        self._description = description
        self._git_access_token = git_access_token
        self._git_url = git_url
        self._has_repository = has_repository
        self._id = id
        self._ip_whitelist = ip_whitelist
        self._name = name
        self._parent_sandbox = parent_sandbox
        self._properties = properties
        self._proxy_status = proxy_status
        self._runtime_version = runtime_version
        self._sandbox_url = sandbox_url
        self._stack_type = stack_type
        self._transport_type = transport_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sandbox':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sandbox of this Sandbox.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_definition(self):
        """Gets the api_definition of this Sandbox.

        The import source of this Sandbox.

        :return: The api_definition of this Sandbox.
        :rtype: str
        """
        return self._api_definition

    @api_definition.setter
    def api_definition(self, api_definition):
        """Sets the api_definition of this Sandbox.

        The import source of this Sandbox.

        :param api_definition: The api_definition of this Sandbox.
        :type api_definition: str
        """
        allowed_values = ["None", "Apiary", "Swagger_V2_Json", "RAML_V08", "WSDL"]  # noqa: E501
        if api_definition not in allowed_values:
            raise ValueError(
                "Invalid value for `api_definition` ({0}), must be one of {1}"
                .format(api_definition, allowed_values)
            )

        self._api_definition = api_definition

    @property
    def child_sandboxes(self):
        """Gets the child_sandboxes of this Sandbox.

        Clones of this Sandbox.

        :return: The child_sandboxes of this Sandbox.
        :rtype: list[Sandbox]
        """
        return self._child_sandboxes

    @child_sandboxes.setter
    def child_sandboxes(self, child_sandboxes):
        """Sets the child_sandboxes of this Sandbox.

        Clones of this Sandbox.

        :param child_sandboxes: The child_sandboxes of this Sandbox.
        :type child_sandboxes: list[Sandbox]
        """

        self._child_sandboxes = child_sandboxes

    @property
    def configured_routes(self):
        """Gets the configured_routes of this Sandbox.

        Extra configuration applied to some routes, delays, overrides etc.

        :return: The configured_routes of this Sandbox.
        :rtype: list[ConfiguredRouteDetails]
        """
        return self._configured_routes

    @configured_routes.setter
    def configured_routes(self, configured_routes):
        """Sets the configured_routes of this Sandbox.

        Extra configuration applied to some routes, delays, overrides etc.

        :param configured_routes: The configured_routes of this Sandbox.
        :type configured_routes: list[ConfiguredRouteDetails]
        """

        self._configured_routes = configured_routes

    @property
    def description(self):
        """Gets the description of this Sandbox.


        :return: The description of this Sandbox.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Sandbox.


        :param description: The description of this Sandbox.
        :type description: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")
        if description is not None and not re.search(r'^[A-Za-z0-9 _\-]*$', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/^[A-Za-z0-9 _\-]*$/`")

        self._description = description

    @property
    def git_access_token(self):
        """Gets the git_access_token of this Sandbox.


        :return: The git_access_token of this Sandbox.
        :rtype: str
        """
        return self._git_access_token

    @git_access_token.setter
    def git_access_token(self, git_access_token):
        """Sets the git_access_token of this Sandbox.


        :param git_access_token: The git_access_token of this Sandbox.
        :type git_access_token: str
        """

        self._git_access_token = git_access_token

    @property
    def git_url(self):
        """Gets the git_url of this Sandbox.

        The git clone URL.

        :return: The git_url of this Sandbox.
        :rtype: str
        """
        return self._git_url

    @git_url.setter
    def git_url(self, git_url):
        """Sets the git_url of this Sandbox.

        The git clone URL.

        :param git_url: The git_url of this Sandbox.
        :type git_url: str
        """

        self._git_url = git_url

    @property
    def has_repository(self):
        """Gets the has_repository of this Sandbox.

        Whether this Sandbox has a git repository or not.

        :return: The has_repository of this Sandbox.
        :rtype: bool
        """
        return self._has_repository

    @has_repository.setter
    def has_repository(self, has_repository):
        """Sets the has_repository of this Sandbox.

        Whether this Sandbox has a git repository or not.

        :param has_repository: The has_repository of this Sandbox.
        :type has_repository: bool
        """

        self._has_repository = has_repository

    @property
    def id(self):
        """Gets the id of this Sandbox.

        The ID of the Sandbox.

        :return: The id of this Sandbox.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Sandbox.

        The ID of the Sandbox.

        :param id: The id of this Sandbox.
        :type id: str
        """

        self._id = id

    @property
    def ip_whitelist(self):
        """Gets the ip_whitelist of this Sandbox.

        The list of IPs allowed to make requests, all allowed if omitted.

        :return: The ip_whitelist of this Sandbox.
        :rtype: list[str]
        """
        return self._ip_whitelist

    @ip_whitelist.setter
    def ip_whitelist(self, ip_whitelist):
        """Sets the ip_whitelist of this Sandbox.

        The list of IPs allowed to make requests, all allowed if omitted.

        :param ip_whitelist: The ip_whitelist of this Sandbox.
        :type ip_whitelist: list[str]
        """

        self._ip_whitelist = ip_whitelist

    @property
    def name(self):
        """Gets the name of this Sandbox.


        :return: The name of this Sandbox.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Sandbox.


        :param name: The name of this Sandbox.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and not re.search(r'^[a-z0-9\-]*$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-z0-9\-]*$/`")

        self._name = name

    @property
    def parent_sandbox(self):
        """Gets the parent_sandbox of this Sandbox.


        :return: The parent_sandbox of this Sandbox.
        :rtype: Sandbox
        """
        return self._parent_sandbox

    @parent_sandbox.setter
    def parent_sandbox(self, parent_sandbox):
        """Sets the parent_sandbox of this Sandbox.


        :param parent_sandbox: The parent_sandbox of this Sandbox.
        :type parent_sandbox: Sandbox
        """

        self._parent_sandbox = parent_sandbox

    @property
    def properties(self):
        """Gets the properties of this Sandbox.


        :return: The properties of this Sandbox.
        :rtype: Dict[str, object]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Sandbox.


        :param properties: The properties of this Sandbox.
        :type properties: Dict[str, object]
        """

        self._properties = properties

    @property
    def proxy_status(self):
        """Gets the proxy_status of this Sandbox.

        The listener status.

        :return: The proxy_status of this Sandbox.
        :rtype: str
        """
        return self._proxy_status

    @proxy_status.setter
    def proxy_status(self, proxy_status):
        """Sets the proxy_status of this Sandbox.

        The listener status.

        :param proxy_status: The proxy_status of this Sandbox.
        :type proxy_status: str
        """
        allowed_values = ["STARTED", "STOPPED"]  # noqa: E501
        if proxy_status not in allowed_values:
            raise ValueError(
                "Invalid value for `proxy_status` ({0}), must be one of {1}"
                .format(proxy_status, allowed_values)
            )

        self._proxy_status = proxy_status

    @property
    def runtime_version(self):
        """Gets the runtime_version of this Sandbox.

        The library version of this Sandbox.

        :return: The runtime_version of this Sandbox.
        :rtype: str
        """
        return self._runtime_version

    @runtime_version.setter
    def runtime_version(self, runtime_version):
        """Sets the runtime_version of this Sandbox.

        The library version of this Sandbox.

        :param runtime_version: The runtime_version of this Sandbox.
        :type runtime_version: str
        """
        allowed_values = ["VERSION_1", "VERSION_2"]  # noqa: E501
        if runtime_version not in allowed_values:
            raise ValueError(
                "Invalid value for `runtime_version` ({0}), must be one of {1}"
                .format(runtime_version, allowed_values)
            )

        self._runtime_version = runtime_version

    @property
    def sandbox_url(self):
        """Gets the sandbox_url of this Sandbox.

        The request URL for this Sandbox.

        :return: The sandbox_url of this Sandbox.
        :rtype: str
        """
        return self._sandbox_url

    @sandbox_url.setter
    def sandbox_url(self, sandbox_url):
        """Sets the sandbox_url of this Sandbox.

        The request URL for this Sandbox.

        :param sandbox_url: The sandbox_url of this Sandbox.
        :type sandbox_url: str
        """

        self._sandbox_url = sandbox_url

    @property
    def stack_type(self):
        """Gets the stack_type of this Sandbox.


        :return: The stack_type of this Sandbox.
        :rtype: str
        """
        return self._stack_type

    @stack_type.setter
    def stack_type(self, stack_type):
        """Sets the stack_type of this Sandbox.


        :param stack_type: The stack_type of this Sandbox.
        :type stack_type: str
        """
        allowed_values = ["JavaScript"]  # noqa: E501
        if stack_type not in allowed_values:
            raise ValueError(
                "Invalid value for `stack_type` ({0}), must be one of {1}"
                .format(stack_type, allowed_values)
            )

        self._stack_type = stack_type

    @property
    def transport_type(self):
        """Gets the transport_type of this Sandbox.

        The listener transport.

        :return: The transport_type of this Sandbox.
        :rtype: str
        """
        return self._transport_type

    @transport_type.setter
    def transport_type(self, transport_type):
        """Sets the transport_type of this Sandbox.

        The listener transport.

        :param transport_type: The transport_type of this Sandbox.
        :type transport_type: str
        """
        allowed_values = ["HTTP"]  # noqa: E501
        if transport_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transport_type` ({0}), must be one of {1}"
                .format(transport_type, allowed_values)
            )

        self._transport_type = transport_type
