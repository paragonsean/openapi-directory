# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RuntimeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, content_type: str=None, full_sandbox_id: str=None, full_sandbox_name: str=None, headers: Dict[str, str]=None, ip: str=None, properties: Dict[str, str]=None, received_timestamp: int=None, sandbox_id: str=None, sandbox_name: str=None, transport: str=None):
        """RuntimeRequest - a model defined in OpenAPI

        :param body: The body of this RuntimeRequest.
        :param content_type: The content_type of this RuntimeRequest.
        :param full_sandbox_id: The full_sandbox_id of this RuntimeRequest.
        :param full_sandbox_name: The full_sandbox_name of this RuntimeRequest.
        :param headers: The headers of this RuntimeRequest.
        :param ip: The ip of this RuntimeRequest.
        :param properties: The properties of this RuntimeRequest.
        :param received_timestamp: The received_timestamp of this RuntimeRequest.
        :param sandbox_id: The sandbox_id of this RuntimeRequest.
        :param sandbox_name: The sandbox_name of this RuntimeRequest.
        :param transport: The transport of this RuntimeRequest.
        """
        self.openapi_types = {
            'body': str,
            'content_type': str,
            'full_sandbox_id': str,
            'full_sandbox_name': str,
            'headers': Dict[str, str],
            'ip': str,
            'properties': Dict[str, str],
            'received_timestamp': int,
            'sandbox_id': str,
            'sandbox_name': str,
            'transport': str
        }

        self.attribute_map = {
            'body': 'body',
            'content_type': 'contentType',
            'full_sandbox_id': 'fullSandboxId',
            'full_sandbox_name': 'fullSandboxName',
            'headers': 'headers',
            'ip': 'ip',
            'properties': 'properties',
            'received_timestamp': 'receivedTimestamp',
            'sandbox_id': 'sandboxId',
            'sandbox_name': 'sandboxName',
            'transport': 'transport'
        }

        self._body = body
        self._content_type = content_type
        self._full_sandbox_id = full_sandbox_id
        self._full_sandbox_name = full_sandbox_name
        self._headers = headers
        self._ip = ip
        self._properties = properties
        self._received_timestamp = received_timestamp
        self._sandbox_id = sandbox_id
        self._sandbox_name = sandbox_name
        self._transport = transport

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuntimeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuntimeRequest of this RuntimeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this RuntimeRequest.

        The body of the given request.

        :return: The body of this RuntimeRequest.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this RuntimeRequest.

        The body of the given request.

        :param body: The body of this RuntimeRequest.
        :type body: str
        """

        self._body = body

    @property
    def content_type(self):
        """Gets the content_type of this RuntimeRequest.

        The content type of the body, for example 'application/json'.

        :return: The content_type of this RuntimeRequest.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this RuntimeRequest.

        The content type of the body, for example 'application/json'.

        :param content_type: The content_type of this RuntimeRequest.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def full_sandbox_id(self):
        """Gets the full_sandbox_id of this RuntimeRequest.

        The parent ID of the Sandbox that received the request.

        :return: The full_sandbox_id of this RuntimeRequest.
        :rtype: str
        """
        return self._full_sandbox_id

    @full_sandbox_id.setter
    def full_sandbox_id(self, full_sandbox_id):
        """Sets the full_sandbox_id of this RuntimeRequest.

        The parent ID of the Sandbox that received the request.

        :param full_sandbox_id: The full_sandbox_id of this RuntimeRequest.
        :type full_sandbox_id: str
        """

        self._full_sandbox_id = full_sandbox_id

    @property
    def full_sandbox_name(self):
        """Gets the full_sandbox_name of this RuntimeRequest.

        The parent name of the Sandbox that received the request.

        :return: The full_sandbox_name of this RuntimeRequest.
        :rtype: str
        """
        return self._full_sandbox_name

    @full_sandbox_name.setter
    def full_sandbox_name(self, full_sandbox_name):
        """Sets the full_sandbox_name of this RuntimeRequest.

        The parent name of the Sandbox that received the request.

        :param full_sandbox_name: The full_sandbox_name of this RuntimeRequest.
        :type full_sandbox_name: str
        """

        self._full_sandbox_name = full_sandbox_name

    @property
    def headers(self):
        """Gets the headers of this RuntimeRequest.

        Transport headers for the given request.

        :return: The headers of this RuntimeRequest.
        :rtype: Dict[str, str]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this RuntimeRequest.

        Transport headers for the given request.

        :param headers: The headers of this RuntimeRequest.
        :type headers: Dict[str, str]
        """

        self._headers = headers

    @property
    def ip(self):
        """Gets the ip of this RuntimeRequest.

        The requestor IP address.

        :return: The ip of this RuntimeRequest.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this RuntimeRequest.

        The requestor IP address.

        :param ip: The ip of this RuntimeRequest.
        :type ip: str
        """

        self._ip = ip

    @property
    def properties(self):
        """Gets the properties of this RuntimeRequest.


        :return: The properties of this RuntimeRequest.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this RuntimeRequest.


        :param properties: The properties of this RuntimeRequest.
        :type properties: Dict[str, str]
        """

        self._properties = properties

    @property
    def received_timestamp(self):
        """Gets the received_timestamp of this RuntimeRequest.

        The epoch time in milliseconds when the request was received.

        :return: The received_timestamp of this RuntimeRequest.
        :rtype: int
        """
        return self._received_timestamp

    @received_timestamp.setter
    def received_timestamp(self, received_timestamp):
        """Sets the received_timestamp of this RuntimeRequest.

        The epoch time in milliseconds when the request was received.

        :param received_timestamp: The received_timestamp of this RuntimeRequest.
        :type received_timestamp: int
        """

        self._received_timestamp = received_timestamp

    @property
    def sandbox_id(self):
        """Gets the sandbox_id of this RuntimeRequest.

        The ID of the Sandbox that received the request.

        :return: The sandbox_id of this RuntimeRequest.
        :rtype: str
        """
        return self._sandbox_id

    @sandbox_id.setter
    def sandbox_id(self, sandbox_id):
        """Sets the sandbox_id of this RuntimeRequest.

        The ID of the Sandbox that received the request.

        :param sandbox_id: The sandbox_id of this RuntimeRequest.
        :type sandbox_id: str
        """

        self._sandbox_id = sandbox_id

    @property
    def sandbox_name(self):
        """Gets the sandbox_name of this RuntimeRequest.

        The name of the Sandbox that received the request.

        :return: The sandbox_name of this RuntimeRequest.
        :rtype: str
        """
        return self._sandbox_name

    @sandbox_name.setter
    def sandbox_name(self, sandbox_name):
        """Sets the sandbox_name of this RuntimeRequest.

        The name of the Sandbox that received the request.

        :param sandbox_name: The sandbox_name of this RuntimeRequest.
        :type sandbox_name: str
        """

        self._sandbox_name = sandbox_name

    @property
    def transport(self):
        """Gets the transport of this RuntimeRequest.

        Which transport the request was for, 'HTTP'.

        :return: The transport of this RuntimeRequest.
        :rtype: str
        """
        return self._transport

    @transport.setter
    def transport(self, transport):
        """Sets the transport of this RuntimeRequest.

        Which transport the request was for, 'HTTP'.

        :param transport: The transport of this RuntimeRequest.
        :type transport: str
        """

        self._transport = transport
