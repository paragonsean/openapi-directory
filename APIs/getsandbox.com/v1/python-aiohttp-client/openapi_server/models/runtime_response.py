# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error import Error
from openapi_server import util


class RuntimeResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, duration_millis: int=None, error: Error=None, headers: Dict[str, str]=None, responded_timestamp: int=None, response_delay: int=None, transport: str=None):
        """RuntimeResponse - a model defined in OpenAPI

        :param body: The body of this RuntimeResponse.
        :param duration_millis: The duration_millis of this RuntimeResponse.
        :param error: The error of this RuntimeResponse.
        :param headers: The headers of this RuntimeResponse.
        :param responded_timestamp: The responded_timestamp of this RuntimeResponse.
        :param response_delay: The response_delay of this RuntimeResponse.
        :param transport: The transport of this RuntimeResponse.
        """
        self.openapi_types = {
            'body': str,
            'duration_millis': int,
            'error': Error,
            'headers': Dict[str, str],
            'responded_timestamp': int,
            'response_delay': int,
            'transport': str
        }

        self.attribute_map = {
            'body': 'body',
            'duration_millis': 'durationMillis',
            'error': 'error',
            'headers': 'headers',
            'responded_timestamp': 'respondedTimestamp',
            'response_delay': 'responseDelay',
            'transport': 'transport'
        }

        self._body = body
        self._duration_millis = duration_millis
        self._error = error
        self._headers = headers
        self._responded_timestamp = responded_timestamp
        self._response_delay = response_delay
        self._transport = transport

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuntimeResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuntimeResponse of this RuntimeResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this RuntimeResponse.

        The body of the given response.

        :return: The body of this RuntimeResponse.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this RuntimeResponse.

        The body of the given response.

        :param body: The body of this RuntimeResponse.
        :type body: str
        """

        self._body = body

    @property
    def duration_millis(self):
        """Gets the duration_millis of this RuntimeResponse.

        Duration in milliseconds of the processing time in Sandbox.

        :return: The duration_millis of this RuntimeResponse.
        :rtype: int
        """
        return self._duration_millis

    @duration_millis.setter
    def duration_millis(self, duration_millis):
        """Sets the duration_millis of this RuntimeResponse.

        Duration in milliseconds of the processing time in Sandbox.

        :param duration_millis: The duration_millis of this RuntimeResponse.
        :type duration_millis: int
        """

        self._duration_millis = duration_millis

    @property
    def error(self):
        """Gets the error of this RuntimeResponse.


        :return: The error of this RuntimeResponse.
        :rtype: Error
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this RuntimeResponse.


        :param error: The error of this RuntimeResponse.
        :type error: Error
        """

        self._error = error

    @property
    def headers(self):
        """Gets the headers of this RuntimeResponse.

        Transport headers for the given response.

        :return: The headers of this RuntimeResponse.
        :rtype: Dict[str, str]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this RuntimeResponse.

        Transport headers for the given response.

        :param headers: The headers of this RuntimeResponse.
        :type headers: Dict[str, str]
        """

        self._headers = headers

    @property
    def responded_timestamp(self):
        """Gets the responded_timestamp of this RuntimeResponse.

        The epoch time in milliseconds when the response was sent.

        :return: The responded_timestamp of this RuntimeResponse.
        :rtype: int
        """
        return self._responded_timestamp

    @responded_timestamp.setter
    def responded_timestamp(self, responded_timestamp):
        """Sets the responded_timestamp of this RuntimeResponse.

        The epoch time in milliseconds when the response was sent.

        :param responded_timestamp: The responded_timestamp of this RuntimeResponse.
        :type responded_timestamp: int
        """

        self._responded_timestamp = responded_timestamp

    @property
    def response_delay(self):
        """Gets the response_delay of this RuntimeResponse.

        Duration in milliseconds of the response delay.

        :return: The response_delay of this RuntimeResponse.
        :rtype: int
        """
        return self._response_delay

    @response_delay.setter
    def response_delay(self, response_delay):
        """Sets the response_delay of this RuntimeResponse.

        Duration in milliseconds of the response delay.

        :param response_delay: The response_delay of this RuntimeResponse.
        :type response_delay: int
        """

        self._response_delay = response_delay

    @property
    def transport(self):
        """Gets the transport of this RuntimeResponse.

        Which transport the request was for, 'HTTP'.

        :return: The transport of this RuntimeResponse.
        :rtype: str
        """
        return self._transport

    @transport.setter
    def transport(self, transport):
        """Sets the transport of this RuntimeResponse.

        Which transport the request was for, 'HTTP'.

        :param transport: The transport of this RuntimeResponse.
        :type transport: str
        """

        self._transport = transport
