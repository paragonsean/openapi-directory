# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.runtime_transaction import RuntimeTransaction
from openapi_server import util


class ActivityMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_timestamp: int=None, message: str=None, message_object: RuntimeTransaction=None, message_type: str=None, sandbox_id: str=None):
        """ActivityMessage - a model defined in OpenAPI

        :param created_timestamp: The created_timestamp of this ActivityMessage.
        :param message: The message of this ActivityMessage.
        :param message_object: The message_object of this ActivityMessage.
        :param message_type: The message_type of this ActivityMessage.
        :param sandbox_id: The sandbox_id of this ActivityMessage.
        """
        self.openapi_types = {
            'created_timestamp': int,
            'message': str,
            'message_object': RuntimeTransaction,
            'message_type': str,
            'sandbox_id': str
        }

        self.attribute_map = {
            'created_timestamp': 'createdTimestamp',
            'message': 'message',
            'message_object': 'messageObject',
            'message_type': 'messageType',
            'sandbox_id': 'sandboxId'
        }

        self._created_timestamp = created_timestamp
        self._message = message
        self._message_object = message_object
        self._message_type = message_type
        self._sandbox_id = sandbox_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivityMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActivityMessage of this ActivityMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this ActivityMessage.

        Epoch time in milliseconds when the message was created

        :return: The created_timestamp of this ActivityMessage.
        :rtype: int
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this ActivityMessage.

        Epoch time in milliseconds when the message was created

        :param created_timestamp: The created_timestamp of this ActivityMessage.
        :type created_timestamp: int
        """

        self._created_timestamp = created_timestamp

    @property
    def message(self):
        """Gets the message of this ActivityMessage.

        The details of the message when type is 'log'

        :return: The message of this ActivityMessage.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ActivityMessage.

        The details of the message when type is 'log'

        :param message: The message of this ActivityMessage.
        :type message: str
        """

        self._message = message

    @property
    def message_object(self):
        """Gets the message_object of this ActivityMessage.


        :return: The message_object of this ActivityMessage.
        :rtype: RuntimeTransaction
        """
        return self._message_object

    @message_object.setter
    def message_object(self, message_object):
        """Sets the message_object of this ActivityMessage.


        :param message_object: The message_object of this ActivityMessage.
        :type message_object: RuntimeTransaction
        """

        self._message_object = message_object

    @property
    def message_type(self):
        """Gets the message_type of this ActivityMessage.


        :return: The message_type of this ActivityMessage.
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this ActivityMessage.


        :param message_type: The message_type of this ActivityMessage.
        :type message_type: str
        """
        allowed_values = ["request", "log"]  # noqa: E501
        if message_type not in allowed_values:
            raise ValueError(
                "Invalid value for `message_type` ({0}), must be one of {1}"
                .format(message_type, allowed_values)
            )

        self._message_type = message_type

    @property
    def sandbox_id(self):
        """Gets the sandbox_id of this ActivityMessage.

        The ID of the sandbox that generated this message

        :return: The sandbox_id of this ActivityMessage.
        :rtype: str
        """
        return self._sandbox_id

    @sandbox_id.setter
    def sandbox_id(self, sandbox_id):
        """Sets the sandbox_id of this ActivityMessage.

        The ID of the sandbox that generated this message

        :param sandbox_id: The sandbox_id of this ActivityMessage.
        :type sandbox_id: str
        """

        self._sandbox_id = sandbox_id
