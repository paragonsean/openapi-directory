# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RouteConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_strategy: str=None, latency_ms: int=None, latency_multiplier: int=None, latency_type: str=None, method: str=None, path: str=None):
        """RouteConfig - a model defined in OpenAPI

        :param error_strategy: The error_strategy of this RouteConfig.
        :param latency_ms: The latency_ms of this RouteConfig.
        :param latency_multiplier: The latency_multiplier of this RouteConfig.
        :param latency_type: The latency_type of this RouteConfig.
        :param method: The method of this RouteConfig.
        :param path: The path of this RouteConfig.
        """
        self.openapi_types = {
            'error_strategy': str,
            'latency_ms': int,
            'latency_multiplier': int,
            'latency_type': str,
            'method': str,
            'path': str
        }

        self.attribute_map = {
            'error_strategy': 'errorStrategy',
            'latency_ms': 'latencyMs',
            'latency_multiplier': 'latencyMultiplier',
            'latency_type': 'latencyType',
            'method': 'method',
            'path': 'path'
        }

        self._error_strategy = error_strategy
        self._latency_ms = latency_ms
        self._latency_multiplier = latency_multiplier
        self._latency_type = latency_type
        self._method = method
        self._path = path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RouteConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RouteConfig of this RouteConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_strategy(self):
        """Gets the error_strategy of this RouteConfig.


        :return: The error_strategy of this RouteConfig.
        :rtype: str
        """
        return self._error_strategy

    @error_strategy.setter
    def error_strategy(self, error_strategy):
        """Sets the error_strategy of this RouteConfig.


        :param error_strategy: The error_strategy of this RouteConfig.
        :type error_strategy: str
        """
        allowed_values = ["NONE", "TIMEOUT", "SERVICE_DOWN"]  # noqa: E501
        if error_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `error_strategy` ({0}), must be one of {1}"
                .format(error_strategy, allowed_values)
            )

        self._error_strategy = error_strategy

    @property
    def latency_ms(self):
        """Gets the latency_ms of this RouteConfig.


        :return: The latency_ms of this RouteConfig.
        :rtype: int
        """
        return self._latency_ms

    @latency_ms.setter
    def latency_ms(self, latency_ms):
        """Sets the latency_ms of this RouteConfig.


        :param latency_ms: The latency_ms of this RouteConfig.
        :type latency_ms: int
        """

        self._latency_ms = latency_ms

    @property
    def latency_multiplier(self):
        """Gets the latency_multiplier of this RouteConfig.


        :return: The latency_multiplier of this RouteConfig.
        :rtype: int
        """
        return self._latency_multiplier

    @latency_multiplier.setter
    def latency_multiplier(self, latency_multiplier):
        """Sets the latency_multiplier of this RouteConfig.


        :param latency_multiplier: The latency_multiplier of this RouteConfig.
        :type latency_multiplier: int
        """

        self._latency_multiplier = latency_multiplier

    @property
    def latency_type(self):
        """Gets the latency_type of this RouteConfig.


        :return: The latency_type of this RouteConfig.
        :rtype: str
        """
        return self._latency_type

    @latency_type.setter
    def latency_type(self, latency_type):
        """Sets the latency_type of this RouteConfig.


        :param latency_type: The latency_type of this RouteConfig.
        :type latency_type: str
        """
        allowed_values = ["NONE", "CONSTANT", "LINEAR"]  # noqa: E501
        if latency_type not in allowed_values:
            raise ValueError(
                "Invalid value for `latency_type` ({0}), must be one of {1}"
                .format(latency_type, allowed_values)
            )

        self._latency_type = latency_type

    @property
    def method(self):
        """Gets the method of this RouteConfig.


        :return: The method of this RouteConfig.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this RouteConfig.


        :param method: The method of this RouteConfig.
        :type method: str
        """

        self._method = method

    @property
    def path(self):
        """Gets the path of this RouteConfig.


        :return: The path of this RouteConfig.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this RouteConfig.


        :param path: The path of this RouteConfig.
        :type path: str
        """

        self._path = path
