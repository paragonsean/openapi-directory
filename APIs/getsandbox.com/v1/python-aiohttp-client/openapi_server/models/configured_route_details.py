# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.route_config import RouteConfig
from openapi_server import util


class ConfiguredRouteDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_error_override: bool=None, active_latency: bool=None, default_latency: int=None, error_override_type: str=None, load_latency: int=None, load_threshold: int=None, method: str=None, path: str=None, properties: Dict[str, str]=None, route_config: RouteConfig=None, transport: str=None):
        """ConfiguredRouteDetails - a model defined in OpenAPI

        :param active_error_override: The active_error_override of this ConfiguredRouteDetails.
        :param active_latency: The active_latency of this ConfiguredRouteDetails.
        :param default_latency: The default_latency of this ConfiguredRouteDetails.
        :param error_override_type: The error_override_type of this ConfiguredRouteDetails.
        :param load_latency: The load_latency of this ConfiguredRouteDetails.
        :param load_threshold: The load_threshold of this ConfiguredRouteDetails.
        :param method: The method of this ConfiguredRouteDetails.
        :param path: The path of this ConfiguredRouteDetails.
        :param properties: The properties of this ConfiguredRouteDetails.
        :param route_config: The route_config of this ConfiguredRouteDetails.
        :param transport: The transport of this ConfiguredRouteDetails.
        """
        self.openapi_types = {
            'active_error_override': bool,
            'active_latency': bool,
            'default_latency': int,
            'error_override_type': str,
            'load_latency': int,
            'load_threshold': int,
            'method': str,
            'path': str,
            'properties': Dict[str, str],
            'route_config': RouteConfig,
            'transport': str
        }

        self.attribute_map = {
            'active_error_override': 'activeErrorOverride',
            'active_latency': 'activeLatency',
            'default_latency': 'defaultLatency',
            'error_override_type': 'errorOverrideType',
            'load_latency': 'loadLatency',
            'load_threshold': 'loadThreshold',
            'method': 'method',
            'path': 'path',
            'properties': 'properties',
            'route_config': 'routeConfig',
            'transport': 'transport'
        }

        self._active_error_override = active_error_override
        self._active_latency = active_latency
        self._default_latency = default_latency
        self._error_override_type = error_override_type
        self._load_latency = load_latency
        self._load_threshold = load_threshold
        self._method = method
        self._path = path
        self._properties = properties
        self._route_config = route_config
        self._transport = transport

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfiguredRouteDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfiguredRouteDetails of this ConfiguredRouteDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_error_override(self):
        """Gets the active_error_override of this ConfiguredRouteDetails.

        Whether error overrides are enabled or not.

        :return: The active_error_override of this ConfiguredRouteDetails.
        :rtype: bool
        """
        return self._active_error_override

    @active_error_override.setter
    def active_error_override(self, active_error_override):
        """Sets the active_error_override of this ConfiguredRouteDetails.

        Whether error overrides are enabled or not.

        :param active_error_override: The active_error_override of this ConfiguredRouteDetails.
        :type active_error_override: bool
        """

        self._active_error_override = active_error_override

    @property
    def active_latency(self):
        """Gets the active_latency of this ConfiguredRouteDetails.

        Whether latency delays are enabled or not.

        :return: The active_latency of this ConfiguredRouteDetails.
        :rtype: bool
        """
        return self._active_latency

    @active_latency.setter
    def active_latency(self, active_latency):
        """Sets the active_latency of this ConfiguredRouteDetails.

        Whether latency delays are enabled or not.

        :param active_latency: The active_latency of this ConfiguredRouteDetails.
        :type active_latency: bool
        """

        self._active_latency = active_latency

    @property
    def default_latency(self):
        """Gets the default_latency of this ConfiguredRouteDetails.

        A delay in milliseconds applied to requests at a 'normal' level.

        :return: The default_latency of this ConfiguredRouteDetails.
        :rtype: int
        """
        return self._default_latency

    @default_latency.setter
    def default_latency(self, default_latency):
        """Sets the default_latency of this ConfiguredRouteDetails.

        A delay in milliseconds applied to requests at a 'normal' level.

        :param default_latency: The default_latency of this ConfiguredRouteDetails.
        :type default_latency: int
        """
        if default_latency is not None and default_latency > 30000:
            raise ValueError("Invalid value for `default_latency`, must be a value less than or equal to `30000`")
        if default_latency is not None and default_latency < 0:
            raise ValueError("Invalid value for `default_latency`, must be a value greater than or equal to `0`")

        self._default_latency = default_latency

    @property
    def error_override_type(self):
        """Gets the error_override_type of this ConfiguredRouteDetails.

        The type of error override applied to this route.

        :return: The error_override_type of this ConfiguredRouteDetails.
        :rtype: str
        """
        return self._error_override_type

    @error_override_type.setter
    def error_override_type(self, error_override_type):
        """Sets the error_override_type of this ConfiguredRouteDetails.

        The type of error override applied to this route.

        :param error_override_type: The error_override_type of this ConfiguredRouteDetails.
        :type error_override_type: str
        """
        allowed_values = ["NONE", "TIMEOUT", "SERVICE_DOWN"]  # noqa: E501
        if error_override_type not in allowed_values:
            raise ValueError(
                "Invalid value for `error_override_type` ({0}), must be one of {1}"
                .format(error_override_type, allowed_values)
            )

        self._error_override_type = error_override_type

    @property
    def load_latency(self):
        """Gets the load_latency of this ConfiguredRouteDetails.

        A delay in milliseconds applied to requests at a 'high' level.

        :return: The load_latency of this ConfiguredRouteDetails.
        :rtype: int
        """
        return self._load_latency

    @load_latency.setter
    def load_latency(self, load_latency):
        """Sets the load_latency of this ConfiguredRouteDetails.

        A delay in milliseconds applied to requests at a 'high' level.

        :param load_latency: The load_latency of this ConfiguredRouteDetails.
        :type load_latency: int
        """
        if load_latency is not None and load_latency > 30000:
            raise ValueError("Invalid value for `load_latency`, must be a value less than or equal to `30000`")
        if load_latency is not None and load_latency < 0:
            raise ValueError("Invalid value for `load_latency`, must be a value greater than or equal to `0`")

        self._load_latency = load_latency

    @property
    def load_threshold(self):
        """Gets the load_threshold of this ConfiguredRouteDetails.

        The threshold in transactions/second to signify 'high' load

        :return: The load_threshold of this ConfiguredRouteDetails.
        :rtype: int
        """
        return self._load_threshold

    @load_threshold.setter
    def load_threshold(self, load_threshold):
        """Sets the load_threshold of this ConfiguredRouteDetails.

        The threshold in transactions/second to signify 'high' load

        :param load_threshold: The load_threshold of this ConfiguredRouteDetails.
        :type load_threshold: int
        """
        if load_threshold is not None and load_threshold > 100:
            raise ValueError("Invalid value for `load_threshold`, must be a value less than or equal to `100`")
        if load_threshold is not None and load_threshold < 0:
            raise ValueError("Invalid value for `load_threshold`, must be a value greater than or equal to `0`")

        self._load_threshold = load_threshold

    @property
    def method(self):
        """Gets the method of this ConfiguredRouteDetails.


        :return: The method of this ConfiguredRouteDetails.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this ConfiguredRouteDetails.


        :param method: The method of this ConfiguredRouteDetails.
        :type method: str
        """

        self._method = method

    @property
    def path(self):
        """Gets the path of this ConfiguredRouteDetails.


        :return: The path of this ConfiguredRouteDetails.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ConfiguredRouteDetails.


        :param path: The path of this ConfiguredRouteDetails.
        :type path: str
        """

        self._path = path

    @property
    def properties(self):
        """Gets the properties of this ConfiguredRouteDetails.


        :return: The properties of this ConfiguredRouteDetails.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ConfiguredRouteDetails.


        :param properties: The properties of this ConfiguredRouteDetails.
        :type properties: Dict[str, str]
        """

        self._properties = properties

    @property
    def route_config(self):
        """Gets the route_config of this ConfiguredRouteDetails.


        :return: The route_config of this ConfiguredRouteDetails.
        :rtype: RouteConfig
        """
        return self._route_config

    @route_config.setter
    def route_config(self, route_config):
        """Sets the route_config of this ConfiguredRouteDetails.


        :param route_config: The route_config of this ConfiguredRouteDetails.
        :type route_config: RouteConfig
        """

        self._route_config = route_config

    @property
    def transport(self):
        """Gets the transport of this ConfiguredRouteDetails.


        :return: The transport of this ConfiguredRouteDetails.
        :rtype: str
        """
        return self._transport

    @transport.setter
    def transport(self, transport):
        """Sets the transport of this ConfiguredRouteDetails.


        :param transport: The transport of this ConfiguredRouteDetails.
        :type transport: str
        """

        self._transport = transport
