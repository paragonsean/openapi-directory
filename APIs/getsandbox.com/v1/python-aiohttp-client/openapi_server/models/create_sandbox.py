# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateSandbox(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commit_base_template: bool=None, description: str=None, name: str=None, owner_organisation_name: str=None, parent_sandbox_name: str=None, transport_type: str=None):
        """CreateSandbox - a model defined in OpenAPI

        :param commit_base_template: The commit_base_template of this CreateSandbox.
        :param description: The description of this CreateSandbox.
        :param name: The name of this CreateSandbox.
        :param owner_organisation_name: The owner_organisation_name of this CreateSandbox.
        :param parent_sandbox_name: The parent_sandbox_name of this CreateSandbox.
        :param transport_type: The transport_type of this CreateSandbox.
        """
        self.openapi_types = {
            'commit_base_template': bool,
            'description': str,
            'name': str,
            'owner_organisation_name': str,
            'parent_sandbox_name': str,
            'transport_type': str
        }

        self.attribute_map = {
            'commit_base_template': 'commitBaseTemplate',
            'description': 'description',
            'name': 'name',
            'owner_organisation_name': 'ownerOrganisationName',
            'parent_sandbox_name': 'parentSandboxName',
            'transport_type': 'transportType'
        }

        self._commit_base_template = commit_base_template
        self._description = description
        self._name = name
        self._owner_organisation_name = owner_organisation_name
        self._parent_sandbox_name = parent_sandbox_name
        self._transport_type = transport_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSandbox':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSandbox of this CreateSandbox.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commit_base_template(self):
        """Gets the commit_base_template of this CreateSandbox.

        Whether to commit the example Sandbox definition upon creation.

        :return: The commit_base_template of this CreateSandbox.
        :rtype: bool
        """
        return self._commit_base_template

    @commit_base_template.setter
    def commit_base_template(self, commit_base_template):
        """Sets the commit_base_template of this CreateSandbox.

        Whether to commit the example Sandbox definition upon creation.

        :param commit_base_template: The commit_base_template of this CreateSandbox.
        :type commit_base_template: bool
        """

        self._commit_base_template = commit_base_template

    @property
    def description(self):
        """Gets the description of this CreateSandbox.

        Text describing this Sandbox.

        :return: The description of this CreateSandbox.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateSandbox.

        Text describing this Sandbox.

        :param description: The description of this CreateSandbox.
        :type description: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")
        if description is not None and not re.search(r'^[A-Za-z-_ 0-9]*$', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/^[A-Za-z-_ 0-9]*$/`")

        self._description = description

    @property
    def name(self):
        """Gets the name of this CreateSandbox.

        Optional name to give the Sandbox, will be generated if omitted.

        :return: The name of this CreateSandbox.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateSandbox.

        Optional name to give the Sandbox, will be generated if omitted.

        :param name: The name of this CreateSandbox.
        :type name: str
        """
        if name is not None and not re.search(r'^[A-Za-z-_ 0-9]*$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[A-Za-z-_ 0-9]*$/`")

        self._name = name

    @property
    def owner_organisation_name(self):
        """Gets the owner_organisation_name of this CreateSandbox.

        Name of the team this Sandbox should be created under.

        :return: The owner_organisation_name of this CreateSandbox.
        :rtype: str
        """
        return self._owner_organisation_name

    @owner_organisation_name.setter
    def owner_organisation_name(self, owner_organisation_name):
        """Sets the owner_organisation_name of this CreateSandbox.

        Name of the team this Sandbox should be created under.

        :param owner_organisation_name: The owner_organisation_name of this CreateSandbox.
        :type owner_organisation_name: str
        """
        if owner_organisation_name is not None and len(owner_organisation_name) > 36:
            raise ValueError("Invalid value for `owner_organisation_name`, length must be less than or equal to `36`")
        if owner_organisation_name is not None and len(owner_organisation_name) < 2:
            raise ValueError("Invalid value for `owner_organisation_name`, length must be greater than or equal to `2`")
        if owner_organisation_name is not None and not re.search(r'^[a-zA-Z-_0-9]*$', owner_organisation_name):
            raise ValueError("Invalid value for `owner_organisation_name`, must be a follow pattern or equal to `/^[a-zA-Z-_0-9]*$/`")

        self._owner_organisation_name = owner_organisation_name

    @property
    def parent_sandbox_name(self):
        """Gets the parent_sandbox_name of this CreateSandbox.

        Name of the Sandbox this should be created under, if exists will be a 'clone'.

        :return: The parent_sandbox_name of this CreateSandbox.
        :rtype: str
        """
        return self._parent_sandbox_name

    @parent_sandbox_name.setter
    def parent_sandbox_name(self, parent_sandbox_name):
        """Sets the parent_sandbox_name of this CreateSandbox.

        Name of the Sandbox this should be created under, if exists will be a 'clone'.

        :param parent_sandbox_name: The parent_sandbox_name of this CreateSandbox.
        :type parent_sandbox_name: str
        """
        if parent_sandbox_name is not None and not re.search(r'^[A-Za-z-_ 0-9]*$', parent_sandbox_name):
            raise ValueError("Invalid value for `parent_sandbox_name`, must be a follow pattern or equal to `/^[A-Za-z-_ 0-9]*$/`")

        self._parent_sandbox_name = parent_sandbox_name

    @property
    def transport_type(self):
        """Gets the transport_type of this CreateSandbox.


        :return: The transport_type of this CreateSandbox.
        :rtype: str
        """
        return self._transport_type

    @transport_type.setter
    def transport_type(self, transport_type):
        """Sets the transport_type of this CreateSandbox.


        :param transport_type: The transport_type of this CreateSandbox.
        :type transport_type: str
        """
        allowed_values = ["HTTP"]  # noqa: E501
        if transport_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transport_type` ({0}), must be one of {1}"
                .format(transport_type, allowed_values)
            )

        self._transport_type = transport_type
