/**
 * Sandbox API
 * Sandbox API
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@getsandbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSandbox.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSandbox::OAICreateSandbox(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSandbox::OAICreateSandbox() {
    this->initializeModel();
}

OAICreateSandbox::~OAICreateSandbox() {}

void OAICreateSandbox::initializeModel() {

    m_commit_base_template_isSet = false;
    m_commit_base_template_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_organisation_name_isSet = false;
    m_owner_organisation_name_isValid = false;

    m_parent_sandbox_name_isSet = false;
    m_parent_sandbox_name_isValid = false;

    m_transport_type_isSet = false;
    m_transport_type_isValid = false;
}

void OAICreateSandbox::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSandbox::fromJsonObject(QJsonObject json) {

    m_commit_base_template_isValid = ::OpenAPI::fromJsonValue(m_commit_base_template, json[QString("commitBaseTemplate")]);
    m_commit_base_template_isSet = !json[QString("commitBaseTemplate")].isNull() && m_commit_base_template_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_organisation_name_isValid = ::OpenAPI::fromJsonValue(m_owner_organisation_name, json[QString("ownerOrganisationName")]);
    m_owner_organisation_name_isSet = !json[QString("ownerOrganisationName")].isNull() && m_owner_organisation_name_isValid;

    m_parent_sandbox_name_isValid = ::OpenAPI::fromJsonValue(m_parent_sandbox_name, json[QString("parentSandboxName")]);
    m_parent_sandbox_name_isSet = !json[QString("parentSandboxName")].isNull() && m_parent_sandbox_name_isValid;

    m_transport_type_isValid = ::OpenAPI::fromJsonValue(m_transport_type, json[QString("transportType")]);
    m_transport_type_isSet = !json[QString("transportType")].isNull() && m_transport_type_isValid;
}

QString OAICreateSandbox::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSandbox::asJsonObject() const {
    QJsonObject obj;
    if (m_commit_base_template_isSet) {
        obj.insert(QString("commitBaseTemplate"), ::OpenAPI::toJsonValue(m_commit_base_template));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner_organisation_name_isSet) {
        obj.insert(QString("ownerOrganisationName"), ::OpenAPI::toJsonValue(m_owner_organisation_name));
    }
    if (m_parent_sandbox_name_isSet) {
        obj.insert(QString("parentSandboxName"), ::OpenAPI::toJsonValue(m_parent_sandbox_name));
    }
    if (m_transport_type_isSet) {
        obj.insert(QString("transportType"), ::OpenAPI::toJsonValue(m_transport_type));
    }
    return obj;
}

bool OAICreateSandbox::isCommitBaseTemplate() const {
    return m_commit_base_template;
}
void OAICreateSandbox::setCommitBaseTemplate(const bool &commit_base_template) {
    m_commit_base_template = commit_base_template;
    m_commit_base_template_isSet = true;
}

bool OAICreateSandbox::is_commit_base_template_Set() const{
    return m_commit_base_template_isSet;
}

bool OAICreateSandbox::is_commit_base_template_Valid() const{
    return m_commit_base_template_isValid;
}

QString OAICreateSandbox::getDescription() const {
    return m_description;
}
void OAICreateSandbox::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateSandbox::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateSandbox::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateSandbox::getName() const {
    return m_name;
}
void OAICreateSandbox::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateSandbox::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateSandbox::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateSandbox::getOwnerOrganisationName() const {
    return m_owner_organisation_name;
}
void OAICreateSandbox::setOwnerOrganisationName(const QString &owner_organisation_name) {
    m_owner_organisation_name = owner_organisation_name;
    m_owner_organisation_name_isSet = true;
}

bool OAICreateSandbox::is_owner_organisation_name_Set() const{
    return m_owner_organisation_name_isSet;
}

bool OAICreateSandbox::is_owner_organisation_name_Valid() const{
    return m_owner_organisation_name_isValid;
}

QString OAICreateSandbox::getParentSandboxName() const {
    return m_parent_sandbox_name;
}
void OAICreateSandbox::setParentSandboxName(const QString &parent_sandbox_name) {
    m_parent_sandbox_name = parent_sandbox_name;
    m_parent_sandbox_name_isSet = true;
}

bool OAICreateSandbox::is_parent_sandbox_name_Set() const{
    return m_parent_sandbox_name_isSet;
}

bool OAICreateSandbox::is_parent_sandbox_name_Valid() const{
    return m_parent_sandbox_name_isValid;
}

QString OAICreateSandbox::getTransportType() const {
    return m_transport_type;
}
void OAICreateSandbox::setTransportType(const QString &transport_type) {
    m_transport_type = transport_type;
    m_transport_type_isSet = true;
}

bool OAICreateSandbox::is_transport_type_Set() const{
    return m_transport_type_isSet;
}

bool OAICreateSandbox::is_transport_type_Valid() const{
    return m_transport_type_isValid;
}

bool OAICreateSandbox::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commit_base_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_organisation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_sandbox_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSandbox::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
