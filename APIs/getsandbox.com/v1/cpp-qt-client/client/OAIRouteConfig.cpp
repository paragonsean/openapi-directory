/**
 * Sandbox API
 * Sandbox API
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@getsandbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRouteConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRouteConfig::OAIRouteConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRouteConfig::OAIRouteConfig() {
    this->initializeModel();
}

OAIRouteConfig::~OAIRouteConfig() {}

void OAIRouteConfig::initializeModel() {

    m_error_strategy_isSet = false;
    m_error_strategy_isValid = false;

    m_latency_ms_isSet = false;
    m_latency_ms_isValid = false;

    m_latency_multiplier_isSet = false;
    m_latency_multiplier_isValid = false;

    m_latency_type_isSet = false;
    m_latency_type_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;
}

void OAIRouteConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRouteConfig::fromJsonObject(QJsonObject json) {

    m_error_strategy_isValid = ::OpenAPI::fromJsonValue(m_error_strategy, json[QString("errorStrategy")]);
    m_error_strategy_isSet = !json[QString("errorStrategy")].isNull() && m_error_strategy_isValid;

    m_latency_ms_isValid = ::OpenAPI::fromJsonValue(m_latency_ms, json[QString("latencyMs")]);
    m_latency_ms_isSet = !json[QString("latencyMs")].isNull() && m_latency_ms_isValid;

    m_latency_multiplier_isValid = ::OpenAPI::fromJsonValue(m_latency_multiplier, json[QString("latencyMultiplier")]);
    m_latency_multiplier_isSet = !json[QString("latencyMultiplier")].isNull() && m_latency_multiplier_isValid;

    m_latency_type_isValid = ::OpenAPI::fromJsonValue(m_latency_type, json[QString("latencyType")]);
    m_latency_type_isSet = !json[QString("latencyType")].isNull() && m_latency_type_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;
}

QString OAIRouteConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRouteConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_error_strategy_isSet) {
        obj.insert(QString("errorStrategy"), ::OpenAPI::toJsonValue(m_error_strategy));
    }
    if (m_latency_ms_isSet) {
        obj.insert(QString("latencyMs"), ::OpenAPI::toJsonValue(m_latency_ms));
    }
    if (m_latency_multiplier_isSet) {
        obj.insert(QString("latencyMultiplier"), ::OpenAPI::toJsonValue(m_latency_multiplier));
    }
    if (m_latency_type_isSet) {
        obj.insert(QString("latencyType"), ::OpenAPI::toJsonValue(m_latency_type));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    return obj;
}

QString OAIRouteConfig::getErrorStrategy() const {
    return m_error_strategy;
}
void OAIRouteConfig::setErrorStrategy(const QString &error_strategy) {
    m_error_strategy = error_strategy;
    m_error_strategy_isSet = true;
}

bool OAIRouteConfig::is_error_strategy_Set() const{
    return m_error_strategy_isSet;
}

bool OAIRouteConfig::is_error_strategy_Valid() const{
    return m_error_strategy_isValid;
}

qint32 OAIRouteConfig::getLatencyMs() const {
    return m_latency_ms;
}
void OAIRouteConfig::setLatencyMs(const qint32 &latency_ms) {
    m_latency_ms = latency_ms;
    m_latency_ms_isSet = true;
}

bool OAIRouteConfig::is_latency_ms_Set() const{
    return m_latency_ms_isSet;
}

bool OAIRouteConfig::is_latency_ms_Valid() const{
    return m_latency_ms_isValid;
}

qint32 OAIRouteConfig::getLatencyMultiplier() const {
    return m_latency_multiplier;
}
void OAIRouteConfig::setLatencyMultiplier(const qint32 &latency_multiplier) {
    m_latency_multiplier = latency_multiplier;
    m_latency_multiplier_isSet = true;
}

bool OAIRouteConfig::is_latency_multiplier_Set() const{
    return m_latency_multiplier_isSet;
}

bool OAIRouteConfig::is_latency_multiplier_Valid() const{
    return m_latency_multiplier_isValid;
}

QString OAIRouteConfig::getLatencyType() const {
    return m_latency_type;
}
void OAIRouteConfig::setLatencyType(const QString &latency_type) {
    m_latency_type = latency_type;
    m_latency_type_isSet = true;
}

bool OAIRouteConfig::is_latency_type_Set() const{
    return m_latency_type_isSet;
}

bool OAIRouteConfig::is_latency_type_Valid() const{
    return m_latency_type_isValid;
}

QString OAIRouteConfig::getMethod() const {
    return m_method;
}
void OAIRouteConfig::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIRouteConfig::is_method_Set() const{
    return m_method_isSet;
}

bool OAIRouteConfig::is_method_Valid() const{
    return m_method_isValid;
}

QString OAIRouteConfig::getPath() const {
    return m_path;
}
void OAIRouteConfig::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIRouteConfig::is_path_Set() const{
    return m_path_isSet;
}

bool OAIRouteConfig::is_path_Valid() const{
    return m_path_isValid;
}

bool OAIRouteConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latency_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latency_multiplier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latency_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRouteConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
