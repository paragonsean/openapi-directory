/**
 * Sandbox API
 * Sandbox API
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@getsandbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISandbox.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISandbox::OAISandbox(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISandbox::OAISandbox() {
    this->initializeModel();
}

OAISandbox::~OAISandbox() {}

void OAISandbox::initializeModel() {

    m_api_definition_isSet = false;
    m_api_definition_isValid = false;

    m_child_sandboxes_isSet = false;
    m_child_sandboxes_isValid = false;

    m_configured_routes_isSet = false;
    m_configured_routes_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_git_access_token_isSet = false;
    m_git_access_token_isValid = false;

    m_git_url_isSet = false;
    m_git_url_isValid = false;

    m_has_repository_isSet = false;
    m_has_repository_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ip_whitelist_isSet = false;
    m_ip_whitelist_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_sandbox_isSet = false;
    m_parent_sandbox_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_proxy_status_isSet = false;
    m_proxy_status_isValid = false;

    m_runtime_version_isSet = false;
    m_runtime_version_isValid = false;

    m_sandbox_url_isSet = false;
    m_sandbox_url_isValid = false;

    m_stack_type_isSet = false;
    m_stack_type_isValid = false;

    m_transport_type_isSet = false;
    m_transport_type_isValid = false;
}

void OAISandbox::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISandbox::fromJsonObject(QJsonObject json) {

    m_api_definition_isValid = ::OpenAPI::fromJsonValue(m_api_definition, json[QString("apiDefinition")]);
    m_api_definition_isSet = !json[QString("apiDefinition")].isNull() && m_api_definition_isValid;

    m_child_sandboxes_isValid = ::OpenAPI::fromJsonValue(m_child_sandboxes, json[QString("childSandboxes")]);
    m_child_sandboxes_isSet = !json[QString("childSandboxes")].isNull() && m_child_sandboxes_isValid;

    m_configured_routes_isValid = ::OpenAPI::fromJsonValue(m_configured_routes, json[QString("configuredRoutes")]);
    m_configured_routes_isSet = !json[QString("configuredRoutes")].isNull() && m_configured_routes_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_git_access_token_isValid = ::OpenAPI::fromJsonValue(m_git_access_token, json[QString("gitAccessToken")]);
    m_git_access_token_isSet = !json[QString("gitAccessToken")].isNull() && m_git_access_token_isValid;

    m_git_url_isValid = ::OpenAPI::fromJsonValue(m_git_url, json[QString("gitUrl")]);
    m_git_url_isSet = !json[QString("gitUrl")].isNull() && m_git_url_isValid;

    m_has_repository_isValid = ::OpenAPI::fromJsonValue(m_has_repository, json[QString("hasRepository")]);
    m_has_repository_isSet = !json[QString("hasRepository")].isNull() && m_has_repository_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ip_whitelist_isValid = ::OpenAPI::fromJsonValue(m_ip_whitelist, json[QString("ipWhitelist")]);
    m_ip_whitelist_isSet = !json[QString("ipWhitelist")].isNull() && m_ip_whitelist_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_sandbox_isValid = ::OpenAPI::fromJsonValue(m_parent_sandbox, json[QString("parentSandbox")]);
    m_parent_sandbox_isSet = !json[QString("parentSandbox")].isNull() && m_parent_sandbox_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_proxy_status_isValid = ::OpenAPI::fromJsonValue(m_proxy_status, json[QString("proxyStatus")]);
    m_proxy_status_isSet = !json[QString("proxyStatus")].isNull() && m_proxy_status_isValid;

    m_runtime_version_isValid = ::OpenAPI::fromJsonValue(m_runtime_version, json[QString("runtimeVersion")]);
    m_runtime_version_isSet = !json[QString("runtimeVersion")].isNull() && m_runtime_version_isValid;

    m_sandbox_url_isValid = ::OpenAPI::fromJsonValue(m_sandbox_url, json[QString("sandboxUrl")]);
    m_sandbox_url_isSet = !json[QString("sandboxUrl")].isNull() && m_sandbox_url_isValid;

    m_stack_type_isValid = ::OpenAPI::fromJsonValue(m_stack_type, json[QString("stackType")]);
    m_stack_type_isSet = !json[QString("stackType")].isNull() && m_stack_type_isValid;

    m_transport_type_isValid = ::OpenAPI::fromJsonValue(m_transport_type, json[QString("transportType")]);
    m_transport_type_isSet = !json[QString("transportType")].isNull() && m_transport_type_isValid;
}

QString OAISandbox::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISandbox::asJsonObject() const {
    QJsonObject obj;
    if (m_api_definition_isSet) {
        obj.insert(QString("apiDefinition"), ::OpenAPI::toJsonValue(m_api_definition));
    }
    if (m_child_sandboxes.size() > 0) {
        obj.insert(QString("childSandboxes"), ::OpenAPI::toJsonValue(m_child_sandboxes));
    }
    if (m_configured_routes.size() > 0) {
        obj.insert(QString("configuredRoutes"), ::OpenAPI::toJsonValue(m_configured_routes));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_git_access_token_isSet) {
        obj.insert(QString("gitAccessToken"), ::OpenAPI::toJsonValue(m_git_access_token));
    }
    if (m_git_url_isSet) {
        obj.insert(QString("gitUrl"), ::OpenAPI::toJsonValue(m_git_url));
    }
    if (m_has_repository_isSet) {
        obj.insert(QString("hasRepository"), ::OpenAPI::toJsonValue(m_has_repository));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ip_whitelist.size() > 0) {
        obj.insert(QString("ipWhitelist"), ::OpenAPI::toJsonValue(m_ip_whitelist));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_sandbox.isSet()) {
        obj.insert(QString("parentSandbox"), ::OpenAPI::toJsonValue(m_parent_sandbox));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_proxy_status_isSet) {
        obj.insert(QString("proxyStatus"), ::OpenAPI::toJsonValue(m_proxy_status));
    }
    if (m_runtime_version_isSet) {
        obj.insert(QString("runtimeVersion"), ::OpenAPI::toJsonValue(m_runtime_version));
    }
    if (m_sandbox_url_isSet) {
        obj.insert(QString("sandboxUrl"), ::OpenAPI::toJsonValue(m_sandbox_url));
    }
    if (m_stack_type_isSet) {
        obj.insert(QString("stackType"), ::OpenAPI::toJsonValue(m_stack_type));
    }
    if (m_transport_type_isSet) {
        obj.insert(QString("transportType"), ::OpenAPI::toJsonValue(m_transport_type));
    }
    return obj;
}

QString OAISandbox::getApiDefinition() const {
    return m_api_definition;
}
void OAISandbox::setApiDefinition(const QString &api_definition) {
    m_api_definition = api_definition;
    m_api_definition_isSet = true;
}

bool OAISandbox::is_api_definition_Set() const{
    return m_api_definition_isSet;
}

bool OAISandbox::is_api_definition_Valid() const{
    return m_api_definition_isValid;
}

QSet<OAISandbox> OAISandbox::getChildSandboxes() const {
    return m_child_sandboxes;
}
void OAISandbox::setChildSandboxes(const QSet<OAISandbox> &child_sandboxes) {
    m_child_sandboxes = child_sandboxes;
    m_child_sandboxes_isSet = true;
}

bool OAISandbox::is_child_sandboxes_Set() const{
    return m_child_sandboxes_isSet;
}

bool OAISandbox::is_child_sandboxes_Valid() const{
    return m_child_sandboxes_isValid;
}

QSet<OAIConfiguredRouteDetails> OAISandbox::getConfiguredRoutes() const {
    return m_configured_routes;
}
void OAISandbox::setConfiguredRoutes(const QSet<OAIConfiguredRouteDetails> &configured_routes) {
    m_configured_routes = configured_routes;
    m_configured_routes_isSet = true;
}

bool OAISandbox::is_configured_routes_Set() const{
    return m_configured_routes_isSet;
}

bool OAISandbox::is_configured_routes_Valid() const{
    return m_configured_routes_isValid;
}

QString OAISandbox::getDescription() const {
    return m_description;
}
void OAISandbox::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISandbox::is_description_Set() const{
    return m_description_isSet;
}

bool OAISandbox::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISandbox::getGitAccessToken() const {
    return m_git_access_token;
}
void OAISandbox::setGitAccessToken(const QString &git_access_token) {
    m_git_access_token = git_access_token;
    m_git_access_token_isSet = true;
}

bool OAISandbox::is_git_access_token_Set() const{
    return m_git_access_token_isSet;
}

bool OAISandbox::is_git_access_token_Valid() const{
    return m_git_access_token_isValid;
}

QString OAISandbox::getGitUrl() const {
    return m_git_url;
}
void OAISandbox::setGitUrl(const QString &git_url) {
    m_git_url = git_url;
    m_git_url_isSet = true;
}

bool OAISandbox::is_git_url_Set() const{
    return m_git_url_isSet;
}

bool OAISandbox::is_git_url_Valid() const{
    return m_git_url_isValid;
}

bool OAISandbox::isHasRepository() const {
    return m_has_repository;
}
void OAISandbox::setHasRepository(const bool &has_repository) {
    m_has_repository = has_repository;
    m_has_repository_isSet = true;
}

bool OAISandbox::is_has_repository_Set() const{
    return m_has_repository_isSet;
}

bool OAISandbox::is_has_repository_Valid() const{
    return m_has_repository_isValid;
}

QString OAISandbox::getId() const {
    return m_id;
}
void OAISandbox::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISandbox::is_id_Set() const{
    return m_id_isSet;
}

bool OAISandbox::is_id_Valid() const{
    return m_id_isValid;
}

QSet<QString> OAISandbox::getIpWhitelist() const {
    return m_ip_whitelist;
}
void OAISandbox::setIpWhitelist(const QSet<QString> &ip_whitelist) {
    m_ip_whitelist = ip_whitelist;
    m_ip_whitelist_isSet = true;
}

bool OAISandbox::is_ip_whitelist_Set() const{
    return m_ip_whitelist_isSet;
}

bool OAISandbox::is_ip_whitelist_Valid() const{
    return m_ip_whitelist_isValid;
}

QString OAISandbox::getName() const {
    return m_name;
}
void OAISandbox::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISandbox::is_name_Set() const{
    return m_name_isSet;
}

bool OAISandbox::is_name_Valid() const{
    return m_name_isValid;
}

OAISandbox OAISandbox::getParentSandbox() const {
    return m_parent_sandbox;
}
void OAISandbox::setParentSandbox(const OAISandbox &parent_sandbox) {
    m_parent_sandbox = parent_sandbox;
    m_parent_sandbox_isSet = true;
}

bool OAISandbox::is_parent_sandbox_Set() const{
    return m_parent_sandbox_isSet;
}

bool OAISandbox::is_parent_sandbox_Valid() const{
    return m_parent_sandbox_isValid;
}

QMap<QString, OAIObject> OAISandbox::getProperties() const {
    return m_properties;
}
void OAISandbox::setProperties(const QMap<QString, OAIObject> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAISandbox::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAISandbox::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAISandbox::getProxyStatus() const {
    return m_proxy_status;
}
void OAISandbox::setProxyStatus(const QString &proxy_status) {
    m_proxy_status = proxy_status;
    m_proxy_status_isSet = true;
}

bool OAISandbox::is_proxy_status_Set() const{
    return m_proxy_status_isSet;
}

bool OAISandbox::is_proxy_status_Valid() const{
    return m_proxy_status_isValid;
}

QString OAISandbox::getRuntimeVersion() const {
    return m_runtime_version;
}
void OAISandbox::setRuntimeVersion(const QString &runtime_version) {
    m_runtime_version = runtime_version;
    m_runtime_version_isSet = true;
}

bool OAISandbox::is_runtime_version_Set() const{
    return m_runtime_version_isSet;
}

bool OAISandbox::is_runtime_version_Valid() const{
    return m_runtime_version_isValid;
}

QString OAISandbox::getSandboxUrl() const {
    return m_sandbox_url;
}
void OAISandbox::setSandboxUrl(const QString &sandbox_url) {
    m_sandbox_url = sandbox_url;
    m_sandbox_url_isSet = true;
}

bool OAISandbox::is_sandbox_url_Set() const{
    return m_sandbox_url_isSet;
}

bool OAISandbox::is_sandbox_url_Valid() const{
    return m_sandbox_url_isValid;
}

QString OAISandbox::getStackType() const {
    return m_stack_type;
}
void OAISandbox::setStackType(const QString &stack_type) {
    m_stack_type = stack_type;
    m_stack_type_isSet = true;
}

bool OAISandbox::is_stack_type_Set() const{
    return m_stack_type_isSet;
}

bool OAISandbox::is_stack_type_Valid() const{
    return m_stack_type_isValid;
}

QString OAISandbox::getTransportType() const {
    return m_transport_type;
}
void OAISandbox::setTransportType(const QString &transport_type) {
    m_transport_type = transport_type;
    m_transport_type_isSet = true;
}

bool OAISandbox::is_transport_type_Set() const{
    return m_transport_type_isSet;
}

bool OAISandbox::is_transport_type_Valid() const{
    return m_transport_type_isValid;
}

bool OAISandbox::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_sandboxes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_configured_routes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_repository_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_whitelist.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_sandbox.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sandbox_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISandbox::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
