/**
 * Sandbox API
 * Sandbox API
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@getsandbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuntimeRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuntimeRequest::OAIRuntimeRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuntimeRequest::OAIRuntimeRequest() {
    this->initializeModel();
}

OAIRuntimeRequest::~OAIRuntimeRequest() {}

void OAIRuntimeRequest::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_full_sandbox_id_isSet = false;
    m_full_sandbox_id_isValid = false;

    m_full_sandbox_name_isSet = false;
    m_full_sandbox_name_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_received_timestamp_isSet = false;
    m_received_timestamp_isValid = false;

    m_sandbox_id_isSet = false;
    m_sandbox_id_isValid = false;

    m_sandbox_name_isSet = false;
    m_sandbox_name_isValid = false;

    m_transport_isSet = false;
    m_transport_isValid = false;
}

void OAIRuntimeRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRuntimeRequest::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_full_sandbox_id_isValid = ::OpenAPI::fromJsonValue(m_full_sandbox_id, json[QString("fullSandboxId")]);
    m_full_sandbox_id_isSet = !json[QString("fullSandboxId")].isNull() && m_full_sandbox_id_isValid;

    m_full_sandbox_name_isValid = ::OpenAPI::fromJsonValue(m_full_sandbox_name, json[QString("fullSandboxName")]);
    m_full_sandbox_name_isSet = !json[QString("fullSandboxName")].isNull() && m_full_sandbox_name_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_received_timestamp_isValid = ::OpenAPI::fromJsonValue(m_received_timestamp, json[QString("receivedTimestamp")]);
    m_received_timestamp_isSet = !json[QString("receivedTimestamp")].isNull() && m_received_timestamp_isValid;

    m_sandbox_id_isValid = ::OpenAPI::fromJsonValue(m_sandbox_id, json[QString("sandboxId")]);
    m_sandbox_id_isSet = !json[QString("sandboxId")].isNull() && m_sandbox_id_isValid;

    m_sandbox_name_isValid = ::OpenAPI::fromJsonValue(m_sandbox_name, json[QString("sandboxName")]);
    m_sandbox_name_isSet = !json[QString("sandboxName")].isNull() && m_sandbox_name_isValid;

    m_transport_isValid = ::OpenAPI::fromJsonValue(m_transport, json[QString("transport")]);
    m_transport_isSet = !json[QString("transport")].isNull() && m_transport_isValid;
}

QString OAIRuntimeRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRuntimeRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_full_sandbox_id_isSet) {
        obj.insert(QString("fullSandboxId"), ::OpenAPI::toJsonValue(m_full_sandbox_id));
    }
    if (m_full_sandbox_name_isSet) {
        obj.insert(QString("fullSandboxName"), ::OpenAPI::toJsonValue(m_full_sandbox_name));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_received_timestamp_isSet) {
        obj.insert(QString("receivedTimestamp"), ::OpenAPI::toJsonValue(m_received_timestamp));
    }
    if (m_sandbox_id_isSet) {
        obj.insert(QString("sandboxId"), ::OpenAPI::toJsonValue(m_sandbox_id));
    }
    if (m_sandbox_name_isSet) {
        obj.insert(QString("sandboxName"), ::OpenAPI::toJsonValue(m_sandbox_name));
    }
    if (m_transport_isSet) {
        obj.insert(QString("transport"), ::OpenAPI::toJsonValue(m_transport));
    }
    return obj;
}

QString OAIRuntimeRequest::getBody() const {
    return m_body;
}
void OAIRuntimeRequest::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIRuntimeRequest::is_body_Set() const{
    return m_body_isSet;
}

bool OAIRuntimeRequest::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIRuntimeRequest::getContentType() const {
    return m_content_type;
}
void OAIRuntimeRequest::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIRuntimeRequest::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIRuntimeRequest::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAIRuntimeRequest::getFullSandboxId() const {
    return m_full_sandbox_id;
}
void OAIRuntimeRequest::setFullSandboxId(const QString &full_sandbox_id) {
    m_full_sandbox_id = full_sandbox_id;
    m_full_sandbox_id_isSet = true;
}

bool OAIRuntimeRequest::is_full_sandbox_id_Set() const{
    return m_full_sandbox_id_isSet;
}

bool OAIRuntimeRequest::is_full_sandbox_id_Valid() const{
    return m_full_sandbox_id_isValid;
}

QString OAIRuntimeRequest::getFullSandboxName() const {
    return m_full_sandbox_name;
}
void OAIRuntimeRequest::setFullSandboxName(const QString &full_sandbox_name) {
    m_full_sandbox_name = full_sandbox_name;
    m_full_sandbox_name_isSet = true;
}

bool OAIRuntimeRequest::is_full_sandbox_name_Set() const{
    return m_full_sandbox_name_isSet;
}

bool OAIRuntimeRequest::is_full_sandbox_name_Valid() const{
    return m_full_sandbox_name_isValid;
}

QMap<QString, QString> OAIRuntimeRequest::getHeaders() const {
    return m_headers;
}
void OAIRuntimeRequest::setHeaders(const QMap<QString, QString> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIRuntimeRequest::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIRuntimeRequest::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAIRuntimeRequest::getIp() const {
    return m_ip;
}
void OAIRuntimeRequest::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIRuntimeRequest::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIRuntimeRequest::is_ip_Valid() const{
    return m_ip_isValid;
}

QMap<QString, QString> OAIRuntimeRequest::getProperties() const {
    return m_properties;
}
void OAIRuntimeRequest::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIRuntimeRequest::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIRuntimeRequest::is_properties_Valid() const{
    return m_properties_isValid;
}

qint64 OAIRuntimeRequest::getReceivedTimestamp() const {
    return m_received_timestamp;
}
void OAIRuntimeRequest::setReceivedTimestamp(const qint64 &received_timestamp) {
    m_received_timestamp = received_timestamp;
    m_received_timestamp_isSet = true;
}

bool OAIRuntimeRequest::is_received_timestamp_Set() const{
    return m_received_timestamp_isSet;
}

bool OAIRuntimeRequest::is_received_timestamp_Valid() const{
    return m_received_timestamp_isValid;
}

QString OAIRuntimeRequest::getSandboxId() const {
    return m_sandbox_id;
}
void OAIRuntimeRequest::setSandboxId(const QString &sandbox_id) {
    m_sandbox_id = sandbox_id;
    m_sandbox_id_isSet = true;
}

bool OAIRuntimeRequest::is_sandbox_id_Set() const{
    return m_sandbox_id_isSet;
}

bool OAIRuntimeRequest::is_sandbox_id_Valid() const{
    return m_sandbox_id_isValid;
}

QString OAIRuntimeRequest::getSandboxName() const {
    return m_sandbox_name;
}
void OAIRuntimeRequest::setSandboxName(const QString &sandbox_name) {
    m_sandbox_name = sandbox_name;
    m_sandbox_name_isSet = true;
}

bool OAIRuntimeRequest::is_sandbox_name_Set() const{
    return m_sandbox_name_isSet;
}

bool OAIRuntimeRequest::is_sandbox_name_Valid() const{
    return m_sandbox_name_isValid;
}

QString OAIRuntimeRequest::getTransport() const {
    return m_transport;
}
void OAIRuntimeRequest::setTransport(const QString &transport) {
    m_transport = transport;
    m_transport_isSet = true;
}

bool OAIRuntimeRequest::is_transport_Set() const{
    return m_transport_isSet;
}

bool OAIRuntimeRequest::is_transport_Valid() const{
    return m_transport_isValid;
}

bool OAIRuntimeRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_sandbox_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_sandbox_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sandbox_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sandbox_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRuntimeRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
