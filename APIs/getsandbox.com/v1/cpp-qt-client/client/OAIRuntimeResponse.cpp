/**
 * Sandbox API
 * Sandbox API
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@getsandbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuntimeResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuntimeResponse::OAIRuntimeResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuntimeResponse::OAIRuntimeResponse() {
    this->initializeModel();
}

OAIRuntimeResponse::~OAIRuntimeResponse() {}

void OAIRuntimeResponse::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_duration_millis_isSet = false;
    m_duration_millis_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_responded_timestamp_isSet = false;
    m_responded_timestamp_isValid = false;

    m_response_delay_isSet = false;
    m_response_delay_isValid = false;

    m_transport_isSet = false;
    m_transport_isValid = false;
}

void OAIRuntimeResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRuntimeResponse::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_duration_millis_isValid = ::OpenAPI::fromJsonValue(m_duration_millis, json[QString("durationMillis")]);
    m_duration_millis_isSet = !json[QString("durationMillis")].isNull() && m_duration_millis_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_responded_timestamp_isValid = ::OpenAPI::fromJsonValue(m_responded_timestamp, json[QString("respondedTimestamp")]);
    m_responded_timestamp_isSet = !json[QString("respondedTimestamp")].isNull() && m_responded_timestamp_isValid;

    m_response_delay_isValid = ::OpenAPI::fromJsonValue(m_response_delay, json[QString("responseDelay")]);
    m_response_delay_isSet = !json[QString("responseDelay")].isNull() && m_response_delay_isValid;

    m_transport_isValid = ::OpenAPI::fromJsonValue(m_transport, json[QString("transport")]);
    m_transport_isSet = !json[QString("transport")].isNull() && m_transport_isValid;
}

QString OAIRuntimeResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRuntimeResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_duration_millis_isSet) {
        obj.insert(QString("durationMillis"), ::OpenAPI::toJsonValue(m_duration_millis));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_responded_timestamp_isSet) {
        obj.insert(QString("respondedTimestamp"), ::OpenAPI::toJsonValue(m_responded_timestamp));
    }
    if (m_response_delay_isSet) {
        obj.insert(QString("responseDelay"), ::OpenAPI::toJsonValue(m_response_delay));
    }
    if (m_transport_isSet) {
        obj.insert(QString("transport"), ::OpenAPI::toJsonValue(m_transport));
    }
    return obj;
}

QString OAIRuntimeResponse::getBody() const {
    return m_body;
}
void OAIRuntimeResponse::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIRuntimeResponse::is_body_Set() const{
    return m_body_isSet;
}

bool OAIRuntimeResponse::is_body_Valid() const{
    return m_body_isValid;
}

qint64 OAIRuntimeResponse::getDurationMillis() const {
    return m_duration_millis;
}
void OAIRuntimeResponse::setDurationMillis(const qint64 &duration_millis) {
    m_duration_millis = duration_millis;
    m_duration_millis_isSet = true;
}

bool OAIRuntimeResponse::is_duration_millis_Set() const{
    return m_duration_millis_isSet;
}

bool OAIRuntimeResponse::is_duration_millis_Valid() const{
    return m_duration_millis_isValid;
}

OAIError OAIRuntimeResponse::getError() const {
    return m_error;
}
void OAIRuntimeResponse::setError(const OAIError &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIRuntimeResponse::is_error_Set() const{
    return m_error_isSet;
}

bool OAIRuntimeResponse::is_error_Valid() const{
    return m_error_isValid;
}

QMap<QString, QString> OAIRuntimeResponse::getHeaders() const {
    return m_headers;
}
void OAIRuntimeResponse::setHeaders(const QMap<QString, QString> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIRuntimeResponse::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIRuntimeResponse::is_headers_Valid() const{
    return m_headers_isValid;
}

qint64 OAIRuntimeResponse::getRespondedTimestamp() const {
    return m_responded_timestamp;
}
void OAIRuntimeResponse::setRespondedTimestamp(const qint64 &responded_timestamp) {
    m_responded_timestamp = responded_timestamp;
    m_responded_timestamp_isSet = true;
}

bool OAIRuntimeResponse::is_responded_timestamp_Set() const{
    return m_responded_timestamp_isSet;
}

bool OAIRuntimeResponse::is_responded_timestamp_Valid() const{
    return m_responded_timestamp_isValid;
}

qint32 OAIRuntimeResponse::getResponseDelay() const {
    return m_response_delay;
}
void OAIRuntimeResponse::setResponseDelay(const qint32 &response_delay) {
    m_response_delay = response_delay;
    m_response_delay_isSet = true;
}

bool OAIRuntimeResponse::is_response_delay_Set() const{
    return m_response_delay_isSet;
}

bool OAIRuntimeResponse::is_response_delay_Valid() const{
    return m_response_delay_isValid;
}

QString OAIRuntimeResponse::getTransport() const {
    return m_transport;
}
void OAIRuntimeResponse::setTransport(const QString &transport) {
    m_transport = transport;
    m_transport_isSet = true;
}

bool OAIRuntimeResponse::is_transport_Set() const{
    return m_transport_isSet;
}

bool OAIRuntimeResponse::is_transport_Valid() const{
    return m_transport_isValid;
}

bool OAIRuntimeResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_responded_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRuntimeResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
