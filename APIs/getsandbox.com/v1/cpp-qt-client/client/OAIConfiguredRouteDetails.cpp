/**
 * Sandbox API
 * Sandbox API
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@getsandbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfiguredRouteDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfiguredRouteDetails::OAIConfiguredRouteDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfiguredRouteDetails::OAIConfiguredRouteDetails() {
    this->initializeModel();
}

OAIConfiguredRouteDetails::~OAIConfiguredRouteDetails() {}

void OAIConfiguredRouteDetails::initializeModel() {

    m_active_error_override_isSet = false;
    m_active_error_override_isValid = false;

    m_active_latency_isSet = false;
    m_active_latency_isValid = false;

    m_default_latency_isSet = false;
    m_default_latency_isValid = false;

    m_error_override_type_isSet = false;
    m_error_override_type_isValid = false;

    m_load_latency_isSet = false;
    m_load_latency_isValid = false;

    m_load_threshold_isSet = false;
    m_load_threshold_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_route_config_isSet = false;
    m_route_config_isValid = false;

    m_transport_isSet = false;
    m_transport_isValid = false;
}

void OAIConfiguredRouteDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfiguredRouteDetails::fromJsonObject(QJsonObject json) {

    m_active_error_override_isValid = ::OpenAPI::fromJsonValue(m_active_error_override, json[QString("activeErrorOverride")]);
    m_active_error_override_isSet = !json[QString("activeErrorOverride")].isNull() && m_active_error_override_isValid;

    m_active_latency_isValid = ::OpenAPI::fromJsonValue(m_active_latency, json[QString("activeLatency")]);
    m_active_latency_isSet = !json[QString("activeLatency")].isNull() && m_active_latency_isValid;

    m_default_latency_isValid = ::OpenAPI::fromJsonValue(m_default_latency, json[QString("defaultLatency")]);
    m_default_latency_isSet = !json[QString("defaultLatency")].isNull() && m_default_latency_isValid;

    m_error_override_type_isValid = ::OpenAPI::fromJsonValue(m_error_override_type, json[QString("errorOverrideType")]);
    m_error_override_type_isSet = !json[QString("errorOverrideType")].isNull() && m_error_override_type_isValid;

    m_load_latency_isValid = ::OpenAPI::fromJsonValue(m_load_latency, json[QString("loadLatency")]);
    m_load_latency_isSet = !json[QString("loadLatency")].isNull() && m_load_latency_isValid;

    m_load_threshold_isValid = ::OpenAPI::fromJsonValue(m_load_threshold, json[QString("loadThreshold")]);
    m_load_threshold_isSet = !json[QString("loadThreshold")].isNull() && m_load_threshold_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_route_config_isValid = ::OpenAPI::fromJsonValue(m_route_config, json[QString("routeConfig")]);
    m_route_config_isSet = !json[QString("routeConfig")].isNull() && m_route_config_isValid;

    m_transport_isValid = ::OpenAPI::fromJsonValue(m_transport, json[QString("transport")]);
    m_transport_isSet = !json[QString("transport")].isNull() && m_transport_isValid;
}

QString OAIConfiguredRouteDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfiguredRouteDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_active_error_override_isSet) {
        obj.insert(QString("activeErrorOverride"), ::OpenAPI::toJsonValue(m_active_error_override));
    }
    if (m_active_latency_isSet) {
        obj.insert(QString("activeLatency"), ::OpenAPI::toJsonValue(m_active_latency));
    }
    if (m_default_latency_isSet) {
        obj.insert(QString("defaultLatency"), ::OpenAPI::toJsonValue(m_default_latency));
    }
    if (m_error_override_type_isSet) {
        obj.insert(QString("errorOverrideType"), ::OpenAPI::toJsonValue(m_error_override_type));
    }
    if (m_load_latency_isSet) {
        obj.insert(QString("loadLatency"), ::OpenAPI::toJsonValue(m_load_latency));
    }
    if (m_load_threshold_isSet) {
        obj.insert(QString("loadThreshold"), ::OpenAPI::toJsonValue(m_load_threshold));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_route_config.isSet()) {
        obj.insert(QString("routeConfig"), ::OpenAPI::toJsonValue(m_route_config));
    }
    if (m_transport_isSet) {
        obj.insert(QString("transport"), ::OpenAPI::toJsonValue(m_transport));
    }
    return obj;
}

bool OAIConfiguredRouteDetails::isActiveErrorOverride() const {
    return m_active_error_override;
}
void OAIConfiguredRouteDetails::setActiveErrorOverride(const bool &active_error_override) {
    m_active_error_override = active_error_override;
    m_active_error_override_isSet = true;
}

bool OAIConfiguredRouteDetails::is_active_error_override_Set() const{
    return m_active_error_override_isSet;
}

bool OAIConfiguredRouteDetails::is_active_error_override_Valid() const{
    return m_active_error_override_isValid;
}

bool OAIConfiguredRouteDetails::isActiveLatency() const {
    return m_active_latency;
}
void OAIConfiguredRouteDetails::setActiveLatency(const bool &active_latency) {
    m_active_latency = active_latency;
    m_active_latency_isSet = true;
}

bool OAIConfiguredRouteDetails::is_active_latency_Set() const{
    return m_active_latency_isSet;
}

bool OAIConfiguredRouteDetails::is_active_latency_Valid() const{
    return m_active_latency_isValid;
}

qint32 OAIConfiguredRouteDetails::getDefaultLatency() const {
    return m_default_latency;
}
void OAIConfiguredRouteDetails::setDefaultLatency(const qint32 &default_latency) {
    m_default_latency = default_latency;
    m_default_latency_isSet = true;
}

bool OAIConfiguredRouteDetails::is_default_latency_Set() const{
    return m_default_latency_isSet;
}

bool OAIConfiguredRouteDetails::is_default_latency_Valid() const{
    return m_default_latency_isValid;
}

QString OAIConfiguredRouteDetails::getErrorOverrideType() const {
    return m_error_override_type;
}
void OAIConfiguredRouteDetails::setErrorOverrideType(const QString &error_override_type) {
    m_error_override_type = error_override_type;
    m_error_override_type_isSet = true;
}

bool OAIConfiguredRouteDetails::is_error_override_type_Set() const{
    return m_error_override_type_isSet;
}

bool OAIConfiguredRouteDetails::is_error_override_type_Valid() const{
    return m_error_override_type_isValid;
}

qint32 OAIConfiguredRouteDetails::getLoadLatency() const {
    return m_load_latency;
}
void OAIConfiguredRouteDetails::setLoadLatency(const qint32 &load_latency) {
    m_load_latency = load_latency;
    m_load_latency_isSet = true;
}

bool OAIConfiguredRouteDetails::is_load_latency_Set() const{
    return m_load_latency_isSet;
}

bool OAIConfiguredRouteDetails::is_load_latency_Valid() const{
    return m_load_latency_isValid;
}

qint32 OAIConfiguredRouteDetails::getLoadThreshold() const {
    return m_load_threshold;
}
void OAIConfiguredRouteDetails::setLoadThreshold(const qint32 &load_threshold) {
    m_load_threshold = load_threshold;
    m_load_threshold_isSet = true;
}

bool OAIConfiguredRouteDetails::is_load_threshold_Set() const{
    return m_load_threshold_isSet;
}

bool OAIConfiguredRouteDetails::is_load_threshold_Valid() const{
    return m_load_threshold_isValid;
}

QString OAIConfiguredRouteDetails::getMethod() const {
    return m_method;
}
void OAIConfiguredRouteDetails::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIConfiguredRouteDetails::is_method_Set() const{
    return m_method_isSet;
}

bool OAIConfiguredRouteDetails::is_method_Valid() const{
    return m_method_isValid;
}

QString OAIConfiguredRouteDetails::getPath() const {
    return m_path;
}
void OAIConfiguredRouteDetails::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIConfiguredRouteDetails::is_path_Set() const{
    return m_path_isSet;
}

bool OAIConfiguredRouteDetails::is_path_Valid() const{
    return m_path_isValid;
}

QMap<QString, QString> OAIConfiguredRouteDetails::getProperties() const {
    return m_properties;
}
void OAIConfiguredRouteDetails::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIConfiguredRouteDetails::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIConfiguredRouteDetails::is_properties_Valid() const{
    return m_properties_isValid;
}

OAIRouteConfig OAIConfiguredRouteDetails::getRouteConfig() const {
    return m_route_config;
}
void OAIConfiguredRouteDetails::setRouteConfig(const OAIRouteConfig &route_config) {
    m_route_config = route_config;
    m_route_config_isSet = true;
}

bool OAIConfiguredRouteDetails::is_route_config_Set() const{
    return m_route_config_isSet;
}

bool OAIConfiguredRouteDetails::is_route_config_Valid() const{
    return m_route_config_isValid;
}

QString OAIConfiguredRouteDetails::getTransport() const {
    return m_transport;
}
void OAIConfiguredRouteDetails::setTransport(const QString &transport) {
    m_transport = transport;
    m_transport_isSet = true;
}

bool OAIConfiguredRouteDetails::is_transport_Set() const{
    return m_transport_isSet;
}

bool OAIConfiguredRouteDetails::is_transport_Valid() const{
    return m_transport_isValid;
}

bool OAIConfiguredRouteDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_error_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_override_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfiguredRouteDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_error_override_type_isValid && true;
}

} // namespace OpenAPI
