/**
 * Sandbox API
 * Sandbox API
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@getsandbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConfiguredRouteDetails.h
 *
 * 
 */

#ifndef OAIConfiguredRouteDetails_H
#define OAIConfiguredRouteDetails_H

#include <QJsonObject>

#include "OAIRouteConfig.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRouteConfig;

class OAIConfiguredRouteDetails : public OAIObject {
public:
    OAIConfiguredRouteDetails();
    OAIConfiguredRouteDetails(QString json);
    ~OAIConfiguredRouteDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isActiveErrorOverride() const;
    void setActiveErrorOverride(const bool &active_error_override);
    bool is_active_error_override_Set() const;
    bool is_active_error_override_Valid() const;

    bool isActiveLatency() const;
    void setActiveLatency(const bool &active_latency);
    bool is_active_latency_Set() const;
    bool is_active_latency_Valid() const;

    qint32 getDefaultLatency() const;
    void setDefaultLatency(const qint32 &default_latency);
    bool is_default_latency_Set() const;
    bool is_default_latency_Valid() const;

    QString getErrorOverrideType() const;
    void setErrorOverrideType(const QString &error_override_type);
    bool is_error_override_type_Set() const;
    bool is_error_override_type_Valid() const;

    qint32 getLoadLatency() const;
    void setLoadLatency(const qint32 &load_latency);
    bool is_load_latency_Set() const;
    bool is_load_latency_Valid() const;

    qint32 getLoadThreshold() const;
    void setLoadThreshold(const qint32 &load_threshold);
    bool is_load_threshold_Set() const;
    bool is_load_threshold_Valid() const;

    QString getMethod() const;
    void setMethod(const QString &method);
    bool is_method_Set() const;
    bool is_method_Valid() const;

    QString getPath() const;
    void setPath(const QString &path);
    bool is_path_Set() const;
    bool is_path_Valid() const;

    QMap<QString, QString> getProperties() const;
    void setProperties(const QMap<QString, QString> &properties);
    bool is_properties_Set() const;
    bool is_properties_Valid() const;

    OAIRouteConfig getRouteConfig() const;
    void setRouteConfig(const OAIRouteConfig &route_config);
    bool is_route_config_Set() const;
    bool is_route_config_Valid() const;

    QString getTransport() const;
    void setTransport(const QString &transport);
    bool is_transport_Set() const;
    bool is_transport_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_active_error_override;
    bool m_active_error_override_isSet;
    bool m_active_error_override_isValid;

    bool m_active_latency;
    bool m_active_latency_isSet;
    bool m_active_latency_isValid;

    qint32 m_default_latency;
    bool m_default_latency_isSet;
    bool m_default_latency_isValid;

    QString m_error_override_type;
    bool m_error_override_type_isSet;
    bool m_error_override_type_isValid;

    qint32 m_load_latency;
    bool m_load_latency_isSet;
    bool m_load_latency_isValid;

    qint32 m_load_threshold;
    bool m_load_threshold_isSet;
    bool m_load_threshold_isValid;

    QString m_method;
    bool m_method_isSet;
    bool m_method_isValid;

    QString m_path;
    bool m_path_isSet;
    bool m_path_isValid;

    QMap<QString, QString> m_properties;
    bool m_properties_isSet;
    bool m_properties_isValid;

    OAIRouteConfig m_route_config;
    bool m_route_config_isSet;
    bool m_route_config_isValid;

    QString m_transport;
    bool m_transport_isSet;
    bool m_transport_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConfiguredRouteDetails)

#endif // OAIConfiguredRouteDetails_H
