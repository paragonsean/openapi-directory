/**
 * Sandbox API
 * Sandbox API
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@getsandbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISandbox.h
 *
 * 
 */

#ifndef OAISandbox_H
#define OAISandbox_H

#include <QJsonObject>

#include "OAIConfiguredRouteDetails.h"
#include "OAIObject.h"
#include <QMap>
#include <QSet>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIConfiguredRouteDetails;

class OAISandbox : public OAIObject {
public:
    OAISandbox();
    OAISandbox(QString json);
    ~OAISandbox() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApiDefinition() const;
    void setApiDefinition(const QString &api_definition);
    bool is_api_definition_Set() const;
    bool is_api_definition_Valid() const;

    QSet<OAISandbox> getChildSandboxes() const;
    void setChildSandboxes(const QSet<OAISandbox> &child_sandboxes);
    bool is_child_sandboxes_Set() const;
    bool is_child_sandboxes_Valid() const;

    QSet<OAIConfiguredRouteDetails> getConfiguredRoutes() const;
    void setConfiguredRoutes(const QSet<OAIConfiguredRouteDetails> &configured_routes);
    bool is_configured_routes_Set() const;
    bool is_configured_routes_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getGitAccessToken() const;
    void setGitAccessToken(const QString &git_access_token);
    bool is_git_access_token_Set() const;
    bool is_git_access_token_Valid() const;

    QString getGitUrl() const;
    void setGitUrl(const QString &git_url);
    bool is_git_url_Set() const;
    bool is_git_url_Valid() const;

    bool isHasRepository() const;
    void setHasRepository(const bool &has_repository);
    bool is_has_repository_Set() const;
    bool is_has_repository_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QSet<QString> getIpWhitelist() const;
    void setIpWhitelist(const QSet<QString> &ip_whitelist);
    bool is_ip_whitelist_Set() const;
    bool is_ip_whitelist_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAISandbox getParentSandbox() const;
    void setParentSandbox(const OAISandbox &parent_sandbox);
    bool is_parent_sandbox_Set() const;
    bool is_parent_sandbox_Valid() const;

    QMap<QString, OAIObject> getProperties() const;
    void setProperties(const QMap<QString, OAIObject> &properties);
    bool is_properties_Set() const;
    bool is_properties_Valid() const;

    QString getProxyStatus() const;
    void setProxyStatus(const QString &proxy_status);
    bool is_proxy_status_Set() const;
    bool is_proxy_status_Valid() const;

    QString getRuntimeVersion() const;
    void setRuntimeVersion(const QString &runtime_version);
    bool is_runtime_version_Set() const;
    bool is_runtime_version_Valid() const;

    QString getSandboxUrl() const;
    void setSandboxUrl(const QString &sandbox_url);
    bool is_sandbox_url_Set() const;
    bool is_sandbox_url_Valid() const;

    QString getStackType() const;
    void setStackType(const QString &stack_type);
    bool is_stack_type_Set() const;
    bool is_stack_type_Valid() const;

    QString getTransportType() const;
    void setTransportType(const QString &transport_type);
    bool is_transport_type_Set() const;
    bool is_transport_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_api_definition;
    bool m_api_definition_isSet;
    bool m_api_definition_isValid;

    QSet<OAISandbox> m_child_sandboxes;
    bool m_child_sandboxes_isSet;
    bool m_child_sandboxes_isValid;

    QSet<OAIConfiguredRouteDetails> m_configured_routes;
    bool m_configured_routes_isSet;
    bool m_configured_routes_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_git_access_token;
    bool m_git_access_token_isSet;
    bool m_git_access_token_isValid;

    QString m_git_url;
    bool m_git_url_isSet;
    bool m_git_url_isValid;

    bool m_has_repository;
    bool m_has_repository_isSet;
    bool m_has_repository_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QSet<QString> m_ip_whitelist;
    bool m_ip_whitelist_isSet;
    bool m_ip_whitelist_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAISandbox m_parent_sandbox;
    bool m_parent_sandbox_isSet;
    bool m_parent_sandbox_isValid;

    QMap<QString, OAIObject> m_properties;
    bool m_properties_isSet;
    bool m_properties_isValid;

    QString m_proxy_status;
    bool m_proxy_status_isSet;
    bool m_proxy_status_isValid;

    QString m_runtime_version;
    bool m_runtime_version_isSet;
    bool m_runtime_version_isValid;

    QString m_sandbox_url;
    bool m_sandbox_url_isSet;
    bool m_sandbox_url_isValid;

    QString m_stack_type;
    bool m_stack_type_isSet;
    bool m_stack_type_isValid;

    QString m_transport_type;
    bool m_transport_type_isSet;
    bool m_transport_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISandbox)

#endif // OAISandbox_H
