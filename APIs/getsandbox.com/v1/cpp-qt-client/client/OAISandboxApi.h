/**
 * Sandbox API
 * Sandbox API
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@getsandbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISandboxApi_H
#define OAI_OAISandboxApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateSandbox.h"
#include "OAISandbox.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISandboxApi : public QObject {
    Q_OBJECT

public:
    OAISandboxApi(const int timeOut = 0);
    ~OAISandboxApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  body OAICreateSandbox [required]
    */
    virtual void createSandbox(const OAICreateSandbox &body);

    /**
    * @param[in]  sandbox_name QString [required]
    */
    virtual void deleteSandbox(const QString &sandbox_name);

    /**
    * @param[in]  sandbox_name QString [required]
    */
    virtual void deleteSandboxState(const QString &sandbox_name);

    /**
    * @param[in]  sandbox_name QString [required]
    */
    virtual void forkSandbox(const QString &sandbox_name);

    /**
    * @param[in]  sandbox_name QString [required]
    */
    virtual void getSandbox(const QString &sandbox_name);

    /**
    * @param[in]  sandbox_name QString [required]
    */
    virtual void getSandboxState(const QString &sandbox_name);

    /**
    * @param[in]  filter_type QString [optional]
    */
    virtual void getSandboxes(const ::OpenAPI::OptionalParam<QString> &filter_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sandbox_name QString [required]
    * @param[in]  body OAISandbox [required]
    */
    virtual void updateSandbox(const QString &sandbox_name, const OAISandbox &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSandboxCallback(OAIHttpRequestWorker *worker);
    void deleteSandboxCallback(OAIHttpRequestWorker *worker);
    void deleteSandboxStateCallback(OAIHttpRequestWorker *worker);
    void forkSandboxCallback(OAIHttpRequestWorker *worker);
    void getSandboxCallback(OAIHttpRequestWorker *worker);
    void getSandboxStateCallback(OAIHttpRequestWorker *worker);
    void getSandboxesCallback(OAIHttpRequestWorker *worker);
    void updateSandboxCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSandboxSignal(OAISandbox summary);
    void deleteSandboxSignal();
    void deleteSandboxStateSignal();
    void forkSandboxSignal(OAISandbox summary);
    void getSandboxSignal(OAISandbox summary);
    void getSandboxStateSignal();
    void getSandboxesSignal(QList<OAISandbox> summary);
    void updateSandboxSignal(OAISandbox summary);


    void createSandboxSignalFull(OAIHttpRequestWorker *worker, OAISandbox summary);
    void deleteSandboxSignalFull(OAIHttpRequestWorker *worker);
    void deleteSandboxStateSignalFull(OAIHttpRequestWorker *worker);
    void forkSandboxSignalFull(OAIHttpRequestWorker *worker, OAISandbox summary);
    void getSandboxSignalFull(OAIHttpRequestWorker *worker, OAISandbox summary);
    void getSandboxStateSignalFull(OAIHttpRequestWorker *worker);
    void getSandboxesSignalFull(OAIHttpRequestWorker *worker, QList<OAISandbox> summary);
    void updateSandboxSignalFull(OAIHttpRequestWorker *worker, OAISandbox summary);

    Q_DECL_DEPRECATED_X("Use createSandboxSignalError() instead")
    void createSandboxSignalE(OAISandbox summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSandboxSignalError(OAISandbox summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSandboxSignalError() instead")
    void deleteSandboxSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSandboxSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSandboxStateSignalError() instead")
    void deleteSandboxStateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSandboxStateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forkSandboxSignalError() instead")
    void forkSandboxSignalE(OAISandbox summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forkSandboxSignalError(OAISandbox summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSandboxSignalError() instead")
    void getSandboxSignalE(OAISandbox summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSandboxSignalError(OAISandbox summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSandboxStateSignalError() instead")
    void getSandboxStateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSandboxStateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSandboxesSignalError() instead")
    void getSandboxesSignalE(QList<OAISandbox> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSandboxesSignalError(QList<OAISandbox> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSandboxSignalError() instead")
    void updateSandboxSignalE(OAISandbox summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSandboxSignalError(OAISandbox summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSandboxSignalErrorFull() instead")
    void createSandboxSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSandboxSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSandboxSignalErrorFull() instead")
    void deleteSandboxSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSandboxSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSandboxStateSignalErrorFull() instead")
    void deleteSandboxStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSandboxStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forkSandboxSignalErrorFull() instead")
    void forkSandboxSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forkSandboxSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSandboxSignalErrorFull() instead")
    void getSandboxSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSandboxSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSandboxStateSignalErrorFull() instead")
    void getSandboxStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSandboxStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSandboxesSignalErrorFull() instead")
    void getSandboxesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSandboxesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSandboxSignalErrorFull() instead")
    void updateSandboxSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSandboxSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
