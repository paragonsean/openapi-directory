/*
 * Sandbox API
 * Sandbox API
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@getsandbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateSandbox
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:43.511538-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateSandbox {
  public static final String SERIALIZED_NAME_COMMIT_BASE_TEMPLATE = "commitBaseTemplate";
  @SerializedName(SERIALIZED_NAME_COMMIT_BASE_TEMPLATE)
  private Boolean commitBaseTemplate;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OWNER_ORGANISATION_NAME = "ownerOrganisationName";
  @SerializedName(SERIALIZED_NAME_OWNER_ORGANISATION_NAME)
  private String ownerOrganisationName;

  public static final String SERIALIZED_NAME_PARENT_SANDBOX_NAME = "parentSandboxName";
  @SerializedName(SERIALIZED_NAME_PARENT_SANDBOX_NAME)
  private String parentSandboxName;

  /**
   * Gets or Sets transportType
   */
  @JsonAdapter(TransportTypeEnum.Adapter.class)
  public enum TransportTypeEnum {
    HTTP("HTTP");

    private String value;

    TransportTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransportTypeEnum fromValue(String value) {
      for (TransportTypeEnum b : TransportTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransportTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransportTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransportTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransportTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TransportTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSPORT_TYPE = "transportType";
  @SerializedName(SERIALIZED_NAME_TRANSPORT_TYPE)
  private TransportTypeEnum transportType;

  public CreateSandbox() {
  }

  public CreateSandbox commitBaseTemplate(Boolean commitBaseTemplate) {
    this.commitBaseTemplate = commitBaseTemplate;
    return this;
  }

  /**
   * Whether to commit the example Sandbox definition upon creation.
   * @return commitBaseTemplate
   */
  @javax.annotation.Nullable
  public Boolean getCommitBaseTemplate() {
    return commitBaseTemplate;
  }

  public void setCommitBaseTemplate(Boolean commitBaseTemplate) {
    this.commitBaseTemplate = commitBaseTemplate;
  }


  public CreateSandbox description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Text describing this Sandbox.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateSandbox name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional name to give the Sandbox, will be generated if omitted.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateSandbox ownerOrganisationName(String ownerOrganisationName) {
    this.ownerOrganisationName = ownerOrganisationName;
    return this;
  }

  /**
   * Name of the team this Sandbox should be created under.
   * @return ownerOrganisationName
   */
  @javax.annotation.Nullable
  public String getOwnerOrganisationName() {
    return ownerOrganisationName;
  }

  public void setOwnerOrganisationName(String ownerOrganisationName) {
    this.ownerOrganisationName = ownerOrganisationName;
  }


  public CreateSandbox parentSandboxName(String parentSandboxName) {
    this.parentSandboxName = parentSandboxName;
    return this;
  }

  /**
   * Name of the Sandbox this should be created under, if exists will be a &#39;clone&#39;.
   * @return parentSandboxName
   */
  @javax.annotation.Nullable
  public String getParentSandboxName() {
    return parentSandboxName;
  }

  public void setParentSandboxName(String parentSandboxName) {
    this.parentSandboxName = parentSandboxName;
  }


  public CreateSandbox transportType(TransportTypeEnum transportType) {
    this.transportType = transportType;
    return this;
  }

  /**
   * Get transportType
   * @return transportType
   */
  @javax.annotation.Nullable
  public TransportTypeEnum getTransportType() {
    return transportType;
  }

  public void setTransportType(TransportTypeEnum transportType) {
    this.transportType = transportType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSandbox createSandbox = (CreateSandbox) o;
    return Objects.equals(this.commitBaseTemplate, createSandbox.commitBaseTemplate) &&
        Objects.equals(this.description, createSandbox.description) &&
        Objects.equals(this.name, createSandbox.name) &&
        Objects.equals(this.ownerOrganisationName, createSandbox.ownerOrganisationName) &&
        Objects.equals(this.parentSandboxName, createSandbox.parentSandboxName) &&
        Objects.equals(this.transportType, createSandbox.transportType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commitBaseTemplate, description, name, ownerOrganisationName, parentSandboxName, transportType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSandbox {\n");
    sb.append("    commitBaseTemplate: ").append(toIndentedString(commitBaseTemplate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ownerOrganisationName: ").append(toIndentedString(ownerOrganisationName)).append("\n");
    sb.append("    parentSandboxName: ").append(toIndentedString(parentSandboxName)).append("\n");
    sb.append("    transportType: ").append(toIndentedString(transportType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commitBaseTemplate");
    openapiFields.add("description");
    openapiFields.add("name");
    openapiFields.add("ownerOrganisationName");
    openapiFields.add("parentSandboxName");
    openapiFields.add("transportType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateSandbox
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateSandbox.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSandbox is not found in the empty JSON string", CreateSandbox.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateSandbox.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateSandbox` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("ownerOrganisationName") != null && !jsonObj.get("ownerOrganisationName").isJsonNull()) && !jsonObj.get("ownerOrganisationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerOrganisationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerOrganisationName").toString()));
      }
      if ((jsonObj.get("parentSandboxName") != null && !jsonObj.get("parentSandboxName").isJsonNull()) && !jsonObj.get("parentSandboxName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentSandboxName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentSandboxName").toString()));
      }
      if ((jsonObj.get("transportType") != null && !jsonObj.get("transportType").isJsonNull()) && !jsonObj.get("transportType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transportType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transportType").toString()));
      }
      // validate the optional field `transportType`
      if (jsonObj.get("transportType") != null && !jsonObj.get("transportType").isJsonNull()) {
        TransportTypeEnum.validateJsonElement(jsonObj.get("transportType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSandbox.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSandbox' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSandbox> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSandbox.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSandbox>() {
           @Override
           public void write(JsonWriter out, CreateSandbox value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSandbox read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateSandbox given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateSandbox
   * @throws IOException if the JSON string is invalid with respect to CreateSandbox
   */
  public static CreateSandbox fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSandbox.class);
  }

  /**
   * Convert an instance of CreateSandbox to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

