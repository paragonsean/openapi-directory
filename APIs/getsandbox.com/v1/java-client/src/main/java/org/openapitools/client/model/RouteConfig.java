/*
 * Sandbox API
 * Sandbox API
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@getsandbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RouteConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:43.511538-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RouteConfig {
  /**
   * Gets or Sets errorStrategy
   */
  @JsonAdapter(ErrorStrategyEnum.Adapter.class)
  public enum ErrorStrategyEnum {
    NONE("NONE"),
    
    TIMEOUT("TIMEOUT"),
    
    SERVICE_DOWN("SERVICE_DOWN");

    private String value;

    ErrorStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ErrorStrategyEnum fromValue(String value) {
      for (ErrorStrategyEnum b : ErrorStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ErrorStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ErrorStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ErrorStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ErrorStrategyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ErrorStrategyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ERROR_STRATEGY = "errorStrategy";
  @SerializedName(SERIALIZED_NAME_ERROR_STRATEGY)
  private ErrorStrategyEnum errorStrategy;

  public static final String SERIALIZED_NAME_LATENCY_MS = "latencyMs";
  @SerializedName(SERIALIZED_NAME_LATENCY_MS)
  private Integer latencyMs;

  public static final String SERIALIZED_NAME_LATENCY_MULTIPLIER = "latencyMultiplier";
  @SerializedName(SERIALIZED_NAME_LATENCY_MULTIPLIER)
  private Integer latencyMultiplier;

  /**
   * Gets or Sets latencyType
   */
  @JsonAdapter(LatencyTypeEnum.Adapter.class)
  public enum LatencyTypeEnum {
    NONE("NONE"),
    
    CONSTANT("CONSTANT"),
    
    LINEAR("LINEAR");

    private String value;

    LatencyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LatencyTypeEnum fromValue(String value) {
      for (LatencyTypeEnum b : LatencyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LatencyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LatencyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LatencyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LatencyTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LatencyTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LATENCY_TYPE = "latencyType";
  @SerializedName(SERIALIZED_NAME_LATENCY_TYPE)
  private LatencyTypeEnum latencyType;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public RouteConfig() {
  }

  public RouteConfig errorStrategy(ErrorStrategyEnum errorStrategy) {
    this.errorStrategy = errorStrategy;
    return this;
  }

  /**
   * Get errorStrategy
   * @return errorStrategy
   */
  @javax.annotation.Nullable
  public ErrorStrategyEnum getErrorStrategy() {
    return errorStrategy;
  }

  public void setErrorStrategy(ErrorStrategyEnum errorStrategy) {
    this.errorStrategy = errorStrategy;
  }


  public RouteConfig latencyMs(Integer latencyMs) {
    this.latencyMs = latencyMs;
    return this;
  }

  /**
   * Get latencyMs
   * @return latencyMs
   */
  @javax.annotation.Nullable
  public Integer getLatencyMs() {
    return latencyMs;
  }

  public void setLatencyMs(Integer latencyMs) {
    this.latencyMs = latencyMs;
  }


  public RouteConfig latencyMultiplier(Integer latencyMultiplier) {
    this.latencyMultiplier = latencyMultiplier;
    return this;
  }

  /**
   * Get latencyMultiplier
   * @return latencyMultiplier
   */
  @javax.annotation.Nullable
  public Integer getLatencyMultiplier() {
    return latencyMultiplier;
  }

  public void setLatencyMultiplier(Integer latencyMultiplier) {
    this.latencyMultiplier = latencyMultiplier;
  }


  public RouteConfig latencyType(LatencyTypeEnum latencyType) {
    this.latencyType = latencyType;
    return this;
  }

  /**
   * Get latencyType
   * @return latencyType
   */
  @javax.annotation.Nullable
  public LatencyTypeEnum getLatencyType() {
    return latencyType;
  }

  public void setLatencyType(LatencyTypeEnum latencyType) {
    this.latencyType = latencyType;
  }


  public RouteConfig method(String method) {
    this.method = method;
    return this;
  }

  /**
   * Get method
   * @return method
   */
  @javax.annotation.Nullable
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }


  public RouteConfig path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteConfig routeConfig = (RouteConfig) o;
    return Objects.equals(this.errorStrategy, routeConfig.errorStrategy) &&
        Objects.equals(this.latencyMs, routeConfig.latencyMs) &&
        Objects.equals(this.latencyMultiplier, routeConfig.latencyMultiplier) &&
        Objects.equals(this.latencyType, routeConfig.latencyType) &&
        Objects.equals(this.method, routeConfig.method) &&
        Objects.equals(this.path, routeConfig.path);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorStrategy, latencyMs, latencyMultiplier, latencyType, method, path);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteConfig {\n");
    sb.append("    errorStrategy: ").append(toIndentedString(errorStrategy)).append("\n");
    sb.append("    latencyMs: ").append(toIndentedString(latencyMs)).append("\n");
    sb.append("    latencyMultiplier: ").append(toIndentedString(latencyMultiplier)).append("\n");
    sb.append("    latencyType: ").append(toIndentedString(latencyType)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("errorStrategy");
    openapiFields.add("latencyMs");
    openapiFields.add("latencyMultiplier");
    openapiFields.add("latencyType");
    openapiFields.add("method");
    openapiFields.add("path");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RouteConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RouteConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RouteConfig is not found in the empty JSON string", RouteConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RouteConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RouteConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("errorStrategy") != null && !jsonObj.get("errorStrategy").isJsonNull()) && !jsonObj.get("errorStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorStrategy").toString()));
      }
      // validate the optional field `errorStrategy`
      if (jsonObj.get("errorStrategy") != null && !jsonObj.get("errorStrategy").isJsonNull()) {
        ErrorStrategyEnum.validateJsonElement(jsonObj.get("errorStrategy"));
      }
      if ((jsonObj.get("latencyType") != null && !jsonObj.get("latencyType").isJsonNull()) && !jsonObj.get("latencyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latencyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latencyType").toString()));
      }
      // validate the optional field `latencyType`
      if (jsonObj.get("latencyType") != null && !jsonObj.get("latencyType").isJsonNull()) {
        LatencyTypeEnum.validateJsonElement(jsonObj.get("latencyType"));
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RouteConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RouteConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RouteConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RouteConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<RouteConfig>() {
           @Override
           public void write(JsonWriter out, RouteConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RouteConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RouteConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RouteConfig
   * @throws IOException if the JSON string is invalid with respect to RouteConfig
   */
  public static RouteConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RouteConfig.class);
  }

  /**
   * Convert an instance of RouteConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

