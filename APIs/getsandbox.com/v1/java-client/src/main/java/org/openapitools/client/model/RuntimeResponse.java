/*
 * Sandbox API
 * Sandbox API
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@getsandbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.Error;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RuntimeResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:43.511538-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RuntimeResponse {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_DURATION_MILLIS = "durationMillis";
  @SerializedName(SERIALIZED_NAME_DURATION_MILLIS)
  private Long durationMillis;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private Error error;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private Map<String, String> headers = new HashMap<>();

  public static final String SERIALIZED_NAME_RESPONDED_TIMESTAMP = "respondedTimestamp";
  @SerializedName(SERIALIZED_NAME_RESPONDED_TIMESTAMP)
  private Long respondedTimestamp;

  public static final String SERIALIZED_NAME_RESPONSE_DELAY = "responseDelay";
  @SerializedName(SERIALIZED_NAME_RESPONSE_DELAY)
  private Integer responseDelay;

  public static final String SERIALIZED_NAME_TRANSPORT = "transport";
  @SerializedName(SERIALIZED_NAME_TRANSPORT)
  private String transport;

  public RuntimeResponse() {
  }

  public RuntimeResponse body(String body) {
    this.body = body;
    return this;
  }

  /**
   * The body of the given response.
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public RuntimeResponse durationMillis(Long durationMillis) {
    this.durationMillis = durationMillis;
    return this;
  }

  /**
   * Duration in milliseconds of the processing time in Sandbox.
   * @return durationMillis
   */
  @javax.annotation.Nullable
  public Long getDurationMillis() {
    return durationMillis;
  }

  public void setDurationMillis(Long durationMillis) {
    this.durationMillis = durationMillis;
  }


  public RuntimeResponse error(Error error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public Error getError() {
    return error;
  }

  public void setError(Error error) {
    this.error = error;
  }


  public RuntimeResponse headers(Map<String, String> headers) {
    this.headers = headers;
    return this;
  }

  public RuntimeResponse putHeadersItem(String key, String headersItem) {
    if (this.headers == null) {
      this.headers = new HashMap<>();
    }
    this.headers.put(key, headersItem);
    return this;
  }

  /**
   * Transport headers for the given response.
   * @return headers
   */
  @javax.annotation.Nullable
  public Map<String, String> getHeaders() {
    return headers;
  }

  public void setHeaders(Map<String, String> headers) {
    this.headers = headers;
  }


  public RuntimeResponse respondedTimestamp(Long respondedTimestamp) {
    this.respondedTimestamp = respondedTimestamp;
    return this;
  }

  /**
   * The epoch time in milliseconds when the response was sent.
   * @return respondedTimestamp
   */
  @javax.annotation.Nullable
  public Long getRespondedTimestamp() {
    return respondedTimestamp;
  }

  public void setRespondedTimestamp(Long respondedTimestamp) {
    this.respondedTimestamp = respondedTimestamp;
  }


  public RuntimeResponse responseDelay(Integer responseDelay) {
    this.responseDelay = responseDelay;
    return this;
  }

  /**
   * Duration in milliseconds of the response delay.
   * @return responseDelay
   */
  @javax.annotation.Nullable
  public Integer getResponseDelay() {
    return responseDelay;
  }

  public void setResponseDelay(Integer responseDelay) {
    this.responseDelay = responseDelay;
  }


  public RuntimeResponse transport(String transport) {
    this.transport = transport;
    return this;
  }

  /**
   * Which transport the request was for, &#39;HTTP&#39;.
   * @return transport
   */
  @javax.annotation.Nullable
  public String getTransport() {
    return transport;
  }

  public void setTransport(String transport) {
    this.transport = transport;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuntimeResponse runtimeResponse = (RuntimeResponse) o;
    return Objects.equals(this.body, runtimeResponse.body) &&
        Objects.equals(this.durationMillis, runtimeResponse.durationMillis) &&
        Objects.equals(this.error, runtimeResponse.error) &&
        Objects.equals(this.headers, runtimeResponse.headers) &&
        Objects.equals(this.respondedTimestamp, runtimeResponse.respondedTimestamp) &&
        Objects.equals(this.responseDelay, runtimeResponse.responseDelay) &&
        Objects.equals(this.transport, runtimeResponse.transport);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, durationMillis, error, headers, respondedTimestamp, responseDelay, transport);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuntimeResponse {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    durationMillis: ").append(toIndentedString(durationMillis)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    respondedTimestamp: ").append(toIndentedString(respondedTimestamp)).append("\n");
    sb.append("    responseDelay: ").append(toIndentedString(responseDelay)).append("\n");
    sb.append("    transport: ").append(toIndentedString(transport)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("durationMillis");
    openapiFields.add("error");
    openapiFields.add("headers");
    openapiFields.add("respondedTimestamp");
    openapiFields.add("responseDelay");
    openapiFields.add("transport");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RuntimeResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RuntimeResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RuntimeResponse is not found in the empty JSON string", RuntimeResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RuntimeResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RuntimeResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        Error.validateJsonElement(jsonObj.get("error"));
      }
      if ((jsonObj.get("transport") != null && !jsonObj.get("transport").isJsonNull()) && !jsonObj.get("transport").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transport` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transport").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RuntimeResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RuntimeResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RuntimeResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RuntimeResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<RuntimeResponse>() {
           @Override
           public void write(JsonWriter out, RuntimeResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RuntimeResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RuntimeResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RuntimeResponse
   * @throws IOException if the JSON string is invalid with respect to RuntimeResponse
   */
  public static RuntimeResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RuntimeResponse.class);
  }

  /**
   * Convert an instance of RuntimeResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

