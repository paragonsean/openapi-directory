/*
 * Sandbox API
 * Sandbox API
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@getsandbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RuntimeRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:43.511538-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RuntimeRequest {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_FULL_SANDBOX_ID = "fullSandboxId";
  @SerializedName(SERIALIZED_NAME_FULL_SANDBOX_ID)
  private String fullSandboxId;

  public static final String SERIALIZED_NAME_FULL_SANDBOX_NAME = "fullSandboxName";
  @SerializedName(SERIALIZED_NAME_FULL_SANDBOX_NAME)
  private String fullSandboxName;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private Map<String, String> headers = new HashMap<>();

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, String> properties = new HashMap<>();

  public static final String SERIALIZED_NAME_RECEIVED_TIMESTAMP = "receivedTimestamp";
  @SerializedName(SERIALIZED_NAME_RECEIVED_TIMESTAMP)
  private Long receivedTimestamp;

  public static final String SERIALIZED_NAME_SANDBOX_ID = "sandboxId";
  @SerializedName(SERIALIZED_NAME_SANDBOX_ID)
  private String sandboxId;

  public static final String SERIALIZED_NAME_SANDBOX_NAME = "sandboxName";
  @SerializedName(SERIALIZED_NAME_SANDBOX_NAME)
  private String sandboxName;

  public static final String SERIALIZED_NAME_TRANSPORT = "transport";
  @SerializedName(SERIALIZED_NAME_TRANSPORT)
  private String transport;

  public RuntimeRequest() {
  }

  public RuntimeRequest body(String body) {
    this.body = body;
    return this;
  }

  /**
   * The body of the given request.
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public RuntimeRequest contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * The content type of the body, for example &#39;application/json&#39;.
   * @return contentType
   */
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public RuntimeRequest fullSandboxId(String fullSandboxId) {
    this.fullSandboxId = fullSandboxId;
    return this;
  }

  /**
   * The parent ID of the Sandbox that received the request.
   * @return fullSandboxId
   */
  @javax.annotation.Nullable
  public String getFullSandboxId() {
    return fullSandboxId;
  }

  public void setFullSandboxId(String fullSandboxId) {
    this.fullSandboxId = fullSandboxId;
  }


  public RuntimeRequest fullSandboxName(String fullSandboxName) {
    this.fullSandboxName = fullSandboxName;
    return this;
  }

  /**
   * The parent name of the Sandbox that received the request.
   * @return fullSandboxName
   */
  @javax.annotation.Nullable
  public String getFullSandboxName() {
    return fullSandboxName;
  }

  public void setFullSandboxName(String fullSandboxName) {
    this.fullSandboxName = fullSandboxName;
  }


  public RuntimeRequest headers(Map<String, String> headers) {
    this.headers = headers;
    return this;
  }

  public RuntimeRequest putHeadersItem(String key, String headersItem) {
    if (this.headers == null) {
      this.headers = new HashMap<>();
    }
    this.headers.put(key, headersItem);
    return this;
  }

  /**
   * Transport headers for the given request.
   * @return headers
   */
  @javax.annotation.Nullable
  public Map<String, String> getHeaders() {
    return headers;
  }

  public void setHeaders(Map<String, String> headers) {
    this.headers = headers;
  }


  public RuntimeRequest ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * The requestor IP address.
   * @return ip
   */
  @javax.annotation.Nullable
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public RuntimeRequest properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public RuntimeRequest putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * Get properties
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }


  public RuntimeRequest receivedTimestamp(Long receivedTimestamp) {
    this.receivedTimestamp = receivedTimestamp;
    return this;
  }

  /**
   * The epoch time in milliseconds when the request was received.
   * @return receivedTimestamp
   */
  @javax.annotation.Nullable
  public Long getReceivedTimestamp() {
    return receivedTimestamp;
  }

  public void setReceivedTimestamp(Long receivedTimestamp) {
    this.receivedTimestamp = receivedTimestamp;
  }


  public RuntimeRequest sandboxId(String sandboxId) {
    this.sandboxId = sandboxId;
    return this;
  }

  /**
   * The ID of the Sandbox that received the request.
   * @return sandboxId
   */
  @javax.annotation.Nullable
  public String getSandboxId() {
    return sandboxId;
  }

  public void setSandboxId(String sandboxId) {
    this.sandboxId = sandboxId;
  }


  public RuntimeRequest sandboxName(String sandboxName) {
    this.sandboxName = sandboxName;
    return this;
  }

  /**
   * The name of the Sandbox that received the request.
   * @return sandboxName
   */
  @javax.annotation.Nullable
  public String getSandboxName() {
    return sandboxName;
  }

  public void setSandboxName(String sandboxName) {
    this.sandboxName = sandboxName;
  }


  public RuntimeRequest transport(String transport) {
    this.transport = transport;
    return this;
  }

  /**
   * Which transport the request was for, &#39;HTTP&#39;.
   * @return transport
   */
  @javax.annotation.Nullable
  public String getTransport() {
    return transport;
  }

  public void setTransport(String transport) {
    this.transport = transport;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuntimeRequest runtimeRequest = (RuntimeRequest) o;
    return Objects.equals(this.body, runtimeRequest.body) &&
        Objects.equals(this.contentType, runtimeRequest.contentType) &&
        Objects.equals(this.fullSandboxId, runtimeRequest.fullSandboxId) &&
        Objects.equals(this.fullSandboxName, runtimeRequest.fullSandboxName) &&
        Objects.equals(this.headers, runtimeRequest.headers) &&
        Objects.equals(this.ip, runtimeRequest.ip) &&
        Objects.equals(this.properties, runtimeRequest.properties) &&
        Objects.equals(this.receivedTimestamp, runtimeRequest.receivedTimestamp) &&
        Objects.equals(this.sandboxId, runtimeRequest.sandboxId) &&
        Objects.equals(this.sandboxName, runtimeRequest.sandboxName) &&
        Objects.equals(this.transport, runtimeRequest.transport);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, contentType, fullSandboxId, fullSandboxName, headers, ip, properties, receivedTimestamp, sandboxId, sandboxName, transport);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuntimeRequest {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    fullSandboxId: ").append(toIndentedString(fullSandboxId)).append("\n");
    sb.append("    fullSandboxName: ").append(toIndentedString(fullSandboxName)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    receivedTimestamp: ").append(toIndentedString(receivedTimestamp)).append("\n");
    sb.append("    sandboxId: ").append(toIndentedString(sandboxId)).append("\n");
    sb.append("    sandboxName: ").append(toIndentedString(sandboxName)).append("\n");
    sb.append("    transport: ").append(toIndentedString(transport)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("contentType");
    openapiFields.add("fullSandboxId");
    openapiFields.add("fullSandboxName");
    openapiFields.add("headers");
    openapiFields.add("ip");
    openapiFields.add("properties");
    openapiFields.add("receivedTimestamp");
    openapiFields.add("sandboxId");
    openapiFields.add("sandboxName");
    openapiFields.add("transport");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RuntimeRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RuntimeRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RuntimeRequest is not found in the empty JSON string", RuntimeRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RuntimeRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RuntimeRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("contentType") != null && !jsonObj.get("contentType").isJsonNull()) && !jsonObj.get("contentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentType").toString()));
      }
      if ((jsonObj.get("fullSandboxId") != null && !jsonObj.get("fullSandboxId").isJsonNull()) && !jsonObj.get("fullSandboxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullSandboxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullSandboxId").toString()));
      }
      if ((jsonObj.get("fullSandboxName") != null && !jsonObj.get("fullSandboxName").isJsonNull()) && !jsonObj.get("fullSandboxName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullSandboxName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullSandboxName").toString()));
      }
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if ((jsonObj.get("sandboxId") != null && !jsonObj.get("sandboxId").isJsonNull()) && !jsonObj.get("sandboxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sandboxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sandboxId").toString()));
      }
      if ((jsonObj.get("sandboxName") != null && !jsonObj.get("sandboxName").isJsonNull()) && !jsonObj.get("sandboxName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sandboxName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sandboxName").toString()));
      }
      if ((jsonObj.get("transport") != null && !jsonObj.get("transport").isJsonNull()) && !jsonObj.get("transport").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transport` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transport").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RuntimeRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RuntimeRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RuntimeRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RuntimeRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RuntimeRequest>() {
           @Override
           public void write(JsonWriter out, RuntimeRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RuntimeRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RuntimeRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RuntimeRequest
   * @throws IOException if the JSON string is invalid with respect to RuntimeRequest
   */
  public static RuntimeRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RuntimeRequest.class);
  }

  /**
   * Convert an instance of RuntimeRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

