/*
 * Sandbox API
 * Sandbox API
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@getsandbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.RouteConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConfiguredRouteDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:43.511538-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfiguredRouteDetails {
  public static final String SERIALIZED_NAME_ACTIVE_ERROR_OVERRIDE = "activeErrorOverride";
  @SerializedName(SERIALIZED_NAME_ACTIVE_ERROR_OVERRIDE)
  private Boolean activeErrorOverride;

  public static final String SERIALIZED_NAME_ACTIVE_LATENCY = "activeLatency";
  @SerializedName(SERIALIZED_NAME_ACTIVE_LATENCY)
  private Boolean activeLatency;

  public static final String SERIALIZED_NAME_DEFAULT_LATENCY = "defaultLatency";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LATENCY)
  private Integer defaultLatency;

  /**
   * The type of error override applied to this route.
   */
  @JsonAdapter(ErrorOverrideTypeEnum.Adapter.class)
  public enum ErrorOverrideTypeEnum {
    NONE("NONE"),
    
    TIMEOUT("TIMEOUT"),
    
    SERVICE_DOWN("SERVICE_DOWN");

    private String value;

    ErrorOverrideTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ErrorOverrideTypeEnum fromValue(String value) {
      for (ErrorOverrideTypeEnum b : ErrorOverrideTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ErrorOverrideTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ErrorOverrideTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ErrorOverrideTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ErrorOverrideTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ErrorOverrideTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ERROR_OVERRIDE_TYPE = "errorOverrideType";
  @SerializedName(SERIALIZED_NAME_ERROR_OVERRIDE_TYPE)
  private ErrorOverrideTypeEnum errorOverrideType;

  public static final String SERIALIZED_NAME_LOAD_LATENCY = "loadLatency";
  @SerializedName(SERIALIZED_NAME_LOAD_LATENCY)
  private Integer loadLatency;

  public static final String SERIALIZED_NAME_LOAD_THRESHOLD = "loadThreshold";
  @SerializedName(SERIALIZED_NAME_LOAD_THRESHOLD)
  private Integer loadThreshold;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, String> properties = new HashMap<>();

  public static final String SERIALIZED_NAME_ROUTE_CONFIG = "routeConfig";
  @SerializedName(SERIALIZED_NAME_ROUTE_CONFIG)
  private RouteConfig routeConfig;

  public static final String SERIALIZED_NAME_TRANSPORT = "transport";
  @SerializedName(SERIALIZED_NAME_TRANSPORT)
  private String transport;

  public ConfiguredRouteDetails() {
  }

  public ConfiguredRouteDetails activeErrorOverride(Boolean activeErrorOverride) {
    this.activeErrorOverride = activeErrorOverride;
    return this;
  }

  /**
   * Whether error overrides are enabled or not.
   * @return activeErrorOverride
   */
  @javax.annotation.Nullable
  public Boolean getActiveErrorOverride() {
    return activeErrorOverride;
  }

  public void setActiveErrorOverride(Boolean activeErrorOverride) {
    this.activeErrorOverride = activeErrorOverride;
  }


  public ConfiguredRouteDetails activeLatency(Boolean activeLatency) {
    this.activeLatency = activeLatency;
    return this;
  }

  /**
   * Whether latency delays are enabled or not.
   * @return activeLatency
   */
  @javax.annotation.Nullable
  public Boolean getActiveLatency() {
    return activeLatency;
  }

  public void setActiveLatency(Boolean activeLatency) {
    this.activeLatency = activeLatency;
  }


  public ConfiguredRouteDetails defaultLatency(Integer defaultLatency) {
    this.defaultLatency = defaultLatency;
    return this;
  }

  /**
   * A delay in milliseconds applied to requests at a &#39;normal&#39; level.
   * minimum: 0
   * maximum: 30000
   * @return defaultLatency
   */
  @javax.annotation.Nullable
  public Integer getDefaultLatency() {
    return defaultLatency;
  }

  public void setDefaultLatency(Integer defaultLatency) {
    this.defaultLatency = defaultLatency;
  }


  public ConfiguredRouteDetails errorOverrideType(ErrorOverrideTypeEnum errorOverrideType) {
    this.errorOverrideType = errorOverrideType;
    return this;
  }

  /**
   * The type of error override applied to this route.
   * @return errorOverrideType
   */
  @javax.annotation.Nonnull
  public ErrorOverrideTypeEnum getErrorOverrideType() {
    return errorOverrideType;
  }

  public void setErrorOverrideType(ErrorOverrideTypeEnum errorOverrideType) {
    this.errorOverrideType = errorOverrideType;
  }


  public ConfiguredRouteDetails loadLatency(Integer loadLatency) {
    this.loadLatency = loadLatency;
    return this;
  }

  /**
   * A delay in milliseconds applied to requests at a &#39;high&#39; level.
   * minimum: 0
   * maximum: 30000
   * @return loadLatency
   */
  @javax.annotation.Nullable
  public Integer getLoadLatency() {
    return loadLatency;
  }

  public void setLoadLatency(Integer loadLatency) {
    this.loadLatency = loadLatency;
  }


  public ConfiguredRouteDetails loadThreshold(Integer loadThreshold) {
    this.loadThreshold = loadThreshold;
    return this;
  }

  /**
   * The threshold in transactions/second to signify &#39;high&#39; load
   * minimum: 0
   * maximum: 100
   * @return loadThreshold
   */
  @javax.annotation.Nullable
  public Integer getLoadThreshold() {
    return loadThreshold;
  }

  public void setLoadThreshold(Integer loadThreshold) {
    this.loadThreshold = loadThreshold;
  }


  public ConfiguredRouteDetails method(String method) {
    this.method = method;
    return this;
  }

  /**
   * Get method
   * @return method
   */
  @javax.annotation.Nullable
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }


  public ConfiguredRouteDetails path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public ConfiguredRouteDetails properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public ConfiguredRouteDetails putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * Get properties
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }


  public ConfiguredRouteDetails routeConfig(RouteConfig routeConfig) {
    this.routeConfig = routeConfig;
    return this;
  }

  /**
   * Get routeConfig
   * @return routeConfig
   */
  @javax.annotation.Nullable
  public RouteConfig getRouteConfig() {
    return routeConfig;
  }

  public void setRouteConfig(RouteConfig routeConfig) {
    this.routeConfig = routeConfig;
  }


  public ConfiguredRouteDetails transport(String transport) {
    this.transport = transport;
    return this;
  }

  /**
   * Get transport
   * @return transport
   */
  @javax.annotation.Nullable
  public String getTransport() {
    return transport;
  }

  public void setTransport(String transport) {
    this.transport = transport;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfiguredRouteDetails configuredRouteDetails = (ConfiguredRouteDetails) o;
    return Objects.equals(this.activeErrorOverride, configuredRouteDetails.activeErrorOverride) &&
        Objects.equals(this.activeLatency, configuredRouteDetails.activeLatency) &&
        Objects.equals(this.defaultLatency, configuredRouteDetails.defaultLatency) &&
        Objects.equals(this.errorOverrideType, configuredRouteDetails.errorOverrideType) &&
        Objects.equals(this.loadLatency, configuredRouteDetails.loadLatency) &&
        Objects.equals(this.loadThreshold, configuredRouteDetails.loadThreshold) &&
        Objects.equals(this.method, configuredRouteDetails.method) &&
        Objects.equals(this.path, configuredRouteDetails.path) &&
        Objects.equals(this.properties, configuredRouteDetails.properties) &&
        Objects.equals(this.routeConfig, configuredRouteDetails.routeConfig) &&
        Objects.equals(this.transport, configuredRouteDetails.transport);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeErrorOverride, activeLatency, defaultLatency, errorOverrideType, loadLatency, loadThreshold, method, path, properties, routeConfig, transport);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfiguredRouteDetails {\n");
    sb.append("    activeErrorOverride: ").append(toIndentedString(activeErrorOverride)).append("\n");
    sb.append("    activeLatency: ").append(toIndentedString(activeLatency)).append("\n");
    sb.append("    defaultLatency: ").append(toIndentedString(defaultLatency)).append("\n");
    sb.append("    errorOverrideType: ").append(toIndentedString(errorOverrideType)).append("\n");
    sb.append("    loadLatency: ").append(toIndentedString(loadLatency)).append("\n");
    sb.append("    loadThreshold: ").append(toIndentedString(loadThreshold)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    routeConfig: ").append(toIndentedString(routeConfig)).append("\n");
    sb.append("    transport: ").append(toIndentedString(transport)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeErrorOverride");
    openapiFields.add("activeLatency");
    openapiFields.add("defaultLatency");
    openapiFields.add("errorOverrideType");
    openapiFields.add("loadLatency");
    openapiFields.add("loadThreshold");
    openapiFields.add("method");
    openapiFields.add("path");
    openapiFields.add("properties");
    openapiFields.add("routeConfig");
    openapiFields.add("transport");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("errorOverrideType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfiguredRouteDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfiguredRouteDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfiguredRouteDetails is not found in the empty JSON string", ConfiguredRouteDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfiguredRouteDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfiguredRouteDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConfiguredRouteDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("errorOverrideType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorOverrideType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorOverrideType").toString()));
      }
      // validate the required field `errorOverrideType`
      ErrorOverrideTypeEnum.validateJsonElement(jsonObj.get("errorOverrideType"));
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      // validate the optional field `routeConfig`
      if (jsonObj.get("routeConfig") != null && !jsonObj.get("routeConfig").isJsonNull()) {
        RouteConfig.validateJsonElement(jsonObj.get("routeConfig"));
      }
      if ((jsonObj.get("transport") != null && !jsonObj.get("transport").isJsonNull()) && !jsonObj.get("transport").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transport` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transport").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfiguredRouteDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfiguredRouteDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfiguredRouteDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfiguredRouteDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfiguredRouteDetails>() {
           @Override
           public void write(JsonWriter out, ConfiguredRouteDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfiguredRouteDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfiguredRouteDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfiguredRouteDetails
   * @throws IOException if the JSON string is invalid with respect to ConfiguredRouteDetails
   */
  public static ConfiguredRouteDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfiguredRouteDetails.class);
  }

  /**
   * Convert an instance of ConfiguredRouteDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

