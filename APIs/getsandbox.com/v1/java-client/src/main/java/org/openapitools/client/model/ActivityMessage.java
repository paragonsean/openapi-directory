/*
 * Sandbox API
 * Sandbox API
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@getsandbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RuntimeTransaction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ActivityMessage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:43.511538-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActivityMessage {
  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "createdTimestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private Long createdTimestamp;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_MESSAGE_OBJECT = "messageObject";
  @SerializedName(SERIALIZED_NAME_MESSAGE_OBJECT)
  private RuntimeTransaction messageObject;

  /**
   * Gets or Sets messageType
   */
  @JsonAdapter(MessageTypeEnum.Adapter.class)
  public enum MessageTypeEnum {
    REQUEST("request"),
    
    LOG("log");

    private String value;

    MessageTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MessageTypeEnum fromValue(String value) {
      for (MessageTypeEnum b : MessageTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MessageTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MessageTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MessageTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MessageTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MessageTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MESSAGE_TYPE = "messageType";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TYPE)
  private MessageTypeEnum messageType;

  public static final String SERIALIZED_NAME_SANDBOX_ID = "sandboxId";
  @SerializedName(SERIALIZED_NAME_SANDBOX_ID)
  private String sandboxId;

  public ActivityMessage() {
  }

  public ActivityMessage createdTimestamp(Long createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
    return this;
  }

  /**
   * Epoch time in milliseconds when the message was created
   * @return createdTimestamp
   */
  @javax.annotation.Nullable
  public Long getCreatedTimestamp() {
    return createdTimestamp;
  }

  public void setCreatedTimestamp(Long createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
  }


  public ActivityMessage message(String message) {
    this.message = message;
    return this;
  }

  /**
   * The details of the message when type is &#39;log&#39;
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public ActivityMessage messageObject(RuntimeTransaction messageObject) {
    this.messageObject = messageObject;
    return this;
  }

  /**
   * Get messageObject
   * @return messageObject
   */
  @javax.annotation.Nullable
  public RuntimeTransaction getMessageObject() {
    return messageObject;
  }

  public void setMessageObject(RuntimeTransaction messageObject) {
    this.messageObject = messageObject;
  }


  public ActivityMessage messageType(MessageTypeEnum messageType) {
    this.messageType = messageType;
    return this;
  }

  /**
   * Get messageType
   * @return messageType
   */
  @javax.annotation.Nullable
  public MessageTypeEnum getMessageType() {
    return messageType;
  }

  public void setMessageType(MessageTypeEnum messageType) {
    this.messageType = messageType;
  }


  public ActivityMessage sandboxId(String sandboxId) {
    this.sandboxId = sandboxId;
    return this;
  }

  /**
   * The ID of the sandbox that generated this message
   * @return sandboxId
   */
  @javax.annotation.Nullable
  public String getSandboxId() {
    return sandboxId;
  }

  public void setSandboxId(String sandboxId) {
    this.sandboxId = sandboxId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivityMessage activityMessage = (ActivityMessage) o;
    return Objects.equals(this.createdTimestamp, activityMessage.createdTimestamp) &&
        Objects.equals(this.message, activityMessage.message) &&
        Objects.equals(this.messageObject, activityMessage.messageObject) &&
        Objects.equals(this.messageType, activityMessage.messageType) &&
        Objects.equals(this.sandboxId, activityMessage.sandboxId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdTimestamp, message, messageObject, messageType, sandboxId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivityMessage {\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    messageObject: ").append(toIndentedString(messageObject)).append("\n");
    sb.append("    messageType: ").append(toIndentedString(messageType)).append("\n");
    sb.append("    sandboxId: ").append(toIndentedString(sandboxId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdTimestamp");
    openapiFields.add("message");
    openapiFields.add("messageObject");
    openapiFields.add("messageType");
    openapiFields.add("sandboxId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActivityMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActivityMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActivityMessage is not found in the empty JSON string", ActivityMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActivityMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActivityMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      // validate the optional field `messageObject`
      if (jsonObj.get("messageObject") != null && !jsonObj.get("messageObject").isJsonNull()) {
        RuntimeTransaction.validateJsonElement(jsonObj.get("messageObject"));
      }
      if ((jsonObj.get("messageType") != null && !jsonObj.get("messageType").isJsonNull()) && !jsonObj.get("messageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageType").toString()));
      }
      // validate the optional field `messageType`
      if (jsonObj.get("messageType") != null && !jsonObj.get("messageType").isJsonNull()) {
        MessageTypeEnum.validateJsonElement(jsonObj.get("messageType"));
      }
      if ((jsonObj.get("sandboxId") != null && !jsonObj.get("sandboxId").isJsonNull()) && !jsonObj.get("sandboxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sandboxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sandboxId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActivityMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActivityMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActivityMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActivityMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<ActivityMessage>() {
           @Override
           public void write(JsonWriter out, ActivityMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActivityMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActivityMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActivityMessage
   * @throws IOException if the JSON string is invalid with respect to ActivityMessage
   */
  public static ActivityMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActivityMessage.class);
  }

  /**
   * Convert an instance of ActivityMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

